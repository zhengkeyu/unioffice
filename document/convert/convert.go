//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package convert

import (
	_ab "bytes"
	_fe "gitee.com/greatmusicians/unioffice/common/tempstorage"
	_ef "gitee.com/greatmusicians/unioffice/document"
	_bc "gitee.com/greatmusicians/unioffice/measurement"
	_ee "gitee.com/greatmusicians/unioffice/schema/soo/dml"
	_gc "gitee.com/greatmusicians/unioffice/schema/soo/dml/picture"
	_g "gitee.com/greatmusicians/unioffice/schema/soo/ofc/sharedTypes"
	_de "gitee.com/greatmusicians/unioffice/schema/soo/wml"
	_fg "github.com/unidoc/unipdf/v3/creator"
	_d "github.com/unidoc/unipdf/v3/model"
	_b "io/ioutil"
	_e "log"
	_c "strconv"
	_f "strings"
)

func (_dge *convertContext) addAbsoluteEGPC(_ccd []*_de.EG_PContent, _afb *_de.CT_PPr) bool {
	_dge.newParagraph()
	_fcbf(_afb, _dge._bbeb)
	_dge.determineParagraphBounds()
	_dge.addParagraphImages(_ccd)
	_dge.addParagraphTextboxes(_ccd)
	_dge.newLine()
	_dge.newWord()
	if len(_ccd) == 0 {
		_dge.addEmptyLine()
		return false
	}
	for _, _cgef := range _ccd {
		for _, _befa := range _cgef.FldSimple {
			if _befa != nil {
				_dge.addAbsoluteEGPC(_befa.EG_PContent, _afb)
			}
		}
		if _gbc := _cgef.Hyperlink; _gbc != nil {
			_dge._gfb = _gbc
			_dge.addAbsoluteCRC(_gbc.EG_ContentRunContent, _afb.RPr)
		}
		_dge._gfb = nil
		if _dge.addAbsoluteCRC(_cgef.EG_ContentRunContent, _afb.RPr) {
			return true
		}
	}
	_dge.addCurrentWordToParagraph()
	return false
}
func _fcbf(_gfa *_de.CT_PPr, _gcf *paragraph) (float64, float64) {
	if _gfa == nil {
		return 0, 0
	}
	if _gfa.Jc != nil {
		switch _gfa.Jc.ValAttr {
		case _de.ST_JcRight:
			_gcf._gcc = _fg.TextAlignmentRight
		case _de.ST_JcCenter:
			_gcf._gcc = _fg.TextAlignmentCenter
		case _de.ST_JcBoth:
			_gcf._gcc = _fg.TextAlignmentJustify
		default:
			_gcf._gcc = _fg.TextAlignmentLeft
		}
	}
	var _egaa, _gabgcf, _faba, _bfc, _ggbf float64
	_ffe := 1.0
	if _dgdg := _gfa.Spacing; _dgdg != nil {
		if _aebf := _dgdg.BeforeAttr; _aebf != nil {
			if _aebf.ST_UnsignedDecimalNumber != nil {
				_egaa = _ggcd(int64(*_aebf.ST_UnsignedDecimalNumber))
			}
		}
		if _ddfe := _dgdg.AfterAttr; _ddfe != nil {
			if _ddfe.ST_UnsignedDecimalNumber != nil {
				_gabgcf = _ggcd(int64(*_ddfe.ST_UnsignedDecimalNumber))
			}
		}
		if _dbff := _dgdg.LineAttr; _dbff != nil {
			if _dbff.Int64 != nil && *_dbff.Int64 != 0 {
				_ffe = float64(*_dbff.Int64 / 240)
			}
		}
	}
	if _feg := _gfa.Ind; _feg != nil {
		if _fbbe := _feg.FirstLineAttr; _fbbe != nil {
			if _fbbe.ST_UnsignedDecimalNumber != nil {
				_ggbf = _ggcd(int64(*_fbbe.ST_UnsignedDecimalNumber))
			}
		}
		if _fag := _feg.LeftAttr; _fag != nil {
			if _fag.Int64 != nil {
				_faba = _ggcd(*_fag.Int64)
			}
		}
		if _fca := _feg.RightAttr; _fca != nil {
			if _fca.Int64 != nil {
				_bfc = _ggcd(*_fca.Int64)
			}
		}
	}
	_gcf._fd = &rectangle{_dec: _egaa, _fc: _gabgcf, _efc: _faba, _db: _bfc}
	_gcf._cee = _ggbf
	_gcf._gab = _ffe
	return _egaa, _faba
}

const _aa = 0.67
const _bb = 6

func _edb(_cgae *_de.CT_TblWidth, _gbgf float64) float64 {
	if _eebb := _cgae.WAttr; _eebb != nil {
		if _bfa := _eebb.ST_DecimalNumberOrPercent; _bfa != nil {
			if _bbag := _bfa.ST_UnqualifiedPercentage; _bbag != nil {
				switch _cgae.TypeAttr {
				case _de.ST_TblWidthDxa:
					return float64(*_bbag) / 56.7
				case _de.ST_TblWidthPct:
					return _gbgf
				default:
					return _gbgf
				}
			}
		}
	}
	return _gbgf
}
func _feag(_gada *_de.CT_Border) (_fg.CellBorderStyle, *_fg.Color, float64) {
	if _gada == nil {
		return _fg.CellBorderStyleNone, nil, 0
	}
	var _fdaa _fg.CellBorderStyle
	switch _gada.ValAttr {
	case _de.ST_BorderSingle:
		_fdaa = _fg.CellBorderStyleSingle
	case _de.ST_BorderDouble:
		_fdaa = _fg.CellBorderStyleDouble
	default:
		_fdaa = _fg.CellBorderStyleNone
	}
	var _gaea _fg.Color
	if _dfab := _gada.ColorAttr; _dfab != nil {
		if _gffa := _dfab.ST_HexColorRGB; _gffa != nil {
			_gaea = _fg.ColorRGBFromHex("\u0023" + *_gffa)
		}
	}
	_aab := 0.0
	if _ccddc := _gada.SzAttr; _ccddc != nil {
		_aab = float64(*_ccddc) / 8 / _bc.Millimeter
	}
	return _fdaa, &_gaea, _aab
}

type textbox struct {
	_ebe *_fg.Block
	_fgc float64
	_fac float64
	_efa bool
	_bef float64
	_eae _fg.Color
}

func (_fggg *convertContext) addAbsoluteCRC(_fdg []*_de.EG_ContentRunContent, _ebec *_de.CT_ParaRPr) bool {
	for _, _fbb := range _fdg {
		if _gbdb := _fbb.R; _gbdb != nil {
			_defa := _eafc(_fggg._beda, _gbdb.RPr, _ebec)
			if _fggg._fcfa != "" {
				_fggg.addAbsoluteRIC(nil, _defa)
				_fggg._fcfa = ""
			}
			for _, _fcc := range _gbdb.EG_RunInnerContent {
				if _fggg.addAbsoluteRIC(_fcc, _defa) {
					return true
				}
			}
			for _, _bgd := range _gbdb.Extra {
				if _gbdc, _fccc := _bgd.(*_de.AlternateContentRun); _fccc {
					if _bgda := _gbdc.Choice; _bgda != nil {
						if _egb := _bgda.Drawing; _egb != nil {
							if len(_egb.Inline) > 0 {
								_fggg.addInlineTextbox(_egb, _defa)
							}
						}
					}
				}
			}
		}
	}
	return false
}
func (_ebeb *convertContext) newLine() {
	_fefa := 0.0
	if _ebeb._bbeb == nil {
		_ebeb.newParagraph()
	}
	_fefa = _ebeb._bbeb._gd + _ebeb._bbeb._fd._dec
	_bbda := &line{}
	if len(_ebeb._bbeb._gad) == 0 {
		_bbda._ba = _ebeb._bbeb._edc
	} else {
		_bbda._ba = _ebeb._bbeb._dbg
	}
	_bbda._gf = _ebeb._bbeb._be
	_bbda._df = _bbda._ba
	_bbda._bbb = _fefa
	_ebeb._bbeb._gad = append(_ebeb._bbeb._gad, _bbda)
	_ebeb._gcda = _bbda
	_ebeb.newSpan()
}

type romanMatch struct {
	_dgb  int
	_bdcd string
}

var _fad = map[string][]string{"Helvetica": {"Helvetica", "Helvetica-Bold", "Helvetica\u002dOblique", "Helvetica\u002dBoldOblique"}, "Courier": {"Courier", "Courier\u002dBold", "Courier\u002dOblique", "Courier\u002dBoldOblique"}, "Times\u0020New\u0020Roman": {"Times\u002dRoman", "Times\u002dBold", "Times\u002dItalic", "Times\u002dBoldItalic"}, "default": {"Helvetica", "Helvetica-Bold", "Helvetica\u002dOblique", "Helvetica\u002dBoldOblique"}}

func (_cae *convertContext) drawPages() {
	for _, _bgg := range _cae._bdf {
		_cae._ebgg.NewPage()
		_cae.drawPage(_bgg)
	}
}

type word struct {
	_eg  []*symbol
	_afa float64
	_fee float64
	_efg bool
}

func (_cgde *convertContext) makeRunStyle(_ggfc *_de.CT_RPr, _ddc, _cgefb, _bgac bool) (_fg.TextStyle, bool, bool) {
	_fcec := _cgde._ebgg.NewTextStyle()
	if _ggfc != nil {
		_bdfa := _fg.ColorBlack
		_acbcd := 4.25
		_aedd := 0
		_gfgg := "default"
		_ffadd := 0.0
		if _ggfc.Color != nil {
			_bfef := _ggfc.Color.ValAttr.ST_HexColorRGB
			if _bfef != nil {
				_bdfa = _fg.ColorRGBFromHex("\u0023" + *_bfef)
			}
		}
		if _bgac {
			_aggbf, _bdgb, _cbdf := _bdfa.ToRGB()
			_aggbf, _bdgb, _cbdf = _aaea(_aggbf), _aaea(_bdgb), _aaea(_cbdf)
			_bdfa = _fg.ColorRGBFromArithmetic(_aggbf, _bdgb, _cbdf)
		}
		if _agdb := _ggfc.Spacing; _agdb != nil {
			_ffadd = _ggcd(*_agdb.ValAttr.Int64)
		}
		var _gbed float64
		if _dadec := _ggfc.Sz; _dadec != nil {
			_gbed = float64(*_dadec.ValAttr.ST_UnsignedDecimalNumber)
		} else if _bggaa := _ggfc.SzCs; _bggaa != nil {
			_gbed = float64(*_bggaa.ValAttr.ST_UnsignedDecimalNumber)
		}
		if _gbed != 0 {
			_acbcd = _gbed / 24 * 4.25
		}
		_begb := _ggfc.B != nil || _ggfc.BCs != nil
		_dgaa := _ggfc.I != nil || _ggfc.ICs != nil
		if _begb && _dgaa {
			_aedd = 3
		} else if _begb {
			_aedd = 1
		} else if _dgaa {
			_aedd = 2
		}
		if _bgcff := _ggfc.RFonts; _bgcff != nil {
			if _bda := _bgcff.AsciiAttr; _bda != nil {
				_gfgg = *_bda
			} else if _gfdgc := _bgcff.HAnsiAttr; _gfdgc != nil {
				_gfgg = *_gfdgc
			}
		}
		if _efec := _ggfc.VertAlign; _efec != nil {
			_ggca := _efec.ValAttr
			_ddc = _ggca == _g.ST_VerticalAlignRunSuperscript
			_cgefb = _ggca == _g.ST_VerticalAlignRunSubscript
		}
		_fcec.Color = _bdfa
		if _acbcd > _cgde._faf {
			_cgde._faf = _acbcd
		}
		if _ddc || _cgefb {
			_acbcd *= 0.64
		}
		if _bgac {
			if _ddc {
				_fcec.TextRise = 1.5
			}
			if _cgefb {
				_fcec.TextRise = -1.5
			}
		}
		_fcec.FontSize = _acbcd
		_fcec.CharSpacing = _ffadd
		_deba, _dedf := _fad[_gfgg]
		if !_dedf {
			_deba = _fad["default"]
		}
		_dbd := _d.StdFontName(_deba[_aedd])
		_fcec.Font = _d.NewStandard14FontMustCompile(_dbd)
	}
	return _fcec, _ddc, _cgefb
}
func (_bcd *convertContext) adjustHeights(_ade float64) {
	if _bcd._gcda._bg < _ade {
		_bcd._bbeb._gd += (_ade - _bcd._gcda._bg)
		_bcd._gcda._bg = _ade
	}
}

type span struct {
	_aba float64
	_eab float64
	_fec []*word
}

func (_aecd *convertContext) addHdrFtr(_eda []*_de.CT_P) {
	for _, _geea := range _eda {
		_acf := _aecd._ebgg.NewStyledParagraph()
		_aecd._egce = _acf
		_bcc := _gbfg(_aecd._beda, _geea.PPr)
		_cdd, _bdda := _afda(_bcc, _acf)
		_aecd.addRelativeEGPC(_geea.EG_PContent, _bcc.RPr)
		if _aecd._dbef {
			_aecd._ebgg.DrawHeader(func(_ffb *_fg.Block, _efd _fg.HeaderFunctionArgs) {
				_acf.SetPos(_aecd._gdfa+_bdda, _cdd+_aecd._dag)
				_ffb.Draw(_acf)
			})
		} else if _aecd._dafg {
			_aecd._ebgg.DrawFooter(func(_cfcd *_fg.Block, _faea _fg.FooterFunctionArgs) {
				_acf.SetPos(_aecd._gdfa+_bdda, _cdd+_aecd._ebgd-_aecd._faf)
				_cfcd.Draw(_acf)
			})
		}
	}
}
func _ffdf(_dcfb *_de.CT_TblPr, _bdb *_de.CT_TcPr, _dff, _eaec, _bfgb, _bcfe int) *_de.CT_TcPr {
	if _bdb == nil {
		_bdb = _de.NewCT_TcPr()
	}
	if _bdb.TcBorders == nil {
		if _gagc := _dcfb.TblBorders; _gagc != nil {
			_bdb.TcBorders = _de.NewCT_TcBorders()
			_bdb.TcBorders.Top = _afde(_gagc.Top, _gagc.InsideH, _dff == 0)
			_bdb.TcBorders.Bottom = _afde(_gagc.Bottom, _gagc.InsideH, _dff == _bfgb-1)
			_bdb.TcBorders.Left = _afde(_gagc.Left, _gagc.InsideV, _eaec == 0)
			_bdb.TcBorders.Right = _afde(_gagc.Right, _gagc.InsideV, _eaec == _bcfe-1)
		}
	} else {
		if _aegf := _dcfb.TblBorders; _aegf != nil {
			if _bdb.TcBorders.Top == nil {
				_bdb.TcBorders.Top = _afde(_aegf.Top, _aegf.InsideH, _dff == 0)
			}
			if _bdb.TcBorders.Bottom == nil {
				_bdb.TcBorders.Bottom = _afde(_aegf.Bottom, _aegf.InsideH, _dff == _bfgb-1)
			}
			if _bdb.TcBorders.Left == nil {
				_bdb.TcBorders.Left = _afde(_aegf.Left, _aegf.InsideV, _eaec == 0)
			}
			if _bdb.TcBorders.Right == nil {
				_bdb.TcBorders.Right = _afde(_aegf.Right, _aegf.InsideV, _eaec == _bcfe-1)
			}
		}
	}
	if _bdb.Shd == nil {
		if _ebda := _dcfb.Shd; _ebda != nil {
			_bdb.Shd = _ebda
		}
	} else {
		if _dcfb.Shd != nil && _bdb.Shd.FillAttr == nil {
			_bdb.Shd.FillAttr = _dcfb.Shd.FillAttr
		}
	}
	if _bdb.TcMar == nil {
		if _fbbd := _dcfb.TblCellMar; _fbbd != nil {
			_bdb.TcMar = _de.NewCT_TcMar()
			_bdb.TcMar.Left = _fbbd.Left
		}
	} else {
		if _dcfb.TblCellMar != nil && _bdb.TcMar.Left == nil {
			_bdb.TcMar.Left = _dcfb.TblCellMar.Left
		}
	}
	return _bdb
}
func _dfadd(_ebc, _ggaf string, _abf, _cea bool) []*symbol {
	_fdfg := []*symbol{}
	for _, _acad := range _ebc {
		_adfd := &symbol{_da: string(_acad), _feeb: _abf, _egf: _cea, _bgc: _ggaf}
		_fdfg = append(_fdfg, _adfd)
	}
	return _fdfg
}
func (_gea *convertContext) addParagraphImages(_gdgc []*_de.EG_PContent) {
	for _, _eabc := range _gdgc {
		for _, _dca := range _eabc.EG_ContentRunContent {
			if _bffc := _dca.R; _bffc != nil {
				for _, _bed := range _bffc.EG_RunInnerContent {
					if _bde := _bed.Drawing; _bde != nil {
						for _, _gce := range _bde.Anchor {
							var _abab, _cgd, _dbf, _cacd float64
							_cfb, _gbb := _gce.PositionH, _gce.PositionV
							if _dade := _cfb.Choice; _dade != nil {
								if _dade.PosOffset != nil {
									_abab = _bc.FromEMU(int64(*_dade.PosOffset)) / _bc.Millimeter
								}
							}
							if _bag := _gbb.Choice; _bag != nil {
								if _bag.PosOffset != nil {
									_cgd = _bc.FromEMU(int64(*_bag.PosOffset)) / _bc.Millimeter
								}
							}
							if _ebg := _gce.Extent; _ebg != nil {
								_cacd = _bc.FromEMU(_ebg.CxAttr) / _bc.Millimeter
								_dbf = _bc.FromEMU(_ebg.CyAttr) / _bc.Millimeter
							}
							_fcg := _gea._bbeb._eag + _cgd
							_afbf := _fcg + _dbf
							_acag := _gea._bbeb._dbg + _abab
							_cgfb := _acag + _cacd
							_bec := _cgd + _dbf
							if _bec > _gea._bbeb._aad {
								_gea._bbeb._aad = _bec
							}
							if _gce.Choice != nil && _gce.Choice.WrapNone == nil {
								_gea._bbeb._af = append(_gea._bbeb._af, &zoneToSkip{_add: &rectangle{_dec: _fcg, _fc: _afbf, _efc: _acag, _db: _cgfb}, _fa: _gce.Choice})
							}
							if _acbf := _gce.Graphic; _acbf != nil {
								_baa, _ecfd := _gea.makePdfImageFromGraphics(_acbf)
								if _ecfd != nil {
									_e.Println("Cannot\u0020read\u0020image:", _ecfd)
								}
								if _baa != nil {
									_baa.Scale(_cacd/_baa.Width(), _dbf/_baa.Height())
									_baa.SetPos(_acag, _fcg)
									if _gce.BehindDocAttr {
										_gea._bbeb._eb = append(_gea._bbeb._eb, _baa)
									} else {
										_gea._bbeb._fcf = append(_gea._bbeb._fcf, _baa)
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

const _fbcd = 2.5

func (_eagc *convertContext) newWord() { _eagc._becd = &word{_efg: true, _afa: _eagc._gcda._df} }
func (_agd *convertContext) addParagraphTextboxes(_fab []*_de.EG_PContent) {
	for _, _cbd := range _fab {
		for _, _cfba := range _cbd.EG_ContentRunContent {
			if _fed := _cfba.R; _fed != nil {
				for _, _ccf := range _fed.Extra {
					if _gfdg, _gda := _ccf.(*_de.AlternateContentRun); _gda {
						if _abc := _gfdg.Choice; _abc != nil {
							if _gec := _abc.Drawing; _gec != nil {
								for _, _cdbe := range _gec.Anchor {
									var _bcb, _begg, _cgdc, _dbe float64
									_aeg, _gbad := _cdbe.PositionH, _cdbe.PositionV
									if _dcag := _aeg.Choice; _dcag != nil {
										if _dcag.PosOffset != nil {
											_bcb = _bc.FromEMU(int64(*_dcag.PosOffset)) / _bc.Millimeter
										}
									}
									if _dea := _gbad.Choice; _dea != nil {
										if _dea.PosOffset != nil {
											_begg = _bc.FromEMU(int64(*_dea.PosOffset)) / _bc.Millimeter
										}
									}
									if _gee := _cdbe.Extent; _gee != nil {
										_dbe = _bc.FromEMU(_gee.CxAttr) / _bc.Millimeter
										_cgdc = _bc.FromEMU(_gee.CyAttr) / _bc.Millimeter
									}
									_fgd := _agd._bbeb._eag + _begg
									_aefee := _fgd + _cgdc
									_gacd := _agd._bbeb._dbg + _bcb
									_gdae := _gacd + _dbe
									_eceg := _begg + _cgdc
									if _eceg > _agd._bbeb._aad {
										_agd._bbeb._aad = _eceg
									}
									if _cdbe.Choice != nil && _cdbe.Choice.WrapNone == nil {
										_agd._bbeb._af = append(_agd._bbeb._af, &zoneToSkip{_add: &rectangle{_dec: _fgd, _fc: _aefee, _efc: _gacd, _db: _gdae}, _fa: _cdbe.Choice})
									}
									if _cged := _cdbe.Graphic; _cged != nil {
										_bgdab, _bcf := _agd.makePdfBlockFromGraphics(_cged)
										if _bcf != nil {
											_e.Println("Cannot\u0020read textbox:", _bcf)
										}
										if _bgdab != nil {
											_bgdab._ebe.Scale(_dbe/_bgdab._ebe.Width(), _cgdc/_bgdab._ebe.Height())
											_bgdab._fgc = _gacd
											_bgdab._fac = _fgd
											if _cdbe.BehindDocAttr {
												_agd._bbeb._dc = append(_agd._bbeb._dc, _bgdab)
											} else {
												_agd._bbeb._dd = append(_agd._bbeb._dd, _bgdab)
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
func (_bdc *convertContext) addInlineTextbox(_bacc *_de.CT_Drawing, _cgfc *_de.CT_RPr) {
	for _, _aada := range _bacc.Inline {
		if _gbdbg := _aada.Graphic; _gbdbg != nil {
			_fece, _cbef := _bdc.makePdfBlockFromGraphics(_gbdbg)
			if _cbef != nil {
				_e.Println("Cannot\u0020read textbox:", _cbef)
			}
			if _fece == nil {
				return
			}
			_fegf := _aada.Extent
			if _fegf == nil {
				return
			}
			_bgga := _bc.FromEMU(_fegf.CxAttr) / _bc.Millimeter
			_bbfd := _bc.FromEMU(_fegf.CyAttr) / _bc.Millimeter
			_fece._ebe.Scale(_bgga/_fece._ebe.Width(), _bbfd/_fece._ebe.Height())
			_bdc.addInlineBlock(&symbol{_cgf: _bbfd, _bf: _bgga, _dab: _fece})
		}
	}
}
func (_egc *convertContext) addCurrentWordToParagraph() {
	for {
		_edg := _egc._gcda._df
		_aag := _edg + _egc._becd._fee
		if _aag > _egc._gcda._gf {
			_egc.newLine()
		}
		_gbe := _egc._bbeb._eag + _egc._gcda._bbb
		_abdd := _gbe + _egc._gcda._bg
		_gbdd := false
		_eec := append(_egc._aeef._cge, _egc._bbeb._af...)
		for _, _dgg := range _eec {
			_fabb := _dgg._add
			if ((_gbe > _fabb._dec && _gbe < _fabb._fc) || (_abdd > _fabb._dec && _abdd < _fabb._fc)) && ((_edg > _fabb._efc && _edg < _fabb._db) || (_aag > _fabb._efc && _aag < _fabb._db)) {
				_gbdd = true
				if _egc._gcda._df < _fabb._db {
					_egc._fbae._eab = _fabb._efc
					_egc._gcda._df = _fabb._db
					_egc.newSpan()
				}
			}
		}
		if !_gbdd {
			break
		}
	}
	if !_egc._becd._efg || len(_egc._fbae._fec) > 0 {
		_egc._becd._afa = _egc._gcda._df
		_egc._fbae._fec = append(_egc._fbae._fec, _egc._becd)
		_egc._gcda._df += _egc._becd._fee
		for _, _bbf := range _egc._becd._eg {
			_egc.adjustHeights(_bbf._cgf)
		}
	}
}

type line struct {
	_bbb float64
	_ba  float64
	_gf  float64
	_df  float64
	_bg  float64
	_dbb []*span
}

func (_faee *convertContext) addAbsoluteTable(_ccdd *_de.CT_Tbl) *_fg.Table {
	_ggb := _ccdd.TblGrid
	if _ggb == nil {
		return nil
	}
	_cacf := len(_ggb.GridCol)
	if _cacf == 0 {
		return nil
	}
	_dfc := []float64{}
	_dcec := []float64{}
	_fedf := 0.0
	for _, _dfcf := range _ggb.GridCol {
		_gef := 0.0
		if _dfcf.WAttr.ST_UnsignedDecimalNumber != nil {
			_gef = _ggcd(int64(*_dfcf.WAttr.ST_UnsignedDecimalNumber))
		}
		_dfc = append(_dfc, _gef)
		_fedf += _gef
	}
	for _feec := 0; _feec < _cacf; _feec++ {
		_dcec = append(_dcec, _dfc[_feec]/_fedf)
	}
	_gae := _faee._ebgg.NewTable(_cacf)
	_gae.SetColumnWidths(_dcec...)
	_ecef := _dfcg(_faee._beda, _ccdd.TblPr)
	_ccc := len(_ccdd.EG_ContentRowContent)
	for _ffcf, _bbbb := range _ccdd.EG_ContentRowContent {
		if _bbbb == nil {
			continue
		}
		if _cad := _bbbb.Tr; len(_cad) > 0 {
			_acbg := _cad[0]
			for _bae, _baeg := range _acbg.EG_ContentCellContent {
				if _gff := _baeg.Tc; len(_gff) > 0 {
					_facaf := _gff[0]
					if _facaf != nil {
						_gfc := _gae.NewCell()
						_dadb := _ffdf(_ecef, _facaf.TcPr, _ffcf, _bae, _ccc, _cacf)
						_ccdf := 1.9
						_cbf := _fg.CellVerticalAlignmentTop
						if _dadb != nil {
							if _cccd := _dadb.TcBorders; _cccd != nil {
								if _cbc := _cccd.Left; _cbc != nil {
									_bcfd, _abfg, _debb := _feag(_cbc)
									_gfc.SetBorder(_fg.CellBorderSideLeft, _bcfd, _debb)
									if _abfg != nil && *_abfg != nil {
										_gfc.SetSideBorderColor(_fg.CellBorderSideLeft, *_abfg)
									}
								}
								if _ffa := _cccd.Top; _ffa != nil {
									_dbgg, _dgead, _acbb := _feag(_ffa)
									_gfc.SetBorder(_fg.CellBorderSideTop, _dbgg, _acbb)
									if _dgead != nil && *_dgead != nil {
										_gfc.SetSideBorderColor(_fg.CellBorderSideTop, *_dgead)
									}
								}
								if _gecd := _cccd.Right; _gecd != nil {
									_cgbg, _fabc, _dcb := _feag(_gecd)
									_gfc.SetBorder(_fg.CellBorderSideRight, _cgbg, _dcb)
									if _fabc != nil && *_fabc != nil {
										_gfc.SetSideBorderColor(_fg.CellBorderSideRight, *_fabc)
									}
								}
								if _ded := _cccd.Bottom; _ded != nil {
									_cebg, _aggb, _dgf := _feag(_ded)
									_gfc.SetBorder(_fg.CellBorderSideBottom, _cebg, _dgf)
									if _aggb != nil && *_aggb != nil {
										_gfc.SetSideBorderColor(_fg.CellBorderSideBottom, *_aggb)
									}
								}
							} else {
								_gfc.SetBorder(_fg.CellBorderSideAll, _fg.CellBorderStyleSingle, 0.125)
								_gfc.SetBorderColor(_fg.ColorBlack)
							}
							if _gcg := _dadb.Shd; _gcg != nil {
								if _fbg := _gcg.FillAttr; _fbg != nil {
									if _fddg := _fbg.ST_HexColorRGB; _fddg != nil {
										_ege := _fg.ColorRGBFromHex("\u0023" + *_fddg)
										_gfc.SetBackgroundColor(_ege)
									}
								}
							}
							if _ffd := _dadb.TcMar; _ffd != nil {
								if _edfg := _ffd.Left; _edfg != nil {
									_ccdf = _edb(_edfg, 1.9)
								}
							}
							if _egda := _dadb.VAlign; _egda != nil {
								switch _egda.ValAttr {
								case _de.ST_VerticalJcCenter:
									_cbf = _fg.CellVerticalAlignmentMiddle
								case _de.ST_VerticalJcBottom:
									_cbf = _fg.CellVerticalAlignmentBottom
								}
							}
						}
						_gfc.SetVerticalAlignment(_cbf)
						_gfc.SetIndent(_ccdf)
						_ebdc := _facaf.EG_BlockLevelElts
						_cgfbg := _faee._ebgg.NewStyledParagraph()
						_gaf := false
						for _, _efae := range _ebdc {
							for _, _ggfb := range _efae.EG_ContentBlockContent {
								_dgga := true
								for _, _bgbef := range _ggfb.P {
									_bcgc := _gbfg(_faee._beda, _bgbef.PPr)
									for _, _dbfe := range _bgbef.EG_PContent {
										for _, _dgd := range _dbfe.EG_ContentRunContent {
											if _gefe := _dgd.R; _gefe != nil {
												_dcab := _eafc(_faee._beda, _gefe.RPr, _bcgc.RPr)
												for _, _cecc := range _gefe.EG_RunInnerContent {
													var _gggd *_fg.TextChunk
													if _cecc.T != nil && _cecc.T.Content != "" {
														if _gaf {
															if _dgga {
																_daee := _cgfbg.Append("\u000a")
																_bdec := _faee._ebgg.NewTextStyle()
																_bdec.FontSize = 0
																_daee.Style = _bdec
																_dgga = false
															}
														} else {
															_gaf = true
														}
														_gggd = _cgfbg.Append(_cecc.T.Content)
														_gggd.Style, _, _ = _faee.makeRunStyle(_dcab, false, false, false)
													}
												}
											}
										}
									}
									if _cgfbg != nil {
										_afda(_bcgc, _cgfbg)
									}
								}
							}
						}
						_gfc.SetContent(_cgfbg)
					}
				}
			}
			_ecfda := 1.0
			if _dcga := _acbg.TrPr; _dcga != nil {
				if len(_dcga.TrHeight) != 0 {
					_fefc := _dcga.TrHeight[0]
					if _fefg := _fefc.ValAttr; _fefg != nil {
						if _fefg.ST_UnsignedDecimalNumber != nil {
							_ecfda = _ggcd(int64(*_fefg.ST_UnsignedDecimalNumber))
						}
					}
				}
			}
			_gae.SetRowHeight(_gae.CurRow(), _ecfda)
		}
	}
	_acae := 0.0
	_bca := true
	if _fcga := _ecef.Jc; _fcga != nil {
		_bca = _fcga.ValAttr == _de.ST_JcTableLeft
	}
	if _bca {
		if _ebaa := _ecef.TblInd; _ebaa != nil {
			_acae = _edb(_ebaa, 50)
		}
	}
	_ggd := 1.0
	_gae.SetMargins(_acae-1, 0, _ggd, _ggd)
	return _gae
}
func (_acg *convertContext) addEmptyLine() { _acg.addTextSymbol(&symbol{_da: "\u000d", _bf: 0}) }
func (_dcaf *convertContext) addSeparator() {
	_dcaf.newParagraph()
	_dcaf._bbeb._abd = true
	_dcaf._bbeb._gd = _bb
	if _dcaf.currentParagraphOverflowsCurrentPage() {
		_dcaf.newPage()
		_dcaf._bbeb._eag = _dcaf._aeef._ec
	}
	_dcaf.addCurrentParagraphToCurrentPage()
}
func (_fce *convertContext) determineParagraphBounds() {
	_fce._bbeb._dbg = _fce._aeef._ga._efc + _fce._bbeb._fd._efc
	_fce._bbeb._edc = _fce._bbeb._dbg + _fce._bbeb._cee
	_fce._bbeb._be = _fce._aeef._ga._db - _fce._bbeb._fd._db
}

type note struct {
	_ce string
	_ad []*_de.EG_BlockLevelElts
	_cg *_fg.Block
}

func (_agaa *convertContext) addEndnotes() {
	for _bcbd, _acde := range _agaa._bdeb {
		if _bcbd == 0 {
			_agaa.addSeparator()
		}
		_agaa._fcfa = _acde._ce
		for _bceg, _dcd := range _acde._ad {
			if _bcbd != 0 || _bceg != 0 {
				_agaa._dgc = true
			}
			_agaa.addAbsoluteCBCs(_dcd.EG_ContentBlockContent)
		}
	}
	_agaa._dgc = false
}
func _gb(_ag *_fg.Creator, _bab *textbox) {
	_bab._ebe.SetPos(_bab._fgc, _bab._fac)
	_ag.Draw(_bab._ebe)
	if _bab._efa {
		_bac := _bab._fgc
		_acb := _bab._fgc + _bab._ebe.Width()
		_acea := _bab._fac
		_ae := _bab._fac + _bab._ebe.Height()
		_cab(_ag, _bac, _acea, _acb, _acea, _bab._bef, _bab._eae)
		_cab(_ag, _bac, _acea, _bac, _ae, _bab._bef, _bab._eae)
		_cab(_ag, _bac, _ae, _acb, _ae, _bab._bef, _bab._eae)
		_cab(_ag, _acb, _acea, _acb, _ae, _bab._bef, _bab._eae)
	}
}
func (_gbdf *convertContext) currentParagraphOverflowsCurrentPage() bool {
	_eba := _gbdf._bbeb._eag + _gbdf._bbeb._fd._dec + _gbdf._bbeb._fd._fc
	_cgfa := _gbdf._aeef._ga._fc - _gbdf._bbeb._dg
	if len(_gbdf._aeef._gg) == 0 && len(_gbdf._bbeb._cd) > 0 {
		_cgfa -= _bb
	}
	return _eba+_gbdf._bbeb._gd > _cgfa || _eba+_gbdf._bbeb._aad > _cgfa
}
func (_ggf *convertContext) addTables(_eac []*_de.CT_Tbl) {
	for _, _caed := range _eac {
		_aaa := _ggf.addAbsoluteTable(_caed)
		if _aaa == nil {
			continue
		}
		_ccfa := _cfad(1000, 1000)
		_ccfa.Draw(_aaa)
		_ggf.newParagraph()
		_ggf._bbeb._fd = &rectangle{1, 1, 1, 1}
		_ggf._bbeb._cc = _aaa
		_ggf._bbeb._gd = _aaa.Height()
		_ggf.determineParagraphBounds()
		if _ggf.currentParagraphOverflowsCurrentPage() {
			_ggf.newPage()
			_ggf.determineParagraphBounds()
		}
		_ggf.addCurrentParagraphToCurrentPage()
	}
}
func _cfbbf(_gbcc int, _fddga bool) string {
	_fecc := (_gbcc-1)/26 + 1
	_cgdf := byte((_gbcc - 1) % 26)
	if _fddga {
		_cgdf += byte(65)
	} else {
		_cgdf += byte(97)
	}
	_gdb := _ab.NewBuffer([]byte{})
	for _feebe := 0; _feebe < _fecc; _feebe++ {
		_gdb.Write([]byte{_cgdf})
	}
	return _gdb.String()
}
func _gaag(_gdfag *_de.EG_RunInnerContent) bool {
	if _cbca := _gdfag.Br; _cbca != nil {
		return _cbca.TypeAttr == _de.ST_BrTypePage
	}
	return false
}
func (_fgcb *convertContext) drawPage(_daf *page) {
	if _daf._cgg {
		_ead := _daf._ga._dec + _bb*_aa
		_ecf := _daf._ga._efc
		_aae := _daf._ga._db
		_cab(_fgcb._ebgg, _ecf, _ead, _aae, _ead, 0.25, _fg.ColorBlack)
	}
	for _, _bad := range _daf._ac {
		_fgcb._ebgg.Draw(_bad)
	}
	for _, _acbc := range _daf._ace {
		_gb(_fgcb._ebgg, _acbc)
	}
	for _, _aefe := range _daf._eed {
		if _aefe._abd {
			_baca := _aefe._eag + _bb*_aa
			_adc := _daf._ga._efc
			_fdf := _adc + 50
			_cab(_fgcb._ebgg, _adc, _baca, _fdf, _baca, 0.25, _fg.ColorBlack)
		} else {
			for _, _cb := range _aefe._gad {
				for _, _ebd := range _cb._dbb {
					for _, _caa := range _ebd._fec {
						for _, _cca := range _caa._eg {
							if _cca._ca != nil {
								_cca._ca.SetPos(_caa._afa+_cca._ecd, _aefe._eag+_cb._bbb+_cca._deb)
								_fgcb._ebgg.Draw(_cca._ca)
							} else if _cca._dab != nil {
								_cca._dab._fgc = _caa._afa + _cca._ecd
								_cca._dab._fac = _aefe._eag + _cb._bbb + _cca._deb
								_gb(_fgcb._ebgg, _cca._dab)
							} else {
								_fb := _fgcb._ebgg.NewStyledParagraph()
								if _cca._feeb {
									_cca._deb = 0
								} else if _cca._egf {
									_cca._deb = 1.2*_cb._bg - _cca._cgf
								}
								_gba := _caa._afa + _cca._ecd
								_ega := _aefe._eag + _cb._bbb + _cca._deb
								_fb.SetPos(_gba, _ega)
								var _gccg *_fg.TextChunk
								if _cca._bgc != "" {
									_gccg = _fb.AddExternalLink(_cca._da, _cca._bgc)
								} else {
									_gccg = _fb.Append(_cca._da)
								}
								if _cca._bgb != nil {
									_gccg.Style = *_cca._bgb
								}
								_fgcb._ebgg.Draw(_fb)
							}
						}
					}
				}
			}
			if _aefe._cc != nil {
				_age := _fg.NewBlock(_aefe._be-_aefe._dbg, _aefe._fd._dec+_aefe._gd+_aefe._fd._fc)
				_age.SetPos(_aefe._edc, _aefe._eag+_aefe._fd._dec)
				_age.Draw(_aefe._cc)
				_fgcb._ebgg.Draw(_age)
			}
		}
	}
	for _, _bff := range _daf._ed {
		_fgcb._ebgg.Draw(_bff)
	}
	for _, _dcf := range _daf._ea {
		_gb(_fgcb._ebgg, _dcf)
	}
	if len(_daf._gg) > 0 {
		_aggd := _daf._ga._fc + _bb*_aa
		_adf := _daf._ga._efc
		_eeb := _adf + 50
		_cab(_fgcb._ebgg, _adf, _aggd, _eeb, _aggd, 0.25, _fg.ColorBlack)
		_fgg := _daf._ga._fc + _bb
		for _, _def := range _daf._gg {
			_def._cg.SetPos(_daf._ga._efc, _fgg)
			_fgcb._ebgg.Draw(_def._cg)
			_fgg += _def._cg.Height()
		}
	}
}

type symbol struct {
	_da   string
	_ecd  float64
	_cgf  float64
	_deb  float64
	_bf   float64
	_bgb  *_fg.TextStyle
	_ca   *_fg.Image
	_dab  *textbox
	_bgc  string
	_feeb bool
	_egf  bool
}

func _afda(_aegd *_de.CT_PPr, _feccb *_fg.StyledParagraph) (float64, float64) {
	if _aegd.Jc != nil {
		var _gbgde _fg.TextAlignment
		switch _aegd.Jc.ValAttr {
		case _de.ST_JcRight:
			_gbgde = _fg.TextAlignmentRight
		case _de.ST_JcCenter:
			_gbgde = _fg.TextAlignmentCenter
		case _de.ST_JcBoth:
			_gbgde = _fg.TextAlignmentJustify
		default:
			_gbgde = _fg.TextAlignmentLeft
		}
		_feccb.SetTextAlignment(_gbgde)
	}
	var _gdgf, _gbgg, _fgaa, _gfg float64
	_dbag := 1.0
	if _dggab := _aegd.Spacing; _dggab != nil {
		if _cff := _dggab.BeforeAttr; _cff != nil {
			if _cff.ST_UnsignedDecimalNumber != nil {
				_gdgf = _ggcd(int64(*_cff.ST_UnsignedDecimalNumber))
			}
		}
		if _gcgf := _dggab.AfterAttr; _gcgf != nil {
			if _gcgf.ST_UnsignedDecimalNumber != nil {
				_gbgg = _ggcd(int64(*_gcgf.ST_UnsignedDecimalNumber))
			}
		}
		if _eddc := _dggab.LineAttr; _eddc != nil {
			if _eddc.Int64 != nil {
				_dbag = float64(*_eddc.Int64 / 240)
			}
		}
	}
	if _ccce := _aegd.Ind; _ccce != nil {
		if _afgf := _ccce.LeftAttr; _afgf != nil {
			if _afgf.Int64 != nil {
				_fgaa = _ggcd(*_afgf.Int64)
			}
		}
		if _fbfd := _ccce.RightAttr; _fbfd != nil {
			if _fbfd.Int64 != nil {
				_gfg = _ggcd(*_fbfd.Int64)
			}
		}
	}
	_feccb.SetMargins(_fgaa, _gfg, _gdgf-_dbag/2, _gbgg+_dbag/2)
	_feccb.SetLineHeight(_dbag)
	return _gdgf, _fgaa
}

type rectangle struct {
	_dec float64
	_fc  float64
	_efc float64
	_db  float64
}

func (_cda *convertContext) makePdfBlockFromGraphics(_ceed *_ee.Graphic) (*textbox, error) {
	if _gfacd := _ceed.GraphicData; _gfacd != nil {
		for _, _adbd := range _gfacd.Any {
			if _debf, _gabgg := _adbd.(*_de.WdWsp); _gabgg {
				if _fdc := _debf.WChoice; _fdc != nil {
					if _daaa := _fdc.Txbx; _daaa != nil {
						if _fdgf := _daaa.TxbxContent; _fdgf != nil {
							if _aebfc := _fdgf.EG_ContentBlockContent; len(_aebfc) > 0 {
								if _ecbb := _debf.SpPr; _ecbb != nil {
									if _fcgf := _ecbb.Xfrm; _fcgf != nil {
										if _aadd := _fcgf.Ext; _aadd != nil {
											_bfbd := _bc.FromEMU(_aadd.CxAttr) / _bc.Millimeter
											_bddg := _bc.FromEMU(_aadd.CyAttr) / _bc.Millimeter
											_dga := &rectangle{_dec: _fbcd, _fc: _fbcd, _efc: _fbcd, _db: _fbcd}
											_gfbb, _bgde := _cda.makePdfBlockFromCBCs([][]*_de.EG_ContentBlockContent{_aebfc}, _bfbd, _bddg, _dga, false, "")
											if _bgde != nil {
												return nil, _bgde
											}
											var _gaee bool
											var _gbba float64
											var _bcce _fg.Color
											if _bddf := _ecbb.PrstGeom; _bddf != nil {
												if _bddf.PrstAttr == _ee.ST_ShapeTypeRect {
													if _ccgd := _ecbb.Ln; _ccgd != nil {
														if _gdba := _ccgd.WAttr; _gdba != nil {
															_gaee = true
															_gbba = _bc.FromEMU(int64(*_gdba)) / _bc.Millimeter
															_bcce = _fg.ColorBlack
															if _cace := _ccgd.SolidFill; _cace != nil {
																if _gag := _cace.SrgbClr; _gag != nil {
																	_bcce = _fg.ColorRGBFromHex("\u0023" + _gag.ValAttr)
																}
															}
														}
													}
												}
											}
											_debba := &textbox{_ebe: _gfbb, _efa: _gaee, _bef: _gbba, _eae: _bcce}
											return _debba, nil
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return nil, nil
}
func (_beb *convertContext) addRelativeCRC(_caf []*_de.EG_ContentRunContent, _gded *_de.CT_ParaRPr) {
	for _, _faed := range _caf {
		if _aggc := _faed.R; _aggc != nil {
			_dfb := _eafc(_beb._beda, _aggc.RPr, _gded)
			if _beb._fcfa != "" {
				_beb.addRelativeRIC(nil, _dfb)
				_beb._fcfa = ""
			}
			for _, _dee := range _aggc.EG_RunInnerContent {
				_beb.addRelativeRIC(_dee, _dfb)
			}
		}
	}
}
func (_fbcb *convertContext) newSpan() {
	_bbgb := &span{_aba: _fbcb._gcda._df, _eab: _fbcb._gcda._gf}
	_fbcb._fbae = _bbgb
	_fbcb._gcda._dbb = append(_fbcb._gcda._dbb, _bbgb)
}
func (_adbf *convertContext) addTextSymbol(_adfdc *symbol) {
	_cgfg := _fg.New()
	_gcea := _cgfg.NewStyledParagraph()
	_gcea.SetMargins(0, 0, 0, 0)
	_ccab := _gcea.Append(_adfdc._da)
	_gcea.SetLineHeight(_adbf._bbeb._gab)
	_dcca := 0.0
	if _adfdc._bgb != nil {
		_ccab.Style = *_adfdc._bgb
		if _adfdc._bgb.CharSpacing != 0 {
			_dcca = _adfdc._bgb.CharSpacing
		}
	}
	_adfdc._cgf = _gcea.Height()
	_adfdc._bf = _gcea.Width() + _dcca
	if len(_adbf._becd._eg) > 0 {
		_edebc := _adbf._becd._eg[len(_adbf._becd._eg)-1]._da
		if (_edebc == "\u0020") != (_adfdc._da == "\u0020") {
			_adbf.addCurrentWordToParagraph()
			_adbf.newWord()
		}
	}
	_adbf._becd._eg = append(_adbf._becd._eg, _adfdc)
	_adfdc._ecd = _adbf._becd._fee
	_adbf._becd._fee += _adfdc._bf
	if _adfdc._da != "\u0020" {
		_adbf._becd._efg = false
	}
	if _adfdc._da == "\u000d" {
		_adbf.adjustHeights(_adfdc._cgf)
	}
}
func _cfad(_daec, _addd float64) *_fg.Creator {
	_bgbb := _fg.New()
	_bgbb.SetPageSize(_fg.PageSize{_daec, _addd})
	_bgbb.SetPageMargins(0, 0, 0, 0)
	return _bgbb
}
func (_baba *convertContext) addAbsoluteCBCs(_aec []*_de.EG_ContentBlockContent) {
	for _, _eagg := range _aec {
		_baba.addParagraphs(_eagg.P)
		_baba.addTables(_eagg.Tbl)
	}
}
func _aaea(_ceec float64) float64 { return 0.6 + 0.4*_ceec }
func _ggcd(_dcce int64) float64 {
	return float64(int64(float64(_dcce)*_bc.Twips/_bc.Millimeter*100) / 100)
}
func (_abda *convertContext) addRelativeCBCs(_fbga []*_de.EG_ContentBlockContent) {
	for _, _fbgab := range _fbga {
		_abda.addHdrFtr(_fbgab.P)
	}
}
func (_ecfa *convertContext) addRelativeRIC(_ceg *_de.EG_RunInnerContent, _gfda *_de.CT_RPr) {
	var _bfcf *_fg.TextChunk
	var _cgda, _fda bool
	if _ceg == nil {
		if _ecfa._fcfa != "" {
			_cgda = true
			_bfcf = _ecfa._egce.Append(_ecfa._fcfa)
		}
	} else {
		if _ceg.T != nil && _ceg.T.Content != "" {
			_cfcg := _ceg.T.Content
			if _eaa := _ecfa._gfb; _eaa != nil && _eaa.IdAttr != nil {
				_bfcf = _ecfa._egce.AddExternalLink(_cfcg, _ecfa._beda.GetTargetByRelId(*_eaa.IdAttr))
			} else {
				_bfcf = _ecfa._egce.Append(_cfcg)
			}
		} else if _daaf := _ceg.EndnoteReference; _daaf != nil {
			_dgbb := _ecfa._beda.BodySection().X()
			_cgda = true
			_fefcf := _daaf.IdAttr
			_adcc := _fefcf
			_bdecc := _de.ST_NumberFormatLowerRoman
			if _gdfg := _dgbb.EndnotePr; _gdfg != nil {
				if _eee := _gdfg.NumFmt; _eee != nil {
					_bdecc = _eee.ValAttr
				}
				if _dfbc := _gdfg.NumStart; _dfbc != nil {
					_adcc += _dfbc.ValAttr - 1
				}
			}
			_addb := _cacb(_adcc, _bdecc)
			_ffad := _ecfa._beda.Endnote(_fefcf).X()
			if _ffad != nil {
				_ecfa._bdeb = append(_ecfa._bdeb, note{_ce: _addb, _ad: _ffad.EG_BlockLevelElts})
				_bfcf = _ecfa._egce.Append(_addb)
			}
		} else if _gaccc := _ceg.FootnoteReference; _gaccc != nil {
			_edae := _ecfa._beda.BodySection().X()
			_cgda = true
			_eagf := _gaccc.IdAttr
			_ceeg := _eagf
			_abae := _de.ST_NumberFormatDecimal
			if _eccd := _edae.FootnotePr; _eccd != nil {
				if _bdg := _eccd.NumFmt; _bdg != nil {
					_abae = _bdg.ValAttr
				}
				if _dcafd := _eccd.NumStart; _dcafd != nil {
					_ceeg += _dcafd.ValAttr - 1
				}
			}
			_aaed := _cacb(_ceeg, _abae)
			_bfcf = _ecfa._egce.Append(_aaed)
		}
	}
	if _bfcf != nil {
		_bfcf.Style, _, _ = _ecfa.makeRunStyle(_gfda, _cgda, _fda, true)
	}
}
func (_ddf *span) moveRight(_eadb float64) {
	for _, _gbg := range _ddf._fec {
		_gbg._afa += _eadb
	}
}
func (_dde *convertContext) newPage() {
	_dgea := &page{}
	_dgea._ga = _dde._babc
	_dgea._ec = _dgea._ga._dec
	if _dde._dgc {
		_dgea._cgg = true
		_dgea._ec += _bb
	}
	_dde._bdf = append(_dde._bdf, _dgea)
	_dde._aeef = _dgea
}
func (_aee *convertContext) addParagraphs(_egac []*_de.CT_P) {
	for _, _fgge := range _egac {
		_cgee := _gbfg(_aee._beda, _fgge.PPr)
		if _aee.addAbsoluteEGPC(_fgge.EG_PContent, _cgee) {
			_aee.newPage()
			continue
		}
		if _aee.currentParagraphOverflowsCurrentPage() {
			_aee.newPage()
			_aee.addAbsoluteEGPC(_fgge.EG_PContent, _cgee)
		}
		_aee.addCurrentParagraphToCurrentPage()
	}
}
func (_fba *convertContext) adjustRightBoundOfLastSpan() {
	_dba := _fba._fbae._eab
	_cbe := _fba._gcda._bbb + _fba._bbeb._eag
	_ccae := _cbe + _fba._gcda._bg
	for _, _fae := range _fba._aeef._cge {
		if ((_cbe > _fae._add._dec && _cbe < _fae._add._fc) || (_ccae > _fae._add._dec && _cbe < _fae._add._fc)) && (_dba > _fae._add._efc) {
			_dba = _fae._add._efc
		}
	}
	_fba._fbae._eab = _dba
}
func _cab(_gccf *_fg.Creator, _agg, _bfg, _eea, _ge, _fef float64, _dfg _fg.Color) {
	_ff := _gccf.NewLine(_agg, _bfg, _eea, _ge)
	_ff.SetLineWidth(_fef)
	_ff.SetColor(_dfg)
	_gccf.Draw(_ff)
}

type zoneToSkip struct {
	_add *rectangle
	_fa  *_de.WdEG_WrapTypeChoice
}

func (_dcc *convertContext) alignParagraph() {
	_dad := _dcc._bbeb
	if _dad._gcc == _fg.TextAlignmentLeft {
		return
	}
	_gga := len(_dad._gad) - 1
	for _gfd, _fde := range _dad._gad {
		_bgcf := len(_fde._dbb) - 1
		for _eeaa, _gac := range _fde._dbb {
			_edd := true
			_deg := len(_gac._fec)
			_bbg := 0.0
			for _cgb := len(_gac._fec) - 1; _cgb >= 0; _cgb-- {
				_effd := _gac._fec[_cgb]
				if _edd && _effd._efg {
					_deg = _cgb
				} else {
					_edd = false
					for _, _dfad := range _effd._eg {
						_bbg += _dfad._bf
					}
				}
			}
			_gac._fec = _gac._fec[:_deg]
			_bfgc := _gac._eab - _gac._aba - _bbg
			switch _dad._gcc {
			case _fg.TextAlignmentRight:
				_gac.moveRight(_bfgc)
			case _fg.TextAlignmentCenter:
				_gac.moveRight(_bfgc / 2)
			case _fg.TextAlignmentJustify:
				if _gfd != _gga || _eeaa != _bgcf {
					_ece := []*word{}
					for _, _ceb := range _gac._fec {
						if _ceb._efg {
							_ece = append(_ece, _ceb)
						}
					}
					_ffc := _bfgc / float64(len(_ece))
					for _, _adcg := range _ece {
						_adcg._fee += _ffc
					}
					var _edeb *word
					for _, _bee := range _gac._fec {
						if _edeb != nil {
							_bee._afa = _edeb._afa + _edeb._fee
						}
						_edeb = _bee
					}
				}
			}
		}
	}
}

type page struct {
	_ga  *rectangle
	_eed []*paragraph
	_ec  float64
	_cge []*zoneToSkip
	_ed  []*_fg.Image
	_ac  []*_fg.Image
	_ea  []*textbox
	_ace []*textbox
	_gg  []*note
	_cgg bool
}

// ConvertToPdf converts document to PDF file. This package is beta, breaking changes can take place.
func ConvertToPdf(d *_ef.Document) *_fg.Creator {
	_afd := d.BodySection().X()
	var _fdfb, _dedb, _acaf, _aage, _cfc, _beef float64
	_dcbg := _afd.PgMar
	if _dcbg.LeftAttr.ST_UnsignedDecimalNumber != nil {
		_fdfb = _ggcd(int64(*_dcbg.LeftAttr.ST_UnsignedDecimalNumber))
	}
	if _dcbg.LeftAttr.ST_UnsignedDecimalNumber != nil {
		_dedb = _ggcd(int64(*_dcbg.RightAttr.ST_UnsignedDecimalNumber))
	}
	if _dcbg.TopAttr.Int64 != nil {
		_acaf = _ggcd(*_dcbg.TopAttr.Int64)
	}
	if _dcbg.BottomAttr.Int64 != nil {
		_aage = _ggcd(*_dcbg.BottomAttr.Int64)
	}
	_fdef := _afd.PgSz
	_gbff, _daag := 210.0, 297.0
	if _fdef.WAttr != nil {
		_gbff = _ggcd(int64(*_fdef.WAttr.ST_UnsignedDecimalNumber))
	}
	if _fdef.HAttr != nil {
		_daag = _ggcd(int64(*_fdef.HAttr.ST_UnsignedDecimalNumber))
	}
	if _dcbg.HeaderAttr.ST_UnsignedDecimalNumber != nil {
		_cfc = _ggcd(int64(*_dcbg.HeaderAttr.ST_UnsignedDecimalNumber))
	}
	if _dcbg.FooterAttr.ST_UnsignedDecimalNumber != nil {
		_beef = _aage - _ggcd(int64(*_dcbg.FooterAttr.ST_UnsignedDecimalNumber))
	}
	_adg := _fg.New()
	_adg.SetPageSize(_fg.PageSize{_gbff, _daag})
	_adg.SetPageMargins(_fdfb, _dedb, _acaf, _aage)
	for _, _cagf := range d.Headers() {
		_eadg := &convertContext{_ebgg: _adg, _beda: d, _dbef: true, _gdfa: _fdfb, _dag: _cfc}
		_eadg.addRelativeCBCs(_cagf.X().EG_ContentBlockContent)
	}
	for _, _ged := range d.Footers() {
		_gfba := &convertContext{_ebgg: _adg, _beda: d, _dafg: true, _gdfa: _fdfb, _ebgd: _beef}
		_gfba.addRelativeCBCs(_ged.X().EG_ContentBlockContent)
	}
	_fdfc := &convertContext{_ebgg: _adg, _beda: d, _babc: &rectangle{_dec: _acaf, _fc: _daag - _aage, _efc: _fdfb, _db: _gbff - _dedb}, _bdeb: []note{}}
	for _, _ffg := range d.X().Body.EG_BlockLevelElts {
		_fdfc.addAbsoluteCBCs(_ffg.EG_ContentBlockContent)
	}
	_fdfc.addEndnotes()
	_fdfc.alignSymbolsVertically()
	_fdfc.drawPages()
	return _adg
}
func (_gbgd *convertContext) addAbsoluteRIC(_gacc *_de.EG_RunInnerContent, _bdd *_de.CT_RPr) bool {
	var _fbc bool
	_ccfd := []*symbol{}
	if _gacc == nil {
		if _gbgd._fcfa != "" {
			_ccfd = _dfadd(_gbgd._fcfa, "", true, false)
		}
	} else {
		if _gaag(_gacc) {
			return true
		} else if _gacc.T != nil && _gacc.T.Content != "" {
			_eaff := _gacc.T.Content
			if _eabce := _gbgd._gfb; _eabce != nil && _eabce.IdAttr != nil {
				_ccfd = _dfadd(_eaff, _gbgd._beda.GetTargetByRelId(*_eabce.IdAttr), false, false)
			} else {
				_ccfd = _dfadd(_eaff, "", false, false)
			}
		} else if _befb := _gacc.EndnoteReference; _befb != nil {
			_bce := _gbgd._beda.BodySection().X()
			_dafb := _befb.IdAttr
			_eef := _dafb
			_fcb := _de.ST_NumberFormatLowerRoman
			if _dcg := _bce.EndnotePr; _dcg != nil {
				if _bffa := _dcg.NumFmt; _bffa != nil {
					_fcb = _bffa.ValAttr
				}
				if _fdd := _dcg.NumStart; _fdd != nil {
					_eef += _fdd.ValAttr - 1
				}
			}
			_fga := _cacb(_eef, _fcb)
			_eeac := _gbgd._beda.Endnote(_dafb).X()
			if _eeac != nil {
				_gbgd._bdeb = append(_gbgd._bdeb, note{_ce: _fga, _ad: _eeac.EG_BlockLevelElts})
				_ccfd = _dfadd(_fga, "", true, false)
			}
		} else if _aaf := _gacc.FootnoteReference; _aaf != nil {
			_ebef := _gbgd._beda.BodySection().X()
			_edea := _aaf.IdAttr
			_ddb := _edea
			_gaa := _de.ST_NumberFormatDecimal
			if _gabgc := _ebef.FootnotePr; _gabgc != nil {
				if _gabe := _gabgc.NumFmt; _gabe != nil {
					_gaa = _gabe.ValAttr
				}
				if _beff := _gabgc.NumStart; _beff != nil {
					_ddb += _beff.ValAttr - 1
				}
			}
			_cec := _cacb(_ddb, _gaa)
			_befc := _gbgd._beda.Footnote(_edea).X()
			if _befc != nil {
				_dfaa := &note{_ce: _cec, _ad: _befc.EG_BlockLevelElts}
				_bbd := [][]*_de.EG_ContentBlockContent{}
				for _, _aadc := range _befc.EG_BlockLevelElts {
					_bbd = append(_bbd, _aadc.EG_ContentBlockContent)
				}
				_egg, _bfe := _gbgd.makePdfBlockFromCBCs(_bbd, _gbgd._aeef._ga._db-_gbgd._aeef._ga._efc, 1000, nil, true, _cec)
				if _bfe != nil {
					_e.Println("Cannot\u0020convert\u0020footnote:", _bfe)
					return false
				}
				_dfaa._cg = _egg
				_gbgd._bbeb._cd = append(_gbgd._bbeb._cd, _dfaa)
				_gbgd._bbeb._dg += _dfaa._cg.Height()
				_ccfd = _dfadd(_cec, "", true, false)
			}
		} else if _dae := _gacc.Drawing; _dae != nil {
			for _, _egd := range _dae.Inline {
				if _ggg := _egd.Graphic; _ggg != nil {
					_cfd, _aeb := _gbgd.makePdfImageFromGraphics(_ggg)
					if _aeb != nil {
						_e.Println("Cannot\u0020read\u0020image:", _aeb)
					}
					if _cfd == nil {
						return false
					}
					_fcff := _egd.Extent
					if _fcff == nil {
						return false
					}
					_deac := _bc.FromEMU(_fcff.CxAttr) / _bc.Millimeter
					_fff := _bc.FromEMU(_fcff.CyAttr) / _bc.Millimeter
					_cfd.Scale(_deac/_cfd.Width(), _fff/_cfd.Height())
					_ccfd = []*symbol{{_cgf: _fff, _bf: _deac, _ca: _cfd}}
					_fbc = true
				}
			}
		}
	}
	var _afcd _fg.TextStyle
	var _ggae, _dead bool
	if !_fbc {
		_afcd, _ggae, _dead = _gbgd.makeRunStyle(_bdd, false, false, false)
	}
	for _, _agb := range _ccfd {
		if _agb._ca != nil {
			_gbgd.addInlineBlock(_agb)
		} else {
			_agb._bgb = &_afcd
			_agb._feeb = _ggae
			_agb._egf = _dead
			_gbgd.addTextSymbol(_agb)
		}
	}
	return false
}
func (_gfbaf *convertContext) addRelativeEGPC(_bedc []*_de.EG_PContent, _effae *_de.CT_ParaRPr) {
	if len(_bedc) == 0 {
		_gfbaf._egce.Append("\u000d")
		return
	}
	for _, _baf := range _bedc {
		for _, _cggb := range _baf.FldSimple {
			if _cggb != nil {
				_gfbaf.addRelativeEGPC(_cggb.EG_PContent, _effae)
			}
		}
		if _bba := _baf.Hyperlink; _bba != nil {
			_gfbaf._gfb = _bba
			_gfbaf.addRelativeCRC(_bba.EG_ContentRunContent, _effae)
		}
		_gfbaf._gfb = nil
		_gfbaf.addRelativeCRC(_baf.EG_ContentRunContent, _effae)
	}
}
func (_cebe *convertContext) newParagraph() {
	if _cebe._aeef == nil {
		_cebe.newPage()
	}
	_cga := &paragraph{}
	_cga._fd = &rectangle{}
	_cga._eag = _cebe._aeef._ec
	_cebe._bbeb = _cga
}
func _dbac(_ddd int, _dcfe bool) string {
	_gbga := _ab.NewBuffer([]byte{})
	for _, _edebg := range _dac {
		for {
			if _ddd < _edebg._dgb {
				break
			}
			_gbga.WriteString(_edebg._bdcd)
			_ddd -= _edebg._dgb
		}
	}
	_eggd := _gbga.String()
	if _dcfe {
		_eggd = _f.ToUpper(_eggd)
	}
	return _eggd
}

type paragraph struct {
	_cee float64
	_fd  *rectangle
	_edc float64
	_dbg float64
	_be  float64
	_eag float64
	_gd  float64
	_gcc _fg.TextAlignment
	_gab float64
	_gad []*line
	_cc  *_fg.Table
	_fcf []*_fg.Image
	_eb  []*_fg.Image
	_dd  []*textbox
	_dc  []*textbox
	_cd  []*note
	_dg  float64
	_af  []*zoneToSkip
	_aad float64
	_abd bool
}

func _eafc(_ffdd *_ef.Document, _bfaa *_de.CT_RPr, _gdga *_de.CT_ParaRPr) *_de.CT_RPr {
	var _dgdge, _eca *_de.CT_RPr
	if _bfaa == nil {
		_bfaa = _de.NewCT_RPr()
	}
	if _gdga == nil {
		_gdga = _de.NewCT_ParaRPr()
	}
	if _bfaa.RStyle != nil {
		_cbgg := _ffdd.GetStyleByID(_bfaa.RStyle.ValAttr)
		if _fbcba := _cbgg.X(); _fbcba != nil {
			_dgdge = _fbcba.RPr
		}
	}
	if _dgdge == nil {
		_dgdge = _de.NewCT_RPr()
	}
	if _gdga.RStyle != nil {
		_gffd := _ffdd.GetStyleByID(_gdga.RStyle.ValAttr)
		if _acc := _gffd.X(); _acc != nil {
			_eca = _acc.RPr
		}
	}
	if _eca == nil {
		_eca = _de.NewCT_RPr()
	}
	if _bfaa.Color == nil {
		if _dgdge.Color != nil {
			_bfaa.Color = _dgdge.Color
		} else if _gdga.Color != nil {
			_bfaa.Color = _gdga.Color
		} else if _eca.Color != nil {
			_bfaa.Color = _eca.Color
		}
	}
	if _bfaa.Spacing == nil {
		if _dgdge.Spacing != nil {
			_bfaa.Spacing = _dgdge.Spacing
		} else if _gdga.Spacing != nil {
			_bfaa.Spacing = _gdga.Spacing
		} else if _eca.Spacing != nil {
			_bfaa.Spacing = _eca.Spacing
		}
	}
	if _bfaa.Sz == nil {
		if _dgdge.Sz != nil {
			_bfaa.Sz = _dgdge.Sz
		} else if _gdga.Sz != nil {
			_bfaa.Sz = _gdga.Sz
		} else if _eca.Sz != nil {
			_bfaa.Sz = _eca.Sz
		}
	}
	if _bfaa.SzCs == nil {
		if _dgdge.SzCs != nil {
			_bfaa.SzCs = _dgdge.SzCs
		} else if _gdga.SzCs != nil {
			_bfaa.SzCs = _gdga.SzCs
		} else if _eca.SzCs != nil {
			_bfaa.SzCs = _eca.SzCs
		}
	}
	if _bfaa.B == nil {
		if _dgdge.B != nil {
			_bfaa.B = _dgdge.B
		} else if _gdga.B != nil {
			_bfaa.B = _gdga.B
		} else if _eca.B != nil {
			_bfaa.B = _eca.B
		}
	}
	if _bfaa.BCs == nil {
		if _dgdge.BCs != nil {
			_bfaa.BCs = _dgdge.BCs
		} else if _gdga.BCs != nil {
			_bfaa.BCs = _gdga.BCs
		} else if _eca.BCs != nil {
			_bfaa.BCs = _eca.BCs
		}
	}
	if _bfaa.I == nil {
		if _dgdge.I != nil {
			_bfaa.I = _dgdge.I
		} else if _gdga.I != nil {
			_bfaa.I = _gdga.I
		} else if _eca.I != nil {
			_bfaa.I = _eca.I
		}
	}
	if _bfaa.ICs == nil {
		if _dgdge.ICs != nil {
			_bfaa.ICs = _dgdge.ICs
		} else if _gdga.ICs != nil {
			_bfaa.ICs = _gdga.ICs
		} else if _eca.ICs != nil {
			_bfaa.ICs = _eca.ICs
		}
	}
	if _bfaa.RFonts == nil {
		if _dgdge.RFonts != nil {
			_bfaa.RFonts = _dgdge.RFonts
		} else if _gdga.RFonts != nil {
			_bfaa.RFonts = _gdga.RFonts
		} else if _eca.RFonts != nil {
			_bfaa.RFonts = _eca.RFonts
		}
	}
	if _bfaa.VertAlign == nil {
		if _dgdge.VertAlign != nil {
			_bfaa.VertAlign = _dgdge.VertAlign
		} else if _gdga.VertAlign != nil {
			_bfaa.VertAlign = _gdga.VertAlign
		} else if _eca.VertAlign != nil {
			_bfaa.VertAlign = _eca.VertAlign
		}
	}
	return _bfaa
}
func _afde(_ebcc, _bgbf *_de.CT_Border, _fdbdb bool) *_de.CT_Border {
	if _fdbdb {
		return _ebcc
	}
	return _bgbf
}
func _cacb(_aedg int64, _eggc _de.ST_NumberFormat) string {
	_dbee := int(_aedg)
	switch _eggc {
	case _de.ST_NumberFormatDecimal:
		return _c.Itoa(_dbee)
	case _de.ST_NumberFormatUpperRoman:
		return _dbac(_dbee, true)
	case _de.ST_NumberFormatLowerRoman:
		return _dbac(_dbee, false)
	case _de.ST_NumberFormatUpperLetter:
		return _cfbbf(_dbee, true)
	case _de.ST_NumberFormatLowerLetter:
		return _cfbbf(_dbee, false)
	default:
		return _c.Itoa(_dbee)
	}
}
func _dfcg(_fbcda *_ef.Document, _bfcb *_de.CT_TblPr) *_de.CT_TblPr {
	if _bfcb == nil {
		_bfcb = _de.NewCT_TblPr()
	}
	if _bfcb.TblStyle != nil {
		_effag := _fbcda.GetStyleByID(_bfcb.TblStyle.ValAttr)
		if _aebc := _effag.X(); _aebc != nil {
			if _gefa := _aebc.TblPr; _gefa != nil {
				_adce := _bfcb.TblBorders
				_caeb := _gefa.TblBorders
				if _adce == nil {
					_adce = _caeb
				} else {
					if _adce.Top == nil {
						_adce.Top = _caeb.Top
					}
					if _adce.Bottom == nil {
						_adce.Bottom = _caeb.Bottom
					}
					if _adce.Left == nil {
						_adce.Left = _caeb.Left
					}
					if _adce.Right == nil {
						_adce.Right = _caeb.Right
					}
					if _adce.InsideH == nil {
						_adce.InsideH = _caeb.InsideH
					}
					if _adce.InsideV == nil {
						_adce.InsideV = _caeb.InsideV
					}
				}
				_cdg := _bfcb.Shd
				_dged := _gefa.Shd
				if _cdg == nil {
					_cdg = _dged
				} else {
					if _dged != nil && _cdg.FillAttr == nil {
						_cdg.FillAttr = _dged.FillAttr
					}
				}
				_dadc := _bfcb.TblCellMar
				_cbga := _gefa.TblCellMar
				if _dadc == nil {
					_dadc = _cbga
				} else {
					if _cbga != nil && _dadc.Left == nil {
						_dadc.Left = _cbga.Left
					}
				}
				if _bfcb.TblInd == nil {
					_bfcb.TblInd = _gefa.TblInd
				}
				if _bfcb.Jc == nil {
					_bfcb.Jc = _gefa.Jc
				}
			}
		}
	}
	return _bfcb
}
func (_ceac *convertContext) makePdfBlockFromCBCs(_adccd [][]*_de.EG_ContentBlockContent, _dcbge, _bcaf float64, _abag *rectangle, _decf bool, _adcgf string) (*_fg.Block, error) {
	if _abag == nil {
		_abag = &rectangle{}
	}
	_edag := &rectangle{_dec: _abag._dec, _fc: _bcaf - _abag._fc, _efc: _abag._efc, _db: _dcbge - _abag._db}
	_gaba := _cfad(_dcbge, _bcaf)
	_abcg := &convertContext{_ebgg: _gaba, _beda: _ceac._beda, _babc: _edag, _fcfa: _adcgf}
	for _, _acgd := range _adccd {
		_abcg.addAbsoluteCBCs(_acgd)
	}
	if _decf {
		_ccg := 0.0
		for _, _gfac := range _abcg._bdf {
			for _, _fdac := range _gfac._eed {
				_ccg += (_fdac._gd + _fdac._fd._dec + _fdac._fd._fc)
			}
		}
		_edag._fc = _ccg - _abag._fc
		_gaba = _cfad(_dcbge, _ccg)
		_abcg = &convertContext{_ebgg: _gaba, _beda: _ceac._beda, _babc: _edag, _fcfa: _adcgf}
		for _, _fedb := range _adccd {
			_abcg.addAbsoluteCBCs(_fedb)
		}
	}
	_abcg.alignSymbolsVertically()
	_abcg.drawPage(_abcg._bdf[0])
	_fcfb := _ab.NewBuffer([]byte{})
	_caad := _gaba.Write(_fcfb)
	if _caad != nil {
		return nil, _caad
	}
	_dabc := _ab.NewReader(_fcfb.Bytes())
	_eadf, _caad := _d.NewPdfReader(_dabc)
	if _caad != nil {
		return nil, _caad
	}
	_dfce, _caad := _eadf.GetPage(1)
	if _caad != nil {
		return nil, _caad
	}
	_cabc, _caad := _fg.NewBlockFromPage(_dfce)
	if _caad != nil {
		return nil, _caad
	}
	return _cabc, nil
}
func (_ede *convertContext) alignSymbolsVertically() {
	for _, _aca := range _ede._bdf {
		for _, _gcd := range _aca._eed {
			for _, _beg := range _gcd._gad {
				_bcg := 0.0
				for _, _efe := range _beg._dbb {
					for _, _badg := range _efe._fec {
						for _, _gbfc := range _badg._eg {
							if _gbfc._cgf > _bcg {
								_bcg = _gbfc._cgf
							}
						}
					}
				}
				for _, _cag := range _beg._dbb {
					for _, _abea := range _cag._fec {
						for _, _acba := range _abea._eg {
							if _acba._cgf < _bcg {
								_acba._deb = _bcg - _acba._cgf
							}
						}
					}
				}
			}
		}
	}
}
func _gbfg(_bbac *_ef.Document, _fcce *_de.CT_PPr) *_de.CT_PPr {
	if _fcce != nil && _fcce.PStyle != nil {
		_gbdcd := _bbac.GetStyleByID(_fcce.PStyle.ValAttr)
		if _bbdb := _gbdcd.X(); _bbdb != nil {
			if _cbg := _bbdb.PPr; _cbg != nil {
				if _fcce.Jc == nil && _cbg.Jc != nil {
					_fcce.Jc = _cbg.Jc
				}
				if _fcce.Spacing == nil && _cbg.Spacing != nil {
					_fcce.Spacing = _cbg.Spacing
				}
				if _fcce.Ind == nil && _cbg.Ind != nil {
					_fcce.Ind = _cbg.Ind
				}
			}
			if _fbge := _bbdb.RPr; _fbge != nil {
				_bafa := *_fcce.RPr
				if _fbge.Color != nil {
					_bafa.Color = _fbge.Color
				}
				if _fbge.Spacing != nil {
					_bafa.Spacing = _fbge.Spacing
				}
				if _fbge.Sz != nil {
					_bafa.Sz = _fbge.Sz
				}
				if _fbge.SzCs != nil {
					_bafa.SzCs = _fbge.SzCs
				}
				if _fbge.B != nil {
					_bafa.B = _fbge.B
				}
				if _fbge.BCs != nil {
					_bafa.BCs = _fbge.BCs
				}
				if _fbge.I != nil {
					_bafa.I = _fbge.I
				}
				if _fbge.ICs != nil {
					_bafa.ICs = _fbge.ICs
				}
				if _fbge.RFonts != nil {
					_bafa.RFonts = _fbge.RFonts
				}
				if _fbge.VertAlign != nil {
					_bafa.VertAlign = _fbge.VertAlign
				}
				_fcce.RPr = &_bafa
			}
		}
	}
	return _fcce
}

type convertContext struct {
	_ebgg  *_fg.Creator
	_beda  *_ef.Document
	_egce  *_fg.StyledParagraph
	_bdf   []*page
	_aeef  *page
	_babc  *rectangle
	_bbeb  *paragraph
	_egcg  *rectangle
	_gcda  *line
	_fbae  *span
	_becd  *word
	_gfb   *_de.CT_Hyperlink
	_gde   *_de.CT_ParaRPr
	_bdeb  []note
	_fcfa  string
	_abddf bool
	_dbef  bool
	_dafg  bool
	_gdfa  float64
	_dag   float64
	_ebgd  float64
	_faf   float64
	_dgc   bool
}

var _dac = []romanMatch{{1000, "m"}, {900, "cm"}, {500, "d"}, {400, "cd"}, {100, "c"}, {90, "xc"}, {50, "l"}, {40, "xl"}, {10, "x"}, {9, "ix"}, {5, "v"}, {4, "iv"}, {1, "i"}}

func (_fceb *convertContext) addInlineBlock(_aed *symbol) {
	if len(_fceb._becd._eg) > 0 {
		_gdc := _fceb._becd._eg[len(_fceb._becd._eg)-1]._da
		if _gdc == "\u0020" {
			_fceb.addCurrentWordToParagraph()
			_fceb.newWord()
		}
	}
	_fceb._becd._eg = append(_fceb._becd._eg, _aed)
	_aed._ecd = _fceb._becd._fee
	_fceb._becd._fee += _aed._bf
	_fceb._becd._efg = false
	if _fceb._gcda._bg < _aed._cgf {
		_fceb._bbeb._gd += (_aed._cgf - _fceb._gcda._bg)
		_fceb._gcda._bg = _aed._cgf
	}
}
func (_gbcg *convertContext) makePdfImageFromGraphics(_ecb *_ee.Graphic) (*_fg.Image, error) {
	if _acee := _ecb.GraphicData; _acee != nil {
		for _, _gfe := range _acee.Any {
			if _aeed, _acfg := _gfe.(*_gc.Pic); _acfg {
				if _aaga := _aeed.BlipFill; _aaga != nil {
					if _fcaa := _aaga.Blip; _fcaa != nil {
						if _agf := _fcaa.EmbedAttr; _agf != nil {
							_bggd, _bdcf := _gbcg._beda.GetImageObjByRelId(*_agf)
							if _bdcf != nil {
								return nil, _bdcf
							}
							_dccb, _bdcf := _fe.Open(_bggd.Path)
							if _bdcf != nil {
								return nil, _bdcf
							}
							_gdbd, _bdcf := _b.ReadAll(_dccb)
							if _bdcf != nil {
								return nil, _bdcf
							}
							_gcef, _bdcf := _gbcg._ebgg.NewImageFromData(_gdbd)
							if _bdcf != nil {
								return nil, _bdcf
							}
							return _gcef, nil
						}
					}
				}
			}
		}
	}
	return nil, nil
}
func (_dbc *convertContext) addCurrentParagraphToCurrentPage() {
	_dbc._aeef._ec = _dbc._bbeb._eag + _dbc._bbeb._fd._dec + _dbc._bbeb._gd + _dbc._bbeb._fd._fc
	_dbc._aeef._ed = append(_dbc._aeef._ed, _dbc._bbeb._fcf...)
	_dbc._aeef._ac = append(_dbc._aeef._ac, _dbc._bbeb._eb...)
	_dbc._aeef._ea = append(_dbc._aeef._ea, _dbc._bbeb._dd...)
	_dbc._aeef._ace = append(_dbc._aeef._ace, _dbc._bbeb._dc...)
	_dbc._aeef._cge = append(_dbc._aeef._cge, _dbc._bbeb._af...)
	_dbc._aeef._eed = append(_dbc._aeef._eed, _dbc._bbeb)
	_dbc.adjustRightBoundOfLastSpan()
	_dbc.alignParagraph()
	if len(_dbc._aeef._gg) == 0 && len(_dbc._bbeb._cd) > 0 {
		_dbc._aeef._ga._fc -= _bb
	}
	_dbc._aeef._gg = append(_dbc._aeef._gg, _dbc._bbeb._cd...)
	_dbc._aeef._ga._fc -= _dbc._bbeb._dg
}
