//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package vmldrawing

import (
	_c "encoding/xml"
	_fe "fmt"
	_g "gitee.com/greatmusicians/unioffice"
	_d "gitee.com/greatmusicians/unioffice/schema/soo/ofc/sharedTypes"
	_a "gitee.com/greatmusicians/unioffice/schema/urn/schemas_microsoft_com/office/excel"
	_b "gitee.com/greatmusicians/unioffice/schema/urn/schemas_microsoft_com/vml"
)

// NewCommentShape creates a new comment shape for a given cell index.  The
// indices here are zero based.
func NewCommentShape(col, row int64) *_b.Shape {
	_bd := _b.NewShape()
	_bd.IdAttr = _g.String(_fe.Sprintf("cs_\u0025d_\u0025d", col, row))
	_bd.TypeAttr = _g.String("\u0023_x0000_t202")
	_bd.StyleAttr = _g.String("position:absolute\u003bmargin\u002dleft:80pt;margin-top:2pt\u003bwidth:104pt\u003bheight:76pt\u003bz\u002dindex:1\u003bvisibility:hidden")
	_bd.FillcolorAttr = _g.String("\u0023fbf6d6")
	_bd.StrokecolorAttr = _g.String("\u0023edeaa1")
	_af := _b.NewEG_ShapeElements()
	_af.Fill = _b.NewFill()
	_af.Fill.Color2Attr = _g.String("\u0023fbfe82")
	_af.Fill.AngleAttr = _g.Float64(-180)
	_af.Fill.TypeAttr = _b.ST_FillTypeGradient
	_af.Fill.Fill = _b.NewOfcFill()
	_af.Fill.Fill.ExtAttr = _b.ST_ExtView
	_af.Fill.Fill.TypeAttr = _b.OfcST_FillTypeGradientUnscaled
	_bd.EG_ShapeElements = append(_bd.EG_ShapeElements, _af)
	_aa := _b.NewEG_ShapeElements()
	_aa.Shadow = _b.NewShadow()
	_aa.Shadow.OnAttr = _d.ST_TrueFalseT
	_aa.Shadow.ObscuredAttr = _d.ST_TrueFalseT
	_bd.EG_ShapeElements = append(_bd.EG_ShapeElements, _aa)
	_afd := _b.NewEG_ShapeElements()
	_afd.Path = _b.NewPath()
	_afd.Path.ConnecttypeAttr = _b.OfcST_ConnectTypeNone
	_bd.EG_ShapeElements = append(_bd.EG_ShapeElements, _afd)
	_e := _b.NewEG_ShapeElements()
	_e.Textbox = _b.NewTextbox()
	_e.Textbox.StyleAttr = _g.String("mso\u002ddirection\u002dalt:auto")
	_bd.EG_ShapeElements = append(_bd.EG_ShapeElements, _e)
	_ff := _b.NewEG_ShapeElements()
	_ff.ClientData = _a.NewClientData()
	_ff.ClientData.ObjectTypeAttr = _a.ST_ObjectTypeNote
	_ff.ClientData.MoveWithCells = _d.ST_TrueFalseBlankT
	_ff.ClientData.SizeWithCells = _d.ST_TrueFalseBlankT
	_ff.ClientData.Anchor = _g.String("1,\u002015\u002c\u00200\u002c\u00202\u002c\u00202\u002c\u002054\u002c\u00205\u002c\u00203")
	_ff.ClientData.AutoFill = _d.ST_TrueFalseBlankFalse
	_ff.ClientData.Row = _g.Int64(row)
	_ff.ClientData.Column = _g.Int64(col)
	_bd.EG_ShapeElements = append(_bd.EG_ShapeElements, _ff)
	return _bd
}

type Container struct {
	Layout    *_b.OfcShapelayout
	ShapeType *_b.Shapetype
	Shape     []*_b.Shape
}

func NewContainer() *Container { return &Container{} }
func (_bgd *Container) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bgd.Shape = nil
_dc:
	for {
		_gc, _afb := d.Token()
		if _afb != nil {
			return _afb
		}
		switch _dd := _gc.(type) {
		case _c.StartElement:
			switch _dd.Name.Local {
			case "shapelayout":
				_bgd.Layout = _b.NewOfcShapelayout()
				if _bf := d.DecodeElement(_bgd.Layout, &_dd); _bf != nil {
					return _bf
				}
			case "shapetype":
				_bgd.ShapeType = _b.NewShapetype()
				if _da := d.DecodeElement(_bgd.ShapeType, &_dd); _da != nil {
					return _da
				}
			case "shape":
				_bab := _b.NewShape()
				if _be := d.DecodeElement(_bab, &_dd); _be != nil {
					return _be
				}
				_bgd.Shape = append(_bgd.Shape, _bab)
			}
		case _c.EndElement:
			break _dc
		}
	}
	return nil
}

// NewCommentDrawing constructs a new comment drawing.
func NewCommentDrawing() *Container {
	_ge := NewContainer()
	_ge.Layout = _b.NewOfcShapelayout()
	_ge.Layout.ExtAttr = _b.ST_ExtEdit
	_ge.Layout.Idmap = _b.NewOfcCT_IdMap()
	_ge.Layout.Idmap.DataAttr = _g.String("1")
	_ge.Layout.Idmap.ExtAttr = _b.ST_ExtEdit
	_ge.ShapeType = _b.NewShapetype()
	_ge.ShapeType.IdAttr = _g.String("_x0000_t202")
	_ge.ShapeType.CoordsizeAttr = _g.String("21600\u002c21600")
	_ge.ShapeType.SptAttr = _g.Float32(202)
	_ge.ShapeType.PathAttr = _g.String("m0\u002c0l0\u002c21600\u002c21600,21600\u002c21600\u002c0xe")
	_ad := _b.NewEG_ShapeElements()
	_ge.ShapeType.EG_ShapeElements = append(_ge.ShapeType.EG_ShapeElements, _ad)
	_ad.Path = _b.NewPath()
	_ad.Path.GradientshapeokAttr = _d.ST_TrueFalseT
	_ad.Path.ConnecttypeAttr = _b.OfcST_ConnectTypeRect
	return _ge
}
func (_ae *Container) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "xmlns:v"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:vml"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "xmlns:o"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:office:office"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "xmlns:x"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:office:excel"})
	start.Name.Local = "xml"
	e.EncodeToken(start)
	if _ae.Layout != nil {
		_ea := _c.StartElement{Name: _c.Name{Local: "o:shapelayout"}}
		e.EncodeElement(_ae.Layout, _ea)
	}
	if _ae.ShapeType != nil {
		_bg := _c.StartElement{Name: _c.Name{Local: "v:shapetype"}}
		e.EncodeElement(_ae.ShapeType, _bg)
	}
	for _, _bga := range _ae.Shape {
		_de := _c.StartElement{Name: _c.Name{Local: "v:shape"}}
		e.EncodeElement(_bga, _de)
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}
