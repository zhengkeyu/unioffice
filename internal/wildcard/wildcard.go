//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard

func _ce(_df, _dbgc []rune, _gbf int) int {
	for len(_dbgc) > 0 {
		switch _dbgc[0] {
		default:
			if len(_df) == 0 {
				return -1
			}
			if _df[0] != _dbgc[0] {
				return _ce(_df[1:], _dbgc, _gbf+1)
			}
		case '?':
			if len(_df) == 0 {
				return -1
			}
		case '*':
			if len(_df) == 0 {
				return -1
			}
			_aed := _ce(_df, _dbgc[1:], _gbf)
			if _aed != -1 {
				return _gbf
			} else {
				_aed = _ce(_df[1:], _dbgc, _gbf)
				if _aed != -1 {
					return _gbf
				} else {
					return -1
				}
			}
		}
		_df = _df[1:]
		_dbgc = _dbgc[1:]
	}
	return _gbf
}
func Index(pattern, name string) (_fg int) {
	if pattern == "" || pattern == "\u002a" {
		return 0
	}
	_dbg := make([]rune, 0, len(name))
	_gdg := make([]rune, 0, len(pattern))
	for _, _fa := range name {
		_dbg = append(_dbg, _fa)
	}
	for _, _ed := range pattern {
		_gdg = append(_gdg, _ed)
	}
	return _ce(_dbg, _gdg, 0)
}
func _agg(_gd, _egc []rune, _agf bool) bool {
	for len(_egc) > 0 {
		switch _egc[0] {
		default:
			if len(_gd) == 0 || _gd[0] != _egc[0] {
				return false
			}
		case '?':
			if len(_gd) == 0 && !_agf {
				return false
			}
		case '*':
			return _agg(_gd, _egc[1:], _agf) || (len(_gd) > 0 && _agg(_gd[1:], _egc, _agf))
		}
		_gd = _gd[1:]
		_egc = _egc[1:]
	}
	return len(_gd) == 0 && len(_egc) == 0
}
func Match(pattern, name string) (_db bool) {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_eg := make([]rune, 0, len(name))
	_ec := make([]rune, 0, len(pattern))
	for _, _gb := range name {
		_eg = append(_eg, _gb)
	}
	for _, _ag := range pattern {
		_ec = append(_ec, _ag)
	}
	_aa := false
	return _agg(_eg, _ec, _aa)
}
func MatchSimple(pattern, name string) bool {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_b := make([]rune, 0, len(name))
	_g := make([]rune, 0, len(pattern))
	for _, _a := range name {
		_b = append(_b, _a)
	}
	for _, _e := range pattern {
		_g = append(_g, _e)
	}
	_d := true
	return _agg(_b, _g, _d)
}
