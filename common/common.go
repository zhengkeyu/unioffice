//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains wrapper types and utilities common to all of the
// OOXML document formats.
//
// Package common contains common properties used by the subpackages.
package common

import (
	_cgf "archive/zip"
	_ce "bytes"
	_cgb "encoding/xml"
	_cea "errors"
	_ca "fmt"
	_fd "gitee.com/greatmusicians/unioffice"
	_gg "gitee.com/greatmusicians/unioffice/common/tempstorage"
	_ceg "gitee.com/greatmusicians/unioffice/common/tempstorage/diskstore"
	_e "gitee.com/greatmusicians/unioffice/measurement"
	_ag "gitee.com/greatmusicians/unioffice/schema/soo/dml"
	_eg "gitee.com/greatmusicians/unioffice/schema/soo/ofc/custom_properties"
	_de "gitee.com/greatmusicians/unioffice/schema/soo/ofc/docPropsVTypes"
	_fa "gitee.com/greatmusicians/unioffice/schema/soo/ofc/extended_properties"
	_bd "gitee.com/greatmusicians/unioffice/schema/soo/pkg/content_types"
	_beg "gitee.com/greatmusicians/unioffice/schema/soo/pkg/metadata/core_properties"
	_bb "gitee.com/greatmusicians/unioffice/schema/soo/pkg/relationships"
	_cf "gitee.com/greatmusicians/unioffice/zippkg"
	_d "image"
	_ "image/gif"
	_ "image/jpeg"
	_ "image/png"
	_be "os"
	_f "reflect"
	_g "regexp"
	_db "strconv"
	_dg "strings"
	_ba "time"
)

// NewAppProperties constructs a new AppProperties.
func NewAppProperties() AppProperties {
	_fbc := AppProperties{_aff: _fa.NewProperties()}
	_fbc.SetCompany("FoxyUtils\u0020ehf")
	_fbc.SetApplication("github\u002ecom\u002funidoc/unioffice")
	_fbc.SetDocSecurity(0)
	_fbc.SetLinksUpToDate(false)
	var _ccb, _cegd, _cdf int64
	_ca.Sscanf(Version, "\u0025d\u002e\u0025d\u002e\u0025d", &_ccb, &_cegd, &_cdf)
	_gfb := float64(_ccb) + float64(_cegd)/10000.0
	_fbc.SetApplicationVersion(_ca.Sprintf("\u002507\u002e4f", _gfb))
	return _fbc
}

// SetTarget changes the target attribute of the image reference (e.g. in the case of the creation of the reference or if the image which the reference is related to was moved from one location to another).
func (_deafd *ImageRef) SetTarget(target string) { _deafd._dda = target }

// AddOverride adds an override content type for a given path name.
func (_fgb ContentTypes) AddOverride(path, contentType string) {
	if !_dg.HasPrefix(path, "\u002f") {
		path = "\u002f" + path
	}
	if _dg.HasPrefix(contentType, "http") {
		_fd.Log("content\u0020type\u0020\u0027%s\u0027\u0020is\u0020incorrect\u002c must\u0020not\u0020start\u0020with\u0020http", contentType)
	}
	for _, _ef := range _fgb._bacb.Override {
		if _ef.PartNameAttr == path && _ef.ContentTypeAttr == contentType {
			return
		}
	}
	_aaca := _bd.NewOverride()
	_aaca.PartNameAttr = path
	_aaca.ContentTypeAttr = contentType
	_fgb._bacb.Override = append(_fgb._bacb.Override, _aaca)
}

// SetLanguage records the language of the document.
func (_dc CoreProperties) SetLanguage(s string) {
	_dc._baega.Language = &_fd.XSDAny{XMLName: _cgb.Name{Local: "dc:language"}}
	_dc._baega.Language.Data = []byte(s)
}

// Data returns the data of an image file, if any.
func (_dcc ImageRef) Data() *[]byte { return _dcc._gdg.Data }

// Cells returns an array of row cells.
func (_abf TableRow) Cells() []*_ag.CT_TableCell { return _abf._cgag.Tc }

// RemoveOverride removes an override given a path.
func (_baea ContentTypes) RemoveOverride(path string) {
	if !_dg.HasPrefix(path, "\u002f") {
		path = "\u002f" + path
	}
	for _cb, _cgd := range _baea._bacb.Override {
		if _cgd.PartNameAttr == path {
			copy(_baea._bacb.Override[_cb:], _baea._bacb.Override[_cb+1:])
			_baea._bacb.Override = _baea._bacb.Override[0 : len(_baea._bacb.Override)-1]
		}
	}
}

// ApplicationVersion returns the version of the application that created the
// document.
func (_eb AppProperties) ApplicationVersion() string {
	if _eb._aff.AppVersion != nil {
		return *_eb._aff.AppVersion
	}
	return ""
}

// X returns the inner raw content types.
func (_bf ContentTypes) X() *_bd.Types { return _bf._bacb }

// NewRelationships creates a new relationship wrapper.
func NewRelationships() Relationships { return Relationships{_gfd: _bb.NewRelationships()} }

// Pages returns total number of pages which are saved by the text editor which produced the document.
// For unioffice created documents, it is 0.
func (_eec AppProperties) Pages() int32 {
	if _eec._aff.Pages != nil {
		return *_eec._aff.Pages
	}
	return 0
}

// Company returns the name of the company that created the document.
// For unioffice created documents, it defaults to gitee.com/greatmusicians/unioffice
func (_bdb AppProperties) Company() string {
	if _bdb._aff.Company != nil {
		return *_bdb._aff.Company
	}
	return ""
}

// ExtraFile is an unsupported file type extracted from, or to be written to a
// zip package
type ExtraFile struct {
	ZipPath  string
	DiskPath string
}

// SetModified sets the time that the document was modified.
func (_dfa CoreProperties) SetModified(t _ba.Time) {
	_dfa._baega.Modified = _beb(t, "dcterms:modified")
}

// Rows returns all table rows.
func (_gabg Table) Rows() []*TableRow {
	_fcc := _gabg._fege.Tr
	_bad := []*TableRow{}
	for _, _ebfd := range _fcc {
		_bad = append(_bad, &TableRow{_cgag: _ebfd})
	}
	return _bad
}

// SetTitle records the title of the document.
func (_ge CoreProperties) SetTitle(s string) {
	if _ge._baega.Title == nil {
		_ge._baega.Title = &_fd.XSDAny{XMLName: _cgb.Name{Local: "dc:title"}}
	}
	_ge._baega.Title.Data = []byte(s)
}

var ReleasedAt = _ba.Date(_geg, _bbgcc, _dcb, _ebccd, _aad, 0, 0, _ba.UTC)

func UtcTimeFormat(t _ba.Time) string { return t.Format(_ccfe) + "\u0020UTC" }

// X returns the inner wrapped XML type.
func (_adag Table) X() *_ag.Tbl { return _adag._fege }

// WriteExtraFiles writes the extra files to the zip package.
func (_gbb *DocBase) WriteExtraFiles(z *_cgf.Writer) error {
	for _, _gbgd := range _gbb.ExtraFiles {
		if _faf := _cf.AddFileFromDisk(z, _gbgd.ZipPath, _gbgd.DiskPath); _faf != nil {
			return _faf
		}
	}
	return nil
}

// NewCoreProperties constructs a new CoreProperties.
func NewCoreProperties() CoreProperties { return CoreProperties{_baega: _beg.NewCoreProperties()} }

// SetContentStatus records the content status of the document.
func (_fc CoreProperties) SetContentStatus(s string) { _fc._baega.ContentStatus = &s }

var _ebfa = _cea.New("image\u0020not\u0020found\u0020in\u0020storage")

// AddRelationship adds a relationship.
func (_dbcg Relationships) AddRelationship(target, ctype string) Relationship {
	if !_dg.HasPrefix(ctype, "http:\u002f\u002f") {
		_fd.Log("relationship type\u0020\u0025s should\u0020start\u0020with\u0020\u0027http:/\u002f\u0027", ctype)
	}
	_fgd := _bb.NewRelationship()
	_cgbg := len(_dbcg._gfd.Relationship) + 1
	_dge := map[string]struct{}{}
	for _, _add := range _dbcg._gfd.Relationship {
		_dge[_add.IdAttr] = struct{}{}
	}
	for _, _ggb := _dge[_ca.Sprintf("rId%d", _cgbg)]; _ggb; _, _ggb = _dge[_ca.Sprintf("rId%d", _cgbg)] {
		_cgbg++
	}
	_fgd.IdAttr = _ca.Sprintf("rId%d", _cgbg)
	_fgd.TargetAttr = target
	_fgd.TypeAttr = ctype
	_dbcg._gfd.Relationship = append(_dbcg._gfd.Relationship, _fgd)
	return Relationship{_edd: _fgd}
}

// ImageFromFile reads an image from a file on disk. It doesn't keep the image
// in memory and only reads it to determine the format and size. You can also
// construct an Image directly if the file and size are known.
// NOTE: See also ImageFromStorage.
func ImageFromFile(path string) (Image, error) {
	_ffb, _dba := _be.Open(path)
	_fefa := Image{}
	if _dba != nil {
		return _fefa, _ca.Errorf("error\u0020reading\u0020image:\u0020\u0025s", _dba)
	}
	defer _ffb.Close()
	_fbb, _aga, _dba := _d.Decode(_ffb)
	if _dba != nil {
		return _fefa, _ca.Errorf("unable to\u0020parse\u0020image:\u0020\u0025s", _dba)
	}
	_fefa.Path = path
	_fefa.Format = _aga
	_fefa.Size = _fbb.Bounds().Size()
	return _fefa, nil
}

// Application returns the name of the application that created the document.
// For unioffice created documents, it defaults to gitee.com/greatmusicians/unioffice
func (_begg AppProperties) Application() string {
	if _begg._aff.Application != nil {
		return *_begg._aff.Application
	}
	return ""
}

// RelID returns the relationship ID.
func (_eaf ImageRef) RelID() string { return _eaf._fefg }

// AddRow adds a row to a table.
func (_accg Table) AddRow() *TableRow {
	_fcg := _ag.NewCT_TableRow()
	for _bef := 0; _bef < len(_accg._fege.TblGrid.GridCol); _bef++ {
		_fcg.Tc = append(_fcg.Tc, _ag.NewCT_TableCell())
	}
	_accg._fege.Tr = append(_accg._fege.Tr, _fcg)
	return &TableRow{_cgag: _fcg}
}

// X returns the inner wrapped XML type.
func (_bfdd Theme) X() *_ag.Theme { return _bfdd._dcag }

const _fdfd = "2006\u002d01\u002d02T15:04:05Z"

// EnsureOverride ensures that an override for the given path exists, adding it if necessary
func (_cdd ContentTypes) EnsureOverride(path, contentType string) {
	for _, _ebf := range _cdd._bacb.Override {
		if _ebf.PartNameAttr == path {
			if _dg.HasPrefix(contentType, "http") {
				_fd.Log("content\u0020type\u0020\u0027%s\u0027\u0020is\u0020incorrect\u002c must\u0020not\u0020start\u0020with\u0020http", contentType)
			}
			_ebf.ContentTypeAttr = contentType
			return
		}
	}
	_cdd.AddOverride(path, contentType)
}
func (_edg CustomProperties) SetPropertyAsUi2(name string, ui2 uint16) {
	_dfgc := _edg.getNewProperty(name)
	_dfgc.Ui2 = &ui2
	_edg.setOrReplaceProperty(_dfgc)
}

// SetLastModifiedBy records the last person to modify the document.
func (_cddb CoreProperties) SetLastModifiedBy(s string) { _cddb._baega.LastModifiedBy = &s }
func (_degc CustomProperties) SetPropertyAsR4(name string, r4 float32) {
	_fgf := _degc.getNewProperty(name)
	_fgf.R4 = &r4
	_degc.setOrReplaceProperty(_fgf)
}

// GetPropertyByName returns a custom property selected by it's name.
func (_bda CustomProperties) GetPropertyByName(name string) CustomProperty {
	_gcfc := _bda._bdd.Property
	for _, _bbf := range _gcfc {
		if *_bbf.NameAttr == name {
			return CustomProperty{_cab: _bbf}
		}
	}
	return CustomProperty{}
}

// NewRelationship constructs a new relationship.
func NewRelationship() Relationship { return Relationship{_edd: _bb.NewRelationship()} }

// X returns the inner wrapped XML type.
func (_bdab Relationship) X() *_bb.Relationship { return _bdab._edd }

// Format returns the format of the underlying image
func (_acd ImageRef) Format() string { return _acd._gdg.Format }

// Properties returns table properties.
func (_dfb Table) Grid() *_ag.CT_TableGrid { return _dfb._fege.TblGrid }

// Clear removes any existing relationships.
func (_ddbf Relationships) Clear() { _ddbf._gfd.Relationship = nil }

// SetOffsetY sets vertical offset of a table in distance units (see measurement package).
func (_bffd Table) SetOffsetY(offY float64) {
	if _bffd._deag.Off == nil {
		_bffd._deag.Off = _ag.NewCT_Point2D()
		_cabg := int64(0)
		_bffd._deag.Off.XAttr = _ag.ST_Coordinate{ST_CoordinateUnqualified: &_cabg}
	}
	_aba := _e.ToEMU(offY)
	_bffd._deag.Off.YAttr = _ag.ST_Coordinate{ST_CoordinateUnqualified: &_aba}
}

// SetApplicationVersion sets the version of the application that created the
// document.  Per MS, the verison string mut be in the form 'XX.YYYY'.
func (_bbg AppProperties) SetApplicationVersion(s string) { _bbg._aff.AppVersion = &s }

// RelativeWidth returns the relative width of an image given a fixed height.
// This is used when setting image to a fixed height to calculate the width
// required to keep the same image aspect ratio.
func (_dage ImageRef) RelativeWidth(h _e.Distance) _e.Distance {
	_bacd := float64(_dage.Size().X) / float64(_dage.Size().Y)
	return h * _e.Distance(_bacd)
}

// CopyOverride copies override content type for a given `path` and puts it with a path `newPath`.
func (_abc ContentTypes) CopyOverride(path, newPath string) {
	if !_dg.HasPrefix(path, "\u002f") {
		path = "\u002f" + path
	}
	if !_dg.HasPrefix(newPath, "\u002f") {
		newPath = "\u002f" + newPath
	}
	for _dgd := range _abc._bacb.Override {
		if _abc._bacb.Override[_dgd].PartNameAttr == path {
			_fae := *_abc._bacb.Override[_dgd]
			_fae.PartNameAttr = newPath
			_abc._bacb.Override = append(_abc._bacb.Override, &_fae)
		}
	}
}
func (_eebe CustomProperties) setOrReplaceProperty(_eca *_eg.CT_Property) {
	_eebe.setPropertyHelper(_eca, true)
}

// SetCreated sets the time that the document was created.
func (_dag CoreProperties) SetCreated(t _ba.Time) { _dag._baega.Created = _beb(t, "dcterms:created") }

// FindRIDForN returns the relationship ID for the i'th relationship of type t.
func (_cdda Relationships) FindRIDForN(i int, t string) string {
	for _, _dff := range _cdda._gfd.CT_Relationships.Relationship {
		if _dff.TypeAttr == t {
			if i == 0 {
				return _dff.IdAttr
			}
			i--
		}
	}
	return ""
}
func (_cee CustomProperties) SetPropertyAsBool(name string, b bool) {
	_bcd := _cee.getNewProperty(name)
	_bcd.Bool = &b
	_cee.setOrReplaceProperty(_bcd)
}
func (_dbf CustomProperties) SetPropertyAsR8(name string, r8 float64) {
	_agc := _dbf.getNewProperty(name)
	_agc.R8 = &r8
	_dbf.setOrReplaceProperty(_agc)
}

// Target returns the target (path) of a relationship.
func (_fdaf Relationship) Target() string { return _fdaf._edd.TargetAttr }

// SetApplication sets the name of the application that created the document.
func (_dfg AppProperties) SetApplication(s string) { _dfg._aff.Application = &s }

const _dcb = 31

// X returns the inner wrapped XML type.
func (_dea AppProperties) X() *_fa.Properties { return _dea._aff }
func (_egec CustomProperties) SetPropertyAsCy(name string, cy string) {
	_ddb := _egec.getNewProperty(name)
	_ddb.Cy = &cy
	_egec.setOrReplaceProperty(_ddb)
}
func (_bbgc CustomProperties) SetPropertyAsUi8(name string, ui8 uint64) {
	_fcee := _bbgc.getNewProperty(name)
	_fcee.Ui8 = &ui8
	_bbgc.setOrReplaceProperty(_fcee)
}
func (_fce CustomProperties) SetPropertyAsUi4(name string, ui4 uint32) {
	_def := _fce.getNewProperty(name)
	_def.Ui4 = &ui4
	_fce.setOrReplaceProperty(_def)
}

// Type returns the type of a relationship.
func (_bde Relationship) Type() string { return _bde._edd.TypeAttr }

// Append appends DocBase part of an office document to another DocBase.
func (_ec DocBase) Append(docBase1 DocBase) DocBase {
	_ae := docBase1.ContentTypes.X()
	for _, _af := range _ae.Default {
		_ec.ContentTypes.AddDefault(_af.ExtensionAttr, _af.ContentTypeAttr)
	}
	for _, _bg := range _ae.Override {
		_ec.ContentTypes.AddOverride(_bg.PartNameAttr, _bg.ContentTypeAttr)
	}
	_ad := _ec.AppProperties.X()
	_ege := docBase1.AppProperties.X()
	if _ad.Pages != nil {
		if _ege.Pages != nil {
			*_ad.Pages += *_ege.Pages
		}
	} else if _ege.Pages != nil {
		_ad.Pages = _ege.Pages
	}
	if _ad.Words != nil {
		if _ege.Words != nil {
			*_ad.Words += *_ege.Words
		}
	} else if _ege.Words != nil {
		_ad.Words = _ege.Words
	}
	if _ad.Characters != nil {
		if _ege.Characters != nil {
			*_ad.Characters += *_ege.Characters
		}
	} else if _ege.Characters != nil {
		_ad.Characters = _ege.Characters
	}
	if _ad.Lines != nil {
		if _ege.Lines != nil {
			*_ad.Lines += *_ege.Lines
		}
	} else if _ege.Lines != nil {
		_ad.Lines = _ege.Lines
	}
	if _ad.Paragraphs != nil {
		if _ege.Paragraphs != nil {
			*_ad.Paragraphs += *_ege.Paragraphs
		}
	} else if _ege.Paragraphs != nil {
		_ad.Paragraphs = _ege.Paragraphs
	}
	if _ad.Notes != nil {
		if _ege.Notes != nil {
			*_ad.Notes += *_ege.Notes
		}
	} else if _ege.Notes != nil {
		_ad.Notes = _ege.Notes
	}
	if _ad.HiddenSlides != nil {
		if _ege.HiddenSlides != nil {
			*_ad.HiddenSlides += *_ege.HiddenSlides
		}
	} else if _ege.HiddenSlides != nil {
		_ad.HiddenSlides = _ege.HiddenSlides
	}
	if _ad.MMClips != nil {
		if _ege.MMClips != nil {
			*_ad.MMClips += *_ege.MMClips
		}
	} else if _ege.MMClips != nil {
		_ad.MMClips = _ege.MMClips
	}
	if _ad.LinksUpToDate != nil {
		if _ege.LinksUpToDate != nil {
			*_ad.LinksUpToDate = *_ad.LinksUpToDate && *_ege.LinksUpToDate
		}
	} else if _ege.LinksUpToDate != nil {
		_ad.LinksUpToDate = _ege.LinksUpToDate
	}
	if _ad.CharactersWithSpaces != nil {
		if _ege.CharactersWithSpaces != nil {
			*_ad.CharactersWithSpaces += *_ege.CharactersWithSpaces
		}
	} else if _ege.CharactersWithSpaces != nil {
		_ad.CharactersWithSpaces = _ege.CharactersWithSpaces
	}
	if _ad.SharedDoc != nil {
		if _ege.SharedDoc != nil {
			*_ad.SharedDoc = *_ad.SharedDoc || *_ege.SharedDoc
		}
	} else if _ege.SharedDoc != nil {
		_ad.SharedDoc = _ege.SharedDoc
	}
	if _ad.HyperlinksChanged != nil {
		if _ege.HyperlinksChanged != nil {
			*_ad.HyperlinksChanged = *_ad.HyperlinksChanged || *_ege.HyperlinksChanged
		}
	} else if _ege.HyperlinksChanged != nil {
		_ad.HyperlinksChanged = _ege.HyperlinksChanged
	}
	_ad.DigSig = nil
	if _ad.TitlesOfParts == nil && _ege.TitlesOfParts != nil {
		_ad.TitlesOfParts = _ege.TitlesOfParts
	}
	if _ad.HeadingPairs != nil {
		if _ege.HeadingPairs != nil {
			_ee := _ad.HeadingPairs.Vector
			_gc := _ege.HeadingPairs.Vector
			_cc := _ee.Variant
			_da := _gc.Variant
			_gf := []*_de.Variant{}
			for _cd := 0; _cd < len(_da); _cd += 2 {
				_fg := _da[_cd].Lpstr
				_aef := false
				for _ecd := 0; _ecd < len(_cc); _ecd += 2 {
					_ccf := _cc[_ecd].Lpstr
					if _ccf != nil && _fg != nil && *_ccf == *_fg {
						*_cc[_ecd+1].I4 = *_cc[_ecd+1].I4 + *_da[_cd+1].I4
						_aef = true
						break
					}
				}
				if !_aef {
					_gf = append(_gf, &_de.Variant{CT_Variant: _de.CT_Variant{Lpstr: _da[_cd].Lpstr}})
					_gf = append(_gf, &_de.Variant{CT_Variant: _de.CT_Variant{I4: _da[_cd].I4}})
				}
			}
			_cc = append(_cc, _gf...)
			_ee.SizeAttr = uint32(len(_cc))
		}
	} else if _ege.HeadingPairs != nil {
		_ad.HeadingPairs = _ege.HeadingPairs
	}
	if _ad.HLinks != nil {
		if _ege.HLinks != nil {
			_fdf := _ad.HLinks.Vector
			_bed := _ege.HLinks.Vector
			_fe := _fdf.Variant
			_fef := _bed.Variant
			for _, _eef := range _fef {
				_agf := true
				for _, _ab := range _fe {
					if _f.DeepEqual(_ab, _eef) {
						_agf = false
						break
					}
				}
				if _agf {
					_fe = append(_fe, _eef)
					_fdf.SizeAttr++
				}
			}
		}
	} else if _ege.HLinks != nil {
		_ad.HLinks = _ege.HLinks
	}
	_gd := _ec.GetOrCreateCustomProperties()
	_bea := docBase1.GetOrCreateCustomProperties()
	for _, _caa := range _bea.PropertiesList() {
		_gd.setProperty(_caa)
	}
	_ec.CustomProperties = _gd
	_bae := _ec.Rels.X().Relationship
	for _, _adf := range docBase1.Rels.X().Relationship {
		_abe := true
		for _, _bgf := range _bae {
			if _bgf.TargetAttr == _adf.TargetAttr && _bgf.TypeAttr == _adf.TypeAttr {
				_abe = false
				break
			}
		}
		if _abe {
			_ec.Rels.AddRelationship(_adf.TargetAttr, _adf.TypeAttr)
		}
	}
	for _, _fb := range docBase1.ExtraFiles {
		_baeg := _fb.ZipPath
		_bac := true
		for _, _afc := range _ec.ExtraFiles {
			if _afc.ZipPath == _baeg {
				_bac = false
				break
			}
		}
		if _bac {
			_ec.ExtraFiles = append(_ec.ExtraFiles, _fb)
		}
	}
	return _ec
}

// NewRelationshipsCopy creates a new relationships wrapper as a copy of passed in instance.
func NewRelationshipsCopy(rels Relationships) Relationships {
	_bdae := *rels._gfd
	return Relationships{_gfd: &_bdae}
}
func (_cga CustomProperties) SetPropertyAsArray(name string, array *_de.Array) {
	_gfa := _cga.getNewProperty(name)
	_gfa.Array = array
	_cga.setOrReplaceProperty(_gfa)
}
func (_fgag CustomProperties) SetPropertyAsBstr(name string, bstr string) {
	_gfad := _fgag.getNewProperty(name)
	_gfad.Bstr = &bstr
	_fgag.setOrReplaceProperty(_gfad)
}

// ContentStatus returns the content status of the document (e.g. "Final", "Draft")
func (_baf CoreProperties) ContentStatus() string {
	if _baf._baega.ContentStatus != nil {
		return *_baf._baega.ContentStatus
	}
	return ""
}

// Relationships represents a .rels file.
type Relationships struct{ _gfd *_bb.Relationships }

// ImageRef is a reference to an image within a document.
type ImageRef struct {
	_bfc  *DocBase
	_abcd Relationships
	_gdg  Image
	_fefg string
	_dda  string
}

// SetCategory records the category of the document.
func (_affg CoreProperties) SetCategory(s string) { _affg._baega.Category = &s }

// SetTarget set the target (path) of a relationship.
func (_cef Relationship) SetTarget(s string) { _cef._edd.TargetAttr = s }

const _geg = 2021

// SetHeight sets row height, see measurement package.
func (_abg TableRow) SetHeight(m _e.Distance) {
	_egb := _e.ToEMU(float64(m))
	_abg._cgag.HAttr = _ag.ST_Coordinate{ST_CoordinateUnqualified: &_egb}
}
func (_cbc CustomProperties) SetPropertyAsDate(name string, date _ba.Time) {
	date = date.UTC()
	_faa, _cbcd, _afg := date.Date()
	_dced, _gag, _cde := date.Clock()
	_cadf := _ba.Date(_faa, _cbcd, _afg, _dced, _gag, _cde, 0, _ba.UTC)
	_aab := _cbc.getNewProperty(name)
	_aab.Filetime = &_cadf
	_cbc.setOrReplaceProperty(_aab)
}

// RelativeHeight returns the relative height of an image given a fixed width.
// This is used when setting image to a fixed width to calculate the height
// required to keep the same image aspect ratio.
func (_fage ImageRef) RelativeHeight(w _e.Distance) _e.Distance {
	_gfac := float64(_fage.Size().Y) / float64(_fage.Size().X)
	return w * _e.Distance(_gfac)
}

// Remove removes an existing relationship.
func (_bfcd Relationships) Remove(rel Relationship) bool {
	for _cefc, _fgfa := range _bfcd._gfd.Relationship {
		if _fgfa == rel._edd {
			copy(_bfcd._gfd.Relationship[_cefc:], _bfcd._gfd.Relationship[_cefc+1:])
			_bfcd._gfd.Relationship = _bfcd._gfd.Relationship[0 : len(_bfcd._gfd.Relationship)-1]
			return true
		}
	}
	return false
}

// Author returns the author of the document
func (_bga CoreProperties) Author() string {
	if _bga._baega.Creator != nil {
		return string(_bga._baega.Creator.Data)
	}
	return ""
}
func (_gaa CustomProperties) SetPropertyAsStream(name string, stream string) {
	_fde := _gaa.getNewProperty(name)
	_fde.Stream = &stream
	_gaa.setOrReplaceProperty(_fde)
}

// SetWidth sets column width, see measurement package.
func (_acf TableCol) SetWidth(m _e.Distance) {
	_bdfg := _e.ToEMU(float64(m))
	_acf._afgg.WAttr = _ag.ST_Coordinate{ST_CoordinateUnqualified: &_bdfg}
}

const _aad = 30

func (_agb CustomProperties) SetPropertyAsI1(name string, i1 int8) {
	_cda := _agb.getNewProperty(name)
	_cda.I1 = &i1
	_agb.setOrReplaceProperty(_cda)
}

// TblStyle returns the TblStyle property.
func (_ebbg TableStyles) TblStyle() []*_ag.CT_TableStyle { return _ebbg._bfgf.TblStyle }

// Table represents a table in the document.
type Table struct {
	_fege *_ag.Tbl
	_deag *_ag.CT_Transform2D
}

// ID returns the ID of a relationship.
func (_gef Relationship) ID() string { return _gef._edd.IdAttr }
func (_ccbf CustomProperties) SetPropertyAsLpstr(name string, lpstr string) {
	_ebb := _ccbf.getNewProperty(name)
	_ebb.Lpstr = &lpstr
	_ccbf.setOrReplaceProperty(_ebb)
}

// AddCol adds a column to a table.
func (_bdc Table) AddCol() *TableCol {
	_egd := _ag.NewCT_TableCol()
	_bdc._fege.TblGrid.GridCol = append(_bdc._fege.TblGrid.GridCol, _egd)
	for _, _gga := range _bdc._fege.Tr {
		_bcdg := _ag.NewCT_TableCell()
		_gga.Tc = append(_gga.Tc, _bcdg)
	}
	return &TableCol{_afgg: _egd}
}
func (_affa CustomProperties) SetPropertyAsDecimal(name string, decimal float64) {
	_agcb := _affa.getNewProperty(name)
	_agcb.Decimal = &decimal
	_affa.setOrReplaceProperty(_agcb)
}

// DefAttr returns the DefAttr property.
func (_aae TableStyles) DefAttr() string { return _aae._bfgf.DefAttr }
func (_dbfa CustomProperties) SetPropertyAsLpwstr(name string, lpwstr string) {
	_aefe := _dbfa.getNewProperty(name)
	_aefe.Lpwstr = &lpwstr
	_dbfa.setOrReplaceProperty(_aefe)
}

// ContentTypes is the top level "[Content_Types].xml" in a zip package.
type ContentTypes struct{ _bacb *_bd.Types }

// AddDefault registers a default content type for a given file extension.
func (_ff ContentTypes) AddDefault(fileExtension string, contentType string) {
	fileExtension = _dg.ToLower(fileExtension)
	for _, _adb := range _ff._bacb.Default {
		if _adb.ExtensionAttr == fileExtension && _adb.ContentTypeAttr == contentType {
			return
		}
	}
	_gcf := _bd.NewDefault()
	_gcf.ExtensionAttr = fileExtension
	_gcf.ContentTypeAttr = contentType
	_ff._bacb.Default = append(_ff._bacb.Default, _gcf)
}
func (_ccff CustomProperties) SetPropertyAsInt(name string, i int) {
	_aaa := _ccff.getNewProperty(name)
	_dad := int32(i)
	_aaa.Int = &_dad
	_ccff.setOrReplaceProperty(_aaa)
}

// Modified returns the time that the document was modified.
func (_bff CoreProperties) Modified() _ba.Time { return _ecf(_bff._baega.Modified) }

// X returns the inner wrapped XML type.
func (_dede TableStyles) X() *_ag.TblStyleLst { return _dede._bfgf }

// AddCustomRelationships adds relationships related to custom properties to the document.
func (_eae *DocBase) AddCustomRelationships() {
	_eae.ContentTypes.AddOverride("/docProps\u002fcustom.xml", "application\u002fvnd\u002eopenxmlformats\u002dofficedocument\u002ecustom\u002dproperties+xml")
	_eae.Rels.AddRelationship("docProps\u002fcustom\u002exml", _fd.CustomPropertiesType)
}

// TableCol represents a column in a table.
type TableCol struct{ _afgg *_ag.CT_TableCol }

// IsEmpty returns true if there are no relationships.
func (_aeb Relationships) IsEmpty() bool { return _aeb._gfd == nil || len(_aeb._gfd.Relationship) == 0 }

// Category returns the category of the document
func (_dab CoreProperties) Category() string {
	if _dab._baega.Category != nil {
		return *_dab._baega.Category
	}
	return ""
}

// Size returns the size of an image
func (_gba ImageRef) Size() _d.Point { return _gba._gdg.Size }

// CopyRelationship copies the relationship.
func (_dbfc Relationships) CopyRelationship(idAttr string) (Relationship, bool) {
	for _bcb := range _dbfc._gfd.Relationship {
		if _dbfc._gfd.Relationship[_bcb].IdAttr == idAttr {
			_feg := *_dbfc._gfd.Relationship[_bcb]
			_cdde := len(_dbfc._gfd.Relationship) + 1
			_ccag := map[string]struct{}{}
			for _, _bgc := range _dbfc._gfd.Relationship {
				_ccag[_bgc.IdAttr] = struct{}{}
			}
			for _, _bbee := _ccag[_ca.Sprintf("rId%d", _cdde)]; _bbee; _, _bbee = _ccag[_ca.Sprintf("rId%d", _cdde)] {
				_cdde++
			}
			_feg.IdAttr = _ca.Sprintf("rId%d", _cdde)
			_dbfc._gfd.Relationship = append(_dbfc._gfd.Relationship, &_feg)
			return Relationship{_edd: &_feg}, true
		}
	}
	return Relationship{}, false
}

// X returns the inner wrapped XML type.
func (_aefd CustomProperties) X() *_eg.Properties { return _aefd._bdd }
func (_bfg CustomProperties) SetPropertyAsUi1(name string, ui1 uint8) {
	_eea := _bfg.getNewProperty(name)
	_eea.Ui1 = &ui1
	_bfg.setOrReplaceProperty(_eea)
}

// SetLinksUpToDate sets the links up to date flag.
func (_aac AppProperties) SetLinksUpToDate(v bool) { _aac._aff.LinksUpToDate = _fd.Bool(v) }

// CreateCustomProperties creates the custom properties of the document.
func (_aee *DocBase) CreateCustomProperties() {
	_aee.CustomProperties = NewCustomProperties()
	_aee.AddCustomRelationships()
}
func (_fcf Relationship) String() string {
	return _ca.Sprintf("\u007bID: \u0025s\u0020Target: \u0025s\u0020Type:\u0020%s\u007d", _fcf.ID(), _fcf.Target(), _fcf.Type())
}
func (_gbf *ImageRef) SetRelID(id string) { _gbf._fefg = id }
func (_ffg CustomProperties) SetPropertyAsBlob(name, blob string) {
	_cca := _ffg.getNewProperty(name)
	_cca.Blob = &blob
	_ffg.setOrReplaceProperty(_cca)
}
func (_cabc CustomProperties) SetPropertyAsEmpty(name string) {
	_dbc := _cabc.getNewProperty(name)
	_dbc.Empty = _de.NewEmpty()
	_cabc.setOrReplaceProperty(_dbc)
}

// ImageFromStorage reads an image using the currently set
// temporary storage mechanism (see tempstorage). You can also
// construct an Image directly if the file and size are known.
func ImageFromStorage(path string) (Image, error) {
	_bccb := Image{}
	_bdg, _adba := _gg.Open(path)
	if _adba != nil {
		return _bccb, _ca.Errorf("error\u0020reading\u0020image:\u0020\u0025s", _adba)
	}
	defer _bdg.Close()
	_acc, _afeg, _adba := _d.Decode(_bdg)
	if _adba != nil {
		return _bccb, _ca.Errorf("unable to\u0020parse\u0020image:\u0020\u0025s", _adba)
	}
	_bccb.Path = path
	_bccb.Format = _afeg
	_bccb.Size = _acc.Bounds().Size()
	return _bccb, nil
}

const _bbgcc = 5

func (_dcg CustomProperties) SetPropertyAsOstream(name string, ostream string) {
	_cad := _dcg.getNewProperty(name)
	_cad.Ostream = &ostream
	_dcg.setOrReplaceProperty(_cad)
}
func (_afe CustomProperties) setPropertyHelper(_bfd *_eg.CT_Property, _bgd bool) {
	_deaf := _afe.GetPropertyByName(*_bfd.NameAttr)
	if (_deaf == CustomProperty{}) {
		_afe._bdd.Property = append(_afe._bdd.Property, _bfd)
	} else if _bgd {
		_bfd.FmtidAttr = _deaf._cab.FmtidAttr
		if _deaf._cab.PidAttr == 0 {
			_bfd.PidAttr = _deaf._cab.PidAttr
		}
		_bfd.LinkTargetAttr = _deaf._cab.LinkTargetAttr
		*_deaf._cab = *_bfd
	}
}

// GetOrCreateCustomProperties returns the custom properties of the document (and if they not exist yet, creating them first).
func (_dafb *DocBase) GetOrCreateCustomProperties() CustomProperties {
	if _dafb.CustomProperties.X() == nil {
		_dafb.CreateCustomProperties()
	}
	return _dafb.CustomProperties
}

// NewTable makes a new table.
func NewTable() *Table {
	_eafa := _ag.NewTbl()
	_eafa.TblPr = _ag.NewCT_TableProperties()
	return &Table{_fege: _eafa}
}
func (_bfee CustomProperties) SetPropertyAsOstorage(name string, ostorage string) {
	_efd := _bfee.getNewProperty(name)
	_efd.Ostorage = &ostorage
	_bfee.setOrReplaceProperty(_efd)
}

// Image is a container for image information. It's used as we need format and
// and size information to use images.
// It contains either the filesystem path to the image, or the image itself.
type Image struct {
	Size   _d.Point
	Format string
	Path   string
	Data   *[]byte
}

func (_gbg CustomProperties) SetPropertyAsUint(name string, ui uint) {
	_dce := _gbg.getNewProperty(name)
	_dgc := uint32(ui)
	_dce.Uint = &_dgc
	_gbg.setOrReplaceProperty(_dce)
}

const _ebccd = 15

func (_fgbb CustomProperties) SetPropertyAsI2(name string, i2 int16) {
	_ada := _fgbb.getNewProperty(name)
	_ada.I2 = &i2
	_fgbb.setOrReplaceProperty(_ada)
}

// AddImageToZip adds an image (either from bytes or from disk) and adds it to the zip file.
func AddImageToZip(z *_cgf.Writer, img ImageRef, imageNum int, dt _fd.DocType) error {
	_bbge := _fd.AbsoluteImageFilename(dt, imageNum, _dg.ToLower(img.Format()))
	if img.Data() != nil && len(*img.Data()) > 0 {
		if _fgff := _cf.AddFileFromBytes(z, _bbge, *img.Data()); _fgff != nil {
			return _fgff
		}
	} else if img.Path() != "" {
		if _efb := _cf.AddFileFromDisk(z, _bbge, img.Path()); _efb != nil {
			return _efb
		}
	} else {
		return _ca.Errorf("unsupported\u0020image\u0020source: %\u002bv", img)
	}
	return nil
}

// SetCompany sets the name of the company that created the document.
func (_bc AppProperties) SetCompany(s string) { _bc._aff.Company = &s }

// MakeImageRef constructs an image reference which is a reference to a
// particular image file inside a document.  The same image can be used multiple
// times in a document by re-use the ImageRef.
func MakeImageRef(img Image, d *DocBase, rels Relationships) ImageRef {
	return ImageRef{_gdg: img, _bfc: d, _abcd: rels}
}

// AddAutoRelationship adds a relationship with an automatically generated
// filename based off of the type. It should be preferred over AddRelationship
// to ensure consistent filenames are maintained.
func (_dcec Relationships) AddAutoRelationship(dt _fd.DocType, src string, idx int, ctype string) Relationship {
	return _dcec.AddRelationship(_fd.RelativeFilename(dt, src, ctype, idx), ctype)
}

// SetDocSecurity sets the document security flag.
func (_beae AppProperties) SetDocSecurity(v int32) { _beae._aff.DocSecurity = _fd.Int32(v) }
func (_ccbb CustomProperties) SetPropertyAsOblob(name, oblob string) {
	_gff := _ccbb.getNewProperty(name)
	_gff.Oblob = &oblob
	_ccbb.setOrReplaceProperty(_gff)
}

// Target returns the target attrubute of the image reference (a path where the image file is located in the document structure).
func (_ccbe *ImageRef) Target() string { return _ccbe._dda }

// AppProperties contains properties specific to the document and the
// application that created it.
type AppProperties struct{ _aff *_fa.Properties }

func _ecf(_bfag *_fd.XSDAny) _ba.Time {
	if _bfag == nil {
		return _ba.Time{}
	}
	_dgb, _ggf := _ba.Parse(_fdfd, string(_bfag.Data))
	if _ggf != nil {
		_fd.Log("error\u0020parsing\u0020time from\u0020\u0025s:\u0020\u0025s", string(_bfag.Data), _ggf)
	}
	return _dgb
}

// PropertiesList returns the list of all custom properties of the document.
func (_egc CustomProperties) PropertiesList() []*_eg.CT_Property { return _egc._bdd.Property }

// EnsureDefault esnures that an extension and default content type exist,
// adding it if necessary.
func (_dd ContentTypes) EnsureDefault(ext, contentType string) {
	ext = _dg.ToLower(ext)
	for _, _fab := range _dd._bacb.Default {
		if _fab.ExtensionAttr == ext {
			_fab.ContentTypeAttr = contentType
			return
		}
	}
	_cfg := &_bd.Default{}
	_cfg.ContentTypeAttr = contentType
	_cfg.ExtensionAttr = ext
	_dd._bacb.Default = append(_dd._bacb.Default, _cfg)
}

// RemoveOverrideByIndex removes an override given a path and override index.
func (_deaa ContentTypes) RemoveOverrideByIndex(path string, indexToFind int) error {
	_dgg := path[0 : len(path)-5]
	if !_dg.HasPrefix(_dgg, "\u002f") {
		_dgg = "\u002f" + _dgg
	}
	_ebcc, _bfa := _g.Compile(_dgg + "\u0028\u005b0-9\u005d\u002b\u0029\u002exml")
	if _bfa != nil {
		return _bfa
	}
	_aed := 0
	_ed := -1
	for _egeb, _fed := range _deaa._bacb.Override {
		if _ea := _ebcc.FindStringSubmatch(_fed.PartNameAttr); len(_ea) > 1 {
			if _aed == indexToFind {
				_ed = _egeb
			} else if _aed > indexToFind {
				_ggd, _ := _db.Atoi(_ea[1])
				_ggd--
				_fed.PartNameAttr = _ca.Sprintf("\u0025s\u0025d\u002exml", _dgg, _ggd)
			}
			_aed++
		}
	}
	if _ed > -1 {
		copy(_deaa._bacb.Override[_ed:], _deaa._bacb.Override[_ed+1:])
		_deaa._bacb.Override = _deaa._bacb.Override[0 : len(_deaa._bacb.Override)-1]
	}
	return nil
}

// Relationship is a relationship within a .rels file.
type Relationship struct{ _edd *_bb.Relationship }

func (_gcaf CustomProperties) SetPropertyAsStorage(name string, storage string) {
	_ffa := _gcaf.getNewProperty(name)
	_ffa.Storage = &storage
	_gcaf.setOrReplaceProperty(_ffa)
}

// X returns the underlying raw XML data.
func (_bccc Relationships) X() *_bb.Relationships { return _bccc._gfd }

// SetOffsetX sets horizontal offset of a table in distance units (see measurement package).
func (_gdc Table) SetOffsetX(offX float64) {
	if _gdc._deag.Off == nil {
		_gdc._deag.Off = _ag.NewCT_Point2D()
		_eeff := int64(0)
		_gdc._deag.Off.YAttr = _ag.ST_Coordinate{ST_CoordinateUnqualified: &_eeff}
	}
	_gdgc := _e.ToEMU(offX)
	_gdc._deag.Off.XAttr = _ag.ST_Coordinate{ST_CoordinateUnqualified: &_gdgc}
}
func (_eee CustomProperties) setProperty(_bcc *_eg.CT_Property) { _eee.setPropertyHelper(_bcc, false) }

// LastModifiedBy returns the name of the last person to modify the document
func (_baeae CoreProperties) LastModifiedBy() string {
	if _baeae._baega.LastModifiedBy != nil {
		return *_baeae._baega.LastModifiedBy
	}
	return ""
}

// X returns the inner wrapped XML type of CustomProperty.
func (_adc CustomProperty) X() *_eg.CT_Property { return _adc._cab }

// AddHyperlink adds an external hyperlink relationship.
func (_gbe Relationships) AddHyperlink(target string) Hyperlink {
	_ffc := _gbe.AddRelationship(target, _fd.HyperLinkType)
	_ffc._edd.TargetModeAttr = _bb.ST_TargetModeExternal
	return Hyperlink(_ffc)
}

// CoreProperties contains document specific properties.
type CoreProperties struct{ _baega *_beg.CoreProperties }

const Version = "1\u002e11\u002e0"

// CustomProperty contains document specific property.
// Using of this type is deprecated.
type CustomProperty struct{ _cab *_eg.CT_Property }

// Title returns the Title of the document
func (_fga CoreProperties) Title() string {
	if _fga._baega.Title != nil {
		return string(_fga._baega.Title.Data)
	}
	return ""
}

// Theme is a drawingml theme.
type Theme struct{ _dcag *_ag.Theme }

func init() { _ceg.SetAsStorage() }
func (_fda CustomProperties) SetPropertyAsVector(name string, vector *_de.Vector) {
	_dgdb := _fda.getNewProperty(name)
	_dgdb.Vector = vector
	_fda.setOrReplaceProperty(_dgdb)
}

// Description returns the description of the document
func (_dca CoreProperties) Description() string {
	if _dca._baega.Description != nil {
		return string(_dca._baega.Description.Data)
	}
	return ""
}
func (_fedc CustomProperties) SetPropertyAsFiletime(name string, filetime _ba.Time) {
	_afgf := _fedc.getNewProperty(name)
	_afgf.Filetime = &filetime
	_fedc.setOrReplaceProperty(_afgf)
}

// CustomProperties contains document specific properties.
type CustomProperties struct{ _bdd *_eg.Properties }

// NewTableStyles constructs a new TableStyles.
func NewTableStyles() TableStyles { return TableStyles{_bfgf: _ag.NewTblStyleLst()} }

// AddExtraFileFromZip is used when reading an unsupported file from an OOXML
// file. This ensures that unsupported file content will at least round-trip
// correctly.
func (_agfd *DocBase) AddExtraFileFromZip(f *_cgf.File) error {
	_ecac, _dfeg := _cf.ExtractToDiskTmp(f, _agfd.TmpPath)
	if _dfeg != nil {
		return _ca.Errorf("error\u0020extracting\u0020unsupported\u0020file:\u0020\u0025s", _dfeg)
	}
	_agfd.ExtraFiles = append(_agfd.ExtraFiles, ExtraFile{ZipPath: f.Name, DiskPath: _ecac})
	return nil
}

// SetStyle assigns TableStyle to a table.
func (_ebfe Table) SetStyle(style *_ag.CT_TableStyle) {
	if _ebfe._fege.TblPr == nil {
		_ebfe._fege.TblPr = _ag.NewCT_TableProperties()
	}
	if _ebfe._fege.TblPr.Choice == nil {
		_ebfe._fege.TblPr.Choice = _ag.NewCT_TablePropertiesChoice()
	}
	_ebfe._fege.TblPr.Choice.TableStyle = style
}
func (_cfbf TableRow) addCell() *_ag.CT_TableCell {
	_afa := _ag.NewCT_TableCell()
	_cfbf._cgag.Tc = append(_cfbf._cgag.Tc, _afa)
	return _afa
}
func (_cfb CustomProperties) getNewProperty(_egef string) *_eg.CT_Property {
	_ga := _cfb._bdd.Property
	_fag := int32(1)
	for _, _fbd := range _ga {
		if _fbd.PidAttr > _fag {
			_fag = _fbd.PidAttr
		}
	}
	_agfg := _eg.NewCT_Property()
	_agfg.NameAttr = &_egef
	_agfg.PidAttr = _fag + 1
	_agfg.FmtidAttr = "\u007bD5CDD505\u002d2E9C\u002d101B\u002d9397-08002B2CF9AE\u007d"
	return _agfg
}
func (_edb CustomProperties) SetPropertyAsError(name string, error string) {
	_daf := _edb.getNewProperty(name)
	_daf.Error = &error
	_edb.setOrReplaceProperty(_daf)
}

// NewContentTypes returns a wrapper around a newly constructed content-types.
func NewContentTypes() ContentTypes {
	_ebc := ContentTypes{_bacb: _bd.NewTypes()}
	_ebc.AddDefault("xml", "application\u002fxml")
	_ebc.AddDefault("rels", "application\u002fvnd\u002eopenxmlformats\u002dpackage\u002erelationships\u002bxml")
	_ebc.AddDefault("png", "image\u002fpng")
	_ebc.AddDefault("jpeg", "image\u002fjpeg")
	_ebc.AddDefault("jpg", "image\u002fjpg")
	_ebc.AddDefault("wmf", "image\u002fx\u002dwmf")
	_ebc.AddOverride("\u002fdocProps/core\u002exml", "application\u002fvnd\u002eopenxmlformats-package\u002ecore\u002dproperties\u002bxml")
	_ebc.AddOverride("\u002fdocProps\u002fapp\u002exml", "application\u002fvnd\u002eopenxmlformats\u002dofficedocument\u002eextended\u002dproperties\u002bxml")
	return _ebc
}

// TableStyles contains document specific properties.
type TableStyles struct{ _bfgf *_ag.TblStyleLst }

func _beb(_eefg _ba.Time, _dga string) *_fd.XSDAny {
	_dgf := &_fd.XSDAny{XMLName: _cgb.Name{Local: _dga}}
	_dgf.Attrs = append(_dgf.Attrs, _cgb.Attr{Name: _cgb.Name{Local: "xsi:type"}, Value: "dcterms:W3CDTF"})
	_dgf.Attrs = append(_dgf.Attrs, _cgb.Attr{Name: _cgb.Name{Local: "xmlns:xsi"}, Value: "http:/\u002fwww\u002ew3\u002eorg\u002f2001\u002fXMLSchema\u002dinstance"})
	_dgf.Attrs = append(_dgf.Attrs, _cgb.Attr{Name: _cgb.Name{Local: "xmlns:dcterms"}, Value: "http:\u002f/purl\u002eorg\u002fdc\u002fterms/"})
	_dgf.Data = []byte(_eefg.Format(_fdfd))
	return _dgf
}

// GetTargetByRelId returns a target path with the associated relation ID.
func (_gbc Relationships) GetTargetByRelId(idAttr string) string {
	for _, _gae := range _gbc._gfd.Relationship {
		if _gae.IdAttr == idAttr {
			return _gae.TargetAttr
		}
	}
	return ""
}

// DocBase is the type embedded in in the Document/Workbook/Presentation types
// that contains members common to all.
type DocBase struct {
	ContentTypes     ContentTypes
	AppProperties    AppProperties
	Rels             Relationships
	CoreProperties   CoreProperties
	CustomProperties CustomProperties
	Thumbnail        _d.Image
	Images           []ImageRef
	ExtraFiles       []ExtraFile
	TmpPath          string
}

func (_bec CustomProperties) SetPropertyAsI8(name string, i8 int64) {
	_ecg := _bec.getNewProperty(name)
	_ecg.I8 = &i8
	_bec.setOrReplaceProperty(_ecg)
}
func (_cbe CustomProperties) SetPropertyAsI4(name string, i4 int32) {
	_dfe := _cbe.getNewProperty(name)
	_dfe.I4 = &i4
	_cbe.setOrReplaceProperty(_dfe)
}

// Path returns the path to an image file, if any.
func (_edc ImageRef) Path() string { return _edc._gdg.Path }

// Created returns the time that the document was created.
func (_fba CoreProperties) Created() _ba.Time { return _ecf(_fba._baega.Created) }

// NewTableWithXfrm makes a new table with a pointer to its parent Xfrm for changing its offset and size.
func NewTableWithXfrm(xfrm *_ag.CT_Transform2D) *Table {
	_eafd := _ag.NewTbl()
	_eafd.TblPr = _ag.NewCT_TableProperties()
	return &Table{_fege: _eafd, _deag: xfrm}
}

// X returns the inner wrapped XML type.
func (_dbe CoreProperties) X() *_beg.CoreProperties { return _dbe._baega }
func (_gca CustomProperties) SetPropertyAsNull(name string) {
	_bfe := _gca.getNewProperty(name)
	_bfe.Null = _de.NewNull()
	_gca.setOrReplaceProperty(_bfe)
}

// TableRow represents a row in a table.
type TableRow struct{ _cgag *_ag.CT_TableRow }

func (_cge CustomProperties) SetPropertyAsClsid(name string, clsid string) {
	_adca := _cge.getNewProperty(name)
	_adca.Clsid = &clsid
	_cge.setOrReplaceProperty(_adca)
}

// Properties returns table properties.
func (_gab Table) Properties() *_ag.CT_TableProperties { return _gab._fege.TblPr }

// SetDescription records the description of the document.
func (_eeb CoreProperties) SetDescription(s string) {
	if _eeb._baega.Description == nil {
		_eeb._baega.Description = &_fd.XSDAny{XMLName: _cgb.Name{Local: "dc:description"}}
	}
	_eeb._baega.Description.Data = []byte(s)
}

// NewTheme constructs a new theme.
func NewTheme() Theme { return Theme{_ag.NewTheme()} }
func (_faab CustomProperties) SetPropertyAsVstream(name string, vstream *_de.Vstream) {
	_deda := _faab.getNewProperty(name)
	_deda.Vstream = vstream
	_faab.setOrReplaceProperty(_deda)
}

// Relationships returns a slice of all of the relationships.
func (_gbgc Relationships) Relationships() []Relationship {
	_eba := []Relationship{}
	for _, _fgae := range _gbgc._gfd.Relationship {
		_eba = append(_eba, Relationship{_edd: _fgae})
	}
	return _eba
}

// ImageFromBytes returns an Image struct for an in-memory image. You can also
// construct an Image directly if the file and size are known.
func ImageFromBytes(data []byte) (Image, error) {
	_aag := Image{}
	_abb, _dbb, _ebbf := _d.Decode(_ce.NewReader(data))
	if _ebbf != nil {
		return _aag, _ca.Errorf("unable to\u0020parse\u0020image:\u0020\u0025s", _ebbf)
	}
	_aag.Data = &data
	_aag.Format = _dbb
	_aag.Size = _abb.Bounds().Size()
	return _aag, nil
}

const _ccfe = "2\u0020January\u00202006\u0020at\u002015:04"

// NewCustomProperties constructs a new CustomProperties.
func NewCustomProperties() CustomProperties { return CustomProperties{_bdd: _eg.NewProperties()} }

// Hyperlink is just an appropriately configured relationship.
type Hyperlink Relationship

// SetAuthor records the author of the document.
func (_bbd CoreProperties) SetAuthor(s string) {
	if _bbd._baega.Creator == nil {
		_bbd._baega.Creator = &_fd.XSDAny{XMLName: _cgb.Name{Local: "dc:creator"}}
	}
	_bbd._baega.Creator.Data = []byte(s)
}

// GetImageBytesByTarget returns Image object with Data bytes read from its target.
func (_cdec *DocBase) GetImageBytesByTarget(target string) (Image, error) {
	if target != "" {
		target = "word\u002f" + target
		for _, _gcd := range _cdec.Images {
			if _gcd.Target() == target {
				return ImageFromStorage(_gcd.Path())
			}
		}
	}
	return Image{}, _ebfa
}
