//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package excel

import (
	_fc "encoding/xml"
	_e "fmt"
	_g "gitee.com/greatmusicians/unioffice"
	_c "gitee.com/greatmusicians/unioffice/schema/soo/ofc/sharedTypes"
)

func NewCT_ClientData() *CT_ClientData {
	_b := &CT_ClientData{}
	_b.ObjectTypeAttr = ST_ObjectType(1)
	return _b
}
func (_abg ST_ObjectType) MarshalXMLAttr(name _fc.Name) (_fc.Attr, error) {
	_cge := _fc.Attr{}
	_cge.Name = name
	switch _abg {
	case ST_ObjectTypeUnset:
		_cge.Value = ""
	case ST_ObjectTypeButton:
		_cge.Value = "Button"
	case ST_ObjectTypeCheckbox:
		_cge.Value = "Checkbox"
	case ST_ObjectTypeDialog:
		_cge.Value = "Dialog"
	case ST_ObjectTypeDrop:
		_cge.Value = "Drop"
	case ST_ObjectTypeEdit:
		_cge.Value = "Edit"
	case ST_ObjectTypeGBox:
		_cge.Value = "GBox"
	case ST_ObjectTypeLabel:
		_cge.Value = "Label"
	case ST_ObjectTypeLineA:
		_cge.Value = "LineA"
	case ST_ObjectTypeList:
		_cge.Value = "List"
	case ST_ObjectTypeMovie:
		_cge.Value = "Movie"
	case ST_ObjectTypeNote:
		_cge.Value = "Note"
	case ST_ObjectTypePict:
		_cge.Value = "Pict"
	case ST_ObjectTypeRadio:
		_cge.Value = "Radio"
	case ST_ObjectTypeRectA:
		_cge.Value = "RectA"
	case ST_ObjectTypeScroll:
		_cge.Value = "Scroll"
	case ST_ObjectTypeSpin:
		_cge.Value = "Spin"
	case ST_ObjectTypeShape:
		_cge.Value = "Shape"
	case ST_ObjectTypeGroup:
		_cge.Value = "Group"
	case ST_ObjectTypeRect:
		_cge.Value = "Rect"
	}
	return _cge, nil
}
func (_faa ST_ObjectType) ValidateWithPath(path string) error {
	switch _faa {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19:
	default:
		return _e.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_faa))
	}
	return nil
}
func (_dda ST_ObjectType) MarshalXML(e *_fc.Encoder, start _fc.StartElement) error {
	return e.EncodeElement(_dda.String(), start)
}
func (_eebfd *ST_ObjectType) UnmarshalXMLAttr(attr _fc.Attr) error {
	switch attr.Value {
	case "":
		*_eebfd = 0
	case "Button":
		*_eebfd = 1
	case "Checkbox":
		*_eebfd = 2
	case "Dialog":
		*_eebfd = 3
	case "Drop":
		*_eebfd = 4
	case "Edit":
		*_eebfd = 5
	case "GBox":
		*_eebfd = 6
	case "Label":
		*_eebfd = 7
	case "LineA":
		*_eebfd = 8
	case "List":
		*_eebfd = 9
	case "Movie":
		*_eebfd = 10
	case "Note":
		*_eebfd = 11
	case "Pict":
		*_eebfd = 12
	case "Radio":
		*_eebfd = 13
	case "RectA":
		*_eebfd = 14
	case "Scroll":
		*_eebfd = 15
	case "Spin":
		*_eebfd = 16
	case "Shape":
		*_eebfd = 17
	case "Group":
		*_eebfd = 18
	case "Rect":
		*_eebfd = 19
	}
	return nil
}
func (_bd *CT_ClientData) MarshalXML(e *_fc.Encoder, start _fc.StartElement) error {
	_ca, _ce := _bd.ObjectTypeAttr.MarshalXMLAttr(_fc.Name{Local: "ObjectType"})
	if _ce != nil {
		return _ce
	}
	start.Attr = append(start.Attr, _ca)
	e.EncodeToken(start)
	if _bd.MoveWithCells != _c.ST_TrueFalseBlankUnset {
		_ec := _fc.StartElement{Name: _fc.Name{Local: "x:MoveWithCells"}}
		e.EncodeElement(_bd.MoveWithCells, _ec)
	}
	if _bd.SizeWithCells != _c.ST_TrueFalseBlankUnset {
		_cec := _fc.StartElement{Name: _fc.Name{Local: "x:SizeWithCells"}}
		e.EncodeElement(_bd.SizeWithCells, _cec)
	}
	if _bd.Anchor != nil {
		_bdb := _fc.StartElement{Name: _fc.Name{Local: "x:Anchor"}}
		_g.AddPreserveSpaceAttr(&_bdb, *_bd.Anchor)
		e.EncodeElement(_bd.Anchor, _bdb)
	}
	if _bd.Locked != _c.ST_TrueFalseBlankUnset {
		_ge := _fc.StartElement{Name: _fc.Name{Local: "x:Locked"}}
		e.EncodeElement(_bd.Locked, _ge)
	}
	if _bd.DefaultSize != _c.ST_TrueFalseBlankUnset {
		_eb := _fc.StartElement{Name: _fc.Name{Local: "x:DefaultSize"}}
		e.EncodeElement(_bd.DefaultSize, _eb)
	}
	if _bd.PrintObject != _c.ST_TrueFalseBlankUnset {
		_gb := _fc.StartElement{Name: _fc.Name{Local: "x:PrintObject"}}
		e.EncodeElement(_bd.PrintObject, _gb)
	}
	if _bd.Disabled != _c.ST_TrueFalseBlankUnset {
		_d := _fc.StartElement{Name: _fc.Name{Local: "x:Disabled"}}
		e.EncodeElement(_bd.Disabled, _d)
	}
	if _bd.AutoFill != _c.ST_TrueFalseBlankUnset {
		_fe := _fc.StartElement{Name: _fc.Name{Local: "x:AutoFill"}}
		e.EncodeElement(_bd.AutoFill, _fe)
	}
	if _bd.AutoLine != _c.ST_TrueFalseBlankUnset {
		_ee := _fc.StartElement{Name: _fc.Name{Local: "x:AutoLine"}}
		e.EncodeElement(_bd.AutoLine, _ee)
	}
	if _bd.AutoPict != _c.ST_TrueFalseBlankUnset {
		_eba := _fc.StartElement{Name: _fc.Name{Local: "x:AutoPict"}}
		e.EncodeElement(_bd.AutoPict, _eba)
	}
	if _bd.FmlaMacro != nil {
		_gg := _fc.StartElement{Name: _fc.Name{Local: "x:FmlaMacro"}}
		_g.AddPreserveSpaceAttr(&_gg, *_bd.FmlaMacro)
		e.EncodeElement(_bd.FmlaMacro, _gg)
	}
	if _bd.TextHAlign != nil {
		_bf := _fc.StartElement{Name: _fc.Name{Local: "x:TextHAlign"}}
		_g.AddPreserveSpaceAttr(&_bf, *_bd.TextHAlign)
		e.EncodeElement(_bd.TextHAlign, _bf)
	}
	if _bd.TextVAlign != nil {
		_gc := _fc.StartElement{Name: _fc.Name{Local: "x:TextVAlign"}}
		_g.AddPreserveSpaceAttr(&_gc, *_bd.TextVAlign)
		e.EncodeElement(_bd.TextVAlign, _gc)
	}
	if _bd.LockText != _c.ST_TrueFalseBlankUnset {
		_ba := _fc.StartElement{Name: _fc.Name{Local: "x:LockText"}}
		e.EncodeElement(_bd.LockText, _ba)
	}
	if _bd.JustLastX != _c.ST_TrueFalseBlankUnset {
		_a := _fc.StartElement{Name: _fc.Name{Local: "x:JustLastX"}}
		e.EncodeElement(_bd.JustLastX, _a)
	}
	if _bd.SecretEdit != _c.ST_TrueFalseBlankUnset {
		_df := _fc.StartElement{Name: _fc.Name{Local: "x:SecretEdit"}}
		e.EncodeElement(_bd.SecretEdit, _df)
	}
	if _bd.Default != _c.ST_TrueFalseBlankUnset {
		_ecg := _fc.StartElement{Name: _fc.Name{Local: "x:Default"}}
		e.EncodeElement(_bd.Default, _ecg)
	}
	if _bd.Help != _c.ST_TrueFalseBlankUnset {
		_ac := _fc.StartElement{Name: _fc.Name{Local: "x:Help"}}
		e.EncodeElement(_bd.Help, _ac)
	}
	if _bd.Cancel != _c.ST_TrueFalseBlankUnset {
		_eed := _fc.StartElement{Name: _fc.Name{Local: "x:Cancel"}}
		e.EncodeElement(_bd.Cancel, _eed)
	}
	if _bd.Dismiss != _c.ST_TrueFalseBlankUnset {
		_be := _fc.StartElement{Name: _fc.Name{Local: "x:Dismiss"}}
		e.EncodeElement(_bd.Dismiss, _be)
	}
	if _bd.Accel != nil {
		_fd := _fc.StartElement{Name: _fc.Name{Local: "x:Accel"}}
		e.EncodeElement(_bd.Accel, _fd)
	}
	if _bd.Accel2 != nil {
		_gcg := _fc.StartElement{Name: _fc.Name{Local: "x:Accel2"}}
		e.EncodeElement(_bd.Accel2, _gcg)
	}
	if _bd.Row != nil {
		_da := _fc.StartElement{Name: _fc.Name{Local: "x:Row"}}
		e.EncodeElement(_bd.Row, _da)
	}
	if _bd.Column != nil {
		_cd := _fc.StartElement{Name: _fc.Name{Local: "x:Column"}}
		e.EncodeElement(_bd.Column, _cd)
	}
	if _bd.Visible != _c.ST_TrueFalseBlankUnset {
		_gd := _fc.StartElement{Name: _fc.Name{Local: "x:Visible"}}
		e.EncodeElement(_bd.Visible, _gd)
	}
	if _bd.RowHidden != _c.ST_TrueFalseBlankUnset {
		_ga := _fc.StartElement{Name: _fc.Name{Local: "x:RowHidden"}}
		e.EncodeElement(_bd.RowHidden, _ga)
	}
	if _bd.ColHidden != _c.ST_TrueFalseBlankUnset {
		_gf := _fc.StartElement{Name: _fc.Name{Local: "x:ColHidden"}}
		e.EncodeElement(_bd.ColHidden, _gf)
	}
	if _bd.VTEdit != nil {
		_ebd := _fc.StartElement{Name: _fc.Name{Local: "x:VTEdit"}}
		e.EncodeElement(_bd.VTEdit, _ebd)
	}
	if _bd.MultiLine != _c.ST_TrueFalseBlankUnset {
		_ecgf := _fc.StartElement{Name: _fc.Name{Local: "x:MultiLine"}}
		e.EncodeElement(_bd.MultiLine, _ecgf)
	}
	if _bd.VScroll != _c.ST_TrueFalseBlankUnset {
		_cc := _fc.StartElement{Name: _fc.Name{Local: "x:VScroll"}}
		e.EncodeElement(_bd.VScroll, _cc)
	}
	if _bd.ValidIds != _c.ST_TrueFalseBlankUnset {
		_gdc := _fc.StartElement{Name: _fc.Name{Local: "x:ValidIds"}}
		e.EncodeElement(_bd.ValidIds, _gdc)
	}
	if _bd.FmlaRange != nil {
		_dg := _fc.StartElement{Name: _fc.Name{Local: "x:FmlaRange"}}
		_g.AddPreserveSpaceAttr(&_dg, *_bd.FmlaRange)
		e.EncodeElement(_bd.FmlaRange, _dg)
	}
	if _bd.WidthMin != nil {
		_ae := _fc.StartElement{Name: _fc.Name{Local: "x:WidthMin"}}
		e.EncodeElement(_bd.WidthMin, _ae)
	}
	if _bd.Sel != nil {
		_fed := _fc.StartElement{Name: _fc.Name{Local: "x:Sel"}}
		e.EncodeElement(_bd.Sel, _fed)
	}
	if _bd.NoThreeD2 != _c.ST_TrueFalseBlankUnset {
		_bdd := _fc.StartElement{Name: _fc.Name{Local: "x:NoThreeD2"}}
		e.EncodeElement(_bd.NoThreeD2, _bdd)
	}
	if _bd.SelType != nil {
		_db := _fc.StartElement{Name: _fc.Name{Local: "x:SelType"}}
		_g.AddPreserveSpaceAttr(&_db, *_bd.SelType)
		e.EncodeElement(_bd.SelType, _db)
	}
	if _bd.MultiSel != nil {
		_bc := _fc.StartElement{Name: _fc.Name{Local: "x:MultiSel"}}
		_g.AddPreserveSpaceAttr(&_bc, *_bd.MultiSel)
		e.EncodeElement(_bd.MultiSel, _bc)
	}
	if _bd.LCT != nil {
		_gcge := _fc.StartElement{Name: _fc.Name{Local: "x:LCT"}}
		_g.AddPreserveSpaceAttr(&_gcge, *_bd.LCT)
		e.EncodeElement(_bd.LCT, _gcge)
	}
	if _bd.ListItem != nil {
		_ebab := _fc.StartElement{Name: _fc.Name{Local: "x:ListItem"}}
		_g.AddPreserveSpaceAttr(&_ebab, *_bd.ListItem)
		e.EncodeElement(_bd.ListItem, _ebab)
	}
	if _bd.DropStyle != nil {
		_eg := _fc.StartElement{Name: _fc.Name{Local: "x:DropStyle"}}
		_g.AddPreserveSpaceAttr(&_eg, *_bd.DropStyle)
		e.EncodeElement(_bd.DropStyle, _eg)
	}
	if _bd.Colored != _c.ST_TrueFalseBlankUnset {
		_dbf := _fc.StartElement{Name: _fc.Name{Local: "x:Colored"}}
		e.EncodeElement(_bd.Colored, _dbf)
	}
	if _bd.DropLines != nil {
		_acc := _fc.StartElement{Name: _fc.Name{Local: "x:DropLines"}}
		e.EncodeElement(_bd.DropLines, _acc)
	}
	if _bd.Checked != nil {
		_fg := _fc.StartElement{Name: _fc.Name{Local: "x:Checked"}}
		e.EncodeElement(_bd.Checked, _fg)
	}
	if _bd.FmlaLink != nil {
		_bcb := _fc.StartElement{Name: _fc.Name{Local: "x:FmlaLink"}}
		_g.AddPreserveSpaceAttr(&_bcb, *_bd.FmlaLink)
		e.EncodeElement(_bd.FmlaLink, _bcb)
	}
	if _bd.FmlaPict != nil {
		_gga := _fc.StartElement{Name: _fc.Name{Local: "x:FmlaPict"}}
		_g.AddPreserveSpaceAttr(&_gga, *_bd.FmlaPict)
		e.EncodeElement(_bd.FmlaPict, _gga)
	}
	if _bd.NoThreeD != _c.ST_TrueFalseBlankUnset {
		_gfe := _fc.StartElement{Name: _fc.Name{Local: "x:NoThreeD"}}
		e.EncodeElement(_bd.NoThreeD, _gfe)
	}
	if _bd.FirstButton != _c.ST_TrueFalseBlankUnset {
		_bb := _fc.StartElement{Name: _fc.Name{Local: "x:FirstButton"}}
		e.EncodeElement(_bd.FirstButton, _bb)
	}
	if _bd.FmlaGroup != nil {
		_bad := _fc.StartElement{Name: _fc.Name{Local: "x:FmlaGroup"}}
		_g.AddPreserveSpaceAttr(&_bad, *_bd.FmlaGroup)
		e.EncodeElement(_bd.FmlaGroup, _bad)
	}
	if _bd.Val != nil {
		_fdb := _fc.StartElement{Name: _fc.Name{Local: "x:Val"}}
		e.EncodeElement(_bd.Val, _fdb)
	}
	if _bd.Min != nil {
		_ef := _fc.StartElement{Name: _fc.Name{Local: "x:Min"}}
		e.EncodeElement(_bd.Min, _ef)
	}
	if _bd.Max != nil {
		_eca := _fc.StartElement{Name: _fc.Name{Local: "x:Max"}}
		e.EncodeElement(_bd.Max, _eca)
	}
	if _bd.Inc != nil {
		_accd := _fc.StartElement{Name: _fc.Name{Local: "x:Inc"}}
		e.EncodeElement(_bd.Inc, _accd)
	}
	if _bd.Page != nil {
		_ea := _fc.StartElement{Name: _fc.Name{Local: "x:Page"}}
		e.EncodeElement(_bd.Page, _ea)
	}
	if _bd.Horiz != _c.ST_TrueFalseBlankUnset {
		_gaa := _fc.StartElement{Name: _fc.Name{Local: "x:Horiz"}}
		e.EncodeElement(_bd.Horiz, _gaa)
	}
	if _bd.Dx != nil {
		_fb := _fc.StartElement{Name: _fc.Name{Local: "x:Dx"}}
		e.EncodeElement(_bd.Dx, _fb)
	}
	if _bd.MapOCX != _c.ST_TrueFalseBlankUnset {
		_aca := _fc.StartElement{Name: _fc.Name{Local: "x:MapOCX"}}
		e.EncodeElement(_bd.MapOCX, _aca)
	}
	if _bd.CF != nil {
		_bab := _fc.StartElement{Name: _fc.Name{Local: "x:CF"}}
		for _, _bade := range _bd.CF {
			e.EncodeElement(_bade, _bab)
		}
	}
	if _bd.Camera != _c.ST_TrueFalseBlankUnset {
		_feg := _fc.StartElement{Name: _fc.Name{Local: "x:Camera"}}
		e.EncodeElement(_bd.Camera, _feg)
	}
	if _bd.RecalcAlways != _c.ST_TrueFalseBlankUnset {
		_fce := _fc.StartElement{Name: _fc.Name{Local: "x:RecalcAlways"}}
		e.EncodeElement(_bd.RecalcAlways, _fce)
	}
	if _bd.AutoScale != _c.ST_TrueFalseBlankUnset {
		_cab := _fc.StartElement{Name: _fc.Name{Local: "x:AutoScale"}}
		e.EncodeElement(_bd.AutoScale, _cab)
	}
	if _bd.DDE != _c.ST_TrueFalseBlankUnset {
		_gcd := _fc.StartElement{Name: _fc.Name{Local: "x:DDE"}}
		e.EncodeElement(_bd.DDE, _gcd)
	}
	if _bd.UIObj != _c.ST_TrueFalseBlankUnset {
		_eac := _fc.StartElement{Name: _fc.Name{Local: "x:UIObj"}}
		e.EncodeElement(_bd.UIObj, _eac)
	}
	if _bd.ScriptText != nil {
		_cad := _fc.StartElement{Name: _fc.Name{Local: "x:ScriptText"}}
		_g.AddPreserveSpaceAttr(&_cad, *_bd.ScriptText)
		e.EncodeElement(_bd.ScriptText, _cad)
	}
	if _bd.ScriptExtended != nil {
		_ff := _fc.StartElement{Name: _fc.Name{Local: "x:ScriptExtended"}}
		_g.AddPreserveSpaceAttr(&_ff, *_bd.ScriptExtended)
		e.EncodeElement(_bd.ScriptExtended, _ff)
	}
	if _bd.ScriptLanguage != nil {
		_ecb := _fc.StartElement{Name: _fc.Name{Local: "x:ScriptLanguage"}}
		e.EncodeElement(_bd.ScriptLanguage, _ecb)
	}
	if _bd.ScriptLocation != nil {
		_gac := _fc.StartElement{Name: _fc.Name{Local: "x:ScriptLocation"}}
		e.EncodeElement(_bd.ScriptLocation, _gac)
	}
	if _bd.FmlaTxbx != nil {
		_acb := _fc.StartElement{Name: _fc.Name{Local: "x:FmlaTxbx"}}
		_g.AddPreserveSpaceAttr(&_acb, *_bd.FmlaTxbx)
		e.EncodeElement(_bd.FmlaTxbx, _acb)
	}
	e.EncodeToken(_fc.EndElement{Name: start.Name})
	return nil
}

type ST_ObjectType byte
type CT_ClientData struct {
	ObjectTypeAttr ST_ObjectType
	MoveWithCells  _c.ST_TrueFalseBlank
	SizeWithCells  _c.ST_TrueFalseBlank
	Anchor         *string
	Locked         _c.ST_TrueFalseBlank
	DefaultSize    _c.ST_TrueFalseBlank
	PrintObject    _c.ST_TrueFalseBlank
	Disabled       _c.ST_TrueFalseBlank
	AutoFill       _c.ST_TrueFalseBlank
	AutoLine       _c.ST_TrueFalseBlank
	AutoPict       _c.ST_TrueFalseBlank
	FmlaMacro      *string
	TextHAlign     *string
	TextVAlign     *string
	LockText       _c.ST_TrueFalseBlank
	JustLastX      _c.ST_TrueFalseBlank
	SecretEdit     _c.ST_TrueFalseBlank
	Default        _c.ST_TrueFalseBlank
	Help           _c.ST_TrueFalseBlank
	Cancel         _c.ST_TrueFalseBlank
	Dismiss        _c.ST_TrueFalseBlank
	Accel          *int64
	Accel2         *int64
	Row            *int64
	Column         *int64
	Visible        _c.ST_TrueFalseBlank
	RowHidden      _c.ST_TrueFalseBlank
	ColHidden      _c.ST_TrueFalseBlank
	VTEdit         *int64
	MultiLine      _c.ST_TrueFalseBlank
	VScroll        _c.ST_TrueFalseBlank
	ValidIds       _c.ST_TrueFalseBlank
	FmlaRange      *string
	WidthMin       *int64
	Sel            *int64
	NoThreeD2      _c.ST_TrueFalseBlank
	SelType        *string
	MultiSel       *string
	LCT            *string
	ListItem       *string
	DropStyle      *string
	Colored        _c.ST_TrueFalseBlank
	DropLines      *int64
	Checked        *int64
	FmlaLink       *string
	FmlaPict       *string
	NoThreeD       _c.ST_TrueFalseBlank
	FirstButton    _c.ST_TrueFalseBlank
	FmlaGroup      *string
	Val            *int64
	Min            *int64
	Max            *int64
	Inc            *int64
	Page           *int64
	Horiz          _c.ST_TrueFalseBlank
	Dx             *int64
	MapOCX         _c.ST_TrueFalseBlank
	CF             []string
	Camera         _c.ST_TrueFalseBlank
	RecalcAlways   _c.ST_TrueFalseBlank
	AutoScale      _c.ST_TrueFalseBlank
	DDE            _c.ST_TrueFalseBlank
	UIObj          _c.ST_TrueFalseBlank
	ScriptText     *string
	ScriptExtended *string
	ScriptLanguage *uint32
	ScriptLocation *uint32
	FmlaTxbx       *string
}

// Validate validates the CT_ClientData and its children
func (_gabb *CT_ClientData) Validate() error { return _gabb.ValidateWithPath("CT_ClientData") }
func (_bfdg ST_ObjectType) String() string {
	switch _bfdg {
	case 0:
		return ""
	case 1:
		return "Button"
	case 2:
		return "Checkbox"
	case 3:
		return "Dialog"
	case 4:
		return "Drop"
	case 5:
		return "Edit"
	case 6:
		return "GBox"
	case 7:
		return "Label"
	case 8:
		return "LineA"
	case 9:
		return "List"
	case 10:
		return "Movie"
	case 11:
		return "Note"
	case 12:
		return "Pict"
	case 13:
		return "Radio"
	case 14:
		return "RectA"
	case 15:
		return "Scroll"
	case 16:
		return "Spin"
	case 17:
		return "Shape"
	case 18:
		return "Group"
	case 19:
		return "Rect"
	}
	return ""
}

// ValidateWithPath validates the ClientData and its children, prefixing error messages with path
func (_cccg *ClientData) ValidateWithPath(path string) error {
	if _adec := _cccg.CT_ClientData.ValidateWithPath(path); _adec != nil {
		return _adec
	}
	return nil
}
func (_aec ST_ObjectType) Validate() error { return _aec.ValidateWithPath("") }
func (_eab *ClientData) UnmarshalXML(d *_fc.Decoder, start _fc.StartElement) error {
	_eab.CT_ClientData = *NewCT_ClientData()
	for _, _cbb := range start.Attr {
		if _cbb.Name.Local == "ObjectType" {
			_eab.ObjectTypeAttr.UnmarshalXMLAttr(_cbb)
			continue
		}
	}
_bbce:
	for {
		_ggfad, _fgg := d.Token()
		if _fgg != nil {
			return _fgg
		}
		switch _abc := _ggfad.(type) {
		case _fc.StartElement:
			switch _abc.Name {
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MoveWithCells"}:
				_eab.MoveWithCells = _c.ST_TrueFalseBlankUnset
				if _cfc := d.DecodeElement(&_eab.MoveWithCells, &_abc); _cfc != nil {
					return _cfc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "SizeWithCells"}:
				_eab.SizeWithCells = _c.ST_TrueFalseBlankUnset
				if _cgd := d.DecodeElement(&_eab.SizeWithCells, &_abc); _cgd != nil {
					return _cgd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Anchor"}:
				_eab.Anchor = new(string)
				if _dbba := d.DecodeElement(_eab.Anchor, &_abc); _dbba != nil {
					return _dbba
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Locked"}:
				_eab.Locked = _c.ST_TrueFalseBlankUnset
				if _egf := d.DecodeElement(&_eab.Locked, &_abc); _egf != nil {
					return _egf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DefaultSize"}:
				_eab.DefaultSize = _c.ST_TrueFalseBlankUnset
				if _fgf := d.DecodeElement(&_eab.DefaultSize, &_abc); _fgf != nil {
					return _fgf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "PrintObject"}:
				_eab.PrintObject = _c.ST_TrueFalseBlankUnset
				if _dge := d.DecodeElement(&_eab.PrintObject, &_abc); _dge != nil {
					return _dge
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Disabled"}:
				_eab.Disabled = _c.ST_TrueFalseBlankUnset
				if _ggc := d.DecodeElement(&_eab.Disabled, &_abc); _ggc != nil {
					return _ggc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoFill"}:
				_eab.AutoFill = _c.ST_TrueFalseBlankUnset
				if _feac := d.DecodeElement(&_eab.AutoFill, &_abc); _feac != nil {
					return _feac
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoLine"}:
				_eab.AutoLine = _c.ST_TrueFalseBlankUnset
				if _fgfc := d.DecodeElement(&_eab.AutoLine, &_abc); _fgfc != nil {
					return _fgfc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoPict"}:
				_eab.AutoPict = _c.ST_TrueFalseBlankUnset
				if _fegf := d.DecodeElement(&_eab.AutoPict, &_abc); _fegf != nil {
					return _fegf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaMacro"}:
				_eab.FmlaMacro = new(string)
				if _bbg := d.DecodeElement(_eab.FmlaMacro, &_abc); _bbg != nil {
					return _bbg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "TextHAlign"}:
				_eab.TextHAlign = new(string)
				if _efd := d.DecodeElement(_eab.TextHAlign, &_abc); _efd != nil {
					return _efd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "TextVAlign"}:
				_eab.TextVAlign = new(string)
				if _afd := d.DecodeElement(_eab.TextVAlign, &_abc); _afd != nil {
					return _afd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "LockText"}:
				_eab.LockText = _c.ST_TrueFalseBlankUnset
				if _eafaf := d.DecodeElement(&_eab.LockText, &_abc); _eafaf != nil {
					return _eafaf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "JustLastX"}:
				_eab.JustLastX = _c.ST_TrueFalseBlankUnset
				if _acf := d.DecodeElement(&_eab.JustLastX, &_abc); _acf != nil {
					return _acf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "SecretEdit"}:
				_eab.SecretEdit = _c.ST_TrueFalseBlankUnset
				if _adef := d.DecodeElement(&_eab.SecretEdit, &_abc); _adef != nil {
					return _adef
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Default"}:
				_eab.Default = _c.ST_TrueFalseBlankUnset
				if _ggcd := d.DecodeElement(&_eab.Default, &_abc); _ggcd != nil {
					return _ggcd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Help"}:
				_eab.Help = _c.ST_TrueFalseBlankUnset
				if _aaf := d.DecodeElement(&_eab.Help, &_abc); _aaf != nil {
					return _aaf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Cancel"}:
				_eab.Cancel = _c.ST_TrueFalseBlankUnset
				if _fcdd := d.DecodeElement(&_eab.Cancel, &_abc); _fcdd != nil {
					return _fcdd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Dismiss"}:
				_eab.Dismiss = _c.ST_TrueFalseBlankUnset
				if _efc := d.DecodeElement(&_eab.Dismiss, &_abc); _efc != nil {
					return _efc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Accel"}:
				_eab.Accel = new(int64)
				if _fcgb := d.DecodeElement(_eab.Accel, &_abc); _fcgb != nil {
					return _fcgb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Accel2"}:
				_eab.Accel2 = new(int64)
				if _cecc := d.DecodeElement(_eab.Accel2, &_abc); _cecc != nil {
					return _cecc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Row"}:
				_eab.Row = new(int64)
				if _cgf := d.DecodeElement(_eab.Row, &_abc); _cgf != nil {
					return _cgf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Column"}:
				_eab.Column = new(int64)
				if _ace := d.DecodeElement(_eab.Column, &_abc); _ace != nil {
					return _ace
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Visible"}:
				_eab.Visible = _c.ST_TrueFalseBlankUnset
				if _bcd := d.DecodeElement(&_eab.Visible, &_abc); _bcd != nil {
					return _bcd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "RowHidden"}:
				_eab.RowHidden = _c.ST_TrueFalseBlankUnset
				if _fec := d.DecodeElement(&_eab.RowHidden, &_abc); _fec != nil {
					return _fec
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ColHidden"}:
				_eab.ColHidden = _c.ST_TrueFalseBlankUnset
				if _eacg := d.DecodeElement(&_eab.ColHidden, &_abc); _eacg != nil {
					return _eacg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "VTEdit"}:
				_eab.VTEdit = new(int64)
				if _ebfa := d.DecodeElement(_eab.VTEdit, &_abc); _ebfa != nil {
					return _ebfa
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MultiLine"}:
				_eab.MultiLine = _c.ST_TrueFalseBlankUnset
				if _gfc := d.DecodeElement(&_eab.MultiLine, &_abc); _gfc != nil {
					return _gfc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "VScroll"}:
				_eab.VScroll = _c.ST_TrueFalseBlankUnset
				if _fbd := d.DecodeElement(&_eab.VScroll, &_abc); _fbd != nil {
					return _fbd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ValidIds"}:
				_eab.ValidIds = _c.ST_TrueFalseBlankUnset
				if _bbb := d.DecodeElement(&_eab.ValidIds, &_abc); _bbb != nil {
					return _bbb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaRange"}:
				_eab.FmlaRange = new(string)
				if _gfcb := d.DecodeElement(_eab.FmlaRange, &_abc); _gfcb != nil {
					return _gfcb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "WidthMin"}:
				_eab.WidthMin = new(int64)
				if _gbb := d.DecodeElement(_eab.WidthMin, &_abc); _gbb != nil {
					return _gbb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Sel"}:
				_eab.Sel = new(int64)
				if _feb := d.DecodeElement(_eab.Sel, &_abc); _feb != nil {
					return _feb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "NoThreeD2"}:
				_eab.NoThreeD2 = _c.ST_TrueFalseBlankUnset
				if _ddd := d.DecodeElement(&_eab.NoThreeD2, &_abc); _ddd != nil {
					return _ddd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "SelType"}:
				_eab.SelType = new(string)
				if _eff := d.DecodeElement(_eab.SelType, &_abc); _eff != nil {
					return _eff
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MultiSel"}:
				_eab.MultiSel = new(string)
				if _eebf := d.DecodeElement(_eab.MultiSel, &_abc); _eebf != nil {
					return _eebf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "LCT"}:
				_eab.LCT = new(string)
				if _cfb := d.DecodeElement(_eab.LCT, &_abc); _cfb != nil {
					return _cfb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ListItem"}:
				_eab.ListItem = new(string)
				if _fbde := d.DecodeElement(_eab.ListItem, &_abc); _fbde != nil {
					return _fbde
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DropStyle"}:
				_eab.DropStyle = new(string)
				if _gea := d.DecodeElement(_eab.DropStyle, &_abc); _gea != nil {
					return _gea
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Colored"}:
				_eab.Colored = _c.ST_TrueFalseBlankUnset
				if _eeg := d.DecodeElement(&_eab.Colored, &_abc); _eeg != nil {
					return _eeg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DropLines"}:
				_eab.DropLines = new(int64)
				if _bbad := d.DecodeElement(_eab.DropLines, &_abc); _bbad != nil {
					return _bbad
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Checked"}:
				_eab.Checked = new(int64)
				if _ded := d.DecodeElement(_eab.Checked, &_abc); _ded != nil {
					return _ded
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaLink"}:
				_eab.FmlaLink = new(string)
				if _cecca := d.DecodeElement(_eab.FmlaLink, &_abc); _cecca != nil {
					return _cecca
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaPict"}:
				_eab.FmlaPict = new(string)
				if _bag := d.DecodeElement(_eab.FmlaPict, &_abc); _bag != nil {
					return _bag
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "NoThreeD"}:
				_eab.NoThreeD = _c.ST_TrueFalseBlankUnset
				if _cdd := d.DecodeElement(&_eab.NoThreeD, &_abc); _cdd != nil {
					return _cdd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FirstButton"}:
				_eab.FirstButton = _c.ST_TrueFalseBlankUnset
				if _geb := d.DecodeElement(&_eab.FirstButton, &_abc); _geb != nil {
					return _geb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaGroup"}:
				_eab.FmlaGroup = new(string)
				if _fdc := d.DecodeElement(_eab.FmlaGroup, &_abc); _fdc != nil {
					return _fdc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Val"}:
				_eab.Val = new(int64)
				if _gfa := d.DecodeElement(_eab.Val, &_abc); _gfa != nil {
					return _gfa
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Min"}:
				_eab.Min = new(int64)
				if _ffa := d.DecodeElement(_eab.Min, &_abc); _ffa != nil {
					return _ffa
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Max"}:
				_eab.Max = new(int64)
				if _dfc := d.DecodeElement(_eab.Max, &_abc); _dfc != nil {
					return _dfc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Inc"}:
				_eab.Inc = new(int64)
				if _gde := d.DecodeElement(_eab.Inc, &_abc); _gde != nil {
					return _gde
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Page"}:
				_eab.Page = new(int64)
				if _ecge := d.DecodeElement(_eab.Page, &_abc); _ecge != nil {
					return _ecge
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Horiz"}:
				_eab.Horiz = _c.ST_TrueFalseBlankUnset
				if _ggff := d.DecodeElement(&_eab.Horiz, &_abc); _ggff != nil {
					return _ggff
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Dx"}:
				_eab.Dx = new(int64)
				if _gged := d.DecodeElement(_eab.Dx, &_abc); _gged != nil {
					return _gged
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MapOCX"}:
				_eab.MapOCX = _c.ST_TrueFalseBlankUnset
				if _dfb := d.DecodeElement(&_eab.MapOCX, &_abc); _dfb != nil {
					return _dfb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "CF"}:
				var _gdgf string
				if _afc := d.DecodeElement(&_gdgf, &_abc); _afc != nil {
					return _afc
				}
				_eab.CF = append(_eab.CF, _gdgf)
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Camera"}:
				_eab.Camera = _c.ST_TrueFalseBlankUnset
				if _bedb := d.DecodeElement(&_eab.Camera, &_abc); _bedb != nil {
					return _bedb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "RecalcAlways"}:
				_eab.RecalcAlways = _c.ST_TrueFalseBlankUnset
				if _bea := d.DecodeElement(&_eab.RecalcAlways, &_abc); _bea != nil {
					return _bea
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoScale"}:
				_eab.AutoScale = _c.ST_TrueFalseBlankUnset
				if _ecaf := d.DecodeElement(&_eab.AutoScale, &_abc); _ecaf != nil {
					return _ecaf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DDE"}:
				_eab.DDE = _c.ST_TrueFalseBlankUnset
				if _dcg := d.DecodeElement(&_eab.DDE, &_abc); _dcg != nil {
					return _dcg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "UIObj"}:
				_eab.UIObj = _c.ST_TrueFalseBlankUnset
				if _bdc := d.DecodeElement(&_eab.UIObj, &_abc); _bdc != nil {
					return _bdc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptText"}:
				_eab.ScriptText = new(string)
				if _ccd := d.DecodeElement(_eab.ScriptText, &_abc); _ccd != nil {
					return _ccd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptExtended"}:
				_eab.ScriptExtended = new(string)
				if _bdf := d.DecodeElement(_eab.ScriptExtended, &_abc); _bdf != nil {
					return _bdf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptLanguage"}:
				_eab.ScriptLanguage = new(uint32)
				if _effa := d.DecodeElement(_eab.ScriptLanguage, &_abc); _effa != nil {
					return _effa
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptLocation"}:
				_eab.ScriptLocation = new(uint32)
				if _dbag := d.DecodeElement(_eab.ScriptLocation, &_abc); _dbag != nil {
					return _dbag
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaTxbx"}:
				_eab.FmlaTxbx = new(string)
				if _fcf := d.DecodeElement(_eab.FmlaTxbx, &_abc); _fcf != nil {
					return _fcf
				}
			default:
				_g.Log("skipping unsupported\u0020element\u0020on\u0020ClientData\u0020\u0025v", _abc.Name)
				if _gbg := d.Skip(); _gbg != nil {
					return _gbg
				}
			}
		case _fc.EndElement:
			break _bbce
		case _fc.CharData:
		}
	}
	return nil
}

const (
	ST_ObjectTypeUnset    ST_ObjectType = 0
	ST_ObjectTypeButton   ST_ObjectType = 1
	ST_ObjectTypeCheckbox ST_ObjectType = 2
	ST_ObjectTypeDialog   ST_ObjectType = 3
	ST_ObjectTypeDrop     ST_ObjectType = 4
	ST_ObjectTypeEdit     ST_ObjectType = 5
	ST_ObjectTypeGBox     ST_ObjectType = 6
	ST_ObjectTypeLabel    ST_ObjectType = 7
	ST_ObjectTypeLineA    ST_ObjectType = 8
	ST_ObjectTypeList     ST_ObjectType = 9
	ST_ObjectTypeMovie    ST_ObjectType = 10
	ST_ObjectTypeNote     ST_ObjectType = 11
	ST_ObjectTypePict     ST_ObjectType = 12
	ST_ObjectTypeRadio    ST_ObjectType = 13
	ST_ObjectTypeRectA    ST_ObjectType = 14
	ST_ObjectTypeScroll   ST_ObjectType = 15
	ST_ObjectTypeSpin     ST_ObjectType = 16
	ST_ObjectTypeShape    ST_ObjectType = 17
	ST_ObjectTypeGroup    ST_ObjectType = 18
	ST_ObjectTypeRect     ST_ObjectType = 19
)

func (_ecad *CT_ClientData) UnmarshalXML(d *_fc.Decoder, start _fc.StartElement) error {
	_ecad.ObjectTypeAttr = ST_ObjectType(1)
	for _, _bbc := range start.Attr {
		if _bbc.Name.Local == "ObjectType" {
			_ecad.ObjectTypeAttr.UnmarshalXMLAttr(_bbc)
			continue
		}
	}
_ccc:
	for {
		_efa, _eaf := d.Token()
		if _eaf != nil {
			return _eaf
		}
		switch _fef := _efa.(type) {
		case _fc.StartElement:
			switch _fef.Name {
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MoveWithCells"}:
				_ecad.MoveWithCells = _c.ST_TrueFalseBlankUnset
				if _dbb := d.DecodeElement(&_ecad.MoveWithCells, &_fef); _dbb != nil {
					return _dbb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "SizeWithCells"}:
				_ecad.SizeWithCells = _c.ST_TrueFalseBlankUnset
				if _cce := d.DecodeElement(&_ecad.SizeWithCells, &_fef); _cce != nil {
					return _cce
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Anchor"}:
				_ecad.Anchor = new(string)
				if _cf := d.DecodeElement(_ecad.Anchor, &_fef); _cf != nil {
					return _cf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Locked"}:
				_ecad.Locked = _c.ST_TrueFalseBlankUnset
				if _ffc := d.DecodeElement(&_ecad.Locked, &_fef); _ffc != nil {
					return _ffc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DefaultSize"}:
				_ecad.DefaultSize = _c.ST_TrueFalseBlankUnset
				if _ebb := d.DecodeElement(&_ecad.DefaultSize, &_fef); _ebb != nil {
					return _ebb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "PrintObject"}:
				_ecad.PrintObject = _c.ST_TrueFalseBlankUnset
				if _bba := d.DecodeElement(&_ecad.PrintObject, &_fef); _bba != nil {
					return _bba
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Disabled"}:
				_ecad.Disabled = _c.ST_TrueFalseBlankUnset
				if _aa := d.DecodeElement(&_ecad.Disabled, &_fef); _aa != nil {
					return _aa
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoFill"}:
				_ecad.AutoFill = _c.ST_TrueFalseBlankUnset
				if _eafa := d.DecodeElement(&_ecad.AutoFill, &_fef); _eafa != nil {
					return _eafa
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoLine"}:
				_ecad.AutoLine = _c.ST_TrueFalseBlankUnset
				if _gab := d.DecodeElement(&_ecad.AutoLine, &_fef); _gab != nil {
					return _gab
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoPict"}:
				_ecad.AutoPict = _c.ST_TrueFalseBlankUnset
				if _efaf := d.DecodeElement(&_ecad.AutoPict, &_fef); _efaf != nil {
					return _efaf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaMacro"}:
				_ecad.FmlaMacro = new(string)
				if _af := d.DecodeElement(_ecad.FmlaMacro, &_fef); _af != nil {
					return _af
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "TextHAlign"}:
				_ecad.TextHAlign = new(string)
				if _de := d.DecodeElement(_ecad.TextHAlign, &_fef); _de != nil {
					return _de
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "TextVAlign"}:
				_ecad.TextVAlign = new(string)
				if _aba := d.DecodeElement(_ecad.TextVAlign, &_fef); _aba != nil {
					return _aba
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "LockText"}:
				_ecad.LockText = _c.ST_TrueFalseBlankUnset
				if _dfe := d.DecodeElement(&_ecad.LockText, &_fef); _dfe != nil {
					return _dfe
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "JustLastX"}:
				_ecad.JustLastX = _c.ST_TrueFalseBlankUnset
				if _eag := d.DecodeElement(&_ecad.JustLastX, &_fef); _eag != nil {
					return _eag
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "SecretEdit"}:
				_ecad.SecretEdit = _c.ST_TrueFalseBlankUnset
				if _dc := d.DecodeElement(&_ecad.SecretEdit, &_fef); _dc != nil {
					return _dc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Default"}:
				_ecad.Default = _c.ST_TrueFalseBlankUnset
				if _ebec := d.DecodeElement(&_ecad.Default, &_fef); _ebec != nil {
					return _ebec
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Help"}:
				_ecad.Help = _c.ST_TrueFalseBlankUnset
				if _efb := d.DecodeElement(&_ecad.Help, &_fef); _efb != nil {
					return _efb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Cancel"}:
				_ecad.Cancel = _c.ST_TrueFalseBlankUnset
				if _ged := d.DecodeElement(&_ecad.Cancel, &_fef); _ged != nil {
					return _ged
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Dismiss"}:
				_ecad.Dismiss = _c.ST_TrueFalseBlankUnset
				if _bbf := d.DecodeElement(&_ecad.Dismiss, &_fef); _bbf != nil {
					return _bbf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Accel"}:
				_ecad.Accel = new(int64)
				if _gfd := d.DecodeElement(_ecad.Accel, &_fef); _gfd != nil {
					return _gfd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Accel2"}:
				_ecad.Accel2 = new(int64)
				if _bfd := d.DecodeElement(_ecad.Accel2, &_fef); _bfd != nil {
					return _bfd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Row"}:
				_ecad.Row = new(int64)
				if _cabe := d.DecodeElement(_ecad.Row, &_fef); _cabe != nil {
					return _cabe
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Column"}:
				_ecad.Column = new(int64)
				if _bg := d.DecodeElement(_ecad.Column, &_fef); _bg != nil {
					return _bg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Visible"}:
				_ecad.Visible = _c.ST_TrueFalseBlankUnset
				if _aeb := d.DecodeElement(&_ecad.Visible, &_fef); _aeb != nil {
					return _aeb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "RowHidden"}:
				_ecad.RowHidden = _c.ST_TrueFalseBlankUnset
				if _ed := d.DecodeElement(&_ecad.RowHidden, &_fef); _ed != nil {
					return _ed
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ColHidden"}:
				_ecad.ColHidden = _c.ST_TrueFalseBlankUnset
				if _bff := d.DecodeElement(&_ecad.ColHidden, &_fef); _bff != nil {
					return _bff
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "VTEdit"}:
				_ecad.VTEdit = new(int64)
				if _eedc := d.DecodeElement(_ecad.VTEdit, &_fef); _eedc != nil {
					return _eedc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MultiLine"}:
				_ecad.MultiLine = _c.ST_TrueFalseBlankUnset
				if _eeb := d.DecodeElement(&_ecad.MultiLine, &_fef); _eeb != nil {
					return _eeb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "VScroll"}:
				_ecad.VScroll = _c.ST_TrueFalseBlankUnset
				if _gce := d.DecodeElement(&_ecad.VScroll, &_fef); _gce != nil {
					return _gce
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ValidIds"}:
				_ecad.ValidIds = _c.ST_TrueFalseBlankUnset
				if _ad := d.DecodeElement(&_ecad.ValidIds, &_fef); _ad != nil {
					return _ad
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaRange"}:
				_ecad.FmlaRange = new(string)
				if _bed := d.DecodeElement(_ecad.FmlaRange, &_fef); _bed != nil {
					return _bed
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "WidthMin"}:
				_ecad.WidthMin = new(int64)
				if _bgb := d.DecodeElement(_ecad.WidthMin, &_fef); _bgb != nil {
					return _bgb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Sel"}:
				_ecad.Sel = new(int64)
				if _dec := d.DecodeElement(_ecad.Sel, &_fef); _dec != nil {
					return _dec
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "NoThreeD2"}:
				_ecad.NoThreeD2 = _c.ST_TrueFalseBlankUnset
				if _gdg := d.DecodeElement(&_ecad.NoThreeD2, &_fef); _gdg != nil {
					return _gdg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "SelType"}:
				_ecad.SelType = new(string)
				if _eedf := d.DecodeElement(_ecad.SelType, &_fef); _eedf != nil {
					return _eedf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MultiSel"}:
				_ecad.MultiSel = new(string)
				if _ebc := d.DecodeElement(_ecad.MultiSel, &_fef); _ebc != nil {
					return _ebc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "LCT"}:
				_ecad.LCT = new(string)
				if _ggf := d.DecodeElement(_ecad.LCT, &_fef); _ggf != nil {
					return _ggf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ListItem"}:
				_ecad.ListItem = new(string)
				if _gca := d.DecodeElement(_ecad.ListItem, &_fef); _gca != nil {
					return _gca
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DropStyle"}:
				_ecad.DropStyle = new(string)
				if _gdgb := d.DecodeElement(_ecad.DropStyle, &_fef); _gdgb != nil {
					return _gdgb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Colored"}:
				_ecad.Colored = _c.ST_TrueFalseBlankUnset
				if _dbc := d.DecodeElement(&_ecad.Colored, &_fef); _dbc != nil {
					return _dbc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DropLines"}:
				_ecad.DropLines = new(int64)
				if _fff := d.DecodeElement(_ecad.DropLines, &_fef); _fff != nil {
					return _fff
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Checked"}:
				_ecad.Checked = new(int64)
				if _gcgb := d.DecodeElement(_ecad.Checked, &_fef); _gcgb != nil {
					return _gcgb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaLink"}:
				_ecad.FmlaLink = new(string)
				if _fea := d.DecodeElement(_ecad.FmlaLink, &_fef); _fea != nil {
					return _fea
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaPict"}:
				_ecad.FmlaPict = new(string)
				if _bcc := d.DecodeElement(_ecad.FmlaPict, &_fef); _bcc != nil {
					return _bcc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "NoThreeD"}:
				_ecad.NoThreeD = _c.ST_TrueFalseBlankUnset
				if _dba := d.DecodeElement(&_ecad.NoThreeD, &_fef); _dba != nil {
					return _dba
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FirstButton"}:
				_ecad.FirstButton = _c.ST_TrueFalseBlankUnset
				if _adf := d.DecodeElement(&_ecad.FirstButton, &_fef); _adf != nil {
					return _adf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaGroup"}:
				_ecad.FmlaGroup = new(string)
				if _cb := d.DecodeElement(_ecad.FmlaGroup, &_fef); _cb != nil {
					return _cb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Val"}:
				_ecad.Val = new(int64)
				if _fcc := d.DecodeElement(_ecad.Val, &_fef); _fcc != nil {
					return _fcc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Min"}:
				_ecad.Min = new(int64)
				if _gcb := d.DecodeElement(_ecad.Min, &_fef); _gcb != nil {
					return _gcb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Max"}:
				_ecad.Max = new(int64)
				if _gdca := d.DecodeElement(_ecad.Max, &_fef); _gdca != nil {
					return _gdca
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Inc"}:
				_ecad.Inc = new(int64)
				if _bac := d.DecodeElement(_ecad.Inc, &_fef); _bac != nil {
					return _bac
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Page"}:
				_ecad.Page = new(int64)
				if _dbac := d.DecodeElement(_ecad.Page, &_fef); _dbac != nil {
					return _dbac
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Horiz"}:
				_ecad.Horiz = _c.ST_TrueFalseBlankUnset
				if _gdf := d.DecodeElement(&_ecad.Horiz, &_fef); _gdf != nil {
					return _gdf
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Dx"}:
				_ecad.Dx = new(int64)
				if _ecd := d.DecodeElement(_ecad.Dx, &_fef); _ecd != nil {
					return _ecd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "MapOCX"}:
				_ecad.MapOCX = _c.ST_TrueFalseBlankUnset
				if _eea := d.DecodeElement(&_ecad.MapOCX, &_fef); _eea != nil {
					return _eea
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "CF"}:
				var _dga string
				if _cba := d.DecodeElement(&_dga, &_fef); _cba != nil {
					return _cba
				}
				_ecad.CF = append(_ecad.CF, _dga)
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "Camera"}:
				_ecad.Camera = _c.ST_TrueFalseBlankUnset
				if _bbcc := d.DecodeElement(&_ecad.Camera, &_fef); _bbcc != nil {
					return _bbcc
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "RecalcAlways"}:
				_ecad.RecalcAlways = _c.ST_TrueFalseBlankUnset
				if _dgg := d.DecodeElement(&_ecad.RecalcAlways, &_fef); _dgg != nil {
					return _dgg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "AutoScale"}:
				_ecad.AutoScale = _c.ST_TrueFalseBlankUnset
				if _edb := d.DecodeElement(&_ecad.AutoScale, &_fef); _edb != nil {
					return _edb
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "DDE"}:
				_ecad.DDE = _c.ST_TrueFalseBlankUnset
				if _add := d.DecodeElement(&_ecad.DDE, &_fef); _add != nil {
					return _add
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "UIObj"}:
				_ecad.UIObj = _c.ST_TrueFalseBlankUnset
				if _fccd := d.DecodeElement(&_ecad.UIObj, &_fef); _fccd != nil {
					return _fccd
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptText"}:
				_ecad.ScriptText = new(string)
				if _deg := d.DecodeElement(_ecad.ScriptText, &_fef); _deg != nil {
					return _deg
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptExtended"}:
				_ecad.ScriptExtended = new(string)
				if _ade := d.DecodeElement(_ecad.ScriptExtended, &_fef); _ade != nil {
					return _ade
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptLanguage"}:
				_ecad.ScriptLanguage = new(uint32)
				if _gge := d.DecodeElement(_ecad.ScriptLanguage, &_fef); _gge != nil {
					return _gge
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "ScriptLocation"}:
				_ecad.ScriptLocation = new(uint32)
				if _gfea := d.DecodeElement(_ecad.ScriptLocation, &_fef); _gfea != nil {
					return _gfea
				}
			case _fc.Name{Space: "urn:schemas\u002dmicrosoft\u002dcom:office:excel", Local: "FmlaTxbx"}:
				_ecad.FmlaTxbx = new(string)
				if _cbe := d.DecodeElement(_ecad.FmlaTxbx, &_fef); _cbe != nil {
					return _cbe
				}
			default:
				_g.Log("skipping unsupported element\u0020on\u0020CT_ClientData \u0025v", _fef.Name)
				if _eaa := d.Skip(); _eaa != nil {
					return _eaa
				}
			}
		case _fc.EndElement:
			break _ccc
		case _fc.CharData:
		}
	}
	return nil
}

type ClientData struct{ CT_ClientData }

func (_eegg *ST_ObjectType) UnmarshalXML(d *_fc.Decoder, start _fc.StartElement) error {
	_dbg, _gfeb := d.Token()
	if _gfeb != nil {
		return _gfeb
	}
	if _dac, _ebad := _dbg.(_fc.EndElement); _ebad && _dac.Name == start.Name {
		*_eegg = 1
		return nil
	}
	if _gedb, _dccc := _dbg.(_fc.CharData); !_dccc {
		return _e.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _dbg)
	} else {
		switch string(_gedb) {
		case "":
			*_eegg = 0
		case "Button":
			*_eegg = 1
		case "Checkbox":
			*_eegg = 2
		case "Dialog":
			*_eegg = 3
		case "Drop":
			*_eegg = 4
		case "Edit":
			*_eegg = 5
		case "GBox":
			*_eegg = 6
		case "Label":
			*_eegg = 7
		case "LineA":
			*_eegg = 8
		case "List":
			*_eegg = 9
		case "Movie":
			*_eegg = 10
		case "Note":
			*_eegg = 11
		case "Pict":
			*_eegg = 12
		case "Radio":
			*_eegg = 13
		case "RectA":
			*_eegg = 14
		case "Scroll":
			*_eegg = 15
		case "Spin":
			*_eegg = 16
		case "Shape":
			*_eegg = 17
		case "Group":
			*_eegg = 18
		case "Rect":
			*_eegg = 19
		}
	}
	_dbg, _gfeb = d.Token()
	if _gfeb != nil {
		return _gfeb
	}
	if _ggcf, _efe := _dbg.(_fc.EndElement); _efe && _ggcf.Name == start.Name {
		return nil
	}
	return _e.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _dbg)
}

// ValidateWithPath validates the CT_ClientData and its children, prefixing error messages with path
func (_bcg *CT_ClientData) ValidateWithPath(path string) error {
	if _bcg.ObjectTypeAttr == ST_ObjectTypeUnset {
		return _e.Errorf("\u0025s\u002fObjectTypeAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ebf := _bcg.ObjectTypeAttr.ValidateWithPath(path + "\u002fObjectTypeAttr"); _ebf != nil {
		return _ebf
	}
	if _eace := _bcg.MoveWithCells.ValidateWithPath(path + "\u002fMoveWithCells"); _eace != nil {
		return _eace
	}
	if _dd := _bcg.SizeWithCells.ValidateWithPath(path + "\u002fSizeWithCells"); _dd != nil {
		return _dd
	}
	if _ffe := _bcg.Locked.ValidateWithPath(path + "\u002fLocked"); _ffe != nil {
		return _ffe
	}
	if _ebed := _bcg.DefaultSize.ValidateWithPath(path + "\u002fDefaultSize"); _ebed != nil {
		return _ebed
	}
	if _baf := _bcg.PrintObject.ValidateWithPath(path + "\u002fPrintObject"); _baf != nil {
		return _baf
	}
	if _cceb := _bcg.Disabled.ValidateWithPath(path + "\u002fDisabled"); _cceb != nil {
		return _cceb
	}
	if _dbcf := _bcg.AutoFill.ValidateWithPath(path + "\u002fAutoFill"); _dbcf != nil {
		return _dbcf
	}
	if _ebeb := _bcg.AutoLine.ValidateWithPath(path + "\u002fAutoLine"); _ebeb != nil {
		return _ebeb
	}
	if _efg := _bcg.AutoPict.ValidateWithPath(path + "\u002fAutoPict"); _efg != nil {
		return _efg
	}
	if _dcf := _bcg.LockText.ValidateWithPath(path + "\u002fLockText"); _dcf != nil {
		return _dcf
	}
	if _bada := _bcg.JustLastX.ValidateWithPath(path + "\u002fJustLastX"); _bada != nil {
		return _bada
	}
	if _fcd := _bcg.SecretEdit.ValidateWithPath(path + "/SecretEdit"); _fcd != nil {
		return _fcd
	}
	if _aab := _bcg.Default.ValidateWithPath(path + "\u002fDefault"); _aab != nil {
		return _aab
	}
	if _eagb := _bcg.Help.ValidateWithPath(path + "\u002fHelp"); _eagb != nil {
		return _eagb
	}
	if _cee := _bcg.Cancel.ValidateWithPath(path + "\u002fCancel"); _cee != nil {
		return _cee
	}
	if _ebecd := _bcg.Dismiss.ValidateWithPath(path + "\u002fDismiss"); _ebecd != nil {
		return _ebecd
	}
	if _ag := _bcg.Visible.ValidateWithPath(path + "\u002fVisible"); _ag != nil {
		return _ag
	}
	if _bdbe := _bcg.RowHidden.ValidateWithPath(path + "\u002fRowHidden"); _bdbe != nil {
		return _bdbe
	}
	if _cg := _bcg.ColHidden.ValidateWithPath(path + "\u002fColHidden"); _cg != nil {
		return _cg
	}
	if _fcg := _bcg.MultiLine.ValidateWithPath(path + "\u002fMultiLine"); _fcg != nil {
		return _fcg
	}
	if _cdf := _bcg.VScroll.ValidateWithPath(path + "\u002fVScroll"); _cdf != nil {
		return _cdf
	}
	if _ggfa := _bcg.ValidIds.ValidateWithPath(path + "\u002fValidIds"); _ggfa != nil {
		return _ggfa
	}
	if _dcc := _bcg.NoThreeD2.ValidateWithPath(path + "\u002fNoThreeD2"); _dcc != nil {
		return _dcc
	}
	if _bgba := _bcg.Colored.ValidateWithPath(path + "\u002fColored"); _bgba != nil {
		return _bgba
	}
	if _dea := _bcg.NoThreeD.ValidateWithPath(path + "\u002fNoThreeD"); _dea != nil {
		return _dea
	}
	if _dbe := _bcg.FirstButton.ValidateWithPath(path + "\u002fFirstButton"); _dbe != nil {
		return _dbe
	}
	if _gba := _bcg.Horiz.ValidateWithPath(path + "\u002fHoriz"); _gba != nil {
		return _gba
	}
	if _fa := _bcg.MapOCX.ValidateWithPath(path + "\u002fMapOCX"); _fa != nil {
		return _fa
	}
	if _aga := _bcg.Camera.ValidateWithPath(path + "\u002fCamera"); _aga != nil {
		return _aga
	}
	if _cece := _bcg.RecalcAlways.ValidateWithPath(path + "\u002fRecalcAlways"); _cece != nil {
		return _cece
	}
	if _ebeg := _bcg.AutoScale.ValidateWithPath(path + "\u002fAutoScale"); _ebeg != nil {
		return _ebeg
	}
	if _afg := _bcg.DDE.ValidateWithPath(path + "\u002fDDE"); _afg != nil {
		return _afg
	}
	if _dad := _bcg.UIObj.ValidateWithPath(path + "\u002fUIObj"); _dad != nil {
		return _dad
	}
	return nil
}
func (_ggac *ClientData) MarshalXML(e *_fc.Encoder, start _fc.StartElement) error {
	start.Attr = append(start.Attr, _fc.Attr{Name: _fc.Name{Local: "xmlns"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:office:excel"})
	start.Attr = append(start.Attr, _fc.Attr{Name: _fc.Name{Local: "xmlns:x"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:office:excel"})
//	start.Attr = append(start.Attr, _fc.Attr{Name: _fc.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "x:ClientData"
	return _ggac.CT_ClientData.MarshalXML(e, start)
}
func NewClientData() *ClientData {
	_cdg := &ClientData{}
	_cdg.CT_ClientData = *NewCT_ClientData()
	return _cdg
}

// Validate validates the ClientData and its children
func (_acbf *ClientData) Validate() error { return _acbf.ValidateWithPath("ClientData") }
func init() {
	_g.RegisterConstructor("urn:schemas\u002dmicrosoft\u002dcom:office:excel", "CT_ClientData", NewCT_ClientData)
	_g.RegisterConstructor("urn:schemas\u002dmicrosoft\u002dcom:office:excel", "ClientData", NewClientData)
}
