//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wml

import (
	_d "encoding/xml"
	_b "fmt"
	_ga "gitee.com/greatmusicians/unioffice"
	_eb "gitee.com/greatmusicians/unioffice/schema/soo/dml"
	_ca "gitee.com/greatmusicians/unioffice/schema/soo/dml/picture"
	_f "gitee.com/greatmusicians/unioffice/schema/soo/ofc/math"
	_g "gitee.com/greatmusicians/unioffice/schema/soo/ofc/sharedTypes"
	_gg "gitee.com/greatmusicians/unioffice/schema/soo/schemaLibrary"
	_a "regexp"
	_dd "strconv"
	_c "time"
)

func NewCT_DocGrid() *CT_DocGrid { _bebeg := &CT_DocGrid{}; return _bebeg }

type WdCT_WrapThrough struct {
	WrapTextAttr WdST_WrapText
	DistLAttr    *uint32
	DistRAttr    *uint32
	WrapPolygon  *WdCT_WrapPath
}

// Validate validates the CT_FrameLayout and its children
func (_gabfd *CT_FrameLayout) Validate() error { return _gabfd.ValidateWithPath("CT_FrameLayout") }
func (_cbbada *ST_HexColorAuto) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cbbada = 0
	case "auto":
		*_cbbada = 1
	}
	return nil
}
func (_facdde ST_MailMergeSourceType) Validate() error { return _facdde.ValidateWithPath("") }

const (
	ST_TextboxTightWrapUnset            ST_TextboxTightWrap = 0
	ST_TextboxTightWrapNone             ST_TextboxTightWrap = 1
	ST_TextboxTightWrapAllLines         ST_TextboxTightWrap = 2
	ST_TextboxTightWrapFirstAndLastLine ST_TextboxTightWrap = 3
	ST_TextboxTightWrapFirstLineOnly    ST_TextboxTightWrap = 4
	ST_TextboxTightWrapLastLineOnly     ST_TextboxTightWrap = 5
)

// Validate validates the CT_DirContentRun and its children
func (_cfcbg *CT_DirContentRun) Validate() error { return _cfcbg.ValidateWithPath("CT_DirContentRun") }

type ST_NumberFormat byte

func (_eadag ST_LineNumberRestart) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cgbde := _d.Attr{}
	_cgbde.Name = name
	switch _eadag {
	case ST_LineNumberRestartUnset:
		_cgbde.Value = ""
	case ST_LineNumberRestartNewPage:
		_cgbde.Value = "newPage"
	case ST_LineNumberRestartNewSection:
		_cgbde.Value = "newSection"
	case ST_LineNumberRestartContinuous:
		_cgbde.Value = "continuous"
	}
	return _cgbde, nil
}

type EG_HdrFtrReferences struct {

	// Header Reference
	HeaderReference *CT_HdrFtrRef

	// Footer Reference
	FooterReference *CT_HdrFtrRef
}

func (_ccbdg *CT_DirContentRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ggaa := range start.Attr {
		if _ggaa.Name.Local == "val" {
			_ccbdg.ValAttr.UnmarshalXMLAttr(_ggaa)
			continue
		}
	}
_fade:
	for {
		_cccc, _cgbf := d.Token()
		if _cgbf != nil {
			return _cgbf
		}
		switch _ccbef := _cccc.(type) {
		case _d.StartElement:
			switch _ccbef.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_baca := NewCT_SimpleField()
				if _dadge := d.DecodeElement(_baca, &_ccbef); _dadge != nil {
					return _dadge
				}
				_ccbdg.FldSimple = append(_ccbdg.FldSimple, _baca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_ccbdg.Hyperlink = NewCT_Hyperlink()
				if _aadgg := d.DecodeElement(_ccbdg.Hyperlink, &_ccbef); _aadgg != nil {
					return _aadgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_ccbdg.SubDoc = NewCT_Rel()
				if _dfdg := d.DecodeElement(_ccbdg.SubDoc, &_ccbef); _dfdg != nil {
					return _dfdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_ccefaf := NewEG_ContentRunContent()
				_ccefaf.CustomXml = NewCT_CustomXmlRun()
				if _eecde := d.DecodeElement(_ccefaf.CustomXml, &_ccbef); _eecde != nil {
					return _eecde
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _ccefaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_dffa := NewEG_ContentRunContent()
				_dffa.SmartTag = NewCT_SmartTagRun()
				if _dcee := d.DecodeElement(_dffa.SmartTag, &_ccbef); _dcee != nil {
					return _dcee
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _dffa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_gafbgd := NewEG_ContentRunContent()
				_gafbgd.Sdt = NewCT_SdtRun()
				if _cfegb := d.DecodeElement(_gafbgd.Sdt, &_ccbef); _cfegb != nil {
					return _cfegb
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _gafbgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_cfgcc := NewEG_ContentRunContent()
				_cfgcc.Dir = NewCT_DirContentRun()
				if _ecfg := d.DecodeElement(_cfgcc.Dir, &_ccbef); _ecfg != nil {
					return _ecfg
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _cfgcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_bccfg := NewEG_ContentRunContent()
				_bccfg.Bdo = NewCT_BdoContentRun()
				if _aacb := d.DecodeElement(_bccfg.Bdo, &_ccbef); _aacb != nil {
					return _aacb
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _bccfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_feeb := NewEG_ContentRunContent()
				_feeb.R = NewCT_R()
				if _fcce := d.DecodeElement(_feeb.R, &_ccbef); _fcce != nil {
					return _fcce
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _feeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_fbgd := NewEG_ContentRunContent()
				_geabc := NewEG_RunLevelElts()
				_geabc.ProofErr = NewCT_ProofErr()
				if _gbgf := d.DecodeElement(_geabc.ProofErr, &_ccbef); _gbgf != nil {
					return _gbgf
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _fbgd)
				_fbgd.EG_RunLevelElts = append(_fbgd.EG_RunLevelElts, _geabc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_cffee := NewEG_ContentRunContent()
				_dfgc := NewEG_RunLevelElts()
				_dfgc.PermStart = NewCT_PermStart()
				if _cddgd := d.DecodeElement(_dfgc.PermStart, &_ccbef); _cddgd != nil {
					return _cddgd
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _cffee)
				_cffee.EG_RunLevelElts = append(_cffee.EG_RunLevelElts, _dfgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_bbdag := NewEG_ContentRunContent()
				_geaeg := NewEG_RunLevelElts()
				_geaeg.PermEnd = NewCT_Perm()
				if _geec := d.DecodeElement(_geaeg.PermEnd, &_ccbef); _geec != nil {
					return _geec
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _bbdag)
				_bbdag.EG_RunLevelElts = append(_bbdag.EG_RunLevelElts, _geaeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cfedc := NewEG_ContentRunContent()
				_gfffc := NewEG_RunLevelElts()
				_gfffc.Ins = NewCT_RunTrackChange()
				if _ebad := d.DecodeElement(_gfffc.Ins, &_ccbef); _ebad != nil {
					return _ebad
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _cfedc)
				_cfedc.EG_RunLevelElts = append(_cfedc.EG_RunLevelElts, _gfffc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_gdfgf := NewEG_ContentRunContent()
				_dfcae := NewEG_RunLevelElts()
				_dfcae.Del = NewCT_RunTrackChange()
				if _febd := d.DecodeElement(_dfcae.Del, &_ccbef); _febd != nil {
					return _febd
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _gdfgf)
				_gdfgf.EG_RunLevelElts = append(_gdfgf.EG_RunLevelElts, _dfcae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_egfgb := NewEG_ContentRunContent()
				_ccce := NewEG_RunLevelElts()
				_ccce.MoveFrom = NewCT_RunTrackChange()
				if _aafb := d.DecodeElement(_ccce.MoveFrom, &_ccbef); _aafb != nil {
					return _aafb
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _egfgb)
				_egfgb.EG_RunLevelElts = append(_egfgb.EG_RunLevelElts, _ccce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_fbdbe := NewEG_ContentRunContent()
				_adfbe := NewEG_RunLevelElts()
				_adfbe.MoveTo = NewCT_RunTrackChange()
				if _ggfb := d.DecodeElement(_adfbe.MoveTo, &_ccbef); _ggfb != nil {
					return _ggfb
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _fbdbe)
				_fbdbe.EG_RunLevelElts = append(_fbdbe.EG_RunLevelElts, _adfbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_cfdcd := NewEG_ContentRunContent()
				_agae := NewEG_RunLevelElts()
				_gbad := NewEG_RangeMarkupElements()
				_gbad.BookmarkStart = NewCT_Bookmark()
				if _gfdf := d.DecodeElement(_gbad.BookmarkStart, &_ccbef); _gfdf != nil {
					return _gfdf
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _cfdcd)
				_cfdcd.EG_RunLevelElts = append(_cfdcd.EG_RunLevelElts, _agae)
				_agae.EG_RangeMarkupElements = append(_agae.EG_RangeMarkupElements, _gbad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_gdbf := NewEG_ContentRunContent()
				_fgbc := NewEG_RunLevelElts()
				_eacg := NewEG_RangeMarkupElements()
				_eacg.BookmarkEnd = NewCT_MarkupRange()
				if _edbd := d.DecodeElement(_eacg.BookmarkEnd, &_ccbef); _edbd != nil {
					return _edbd
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _gdbf)
				_gdbf.EG_RunLevelElts = append(_gdbf.EG_RunLevelElts, _fgbc)
				_fgbc.EG_RangeMarkupElements = append(_fgbc.EG_RangeMarkupElements, _eacg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_gadfb := NewEG_ContentRunContent()
				_aedf := NewEG_RunLevelElts()
				_afdbd := NewEG_RangeMarkupElements()
				_afdbd.MoveFromRangeStart = NewCT_MoveBookmark()
				if _cgagf := d.DecodeElement(_afdbd.MoveFromRangeStart, &_ccbef); _cgagf != nil {
					return _cgagf
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _gadfb)
				_gadfb.EG_RunLevelElts = append(_gadfb.EG_RunLevelElts, _aedf)
				_aedf.EG_RangeMarkupElements = append(_aedf.EG_RangeMarkupElements, _afdbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_efddg := NewEG_ContentRunContent()
				_ggbba := NewEG_RunLevelElts()
				_fdfd := NewEG_RangeMarkupElements()
				_fdfd.MoveFromRangeEnd = NewCT_MarkupRange()
				if _acabf := d.DecodeElement(_fdfd.MoveFromRangeEnd, &_ccbef); _acabf != nil {
					return _acabf
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _efddg)
				_efddg.EG_RunLevelElts = append(_efddg.EG_RunLevelElts, _ggbba)
				_ggbba.EG_RangeMarkupElements = append(_ggbba.EG_RangeMarkupElements, _fdfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_bbdc := NewEG_ContentRunContent()
				_gdbc := NewEG_RunLevelElts()
				_aedd := NewEG_RangeMarkupElements()
				_aedd.MoveToRangeStart = NewCT_MoveBookmark()
				if _eabbe := d.DecodeElement(_aedd.MoveToRangeStart, &_ccbef); _eabbe != nil {
					return _eabbe
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _bbdc)
				_bbdc.EG_RunLevelElts = append(_bbdc.EG_RunLevelElts, _gdbc)
				_gdbc.EG_RangeMarkupElements = append(_gdbc.EG_RangeMarkupElements, _aedd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_begfd := NewEG_ContentRunContent()
				_gfedb := NewEG_RunLevelElts()
				_effc := NewEG_RangeMarkupElements()
				_effc.MoveToRangeEnd = NewCT_MarkupRange()
				if _cdae := d.DecodeElement(_effc.MoveToRangeEnd, &_ccbef); _cdae != nil {
					return _cdae
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _begfd)
				_begfd.EG_RunLevelElts = append(_begfd.EG_RunLevelElts, _gfedb)
				_gfedb.EG_RangeMarkupElements = append(_gfedb.EG_RangeMarkupElements, _effc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_dfbdg := NewEG_ContentRunContent()
				_bcfdgd := NewEG_RunLevelElts()
				_dbcf := NewEG_RangeMarkupElements()
				_dbcf.CommentRangeStart = NewCT_MarkupRange()
				if _eedbfa := d.DecodeElement(_dbcf.CommentRangeStart, &_ccbef); _eedbfa != nil {
					return _eedbfa
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _dfbdg)
				_dfbdg.EG_RunLevelElts = append(_dfbdg.EG_RunLevelElts, _bcfdgd)
				_bcfdgd.EG_RangeMarkupElements = append(_bcfdgd.EG_RangeMarkupElements, _dbcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_fabbg := NewEG_ContentRunContent()
				_eddf := NewEG_RunLevelElts()
				_dbab := NewEG_RangeMarkupElements()
				_dbab.CommentRangeEnd = NewCT_MarkupRange()
				if _ebga := d.DecodeElement(_dbab.CommentRangeEnd, &_ccbef); _ebga != nil {
					return _ebga
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _fabbg)
				_fabbg.EG_RunLevelElts = append(_fabbg.EG_RunLevelElts, _eddf)
				_eddf.EG_RangeMarkupElements = append(_eddf.EG_RangeMarkupElements, _dbab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_acbfa := NewEG_ContentRunContent()
				_aggf := NewEG_RunLevelElts()
				_agff := NewEG_RangeMarkupElements()
				_agff.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _adgf := d.DecodeElement(_agff.CustomXmlInsRangeStart, &_ccbef); _adgf != nil {
					return _adgf
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _acbfa)
				_acbfa.EG_RunLevelElts = append(_acbfa.EG_RunLevelElts, _aggf)
				_aggf.EG_RangeMarkupElements = append(_aggf.EG_RangeMarkupElements, _agff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_cbfd := NewEG_ContentRunContent()
				_egbec := NewEG_RunLevelElts()
				_gabc := NewEG_RangeMarkupElements()
				_gabc.CustomXmlInsRangeEnd = NewCT_Markup()
				if _gdeab := d.DecodeElement(_gabc.CustomXmlInsRangeEnd, &_ccbef); _gdeab != nil {
					return _gdeab
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _cbfd)
				_cbfd.EG_RunLevelElts = append(_cbfd.EG_RunLevelElts, _egbec)
				_egbec.EG_RangeMarkupElements = append(_egbec.EG_RangeMarkupElements, _gabc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_dbbde := NewEG_ContentRunContent()
				_aefdb := NewEG_RunLevelElts()
				_fedfe := NewEG_RangeMarkupElements()
				_fedfe.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _faeg := d.DecodeElement(_fedfe.CustomXmlDelRangeStart, &_ccbef); _faeg != nil {
					return _faeg
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _dbbde)
				_dbbde.EG_RunLevelElts = append(_dbbde.EG_RunLevelElts, _aefdb)
				_aefdb.EG_RangeMarkupElements = append(_aefdb.EG_RangeMarkupElements, _fedfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_ccga := NewEG_ContentRunContent()
				_cggce := NewEG_RunLevelElts()
				_gddae := NewEG_RangeMarkupElements()
				_gddae.CustomXmlDelRangeEnd = NewCT_Markup()
				if _cdbfe := d.DecodeElement(_gddae.CustomXmlDelRangeEnd, &_ccbef); _cdbfe != nil {
					return _cdbfe
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _ccga)
				_ccga.EG_RunLevelElts = append(_ccga.EG_RunLevelElts, _cggce)
				_cggce.EG_RangeMarkupElements = append(_cggce.EG_RangeMarkupElements, _gddae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_faff := NewEG_ContentRunContent()
				_cgggb := NewEG_RunLevelElts()
				_febg := NewEG_RangeMarkupElements()
				_febg.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _edddf := d.DecodeElement(_febg.CustomXmlMoveFromRangeStart, &_ccbef); _edddf != nil {
					return _edddf
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _faff)
				_faff.EG_RunLevelElts = append(_faff.EG_RunLevelElts, _cgggb)
				_cgggb.EG_RangeMarkupElements = append(_cgggb.EG_RangeMarkupElements, _febg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_dbagg := NewEG_ContentRunContent()
				_fccd := NewEG_RunLevelElts()
				_dabfac := NewEG_RangeMarkupElements()
				_dabfac.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _baee := d.DecodeElement(_dabfac.CustomXmlMoveFromRangeEnd, &_ccbef); _baee != nil {
					return _baee
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _dbagg)
				_dbagg.EG_RunLevelElts = append(_dbagg.EG_RunLevelElts, _fccd)
				_fccd.EG_RangeMarkupElements = append(_fccd.EG_RangeMarkupElements, _dabfac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_egfc := NewEG_ContentRunContent()
				_cccbb := NewEG_RunLevelElts()
				_cgee := NewEG_RangeMarkupElements()
				_cgee.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _ecaf := d.DecodeElement(_cgee.CustomXmlMoveToRangeStart, &_ccbef); _ecaf != nil {
					return _ecaf
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _egfc)
				_egfc.EG_RunLevelElts = append(_egfc.EG_RunLevelElts, _cccbb)
				_cccbb.EG_RangeMarkupElements = append(_cccbb.EG_RangeMarkupElements, _cgee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_ffbce := NewEG_ContentRunContent()
				_dfadba := NewEG_RunLevelElts()
				_abaac := NewEG_RangeMarkupElements()
				_abaac.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _dddg := d.DecodeElement(_abaac.CustomXmlMoveToRangeEnd, &_ccbef); _dddg != nil {
					return _dddg
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _ffbce)
				_ffbce.EG_RunLevelElts = append(_ffbce.EG_RunLevelElts, _dfadba)
				_dfadba.EG_RangeMarkupElements = append(_dfadba.EG_RangeMarkupElements, _abaac)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_afbg := NewEG_ContentRunContent()
				_efcae := NewEG_RunLevelElts()
				_acffe := NewEG_MathContent()
				_acffe.OMathPara = _f.NewOMathPara()
				if _gaead := d.DecodeElement(_acffe.OMathPara, &_ccbef); _gaead != nil {
					return _gaead
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _afbg)
				_afbg.EG_RunLevelElts = append(_afbg.EG_RunLevelElts, _efcae)
				_efcae.EG_MathContent = append(_efcae.EG_MathContent, _acffe)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_bbdg := NewEG_ContentRunContent()
				_faffa := NewEG_RunLevelElts()
				_baea := NewEG_MathContent()
				_baea.OMath = _f.NewOMath()
				if _cgeb := d.DecodeElement(_baea.OMath, &_ccbef); _cgeb != nil {
					return _cgeb
				}
				_ccbdg.EG_ContentRunContent = append(_ccbdg.EG_ContentRunContent, _bbdg)
				_bbdg.EG_RunLevelElts = append(_bbdg.EG_RunLevelElts, _faffa)
				_faffa.EG_MathContent = append(_faffa.EG_MathContent, _baea)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DirContentRun\u0020\u0025v", _ccbef.Name)
				if _cfgb := d.Skip(); _cfgb != nil {
					return _cfgb
				}
			}
		case _d.EndElement:
			break _fade
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_Columns() *CT_Columns { _aggc := &CT_Columns{}; return _aggc }

// Validate validates the CT_Compat and its children
func (_edgfc *CT_Compat) Validate() error { return _edgfc.ValidateWithPath("CT_Compat") }

// ValidateWithPath validates the CT_TextboxTightWrap and its children, prefixing error messages with path
func (_gcegg *CT_TextboxTightWrap) ValidateWithPath(path string) error {
	if _gcegg.ValAttr == ST_TextboxTightWrapUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _acced := _gcegg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _acced != nil {
		return _acced
	}
	return nil
}
func NewEG_FtnEdnNumProps() *EG_FtnEdnNumProps { _bgaabe := &EG_FtnEdnNumProps{}; return _bgaabe }
func (_fgbbd *CT_Empty) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for {
		_eedddc, _caef := d.Token()
		if _caef != nil {
			return _b.Errorf("parsing\u0020CT_Empty: \u0025s", _caef)
		}
		if _cfac, _egcea := _eedddc.(_d.EndElement); _egcea && _cfac.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bfffd ST_PageOrientation) Validate() error { return _bfffd.ValidateWithPath("") }
func NewCT_Document() *CT_Document {
	_fafcg := &CT_Document{}
	_fafcg.ConformanceAttr = _g.ST_ConformanceClass(1)
	return _fafcg
}
func NewCT_Styles() *CT_Styles { _gcaae := &CT_Styles{}; return _gcaae }
func (_cbaaee *CT_TblGridChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cbaaee.TblGrid = NewCT_TblGridBase()
	for _, _afgge := range start.Attr {
		if _afgge.Name.Local == "id" {
			_bgcec, _feffa := _dd.ParseInt(_afgge.Value, 10, 64)
			if _feffa != nil {
				return _feffa
			}
			_cbaaee.IdAttr = _bgcec
			continue
		}
	}
_fggcec:
	for {
		_adfde, _bdccdc := d.Token()
		if _bdccdc != nil {
			return _bdccdc
		}
		switch _bcaca := _adfde.(type) {
		case _d.StartElement:
			switch _bcaca.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblGrid"}:
				if _egcgc := d.DecodeElement(_cbaaee.TblGrid, &_bcaca); _egcgc != nil {
					return _egcgc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TblGridChange\u0020\u0025v", _bcaca.Name)
				if _caeeag := d.Skip(); _caeeag != nil {
					return _caeeag
				}
			}
		case _d.EndElement:
			break _fggcec
		case _d.CharData:
		}
	}
	return nil
}

const (
	ST_VAnchorUnset  ST_VAnchor = 0
	ST_VAnchorText   ST_VAnchor = 1
	ST_VAnchorMargin ST_VAnchor = 2
	ST_VAnchorPage   ST_VAnchor = 3
)

// Validate validates the WdCT_PosVChoice and its children
func (_dgebc *WdCT_PosVChoice) Validate() error { return _dgebc.ValidateWithPath("WdCT_PosVChoice") }

// Validate validates the EG_MathContent and its children
func (_dgebd *EG_MathContent) Validate() error { return _dgebd.ValidateWithPath("EG_MathContent") }
func (_bdagd *CT_TrackChangesView) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bdagd.MarkupAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:markup"}, Value: _b.Sprintf("\u0025v", *_bdagd.MarkupAttr)})
	}
	if _bdagd.CommentsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:comments"}, Value: _b.Sprintf("\u0025v", *_bdagd.CommentsAttr)})
	}
	if _bdagd.InsDelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:insDel"}, Value: _b.Sprintf("\u0025v", *_bdagd.InsDelAttr)})
	}
	if _bdagd.FormattingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:formatting"}, Value: _b.Sprintf("\u0025v", *_bdagd.FormattingAttr)})
	}
	if _bdagd.InkAnnotationsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:inkAnnotations"}, Value: _b.Sprintf("\u0025v", *_bdagd.InkAnnotationsAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cbceg ST_View) Validate() error { return _cbceg.ValidateWithPath("") }

// ValidateWithPath validates the WdCT_WrapSquare and its children, prefixing error messages with path
func (_adagd *WdCT_WrapSquare) ValidateWithPath(path string) error {
	if _adagd.WrapTextAttr == WdST_WrapTextUnset {
		return _b.Errorf("\u0025s/WrapTextAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _dgadgg := _adagd.WrapTextAttr.ValidateWithPath(path + "\u002fWrapTextAttr"); _dgadgg != nil {
		return _dgadgg
	}
	if _adagd.EffectExtent != nil {
		if _adfgg := _adagd.EffectExtent.ValidateWithPath(path + "\u002fEffectExtent"); _adfgg != nil {
			return _adfgg
		}
	}
	return nil
}
func (_cbbca ST_MailMergeOdsoFMDFieldType) ValidateWithPath(path string) error {
	switch _cbbca {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cbbca))
	}
	return nil
}
func (_afbgb *CT_Drawing) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _afbgb.Anchor != nil {
		_aafd := _d.StartElement{Name: _d.Name{Local: "wp:anchor"}}
		for _, _gdgg := range _afbgb.Anchor {
			e.EncodeElement(_gdgg, _aafd)
		}
	}
	if _afbgb.Inline != nil {
		_dbad := _d.StartElement{Name: _d.Name{Local: "wp:inline"}}
		for _, _edege := range _afbgb.Inline {
			e.EncodeElement(_edege, _dbad)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfbd *CT_FFTextInput) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cfbd.Type != nil {
		_bbbde := _d.StartElement{Name: _d.Name{Local: "w:type"}}
		e.EncodeElement(_cfbd.Type, _bbbde)
	}
	if _cfbd.Default != nil {
		_dbfa := _d.StartElement{Name: _d.Name{Local: "w:default"}}
		e.EncodeElement(_cfbd.Default, _dbfa)
	}
	if _cfbd.MaxLength != nil {
		_ggfbg := _d.StartElement{Name: _d.Name{Local: "w:maxLength"}}
		e.EncodeElement(_cfbd.MaxLength, _ggfbg)
	}
	if _cfbd.Format != nil {
		_afaag := _d.StartElement{Name: _d.Name{Local: "w:format"}}
		e.EncodeElement(_cfbd.Format, _afaag)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_DocRsids() *CT_DocRsids { _gdfb := &CT_DocRsids{}; return _gdfb }
func (_dbbbd ST_AnnotationVMerge) String() string {
	switch _dbbbd {
	case 0:
		return ""
	case 1:
		return "cont"
	case 2:
		return "rest"
	}
	return ""
}

const (
	ST_BrTypeUnset        ST_BrType = 0
	ST_BrTypePage         ST_BrType = 1
	ST_BrTypeColumn       ST_BrType = 2
	ST_BrTypeTextWrapping ST_BrType = 3
)

func NewCT_FtnEdnRef() *CT_FtnEdnRef { _aadf := &CT_FtnEdnRef{}; return _aadf }
func (_aaeabd *CT_TcPrInner) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_degbg:
	for {
		_dabagc, _afbaaa := d.Token()
		if _afbaaa != nil {
			return _afbaaa
		}
		switch _bdfdge := _dabagc.(type) {
		case _d.StartElement:
			switch _bdfdge.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_aaeabd.CnfStyle = NewCT_Cnf()
				if _accfc := d.DecodeElement(_aaeabd.CnfStyle, &_bdfdge); _accfc != nil {
					return _accfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcW"}:
				_aaeabd.TcW = NewCT_TblWidth()
				if _eacda := d.DecodeElement(_aaeabd.TcW, &_bdfdge); _eacda != nil {
					return _eacda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridSpan"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridSpan"}:
				_aaeabd.GridSpan = NewCT_DecimalNumber()
				if _acbdaa := d.DecodeElement(_aaeabd.GridSpan, &_bdfdge); _acbdaa != nil {
					return _acbdaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hMerge"}:
				_aaeabd.HMerge = NewCT_HMerge()
				if _ebfbd := d.DecodeElement(_aaeabd.HMerge, &_bdfdge); _ebfbd != nil {
					return _ebfbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vMerge"}:
				_aaeabd.VMerge = NewCT_VMerge()
				if _gcff := d.DecodeElement(_aaeabd.VMerge, &_bdfdge); _gcff != nil {
					return _gcff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcBorders"}:
				_aaeabd.TcBorders = NewCT_TcBorders()
				if _cfadc := d.DecodeElement(_aaeabd.TcBorders, &_bdfdge); _cfadc != nil {
					return _cfadc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_aaeabd.Shd = NewCT_Shd()
				if _acdfaf := d.DecodeElement(_aaeabd.Shd, &_bdfdge); _acdfaf != nil {
					return _acdfaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noWrap"}:
				_aaeabd.NoWrap = NewCT_OnOff()
				if _ccded := d.DecodeElement(_aaeabd.NoWrap, &_bdfdge); _ccded != nil {
					return _ccded
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcMar"}:
				_aaeabd.TcMar = NewCT_TcMar()
				if _bagfe := d.DecodeElement(_aaeabd.TcMar, &_bdfdge); _bagfe != nil {
					return _bagfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_aaeabd.TextDirection = NewCT_TextDirection()
				if _bdfdc := d.DecodeElement(_aaeabd.TextDirection, &_bdfdge); _bdfdc != nil {
					return _bdfdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcFitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcFitText"}:
				_aaeabd.TcFitText = NewCT_OnOff()
				if _fgbde := d.DecodeElement(_aaeabd.TcFitText, &_bdfdge); _fgbde != nil {
					return _fgbde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vAlign"}:
				_aaeabd.VAlign = NewCT_VerticalJc()
				if _eefdaf := d.DecodeElement(_aaeabd.VAlign, &_bdfdge); _eefdaf != nil {
					return _eefdaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hideMark"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hideMark"}:
				_aaeabd.HideMark = NewCT_OnOff()
				if _eccda := d.DecodeElement(_aaeabd.HideMark, &_bdfdge); _eccda != nil {
					return _eccda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "headers"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "headers"}:
				_aaeabd.Headers = NewCT_Headers()
				if _fgfec := d.DecodeElement(_aaeabd.Headers, &_bdfdge); _fgfec != nil {
					return _fgfec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellIns"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellIns"}:
				_aaeabd.CellIns = NewCT_TrackChange()
				if _dedeb := d.DecodeElement(_aaeabd.CellIns, &_bdfdge); _dedeb != nil {
					return _dedeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellDel"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellDel"}:
				_aaeabd.CellDel = NewCT_TrackChange()
				if _bcgceb := d.DecodeElement(_aaeabd.CellDel, &_bdfdge); _bcgceb != nil {
					return _bcgceb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellMerge"}:
				_aaeabd.CellMerge = NewCT_CellMergeTrackChange()
				if _fffdff := d.DecodeElement(_aaeabd.CellMerge, &_bdfdge); _fffdff != nil {
					return _fffdff
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TcPrInner\u0020\u0025v", _bdfdge.Name)
				if _cfagae := d.Skip(); _cfagae != nil {
					return _cfagae
				}
			}
		case _d.EndElement:
			break _degbg
		case _d.CharData:
		}
	}
	return nil
}
func (_ddged *CT_PPrDefault) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gaca:
	for {
		_eacba, _cacfg := d.Token()
		if _cacfg != nil {
			return _cacfg
		}
		switch _aedc := _eacba.(type) {
		case _d.StartElement:
			switch _aedc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPr"}:
				_ddged.PPr = NewCT_PPrGeneral()
				if _dacc := d.DecodeElement(_ddged.PPr, &_aedc); _dacc != nil {
					return _dacc
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_PPrDefault \u0025v", _aedc.Name)
				if _baba := d.Skip(); _baba != nil {
					return _baba
				}
			}
		case _d.EndElement:
			break _gaca
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the WdCT_TxbxContent and its children, prefixing error messages with path
func (_cbdcg *WdCT_TxbxContent) ValidateWithPath(path string) error {
	for _efbcgb, _bebfdb := range _cbdcg.AltChunk {
		if _gfgba := _bebfdb.ValidateWithPath(_b.Sprintf("\u0025s\u002fAltChunk\u005b\u0025d\u005d", path, _efbcgb)); _gfgba != nil {
			return _gfgba
		}
	}
	for _eedefd, _babae := range _cbdcg.EG_ContentBlockContent {
		if _cdfedc := _babae.ValidateWithPath(_b.Sprintf("\u0025s/EG_ContentBlockContent[%d\u005d", path, _eedefd)); _cdfedc != nil {
			return _cdfedc
		}
	}
	return nil
}

type CT_FFCheckBox struct {
	Choice *CT_FFCheckBoxChoice

	// Default Checkbox Form Field State
	Default *CT_OnOff

	// Checkbox Form Field State
	Checked *CT_OnOff
}
type CT_Shd struct {

	// Shading Pattern
	ValAttr ST_Shd

	// Shading Pattern Color
	ColorAttr *ST_HexColor

	// Shading Pattern Theme Color
	ThemeColorAttr ST_ThemeColor

	// Shading Pattern Theme Color Tint
	ThemeTintAttr *string

	// Shading Pattern Theme Color Shade
	ThemeShadeAttr *string

	// Shading Background Color
	FillAttr *ST_HexColor

	// Shading Background Theme Color
	ThemeFillAttr ST_ThemeColor

	// Shading Background Theme Color Tint
	ThemeFillTintAttr *string

	// Shading Background Theme Color Shade
	ThemeFillShadeAttr *string
}
type CT_Border struct {

	// Border Style
	ValAttr ST_Border

	// Border Color
	ColorAttr *ST_HexColor

	// Border Theme Color
	ThemeColorAttr ST_ThemeColor

	// Border Theme Color Tint
	ThemeTintAttr *string

	// Border Theme Color Shade
	ThemeShadeAttr *string

	// Border Width
	SzAttr *uint64

	// Border Spacing Measurement
	SpaceAttr *uint64

	// Border Shadow
	ShadowAttr *_g.ST_OnOff

	// Create Frame Effect
	FrameAttr *_g.ST_OnOff
}

func (_cgabca *ST_DisplacedByCustomXml) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cgabca = 0
	case "next":
		*_cgabca = 1
	case "prev":
		*_cgabca = 2
	}
	return nil
}
func (_ecgdc *CT_SdtEndPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_afdfg:
	for {
		_dbccd, _fbabf := d.Token()
		if _fbabf != nil {
			return _fbabf
		}
		switch _gagcf := _dbccd.(type) {
		case _d.StartElement:
			switch _gagcf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_cbbcg := NewCT_RPr()
				if _bbffag := d.DecodeElement(_cbbcg, &_gagcf); _bbffag != nil {
					return _bbffag
				}
				_ecgdc.RPr = append(_ecgdc.RPr, _cbbcg)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SdtEndPr\u0020\u0025v", _gagcf.Name)
				if _bffad := d.Skip(); _bffad != nil {
					return _bffad
				}
			}
		case _d.EndElement:
			break _afdfg
		case _d.CharData:
		}
	}
	return nil
}
func (_gfbgef ST_StyleType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gfbgef.String(), start)
}
func NewWdEG_WrapTypeChoice() *WdEG_WrapTypeChoice { _eecgd := &WdEG_WrapTypeChoice{}; return _eecgd }
func NewCT_TextEffect() *CT_TextEffect {
	_aaffe := &CT_TextEffect{}
	_aaffe.ValAttr = ST_TextEffect(1)
	return _aaffe
}

type CT_Numbering struct {

	// Picture Numbering Symbol Definition
	NumPicBullet []*CT_NumPicBullet

	// Abstract Numbering Definition
	AbstractNum []*CT_AbstractNum

	// Numbering Definition Instance
	Num []*CT_Num

	// Last Reviewed Abstract Numbering Definition
	NumIdMacAtCleanup *CT_DecimalNumber
}
type CT_FtnEdn struct {

	// Footnote/Endnote Type
	TypeAttr ST_FtnEdn

	// Footnote/Endnote ID
	IdAttr            int64
	EG_BlockLevelElts []*EG_BlockLevelElts
}

// Validate validates the WdCT_PosHChoice and its children
func (_bccfd *WdCT_PosHChoice) Validate() error { return _bccfd.ValidateWithPath("WdCT_PosHChoice") }
func NewCT_ColorSchemeMapping() *CT_ColorSchemeMapping {
	_baad := &CT_ColorSchemeMapping{}
	return _baad
}
func (_cdegdc ST_FtnEdn) Validate() error { return _cdegdc.ValidateWithPath("") }
func (_dfffg *CT_SdtBlock) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dfffg.SdtPr != nil {
		_fcbd := _d.StartElement{Name: _d.Name{Local: "w:sdtPr"}}
		e.EncodeElement(_dfffg.SdtPr, _fcbd)
	}
	if _dfffg.SdtEndPr != nil {
		_fffc := _d.StartElement{Name: _d.Name{Local: "w:sdtEndPr"}}
		e.EncodeElement(_dfffg.SdtEndPr, _fffc)
	}
	if _dfffg.SdtContent != nil {
		_aacgffa := _d.StartElement{Name: _d.Name{Local: "w:sdtContent"}}
		e.EncodeElement(_dfffg.SdtContent, _aacgffa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bcfe *CT_Control) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ade := range start.Attr {
		if _ade.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _ade.Name.Local == "id" || _ade.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _ade.Name.Local == "id" {
			_ffce, _gcfg := _ade.Value, error(nil)
			if _gcfg != nil {
				return _gcfg
			}
			_bcfe.IdAttr = &_ffce
			continue
		}
		if _ade.Name.Local == "name" {
			_cfgc, _gaeg := _ade.Value, error(nil)
			if _gaeg != nil {
				return _gaeg
			}
			_bcfe.NameAttr = &_cfgc
			continue
		}
		if _ade.Name.Local == "shapeid" {
			_ggae, _cagb := _ade.Value, error(nil)
			if _cagb != nil {
				return _cagb
			}
			_bcfe.ShapeidAttr = &_ggae
			continue
		}
	}
	for {
		_fdfa, _feac := d.Token()
		if _feac != nil {
			return _b.Errorf("parsing\u0020CT_Control:\u0020%s", _feac)
		}
		if _dcg, _debb := _fdfa.(_d.EndElement); _debb && _dcg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bfcbb *CT_DocType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _bfcbb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_eeddd *CT_EastAsianLayout) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _acfcb := range start.Attr {
		if _acfcb.Name.Local == "id" {
			_abcc, _ebgb := _dd.ParseInt(_acfcb.Value, 10, 64)
			if _ebgb != nil {
				return _ebgb
			}
			_eeddd.IdAttr = &_abcc
			continue
		}
		if _acfcb.Name.Local == "combine" {
			_babcf, _cbab := ParseUnionST_OnOff(_acfcb.Value)
			if _cbab != nil {
				return _cbab
			}
			_eeddd.CombineAttr = &_babcf
			continue
		}
		if _acfcb.Name.Local == "combineBrackets" {
			_eeddd.CombineBracketsAttr.UnmarshalXMLAttr(_acfcb)
			continue
		}
		if _acfcb.Name.Local == "vert" {
			_eaaa, _cbcf := ParseUnionST_OnOff(_acfcb.Value)
			if _cbcf != nil {
				return _cbcf
			}
			_eeddd.VertAttr = &_eaaa
			continue
		}
		if _acfcb.Name.Local == "vertCompress" {
			_bedb, _daeab := ParseUnionST_OnOff(_acfcb.Value)
			if _daeab != nil {
				return _daeab
			}
			_eeddd.VertCompressAttr = &_bedb
			continue
		}
	}
	for {
		_gaeaf, _fafaa := d.Token()
		if _fafaa != nil {
			return _b.Errorf("parsing\u0020CT_EastAsianLayout:\u0020\u0025s", _fafaa)
		}
		if _bacdd, _gdcc := _gaeaf.(_d.EndElement); _gdcc && _bacdd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ColorSchemeMapping and its children
func (_effde *CT_ColorSchemeMapping) Validate() error {
	return _effde.ValidateWithPath("CT_ColorSchemeMapping")
}

// ValidateWithPath validates the WdEG_WrapTypeChoice and its children, prefixing error messages with path
func (_ffddd *WdEG_WrapTypeChoice) ValidateWithPath(path string) error {
	if _ffddd.WrapNone != nil {
		if _cdcgg := _ffddd.WrapNone.ValidateWithPath(path + "\u002fWrapNone"); _cdcgg != nil {
			return _cdcgg
		}
	}
	if _ffddd.WrapSquare != nil {
		if _gcceb := _ffddd.WrapSquare.ValidateWithPath(path + "/WrapSquare"); _gcceb != nil {
			return _gcceb
		}
	}
	if _ffddd.WrapTight != nil {
		if _cbedc := _ffddd.WrapTight.ValidateWithPath(path + "\u002fWrapTight"); _cbedc != nil {
			return _cbedc
		}
	}
	if _ffddd.WrapThrough != nil {
		if _ffeee := _ffddd.WrapThrough.ValidateWithPath(path + "\u002fWrapThrough"); _ffeee != nil {
			return _ffeee
		}
	}
	if _ffddd.WrapTopAndBottom != nil {
		if _efaefa := _ffddd.WrapTopAndBottom.ValidateWithPath(path + "\u002fWrapTopAndBottom"); _efaefa != nil {
			return _efaefa
		}
	}
	return nil
}
func ParseUnionST_TwipsMeasure(s string) (_g.ST_TwipsMeasure, error) {
	_badgf := _g.ST_TwipsMeasure{}
	if _g.ST_PositiveUniversalMeasurePatternRe.MatchString(s) {
		_badgf.ST_PositiveUniversalMeasure = &s
	} else {
		_faafb, _fbcged := _dd.ParseFloat(s, 64)
		if _fbcged != nil {
			return _badgf, _b.Errorf("parsing\u0020\u0025s\u0020as\u0020uint:\u0020%s", s, _fbcged)
		}
		_badgf.ST_UnsignedDecimalNumber = _ga.Uint64(uint64(_faafb))
	}
	return _badgf, nil
}

type Document struct{ CT_Document }

func (_fabgcb ST_Theme) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dgfeed := _d.Attr{}
	_dgfeed.Name = name
	switch _fabgcb {
	case ST_ThemeUnset:
		_dgfeed.Value = ""
	case ST_ThemeMajorEastAsia:
		_dgfeed.Value = "majorEastAsia"
	case ST_ThemeMajorBidi:
		_dgfeed.Value = "majorBidi"
	case ST_ThemeMajorAscii:
		_dgfeed.Value = "majorAscii"
	case ST_ThemeMajorHAnsi:
		_dgfeed.Value = "majorHAnsi"
	case ST_ThemeMinorEastAsia:
		_dgfeed.Value = "minorEastAsia"
	case ST_ThemeMinorBidi:
		_dgfeed.Value = "minorBidi"
	case ST_ThemeMinorAscii:
		_dgfeed.Value = "minorAscii"
	case ST_ThemeMinorHAnsi:
		_dgfeed.Value = "minorHAnsi"
	}
	return _dgfeed, nil
}
func (_dgabg *CT_FrameLayout) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dgabg.ValAttr = ST_FrameLayout(1)
	for _, _agee := range start.Attr {
		if _agee.Name.Local == "val" {
			_dgabg.ValAttr.UnmarshalXMLAttr(_agee)
			continue
		}
	}
	for {
		_babeg, _fcede := d.Token()
		if _fcede != nil {
			return _b.Errorf("parsing\u0020CT_FrameLayout:\u0020\u0025s", _fcede)
		}
		if _dccg, _bgfce := _babeg.(_d.EndElement); _bgfce && _dccg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dbada *CT_TxbxContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dbfcfa:
	for {
		_bcffeb, _ababgd := d.Token()
		if _ababgd != nil {
			return _ababgd
		}
		switch _gggfac := _bcffeb.(type) {
		case _d.StartElement:
			switch _gggfac.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_dagcd := NewCT_AltChunk()
				if _daddbc := d.DecodeElement(_dagcd, &_gggfac); _daddbc != nil {
					return _daddbc
				}
				_dbada.AltChunk = append(_dbada.AltChunk, _dagcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_facggca := NewEG_ContentBlockContent()
				_facggca.CustomXml = NewCT_CustomXmlBlock()
				if _gafef := d.DecodeElement(_facggca.CustomXml, &_gggfac); _gafef != nil {
					return _gafef
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _facggca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_bcfeg := NewEG_ContentBlockContent()
				_bcfeg.Sdt = NewCT_SdtBlock()
				if _adbbf := d.DecodeElement(_bcfeg.Sdt, &_gggfac); _adbbf != nil {
					return _adbbf
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _bcfeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_fbbab := NewEG_ContentBlockContent()
				_cbfedb := NewCT_P()
				if _fddbbg := d.DecodeElement(_cbfedb, &_gggfac); _fddbbg != nil {
					return _fddbbg
				}
				_fbbab.P = append(_fbbab.P, _cbfedb)
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _fbbab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_gaafb := NewEG_ContentBlockContent()
				_ecfgc := NewCT_Tbl()
				if _aeddc := d.DecodeElement(_ecfgc, &_gggfac); _aeddc != nil {
					return _aeddc
				}
				_gaafb.Tbl = append(_gaafb.Tbl, _ecfgc)
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _gaafb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_fceeff := NewEG_ContentBlockContent()
				_dgfec := NewEG_RunLevelElts()
				_dgfec.ProofErr = NewCT_ProofErr()
				if _geebd := d.DecodeElement(_dgfec.ProofErr, &_gggfac); _geebd != nil {
					return _geebd
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _fceeff)
				_fceeff.EG_RunLevelElts = append(_fceeff.EG_RunLevelElts, _dgfec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_egfccc := NewEG_ContentBlockContent()
				_eccee := NewEG_RunLevelElts()
				_eccee.PermStart = NewCT_PermStart()
				if _cbdbc := d.DecodeElement(_eccee.PermStart, &_gggfac); _cbdbc != nil {
					return _cbdbc
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _egfccc)
				_egfccc.EG_RunLevelElts = append(_egfccc.EG_RunLevelElts, _eccee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_dagbc := NewEG_ContentBlockContent()
				_cgfed := NewEG_RunLevelElts()
				_cgfed.PermEnd = NewCT_Perm()
				if _ccecf := d.DecodeElement(_cgfed.PermEnd, &_gggfac); _ccecf != nil {
					return _ccecf
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _dagbc)
				_dagbc.EG_RunLevelElts = append(_dagbc.EG_RunLevelElts, _cgfed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_dcgeag := NewEG_ContentBlockContent()
				_ffbdfc := NewEG_RunLevelElts()
				_ffbdfc.Ins = NewCT_RunTrackChange()
				if _gaedc := d.DecodeElement(_ffbdfc.Ins, &_gggfac); _gaedc != nil {
					return _gaedc
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _dcgeag)
				_dcgeag.EG_RunLevelElts = append(_dcgeag.EG_RunLevelElts, _ffbdfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_eebaf := NewEG_ContentBlockContent()
				_cccfa := NewEG_RunLevelElts()
				_cccfa.Del = NewCT_RunTrackChange()
				if _abcgc := d.DecodeElement(_cccfa.Del, &_gggfac); _abcgc != nil {
					return _abcgc
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _eebaf)
				_eebaf.EG_RunLevelElts = append(_eebaf.EG_RunLevelElts, _cccfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_ggega := NewEG_ContentBlockContent()
				_gfecfg := NewEG_RunLevelElts()
				_gfecfg.MoveFrom = NewCT_RunTrackChange()
				if _cadbff := d.DecodeElement(_gfecfg.MoveFrom, &_gggfac); _cadbff != nil {
					return _cadbff
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _ggega)
				_ggega.EG_RunLevelElts = append(_ggega.EG_RunLevelElts, _gfecfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_egdda := NewEG_ContentBlockContent()
				_degacd := NewEG_RunLevelElts()
				_degacd.MoveTo = NewCT_RunTrackChange()
				if _afadde := d.DecodeElement(_degacd.MoveTo, &_gggfac); _afadde != nil {
					return _afadde
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _egdda)
				_egdda.EG_RunLevelElts = append(_egdda.EG_RunLevelElts, _degacd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_gddeag := NewEG_ContentBlockContent()
				_fbcfb := NewEG_RunLevelElts()
				_aagedc := NewEG_RangeMarkupElements()
				_aagedc.BookmarkStart = NewCT_Bookmark()
				if _effac := d.DecodeElement(_aagedc.BookmarkStart, &_gggfac); _effac != nil {
					return _effac
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _gddeag)
				_gddeag.EG_RunLevelElts = append(_gddeag.EG_RunLevelElts, _fbcfb)
				_fbcfb.EG_RangeMarkupElements = append(_fbcfb.EG_RangeMarkupElements, _aagedc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_bcdeec := NewEG_ContentBlockContent()
				_acdeb := NewEG_RunLevelElts()
				_agbee := NewEG_RangeMarkupElements()
				_agbee.BookmarkEnd = NewCT_MarkupRange()
				if _bafbga := d.DecodeElement(_agbee.BookmarkEnd, &_gggfac); _bafbga != nil {
					return _bafbga
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _bcdeec)
				_bcdeec.EG_RunLevelElts = append(_bcdeec.EG_RunLevelElts, _acdeb)
				_acdeb.EG_RangeMarkupElements = append(_acdeb.EG_RangeMarkupElements, _agbee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_eabec := NewEG_ContentBlockContent()
				_gfabg := NewEG_RunLevelElts()
				_afbeca := NewEG_RangeMarkupElements()
				_afbeca.MoveFromRangeStart = NewCT_MoveBookmark()
				if _ecgbf := d.DecodeElement(_afbeca.MoveFromRangeStart, &_gggfac); _ecgbf != nil {
					return _ecgbf
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _eabec)
				_eabec.EG_RunLevelElts = append(_eabec.EG_RunLevelElts, _gfabg)
				_gfabg.EG_RangeMarkupElements = append(_gfabg.EG_RangeMarkupElements, _afbeca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_eaadge := NewEG_ContentBlockContent()
				_adddg := NewEG_RunLevelElts()
				_cbdagg := NewEG_RangeMarkupElements()
				_cbdagg.MoveFromRangeEnd = NewCT_MarkupRange()
				if _ggfbf := d.DecodeElement(_cbdagg.MoveFromRangeEnd, &_gggfac); _ggfbf != nil {
					return _ggfbf
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _eaadge)
				_eaadge.EG_RunLevelElts = append(_eaadge.EG_RunLevelElts, _adddg)
				_adddg.EG_RangeMarkupElements = append(_adddg.EG_RangeMarkupElements, _cbdagg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_fceac := NewEG_ContentBlockContent()
				_aggffe := NewEG_RunLevelElts()
				_cafdb := NewEG_RangeMarkupElements()
				_cafdb.MoveToRangeStart = NewCT_MoveBookmark()
				if _beffc := d.DecodeElement(_cafdb.MoveToRangeStart, &_gggfac); _beffc != nil {
					return _beffc
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _fceac)
				_fceac.EG_RunLevelElts = append(_fceac.EG_RunLevelElts, _aggffe)
				_aggffe.EG_RangeMarkupElements = append(_aggffe.EG_RangeMarkupElements, _cafdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_eafcee := NewEG_ContentBlockContent()
				_adbedb := NewEG_RunLevelElts()
				_cbceca := NewEG_RangeMarkupElements()
				_cbceca.MoveToRangeEnd = NewCT_MarkupRange()
				if _aabacd := d.DecodeElement(_cbceca.MoveToRangeEnd, &_gggfac); _aabacd != nil {
					return _aabacd
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _eafcee)
				_eafcee.EG_RunLevelElts = append(_eafcee.EG_RunLevelElts, _adbedb)
				_adbedb.EG_RangeMarkupElements = append(_adbedb.EG_RangeMarkupElements, _cbceca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_cegfcg := NewEG_ContentBlockContent()
				_cbafc := NewEG_RunLevelElts()
				_ggddd := NewEG_RangeMarkupElements()
				_ggddd.CommentRangeStart = NewCT_MarkupRange()
				if _ddaec := d.DecodeElement(_ggddd.CommentRangeStart, &_gggfac); _ddaec != nil {
					return _ddaec
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _cegfcg)
				_cegfcg.EG_RunLevelElts = append(_cegfcg.EG_RunLevelElts, _cbafc)
				_cbafc.EG_RangeMarkupElements = append(_cbafc.EG_RangeMarkupElements, _ggddd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_bafaf := NewEG_ContentBlockContent()
				_gcdec := NewEG_RunLevelElts()
				_bedag := NewEG_RangeMarkupElements()
				_bedag.CommentRangeEnd = NewCT_MarkupRange()
				if _bfdgd := d.DecodeElement(_bedag.CommentRangeEnd, &_gggfac); _bfdgd != nil {
					return _bfdgd
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _bafaf)
				_bafaf.EG_RunLevelElts = append(_bafaf.EG_RunLevelElts, _gcdec)
				_gcdec.EG_RangeMarkupElements = append(_gcdec.EG_RangeMarkupElements, _bedag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_cfedfc := NewEG_ContentBlockContent()
				_gfcefg := NewEG_RunLevelElts()
				_bggcca := NewEG_RangeMarkupElements()
				_bggcca.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _beebb := d.DecodeElement(_bggcca.CustomXmlInsRangeStart, &_gggfac); _beebb != nil {
					return _beebb
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _cfedfc)
				_cfedfc.EG_RunLevelElts = append(_cfedfc.EG_RunLevelElts, _gfcefg)
				_gfcefg.EG_RangeMarkupElements = append(_gfcefg.EG_RangeMarkupElements, _bggcca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_dbecd := NewEG_ContentBlockContent()
				_dacbea := NewEG_RunLevelElts()
				_edeaa := NewEG_RangeMarkupElements()
				_edeaa.CustomXmlInsRangeEnd = NewCT_Markup()
				if _bbacbg := d.DecodeElement(_edeaa.CustomXmlInsRangeEnd, &_gggfac); _bbacbg != nil {
					return _bbacbg
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _dbecd)
				_dbecd.EG_RunLevelElts = append(_dbecd.EG_RunLevelElts, _dacbea)
				_dacbea.EG_RangeMarkupElements = append(_dacbea.EG_RangeMarkupElements, _edeaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_fbdda := NewEG_ContentBlockContent()
				_dece := NewEG_RunLevelElts()
				_fffeb := NewEG_RangeMarkupElements()
				_fffeb.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _cbccgb := d.DecodeElement(_fffeb.CustomXmlDelRangeStart, &_gggfac); _cbccgb != nil {
					return _cbccgb
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _fbdda)
				_fbdda.EG_RunLevelElts = append(_fbdda.EG_RunLevelElts, _dece)
				_dece.EG_RangeMarkupElements = append(_dece.EG_RangeMarkupElements, _fffeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_dbcgb := NewEG_ContentBlockContent()
				_acdba := NewEG_RunLevelElts()
				_gaffc := NewEG_RangeMarkupElements()
				_gaffc.CustomXmlDelRangeEnd = NewCT_Markup()
				if _bbagc := d.DecodeElement(_gaffc.CustomXmlDelRangeEnd, &_gggfac); _bbagc != nil {
					return _bbagc
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _dbcgb)
				_dbcgb.EG_RunLevelElts = append(_dbcgb.EG_RunLevelElts, _acdba)
				_acdba.EG_RangeMarkupElements = append(_acdba.EG_RangeMarkupElements, _gaffc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_bgbec := NewEG_ContentBlockContent()
				_gdbab := NewEG_RunLevelElts()
				_eabab := NewEG_RangeMarkupElements()
				_eabab.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _bgbgc := d.DecodeElement(_eabab.CustomXmlMoveFromRangeStart, &_gggfac); _bgbgc != nil {
					return _bgbgc
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _bgbec)
				_bgbec.EG_RunLevelElts = append(_bgbec.EG_RunLevelElts, _gdbab)
				_gdbab.EG_RangeMarkupElements = append(_gdbab.EG_RangeMarkupElements, _eabab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_befd := NewEG_ContentBlockContent()
				_daaaca := NewEG_RunLevelElts()
				_ecbaf := NewEG_RangeMarkupElements()
				_ecbaf.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _abbcda := d.DecodeElement(_ecbaf.CustomXmlMoveFromRangeEnd, &_gggfac); _abbcda != nil {
					return _abbcda
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _befd)
				_befd.EG_RunLevelElts = append(_befd.EG_RunLevelElts, _daaaca)
				_daaaca.EG_RangeMarkupElements = append(_daaaca.EG_RangeMarkupElements, _ecbaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_fedga := NewEG_ContentBlockContent()
				_dggdge := NewEG_RunLevelElts()
				_eagge := NewEG_RangeMarkupElements()
				_eagge.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _cdcfe := d.DecodeElement(_eagge.CustomXmlMoveToRangeStart, &_gggfac); _cdcfe != nil {
					return _cdcfe
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _fedga)
				_fedga.EG_RunLevelElts = append(_fedga.EG_RunLevelElts, _dggdge)
				_dggdge.EG_RangeMarkupElements = append(_dggdge.EG_RangeMarkupElements, _eagge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_egagg := NewEG_ContentBlockContent()
				_ccceab := NewEG_RunLevelElts()
				_dfacgf := NewEG_RangeMarkupElements()
				_dfacgf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _fbada := d.DecodeElement(_dfacgf.CustomXmlMoveToRangeEnd, &_gggfac); _fbada != nil {
					return _fbada
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _egagg)
				_egagg.EG_RunLevelElts = append(_egagg.EG_RunLevelElts, _ccceab)
				_ccceab.EG_RangeMarkupElements = append(_ccceab.EG_RangeMarkupElements, _dfacgf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_cgdaa := NewEG_ContentBlockContent()
				_bagae := NewEG_RunLevelElts()
				_dfcdd := NewEG_MathContent()
				_dfcdd.OMathPara = _f.NewOMathPara()
				if _ecegf := d.DecodeElement(_dfcdd.OMathPara, &_gggfac); _ecegf != nil {
					return _ecegf
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _cgdaa)
				_cgdaa.EG_RunLevelElts = append(_cgdaa.EG_RunLevelElts, _bagae)
				_bagae.EG_MathContent = append(_bagae.EG_MathContent, _dfcdd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_adeff := NewEG_ContentBlockContent()
				_aadfe := NewEG_RunLevelElts()
				_cdbff := NewEG_MathContent()
				_cdbff.OMath = _f.NewOMath()
				if _cbebce := d.DecodeElement(_cdbff.OMath, &_gggfac); _cbebce != nil {
					return _cbebce
				}
				_dbada.EG_ContentBlockContent = append(_dbada.EG_ContentBlockContent, _adeff)
				_adeff.EG_RunLevelElts = append(_adeff.EG_RunLevelElts, _aadfe)
				_aadfe.EG_MathContent = append(_aadfe.EG_MathContent, _cdbff)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TxbxContent\u0020\u0025v", _gggfac.Name)
				if _fbcgcg := d.Skip(); _fbcgcg != nil {
					return _fbcgcg
				}
			}
		case _d.EndElement:
			break _dbfcfa
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_FFCheckBox and its children
func (_bgdg *CT_FFCheckBox) Validate() error { return _bgdg.ValidateWithPath("CT_FFCheckBox") }
func (_dbbbga ST_Underline) String() string {
	switch _dbbbga {
	case 0:
		return ""
	case 1:
		return "single"
	case 2:
		return "words"
	case 3:
		return "double"
	case 4:
		return "thick"
	case 5:
		return "dotted"
	case 6:
		return "dottedHeavy"
	case 7:
		return "dash"
	case 8:
		return "dashedHeavy"
	case 9:
		return "dashLong"
	case 10:
		return "dashLongHeavy"
	case 11:
		return "dotDash"
	case 12:
		return "dashDotHeavy"
	case 13:
		return "dotDotDash"
	case 14:
		return "dashDotDotHeavy"
	case 15:
		return "wave"
	case 16:
		return "wavyHeavy"
	case 17:
		return "wavyDouble"
	case 18:
		return "none"
	}
	return ""
}

const (
	ST_RestartNumberUnset      ST_RestartNumber = 0
	ST_RestartNumberContinuous ST_RestartNumber = 1
	ST_RestartNumberEachSect   ST_RestartNumber = 2
	ST_RestartNumberEachPage   ST_RestartNumber = 3
)
const (
	ST_DocGridUnset         ST_DocGrid = 0
	ST_DocGridDefault       ST_DocGrid = 1
	ST_DocGridLines         ST_DocGrid = 2
	ST_DocGridLinesAndChars ST_DocGrid = 3
	ST_DocGridSnapToChars   ST_DocGrid = 4
)

type CT_TblPrExChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr  int64
	TblPrEx *CT_TblPrExBase
}
type Comments struct{ CT_Comments }

// ValidateWithPath validates the AC_ChoiceRun and its children, prefixing error messages with path
func (_gbgbdc *AC_ChoiceRun) ValidateWithPath(path string) error {
	if _gbgbdc.Br != nil {
		if _aeebeb := _gbgbdc.Br.ValidateWithPath(path + "\u002fBr"); _aeebeb != nil {
			return _aeebeb
		}
	}
	if _gbgbdc.T != nil {
		if _eeegb := _gbgbdc.T.ValidateWithPath(path + "\u002fT"); _eeegb != nil {
			return _eeegb
		}
	}
	if _gbgbdc.ContentPart != nil {
		if _dgddf := _gbgbdc.ContentPart.ValidateWithPath(path + "\u002fContentPart"); _dgddf != nil {
			return _dgddf
		}
	}
	if _gbgbdc.DelText != nil {
		if _deacc := _gbgbdc.DelText.ValidateWithPath(path + "\u002fDelText"); _deacc != nil {
			return _deacc
		}
	}
	if _gbgbdc.InstrText != nil {
		if _bgfaa := _gbgbdc.InstrText.ValidateWithPath(path + "\u002fInstrText"); _bgfaa != nil {
			return _bgfaa
		}
	}
	if _gbgbdc.DelInstrText != nil {
		if _dgfecb := _gbgbdc.DelInstrText.ValidateWithPath(path + "\u002fDelInstrText"); _dgfecb != nil {
			return _dgfecb
		}
	}
	if _gbgbdc.NoBreakHyphen != nil {
		if _gbefcf := _gbgbdc.NoBreakHyphen.ValidateWithPath(path + "\u002fNoBreakHyphen"); _gbefcf != nil {
			return _gbefcf
		}
	}
	if _gbgbdc.SoftHyphen != nil {
		if _befda := _gbgbdc.SoftHyphen.ValidateWithPath(path + "/SoftHyphen"); _befda != nil {
			return _befda
		}
	}
	if _gbgbdc.DayShort != nil {
		if _ebffd := _gbgbdc.DayShort.ValidateWithPath(path + "\u002fDayShort"); _ebffd != nil {
			return _ebffd
		}
	}
	if _gbgbdc.MonthShort != nil {
		if _aacfg := _gbgbdc.MonthShort.ValidateWithPath(path + "/MonthShort"); _aacfg != nil {
			return _aacfg
		}
	}
	if _gbgbdc.YearShort != nil {
		if _ffedb := _gbgbdc.YearShort.ValidateWithPath(path + "\u002fYearShort"); _ffedb != nil {
			return _ffedb
		}
	}
	if _gbgbdc.DayLong != nil {
		if _cgfgf := _gbgbdc.DayLong.ValidateWithPath(path + "\u002fDayLong"); _cgfgf != nil {
			return _cgfgf
		}
	}
	if _gbgbdc.MonthLong != nil {
		if _dcfff := _gbgbdc.MonthLong.ValidateWithPath(path + "\u002fMonthLong"); _dcfff != nil {
			return _dcfff
		}
	}
	if _gbgbdc.YearLong != nil {
		if _cagad := _gbgbdc.YearLong.ValidateWithPath(path + "\u002fYearLong"); _cagad != nil {
			return _cagad
		}
	}
	if _gbgbdc.AnnotationRef != nil {
		if _fagefa := _gbgbdc.AnnotationRef.ValidateWithPath(path + "\u002fAnnotationRef"); _fagefa != nil {
			return _fagefa
		}
	}
	if _gbgbdc.FootnoteRef != nil {
		if _feegc := _gbgbdc.FootnoteRef.ValidateWithPath(path + "\u002fFootnoteRef"); _feegc != nil {
			return _feegc
		}
	}
	if _gbgbdc.EndnoteRef != nil {
		if _cbfbef := _gbgbdc.EndnoteRef.ValidateWithPath(path + "/EndnoteRef"); _cbfbef != nil {
			return _cbfbef
		}
	}
	if _gbgbdc.Separator != nil {
		if _babdbf := _gbgbdc.Separator.ValidateWithPath(path + "\u002fSeparator"); _babdbf != nil {
			return _babdbf
		}
	}
	if _gbgbdc.ContinuationSeparator != nil {
		if _eadfc := _gbgbdc.ContinuationSeparator.ValidateWithPath(path + "\u002fContinuationSeparator"); _eadfc != nil {
			return _eadfc
		}
	}
	if _gbgbdc.Sym != nil {
		if _gbcffa := _gbgbdc.Sym.ValidateWithPath(path + "\u002fSym"); _gbcffa != nil {
			return _gbcffa
		}
	}
	if _gbgbdc.PgNum != nil {
		if _bccdcf := _gbgbdc.PgNum.ValidateWithPath(path + "\u002fPgNum"); _bccdcf != nil {
			return _bccdcf
		}
	}
	if _gbgbdc.Cr != nil {
		if _bdbfb := _gbgbdc.Cr.ValidateWithPath(path + "\u002fCr"); _bdbfb != nil {
			return _bdbfb
		}
	}
	if _gbgbdc.Tab != nil {
		if _ageef := _gbgbdc.Tab.ValidateWithPath(path + "\u002fTab"); _ageef != nil {
			return _ageef
		}
	}
	if _gbgbdc.Object != nil {
		if _ggcdaa := _gbgbdc.Object.ValidateWithPath(path + "\u002fObject"); _ggcdaa != nil {
			return _ggcdaa
		}
	}
	if _gbgbdc.Pict != nil {
		if _adedgb := _gbgbdc.Pict.ValidateWithPath(path + "\u002fPict"); _adedgb != nil {
			return _adedgb
		}
	}
	if _gbgbdc.FldChar != nil {
		if _gdedgb := _gbgbdc.FldChar.ValidateWithPath(path + "\u002fFldChar"); _gdedgb != nil {
			return _gdedgb
		}
	}
	if _gbgbdc.Ruby != nil {
		if _fbdbb := _gbgbdc.Ruby.ValidateWithPath(path + "\u002fRuby"); _fbdbb != nil {
			return _fbdbb
		}
	}
	if _gbgbdc.FootnoteReference != nil {
		if _gecgc := _gbgbdc.FootnoteReference.ValidateWithPath(path + "\u002fFootnoteReference"); _gecgc != nil {
			return _gecgc
		}
	}
	if _gbgbdc.EndnoteReference != nil {
		if _beada := _gbgbdc.EndnoteReference.ValidateWithPath(path + "\u002fEndnoteReference"); _beada != nil {
			return _beada
		}
	}
	if _gbgbdc.CommentReference != nil {
		if _efgga := _gbgbdc.CommentReference.ValidateWithPath(path + "\u002fCommentReference"); _efgga != nil {
			return _efgga
		}
	}
	if _gbgbdc.Drawing != nil {
		if _dgcedc := _gbgbdc.Drawing.ValidateWithPath(path + "\u002fDrawing"); _dgcedc != nil {
			return _dgcedc
		}
	}
	if _gbgbdc.Ptab != nil {
		if _ddede := _gbgbdc.Ptab.ValidateWithPath(path + "\u002fPtab"); _ddede != nil {
			return _ddede
		}
	}
	if _gbgbdc.LastRenderedPageBreak != nil {
		if _adagdf := _gbgbdc.LastRenderedPageBreak.ValidateWithPath(path + "\u002fLastRenderedPageBreak"); _adagdf != nil {
			return _adagdf
		}
	}
	return nil
}
func NewCT_LsdException() *CT_LsdException { _ebcb := &CT_LsdException{}; return _ebcb }
func (_fbdaf *CT_StyleSort) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dbggc, _cabab := _fbdaf.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _cabab != nil {
		return _cabab
	}
	start.Attr = append(start.Attr, _dbggc)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SectPrBase and its children, prefixing error messages with path
func (_ggbfe *CT_SectPrBase) ValidateWithPath(path string) error {
	if _ggbfe.FootnotePr != nil {
		if _ccdgf := _ggbfe.FootnotePr.ValidateWithPath(path + "/FootnotePr"); _ccdgf != nil {
			return _ccdgf
		}
	}
	if _ggbfe.EndnotePr != nil {
		if _dccca := _ggbfe.EndnotePr.ValidateWithPath(path + "\u002fEndnotePr"); _dccca != nil {
			return _dccca
		}
	}
	if _ggbfe.Type != nil {
		if _cbdege := _ggbfe.Type.ValidateWithPath(path + "\u002fType"); _cbdege != nil {
			return _cbdege
		}
	}
	if _ggbfe.PgSz != nil {
		if _cffdfc := _ggbfe.PgSz.ValidateWithPath(path + "\u002fPgSz"); _cffdfc != nil {
			return _cffdfc
		}
	}
	if _ggbfe.PgMar != nil {
		if _ebbbga := _ggbfe.PgMar.ValidateWithPath(path + "\u002fPgMar"); _ebbbga != nil {
			return _ebbbga
		}
	}
	if _ggbfe.PaperSrc != nil {
		if _gdcbef := _ggbfe.PaperSrc.ValidateWithPath(path + "\u002fPaperSrc"); _gdcbef != nil {
			return _gdcbef
		}
	}
	if _ggbfe.PgBorders != nil {
		if _agcbcf := _ggbfe.PgBorders.ValidateWithPath(path + "\u002fPgBorders"); _agcbcf != nil {
			return _agcbcf
		}
	}
	if _ggbfe.LnNumType != nil {
		if _egead := _ggbfe.LnNumType.ValidateWithPath(path + "\u002fLnNumType"); _egead != nil {
			return _egead
		}
	}
	if _ggbfe.PgNumType != nil {
		if _bgfaf := _ggbfe.PgNumType.ValidateWithPath(path + "\u002fPgNumType"); _bgfaf != nil {
			return _bgfaf
		}
	}
	if _ggbfe.Cols != nil {
		if _eaaec := _ggbfe.Cols.ValidateWithPath(path + "\u002fCols"); _eaaec != nil {
			return _eaaec
		}
	}
	if _ggbfe.FormProt != nil {
		if _ddcfb := _ggbfe.FormProt.ValidateWithPath(path + "\u002fFormProt"); _ddcfb != nil {
			return _ddcfb
		}
	}
	if _ggbfe.VAlign != nil {
		if _fdcab := _ggbfe.VAlign.ValidateWithPath(path + "\u002fVAlign"); _fdcab != nil {
			return _fdcab
		}
	}
	if _ggbfe.NoEndnote != nil {
		if _gddfdf := _ggbfe.NoEndnote.ValidateWithPath(path + "\u002fNoEndnote"); _gddfdf != nil {
			return _gddfdf
		}
	}
	if _ggbfe.TitlePg != nil {
		if _dbcfcea := _ggbfe.TitlePg.ValidateWithPath(path + "\u002fTitlePg"); _dbcfcea != nil {
			return _dbcfcea
		}
	}
	if _ggbfe.TextDirection != nil {
		if _cbaba := _ggbfe.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _cbaba != nil {
			return _cbaba
		}
	}
	if _ggbfe.Bidi != nil {
		if _ebfce := _ggbfe.Bidi.ValidateWithPath(path + "\u002fBidi"); _ebfce != nil {
			return _ebfce
		}
	}
	if _ggbfe.RtlGutter != nil {
		if _dccgf := _ggbfe.RtlGutter.ValidateWithPath(path + "\u002fRtlGutter"); _dccgf != nil {
			return _dccgf
		}
	}
	if _ggbfe.DocGrid != nil {
		if _agbc := _ggbfe.DocGrid.ValidateWithPath(path + "\u002fDocGrid"); _agbc != nil {
			return _agbc
		}
	}
	if _ggbfe.PrinterSettings != nil {
		if _fadda := _ggbfe.PrinterSettings.ValidateWithPath(path + "\u002fPrinterSettings"); _fadda != nil {
			return _fadda
		}
	}
	return nil
}

// ValidateWithPath validates the CT_FontFamily and its children, prefixing error messages with path
func (_ebgdc *CT_FontFamily) ValidateWithPath(path string) error {
	if _ebgdc.ValAttr == ST_FontFamilyUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fcfee := _ebgdc.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fcfee != nil {
		return _fcfee
	}
	return nil
}

// ValidateWithPath validates the CT_TrackChange and its children, prefixing error messages with path
func (_gegff *CT_TrackChange) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_Jc and its children, prefixing error messages with path
func (_dbggab *CT_Jc) ValidateWithPath(path string) error {
	if _dbggab.ValAttr == ST_JcUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cagee := _dbggab.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cagee != nil {
		return _cagee
	}
	return nil
}
func (_gfdac *CT_PixelsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _gfdac.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ColorSchemeMapping and its children, prefixing error messages with path
func (_bafb *CT_ColorSchemeMapping) ValidateWithPath(path string) error {
	if _ccabf := _bafb.Bg1Attr.ValidateWithPath(path + "\u002fBg1Attr"); _ccabf != nil {
		return _ccabf
	}
	if _acabd := _bafb.T1Attr.ValidateWithPath(path + "\u002fT1Attr"); _acabd != nil {
		return _acabd
	}
	if _cgff := _bafb.Bg2Attr.ValidateWithPath(path + "\u002fBg2Attr"); _cgff != nil {
		return _cgff
	}
	if _bgc := _bafb.T2Attr.ValidateWithPath(path + "\u002fT2Attr"); _bgc != nil {
		return _bgc
	}
	if _adbdd := _bafb.Accent1Attr.ValidateWithPath(path + "\u002fAccent1Attr"); _adbdd != nil {
		return _adbdd
	}
	if _dabf := _bafb.Accent2Attr.ValidateWithPath(path + "\u002fAccent2Attr"); _dabf != nil {
		return _dabf
	}
	if _gaeda := _bafb.Accent3Attr.ValidateWithPath(path + "\u002fAccent3Attr"); _gaeda != nil {
		return _gaeda
	}
	if _cgc := _bafb.Accent4Attr.ValidateWithPath(path + "\u002fAccent4Attr"); _cgc != nil {
		return _cgc
	}
	if _ccae := _bafb.Accent5Attr.ValidateWithPath(path + "\u002fAccent5Attr"); _ccae != nil {
		return _ccae
	}
	if _fgdd := _bafb.Accent6Attr.ValidateWithPath(path + "\u002fAccent6Attr"); _fgdd != nil {
		return _fgdd
	}
	if _dafc := _bafb.HyperlinkAttr.ValidateWithPath(path + "\u002fHyperlinkAttr"); _dafc != nil {
		return _dafc
	}
	if _bbgg := _bafb.FollowedHyperlinkAttr.ValidateWithPath(path + "\u002fFollowedHyperlinkAttr"); _bbgg != nil {
		return _bbgg
	}
	return nil
}
func NewCT_SdtPrChoice() *CT_SdtPrChoice { _cefcbb := &CT_SdtPrChoice{}; return _cefcbb }
func (_bdeage *CT_Perm) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _bdeage.IdAttr)})
	if _bdeage.DisplacedByCustomXmlAttr != ST_DisplacedByCustomXmlUnset {
		_ffcgbe, _gdaeea := _bdeage.DisplacedByCustomXmlAttr.MarshalXMLAttr(_d.Name{Local: "w:displacedByCustomXml"})
		if _gdaeea != nil {
			return _gdaeea
		}
		start.Attr = append(start.Attr, _ffcgbe)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fdafc *CT_NumLvl) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _decgf := range start.Attr {
		if _decgf.Name.Local == "ilvl" {
			_ebdef, _dfgda := _dd.ParseInt(_decgf.Value, 10, 64)
			if _dfgda != nil {
				return _dfgda
			}
			_fdafc.IlvlAttr = _ebdef
			continue
		}
	}
_ebgc:
	for {
		_cdbbb, _gbgfa := d.Token()
		if _gbgfa != nil {
			return _gbgfa
		}
		switch _ceabb := _cdbbb.(type) {
		case _d.StartElement:
			switch _ceabb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "startOverride"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "startOverride"}:
				_fdafc.StartOverride = NewCT_DecimalNumber()
				if _bcff := d.DecodeElement(_fdafc.StartOverride, &_ceabb); _bcff != nil {
					return _bcff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lvl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lvl"}:
				_fdafc.Lvl = NewCT_Lvl()
				if _cgbfe := d.DecodeElement(_fdafc.Lvl, &_ceabb); _cgbfe != nil {
					return _cgbfe
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_NumLvl \u0025v", _ceabb.Name)
				if _cfefc := d.Skip(); _cfefc != nil {
					return _cfefc
				}
			}
		case _d.EndElement:
			break _ebgc
		case _d.CharData:
		}
	}
	return nil
}
func (_abefg *CT_ProofErr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dedda, _abca := _abefg.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
	if _abca != nil {
		return _abca
	}
	start.Attr = append(start.Attr, _dedda)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Guid and its children, prefixing error messages with path
func (_defef *CT_Guid) ValidateWithPath(path string) error {
	if _defef.ValAttr != nil {
		if !_g.ST_GuidPatternRe.MatchString(*_defef.ValAttr) {
			return _b.Errorf("\u0025s\u002fm\u002eValAttr\u0020must\u0020match\u0020'\u0025s\u0027\u0020\u0028have\u0020\u0025v\u0029", path, _g.ST_GuidPatternRe, *_defef.ValAttr)
		}
	}
	return nil
}
func NewCT_JcTable() *CT_JcTable {
	_bcaec := &CT_JcTable{}
	_bcaec.ValAttr = ST_JcTable(1)
	return _bcaec
}

type CT_SdtEndPr struct {

	// Structured Document Tag End Character Run Properties
	RPr []*CT_RPr
}

func (_cgadc *CT_JcTable) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_geeeg, _agcbcg := _cgadc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _agcbcg != nil {
		return _agcbcg
	}
	start.Attr = append(start.Attr, _geeeg)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_SdtPrChoice and its children
func (_cfcfd *CT_SdtPrChoice) Validate() error { return _cfcfd.ValidateWithPath("CT_SdtPrChoice") }

type CT_Base64Binary struct{ ValAttr string }

func (_ababbc *Document) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ababbc.CT_Document = *NewCT_Document()
	for _, _egcaab := range start.Attr {
		if _egcaab.Name.Local == "conformance" {
			_ababbc.ConformanceAttr.UnmarshalXMLAttr(_egcaab)
			continue
		}
	}
_efabe:
	for {
		_adecaf, _daaeg := d.Token()
		if _daaeg != nil {
			return _daaeg
		}
		switch _aagbd := _adecaf.(type) {
		case _d.StartElement:
			switch _aagbd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "background"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "background"}:
				_ababbc.Background = NewCT_Background()
				if _dcffdb := d.DecodeElement(_ababbc.Background, &_aagbd); _dcffdb != nil {
					return _dcffdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "body"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "body"}:
				_ababbc.Body = NewCT_Body()
				if _gfbegc := d.DecodeElement(_ababbc.Body, &_aagbd); _gfbegc != nil {
					return _gfbegc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020Document\u0020\u0025v", _aagbd.Name)
				if _agefea := d.Skip(); _agefea != nil {
					return _agefea
				}
			}
		case _d.EndElement:
			break _efabe
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_MoveBookmark and its children, prefixing error messages with path
func (_geafa *CT_MoveBookmark) ValidateWithPath(path string) error {
	if _bcbbd := _geafa.DisplacedByCustomXmlAttr.ValidateWithPath(path + "\u002fDisplacedByCustomXmlAttr"); _bcbbd != nil {
		return _bcbbd
	}
	return nil
}

type CT_FFHelpText struct {

	// Help Text Type
	TypeAttr ST_InfoTextType

	// Help Text Value
	ValAttr *string
}

func (_ddecda *WdCT_WordprocessingShapeChoice1) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ddecda.Txbx != nil {
		_adafe := _d.StartElement{Name: _d.Name{Local: "wp:txbx"}}
		e.EncodeElement(_ddecda.Txbx, _adafe)
	}
	if _ddecda.LinkedTxbx != nil {
		_fdcgcd := _d.StartElement{Name: _d.Name{Local: "wp:linkedTxbx"}}
		e.EncodeElement(_ddecda.LinkedTxbx, _fdcgcd)
	}
	return nil
}
func (_afeedd *Recipients) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afeedd.CT_Recipients = *NewCT_Recipients()
_edfcfd:
	for {
		_affde, _faaae := d.Token()
		if _faaae != nil {
			return _faaae
		}
		switch _deafc := _affde.(type) {
		case _d.StartElement:
			switch _deafc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "recipientData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "recipientData"}:
				_fcbag := NewCT_RecipientData()
				if _fbfgge := d.DecodeElement(_fcbag, &_deafc); _fbfgge != nil {
					return _fbfgge
				}
				_afeedd.RecipientData = append(_afeedd.RecipientData, _fcbag)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020Recipients\u0020\u0025v", _deafc.Name)
				if _ggcfad := d.Skip(); _ggcfad != nil {
					return _ggcfad
				}
			}
		case _d.EndElement:
			break _edfcfd
		case _d.CharData:
		}
	}
	return nil
}
func NewEG_RPrBase() *EG_RPrBase                    { _agcee := &EG_RPrBase{}; return _agcee }
func (_cffgfb ST_ObjectUpdateMode) Validate() error { return _cffgfb.ValidateWithPath("") }
func (_dbedbe *ST_WmlColorSchemeIndex) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dbedbe = 0
	case "dark1":
		*_dbedbe = 1
	case "light1":
		*_dbedbe = 2
	case "dark2":
		*_dbedbe = 3
	case "light2":
		*_dbedbe = 4
	case "accent1":
		*_dbedbe = 5
	case "accent2":
		*_dbedbe = 6
	case "accent3":
		*_dbedbe = 7
	case "accent4":
		*_dbedbe = 8
	case "accent5":
		*_dbedbe = 9
	case "accent6":
		*_dbedbe = 10
	case "hyperlink":
		*_dbedbe = 11
	case "followedHyperlink":
		*_dbedbe = 12
	}
	return nil
}

// Validate validates the CT_DocRsids and its children
func (_egfcc *CT_DocRsids) Validate() error { return _egfcc.ValidateWithPath("CT_DocRsids") }

type ST_Hint byte

func NewWdCT_WordprocessingGroup() *WdCT_WordprocessingGroup {
	_adagce := &WdCT_WordprocessingGroup{}
	_adagce.CNvGrpSpPr = _eb.NewCT_NonVisualGroupDrawingShapeProps()
	_adagce.GrpSpPr = _eb.NewCT_GroupShapeProperties()
	return _adagce
}
func (_adgccg ST_Jc) String() string {
	switch _adgccg {
	case 0:
		return ""
	case 1:
		return "start"
	case 2:
		return "center"
	case 3:
		return "end"
	case 4:
		return "both"
	case 5:
		return "mediumKashida"
	case 6:
		return "distribute"
	case 7:
		return "numTab"
	case 8:
		return "highKashida"
	case 9:
		return "lowKashida"
	case 10:
		return "thaiDistribute"
	case 11:
		return "left"
	case 12:
		return "right"
	}
	return ""
}
func (_cgbbeg *ST_MailMergeDocType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cgbbeg = 0
	case "catalog":
		*_cgbbeg = 1
	case "envelopes":
		*_cgbbeg = 2
	case "mailingLabels":
		*_cgbbeg = 3
	case "formLetters":
		*_cgbbeg = 4
	case "email":
		*_cgbbeg = 5
	case "fax":
		*_cgbbeg = 6
	}
	return nil
}
func (_cdbc *CT_DocumentBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cdbc.Background != nil {
		_cfge := _d.StartElement{Name: _d.Name{Local: "w:background"}}
		e.EncodeElement(_cdbc.Background, _cfge)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_P() *CT_P { _febdga := &CT_P{}; return _febdga }

const (
	ST_HdrFtrUnset   ST_HdrFtr = 0
	ST_HdrFtrEven    ST_HdrFtr = 1
	ST_HdrFtrDefault ST_HdrFtr = 2
	ST_HdrFtrFirst   ST_HdrFtr = 3
)

func (_aafbc *EG_CellMarkupElements) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aafbc.CellIns != nil {
		_bdaae := _d.StartElement{Name: _d.Name{Local: "w:cellIns"}}
		e.EncodeElement(_aafbc.CellIns, _bdaae)
	}
	if _aafbc.CellDel != nil {
		_eabfae := _d.StartElement{Name: _d.Name{Local: "w:cellDel"}}
		e.EncodeElement(_aafbc.CellDel, _eabfae)
	}
	if _aafbc.CellMerge != nil {
		_cebdaf := _d.StartElement{Name: _d.Name{Local: "w:cellMerge"}}
		e.EncodeElement(_aafbc.CellMerge, _cebdaf)
	}
	return nil
}
func (_fcbed *CT_DecimalNumberOrPrecent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _acad := range start.Attr {
		if _acad.Name.Local == "val" {
			_baaea, _gafaf := ParseUnionST_DecimalNumberOrPercent(_acad.Value)
			if _gafaf != nil {
				return _gafaf
			}
			_fcbed.ValAttr = _baaea
			continue
		}
	}
	for {
		_bafabb, _cdfd := d.Token()
		if _cdfd != nil {
			return _b.Errorf("parsing CT_DecimalNumberOrPrecent:\u0020\u0025s", _cdfd)
		}
		if _abag, _gegfg := _bafabb.(_d.EndElement); _gegfg && _abag.Name == start.Name {
			break
		}
	}
	return nil
}
func NewWdInline() *WdInline {
	_afaee := &WdInline{}
	_afaee.WdCT_Inline = *NewWdCT_Inline()
	return _afaee
}
func (_cdfgfa *CT_TrPrChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cdfgfa.TrPr = NewCT_TrPrBase()
	for _, _gacdc := range start.Attr {
		if _gacdc.Name.Local == "author" {
			_ffcea, _fcebf := _gacdc.Value, error(nil)
			if _fcebf != nil {
				return _fcebf
			}
			_cdfgfa.AuthorAttr = _ffcea
			continue
		}
		if _gacdc.Name.Local == "date" {
			_bbgff, _dbacb := ParseStdlibTime(_gacdc.Value)
			if _dbacb != nil {
				return _dbacb
			}
			_cdfgfa.DateAttr = &_bbgff
			continue
		}
		if _gacdc.Name.Local == "id" {
			_dbabb, _ecgfc := _dd.ParseInt(_gacdc.Value, 10, 64)
			if _ecgfc != nil {
				return _ecgfc
			}
			_cdfgfa.IdAttr = _dbabb
			continue
		}
	}
_afffbd:
	for {
		_fdbec, _fbabe := d.Token()
		if _fbabe != nil {
			return _fbabe
		}
		switch _cdcebf := _fdbec.(type) {
		case _d.StartElement:
			switch _cdcebf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trPr"}:
				if _fbggcg := d.DecodeElement(_cdfgfa.TrPr, &_cdcebf); _fbggcg != nil {
					return _fbggcg
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_TrPrChange \u0025v", _cdcebf.Name)
				if _egdfeb := d.Skip(); _egdfeb != nil {
					return _egdfeb
				}
			}
		case _d.EndElement:
			break _afffbd
		case _d.CharData:
		}
	}
	return nil
}
func (_bcbga *CT_Placeholder) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bcbga.DocPart = NewCT_String()
_cccfgb:
	for {
		_fddde, _ccbbg := d.Token()
		if _ccbbg != nil {
			return _ccbbg
		}
		switch _fbcfe := _fddde.(type) {
		case _d.StartElement:
			switch _fbcfe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPart"}:
				if _gdfacb := d.DecodeElement(_bcbga.DocPart, &_fbcfe); _gdfacb != nil {
					return _gdfacb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Placeholder\u0020\u0025v", _fbcfe.Name)
				if _gcefc := d.Skip(); _gcefc != nil {
					return _gcefc
				}
			}
		case _d.EndElement:
			break _cccfgb
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the Footnotes and its children
func (_eaefe *Footnotes) Validate() error { return _eaefe.ValidateWithPath("Footnotes") }
func (_ggdbe *CT_LvlLegacy) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ggdbe.LegacyAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:legacy"}, Value: _b.Sprintf("\u0025v", *_ggdbe.LegacyAttr)})
	}
	if _ggdbe.LegacySpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:legacySpace"}, Value: _b.Sprintf("\u0025v", *_ggdbe.LegacySpaceAttr)})
	}
	if _ggdbe.LegacyIndentAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:legacyIndent"}, Value: _b.Sprintf("\u0025v", *_ggdbe.LegacyIndentAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fbfbfg *CT_TblLayoutType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dcaad := range start.Attr {
		if _dcaad.Name.Local == "type" {
			_fbfbfg.TypeAttr.UnmarshalXMLAttr(_dcaad)
			continue
		}
	}
	for {
		_gfcec, _dbfdg := d.Token()
		if _dbfdg != nil {
			return _b.Errorf("parsing\u0020CT_TblLayoutType: \u0025s", _dbfdg)
		}
		if _adabc, _dgbgd := _gfcec.(_d.EndElement); _dgbgd && _adabc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_HMerge and its children, prefixing error messages with path
func (_bcefc *CT_HMerge) ValidateWithPath(path string) error {
	if _ffadc := _bcefc.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _ffadc != nil {
		return _ffadc
	}
	return nil
}

type CT_SmartTagType struct {

	// Smart Tag Namespace
	NamespaceuriAttr *string

	// Smart Tag Name
	NameAttr *string

	// Smart Tag Supplementary URL
	UrlAttr *string
}

func (_fc *CT_AltChunk) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fcd := range start.Attr {
		if _fcd.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _fcd.Name.Local == "id" || _fcd.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _fcd.Name.Local == "id" {
			_caf, _eeg := _fcd.Value, error(nil)
			if _eeg != nil {
				return _eeg
			}
			_fc.IdAttr = &_caf
			continue
		}
	}
_cgb:
	for {
		_gccc, _bda := d.Token()
		if _bda != nil {
			return _bda
		}
		switch _gff := _gccc.(type) {
		case _d.StartElement:
			switch _gff.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunkPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunkPr"}:
				_fc.AltChunkPr = NewCT_AltChunkPr()
				if _babb := d.DecodeElement(_fc.AltChunkPr, &_gff); _babb != nil {
					return _babb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_AltChunk\u0020\u0025v", _gff.Name)
				if _gae := d.Skip(); _gae != nil {
					return _gae
				}
			}
		case _d.EndElement:
			break _cgb
		case _d.CharData:
		}
	}
	return nil
}
func (_fgfc *CT_CharacterSpacing) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgfc.ValAttr = ST_CharacterSpacing(1)
	for _, _edda := range start.Attr {
		if _edda.Name.Local == "val" {
			_fgfc.ValAttr.UnmarshalXMLAttr(_edda)
			continue
		}
	}
	for {
		_cdbda, _eefe := d.Token()
		if _eefe != nil {
			return _b.Errorf("parsing\u0020CT_CharacterSpacing:\u0020\u0025s", _eefe)
		}
		if _efcf, _eagcc := _cdbda.(_d.EndElement); _eagcc && _efcf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bdecb *CT_FFStatusText) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bdecb.TypeAttr != ST_InfoTextTypeUnset {
		_daced, _bgacd := _bdecb.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _bgacd != nil {
			return _bgacd
		}
		start.Attr = append(start.Attr, _daced)
	}
	if _bdecb.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_bdecb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gbebf *ST_MailMergeSourceType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gbebf = 0
	case "database":
		*_gbebf = 1
	case "addressBook":
		*_gbebf = 2
	case "document1":
		*_gbebf = 3
	case "document2":
		*_gbebf = 4
	case "text":
		*_gbebf = 5
	case "email":
		*_gbebf = 6
	case "native":
		*_gbebf = 7
	case "legacy":
		*_gbebf = 8
	case "master":
		*_gbebf = 9
	}
	return nil
}
func (_dgffc *WdEG_WrapTypeChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dgffc.WrapNone != nil {
		_dcebdgg := _d.StartElement{Name: _d.Name{Local: "wp:wrapNone"}}
		e.EncodeElement(_dgffc.WrapNone, _dcebdgg)
	}
	if _dgffc.WrapSquare != nil {
		_dbgddb := _d.StartElement{Name: _d.Name{Local: "wp:wrapSquare"}}
		e.EncodeElement(_dgffc.WrapSquare, _dbgddb)
	}
	if _dgffc.WrapTight != nil {
		_egfdf := _d.StartElement{Name: _d.Name{Local: "wp:wrapTight"}}
		e.EncodeElement(_dgffc.WrapTight, _egfdf)
	}
	if _dgffc.WrapThrough != nil {
		_daeeaa := _d.StartElement{Name: _d.Name{Local: "wp:wrapThrough"}}
		e.EncodeElement(_dgffc.WrapThrough, _daeeaa)
	}
	if _dgffc.WrapTopAndBottom != nil {
		_afcgg := _d.StartElement{Name: _d.Name{Local: "wp:wrapTopAndBottom"}}
		e.EncodeElement(_dgffc.WrapTopAndBottom, _afcgg)
	}
	return nil
}

// ValidateWithPath validates the WdCT_PosVChoice and its children, prefixing error messages with path
func (_cadfg *WdCT_PosVChoice) ValidateWithPath(path string) error {
	if _gcfacc := _cadfg.Align.ValidateWithPath(path + "\u002fAlign"); _gcfacc != nil {
		return _gcfacc
	}
	return nil
}

// ValidateWithPath validates the CT_Color and its children, prefixing error messages with path
func (_fadg *CT_Color) ValidateWithPath(path string) error {
	if _dcad := _fadg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _dcad != nil {
		return _dcad
	}
	if _bacd := _fadg.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _bacd != nil {
		return _bacd
	}
	return nil
}
func (_adfa *CT_Comments) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _adfa.Comment != nil {
		_cfaga := _d.StartElement{Name: _d.Name{Local: "w:comment"}}
		for _, _aaeb := range _adfa.Comment {
			e.EncodeElement(_aaeb, _cfaga)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_LongHexNumber struct {

	// Long Hexadecimal Number Value
	ValAttr string
}

func (_gdecbd *ST_View) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bgbcb, _cdaada := d.Token()
	if _cdaada != nil {
		return _cdaada
	}
	if _aaccgg, _decceb := _bgbcb.(_d.EndElement); _decceb && _aaccgg.Name == start.Name {
		*_gdecbd = 1
		return nil
	}
	if _eedbe, _fgege := _bgbcb.(_d.CharData); !_fgege {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bgbcb)
	} else {
		switch string(_eedbe) {
		case "":
			*_gdecbd = 0
		case "none":
			*_gdecbd = 1
		case "print":
			*_gdecbd = 2
		case "outline":
			*_gdecbd = 3
		case "masterPages":
			*_gdecbd = 4
		case "normal":
			*_gdecbd = 5
		case "web":
			*_gdecbd = 6
		}
	}
	_bgbcb, _cdaada = d.Token()
	if _cdaada != nil {
		return _cdaada
	}
	if _dfadc, _fdaab := _bgbcb.(_d.EndElement); _fdaab && _dfadc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bgbcb)
}

type WdCT_WordprocessingShapeChoice struct {
	CNvSpPr *_eb.CT_NonVisualDrawingShapeProps
	CNvCnPr *_eb.CT_NonVisualConnectorProperties
}

// ValidateWithPath validates the EG_FtnEdnNumProps and its children, prefixing error messages with path
func (_gdeed *EG_FtnEdnNumProps) ValidateWithPath(path string) error {
	if _gdeed.NumStart != nil {
		if _cedcgc := _gdeed.NumStart.ValidateWithPath(path + "\u002fNumStart"); _cedcgc != nil {
			return _cedcgc
		}
	}
	if _gdeed.NumRestart != nil {
		if _ebgcd := _gdeed.NumRestart.ValidateWithPath(path + "/NumRestart"); _ebgcd != nil {
			return _ebgcd
		}
	}
	return nil
}
func (_dffbf *CT_CustomXmlRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dffbf.UriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uri"}, Value: _b.Sprintf("\u0025v", *_dffbf.UriAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:element"}, Value: _b.Sprintf("\u0025v", _dffbf.ElementAttr)})
	e.EncodeToken(start)
	if _dffbf.CustomXmlPr != nil {
		_dcgg := _d.StartElement{Name: _d.Name{Local: "w:customXmlPr"}}
		e.EncodeElement(_dffbf.CustomXmlPr, _dcgg)
	}
	if _dffbf.EG_PContent != nil {
		for _, _fgdga := range _dffbf.EG_PContent {
			_fgdga.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dg *AG_Password) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dg.AlgorithmNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algorithmName"}, Value: _b.Sprintf("\u0025v", *_dg.AlgorithmNameAttr)})
	}
	if _dg.HashValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hashValue"}, Value: _b.Sprintf("\u0025v", *_dg.HashValueAttr)})
	}
	if _dg.SaltValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:saltValue"}, Value: _b.Sprintf("\u0025v", *_dg.SaltValueAttr)})
	}
	if _dg.SpinCountAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:spinCount"}, Value: _b.Sprintf("\u0025v", *_dg.SpinCountAttr)})
	}
	return nil
}
func (_aabca *CT_TcPrChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aabca.TcPr = NewCT_TcPrInner()
	for _, _bccafb := range start.Attr {
		if _bccafb.Name.Local == "author" {
			_ggcbda, _gaegc := _bccafb.Value, error(nil)
			if _gaegc != nil {
				return _gaegc
			}
			_aabca.AuthorAttr = _ggcbda
			continue
		}
		if _bccafb.Name.Local == "date" {
			_becaf, _cdfce := ParseStdlibTime(_bccafb.Value)
			if _cdfce != nil {
				return _cdfce
			}
			_aabca.DateAttr = &_becaf
			continue
		}
		if _bccafb.Name.Local == "id" {
			_dddfc, _adeec := _dd.ParseInt(_bccafb.Value, 10, 64)
			if _adeec != nil {
				return _adeec
			}
			_aabca.IdAttr = _dddfc
			continue
		}
	}
_dbffcc:
	for {
		_cgebe, _daaac := d.Token()
		if _daaac != nil {
			return _daaac
		}
		switch _gedeg := _cgebe.(type) {
		case _d.StartElement:
			switch _gedeg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcPr"}:
				if _dedbab := d.DecodeElement(_aabca.TcPr, &_gedeg); _dedbab != nil {
					return _dedbab
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_TcPrChange \u0025v", _gedeg.Name)
				if _fgdabd := d.Skip(); _fgdabd != nil {
					return _fgdabd
				}
			}
		case _d.EndElement:
			break _dbffcc
		case _d.CharData:
		}
	}
	return nil
}
func (_ffeaa ST_TblWidth) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cdcefa := _d.Attr{}
	_cdcefa.Name = name
	switch _ffeaa {
	case ST_TblWidthUnset:
		_cdcefa.Value = ""
	case ST_TblWidthNil:
		_cdcefa.Value = "nil"
	case ST_TblWidthPct:
		_cdcefa.Value = "pct"
	case ST_TblWidthDxa:
		_cdcefa.Value = "dxa"
	case ST_TblWidthAuto:
		_cdcefa.Value = "auto"
	}
	return _cdcefa, nil
}
func (_ffcgee *ST_HdrFtr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fccba, _acaeff := d.Token()
	if _acaeff != nil {
		return _acaeff
	}
	if _dcfde, _gfaee := _fccba.(_d.EndElement); _gfaee && _dcfde.Name == start.Name {
		*_ffcgee = 1
		return nil
	}
	if _bcfgb, _geeccb := _fccba.(_d.CharData); !_geeccb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fccba)
	} else {
		switch string(_bcfgb) {
		case "":
			*_ffcgee = 0
		case "even":
			*_ffcgee = 1
		case "default":
			*_ffcgee = 2
		case "first":
			*_ffcgee = 3
		}
	}
	_fccba, _acaeff = d.Token()
	if _acaeff != nil {
		return _acaeff
	}
	if _dcdca, _egaefe := _fccba.(_d.EndElement); _egaefe && _dcdca.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fccba)
}
func (_abffa ST_JcTable) Validate() error      { return _abffa.ValidateWithPath("") }
func NewCT_FramesetChoice() *CT_FramesetChoice { _fgeeb := &CT_FramesetChoice{}; return _fgeeb }
func (_bcded *CT_FFData) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fbccd:
	for {
		_ggfe, _fegdd := d.Token()
		if _fegdd != nil {
			return _fegdd
		}
		switch _gfgfd := _ggfe.(type) {
		case _d.StartElement:
			switch _gfgfd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "name"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "name"}:
				_gcgbg := NewCT_FFName()
				if _feae := d.DecodeElement(_gcgbg, &_gfgfd); _feae != nil {
					return _feae
				}
				_bcded.Name = append(_bcded.Name, _gcgbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "label"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "label"}:
				_feafba := NewCT_DecimalNumber()
				if _dfaea := d.DecodeElement(_feafba, &_gfgfd); _dfaea != nil {
					return _dfaea
				}
				_bcded.Label = append(_bcded.Label, _feafba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tabIndex"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tabIndex"}:
				_cccee := NewCT_UnsignedDecimalNumber()
				if _cbfbg := d.DecodeElement(_cccee, &_gfgfd); _cbfbg != nil {
					return _cbfbg
				}
				_bcded.TabIndex = append(_bcded.TabIndex, _cccee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "enabled"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "enabled"}:
				_beab := NewCT_OnOff()
				if _fbbfc := d.DecodeElement(_beab, &_gfgfd); _fbbfc != nil {
					return _fbbfc
				}
				_bcded.Enabled = append(_bcded.Enabled, _beab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "calcOnExit"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "calcOnExit"}:
				_ddcbd := NewCT_OnOff()
				if _bdcbb := d.DecodeElement(_ddcbd, &_gfgfd); _bdcbb != nil {
					return _bdcbb
				}
				_bcded.CalcOnExit = append(_bcded.CalcOnExit, _ddcbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "entryMacro"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "entryMacro"}:
				_abdbc := NewCT_MacroName()
				if _dfcaeg := d.DecodeElement(_abdbc, &_gfgfd); _dfcaeg != nil {
					return _dfcaeg
				}
				_bcded.EntryMacro = append(_bcded.EntryMacro, _abdbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "exitMacro"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "exitMacro"}:
				_agefe := NewCT_MacroName()
				if _cebge := d.DecodeElement(_agefe, &_gfgfd); _cebge != nil {
					return _cebge
				}
				_bcded.ExitMacro = append(_bcded.ExitMacro, _agefe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "helpText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "helpText"}:
				_cgdgb := NewCT_FFHelpText()
				if _cccg := d.DecodeElement(_cgdgb, &_gfgfd); _cccg != nil {
					return _cccg
				}
				_bcded.HelpText = append(_bcded.HelpText, _cgdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "statusText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "statusText"}:
				_dcfaa := NewCT_FFStatusText()
				if _dabe := d.DecodeElement(_dcfaa, &_gfgfd); _dabe != nil {
					return _dabe
				}
				_bcded.StatusText = append(_bcded.StatusText, _dcfaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "checkBox"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "checkBox"}:
				_bcded.CheckBox = NewCT_FFCheckBox()
				if _ccfdf := d.DecodeElement(_bcded.CheckBox, &_gfgfd); _ccfdf != nil {
					return _ccfdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ddList"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ddList"}:
				_bcded.DdList = NewCT_FFDDList()
				if _abfe := d.DecodeElement(_bcded.DdList, &_gfgfd); _abfe != nil {
					return _abfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textInput"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textInput"}:
				_bcded.TextInput = NewCT_FFTextInput()
				if _edebd := d.DecodeElement(_bcded.TextInput, &_gfgfd); _edebd != nil {
					return _edebd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_FFData \u0025v", _gfgfd.Name)
				if _effda := d.Skip(); _effda != nil {
					return _effda
				}
			}
		case _d.EndElement:
			break _fbccd
		case _d.CharData:
		}
	}
	return nil
}
func (_cegc *CT_Border) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_becg, _fggc := _cegc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _fggc != nil {
		return _fggc
	}
	start.Attr = append(start.Attr, _becg)
	if _cegc.ColorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:color"}, Value: _b.Sprintf("\u0025v", *_cegc.ColorAttr)})
	}
	if _cegc.ThemeColorAttr != ST_ThemeColorUnset {
		_dcc, _dfaa := _cegc.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _dfaa != nil {
			return _dfaa
		}
		start.Attr = append(start.Attr, _dcc)
	}
	if _cegc.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_cegc.ThemeTintAttr)})
	}
	if _cegc.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_cegc.ThemeShadeAttr)})
	}
	if _cegc.SzAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:sz"}, Value: _b.Sprintf("\u0025v", *_cegc.SzAttr)})
	}
	if _cegc.SpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:space"}, Value: _b.Sprintf("\u0025v", *_cegc.SpaceAttr)})
	}
	if _cegc.ShadowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:shadow"}, Value: _b.Sprintf("\u0025v", *_cegc.ShadowAttr)})
	}
	if _cegc.FrameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:frame"}, Value: _b.Sprintf("\u0025v", *_cegc.FrameAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cdcgd *CT_LineNumber) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cacea := range start.Attr {
		if _cacea.Name.Local == "countBy" {
			_beabd, _cfccf := _dd.ParseInt(_cacea.Value, 10, 64)
			if _cfccf != nil {
				return _cfccf
			}
			_cdcgd.CountByAttr = &_beabd
			continue
		}
		if _cacea.Name.Local == "start" {
			_caecd, _eafeff := _dd.ParseInt(_cacea.Value, 10, 64)
			if _eafeff != nil {
				return _eafeff
			}
			_cdcgd.StartAttr = &_caecd
			continue
		}
		if _cacea.Name.Local == "distance" {
			_gaag, _gfdgb := ParseUnionST_TwipsMeasure(_cacea.Value)
			if _gfdgb != nil {
				return _gfdgb
			}
			_cdcgd.DistanceAttr = &_gaag
			continue
		}
		if _cacea.Name.Local == "restart" {
			_cdcgd.RestartAttr.UnmarshalXMLAttr(_cacea)
			continue
		}
	}
	for {
		_gefcb, _edefd := d.Token()
		if _edefd != nil {
			return _b.Errorf("parsing\u0020CT_LineNumber:\u0020\u0025s", _edefd)
		}
		if _cacdg, _edbac := _gefcb.(_d.EndElement); _edbac && _cacdg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_FontsList() *CT_FontsList { _adgg := &CT_FontsList{}; return _adgg }
func (_dbafb *CT_Frameset) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dbafb.Sz != nil {
		_cegcb := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_dbafb.Sz, _cegcb)
	}
	if _dbafb.FramesetSplitbar != nil {
		_cbac := _d.StartElement{Name: _d.Name{Local: "w:framesetSplitbar"}}
		e.EncodeElement(_dbafb.FramesetSplitbar, _cbac)
	}
	if _dbafb.FrameLayout != nil {
		_aebfd := _d.StartElement{Name: _d.Name{Local: "w:frameLayout"}}
		e.EncodeElement(_dbafb.FrameLayout, _aebfd)
	}
	if _dbafb.Title != nil {
		_cbagf := _d.StartElement{Name: _d.Name{Local: "w:title"}}
		e.EncodeElement(_dbafb.Title, _cbagf)
	}
	if _dbafb.Choice != nil {
		for _, _abdgee := range _dbafb.Choice {
			_abdgee.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Num struct {

	// Numbering Definition Instance ID
	NumIdAttr int64

	// Abstract Numbering Definition Reference
	AbstractNumId *CT_DecimalNumber

	// Numbering Level Definition Override
	LvlOverride []*CT_NumLvl
}

// Validate validates the CT_Picture and its children
func (_ecbbb *CT_Picture) Validate() error { return _ecbbb.ValidateWithPath("CT_Picture") }
func NewCT_MailMergeDocType() *CT_MailMergeDocType {
	_fdgga := &CT_MailMergeDocType{}
	_fdgga.ValAttr = ST_MailMergeDocType(1)
	return _fdgga
}
func (_bdfee ST_MultiLevelType) String() string {
	switch _bdfee {
	case 0:
		return ""
	case 1:
		return "singleLevel"
	case 2:
		return "multilevel"
	case 3:
		return "hybridMultilevel"
	}
	return ""
}

// Validate validates the CT_DataBinding and its children
func (_bdfg *CT_DataBinding) Validate() error { return _bdfg.ValidateWithPath("CT_DataBinding") }
func (_gfcgac *CT_TrPrBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gfcgac.CnfStyle != nil {
		_bcecd := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		for _, _agabfga := range _gfcgac.CnfStyle {
			e.EncodeElement(_agabfga, _bcecd)
		}
	}
	if _gfcgac.DivId != nil {
		_dgecbc := _d.StartElement{Name: _d.Name{Local: "w:divId"}}
		for _, _dffcbc := range _gfcgac.DivId {
			e.EncodeElement(_dffcbc, _dgecbc)
		}
	}
	if _gfcgac.GridBefore != nil {
		_gfeca := _d.StartElement{Name: _d.Name{Local: "w:gridBefore"}}
		for _, _dacgea := range _gfcgac.GridBefore {
			e.EncodeElement(_dacgea, _gfeca)
		}
	}
	if _gfcgac.GridAfter != nil {
		_fabbf := _d.StartElement{Name: _d.Name{Local: "w:gridAfter"}}
		for _, _cedba := range _gfcgac.GridAfter {
			e.EncodeElement(_cedba, _fabbf)
		}
	}
	if _gfcgac.WBefore != nil {
		_bcgdd := _d.StartElement{Name: _d.Name{Local: "w:wBefore"}}
		for _, _edbce := range _gfcgac.WBefore {
			e.EncodeElement(_edbce, _bcgdd)
		}
	}
	if _gfcgac.WAfter != nil {
		_faadc := _d.StartElement{Name: _d.Name{Local: "w:wAfter"}}
		for _, _fgcae := range _gfcgac.WAfter {
			e.EncodeElement(_fgcae, _faadc)
		}
	}
	if _gfcgac.CantSplit != nil {
		_abebda := _d.StartElement{Name: _d.Name{Local: "w:cantSplit"}}
		for _, _bdgde := range _gfcgac.CantSplit {
			e.EncodeElement(_bdgde, _abebda)
		}
	}
	if _gfcgac.TrHeight != nil {
		_aabda := _d.StartElement{Name: _d.Name{Local: "w:trHeight"}}
		for _, _edcbe := range _gfcgac.TrHeight {
			e.EncodeElement(_edcbe, _aabda)
		}
	}
	if _gfcgac.TblHeader != nil {
		_baebc := _d.StartElement{Name: _d.Name{Local: "w:tblHeader"}}
		for _, _ggbacf := range _gfcgac.TblHeader {
			e.EncodeElement(_ggbacf, _baebc)
		}
	}
	if _gfcgac.TblCellSpacing != nil {
		_cfagfd := _d.StartElement{Name: _d.Name{Local: "w:tblCellSpacing"}}
		for _, _ddgda := range _gfcgac.TblCellSpacing {
			e.EncodeElement(_ddgda, _cfagfd)
		}
	}
	if _gfcgac.Jc != nil {
		_fdbcea := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		for _, _efadd := range _gfcgac.Jc {
			e.EncodeElement(_efadd, _fdbcea)
		}
	}
	if _gfcgac.Hidden != nil {
		_babebd := _d.StartElement{Name: _d.Name{Local: "w:hidden"}}
		for _, _fabgad := range _gfcgac.Hidden {
			e.EncodeElement(_fabgad, _babebd)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gcfdb *CT_Lvl) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cgfc := range start.Attr {
		if _cgfc.Name.Local == "tplc" {
			_gadb, _begdf := _cgfc.Value, error(nil)
			if _begdf != nil {
				return _begdf
			}
			_gcfdb.TplcAttr = &_gadb
			continue
		}
		if _cgfc.Name.Local == "ilvl" {
			_deadb, _ddgag := _dd.ParseInt(_cgfc.Value, 10, 64)
			if _ddgag != nil {
				return _ddgag
			}
			_gcfdb.IlvlAttr = _deadb
			continue
		}
		if _cgfc.Name.Local == "tentative" {
			_aaada, _efde := ParseUnionST_OnOff(_cgfc.Value)
			if _efde != nil {
				return _efde
			}
			_gcfdb.TentativeAttr = &_aaada
			continue
		}
	}
_dccbd:
	for {
		_bffa, _dfecb := d.Token()
		if _dfecb != nil {
			return _dfecb
		}
		switch _abegb := _bffa.(type) {
		case _d.StartElement:
			switch _abegb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "start"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "start"}:
				_gcfdb.Start = NewCT_DecimalNumber()
				if _abeae := d.DecodeElement(_gcfdb.Start, &_abegb); _abeae != nil {
					return _abeae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numFmt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numFmt"}:
				_gcfdb.NumFmt = NewCT_NumFmt()
				if _cbbbc := d.DecodeElement(_gcfdb.NumFmt, &_abegb); _cbbbc != nil {
					return _cbbbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lvlRestart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lvlRestart"}:
				_gcfdb.LvlRestart = NewCT_DecimalNumber()
				if _egdbg := d.DecodeElement(_gcfdb.LvlRestart, &_abegb); _egdbg != nil {
					return _egdbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pStyle"}:
				_gcfdb.PStyle = NewCT_String()
				if _adbbb := d.DecodeElement(_gcfdb.PStyle, &_abegb); _adbbb != nil {
					return _adbbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "isLgl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "isLgl"}:
				_gcfdb.IsLgl = NewCT_OnOff()
				if _ebfdb := d.DecodeElement(_gcfdb.IsLgl, &_abegb); _ebfdb != nil {
					return _ebfdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suff"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suff"}:
				_gcfdb.Suff = NewCT_LevelSuffix()
				if _adae := d.DecodeElement(_gcfdb.Suff, &_abegb); _adae != nil {
					return _adae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lvlText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lvlText"}:
				_gcfdb.LvlText = NewCT_LevelText()
				if _ffefc := d.DecodeElement(_gcfdb.LvlText, &_abegb); _ffefc != nil {
					return _ffefc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lvlPicBulletId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lvlPicBulletId"}:
				_gcfdb.LvlPicBulletId = NewCT_DecimalNumber()
				if _gaff := d.DecodeElement(_gcfdb.LvlPicBulletId, &_abegb); _gaff != nil {
					return _gaff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "legacy"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "legacy"}:
				_gcfdb.Legacy = NewCT_LvlLegacy()
				if _fcabf := d.DecodeElement(_gcfdb.Legacy, &_abegb); _fcabf != nil {
					return _fcabf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lvlJc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lvlJc"}:
				_gcfdb.LvlJc = NewCT_Jc()
				if _fcaae := d.DecodeElement(_gcfdb.LvlJc, &_abegb); _fcaae != nil {
					return _fcaae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPr"}:
				_gcfdb.PPr = NewCT_PPrGeneral()
				if _dfddg := d.DecodeElement(_gcfdb.PPr, &_abegb); _dfddg != nil {
					return _dfddg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_gcfdb.RPr = NewCT_RPr()
				if _gafdc := d.DecodeElement(_gcfdb.RPr, &_abegb); _gafdc != nil {
					return _gafdc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Lvl\u0020\u0025v", _abegb.Name)
				if _fegaa := d.Skip(); _fegaa != nil {
					return _fegaa
				}
			}
		case _d.EndElement:
			break _dccbd
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_TblPrExBase and its children
func (_cccgff *CT_TblPrExBase) Validate() error { return _cccgff.ValidateWithPath("CT_TblPrExBase") }
func NewCT_View() *CT_View                      { _gfbce := &CT_View{}; _gfbce.ValAttr = ST_View(1); return _gfbce }
func (_cbcbad ST_Direction) Validate() error    { return _cbcbad.ValidateWithPath("") }
func (_fcfdc *CT_TblPrBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fcfdc.TblStyle != nil {
		_egefdf := _d.StartElement{Name: _d.Name{Local: "w:tblStyle"}}
		e.EncodeElement(_fcfdc.TblStyle, _egefdf)
	}
	if _fcfdc.TblpPr != nil {
		_gfgec := _d.StartElement{Name: _d.Name{Local: "w:tblpPr"}}
		e.EncodeElement(_fcfdc.TblpPr, _gfgec)
	}
	if _fcfdc.TblOverlap != nil {
		_fdedea := _d.StartElement{Name: _d.Name{Local: "w:tblOverlap"}}
		e.EncodeElement(_fcfdc.TblOverlap, _fdedea)
	}
	if _fcfdc.BidiVisual != nil {
		_gfbede := _d.StartElement{Name: _d.Name{Local: "w:bidiVisual"}}
		e.EncodeElement(_fcfdc.BidiVisual, _gfbede)
	}
	if _fcfdc.TblStyleRowBandSize != nil {
		_cegea := _d.StartElement{Name: _d.Name{Local: "w:tblStyleRowBandSize"}}
		e.EncodeElement(_fcfdc.TblStyleRowBandSize, _cegea)
	}
	if _fcfdc.TblStyleColBandSize != nil {
		_bbgee := _d.StartElement{Name: _d.Name{Local: "w:tblStyleColBandSize"}}
		e.EncodeElement(_fcfdc.TblStyleColBandSize, _bbgee)
	}
	if _fcfdc.TblW != nil {
		_cfgcgf := _d.StartElement{Name: _d.Name{Local: "w:tblW"}}
		e.EncodeElement(_fcfdc.TblW, _cfgcgf)
	}
	if _fcfdc.Jc != nil {
		_gadff := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		e.EncodeElement(_fcfdc.Jc, _gadff)
	}
	if _fcfdc.TblCellSpacing != nil {
		_ecgea := _d.StartElement{Name: _d.Name{Local: "w:tblCellSpacing"}}
		e.EncodeElement(_fcfdc.TblCellSpacing, _ecgea)
	}
	if _fcfdc.TblInd != nil {
		_bgegf := _d.StartElement{Name: _d.Name{Local: "w:tblInd"}}
		e.EncodeElement(_fcfdc.TblInd, _bgegf)
	}
	if _fcfdc.TblBorders != nil {
		_fecbdb := _d.StartElement{Name: _d.Name{Local: "w:tblBorders"}}
		e.EncodeElement(_fcfdc.TblBorders, _fecbdb)
	}
	if _fcfdc.Shd != nil {
		_bdddf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_fcfdc.Shd, _bdddf)
	}
	if _fcfdc.TblLayout != nil {
		_gfeeca := _d.StartElement{Name: _d.Name{Local: "w:tblLayout"}}
		e.EncodeElement(_fcfdc.TblLayout, _gfeeca)
	}
	if _fcfdc.TblCellMar != nil {
		_adece := _d.StartElement{Name: _d.Name{Local: "w:tblCellMar"}}
		e.EncodeElement(_fcfdc.TblCellMar, _adece)
	}
	if _fcfdc.TblLook != nil {
		_egfeg := _d.StartElement{Name: _d.Name{Local: "w:tblLook"}}
		e.EncodeElement(_fcfdc.TblLook, _egfeg)
	}
	if _fcfdc.TblCaption != nil {
		_acceb := _d.StartElement{Name: _d.Name{Local: "w:tblCaption"}}
		e.EncodeElement(_fcfdc.TblCaption, _acceb)
	}
	if _fcfdc.TblDescription != nil {
		_edgcd := _d.StartElement{Name: _d.Name{Local: "w:tblDescription"}}
		e.EncodeElement(_fcfdc.TblDescription, _edgcd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DocProtect and its children, prefixing error messages with path
func (_ffcbg *CT_DocProtect) ValidateWithPath(path string) error {
	if _ceffd := _ffcbg.EditAttr.ValidateWithPath(path + "\u002fEditAttr"); _ceffd != nil {
		return _ceffd
	}
	if _ffcbg.FormattingAttr != nil {
		if _fcfba := _ffcbg.FormattingAttr.ValidateWithPath(path + "\u002fFormattingAttr"); _fcfba != nil {
			return _fcfba
		}
	}
	if _ffcbg.EnforcementAttr != nil {
		if _gfbcb := _ffcbg.EnforcementAttr.ValidateWithPath(path + "\u002fEnforcementAttr"); _gfbcb != nil {
			return _gfbcb
		}
	}
	if _cgggba := _ffcbg.CryptProviderTypeAttr.ValidateWithPath(path + "\u002fCryptProviderTypeAttr"); _cgggba != nil {
		return _cgggba
	}
	if _aeab := _ffcbg.CryptAlgorithmClassAttr.ValidateWithPath(path + "\u002fCryptAlgorithmClassAttr"); _aeab != nil {
		return _aeab
	}
	if _dbdcd := _ffcbg.CryptAlgorithmTypeAttr.ValidateWithPath(path + "\u002fCryptAlgorithmTypeAttr"); _dbdcd != nil {
		return _dbdcd
	}
	return nil
}

type CT_Background struct {

	// Background Color
	ColorAttr *ST_HexColor

	// Background Theme Color
	ThemeColorAttr ST_ThemeColor

	// Background Theme Color Tint
	ThemeTintAttr *string

	// Background Theme Color Shade
	ThemeShadeAttr *string
	Any            []_ga.Any
	Drawing        *CT_Drawing
}
type EG_PContent struct {

	// Simple Field
	FldSimple []*CT_SimpleField

	// Hyperlink
	Hyperlink *CT_Hyperlink

	// Anchor for Subdocument Location
	SubDoc               *CT_Rel
	EG_ContentRunContent []*EG_ContentRunContent
}
type ST_TargetScreenSz byte

func (_agcd *CT_Column) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _agcd.WAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:w"}, Value: _b.Sprintf("\u0025v", *_agcd.WAttr)})
	}
	if _agcd.SpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:space"}, Value: _b.Sprintf("\u0025v", *_agcd.SpaceAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_TcBorders struct {

	// Table Cell Top Border
	Top *CT_Border

	// Table Cell Leading Edge Border
	Start *CT_Border

	// Table Cell Leading Edge Border
	Left *CT_Border

	// Table Cell Bottom Border
	Bottom *CT_Border

	// Table Cell Trailing Edge Border
	End *CT_Border

	// Table Cell Trailing Edge Border
	Right *CT_Border

	// Table Cell Inside Horizontal Edges Border
	InsideH *CT_Border

	// Table Cell Inside Vertical Edges Border
	InsideV *CT_Border

	// Table Cell Top Left to Bottom Right Diagonal Border
	Tl2br *CT_Border

	// Table Cell Top Right to Bottom Left Diagonal Border
	Tr2bl *CT_Border
}

func (_bbfgf ST_SignedHpsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bbfgf.Int64 != nil {
		e.EncodeToken(_d.CharData(_b.Sprintf("\u0025d", *_bbfgf.Int64)))
	}
	if _bbfgf.ST_UniversalMeasure != nil {
		e.EncodeToken(_d.CharData(*_bbfgf.ST_UniversalMeasure))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}
func (_dddgee *CT_TabStop) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_cdgdb, _eddec := _dddgee.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _eddec != nil {
		return _eddec
	}
	start.Attr = append(start.Attr, _cdgdb)
	if _dddgee.LeaderAttr != ST_TabTlcUnset {
		_fbafd, _gfcbb := _dddgee.LeaderAttr.MarshalXMLAttr(_d.Name{Local: "w:leader"})
		if _gfcbb != nil {
			return _gfcbb
		}
		start.Attr = append(start.Attr, _fbafd)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:pos"}, Value: _b.Sprintf("\u0025v", _dddgee.PosAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Column and its children
func (_ggedb *CT_Column) Validate() error { return _ggedb.ValidateWithPath("CT_Column") }

// ValidateWithPath validates the CT_StylePaneFilter and its children, prefixing error messages with path
func (_bfeaf *CT_StylePaneFilter) ValidateWithPath(path string) error {
	if _bfeaf.AllStylesAttr != nil {
		if _efebf := _bfeaf.AllStylesAttr.ValidateWithPath(path + "\u002fAllStylesAttr"); _efebf != nil {
			return _efebf
		}
	}
	if _bfeaf.CustomStylesAttr != nil {
		if _edaaf := _bfeaf.CustomStylesAttr.ValidateWithPath(path + "\u002fCustomStylesAttr"); _edaaf != nil {
			return _edaaf
		}
	}
	if _bfeaf.LatentStylesAttr != nil {
		if _dafea := _bfeaf.LatentStylesAttr.ValidateWithPath(path + "\u002fLatentStylesAttr"); _dafea != nil {
			return _dafea
		}
	}
	if _bfeaf.StylesInUseAttr != nil {
		if _gabad := _bfeaf.StylesInUseAttr.ValidateWithPath(path + "\u002fStylesInUseAttr"); _gabad != nil {
			return _gabad
		}
	}
	if _bfeaf.HeadingStylesAttr != nil {
		if _eccaa := _bfeaf.HeadingStylesAttr.ValidateWithPath(path + "\u002fHeadingStylesAttr"); _eccaa != nil {
			return _eccaa
		}
	}
	if _bfeaf.NumberingStylesAttr != nil {
		if _ebfdac := _bfeaf.NumberingStylesAttr.ValidateWithPath(path + "/NumberingStylesAttr"); _ebfdac != nil {
			return _ebfdac
		}
	}
	if _bfeaf.TableStylesAttr != nil {
		if _gcccd := _bfeaf.TableStylesAttr.ValidateWithPath(path + "\u002fTableStylesAttr"); _gcccd != nil {
			return _gcccd
		}
	}
	if _bfeaf.DirectFormattingOnRunsAttr != nil {
		if _cedac := _bfeaf.DirectFormattingOnRunsAttr.ValidateWithPath(path + "/DirectFormattingOnRunsAttr"); _cedac != nil {
			return _cedac
		}
	}
	if _bfeaf.DirectFormattingOnParagraphsAttr != nil {
		if _afffb := _bfeaf.DirectFormattingOnParagraphsAttr.ValidateWithPath(path + "\u002fDirectFormattingOnParagraphsAttr"); _afffb != nil {
			return _afffb
		}
	}
	if _bfeaf.DirectFormattingOnNumberingAttr != nil {
		if _aefbcb := _bfeaf.DirectFormattingOnNumberingAttr.ValidateWithPath(path + "\u002fDirectFormattingOnNumberingAttr"); _aefbcb != nil {
			return _aefbcb
		}
	}
	if _bfeaf.DirectFormattingOnTablesAttr != nil {
		if _deegg := _bfeaf.DirectFormattingOnTablesAttr.ValidateWithPath(path + "\u002fDirectFormattingOnTablesAttr"); _deegg != nil {
			return _deegg
		}
	}
	if _bfeaf.ClearFormattingAttr != nil {
		if _fadc := _bfeaf.ClearFormattingAttr.ValidateWithPath(path + "/ClearFormattingAttr"); _fadc != nil {
			return _fadc
		}
	}
	if _bfeaf.Top3HeadingStylesAttr != nil {
		if _ddgefe := _bfeaf.Top3HeadingStylesAttr.ValidateWithPath(path + "\u002fTop3HeadingStylesAttr"); _ddgefe != nil {
			return _ddgefe
		}
	}
	if _bfeaf.VisibleStylesAttr != nil {
		if _edbee := _bfeaf.VisibleStylesAttr.ValidateWithPath(path + "\u002fVisibleStylesAttr"); _edbee != nil {
			return _edbee
		}
	}
	if _bfeaf.AlternateStyleNamesAttr != nil {
		if _gfaa := _bfeaf.AlternateStyleNamesAttr.ValidateWithPath(path + "\u002fAlternateStyleNamesAttr"); _gfaa != nil {
			return _gfaa
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PPrGeneral and its children, prefixing error messages with path
func (_dbfg *CT_PPrGeneral) ValidateWithPath(path string) error {
	if _dbfg.PStyle != nil {
		if _eecb := _dbfg.PStyle.ValidateWithPath(path + "\u002fPStyle"); _eecb != nil {
			return _eecb
		}
	}
	if _dbfg.KeepNext != nil {
		if _daeb := _dbfg.KeepNext.ValidateWithPath(path + "\u002fKeepNext"); _daeb != nil {
			return _daeb
		}
	}
	if _dbfg.KeepLines != nil {
		if _abbaeg := _dbfg.KeepLines.ValidateWithPath(path + "\u002fKeepLines"); _abbaeg != nil {
			return _abbaeg
		}
	}
	if _dbfg.PageBreakBefore != nil {
		if _dadfb := _dbfg.PageBreakBefore.ValidateWithPath(path + "\u002fPageBreakBefore"); _dadfb != nil {
			return _dadfb
		}
	}
	if _dbfg.FramePr != nil {
		if _cffad := _dbfg.FramePr.ValidateWithPath(path + "\u002fFramePr"); _cffad != nil {
			return _cffad
		}
	}
	if _dbfg.WidowControl != nil {
		if _dfdee := _dbfg.WidowControl.ValidateWithPath(path + "\u002fWidowControl"); _dfdee != nil {
			return _dfdee
		}
	}
	if _dbfg.NumPr != nil {
		if _fbbcd := _dbfg.NumPr.ValidateWithPath(path + "\u002fNumPr"); _fbbcd != nil {
			return _fbbcd
		}
	}
	if _dbfg.SuppressLineNumbers != nil {
		if _ggedc := _dbfg.SuppressLineNumbers.ValidateWithPath(path + "/SuppressLineNumbers"); _ggedc != nil {
			return _ggedc
		}
	}
	if _dbfg.PBdr != nil {
		if _deabc := _dbfg.PBdr.ValidateWithPath(path + "\u002fPBdr"); _deabc != nil {
			return _deabc
		}
	}
	if _dbfg.Shd != nil {
		if _fcfaa := _dbfg.Shd.ValidateWithPath(path + "\u002fShd"); _fcfaa != nil {
			return _fcfaa
		}
	}
	if _dbfg.Tabs != nil {
		if _gebbc := _dbfg.Tabs.ValidateWithPath(path + "\u002fTabs"); _gebbc != nil {
			return _gebbc
		}
	}
	if _dbfg.SuppressAutoHyphens != nil {
		if _bcgca := _dbfg.SuppressAutoHyphens.ValidateWithPath(path + "/SuppressAutoHyphens"); _bcgca != nil {
			return _bcgca
		}
	}
	if _dbfg.Kinsoku != nil {
		if _caee := _dbfg.Kinsoku.ValidateWithPath(path + "\u002fKinsoku"); _caee != nil {
			return _caee
		}
	}
	if _dbfg.WordWrap != nil {
		if _gcaa := _dbfg.WordWrap.ValidateWithPath(path + "\u002fWordWrap"); _gcaa != nil {
			return _gcaa
		}
	}
	if _dbfg.OverflowPunct != nil {
		if _baaef := _dbfg.OverflowPunct.ValidateWithPath(path + "\u002fOverflowPunct"); _baaef != nil {
			return _baaef
		}
	}
	if _dbfg.TopLinePunct != nil {
		if _ddagd := _dbfg.TopLinePunct.ValidateWithPath(path + "\u002fTopLinePunct"); _ddagd != nil {
			return _ddagd
		}
	}
	if _dbfg.AutoSpaceDE != nil {
		if _afcae := _dbfg.AutoSpaceDE.ValidateWithPath(path + "\u002fAutoSpaceDE"); _afcae != nil {
			return _afcae
		}
	}
	if _dbfg.AutoSpaceDN != nil {
		if _eedbc := _dbfg.AutoSpaceDN.ValidateWithPath(path + "\u002fAutoSpaceDN"); _eedbc != nil {
			return _eedbc
		}
	}
	if _dbfg.Bidi != nil {
		if _cbbe := _dbfg.Bidi.ValidateWithPath(path + "\u002fBidi"); _cbbe != nil {
			return _cbbe
		}
	}
	if _dbfg.AdjustRightInd != nil {
		if _cdfed := _dbfg.AdjustRightInd.ValidateWithPath(path + "\u002fAdjustRightInd"); _cdfed != nil {
			return _cdfed
		}
	}
	if _dbfg.SnapToGrid != nil {
		if _eegee := _dbfg.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _eegee != nil {
			return _eegee
		}
	}
	if _dbfg.Spacing != nil {
		if _ccgeg := _dbfg.Spacing.ValidateWithPath(path + "\u002fSpacing"); _ccgeg != nil {
			return _ccgeg
		}
	}
	if _dbfg.Ind != nil {
		if _daeba := _dbfg.Ind.ValidateWithPath(path + "\u002fInd"); _daeba != nil {
			return _daeba
		}
	}
	if _dbfg.ContextualSpacing != nil {
		if _gegeb := _dbfg.ContextualSpacing.ValidateWithPath(path + "\u002fContextualSpacing"); _gegeb != nil {
			return _gegeb
		}
	}
	if _dbfg.MirrorIndents != nil {
		if _fcdde := _dbfg.MirrorIndents.ValidateWithPath(path + "\u002fMirrorIndents"); _fcdde != nil {
			return _fcdde
		}
	}
	if _dbfg.SuppressOverlap != nil {
		if _cgfdaa := _dbfg.SuppressOverlap.ValidateWithPath(path + "\u002fSuppressOverlap"); _cgfdaa != nil {
			return _cgfdaa
		}
	}
	if _dbfg.Jc != nil {
		if _begbc := _dbfg.Jc.ValidateWithPath(path + "\u002fJc"); _begbc != nil {
			return _begbc
		}
	}
	if _dbfg.TextDirection != nil {
		if _fbcfd := _dbfg.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _fbcfd != nil {
			return _fbcfd
		}
	}
	if _dbfg.TextAlignment != nil {
		if _eddae := _dbfg.TextAlignment.ValidateWithPath(path + "\u002fTextAlignment"); _eddae != nil {
			return _eddae
		}
	}
	if _dbfg.TextboxTightWrap != nil {
		if _ggbee := _dbfg.TextboxTightWrap.ValidateWithPath(path + "\u002fTextboxTightWrap"); _ggbee != nil {
			return _ggbee
		}
	}
	if _dbfg.OutlineLvl != nil {
		if _cbfbgg := _dbfg.OutlineLvl.ValidateWithPath(path + "/OutlineLvl"); _cbfbgg != nil {
			return _cbfbgg
		}
	}
	if _dbfg.DivId != nil {
		if _dgeaee := _dbfg.DivId.ValidateWithPath(path + "\u002fDivId"); _dgeaee != nil {
			return _dgeaee
		}
	}
	if _dbfg.CnfStyle != nil {
		if _fgcggb := _dbfg.CnfStyle.ValidateWithPath(path + "\u002fCnfStyle"); _fgcggb != nil {
			return _fgcggb
		}
	}
	if _dbfg.PPrChange != nil {
		if _dadda := _dbfg.PPrChange.ValidateWithPath(path + "\u002fPPrChange"); _dadda != nil {
			return _dadda
		}
	}
	return nil
}
func (_cedd *CT_CustomXmlBlock) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ddce := range start.Attr {
		if _ddce.Name.Local == "uri" {
			_bcae, _bbce := _ddce.Value, error(nil)
			if _bbce != nil {
				return _bbce
			}
			_cedd.UriAttr = &_bcae
			continue
		}
		if _ddce.Name.Local == "element" {
			_bfag, _badg := _ddce.Value, error(nil)
			if _badg != nil {
				return _badg
			}
			_cedd.ElementAttr = _bfag
			continue
		}
	}
_eeggc:
	for {
		_gegf, _dbacc := d.Token()
		if _dbacc != nil {
			return _dbacc
		}
		switch _bafg := _gegf.(type) {
		case _d.StartElement:
			switch _bafg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlPr"}:
				_cedd.CustomXmlPr = NewCT_CustomXmlPr()
				if _gbdg := d.DecodeElement(_cedd.CustomXmlPr, &_bafg); _gbdg != nil {
					return _gbdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_afbe := NewEG_ContentBlockContent()
				_afbe.CustomXml = NewCT_CustomXmlBlock()
				if _gbeaf := d.DecodeElement(_afbe.CustomXml, &_bafg); _gbeaf != nil {
					return _gbeaf
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _afbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_gbcc := NewEG_ContentBlockContent()
				_gbcc.Sdt = NewCT_SdtBlock()
				if _accd := d.DecodeElement(_gbcc.Sdt, &_bafg); _accd != nil {
					return _accd
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _gbcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_gdea := NewEG_ContentBlockContent()
				_bbbd := NewCT_P()
				if _eddd := d.DecodeElement(_bbbd, &_bafg); _eddd != nil {
					return _eddd
				}
				_gdea.P = append(_gdea.P, _bbbd)
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _gdea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_gfdb := NewEG_ContentBlockContent()
				_gagbb := NewCT_Tbl()
				if _gbde := d.DecodeElement(_gagbb, &_bafg); _gbde != nil {
					return _gbde
				}
				_gfdb.Tbl = append(_gfdb.Tbl, _gagbb)
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _gfdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_ecef := NewEG_ContentBlockContent()
				_becgd := NewEG_RunLevelElts()
				_becgd.ProofErr = NewCT_ProofErr()
				if _bdcb := d.DecodeElement(_becgd.ProofErr, &_bafg); _bdcb != nil {
					return _bdcb
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _ecef)
				_ecef.EG_RunLevelElts = append(_ecef.EG_RunLevelElts, _becgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_dfgg := NewEG_ContentBlockContent()
				_cccbg := NewEG_RunLevelElts()
				_cccbg.PermStart = NewCT_PermStart()
				if _egcad := d.DecodeElement(_cccbg.PermStart, &_bafg); _egcad != nil {
					return _egcad
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _dfgg)
				_dfgg.EG_RunLevelElts = append(_dfgg.EG_RunLevelElts, _cccbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_bebe := NewEG_ContentBlockContent()
				_fgfce := NewEG_RunLevelElts()
				_fgfce.PermEnd = NewCT_Perm()
				if _eea := d.DecodeElement(_fgfce.PermEnd, &_bafg); _eea != nil {
					return _eea
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _bebe)
				_bebe.EG_RunLevelElts = append(_bebe.EG_RunLevelElts, _fgfce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_ada := NewEG_ContentBlockContent()
				_bedc := NewEG_RunLevelElts()
				_bedc.Ins = NewCT_RunTrackChange()
				if _dcadg := d.DecodeElement(_bedc.Ins, &_bafg); _dcadg != nil {
					return _dcadg
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _ada)
				_ada.EG_RunLevelElts = append(_ada.EG_RunLevelElts, _bedc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_bacdf := NewEG_ContentBlockContent()
				_ccece := NewEG_RunLevelElts()
				_ccece.Del = NewCT_RunTrackChange()
				if _aagbc := d.DecodeElement(_ccece.Del, &_bafg); _aagbc != nil {
					return _aagbc
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _bacdf)
				_bacdf.EG_RunLevelElts = append(_bacdf.EG_RunLevelElts, _ccece)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_daaa := NewEG_ContentBlockContent()
				_ffcef := NewEG_RunLevelElts()
				_ffcef.MoveFrom = NewCT_RunTrackChange()
				if _acbdc := d.DecodeElement(_ffcef.MoveFrom, &_bafg); _acbdc != nil {
					return _acbdc
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _daaa)
				_daaa.EG_RunLevelElts = append(_daaa.EG_RunLevelElts, _ffcef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_gbfd := NewEG_ContentBlockContent()
				_gcab := NewEG_RunLevelElts()
				_gcab.MoveTo = NewCT_RunTrackChange()
				if _cfed := d.DecodeElement(_gcab.MoveTo, &_bafg); _cfed != nil {
					return _cfed
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _gbfd)
				_gbfd.EG_RunLevelElts = append(_gbfd.EG_RunLevelElts, _gcab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_ebfd := NewEG_ContentBlockContent()
				_cdde := NewEG_RunLevelElts()
				_bgeg := NewEG_RangeMarkupElements()
				_bgeg.BookmarkStart = NewCT_Bookmark()
				if _bggegc := d.DecodeElement(_bgeg.BookmarkStart, &_bafg); _bggegc != nil {
					return _bggegc
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _ebfd)
				_ebfd.EG_RunLevelElts = append(_ebfd.EG_RunLevelElts, _cdde)
				_cdde.EG_RangeMarkupElements = append(_cdde.EG_RangeMarkupElements, _bgeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_aaeba := NewEG_ContentBlockContent()
				_gcdgg := NewEG_RunLevelElts()
				_dcdc := NewEG_RangeMarkupElements()
				_dcdc.BookmarkEnd = NewCT_MarkupRange()
				if _eaa := d.DecodeElement(_dcdc.BookmarkEnd, &_bafg); _eaa != nil {
					return _eaa
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _aaeba)
				_aaeba.EG_RunLevelElts = append(_aaeba.EG_RunLevelElts, _gcdgg)
				_gcdgg.EG_RangeMarkupElements = append(_gcdgg.EG_RangeMarkupElements, _dcdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_aeec := NewEG_ContentBlockContent()
				_bafec := NewEG_RunLevelElts()
				_ebbdc := NewEG_RangeMarkupElements()
				_ebbdc.MoveFromRangeStart = NewCT_MoveBookmark()
				if _agace := d.DecodeElement(_ebbdc.MoveFromRangeStart, &_bafg); _agace != nil {
					return _agace
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _aeec)
				_aeec.EG_RunLevelElts = append(_aeec.EG_RunLevelElts, _bafec)
				_bafec.EG_RangeMarkupElements = append(_bafec.EG_RangeMarkupElements, _ebbdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_cgbca := NewEG_ContentBlockContent()
				_fgec := NewEG_RunLevelElts()
				_fgeca := NewEG_RangeMarkupElements()
				_fgeca.MoveFromRangeEnd = NewCT_MarkupRange()
				if _ffgf := d.DecodeElement(_fgeca.MoveFromRangeEnd, &_bafg); _ffgf != nil {
					return _ffgf
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _cgbca)
				_cgbca.EG_RunLevelElts = append(_cgbca.EG_RunLevelElts, _fgec)
				_fgec.EG_RangeMarkupElements = append(_fgec.EG_RangeMarkupElements, _fgeca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dgca := NewEG_ContentBlockContent()
				_dcbga := NewEG_RunLevelElts()
				_edba := NewEG_RangeMarkupElements()
				_edba.MoveToRangeStart = NewCT_MoveBookmark()
				if _cbdg := d.DecodeElement(_edba.MoveToRangeStart, &_bafg); _cbdg != nil {
					return _cbdg
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _dgca)
				_dgca.EG_RunLevelElts = append(_dgca.EG_RunLevelElts, _dcbga)
				_dcbga.EG_RangeMarkupElements = append(_dcbga.EG_RangeMarkupElements, _edba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_ccbf := NewEG_ContentBlockContent()
				_dbafc := NewEG_RunLevelElts()
				_agcb := NewEG_RangeMarkupElements()
				_agcb.MoveToRangeEnd = NewCT_MarkupRange()
				if _gcbg := d.DecodeElement(_agcb.MoveToRangeEnd, &_bafg); _gcbg != nil {
					return _gcbg
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _ccbf)
				_ccbf.EG_RunLevelElts = append(_ccbf.EG_RunLevelElts, _dbafc)
				_dbafc.EG_RangeMarkupElements = append(_dbafc.EG_RangeMarkupElements, _agcb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_gcba := NewEG_ContentBlockContent()
				_aafa := NewEG_RunLevelElts()
				_affbg := NewEG_RangeMarkupElements()
				_affbg.CommentRangeStart = NewCT_MarkupRange()
				if _afefad := d.DecodeElement(_affbg.CommentRangeStart, &_bafg); _afefad != nil {
					return _afefad
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _gcba)
				_gcba.EG_RunLevelElts = append(_gcba.EG_RunLevelElts, _aafa)
				_aafa.EG_RangeMarkupElements = append(_aafa.EG_RangeMarkupElements, _affbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_aecbf := NewEG_ContentBlockContent()
				_bacgb := NewEG_RunLevelElts()
				_daddf := NewEG_RangeMarkupElements()
				_daddf.CommentRangeEnd = NewCT_MarkupRange()
				if _ggbf := d.DecodeElement(_daddf.CommentRangeEnd, &_bafg); _ggbf != nil {
					return _ggbf
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _aecbf)
				_aecbf.EG_RunLevelElts = append(_aecbf.EG_RunLevelElts, _bacgb)
				_bacgb.EG_RangeMarkupElements = append(_bacgb.EG_RangeMarkupElements, _daddf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_fabead := NewEG_ContentBlockContent()
				_gdga := NewEG_RunLevelElts()
				_cfab := NewEG_RangeMarkupElements()
				_cfab.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _cggb := d.DecodeElement(_cfab.CustomXmlInsRangeStart, &_bafg); _cggb != nil {
					return _cggb
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _fabead)
				_fabead.EG_RunLevelElts = append(_fabead.EG_RunLevelElts, _gdga)
				_gdga.EG_RangeMarkupElements = append(_gdga.EG_RangeMarkupElements, _cfab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_dfbda := NewEG_ContentBlockContent()
				_fceec := NewEG_RunLevelElts()
				_edae := NewEG_RangeMarkupElements()
				_edae.CustomXmlInsRangeEnd = NewCT_Markup()
				if _afead := d.DecodeElement(_edae.CustomXmlInsRangeEnd, &_bafg); _afead != nil {
					return _afead
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _dfbda)
				_dfbda.EG_RunLevelElts = append(_dfbda.EG_RunLevelElts, _fceec)
				_fceec.EG_RangeMarkupElements = append(_fceec.EG_RangeMarkupElements, _edae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_dbbd := NewEG_ContentBlockContent()
				_fgdc := NewEG_RunLevelElts()
				_afff := NewEG_RangeMarkupElements()
				_afff.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _fgff := d.DecodeElement(_afff.CustomXmlDelRangeStart, &_bafg); _fgff != nil {
					return _fgff
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _dbbd)
				_dbbd.EG_RunLevelElts = append(_dbbd.EG_RunLevelElts, _fgdc)
				_fgdc.EG_RangeMarkupElements = append(_fgdc.EG_RangeMarkupElements, _afff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fefb := NewEG_ContentBlockContent()
				_ggcca := NewEG_RunLevelElts()
				_abbag := NewEG_RangeMarkupElements()
				_abbag.CustomXmlDelRangeEnd = NewCT_Markup()
				if _fgee := d.DecodeElement(_abbag.CustomXmlDelRangeEnd, &_bafg); _fgee != nil {
					return _fgee
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _fefb)
				_fefb.EG_RunLevelElts = append(_fefb.EG_RunLevelElts, _ggcca)
				_ggcca.EG_RangeMarkupElements = append(_ggcca.EG_RangeMarkupElements, _abbag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_edef := NewEG_ContentBlockContent()
				_bcca := NewEG_RunLevelElts()
				_fggf := NewEG_RangeMarkupElements()
				_fggf.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _afde := d.DecodeElement(_fggf.CustomXmlMoveFromRangeStart, &_bafg); _afde != nil {
					return _afde
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _edef)
				_edef.EG_RunLevelElts = append(_edef.EG_RunLevelElts, _bcca)
				_bcca.EG_RangeMarkupElements = append(_bcca.EG_RangeMarkupElements, _fggf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_aefge := NewEG_ContentBlockContent()
				_edgb := NewEG_RunLevelElts()
				_dcdcg := NewEG_RangeMarkupElements()
				_dcdcg.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _debd := d.DecodeElement(_dcdcg.CustomXmlMoveFromRangeEnd, &_bafg); _debd != nil {
					return _debd
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _aefge)
				_aefge.EG_RunLevelElts = append(_aefge.EG_RunLevelElts, _edgb)
				_edgb.EG_RangeMarkupElements = append(_edgb.EG_RangeMarkupElements, _dcdcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gcee := NewEG_ContentBlockContent()
				_fdfed := NewEG_RunLevelElts()
				_bgda := NewEG_RangeMarkupElements()
				_bgda.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bccf := d.DecodeElement(_bgda.CustomXmlMoveToRangeStart, &_bafg); _bccf != nil {
					return _bccf
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _gcee)
				_gcee.EG_RunLevelElts = append(_gcee.EG_RunLevelElts, _fdfed)
				_fdfed.EG_RangeMarkupElements = append(_fdfed.EG_RangeMarkupElements, _bgda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_ffcec := NewEG_ContentBlockContent()
				_bgece := NewEG_RunLevelElts()
				_gbdgd := NewEG_RangeMarkupElements()
				_gbdgd.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _gaac := d.DecodeElement(_gbdgd.CustomXmlMoveToRangeEnd, &_bafg); _gaac != nil {
					return _gaac
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _ffcec)
				_ffcec.EG_RunLevelElts = append(_ffcec.EG_RunLevelElts, _bgece)
				_bgece.EG_RangeMarkupElements = append(_bgece.EG_RangeMarkupElements, _gbdgd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_bdcc := NewEG_ContentBlockContent()
				_cacf := NewEG_RunLevelElts()
				_dcffd := NewEG_MathContent()
				_dcffd.OMathPara = _f.NewOMathPara()
				if _gcaf := d.DecodeElement(_dcffd.OMathPara, &_bafg); _gcaf != nil {
					return _gcaf
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _bdcc)
				_bdcc.EG_RunLevelElts = append(_bdcc.EG_RunLevelElts, _cacf)
				_cacf.EG_MathContent = append(_cacf.EG_MathContent, _dcffd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_dggg := NewEG_ContentBlockContent()
				_abbg := NewEG_RunLevelElts()
				_geaa := NewEG_MathContent()
				_geaa.OMath = _f.NewOMath()
				if _bcacg := d.DecodeElement(_geaa.OMath, &_bafg); _bcacg != nil {
					return _bcacg
				}
				_cedd.EG_ContentBlockContent = append(_cedd.EG_ContentBlockContent, _dggg)
				_dggg.EG_RunLevelElts = append(_dggg.EG_RunLevelElts, _abbg)
				_abbg.EG_MathContent = append(_abbg.EG_MathContent, _geaa)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_CustomXmlBlock\u0020\u0025v", _bafg.Name)
				if _dddc := d.Skip(); _dddc != nil {
					return _dddc
				}
			}
		case _d.EndElement:
			break _eeggc
		case _d.CharData:
		}
	}
	return nil
}
func (_afaed *CT_PageBorders) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _afaed.ZOrderAttr != ST_PageBorderZOrderUnset {
		_dgbgb, _eabfa := _afaed.ZOrderAttr.MarshalXMLAttr(_d.Name{Local: "w:zOrder"})
		if _eabfa != nil {
			return _eabfa
		}
		start.Attr = append(start.Attr, _dgbgb)
	}
	if _afaed.DisplayAttr != ST_PageBorderDisplayUnset {
		_bdeba, _ggbef := _afaed.DisplayAttr.MarshalXMLAttr(_d.Name{Local: "w:display"})
		if _ggbef != nil {
			return _ggbef
		}
		start.Attr = append(start.Attr, _bdeba)
	}
	if _afaed.OffsetFromAttr != ST_PageBorderOffsetUnset {
		_ggdbed, _dgeabd := _afaed.OffsetFromAttr.MarshalXMLAttr(_d.Name{Local: "w:offsetFrom"})
		if _dgeabd != nil {
			return _dgeabd
		}
		start.Attr = append(start.Attr, _ggdbed)
	}
	e.EncodeToken(start)
	if _afaed.Top != nil {
		_egefe := _d.StartElement{Name: _d.Name{Local: "w:top"}}
		e.EncodeElement(_afaed.Top, _egefe)
	}
	if _afaed.Left != nil {
		_afggdb := _d.StartElement{Name: _d.Name{Local: "w:left"}}
		e.EncodeElement(_afaed.Left, _afggdb)
	}
	if _afaed.Bottom != nil {
		_bdfcf := _d.StartElement{Name: _d.Name{Local: "w:bottom"}}
		e.EncodeElement(_afaed.Bottom, _bdfcf)
	}
	if _afaed.Right != nil {
		_cagbe := _d.StartElement{Name: _d.Name{Local: "w:right"}}
		e.EncodeElement(_afaed.Right, _cagbe)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PBdr and its children, prefixing error messages with path
func (_fbfdb *CT_PBdr) ValidateWithPath(path string) error {
	if _fbfdb.Top != nil {
		if _geaegb := _fbfdb.Top.ValidateWithPath(path + "\u002fTop"); _geaegb != nil {
			return _geaegb
		}
	}
	if _fbfdb.Left != nil {
		if _badgg := _fbfdb.Left.ValidateWithPath(path + "\u002fLeft"); _badgg != nil {
			return _badgg
		}
	}
	if _fbfdb.Bottom != nil {
		if _dfdff := _fbfdb.Bottom.ValidateWithPath(path + "\u002fBottom"); _dfdff != nil {
			return _dfdff
		}
	}
	if _fbfdb.Right != nil {
		if _cccfgg := _fbfdb.Right.ValidateWithPath(path + "\u002fRight"); _cccfgg != nil {
			return _cccfgg
		}
	}
	if _fbfdb.Between != nil {
		if _ddbbfa := _fbfdb.Between.ValidateWithPath(path + "\u002fBetween"); _ddbbfa != nil {
			return _ddbbfa
		}
	}
	if _fbfdb.Bar != nil {
		if _bcabb := _fbfdb.Bar.ValidateWithPath(path + "\u002fBar"); _bcabb != nil {
			return _bcabb
		}
	}
	return nil
}

type CT_FontSig struct {

	// First 32 Bits of Unicode Subset Bitfield
	Usb0Attr string

	// Second 32 Bits of Unicode Subset Bitfield
	Usb1Attr string

	// Third 32 Bits of Unicode Subset Bitfield
	Usb2Attr string

	// Fourth 32 Bits of Unicode Subset Bitfield
	Usb3Attr string

	// Lower 32 Bits of Code Page Bit Field
	Csb0Attr string

	// Upper 32 Bits of Code Page Bit Field
	Csb1Attr string
}

// ValidateWithPath validates the WdAnchor and its children, prefixing error messages with path
func (_bfdda *WdAnchor) ValidateWithPath(path string) error {
	if _cgbadd := _bfdda.WdCT_Anchor.ValidateWithPath(path); _cgbadd != nil {
		return _cgbadd
	}
	return nil
}

// Validate validates the CT_Panose and its children
func (_ebcea *CT_Panose) Validate() error { return _ebcea.ValidateWithPath("CT_Panose") }
func (_ceece *WdWgp) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return _ceece.WdCT_WordprocessingGroup.MarshalXML(e, start)
}

// ValidateWithPath validates the EG_RangeMarkupElements and its children, prefixing error messages with path
func (_aedgbf *EG_RangeMarkupElements) ValidateWithPath(path string) error {
	if _aedgbf.BookmarkStart != nil {
		if _cbbad := _aedgbf.BookmarkStart.ValidateWithPath(path + "\u002fBookmarkStart"); _cbbad != nil {
			return _cbbad
		}
	}
	if _aedgbf.BookmarkEnd != nil {
		if _agadcc := _aedgbf.BookmarkEnd.ValidateWithPath(path + "\u002fBookmarkEnd"); _agadcc != nil {
			return _agadcc
		}
	}
	if _aedgbf.MoveFromRangeStart != nil {
		if _dgbbgf := _aedgbf.MoveFromRangeStart.ValidateWithPath(path + "\u002fMoveFromRangeStart"); _dgbbgf != nil {
			return _dgbbgf
		}
	}
	if _aedgbf.MoveFromRangeEnd != nil {
		if _ebagea := _aedgbf.MoveFromRangeEnd.ValidateWithPath(path + "\u002fMoveFromRangeEnd"); _ebagea != nil {
			return _ebagea
		}
	}
	if _aedgbf.MoveToRangeStart != nil {
		if _fgfgg := _aedgbf.MoveToRangeStart.ValidateWithPath(path + "\u002fMoveToRangeStart"); _fgfgg != nil {
			return _fgfgg
		}
	}
	if _aedgbf.MoveToRangeEnd != nil {
		if _becebf := _aedgbf.MoveToRangeEnd.ValidateWithPath(path + "\u002fMoveToRangeEnd"); _becebf != nil {
			return _becebf
		}
	}
	if _aedgbf.CommentRangeStart != nil {
		if _ccbefc := _aedgbf.CommentRangeStart.ValidateWithPath(path + "\u002fCommentRangeStart"); _ccbefc != nil {
			return _ccbefc
		}
	}
	if _aedgbf.CommentRangeEnd != nil {
		if _edeaae := _aedgbf.CommentRangeEnd.ValidateWithPath(path + "\u002fCommentRangeEnd"); _edeaae != nil {
			return _edeaae
		}
	}
	if _aedgbf.CustomXmlInsRangeStart != nil {
		if _fbadec := _aedgbf.CustomXmlInsRangeStart.ValidateWithPath(path + "\u002fCustomXmlInsRangeStart"); _fbadec != nil {
			return _fbadec
		}
	}
	if _aedgbf.CustomXmlInsRangeEnd != nil {
		if _gagfbc := _aedgbf.CustomXmlInsRangeEnd.ValidateWithPath(path + "/CustomXmlInsRangeEnd"); _gagfbc != nil {
			return _gagfbc
		}
	}
	if _aedgbf.CustomXmlDelRangeStart != nil {
		if _gaaga := _aedgbf.CustomXmlDelRangeStart.ValidateWithPath(path + "\u002fCustomXmlDelRangeStart"); _gaaga != nil {
			return _gaaga
		}
	}
	if _aedgbf.CustomXmlDelRangeEnd != nil {
		if _dfgca := _aedgbf.CustomXmlDelRangeEnd.ValidateWithPath(path + "/CustomXmlDelRangeEnd"); _dfgca != nil {
			return _dfgca
		}
	}
	if _aedgbf.CustomXmlMoveFromRangeStart != nil {
		if _cfceg := _aedgbf.CustomXmlMoveFromRangeStart.ValidateWithPath(path + "\u002fCustomXmlMoveFromRangeStart"); _cfceg != nil {
			return _cfceg
		}
	}
	if _aedgbf.CustomXmlMoveFromRangeEnd != nil {
		if _faaca := _aedgbf.CustomXmlMoveFromRangeEnd.ValidateWithPath(path + "\u002fCustomXmlMoveFromRangeEnd"); _faaca != nil {
			return _faaca
		}
	}
	if _aedgbf.CustomXmlMoveToRangeStart != nil {
		if _fgacd := _aedgbf.CustomXmlMoveToRangeStart.ValidateWithPath(path + "\u002fCustomXmlMoveToRangeStart"); _fgacd != nil {
			return _fgacd
		}
	}
	if _aedgbf.CustomXmlMoveToRangeEnd != nil {
		if _ffebdb := _aedgbf.CustomXmlMoveToRangeEnd.ValidateWithPath(path + "\u002fCustomXmlMoveToRangeEnd"); _ffebdb != nil {
			return _ffebdb
		}
	}
	return nil
}

type CT_TrackChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
}

// Validate validates the CT_Settings and its children
func (_aefb *CT_Settings) Validate() error { return _aefb.ValidateWithPath("CT_Settings") }
func (_cfaac *ST_PageBorderZOrder) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cfaac = 0
	case "front":
		*_cfaac = 1
	case "back":
		*_cfaac = 2
	}
	return nil
}
func (_aeafe *ST_HpsMeasure) Validate() error { return _aeafe.ValidateWithPath("") }
func (_cdddeg ST_Pitch) String() string {
	switch _cdddeg {
	case 0:
		return ""
	case 1:
		return "fixed"
	case 2:
		return "variable"
	case 3:
		return "default"
	}
	return ""
}
func (_afbdb *CT_SdtListItem) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _eeabg := range start.Attr {
		if _eeabg.Name.Local == "displayText" {
			_fdfef, _eaegb := _eeabg.Value, error(nil)
			if _eaegb != nil {
				return _eaegb
			}
			_afbdb.DisplayTextAttr = &_fdfef
			continue
		}
		if _eeabg.Name.Local == "value" {
			_bgbge, _decgg := _eeabg.Value, error(nil)
			if _decgg != nil {
				return _decgg
			}
			_afbdb.ValueAttr = &_bgbge
			continue
		}
	}
	for {
		_beddd, _cfbef := d.Token()
		if _cfbef != nil {
			return _b.Errorf("parsing\u0020CT_SdtListItem:\u0020\u0025s", _cfbef)
		}
		if _cfbcb, _ebbff := _beddd.(_d.EndElement); _ebbff && _cfbcb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfgdff *WdInline) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfgdff.WdCT_Inline = *NewWdCT_Inline()
	for _, _accgga := range start.Attr {
		if _accgga.Name.Local == "distT" {
			_gfgbae, _cedgad := _dd.ParseUint(_accgga.Value, 10, 32)
			if _cedgad != nil {
				return _cedgad
			}
			_fdebgd := uint32(_gfgbae)
			_dfgdff.DistTAttr = &_fdebgd
			continue
		}
		if _accgga.Name.Local == "distB" {
			_gdada, _adeaadf := _dd.ParseUint(_accgga.Value, 10, 32)
			if _adeaadf != nil {
				return _adeaadf
			}
			_eecfa := uint32(_gdada)
			_dfgdff.DistBAttr = &_eecfa
			continue
		}
		if _accgga.Name.Local == "distR" {
			_gfgbab, _feebb := _dd.ParseUint(_accgga.Value, 10, 32)
			if _feebb != nil {
				return _feebb
			}
			_cagceb := uint32(_gfgbab)
			_dfgdff.DistRAttr = &_cagceb
			continue
		}
		if _accgga.Name.Local == "distL" {
			_egccg, _cbfcfg := _dd.ParseUint(_accgga.Value, 10, 32)
			if _cbfcfg != nil {
				return _cbfcfg
			}
			_afgcf := uint32(_egccg)
			_dfgdff.DistLAttr = &_afgcf
			continue
		}
	}
_efedd:
	for {
		_efdgfb, _adgcfc := d.Token()
		if _adgcfc != nil {
			return _adgcfc
		}
		switch _dcffe := _efdgfb.(type) {
		case _d.StartElement:
			switch _dcffe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extent"}:
				if _cecddfb := d.DecodeElement(_dfgdff.Extent, &_dcffe); _cecddfb != nil {
					return _cecddfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effectExtent"}:
				_dfgdff.EffectExtent = NewWdCT_EffectExtent()
				if _aceddg := d.DecodeElement(_dfgdff.EffectExtent, &_dcffe); _aceddg != nil {
					return _aceddg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPr"}:
				if _aebdca := d.DecodeElement(_dfgdff.DocPr, &_dcffe); _aebdca != nil {
					return _aebdca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvGraphicFramePr"}:
				_dfgdff.CNvGraphicFramePr = _eb.NewCT_NonVisualGraphicFrameProperties()
				if _cdcef := d.DecodeElement(_dfgdff.CNvGraphicFramePr, &_dcffe); _cdcef != nil {
					return _cdcef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain", Local: "graphic"}, _d.Name{Space: "http:/\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fmain", Local: "graphic"}:
				if _eddded := d.DecodeElement(_dfgdff.Graphic, &_dcffe); _eddded != nil {
					return _eddded
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdInline\u0020\u0025v", _dcffe.Name)
				if _deaae := d.Skip(); _deaae != nil {
					return _deaae
				}
			}
		case _d.EndElement:
			break _efedd
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_Background() *CT_Background   { _cddc := &CT_Background{}; return _cddc }
func NewCT_MarkupRange() *CT_MarkupRange { _ggbbf := &CT_MarkupRange{}; return _ggbbf }
func (_afebeg ST_TextDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bgdegg := _d.Attr{}
	_bgdegg.Name = name
	switch _afebeg {
	case ST_TextDirectionUnset:
		_bgdegg.Value = ""
	case ST_TextDirectionTb:
		_bgdegg.Value = "tb"
	case ST_TextDirectionRl:
		_bgdegg.Value = "rl"
	case ST_TextDirectionLr:
		_bgdegg.Value = "lr"
	case ST_TextDirectionTbV:
		_bgdegg.Value = "tbV"
	case ST_TextDirectionRlV:
		_bgdegg.Value = "rlV"
	case ST_TextDirectionLrV:
		_bgdegg.Value = "lrV"
	case ST_TextDirectionBtLr:
		_bgdegg.Value = "btLr"
	case ST_TextDirectionLrTb:
		_bgdegg.Value = "lrTb"
	case ST_TextDirectionLrTbV:
		_bgdegg.Value = "lrTbV"
	case ST_TextDirectionTbLrV:
		_bgdegg.Value = "tbLrV"
	case ST_TextDirectionTbRl:
		_bgdegg.Value = "tbRl"
	case ST_TextDirectionTbRlV:
		_bgdegg.Value = "tbRlV"
	}
	return _bgdegg, nil
}
func (_cbggc *CT_EdnProps) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cbggc.Pos != nil {
		_cbeea := _d.StartElement{Name: _d.Name{Local: "w:pos"}}
		e.EncodeElement(_cbggc.Pos, _cbeea)
	}
	if _cbggc.NumFmt != nil {
		_affge := _d.StartElement{Name: _d.Name{Local: "w:numFmt"}}
		e.EncodeElement(_cbggc.NumFmt, _affge)
	}
	if _cbggc.NumStart != nil {
		_afcab := _d.StartElement{Name: _d.Name{Local: "w:numStart"}}
		e.EncodeElement(_cbggc.NumStart, _afcab)
	}
	if _cbggc.NumRestart != nil {
		_bggac := _d.StartElement{Name: _d.Name{Local: "w:numRestart"}}
		e.EncodeElement(_cbggc.NumRestart, _bggac)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// UnmarshalXML implements the xml.Unmarshaler interface.
func (_fggbg *AlternateContentRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bafgcc:
	for {
		_faeab, _aggbdab := d.Token()
		if _aggbdab != nil {
			return _aggbdab
		}
		switch _ceagde := _faeab.(type) {
		case _d.StartElement:
			switch _ceagde.Name {
			case _d.Name{Space: _ebccbg, Local: "Choice"}:
				_fggbg.Choice = NewAC_ChoiceRun()
				if _afacef := d.DecodeElement(_fggbg.Choice, &_ceagde); _afacef != nil {
					return _afacef
				}
				for _, _edffe := range _ceagde.Attr {
					if _edffe.Name.Local == "Requires" {
						_fggbg.Choice._dafeee = _edffe.Value
						break
					}
				}
			case _d.Name{Space: _ebccbg, Local: "Fallback"}:
				if _eccccb, _eccggg := _ga.CreateElement(_ceagde); _eccggg != nil {
					return _eccggg
				} else {
					if _dbcge := d.DecodeElement(_eccccb, &_ceagde); _dbcge != nil {
						return _dbcge
					}
					_fggbg.Fallback = _eccccb
				}
			}
		case _d.EndElement:
			break _bafgcc
		case _d.CharData:
		}
	}
	return nil
}
func (_gdabe *CT_Drawing) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cgdde:
	for {
		_cgfb, _dedc := d.Token()
		if _dedc != nil {
			return _dedc
		}
		switch _ddbb := _cgfb.(type) {
		case _d.StartElement:
			switch _ddbb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "anchor"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "anchor"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "anchor"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "anchor"}:
				_deba := NewWdAnchor()
				if _agefd := d.DecodeElement(_deba, &_ddbb); _agefd != nil {
					return _agefd
				}
				_gdabe.Anchor = append(_gdabe.Anchor, _deba)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "inline"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "inline"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "inline"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "inline"}:
				_eeeee := NewWdInline()
				if _geffd := d.DecodeElement(_eeeee, &_ddbb); _geffd != nil {
					return _geffd
				}
				_gdabe.Inline = append(_gdabe.Inline, _eeeee)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_Drawing\u0020\u0025v", _ddbb.Name)
				if _fgdea := d.Skip(); _fgdea != nil {
					return _fgdea
				}
			}
		case _d.EndElement:
			break _cgdde
		case _d.CharData:
		}
	}
	return nil
}
func (_ddada *CT_TblGridChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _ddada.IdAttr)})
	e.EncodeToken(start)
	_fedca := _d.StartElement{Name: _d.Name{Local: "w:tblGrid"}}
	e.EncodeElement(_ddada.TblGrid, _fedca)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewEG_SectPrContents() *EG_SectPrContents { _fdaead := &EG_SectPrContents{}; return _fdaead }
func NewCT_String() *CT_String                 { _cdccc := &CT_String{}; return _cdccc }

// Validate validates the CT_TrackChangesView and its children
func (_ebaec *CT_TrackChangesView) Validate() error {
	return _ebaec.ValidateWithPath("CT_TrackChangesView")
}
func NewCT_TrPrChange() *CT_TrPrChange {
	_adeca := &CT_TrPrChange{}
	_adeca.TrPr = NewCT_TrPrBase()
	return _adeca
}

// Validate validates the CT_Row and its children
func (_gdagge *CT_Row) Validate() error { return _gdagge.ValidateWithPath("CT_Row") }
func (_efgbdf *WdWgp) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_efgbdf.WdCT_WordprocessingGroup = *NewWdCT_WordprocessingGroup()
_gebeb:
	for {
		_ebggcf, _afabfb := d.Token()
		if _afabfb != nil {
			return _afabfb
		}
		switch _fgefa := _ebggcf.(type) {
		case _d.StartElement:
			switch _fgefa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvPr"}:
				_efgbdf.CNvPr = _eb.NewCT_NonVisualDrawingProps()
				if _dafac := d.DecodeElement(_efgbdf.CNvPr, &_fgefa); _dafac != nil {
					return _dafac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvGrpSpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvGrpSpPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvGrpSpPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvGrpSpPr"}:
				if _edeaf := d.DecodeElement(_efgbdf.CNvGrpSpPr, &_fgefa); _edeaf != nil {
					return _edeaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "grpSpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "grpSpPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "grpSpPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "grpSpPr"}:
				if _dadcga := d.DecodeElement(_efgbdf.GrpSpPr, &_fgefa); _dadcga != nil {
					return _dadcga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wsp"}:
				_ecegbe := NewWdCT_WordprocessingGroupChoice()
				if _bffeg := d.DecodeElement(&_ecegbe.Wsp, &_fgefa); _bffeg != nil {
					return _bffeg
				}
				_efgbdf.Choice = append(_efgbdf.Choice, _ecegbe)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "grpSp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "grpSp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "grpSp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "grpSp"}:
				_dggcf := NewWdCT_WordprocessingGroupChoice()
				if _acddcb := d.DecodeElement(&_dggcf.GrpSp, &_fgefa); _acddcb != nil {
					return _acddcb
				}
				_efgbdf.Choice = append(_efgbdf.Choice, _dggcf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "graphicFrame"}:
				_gdgce := NewWdCT_WordprocessingGroupChoice()
				if _dfabcd := d.DecodeElement(&_gdgce.GraphicFrame, &_fgefa); _dfabcd != nil {
					return _dfabcd
				}
				_efgbdf.Choice = append(_efgbdf.Choice, _gdgce)
			case _d.Name{Space: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture", Local: "pic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fpicture", Local: "pic"}:
				_egdfde := NewWdCT_WordprocessingGroupChoice()
				if _ffbgba := d.DecodeElement(&_egdfde.Pic, &_fgefa); _ffbgba != nil {
					return _ffbgba
				}
				_efgbdf.Choice = append(_efgbdf.Choice, _egdfde)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}:
				_agfca := NewWdCT_WordprocessingGroupChoice()
				if _bccda := d.DecodeElement(&_agfca.ContentPart, &_fgefa); _bccda != nil {
					return _bccda
				}
				_efgbdf.Choice = append(_efgbdf.Choice, _agfca)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_efgbdf.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _affccc := d.DecodeElement(_efgbdf.ExtLst, &_fgefa); _affccc != nil {
					return _affccc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on WdWgp \u0025v", _fgefa.Name)
				if _gaecg := d.Skip(); _gaecg != nil {
					return _gaecg
				}
			}
		case _d.EndElement:
			break _gebeb
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumLvl and its children, prefixing error messages with path
func (_dddbd *CT_NumLvl) ValidateWithPath(path string) error {
	if _dddbd.StartOverride != nil {
		if _fcegc := _dddbd.StartOverride.ValidateWithPath(path + "\u002fStartOverride"); _fcegc != nil {
			return _fcegc
		}
	}
	if _dddbd.Lvl != nil {
		if _gggdb := _dddbd.Lvl.ValidateWithPath(path + "\u002fLvl"); _gggdb != nil {
			return _gggdb
		}
	}
	return nil
}
func (_baefa *CT_VMerge) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _baefa.ValAttr != ST_MergeUnset {
		_ccccef, _eecdeb := _baefa.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _eecdeb != nil {
			return _eecdeb
		}
		start.Attr = append(start.Attr, _ccccef)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the Endnotes and its children
func (_eaddb *Endnotes) Validate() error { return _eaddb.ValidateWithPath("Endnotes") }
func (_ffgfdc *WdCT_WordprocessingGroup) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffgfdc.CNvGrpSpPr = _eb.NewCT_NonVisualGroupDrawingShapeProps()
	_ffgfdc.GrpSpPr = _eb.NewCT_GroupShapeProperties()
_aedfdc:
	for {
		_bdceff, _ffcaab := d.Token()
		if _ffcaab != nil {
			return _ffcaab
		}
		switch _bdcdf := _bdceff.(type) {
		case _d.StartElement:
			switch _bdcdf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvPr"}:
				_ffgfdc.CNvPr = _eb.NewCT_NonVisualDrawingProps()
				if _aabbfd := d.DecodeElement(_ffgfdc.CNvPr, &_bdcdf); _aabbfd != nil {
					return _aabbfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvGrpSpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvGrpSpPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvGrpSpPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvGrpSpPr"}:
				if _bedddf := d.DecodeElement(_ffgfdc.CNvGrpSpPr, &_bdcdf); _bedddf != nil {
					return _bedddf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "grpSpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "grpSpPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "grpSpPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "grpSpPr"}:
				if _dabaa := d.DecodeElement(_ffgfdc.GrpSpPr, &_bdcdf); _dabaa != nil {
					return _dabaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wsp"}:
				_bgaad := NewWdCT_WordprocessingGroupChoice()
				if _ddegaf := d.DecodeElement(&_bgaad.Wsp, &_bdcdf); _ddegaf != nil {
					return _ddegaf
				}
				_ffgfdc.Choice = append(_ffgfdc.Choice, _bgaad)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "grpSp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "grpSp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "grpSp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "grpSp"}:
				_dcgdf := NewWdCT_WordprocessingGroupChoice()
				if _bcbfdc := d.DecodeElement(&_dcgdf.GrpSp, &_bdcdf); _bcbfdc != nil {
					return _bcbfdc
				}
				_ffgfdc.Choice = append(_ffgfdc.Choice, _dcgdf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "graphicFrame"}:
				_ddegef := NewWdCT_WordprocessingGroupChoice()
				if _efaed := d.DecodeElement(&_ddegef.GraphicFrame, &_bdcdf); _efaed != nil {
					return _efaed
				}
				_ffgfdc.Choice = append(_ffgfdc.Choice, _ddegef)
			case _d.Name{Space: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture", Local: "pic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fpicture", Local: "pic"}:
				_edccca := NewWdCT_WordprocessingGroupChoice()
				if _cgccfb := d.DecodeElement(&_edccca.Pic, &_bdcdf); _cgccfb != nil {
					return _cgccfb
				}
				_ffgfdc.Choice = append(_ffgfdc.Choice, _edccca)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}:
				_cggdfg := NewWdCT_WordprocessingGroupChoice()
				if _cfbaea := d.DecodeElement(&_cggdfg.ContentPart, &_bdcdf); _cfbaea != nil {
					return _cfbaea
				}
				_ffgfdc.Choice = append(_ffgfdc.Choice, _cggdfg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_ffgfdc.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _cafbdd := d.DecodeElement(_ffgfdc.ExtLst, &_bdcdf); _cafbdd != nil {
					return _cafbdd
				}
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020WdCT_WordprocessingGroup\u0020%v", _bdcdf.Name)
				if _adggd := d.Skip(); _adggd != nil {
					return _adggd
				}
			}
		case _d.EndElement:
			break _aedfdc
		case _d.CharData:
		}
	}
	return nil
}
func (_egeddc ST_TextAlignment) Validate() error { return _egeddc.ValidateWithPath("") }
func NewEG_ContentRunContent() *EG_ContentRunContent {
	_cbfda := &EG_ContentRunContent{}
	return _cbfda
}

type ST_FFTextType byte

func NewCT_TrPr() *CT_TrPr { _efda := &CT_TrPr{}; return _efda }

// ValidateWithPath validates the CT_Control and its children, prefixing error messages with path
func (_cebbf *CT_Control) ValidateWithPath(path string) error { return nil }
func (_ggdec *CT_TblGridBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fcddcg:
	for {
		_ffacg, _degaa := d.Token()
		if _degaa != nil {
			return _degaa
		}
		switch _daccg := _ffacg.(type) {
		case _d.StartElement:
			switch _daccg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridCol"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridCol"}:
				_daaf := NewCT_TblGridCol()
				if _fafgg := d.DecodeElement(_daaf, &_daccg); _fafgg != nil {
					return _fafgg
				}
				_ggdec.GridCol = append(_ggdec.GridCol, _daaf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TblGridBase\u0020\u0025v", _daccg.Name)
				if _facfb := d.Skip(); _facfb != nil {
					return _facfb
				}
			}
		case _d.EndElement:
			break _fcddcg
		case _d.CharData:
		}
	}
	return nil
}
func (_ddgce *ST_FFTextType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ddgce = 0
	case "regular":
		*_ddgce = 1
	case "number":
		*_ddgce = 2
	case "date":
		*_ddgce = 3
	case "currentTime":
		*_ddgce = 4
	case "currentDate":
		*_ddgce = 5
	case "calculated":
		*_ddgce = 6
	}
	return nil
}
func NewCT_SdtContentCell() *CT_SdtContentCell   { _agbbd := &CT_SdtContentCell{}; return _agbbd }
func NewCT_SdtDropDownList() *CT_SdtDropDownList { _badbag := &CT_SdtDropDownList{}; return _badbag }
func (_gddf *CT_LatentStyles) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gfcbd := range start.Attr {
		if _gfcbd.Name.Local == "defLockedState" {
			_fbgfb, _ecadg := ParseUnionST_OnOff(_gfcbd.Value)
			if _ecadg != nil {
				return _ecadg
			}
			_gddf.DefLockedStateAttr = &_fbgfb
			continue
		}
		if _gfcbd.Name.Local == "defUIPriority" {
			_cecbc, _acgf := _dd.ParseInt(_gfcbd.Value, 10, 64)
			if _acgf != nil {
				return _acgf
			}
			_gddf.DefUIPriorityAttr = &_cecbc
			continue
		}
		if _gfcbd.Name.Local == "defSemiHidden" {
			_fbebb, _afeed := ParseUnionST_OnOff(_gfcbd.Value)
			if _afeed != nil {
				return _afeed
			}
			_gddf.DefSemiHiddenAttr = &_fbebb
			continue
		}
		if _gfcbd.Name.Local == "defUnhideWhenUsed" {
			_ffda, _ecgf := ParseUnionST_OnOff(_gfcbd.Value)
			if _ecgf != nil {
				return _ecgf
			}
			_gddf.DefUnhideWhenUsedAttr = &_ffda
			continue
		}
		if _gfcbd.Name.Local == "defQFormat" {
			_agegb, _cfbba := ParseUnionST_OnOff(_gfcbd.Value)
			if _cfbba != nil {
				return _cfbba
			}
			_gddf.DefQFormatAttr = &_agegb
			continue
		}
		if _gfcbd.Name.Local == "count" {
			_cdgf, _bcbbb := _dd.ParseInt(_gfcbd.Value, 10, 64)
			if _bcbbb != nil {
				return _bcbbb
			}
			_gddf.CountAttr = &_cdgf
			continue
		}
	}
_cdgae:
	for {
		_bdeag, _eaagag := d.Token()
		if _eaagag != nil {
			return _eaagag
		}
		switch _abgdc := _bdeag.(type) {
		case _d.StartElement:
			switch _abgdc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lsdException"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lsdException"}:
				_ecada := NewCT_LsdException()
				if _bgbae := d.DecodeElement(_ecada, &_abgdc); _bgbae != nil {
					return _bgbae
				}
				_gddf.LsdException = append(_gddf.LsdException, _ecada)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_LatentStyles\u0020\u0025v", _abgdc.Name)
				if _bgcba := d.Skip(); _bgcba != nil {
					return _bgcba
				}
			}
		case _d.EndElement:
			break _cdgae
		case _d.CharData:
		}
	}
	return nil
}
func (_aabdd *Document) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:mc"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fmarkup\u002dcompatibility\u002f2006"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wps"}, Value: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:document"
	return _aabdd.CT_Document.MarshalXML(e, start)
}

type CT_PPrChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
	PPr    *CT_PPrBase
}

func (_ffcefd *CT_TblGridBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ffcefd.GridCol != nil {
		_aefec := _d.StartElement{Name: _d.Name{Local: "w:gridCol"}}
		for _, _bdcgd := range _ffcefd.GridCol {
			e.EncodeElement(_bdcgd, _aefec)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewEG_RPrContent() *EG_RPrContent { _aagda := &EG_RPrContent{}; return _aagda }

// Validate validates the EG_PContentMath and its children
func (_ggbeafb *EG_PContentMath) Validate() error {
	return _ggbeafb.ValidateWithPath("EG_PContentMath")
}

type CT_MailMergeDest struct {

	// Mail Merge Merged Document Type
	ValAttr ST_MailMergeDest
}

// ValidateWithPath validates the CT_CompatSetting and its children, prefixing error messages with path
func (_eccf *CT_CompatSetting) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_Attr and its children, prefixing error messages with path
func (_bfd *CT_Attr) ValidateWithPath(path string) error { return nil }
func NewCT_FFData() *CT_FFData                           { _cacda := &CT_FFData{}; return _cacda }
func (_deefd *CT_SimpleField) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _deabd := range start.Attr {
		if _deabd.Name.Local == "instr" {
			_bceac, _defgf := _deabd.Value, error(nil)
			if _defgf != nil {
				return _defgf
			}
			_deefd.InstrAttr = _bceac
			continue
		}
		if _deabd.Name.Local == "fldLock" {
			_ddaee, _aagbe := ParseUnionST_OnOff(_deabd.Value)
			if _aagbe != nil {
				return _aagbe
			}
			_deefd.FldLockAttr = &_ddaee
			continue
		}
		if _deabd.Name.Local == "dirty" {
			_fbcef, _acebc := ParseUnionST_OnOff(_deabd.Value)
			if _acebc != nil {
				return _acebc
			}
			_deefd.DirtyAttr = &_fbcef
			continue
		}
	}
_daag:
	for {
		_ffggcb, _gaefb := d.Token()
		if _gaefb != nil {
			return _gaefb
		}
		switch _afedga := _ffggcb.(type) {
		case _d.StartElement:
			switch _afedga.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldData"}:
				_deefd.FldData = NewCT_Text()
				if _fbage := d.DecodeElement(_deefd.FldData, &_afedga); _fbage != nil {
					return _fbage
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_fgcbc := NewEG_PContent()
				_abadd := NewCT_SimpleField()
				if _dggbcd := d.DecodeElement(_abadd, &_afedga); _dggbcd != nil {
					return _dggbcd
				}
				_fgcbc.FldSimple = append(_fgcbc.FldSimple, _abadd)
				_deefd.EG_PContent = append(_deefd.EG_PContent, _fgcbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_ggddf := NewEG_PContent()
				_ggddf.Hyperlink = NewCT_Hyperlink()
				if _ebgdg := d.DecodeElement(_ggddf.Hyperlink, &_afedga); _ebgdg != nil {
					return _ebgdg
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _ggddf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_begab := NewEG_PContent()
				_begab.SubDoc = NewCT_Rel()
				if _cfdbg := d.DecodeElement(_begab.SubDoc, &_afedga); _cfdbg != nil {
					return _cfdbg
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _begab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_ggdaa := NewEG_PContent()
				_gafdf := NewEG_ContentRunContent()
				_gafdf.CustomXml = NewCT_CustomXmlRun()
				if _cbgedg := d.DecodeElement(_gafdf.CustomXml, &_afedga); _cbgedg != nil {
					return _cbgedg
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _ggdaa)
				_ggdaa.EG_ContentRunContent = append(_ggdaa.EG_ContentRunContent, _gafdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_fadbgb := NewEG_PContent()
				_aacgb := NewEG_ContentRunContent()
				_aacgb.SmartTag = NewCT_SmartTagRun()
				if _bfdfdd := d.DecodeElement(_aacgb.SmartTag, &_afedga); _bfdfdd != nil {
					return _bfdfdd
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _fadbgb)
				_fadbgb.EG_ContentRunContent = append(_fadbgb.EG_ContentRunContent, _aacgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_bfefb := NewEG_PContent()
				_bbccgg := NewEG_ContentRunContent()
				_bbccgg.Sdt = NewCT_SdtRun()
				if _dgabe := d.DecodeElement(_bbccgg.Sdt, &_afedga); _dgabe != nil {
					return _dgabe
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _bfefb)
				_bfefb.EG_ContentRunContent = append(_bfefb.EG_ContentRunContent, _bbccgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_abcf := NewEG_PContent()
				_dbecc := NewEG_ContentRunContent()
				_dbecc.Dir = NewCT_DirContentRun()
				if _ddgga := d.DecodeElement(_dbecc.Dir, &_afedga); _ddgga != nil {
					return _ddgga
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _abcf)
				_abcf.EG_ContentRunContent = append(_abcf.EG_ContentRunContent, _dbecc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_eegcg := NewEG_PContent()
				_gcbgde := NewEG_ContentRunContent()
				_gcbgde.Bdo = NewCT_BdoContentRun()
				if _gebaed := d.DecodeElement(_gcbgde.Bdo, &_afedga); _gebaed != nil {
					return _gebaed
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _eegcg)
				_eegcg.EG_ContentRunContent = append(_eegcg.EG_ContentRunContent, _gcbgde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_egcdf := NewEG_PContent()
				_ggeec := NewEG_ContentRunContent()
				_ggeec.R = NewCT_R()
				if _cfcee := d.DecodeElement(_ggeec.R, &_afedga); _cfcee != nil {
					return _cfcee
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _egcdf)
				_egcdf.EG_ContentRunContent = append(_egcdf.EG_ContentRunContent, _ggeec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_efaba := NewEG_PContent()
				_cdeee := NewEG_ContentRunContent()
				_bcdeg := NewEG_RunLevelElts()
				_bcdeg.ProofErr = NewCT_ProofErr()
				if _ebbfb := d.DecodeElement(_bcdeg.ProofErr, &_afedga); _ebbfb != nil {
					return _ebbfb
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _efaba)
				_efaba.EG_ContentRunContent = append(_efaba.EG_ContentRunContent, _cdeee)
				_cdeee.EG_RunLevelElts = append(_cdeee.EG_RunLevelElts, _bcdeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ffebd := NewEG_PContent()
				_gdbad := NewEG_ContentRunContent()
				_gaafg := NewEG_RunLevelElts()
				_gaafg.PermStart = NewCT_PermStart()
				if _ggbae := d.DecodeElement(_gaafg.PermStart, &_afedga); _ggbae != nil {
					return _ggbae
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _ffebd)
				_ffebd.EG_ContentRunContent = append(_ffebd.EG_ContentRunContent, _gdbad)
				_gdbad.EG_RunLevelElts = append(_gdbad.EG_RunLevelElts, _gaafg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_abbbb := NewEG_PContent()
				_fdfedf := NewEG_ContentRunContent()
				_accbg := NewEG_RunLevelElts()
				_accbg.PermEnd = NewCT_Perm()
				if _debee := d.DecodeElement(_accbg.PermEnd, &_afedga); _debee != nil {
					return _debee
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _abbbb)
				_abbbb.EG_ContentRunContent = append(_abbbb.EG_ContentRunContent, _fdfedf)
				_fdfedf.EG_RunLevelElts = append(_fdfedf.EG_RunLevelElts, _accbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_gbdddd := NewEG_PContent()
				_dbfaec := NewEG_ContentRunContent()
				_gcdacc := NewEG_RunLevelElts()
				_gcdacc.Ins = NewCT_RunTrackChange()
				if _dgaeae := d.DecodeElement(_gcdacc.Ins, &_afedga); _dgaeae != nil {
					return _dgaeae
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _gbdddd)
				_gbdddd.EG_ContentRunContent = append(_gbdddd.EG_ContentRunContent, _dbfaec)
				_dbfaec.EG_RunLevelElts = append(_dbfaec.EG_RunLevelElts, _gcdacc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_aaabff := NewEG_PContent()
				_gbcffb := NewEG_ContentRunContent()
				_gcadd := NewEG_RunLevelElts()
				_gcadd.Del = NewCT_RunTrackChange()
				if _fcbbf := d.DecodeElement(_gcadd.Del, &_afedga); _fcbbf != nil {
					return _fcbbf
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _aaabff)
				_aaabff.EG_ContentRunContent = append(_aaabff.EG_ContentRunContent, _gbcffb)
				_gbcffb.EG_RunLevelElts = append(_gbcffb.EG_RunLevelElts, _gcadd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_gfcac := NewEG_PContent()
				_cecac := NewEG_ContentRunContent()
				_fffca := NewEG_RunLevelElts()
				_fffca.MoveFrom = NewCT_RunTrackChange()
				if _fbcded := d.DecodeElement(_fffca.MoveFrom, &_afedga); _fbcded != nil {
					return _fbcded
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _gfcac)
				_gfcac.EG_ContentRunContent = append(_gfcac.EG_ContentRunContent, _cecac)
				_cecac.EG_RunLevelElts = append(_cecac.EG_RunLevelElts, _fffca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_aeecg := NewEG_PContent()
				_cdgeb := NewEG_ContentRunContent()
				_gddbe := NewEG_RunLevelElts()
				_gddbe.MoveTo = NewCT_RunTrackChange()
				if _feddde := d.DecodeElement(_gddbe.MoveTo, &_afedga); _feddde != nil {
					return _feddde
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _aeecg)
				_aeecg.EG_ContentRunContent = append(_aeecg.EG_ContentRunContent, _cdgeb)
				_cdgeb.EG_RunLevelElts = append(_cdgeb.EG_RunLevelElts, _gddbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_geggd := NewEG_PContent()
				_gegfb := NewEG_ContentRunContent()
				_agfbef := NewEG_RunLevelElts()
				_dabba := NewEG_RangeMarkupElements()
				_dabba.BookmarkStart = NewCT_Bookmark()
				if _egafg := d.DecodeElement(_dabba.BookmarkStart, &_afedga); _egafg != nil {
					return _egafg
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _geggd)
				_geggd.EG_ContentRunContent = append(_geggd.EG_ContentRunContent, _gegfb)
				_gegfb.EG_RunLevelElts = append(_gegfb.EG_RunLevelElts, _agfbef)
				_agfbef.EG_RangeMarkupElements = append(_agfbef.EG_RangeMarkupElements, _dabba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_gdbccb := NewEG_PContent()
				_adcgg := NewEG_ContentRunContent()
				_fegcf := NewEG_RunLevelElts()
				_ebedg := NewEG_RangeMarkupElements()
				_ebedg.BookmarkEnd = NewCT_MarkupRange()
				if _cddcf := d.DecodeElement(_ebedg.BookmarkEnd, &_afedga); _cddcf != nil {
					return _cddcf
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _gdbccb)
				_gdbccb.EG_ContentRunContent = append(_gdbccb.EG_ContentRunContent, _adcgg)
				_adcgg.EG_RunLevelElts = append(_adcgg.EG_RunLevelElts, _fegcf)
				_fegcf.EG_RangeMarkupElements = append(_fegcf.EG_RangeMarkupElements, _ebedg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_egbbbg := NewEG_PContent()
				_agbff := NewEG_ContentRunContent()
				_fbcedc := NewEG_RunLevelElts()
				_cbced := NewEG_RangeMarkupElements()
				_cbced.MoveFromRangeStart = NewCT_MoveBookmark()
				if _dgdba := d.DecodeElement(_cbced.MoveFromRangeStart, &_afedga); _dgdba != nil {
					return _dgdba
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _egbbbg)
				_egbbbg.EG_ContentRunContent = append(_egbbbg.EG_ContentRunContent, _agbff)
				_agbff.EG_RunLevelElts = append(_agbff.EG_RunLevelElts, _fbcedc)
				_fbcedc.EG_RangeMarkupElements = append(_fbcedc.EG_RangeMarkupElements, _cbced)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_cadce := NewEG_PContent()
				_fbaac := NewEG_ContentRunContent()
				_aadecc := NewEG_RunLevelElts()
				_fecfae := NewEG_RangeMarkupElements()
				_fecfae.MoveFromRangeEnd = NewCT_MarkupRange()
				if _fgcd := d.DecodeElement(_fecfae.MoveFromRangeEnd, &_afedga); _fgcd != nil {
					return _fgcd
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _cadce)
				_cadce.EG_ContentRunContent = append(_cadce.EG_ContentRunContent, _fbaac)
				_fbaac.EG_RunLevelElts = append(_fbaac.EG_RunLevelElts, _aadecc)
				_aadecc.EG_RangeMarkupElements = append(_aadecc.EG_RangeMarkupElements, _fecfae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_cfeabge := NewEG_PContent()
				_abgca := NewEG_ContentRunContent()
				_agfdad := NewEG_RunLevelElts()
				_agdaf := NewEG_RangeMarkupElements()
				_agdaf.MoveToRangeStart = NewCT_MoveBookmark()
				if _fbafb := d.DecodeElement(_agdaf.MoveToRangeStart, &_afedga); _fbafb != nil {
					return _fbafb
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _cfeabge)
				_cfeabge.EG_ContentRunContent = append(_cfeabge.EG_ContentRunContent, _abgca)
				_abgca.EG_RunLevelElts = append(_abgca.EG_RunLevelElts, _agfdad)
				_agfdad.EG_RangeMarkupElements = append(_agfdad.EG_RangeMarkupElements, _agdaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_acbed := NewEG_PContent()
				_fbdc := NewEG_ContentRunContent()
				_dgcag := NewEG_RunLevelElts()
				_acagdgc := NewEG_RangeMarkupElements()
				_acagdgc.MoveToRangeEnd = NewCT_MarkupRange()
				if _cedebd := d.DecodeElement(_acagdgc.MoveToRangeEnd, &_afedga); _cedebd != nil {
					return _cedebd
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _acbed)
				_acbed.EG_ContentRunContent = append(_acbed.EG_ContentRunContent, _fbdc)
				_fbdc.EG_RunLevelElts = append(_fbdc.EG_RunLevelElts, _dgcag)
				_dgcag.EG_RangeMarkupElements = append(_dgcag.EG_RangeMarkupElements, _acagdgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_dfgcc := NewEG_PContent()
				_ggaccg := NewEG_ContentRunContent()
				_gbbde := NewEG_RunLevelElts()
				_dbbgbf := NewEG_RangeMarkupElements()
				_dbbgbf.CommentRangeStart = NewCT_MarkupRange()
				if _afafff := d.DecodeElement(_dbbgbf.CommentRangeStart, &_afedga); _afafff != nil {
					return _afafff
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _dfgcc)
				_dfgcc.EG_ContentRunContent = append(_dfgcc.EG_ContentRunContent, _ggaccg)
				_ggaccg.EG_RunLevelElts = append(_ggaccg.EG_RunLevelElts, _gbbde)
				_gbbde.EG_RangeMarkupElements = append(_gbbde.EG_RangeMarkupElements, _dbbgbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_afbbg := NewEG_PContent()
				_bffcb := NewEG_ContentRunContent()
				_cccae := NewEG_RunLevelElts()
				_bfegfc := NewEG_RangeMarkupElements()
				_bfegfc.CommentRangeEnd = NewCT_MarkupRange()
				if _ebdbg := d.DecodeElement(_bfegfc.CommentRangeEnd, &_afedga); _ebdbg != nil {
					return _ebdbg
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _afbbg)
				_afbbg.EG_ContentRunContent = append(_afbbg.EG_ContentRunContent, _bffcb)
				_bffcb.EG_RunLevelElts = append(_bffcb.EG_RunLevelElts, _cccae)
				_cccae.EG_RangeMarkupElements = append(_cccae.EG_RangeMarkupElements, _bfegfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_dgcgcb := NewEG_PContent()
				_afbgee := NewEG_ContentRunContent()
				_gdacd := NewEG_RunLevelElts()
				_gdedgc := NewEG_RangeMarkupElements()
				_gdedgc.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _dedcd := d.DecodeElement(_gdedgc.CustomXmlInsRangeStart, &_afedga); _dedcd != nil {
					return _dedcd
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _dgcgcb)
				_dgcgcb.EG_ContentRunContent = append(_dgcgcb.EG_ContentRunContent, _afbgee)
				_afbgee.EG_RunLevelElts = append(_afbgee.EG_RunLevelElts, _gdacd)
				_gdacd.EG_RangeMarkupElements = append(_gdacd.EG_RangeMarkupElements, _gdedgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_fagcd := NewEG_PContent()
				_ffged := NewEG_ContentRunContent()
				_cdfgb := NewEG_RunLevelElts()
				_afegb := NewEG_RangeMarkupElements()
				_afegb.CustomXmlInsRangeEnd = NewCT_Markup()
				if _bacbgc := d.DecodeElement(_afegb.CustomXmlInsRangeEnd, &_afedga); _bacbgc != nil {
					return _bacbgc
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _fagcd)
				_fagcd.EG_ContentRunContent = append(_fagcd.EG_ContentRunContent, _ffged)
				_ffged.EG_RunLevelElts = append(_ffged.EG_RunLevelElts, _cdfgb)
				_cdfgb.EG_RangeMarkupElements = append(_cdfgb.EG_RangeMarkupElements, _afegb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_edffa := NewEG_PContent()
				_bdbcf := NewEG_ContentRunContent()
				_cdfbe := NewEG_RunLevelElts()
				_fbdce := NewEG_RangeMarkupElements()
				_fbdce.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _fcfaab := d.DecodeElement(_fbdce.CustomXmlDelRangeStart, &_afedga); _fcfaab != nil {
					return _fcfaab
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _edffa)
				_edffa.EG_ContentRunContent = append(_edffa.EG_ContentRunContent, _bdbcf)
				_bdbcf.EG_RunLevelElts = append(_bdbcf.EG_RunLevelElts, _cdfbe)
				_cdfbe.EG_RangeMarkupElements = append(_cdfbe.EG_RangeMarkupElements, _fbdce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_begfe := NewEG_PContent()
				_fdfcc := NewEG_ContentRunContent()
				_bdagga := NewEG_RunLevelElts()
				_gefgc := NewEG_RangeMarkupElements()
				_gefgc.CustomXmlDelRangeEnd = NewCT_Markup()
				if _dbdba := d.DecodeElement(_gefgc.CustomXmlDelRangeEnd, &_afedga); _dbdba != nil {
					return _dbdba
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _begfe)
				_begfe.EG_ContentRunContent = append(_begfe.EG_ContentRunContent, _fdfcc)
				_fdfcc.EG_RunLevelElts = append(_fdfcc.EG_RunLevelElts, _bdagga)
				_bdagga.EG_RangeMarkupElements = append(_bdagga.EG_RangeMarkupElements, _gefgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_bebede := NewEG_PContent()
				_cfgbac := NewEG_ContentRunContent()
				_gafaa := NewEG_RunLevelElts()
				_fccffe := NewEG_RangeMarkupElements()
				_fccffe.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _acbfae := d.DecodeElement(_fccffe.CustomXmlMoveFromRangeStart, &_afedga); _acbfae != nil {
					return _acbfae
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _bebede)
				_bebede.EG_ContentRunContent = append(_bebede.EG_ContentRunContent, _cfgbac)
				_cfgbac.EG_RunLevelElts = append(_cfgbac.EG_RunLevelElts, _gafaa)
				_gafaa.EG_RangeMarkupElements = append(_gafaa.EG_RangeMarkupElements, _fccffe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_ffdcb := NewEG_PContent()
				_gcfec := NewEG_ContentRunContent()
				_edbaa := NewEG_RunLevelElts()
				_afbced := NewEG_RangeMarkupElements()
				_afbced.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _aggff := d.DecodeElement(_afbced.CustomXmlMoveFromRangeEnd, &_afedga); _aggff != nil {
					return _aggff
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _ffdcb)
				_ffdcb.EG_ContentRunContent = append(_ffdcb.EG_ContentRunContent, _gcfec)
				_gcfec.EG_RunLevelElts = append(_gcfec.EG_RunLevelElts, _edbaa)
				_edbaa.EG_RangeMarkupElements = append(_edbaa.EG_RangeMarkupElements, _afbced)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_dfabc := NewEG_PContent()
				_fbdef := NewEG_ContentRunContent()
				_bbggbb := NewEG_RunLevelElts()
				_ecabe := NewEG_RangeMarkupElements()
				_ecabe.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _ccbdeg := d.DecodeElement(_ecabe.CustomXmlMoveToRangeStart, &_afedga); _ccbdeg != nil {
					return _ccbdeg
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _dfabc)
				_dfabc.EG_ContentRunContent = append(_dfabc.EG_ContentRunContent, _fbdef)
				_fbdef.EG_RunLevelElts = append(_fbdef.EG_RunLevelElts, _bbggbb)
				_bbggbb.EG_RangeMarkupElements = append(_bbggbb.EG_RangeMarkupElements, _ecabe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_babff := NewEG_PContent()
				_fgdeb := NewEG_ContentRunContent()
				_gcdgc := NewEG_RunLevelElts()
				_ddgae := NewEG_RangeMarkupElements()
				_ddgae.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _egbge := d.DecodeElement(_ddgae.CustomXmlMoveToRangeEnd, &_afedga); _egbge != nil {
					return _egbge
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _babff)
				_babff.EG_ContentRunContent = append(_babff.EG_ContentRunContent, _fgdeb)
				_fgdeb.EG_RunLevelElts = append(_fgdeb.EG_RunLevelElts, _gcdgc)
				_gcdgc.EG_RangeMarkupElements = append(_gcdgc.EG_RangeMarkupElements, _ddgae)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_eeeca := NewEG_PContent()
				_fdfdf := NewEG_ContentRunContent()
				_acgae := NewEG_RunLevelElts()
				_gefbd := NewEG_MathContent()
				_gefbd.OMathPara = _f.NewOMathPara()
				if _beceg := d.DecodeElement(_gefbd.OMathPara, &_afedga); _beceg != nil {
					return _beceg
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _eeeca)
				_eeeca.EG_ContentRunContent = append(_eeeca.EG_ContentRunContent, _fdfdf)
				_fdfdf.EG_RunLevelElts = append(_fdfdf.EG_RunLevelElts, _acgae)
				_acgae.EG_MathContent = append(_acgae.EG_MathContent, _gefbd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_gbddde := NewEG_PContent()
				_bcebg := NewEG_ContentRunContent()
				_bdcec := NewEG_RunLevelElts()
				_gfdfb := NewEG_MathContent()
				_gfdfb.OMath = _f.NewOMath()
				if _eaefa := d.DecodeElement(_gfdfb.OMath, &_afedga); _eaefa != nil {
					return _eaefa
				}
				_deefd.EG_PContent = append(_deefd.EG_PContent, _gbddde)
				_gbddde.EG_ContentRunContent = append(_gbddde.EG_ContentRunContent, _bcebg)
				_bcebg.EG_RunLevelElts = append(_bcebg.EG_RunLevelElts, _bdcec)
				_bdcec.EG_MathContent = append(_bdcec.EG_MathContent, _gfdfb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SimpleField\u0020\u0025v", _afedga.Name)
				if _addcga := d.Skip(); _addcga != nil {
					return _addcga
				}
			}
		case _d.EndElement:
			break _daag
		case _d.CharData:
		}
	}
	return nil
}
func (_cgfda *CT_Language) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cgfda.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_cgfda.ValAttr)})
	}
	if _cgfda.EastAsiaAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:eastAsia"}, Value: _b.Sprintf("\u0025v", *_cgfda.EastAsiaAttr)})
	}
	if _cgfda.BidiAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:bidi"}, Value: _b.Sprintf("\u0025v", *_cgfda.BidiAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DocPart and its children
func (_ffaf *CT_DocPart) Validate() error { return _ffaf.ValidateWithPath("CT_DocPart") }
func (_acaege ST_TabJc) Validate() error  { return _acaege.ValidateWithPath("") }
func NewGlossaryDocument() *GlossaryDocument {
	_ecgab := &GlossaryDocument{}
	_ecgab.CT_GlossaryDocument = *NewCT_GlossaryDocument()
	return _ecgab
}

// ValidateWithPath validates the CT_MacroName and its children, prefixing error messages with path
func (_bddde *CT_MacroName) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_TcPrChange and its children, prefixing error messages with path
func (_gcebe *CT_TcPrChange) ValidateWithPath(path string) error {
	if _cgccda := _gcebe.TcPr.ValidateWithPath(path + "\u002fTcPr"); _cgccda != nil {
		return _cgccda
	}
	return nil
}
func (_fabg *CT_Fonts) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fabg.HintAttr != ST_HintUnset {
		_febgb, _eged := _fabg.HintAttr.MarshalXMLAttr(_d.Name{Local: "w:hint"})
		if _eged != nil {
			return _eged
		}
		start.Attr = append(start.Attr, _febgb)
	}
	if _fabg.AsciiAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:ascii"}, Value: _b.Sprintf("\u0025v", *_fabg.AsciiAttr)})
	}
	if _fabg.HAnsiAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hAnsi"}, Value: _b.Sprintf("\u0025v", *_fabg.HAnsiAttr)})
	}
	if _fabg.EastAsiaAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:eastAsia"}, Value: _b.Sprintf("\u0025v", *_fabg.EastAsiaAttr)})
	}
	if _fabg.CsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cs"}, Value: _b.Sprintf("\u0025v", *_fabg.CsAttr)})
	}
	if _fabg.AsciiThemeAttr != ST_ThemeUnset {
		_dcdee, _ccgae := _fabg.AsciiThemeAttr.MarshalXMLAttr(_d.Name{Local: "w:asciiTheme"})
		if _ccgae != nil {
			return _ccgae
		}
		start.Attr = append(start.Attr, _dcdee)
	}
	if _fabg.HAnsiThemeAttr != ST_ThemeUnset {
		_abded, _aebc := _fabg.HAnsiThemeAttr.MarshalXMLAttr(_d.Name{Local: "w:hAnsiTheme"})
		if _aebc != nil {
			return _aebc
		}
		start.Attr = append(start.Attr, _abded)
	}
	if _fabg.EastAsiaThemeAttr != ST_ThemeUnset {
		_fffab, _egefc := _fabg.EastAsiaThemeAttr.MarshalXMLAttr(_d.Name{Local: "w:eastAsiaTheme"})
		if _egefc != nil {
			return _egefc
		}
		start.Attr = append(start.Attr, _fffab)
	}
	if _fabg.CsthemeAttr != ST_ThemeUnset {
		_dffab, _aabaf := _fabg.CsthemeAttr.MarshalXMLAttr(_d.Name{Local: "w:cstheme"})
		if _aabaf != nil {
			return _aabaf
		}
		start.Attr = append(start.Attr, _dffab)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gdddd *CT_PPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ebadf:
	for {
		_bcfb, _cdefb := d.Token()
		if _cdefb != nil {
			return _cdefb
		}
		switch _badf := _bcfb.(type) {
		case _d.StartElement:
			switch _badf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pStyle"}:
				_gdddd.PStyle = NewCT_String()
				if _aabga := d.DecodeElement(_gdddd.PStyle, &_badf); _aabga != nil {
					return _aabga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "keepNext"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "keepNext"}:
				_gdddd.KeepNext = NewCT_OnOff()
				if _fbabd := d.DecodeElement(_gdddd.KeepNext, &_badf); _fbabd != nil {
					return _fbabd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "keepLines"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "keepLines"}:
				_gdddd.KeepLines = NewCT_OnOff()
				if _acggg := d.DecodeElement(_gdddd.KeepLines, &_badf); _acggg != nil {
					return _acggg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pageBreakBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pageBreakBefore"}:
				_gdddd.PageBreakBefore = NewCT_OnOff()
				if _aegcb := d.DecodeElement(_gdddd.PageBreakBefore, &_badf); _aegcb != nil {
					return _aegcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "framePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "framePr"}:
				_gdddd.FramePr = NewCT_FramePr()
				if _efaad := d.DecodeElement(_gdddd.FramePr, &_badf); _efaad != nil {
					return _efaad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "widowControl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "widowControl"}:
				_gdddd.WidowControl = NewCT_OnOff()
				if _ebceg := d.DecodeElement(_gdddd.WidowControl, &_badf); _ebceg != nil {
					return _ebceg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numPr"}:
				_gdddd.NumPr = NewCT_NumPr()
				if _gaggf := d.DecodeElement(_gdddd.NumPr, &_badf); _gaggf != nil {
					return _gaggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressLineNumbers"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressLineNumbers"}:
				_gdddd.SuppressLineNumbers = NewCT_OnOff()
				if _bgcce := d.DecodeElement(_gdddd.SuppressLineNumbers, &_badf); _bgcce != nil {
					return _bgcce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pBdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pBdr"}:
				_gdddd.PBdr = NewCT_PBdr()
				if _gcafec := d.DecodeElement(_gdddd.PBdr, &_badf); _gcafec != nil {
					return _gcafec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_gdddd.Shd = NewCT_Shd()
				if _dgbbf := d.DecodeElement(_gdddd.Shd, &_badf); _dgbbf != nil {
					return _dgbbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tabs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tabs"}:
				_gdddd.Tabs = NewCT_Tabs()
				if _cbede := d.DecodeElement(_gdddd.Tabs, &_badf); _cbede != nil {
					return _cbede
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressAutoHyphens"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressAutoHyphens"}:
				_gdddd.SuppressAutoHyphens = NewCT_OnOff()
				if _aagae := d.DecodeElement(_gdddd.SuppressAutoHyphens, &_badf); _aagae != nil {
					return _aagae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kinsoku"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kinsoku"}:
				_gdddd.Kinsoku = NewCT_OnOff()
				if _dagce := d.DecodeElement(_gdddd.Kinsoku, &_badf); _dagce != nil {
					return _dagce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wordWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wordWrap"}:
				_gdddd.WordWrap = NewCT_OnOff()
				if _agaba := d.DecodeElement(_gdddd.WordWrap, &_badf); _agaba != nil {
					return _agaba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "overflowPunct"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "overflowPunct"}:
				_gdddd.OverflowPunct = NewCT_OnOff()
				if _ccdg := d.DecodeElement(_gdddd.OverflowPunct, &_badf); _ccdg != nil {
					return _ccdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "topLinePunct"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "topLinePunct"}:
				_gdddd.TopLinePunct = NewCT_OnOff()
				if _aeeeaa := d.DecodeElement(_gdddd.TopLinePunct, &_badf); _aeeeaa != nil {
					return _aeeeaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoSpaceDE"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoSpaceDE"}:
				_gdddd.AutoSpaceDE = NewCT_OnOff()
				if _fegfb := d.DecodeElement(_gdddd.AutoSpaceDE, &_badf); _fegfb != nil {
					return _fegfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoSpaceDN"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoSpaceDN"}:
				_gdddd.AutoSpaceDN = NewCT_OnOff()
				if _afdaa := d.DecodeElement(_gdddd.AutoSpaceDN, &_badf); _afdaa != nil {
					return _afdaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidi"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidi"}:
				_gdddd.Bidi = NewCT_OnOff()
				if _bffe := d.DecodeElement(_gdddd.Bidi, &_badf); _bffe != nil {
					return _bffe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "adjustRightInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "adjustRightInd"}:
				_gdddd.AdjustRightInd = NewCT_OnOff()
				if _faccf := d.DecodeElement(_gdddd.AdjustRightInd, &_badf); _faccf != nil {
					return _faccf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_gdddd.SnapToGrid = NewCT_OnOff()
				if _affaa := d.DecodeElement(_gdddd.SnapToGrid, &_badf); _affaa != nil {
					return _affaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_gdddd.Spacing = NewCT_Spacing()
				if _cccbgeg := d.DecodeElement(_gdddd.Spacing, &_badf); _cccbgeg != nil {
					return _cccbgeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ind"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ind"}:
				_gdddd.Ind = NewCT_Ind()
				if _efdf := d.DecodeElement(_gdddd.Ind, &_badf); _efdf != nil {
					return _efdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contextualSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "contextualSpacing"}:
				_gdddd.ContextualSpacing = NewCT_OnOff()
				if _gagge := d.DecodeElement(_gdddd.ContextualSpacing, &_badf); _gagge != nil {
					return _gagge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mirrorIndents"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mirrorIndents"}:
				_gdddd.MirrorIndents = NewCT_OnOff()
				if _cgdfc := d.DecodeElement(_gdddd.MirrorIndents, &_badf); _cgdfc != nil {
					return _cgdfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressOverlap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressOverlap"}:
				_gdddd.SuppressOverlap = NewCT_OnOff()
				if _dbbcd := d.DecodeElement(_gdddd.SuppressOverlap, &_badf); _dbbcd != nil {
					return _dbbcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_gdddd.Jc = NewCT_Jc()
				if _ebcbe := d.DecodeElement(_gdddd.Jc, &_badf); _ebcbe != nil {
					return _ebcbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_gdddd.TextDirection = NewCT_TextDirection()
				if _gbccf := d.DecodeElement(_gdddd.TextDirection, &_badf); _gbccf != nil {
					return _gbccf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textAlignment"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textAlignment"}:
				_gdddd.TextAlignment = NewCT_TextAlignment()
				if _ffecd := d.DecodeElement(_gdddd.TextAlignment, &_badf); _ffecd != nil {
					return _ffecd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textboxTightWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textboxTightWrap"}:
				_gdddd.TextboxTightWrap = NewCT_TextboxTightWrap()
				if _bddfe := d.DecodeElement(_gdddd.TextboxTightWrap, &_badf); _bddfe != nil {
					return _bddfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outlineLvl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outlineLvl"}:
				_gdddd.OutlineLvl = NewCT_DecimalNumber()
				if _dfgef := d.DecodeElement(_gdddd.OutlineLvl, &_badf); _dfgef != nil {
					return _dfgef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divId"}:
				_gdddd.DivId = NewCT_DecimalNumber()
				if _ecfdg := d.DecodeElement(_gdddd.DivId, &_badf); _ecfdg != nil {
					return _ecfdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_gdddd.CnfStyle = NewCT_Cnf()
				if _bdgeg := d.DecodeElement(_gdddd.CnfStyle, &_badf); _bdgeg != nil {
					return _bdgeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_gdddd.RPr = NewCT_ParaRPr()
				if _gebade := d.DecodeElement(_gdddd.RPr, &_badf); _gebade != nil {
					return _gebade
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sectPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sectPr"}:
				_gdddd.SectPr = NewCT_SectPr()
				if _egebb := d.DecodeElement(_gdddd.SectPr, &_badf); _egebb != nil {
					return _egebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPrChange"}:
				_gdddd.PPrChange = NewCT_PPrChange()
				if _caeab := d.DecodeElement(_gdddd.PPrChange, &_badf); _caeab != nil {
					return _caeab
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_PPr\u0020\u0025v", _badf.Name)
				if _fdabc := d.Skip(); _fdabc != nil {
					return _fdabc
				}
			}
		case _d.EndElement:
			break _ebadf
		case _d.CharData:
		}
	}
	return nil
}

type CT_LsdException struct {

	// Primary Style Name
	NameAttr string

	// Latent Style Locking Setting
	LockedAttr *_g.ST_OnOff

	// Override default sorting order
	UiPriorityAttr *int64

	// Semi hidden text override
	SemiHiddenAttr *_g.ST_OnOff

	// Unhide when used
	UnhideWhenUsedAttr *_g.ST_OnOff

	// Latent Style Primary Style Setting
	QFormatAttr *_g.ST_OnOff
}

func (_gfdfbf *ST_Direction) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gfdfbf = 0
	case "ltr":
		*_gfdfbf = 1
	case "rtl":
		*_gfdfbf = 2
	}
	return nil
}

type CT_Text struct {
	SpaceAttr *string
	Content   string
}

func NewCT_BottomPageBorder() *CT_BottomPageBorder {
	_aebf := &CT_BottomPageBorder{}
	_aebf.ValAttr = ST_Border(1)
	return _aebf
}

// Validate validates the WdEG_WrapTypeChoice and its children
func (_cabea *WdEG_WrapTypeChoice) Validate() error {
	return _cabea.ValidateWithPath("WdEG_WrapTypeChoice")
}

// Validate validates the CT_PageNumber and its children
func (_cfbbf *CT_PageNumber) Validate() error { return _cfbbf.ValidateWithPath("CT_PageNumber") }

type WdST_RelFromH byte

func (_afegf *CT_SdtCell) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bebca:
	for {
		_cadbb, _gcdfe := d.Token()
		if _gcdfe != nil {
			return _gcdfe
		}
		switch _bdeec := _cadbb.(type) {
		case _d.StartElement:
			switch _bdeec.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtPr"}:
				_afegf.SdtPr = NewCT_SdtPr()
				if _fgecb := d.DecodeElement(_afegf.SdtPr, &_bdeec); _fgecb != nil {
					return _fgecb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtEndPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtEndPr"}:
				_afegf.SdtEndPr = NewCT_SdtEndPr()
				if _bfbcf := d.DecodeElement(_afegf.SdtEndPr, &_bdeec); _bfbcf != nil {
					return _bfbcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtContent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtContent"}:
				_afegf.SdtContent = NewCT_SdtContentCell()
				if _dcagf := d.DecodeElement(_afegf.SdtContent, &_bdeec); _dcagf != nil {
					return _dcagf
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_SdtCell\u0020\u0025v", _bdeec.Name)
				if _egbda := d.Skip(); _egbda != nil {
					return _egbda
				}
			}
		case _d.EndElement:
			break _bebca
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TblLook and its children, prefixing error messages with path
func (_fceaa *CT_TblLook) ValidateWithPath(path string) error {
	if _fceaa.FirstRowAttr != nil {
		if _abfac := _fceaa.FirstRowAttr.ValidateWithPath(path + "\u002fFirstRowAttr"); _abfac != nil {
			return _abfac
		}
	}
	if _fceaa.LastRowAttr != nil {
		if _begef := _fceaa.LastRowAttr.ValidateWithPath(path + "\u002fLastRowAttr"); _begef != nil {
			return _begef
		}
	}
	if _fceaa.FirstColumnAttr != nil {
		if _bcgeb := _fceaa.FirstColumnAttr.ValidateWithPath(path + "\u002fFirstColumnAttr"); _bcgeb != nil {
			return _bcgeb
		}
	}
	if _fceaa.LastColumnAttr != nil {
		if _egfda := _fceaa.LastColumnAttr.ValidateWithPath(path + "\u002fLastColumnAttr"); _egfda != nil {
			return _egfda
		}
	}
	if _fceaa.NoHBandAttr != nil {
		if _fbddc := _fceaa.NoHBandAttr.ValidateWithPath(path + "\u002fNoHBandAttr"); _fbddc != nil {
			return _fbddc
		}
	}
	if _fceaa.NoVBandAttr != nil {
		if _bcced := _fceaa.NoVBandAttr.ValidateWithPath(path + "\u002fNoVBandAttr"); _bcced != nil {
			return _bcced
		}
	}
	return nil
}

type CT_TblStylePr struct {

	// Table Style Conditional Formatting Type
	TypeAttr ST_TblStyleOverrideType

	// Table Style Conditional Formatting Paragraph Properties
	PPr *CT_PPrGeneral

	// Table Style Conditional Formatting Run Properties
	RPr *CT_RPr

	// Table Style Conditional Formatting Table Properties
	TblPr *CT_TblPrBase

	// Table Style Conditional Formatting Table Row Properties
	TrPr *CT_TrPr

	// Table Style Conditional Formatting Table Cell Properties
	TcPr *CT_TcPr
}

func (_cdbeg ST_BrType) Validate() error { return _cdbeg.ValidateWithPath("") }
func (_debdf *CT_DecimalNumber) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gfdc := range start.Attr {
		if _gfdc.Name.Local == "val" {
			_dcag, _eaba := _dd.ParseInt(_gfdc.Value, 10, 64)
			if _eaba != nil {
				return _eaba
			}
			_debdf.ValAttr = _dcag
			continue
		}
	}
	for {
		_fedb, _begg := d.Token()
		if _begg != nil {
			return _b.Errorf("parsing\u0020CT_DecimalNumber: \u0025s", _begg)
		}
		if _acbbe, _dddb := _fedb.(_d.EndElement); _dddb && _acbbe.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_StyleSortUnset    ST_StyleSort = 0
	ST_StyleSortName     ST_StyleSort = 1
	ST_StyleSortPriority ST_StyleSort = 2
	ST_StyleSortDefault  ST_StyleSort = 3
	ST_StyleSortFont     ST_StyleSort = 4
	ST_StyleSortBasedOn  ST_StyleSort = 5
	ST_StyleSortType     ST_StyleSort = 6
	ST_StyleSort0000     ST_StyleSort = 7
	ST_StyleSort0001     ST_StyleSort = 8
	ST_StyleSort0002     ST_StyleSort = 9
	ST_StyleSort0003     ST_StyleSort = 10
	ST_StyleSort0004     ST_StyleSort = 11
	ST_StyleSort0005     ST_StyleSort = 12
)

// Validate validates the WdCT_WordprocessingShapeChoice and its children
func (_bfecgd *WdCT_WordprocessingShapeChoice) Validate() error {
	return _bfecgd.ValidateWithPath("WdCT_WordprocessingShapeChoice")
}

// Validate validates the CT_TcBorders and its children
func (_aacee *CT_TcBorders) Validate() error { return _aacee.ValidateWithPath("CT_TcBorders") }
func (_fceae *CT_PPrGeneral) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fceae.PStyle != nil {
		_ggdfd := _d.StartElement{Name: _d.Name{Local: "w:pStyle"}}
		e.EncodeElement(_fceae.PStyle, _ggdfd)
	}
	if _fceae.KeepNext != nil {
		_bbaeg := _d.StartElement{Name: _d.Name{Local: "w:keepNext"}}
		e.EncodeElement(_fceae.KeepNext, _bbaeg)
	}
	if _fceae.KeepLines != nil {
		_dgac := _d.StartElement{Name: _d.Name{Local: "w:keepLines"}}
		e.EncodeElement(_fceae.KeepLines, _dgac)
	}
	if _fceae.PageBreakBefore != nil {
		_eead := _d.StartElement{Name: _d.Name{Local: "w:pageBreakBefore"}}
		e.EncodeElement(_fceae.PageBreakBefore, _eead)
	}
	if _fceae.FramePr != nil {
		_debe := _d.StartElement{Name: _d.Name{Local: "w:framePr"}}
		e.EncodeElement(_fceae.FramePr, _debe)
	}
	if _fceae.WidowControl != nil {
		_ecaga := _d.StartElement{Name: _d.Name{Local: "w:widowControl"}}
		e.EncodeElement(_fceae.WidowControl, _ecaga)
	}
	if _fceae.NumPr != nil {
		_bfgag := _d.StartElement{Name: _d.Name{Local: "w:numPr"}}
		e.EncodeElement(_fceae.NumPr, _bfgag)
	}
	if _fceae.SuppressLineNumbers != nil {
		_afabg := _d.StartElement{Name: _d.Name{Local: "w:suppressLineNumbers"}}
		e.EncodeElement(_fceae.SuppressLineNumbers, _afabg)
	}
	if _fceae.PBdr != nil {
		_bgccd := _d.StartElement{Name: _d.Name{Local: "w:pBdr"}}
		e.EncodeElement(_fceae.PBdr, _bgccd)
	}
	if _fceae.Shd != nil {
		_caebdf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_fceae.Shd, _caebdf)
	}
	if _fceae.Tabs != nil {
		_adcda := _d.StartElement{Name: _d.Name{Local: "w:tabs"}}
		e.EncodeElement(_fceae.Tabs, _adcda)
	}
	if _fceae.SuppressAutoHyphens != nil {
		_ddbbgc := _d.StartElement{Name: _d.Name{Local: "w:suppressAutoHyphens"}}
		e.EncodeElement(_fceae.SuppressAutoHyphens, _ddbbgc)
	}
	if _fceae.Kinsoku != nil {
		_ecafa := _d.StartElement{Name: _d.Name{Local: "w:kinsoku"}}
		e.EncodeElement(_fceae.Kinsoku, _ecafa)
	}
	if _fceae.WordWrap != nil {
		_gbacb := _d.StartElement{Name: _d.Name{Local: "w:wordWrap"}}
		e.EncodeElement(_fceae.WordWrap, _gbacb)
	}
	if _fceae.OverflowPunct != nil {
		_fcabe := _d.StartElement{Name: _d.Name{Local: "w:overflowPunct"}}
		e.EncodeElement(_fceae.OverflowPunct, _fcabe)
	}
	if _fceae.TopLinePunct != nil {
		_addfdc := _d.StartElement{Name: _d.Name{Local: "w:topLinePunct"}}
		e.EncodeElement(_fceae.TopLinePunct, _addfdc)
	}
	if _fceae.AutoSpaceDE != nil {
		_eeggf := _d.StartElement{Name: _d.Name{Local: "w:autoSpaceDE"}}
		e.EncodeElement(_fceae.AutoSpaceDE, _eeggf)
	}
	if _fceae.AutoSpaceDN != nil {
		_dggfed := _d.StartElement{Name: _d.Name{Local: "w:autoSpaceDN"}}
		e.EncodeElement(_fceae.AutoSpaceDN, _dggfed)
	}
	if _fceae.Bidi != nil {
		_daged := _d.StartElement{Name: _d.Name{Local: "w:bidi"}}
		e.EncodeElement(_fceae.Bidi, _daged)
	}
	if _fceae.AdjustRightInd != nil {
		_bbbcf := _d.StartElement{Name: _d.Name{Local: "w:adjustRightInd"}}
		e.EncodeElement(_fceae.AdjustRightInd, _bbbcf)
	}
	if _fceae.SnapToGrid != nil {
		_ggdd := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_fceae.SnapToGrid, _ggdd)
	}
	if _fceae.Spacing != nil {
		_dfeagd := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_fceae.Spacing, _dfeagd)
	}
	if _fceae.Ind != nil {
		_eagbg := _d.StartElement{Name: _d.Name{Local: "w:ind"}}
		e.EncodeElement(_fceae.Ind, _eagbg)
	}
	if _fceae.ContextualSpacing != nil {
		_gbbff := _d.StartElement{Name: _d.Name{Local: "w:contextualSpacing"}}
		e.EncodeElement(_fceae.ContextualSpacing, _gbbff)
	}
	if _fceae.MirrorIndents != nil {
		_bebgd := _d.StartElement{Name: _d.Name{Local: "w:mirrorIndents"}}
		e.EncodeElement(_fceae.MirrorIndents, _bebgd)
	}
	if _fceae.SuppressOverlap != nil {
		_cgegc := _d.StartElement{Name: _d.Name{Local: "w:suppressOverlap"}}
		e.EncodeElement(_fceae.SuppressOverlap, _cgegc)
	}
	if _fceae.Jc != nil {
		_abfbc := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		e.EncodeElement(_fceae.Jc, _abfbc)
	}
	if _fceae.TextDirection != nil {
		_edfeb := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_fceae.TextDirection, _edfeb)
	}
	if _fceae.TextAlignment != nil {
		_fbcecd := _d.StartElement{Name: _d.Name{Local: "w:textAlignment"}}
		e.EncodeElement(_fceae.TextAlignment, _fbcecd)
	}
	if _fceae.TextboxTightWrap != nil {
		_fgged := _d.StartElement{Name: _d.Name{Local: "w:textboxTightWrap"}}
		e.EncodeElement(_fceae.TextboxTightWrap, _fgged)
	}
	if _fceae.OutlineLvl != nil {
		_cddb := _d.StartElement{Name: _d.Name{Local: "w:outlineLvl"}}
		e.EncodeElement(_fceae.OutlineLvl, _cddb)
	}
	if _fceae.DivId != nil {
		_fbdag := _d.StartElement{Name: _d.Name{Local: "w:divId"}}
		e.EncodeElement(_fceae.DivId, _fbdag)
	}
	if _fceae.CnfStyle != nil {
		_ccgad := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		e.EncodeElement(_fceae.CnfStyle, _ccgad)
	}
	if _fceae.PPrChange != nil {
		_gcag := _d.StartElement{Name: _d.Name{Local: "w:pPrChange"}}
		e.EncodeElement(_fceae.PPrChange, _gcag)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_aecec *CT_SdtDate) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aecec.FullDateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fullDate"}, Value: _b.Sprintf("\u0025v", *_aecec.FullDateAttr)})
	}
	e.EncodeToken(start)
	if _aecec.DateFormat != nil {
		_ccaeg := _d.StartElement{Name: _d.Name{Local: "w:dateFormat"}}
		e.EncodeElement(_aecec.DateFormat, _ccaeg)
	}
	if _aecec.Lid != nil {
		_aegdf := _d.StartElement{Name: _d.Name{Local: "w:lid"}}
		e.EncodeElement(_aecec.Lid, _aegdf)
	}
	if _aecec.StoreMappedDataAs != nil {
		_gebbac := _d.StartElement{Name: _d.Name{Local: "w:storeMappedDataAs"}}
		e.EncodeElement(_aecec.StoreMappedDataAs, _gebbac)
	}
	if _aecec.Calendar != nil {
		_abgaa := _d.StartElement{Name: _d.Name{Local: "w:calendar"}}
		e.EncodeElement(_aecec.Calendar, _abgaa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DocVars and its children, prefixing error messages with path
func (_bacbg *CT_DocVars) ValidateWithPath(path string) error {
	for _edga, _bebcc := range _bacbg.DocVar {
		if _gcaed := _bebcc.ValidateWithPath(_b.Sprintf("\u0025s\u002fDocVar\u005b\u0025d\u005d", path, _edga)); _gcaed != nil {
			return _gcaed
		}
	}
	return nil
}
func (_ecdaef ST_CaptionPos) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ecdaef.String(), start)
}
func NewCT_Object() *CT_Object { _adfacb := &CT_Object{}; return _adfacb }

// Validate validates the CT_SaveThroughXslt and its children
func (_fbfggg *CT_SaveThroughXslt) Validate() error {
	return _fbfggg.ValidateWithPath("CT_SaveThroughXslt")
}
func NewCT_Div() *CT_Div {
	_egfd := &CT_Div{}
	_egfd.MarLeft = NewCT_SignedTwipsMeasure()
	_egfd.MarRight = NewCT_SignedTwipsMeasure()
	_egfd.MarTop = NewCT_SignedTwipsMeasure()
	_egfd.MarBottom = NewCT_SignedTwipsMeasure()
	return _egfd
}

// ValidateWithPath validates the CT_SmartTagRun and its children, prefixing error messages with path
func (_gfabb *CT_SmartTagRun) ValidateWithPath(path string) error {
	if _gfabb.SmartTagPr != nil {
		if _gcebd := _gfabb.SmartTagPr.ValidateWithPath(path + "/SmartTagPr"); _gcebd != nil {
			return _gcebd
		}
	}
	for _acfb, _ebeea := range _gfabb.EG_PContent {
		if _feacf := _ebeea.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_PContent\u005b\u0025d\u005d", path, _acfb)); _feacf != nil {
			return _feacf
		}
	}
	return nil
}

type CT_FramesetSplitbar struct {

	// Frameset Splitter Width
	W *CT_TwipsMeasure

	// Frameset Splitter Color
	Color *CT_Color

	// Do Not Display Frameset Splitters
	NoBorder *CT_OnOff

	// Frameset Splitter Border Style
	FlatBorders *CT_OnOff
}

func (_aedcc *CT_SdtDateMappingType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cggbb := range start.Attr {
		if _cggbb.Name.Local == "val" {
			_aedcc.ValAttr.UnmarshalXMLAttr(_cggbb)
			continue
		}
	}
	for {
		_eggbd, _gadbf := d.Token()
		if _gadbf != nil {
			return _b.Errorf("parsing\u0020CT_SdtDateMappingType:\u0020\u0025s", _gadbf)
		}
		if _fdbceg, _gegacf := _eggbd.(_d.EndElement); _gegacf && _fdbceg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bed *CT_AutoCaptions) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_gde := _d.StartElement{Name: _d.Name{Local: "w:autoCaption"}}
	for _, _egbe := range _bed.AutoCaption {
		e.EncodeElement(_egbe, _gde)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_TblPPr and its children
func (_eeffc *CT_TblPPr) Validate() error { return _eeffc.ValidateWithPath("CT_TblPPr") }

// Validate validates the CT_TcPr and its children
func (_cfbbe *CT_TcPr) Validate() error { return _cfbbe.ValidateWithPath("CT_TcPr") }
func (_bbccf ST_SectionMark) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_egcbd := _d.Attr{}
	_egcbd.Name = name
	switch _bbccf {
	case ST_SectionMarkUnset:
		_egcbd.Value = ""
	case ST_SectionMarkNextPage:
		_egcbd.Value = "nextPage"
	case ST_SectionMarkNextColumn:
		_egcbd.Value = "nextColumn"
	case ST_SectionMarkContinuous:
		_egcbd.Value = "continuous"
	case ST_SectionMarkEvenPage:
		_egcbd.Value = "evenPage"
	case ST_SectionMarkOddPage:
		_egcbd.Value = "oddPage"
	}
	return _egcbd, nil
}
func (_fbfbc *CT_TrPrBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_edbag:
	for {
		_dedgc, _dfgdc := d.Token()
		if _dfgdc != nil {
			return _dfgdc
		}
		switch _bbfbf := _dedgc.(type) {
		case _d.StartElement:
			switch _bbfbf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_cdace := NewCT_Cnf()
				if _ebfef := d.DecodeElement(_cdace, &_bbfbf); _ebfef != nil {
					return _ebfef
				}
				_fbfbc.CnfStyle = append(_fbfbc.CnfStyle, _cdace)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divId"}:
				_cdacb := NewCT_DecimalNumber()
				if _dgafaf := d.DecodeElement(_cdacb, &_bbfbf); _dgafaf != nil {
					return _dgafaf
				}
				_fbfbc.DivId = append(_fbfbc.DivId, _cdacb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridBefore"}:
				_ddbdg := NewCT_DecimalNumber()
				if _dggbe := d.DecodeElement(_ddbdg, &_bbfbf); _dggbe != nil {
					return _dggbe
				}
				_fbfbc.GridBefore = append(_fbfbc.GridBefore, _ddbdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridAfter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridAfter"}:
				_eafdc := NewCT_DecimalNumber()
				if _agdffa := d.DecodeElement(_eafdc, &_bbfbf); _agdffa != nil {
					return _agdffa
				}
				_fbfbc.GridAfter = append(_fbfbc.GridAfter, _eafdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wBefore"}:
				_ecabca := NewCT_TblWidth()
				if _egfega := d.DecodeElement(_ecabca, &_bbfbf); _egfega != nil {
					return _egfega
				}
				_fbfbc.WBefore = append(_fbfbc.WBefore, _ecabca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wAfter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wAfter"}:
				_cdgdfa := NewCT_TblWidth()
				if _fcffdc := d.DecodeElement(_cdgdfa, &_bbfbf); _fcffdc != nil {
					return _fcffdc
				}
				_fbfbc.WAfter = append(_fbfbc.WAfter, _cdgdfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cantSplit"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cantSplit"}:
				_gfdgd := NewCT_OnOff()
				if _aggfd := d.DecodeElement(_gfdgd, &_bbfbf); _aggfd != nil {
					return _aggfd
				}
				_fbfbc.CantSplit = append(_fbfbc.CantSplit, _gfdgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trHeight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trHeight"}:
				_efeag := NewCT_Height()
				if _cbbag := d.DecodeElement(_efeag, &_bbfbf); _cbbag != nil {
					return _cbbag
				}
				_fbfbc.TrHeight = append(_fbfbc.TrHeight, _efeag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblHeader"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblHeader"}:
				_eeacf := NewCT_OnOff()
				if _bdged := d.DecodeElement(_eeacf, &_bbfbf); _bdged != nil {
					return _bdged
				}
				_fbfbc.TblHeader = append(_fbfbc.TblHeader, _eeacf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellSpacing"}:
				_cadfc := NewCT_TblWidth()
				if _afaab := d.DecodeElement(_cadfc, &_bbfbf); _afaab != nil {
					return _afaab
				}
				_fbfbc.TblCellSpacing = append(_fbfbc.TblCellSpacing, _cadfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_bgdeca := NewCT_JcTable()
				if _bafeb := d.DecodeElement(_bgdeca, &_bbfbf); _bafeb != nil {
					return _bafeb
				}
				_fbfbc.Jc = append(_fbfbc.Jc, _bgdeca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hidden"}:
				_dfdfec := NewCT_OnOff()
				if _fbecf := d.DecodeElement(_dfdfec, &_bbfbf); _fbecf != nil {
					return _fbecf
				}
				_fbfbc.Hidden = append(_fbfbc.Hidden, _dfdfec)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TrPrBase\u0020\u0025v", _bbfbf.Name)
				if _feffe := d.Skip(); _feffe != nil {
					return _feffe
				}
			}
		case _d.EndElement:
			break _edbag
		case _d.CharData:
		}
	}
	return nil
}
func _dagcc(_ecdge bool) uint8 {
	if _ecdge {
		return 1
	}
	return 0
}
func (_gbcbg ST_PTabRelativeTo) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gbcbg.String(), start)
}
func (_afeaf ST_Wrap) String() string {
	switch _afeaf {
	case 0:
		return ""
	case 1:
		return "auto"
	case 2:
		return "notBeside"
	case 3:
		return "around"
	case 4:
		return "tight"
	case 5:
		return "through"
	case 6:
		return "none"
	}
	return ""
}

type AG_TransitionalPassword struct {
	CryptProviderTypeAttr          _g.ST_CryptProv
	CryptAlgorithmClassAttr        _g.ST_AlgClass
	CryptAlgorithmTypeAttr         _g.ST_AlgType
	CryptAlgorithmSidAttr          *int64
	CryptSpinCountAttr             *int64
	CryptProviderAttr              *string
	AlgIdExtAttr                   *string
	AlgIdExtSourceAttr             *string
	CryptProviderTypeExtAttr       *string
	CryptProviderTypeExtSourceAttr *string
	HashAttr                       *string
	SaltAttr                       *string
}
type CT_SdtCell struct {

	// Structured Document Tag Properties
	SdtPr *CT_SdtPr

	// Structured Document Tag End Character Properties
	SdtEndPr *CT_SdtEndPr

	// Cell-Level Structured Document Tag Content
	SdtContent *CT_SdtContentCell
}

func NewCT_Recipients() *CT_Recipients { _decge := &CT_Recipients{}; return _decge }
func (_caeef *CT_ParaRPrOriginal) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _caeef.Ins != nil {
		_cbbed := _d.StartElement{Name: _d.Name{Local: "w:ins"}}
		e.EncodeElement(_caeef.Ins, _cbbed)
	}
	if _caeef.Del != nil {
		_gcbee := _d.StartElement{Name: _d.Name{Local: "w:del"}}
		e.EncodeElement(_caeef.Del, _gcbee)
	}
	if _caeef.MoveFrom != nil {
		_dfdce := _d.StartElement{Name: _d.Name{Local: "w:moveFrom"}}
		e.EncodeElement(_caeef.MoveFrom, _dfdce)
	}
	if _caeef.MoveTo != nil {
		_faafc := _d.StartElement{Name: _d.Name{Local: "w:moveTo"}}
		e.EncodeElement(_caeef.MoveTo, _faafc)
	}
	if _caeef.RStyle != nil {
		_adbfc := _d.StartElement{Name: _d.Name{Local: "w:rStyle"}}
		e.EncodeElement(_caeef.RStyle, _adbfc)
	}
	if _caeef.RFonts != nil {
		_bdcab := _d.StartElement{Name: _d.Name{Local: "w:rFonts"}}
		e.EncodeElement(_caeef.RFonts, _bdcab)
	}
	if _caeef.B != nil {
		_beaee := _d.StartElement{Name: _d.Name{Local: "w:b"}}
		e.EncodeElement(_caeef.B, _beaee)
	}
	if _caeef.BCs != nil {
		_feadd := _d.StartElement{Name: _d.Name{Local: "w:bCs"}}
		e.EncodeElement(_caeef.BCs, _feadd)
	}
	if _caeef.I != nil {
		_dacfd := _d.StartElement{Name: _d.Name{Local: "w:i"}}
		e.EncodeElement(_caeef.I, _dacfd)
	}
	if _caeef.ICs != nil {
		_fdgfg := _d.StartElement{Name: _d.Name{Local: "w:iCs"}}
		e.EncodeElement(_caeef.ICs, _fdgfg)
	}
	if _caeef.Caps != nil {
		_eccbc := _d.StartElement{Name: _d.Name{Local: "w:caps"}}
		e.EncodeElement(_caeef.Caps, _eccbc)
	}
	if _caeef.SmallCaps != nil {
		_gabaaa := _d.StartElement{Name: _d.Name{Local: "w:smallCaps"}}
		e.EncodeElement(_caeef.SmallCaps, _gabaaa)
	}
	if _caeef.Strike != nil {
		_ccddb := _d.StartElement{Name: _d.Name{Local: "w:strike"}}
		e.EncodeElement(_caeef.Strike, _ccddb)
	}
	if _caeef.Dstrike != nil {
		_effgg := _d.StartElement{Name: _d.Name{Local: "w:dstrike"}}
		e.EncodeElement(_caeef.Dstrike, _effgg)
	}
	if _caeef.Outline != nil {
		_gffcc := _d.StartElement{Name: _d.Name{Local: "w:outline"}}
		e.EncodeElement(_caeef.Outline, _gffcc)
	}
	if _caeef.Shadow != nil {
		_afacb := _d.StartElement{Name: _d.Name{Local: "w:shadow"}}
		e.EncodeElement(_caeef.Shadow, _afacb)
	}
	if _caeef.Emboss != nil {
		_aeegd := _d.StartElement{Name: _d.Name{Local: "w:emboss"}}
		e.EncodeElement(_caeef.Emboss, _aeegd)
	}
	if _caeef.Imprint != nil {
		_beecd := _d.StartElement{Name: _d.Name{Local: "w:imprint"}}
		e.EncodeElement(_caeef.Imprint, _beecd)
	}
	if _caeef.NoProof != nil {
		_ccgce := _d.StartElement{Name: _d.Name{Local: "w:noProof"}}
		e.EncodeElement(_caeef.NoProof, _ccgce)
	}
	if _caeef.SnapToGrid != nil {
		_cecdd := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_caeef.SnapToGrid, _cecdd)
	}
	if _caeef.Vanish != nil {
		_gfedd := _d.StartElement{Name: _d.Name{Local: "w:vanish"}}
		e.EncodeElement(_caeef.Vanish, _gfedd)
	}
	if _caeef.WebHidden != nil {
		_ccffc := _d.StartElement{Name: _d.Name{Local: "w:webHidden"}}
		e.EncodeElement(_caeef.WebHidden, _ccffc)
	}
	if _caeef.Color != nil {
		_ggbcga := _d.StartElement{Name: _d.Name{Local: "w:color"}}
		e.EncodeElement(_caeef.Color, _ggbcga)
	}
	if _caeef.Spacing != nil {
		_fdcb := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_caeef.Spacing, _fdcb)
	}
	if _caeef.W != nil {
		_cgeea := _d.StartElement{Name: _d.Name{Local: "w:w"}}
		e.EncodeElement(_caeef.W, _cgeea)
	}
	if _caeef.Kern != nil {
		_dafcd := _d.StartElement{Name: _d.Name{Local: "w:kern"}}
		e.EncodeElement(_caeef.Kern, _dafcd)
	}
	if _caeef.Position != nil {
		_bbbff := _d.StartElement{Name: _d.Name{Local: "w:position"}}
		e.EncodeElement(_caeef.Position, _bbbff)
	}
	if _caeef.Sz != nil {
		_eaagb := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_caeef.Sz, _eaagb)
	}
	if _caeef.SzCs != nil {
		_bfddc := _d.StartElement{Name: _d.Name{Local: "w:szCs"}}
		e.EncodeElement(_caeef.SzCs, _bfddc)
	}
	if _caeef.Highlight != nil {
		_ffgea := _d.StartElement{Name: _d.Name{Local: "w:highlight"}}
		e.EncodeElement(_caeef.Highlight, _ffgea)
	}
	if _caeef.U != nil {
		_abcbd := _d.StartElement{Name: _d.Name{Local: "w:u"}}
		e.EncodeElement(_caeef.U, _abcbd)
	}
	if _caeef.Effect != nil {
		_abcgee := _d.StartElement{Name: _d.Name{Local: "w:effect"}}
		e.EncodeElement(_caeef.Effect, _abcgee)
	}
	if _caeef.Bdr != nil {
		_fgdab := _d.StartElement{Name: _d.Name{Local: "w:bdr"}}
		e.EncodeElement(_caeef.Bdr, _fgdab)
	}
	if _caeef.Shd != nil {
		_dcggae := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_caeef.Shd, _dcggae)
	}
	if _caeef.FitText != nil {
		_cfeed := _d.StartElement{Name: _d.Name{Local: "w:fitText"}}
		e.EncodeElement(_caeef.FitText, _cfeed)
	}
	if _caeef.VertAlign != nil {
		_ccbefa := _d.StartElement{Name: _d.Name{Local: "w:vertAlign"}}
		e.EncodeElement(_caeef.VertAlign, _ccbefa)
	}
	if _caeef.Rtl != nil {
		_abggf := _d.StartElement{Name: _d.Name{Local: "w:rtl"}}
		e.EncodeElement(_caeef.Rtl, _abggf)
	}
	if _caeef.Cs != nil {
		_fgagc := _d.StartElement{Name: _d.Name{Local: "w:cs"}}
		e.EncodeElement(_caeef.Cs, _fgagc)
	}
	if _caeef.Em != nil {
		_eddaa := _d.StartElement{Name: _d.Name{Local: "w:em"}}
		e.EncodeElement(_caeef.Em, _eddaa)
	}
	if _caeef.Lang != nil {
		_dbbdf := _d.StartElement{Name: _d.Name{Local: "w:lang"}}
		e.EncodeElement(_caeef.Lang, _dbbdf)
	}
	if _caeef.EastAsianLayout != nil {
		_gegbe := _d.StartElement{Name: _d.Name{Local: "w:eastAsianLayout"}}
		e.EncodeElement(_caeef.EastAsianLayout, _gegbe)
	}
	if _caeef.SpecVanish != nil {
		_geacef := _d.StartElement{Name: _d.Name{Local: "w:specVanish"}}
		e.EncodeElement(_caeef.SpecVanish, _geacef)
	}
	if _caeef.OMath != nil {
		_gegdg := _d.StartElement{Name: _d.Name{Local: "w:oMath"}}
		e.EncodeElement(_caeef.OMath, _gegdg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfbadga ST_LineNumberRestart) Validate() error { return _cfbadga.ValidateWithPath("") }
func (_bebef *CT_DocProtect) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _aaag := range start.Attr {
		if _aaag.Name.Local == "cryptAlgorithmType" {
			_bebef.CryptAlgorithmTypeAttr.UnmarshalXMLAttr(_aaag)
			continue
		}
		if _aaag.Name.Local == "cryptAlgorithmSid" {
			_dggd, _dadcg := _dd.ParseInt(_aaag.Value, 10, 64)
			if _dadcg != nil {
				return _dadcg
			}
			_bebef.CryptAlgorithmSidAttr = &_dggd
			continue
		}
		if _aaag.Name.Local == "formatting" {
			_fdba, _fgbcd := ParseUnionST_OnOff(_aaag.Value)
			if _fgbcd != nil {
				return _fgbcd
			}
			_bebef.FormattingAttr = &_fdba
			continue
		}
		if _aaag.Name.Local == "cryptSpinCount" {
			_ffffbb, _cbebe := _dd.ParseInt(_aaag.Value, 10, 64)
			if _cbebe != nil {
				return _cbebe
			}
			_bebef.CryptSpinCountAttr = &_ffffbb
			continue
		}
		if _aaag.Name.Local == "algorithmName" {
			_bbbed, _dcdfg := _aaag.Value, error(nil)
			if _dcdfg != nil {
				return _dcdfg
			}
			_bebef.AlgorithmNameAttr = &_bbbed
			continue
		}
		if _aaag.Name.Local == "cryptProvider" {
			_bagc, _bgbb := _aaag.Value, error(nil)
			if _bgbb != nil {
				return _bgbb
			}
			_bebef.CryptProviderAttr = &_bagc
			continue
		}
		if _aaag.Name.Local == "saltValue" {
			_egbbbd, _ggga := _aaag.Value, error(nil)
			if _ggga != nil {
				return _ggga
			}
			_bebef.SaltValueAttr = &_egbbbd
			continue
		}
		if _aaag.Name.Local == "cryptProviderType" {
			_bebef.CryptProviderTypeAttr.UnmarshalXMLAttr(_aaag)
			continue
		}
		if _aaag.Name.Local == "cryptAlgorithmClass" {
			_bebef.CryptAlgorithmClassAttr.UnmarshalXMLAttr(_aaag)
			continue
		}
		if _aaag.Name.Local == "edit" {
			_bebef.EditAttr.UnmarshalXMLAttr(_aaag)
			continue
		}
		if _aaag.Name.Local == "enforcement" {
			_cged, _dfdga := ParseUnionST_OnOff(_aaag.Value)
			if _dfdga != nil {
				return _dfdga
			}
			_bebef.EnforcementAttr = &_cged
			continue
		}
		if _aaag.Name.Local == "hashValue" {
			_bbag, _ggdf := _aaag.Value, error(nil)
			if _ggdf != nil {
				return _ggdf
			}
			_bebef.HashValueAttr = &_bbag
			continue
		}
		if _aaag.Name.Local == "spinCount" {
			_gafbd, _eebcb := _dd.ParseInt(_aaag.Value, 10, 64)
			if _eebcb != nil {
				return _eebcb
			}
			_bebef.SpinCountAttr = &_gafbd
			continue
		}
		if _aaag.Name.Local == "algIdExt" {
			_bfbb, _ffgfg := _aaag.Value, error(nil)
			if _ffgfg != nil {
				return _ffgfg
			}
			_bebef.AlgIdExtAttr = &_bfbb
			continue
		}
		if _aaag.Name.Local == "algIdExtSource" {
			_accb, _ggagc := _aaag.Value, error(nil)
			if _ggagc != nil {
				return _ggagc
			}
			_bebef.AlgIdExtSourceAttr = &_accb
			continue
		}
		if _aaag.Name.Local == "cryptProviderTypeExt" {
			_gggf, _gcafa := _aaag.Value, error(nil)
			if _gcafa != nil {
				return _gcafa
			}
			_bebef.CryptProviderTypeExtAttr = &_gggf
			continue
		}
		if _aaag.Name.Local == "cryptProviderTypeExtSource" {
			_gbcff, _dgbff := _aaag.Value, error(nil)
			if _dgbff != nil {
				return _dgbff
			}
			_bebef.CryptProviderTypeExtSourceAttr = &_gbcff
			continue
		}
		if _aaag.Name.Local == "hash" {
			_ffgfc, _egcgef := _aaag.Value, error(nil)
			if _egcgef != nil {
				return _egcgef
			}
			_bebef.HashAttr = &_ffgfc
			continue
		}
		if _aaag.Name.Local == "salt" {
			_cgdda, _gebga := _aaag.Value, error(nil)
			if _gebga != nil {
				return _gebga
			}
			_bebef.SaltAttr = &_cgdda
			continue
		}
	}
	for {
		_bcdg, _fcgg := d.Token()
		if _fcgg != nil {
			return _b.Errorf("parsing\u0020CT_DocProtect:\u0020\u0025s", _fcgg)
		}
		if _cdef, _gadg := _bcdg.(_d.EndElement); _gadg && _cdef.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_RunTrackChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
}

// ValidateWithPath validates the CT_FFHelpText and its children, prefixing error messages with path
func (_aegge *CT_FFHelpText) ValidateWithPath(path string) error {
	if _bfba := _aegge.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _bfba != nil {
		return _bfba
	}
	return nil
}

// ValidateWithPath validates the Settings and its children, prefixing error messages with path
func (_dagedc *Settings) ValidateWithPath(path string) error {
	if _egbdb := _dagedc.CT_Settings.ValidateWithPath(path); _egbdb != nil {
		return _egbdb
	}
	return nil
}
func (_adggf ST_PTabRelativeTo) ValidateWithPath(path string) error {
	switch _adggf {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_adggf))
	}
	return nil
}

// Validate validates the CT_MailMergeSourceType and its children
func (_gdffd *CT_MailMergeSourceType) Validate() error {
	return _gdffd.ValidateWithPath("CT_MailMergeSourceType")
}
func (_cfedb *CT_Underline) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _abcbdg := range start.Attr {
		if _abcbdg.Name.Local == "val" {
			_cfedb.ValAttr.UnmarshalXMLAttr(_abcbdg)
			continue
		}
		if _abcbdg.Name.Local == "color" {
			_dcdbd, _bafda := ParseUnionST_HexColor(_abcbdg.Value)
			if _bafda != nil {
				return _bafda
			}
			_cfedb.ColorAttr = &_dcdbd
			continue
		}
		if _abcbdg.Name.Local == "themeColor" {
			_cfedb.ThemeColorAttr.UnmarshalXMLAttr(_abcbdg)
			continue
		}
		if _abcbdg.Name.Local == "themeTint" {
			_dadfa, _dfagd := _abcbdg.Value, error(nil)
			if _dfagd != nil {
				return _dfagd
			}
			_cfedb.ThemeTintAttr = &_dadfa
			continue
		}
		if _abcbdg.Name.Local == "themeShade" {
			_gccbcc, _gecbga := _abcbdg.Value, error(nil)
			if _gecbga != nil {
				return _gecbga
			}
			_cfedb.ThemeShadeAttr = &_gccbcc
			continue
		}
	}
	for {
		_eeabff, _ffeca := d.Token()
		if _ffeca != nil {
			return _b.Errorf("parsing\u0020CT_Underline:\u0020\u0025s", _ffeca)
		}
		if _ceefb, _ebdbfe := _eeabff.(_d.EndElement); _ebdbfe && _ceefb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the EG_MathContent and its children, prefixing error messages with path
func (_eegfg *EG_MathContent) ValidateWithPath(path string) error {
	if _eegfg.OMathPara != nil {
		if _cagfee := _eegfg.OMathPara.ValidateWithPath(path + "\u002fOMathPara"); _cagfee != nil {
			return _cagfee
		}
	}
	if _eegfg.OMath != nil {
		if _edddc := _eegfg.OMath.ValidateWithPath(path + "\u002fOMath"); _edddc != nil {
			return _edddc
		}
	}
	return nil
}
func NewCT_FFCheckBox() *CT_FFCheckBox { _aafcd := &CT_FFCheckBox{}; return _aafcd }
func NewWdEG_WrapType() *WdEG_WrapType { _bfdcg := &WdEG_WrapType{}; return _bfdcg }
func (_gebgd *CT_Object) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gcgggf := range start.Attr {
		if _gcgggf.Name.Local == "dxaOrig" {
			_gdecb, _ebadc := ParseUnionST_TwipsMeasure(_gcgggf.Value)
			if _ebadc != nil {
				return _ebadc
			}
			_gebgd.DxaOrigAttr = &_gdecb
			continue
		}
		if _gcgggf.Name.Local == "dyaOrig" {
			_cccbf, _agdc := ParseUnionST_TwipsMeasure(_gcgggf.Value)
			if _agdc != nil {
				return _agdc
			}
			_gebgd.DyaOrigAttr = &_cccbf
			continue
		}
	}
_cgbe:
	for {
		_ecfec, _cdegc := d.Token()
		if _cdegc != nil {
			return _cdegc
		}
		switch _befgcg := _ecfec.(type) {
		case _d.StartElement:
			switch _befgcg.Name {
			default:
				if _gcegf, _cfeagb := _ga.CreateElement(_befgcg); _cfeagb != nil {
					return _cfeagb
				} else {
					if _feeac := d.DecodeElement(_gcegf, &_befgcg); _feeac != nil {
						return _feeac
					}
					_gebgd.Any = append(_gebgd.Any, _gcegf)
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawing"}:
				_gebgd.Drawing = NewCT_Drawing()
				if _geaef := d.DecodeElement(_gebgd.Drawing, &_befgcg); _geaef != nil {
					return _geaef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "control"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "control"}:
				_gebgd.Choice = NewCT_ObjectChoice()
				if _afab := d.DecodeElement(&_gebgd.Choice.Control, &_befgcg); _afab != nil {
					return _afab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "objectLink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "objectLink"}:
				_gebgd.Choice = NewCT_ObjectChoice()
				if _cfcadb := d.DecodeElement(&_gebgd.Choice.ObjectLink, &_befgcg); _cfcadb != nil {
					return _cfcadb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "objectEmbed"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "objectEmbed"}:
				_gebgd.Choice = NewCT_ObjectChoice()
				if _gbdcd := d.DecodeElement(&_gebgd.Choice.ObjectEmbed, &_befgcg); _gbdcd != nil {
					return _gbdcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "movie"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "movie"}:
				_gebgd.Choice = NewCT_ObjectChoice()
				if _gdgac := d.DecodeElement(&_gebgd.Choice.Movie, &_befgcg); _gdgac != nil {
					return _gdgac
				}
			}
		case _d.EndElement:
			break _cgbe
		case _d.CharData:
		}
	}
	return nil
}
func (_ccec *CT_ColorSchemeMapping) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gcae := range start.Attr {
		if _gcae.Name.Local == "bg1" {
			_ccec.Bg1Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "t1" {
			_ccec.T1Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "bg2" {
			_ccec.Bg2Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "t2" {
			_ccec.T2Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "accent1" {
			_ccec.Accent1Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "accent2" {
			_ccec.Accent2Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "accent3" {
			_ccec.Accent3Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "accent4" {
			_ccec.Accent4Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "accent5" {
			_ccec.Accent5Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "accent6" {
			_ccec.Accent6Attr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "hyperlink" {
			_ccec.HyperlinkAttr.UnmarshalXMLAttr(_gcae)
			continue
		}
		if _gcae.Name.Local == "followedHyperlink" {
			_ccec.FollowedHyperlinkAttr.UnmarshalXMLAttr(_gcae)
			continue
		}
	}
	for {
		_egf, _baeg := d.Token()
		if _baeg != nil {
			return _b.Errorf("parsing\u0020CT_ColorSchemeMapping:\u0020\u0025s", _baeg)
		}
		if _ebaf, _cfbb := _egf.(_d.EndElement); _cfbb && _ebaf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Recipients struct {

	// Data About Single Data Source Record
	RecipientData []*CT_RecipientData
}

// Validate validates the Comments and its children
func (_afgdg *Comments) Validate() error { return _afgdg.ValidateWithPath("Comments") }
func NewCT_FtnProps() *CT_FtnProps       { _ecde := &CT_FtnProps{}; return _ecde }

// ValidateWithPath validates the CT_Height and its children, prefixing error messages with path
func (_ggba *CT_Height) ValidateWithPath(path string) error {
	if _ggba.ValAttr != nil {
		if _acbfd := _ggba.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _acbfd != nil {
			return _acbfd
		}
	}
	if _aggba := _ggba.HRuleAttr.ValidateWithPath(path + "\u002fHRuleAttr"); _aggba != nil {
		return _aggba
	}
	return nil
}
func (_aggfda *EG_HdrFtrReferences) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gcdff:
	for {
		_afec, _babbc := d.Token()
		if _babbc != nil {
			return _babbc
		}
		switch _dcfgf := _afec.(type) {
		case _d.StartElement:
			switch _dcfgf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "headerReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "headerReference"}:
				_aggfda.HeaderReference = NewCT_HdrFtrRef()
				if _bbacf := d.DecodeElement(_aggfda.HeaderReference, &_dcfgf); _bbacf != nil {
					return _bbacf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footerReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footerReference"}:
				_aggfda.FooterReference = NewCT_HdrFtrRef()
				if _aecbge := d.DecodeElement(_aggfda.FooterReference, &_dcfgf); _aecbge != nil {
					return _aecbge
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_HdrFtrReferences\u0020\u0025v", _dcfgf.Name)
				if _fcdgb := d.Skip(); _fcdgb != nil {
					return _fcdgb
				}
			}
		case _d.EndElement:
			break _gcdff
		case _d.CharData:
		}
	}
	return nil
}

const (
	ST_FtnPosUnset       ST_FtnPos = 0
	ST_FtnPosPageBottom  ST_FtnPos = 1
	ST_FtnPosBeneathText ST_FtnPos = 2
	ST_FtnPosSectEnd     ST_FtnPos = 3
	ST_FtnPosDocEnd      ST_FtnPos = 4
)

// ValidateWithPath validates the CT_TextEffect and its children, prefixing error messages with path
func (_beagb *CT_TextEffect) ValidateWithPath(path string) error {
	if _beagb.ValAttr == ST_TextEffectUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _bafde := _beagb.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _bafde != nil {
		return _bafde
	}
	return nil
}
func (_edfcef *WdCT_WordprocessingCanvasChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fffcb:
	for {
		_gbbba, _fcdgbe := d.Token()
		if _fcdgbe != nil {
			return _fcdgbe
		}
		switch _eegbeg := _gbbba.(type) {
		case _d.StartElement:
			switch _eegbeg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wsp"}:
				_ggegcg := NewWdWsp()
				if _cfgggd := d.DecodeElement(_ggegcg, &_eegbeg); _cfgggd != nil {
					return _cfgggd
				}
				_edfcef.Wsp = append(_edfcef.Wsp, _ggegcg)
			case _d.Name{Space: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture", Local: "pic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fpicture", Local: "pic"}:
				_aggdgb := _ca.NewPic()
				if _gadbe := d.DecodeElement(_aggdgb, &_eegbeg); _gadbe != nil {
					return _gadbe
				}
				_edfcef.Pic = append(_edfcef.Pic, _aggdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}:
				_aagegb := NewWdCT_WordprocessingContentPart()
				if _dbcba := d.DecodeElement(_aagegb, &_eegbeg); _dbcba != nil {
					return _dbcba
				}
				_edfcef.ContentPart = append(_edfcef.ContentPart, _aagegb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wgp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wgp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wgp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wgp"}:
				_ggdgb := NewWdWgp()
				if _afebf := d.DecodeElement(_ggdgb, &_eegbeg); _afebf != nil {
					return _afebf
				}
				_edfcef.Wgp = append(_edfcef.Wgp, _ggdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "graphicFrame"}:
				_gfeeec := NewWdCT_GraphicFrame()
				if _afdae := d.DecodeElement(_gfeeec, &_eegbeg); _afdae != nil {
					return _afdae
				}
				_edfcef.GraphicFrame = append(_edfcef.GraphicFrame, _gfeeec)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WordprocessingCanvasChoice\u0020\u0025v", _eegbeg.Name)
				if _bbfee := d.Skip(); _bbfee != nil {
					return _bbfee
				}
			}
		case _d.EndElement:
			break _fffcb
		case _d.CharData:
		}
	}
	return nil
}

type CT_FitText struct {

	// Value
	ValAttr _g.ST_TwipsMeasure

	// Fit Text Run ID
	IdAttr *int64
}

func (_ebgab ST_StyleSort) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_feefc := _d.Attr{}
	_feefc.Name = name
	switch _ebgab {
	case ST_StyleSortUnset:
		_feefc.Value = ""
	case ST_StyleSortName:
		_feefc.Value = "name"
	case ST_StyleSortPriority:
		_feefc.Value = "priority"
	case ST_StyleSortDefault:
		_feefc.Value = "default"
	case ST_StyleSortFont:
		_feefc.Value = "font"
	case ST_StyleSortBasedOn:
		_feefc.Value = "basedOn"
	case ST_StyleSortType:
		_feefc.Value = "type"
	case ST_StyleSort0000:
		_feefc.Value = "0000"
	case ST_StyleSort0001:
		_feefc.Value = "0001"
	case ST_StyleSort0002:
		_feefc.Value = "0002"
	case ST_StyleSort0003:
		_feefc.Value = "0003"
	case ST_StyleSort0004:
		_feefc.Value = "0004"
	case ST_StyleSort0005:
		_feefc.Value = "0005"
	}
	return _feefc, nil
}
func (_fbgca *ST_LevelSuffix) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fbgca = 0
	case "tab":
		*_fbgca = 1
	case "space":
		*_fbgca = 2
	case "nothing":
		*_fbgca = 3
	}
	return nil
}
func (_ebbafd *ST_SectionMark) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ebbafd = 0
	case "nextPage":
		*_ebbafd = 1
	case "nextColumn":
		*_ebbafd = 2
	case "continuous":
		*_ebbafd = 3
	case "evenPage":
		*_ebbafd = 4
	case "oddPage":
		*_ebbafd = 5
	}
	return nil
}
func (_afegec *ST_MailMergeOdsoFMDFieldType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aeaec, _cdagb := d.Token()
	if _cdagb != nil {
		return _cdagb
	}
	if _agbgf, _dbgcb := _aeaec.(_d.EndElement); _dbgcb && _agbgf.Name == start.Name {
		*_afegec = 1
		return nil
	}
	if _aabfb, _fcebcc := _aeaec.(_d.CharData); !_fcebcc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _aeaec)
	} else {
		switch string(_aabfb) {
		case "":
			*_afegec = 0
		case "null":
			*_afegec = 1
		case "dbColumn":
			*_afegec = 2
		}
	}
	_aeaec, _cdagb = d.Token()
	if _cdagb != nil {
		return _cdagb
	}
	if _cebbe, _efbgb := _aeaec.(_d.EndElement); _efbgb && _cebbe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _aeaec)
}
func (_caeda *CT_Em) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_caeda.ValAttr = ST_Em(1)
	for _, _fgcgb := range start.Attr {
		if _fgcgb.Name.Local == "val" {
			_caeda.ValAttr.UnmarshalXMLAttr(_fgcgb)
			continue
		}
	}
	for {
		_aeda, _fdbd := d.Token()
		if _fdbd != nil {
			return _b.Errorf("parsing\u0020CT_Em:\u0020\u0025s", _fdbd)
		}
		if _gfffg, _bcccf := _aeda.(_d.EndElement); _bcccf && _gfffg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fabggb *WdCT_WrapSquare) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fabggb.WrapTextAttr = WdST_WrapText(1)
	for _, _abgac := range start.Attr {
		if _abgac.Name.Local == "wrapText" {
			_fabggb.WrapTextAttr.UnmarshalXMLAttr(_abgac)
			continue
		}
		if _abgac.Name.Local == "distT" {
			_ccfbc, _bfcbde := _dd.ParseUint(_abgac.Value, 10, 32)
			if _bfcbde != nil {
				return _bfcbde
			}
			_ffcgg := uint32(_ccfbc)
			_fabggb.DistTAttr = &_ffcgg
			continue
		}
		if _abgac.Name.Local == "distB" {
			_dbdbaa, _gaaaca := _dd.ParseUint(_abgac.Value, 10, 32)
			if _gaaaca != nil {
				return _gaaaca
			}
			_debadg := uint32(_dbdbaa)
			_fabggb.DistBAttr = &_debadg
			continue
		}
		if _abgac.Name.Local == "distL" {
			_bddfc, _ggabd := _dd.ParseUint(_abgac.Value, 10, 32)
			if _ggabd != nil {
				return _ggabd
			}
			_fdgaa := uint32(_bddfc)
			_fabggb.DistLAttr = &_fdgaa
			continue
		}
		if _abgac.Name.Local == "distR" {
			_gdgbef, _dcggce := _dd.ParseUint(_abgac.Value, 10, 32)
			if _dcggce != nil {
				return _dcggce
			}
			_aedde := uint32(_gdgbef)
			_fabggb.DistRAttr = &_aedde
			continue
		}
	}
_bbfbdg:
	for {
		_agaeg, _gdbbg := d.Token()
		if _gdbbg != nil {
			return _gdbbg
		}
		switch _cceab := _agaeg.(type) {
		case _d.StartElement:
			switch _cceab.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effectExtent"}:
				_fabggb.EffectExtent = NewWdCT_EffectExtent()
				if _ebafga := d.DecodeElement(_fabggb.EffectExtent, &_cceab); _ebafga != nil {
					return _ebafga
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WrapSquare\u0020\u0025v", _cceab.Name)
				if _gedgfa := d.Skip(); _gedgfa != nil {
					return _gedgfa
				}
			}
		case _d.EndElement:
			break _bbfbdg
		case _d.CharData:
		}
	}
	return nil
}

const (
	ST_TblWidthUnset ST_TblWidth = 0
	ST_TblWidthNil   ST_TblWidth = 1
	ST_TblWidthPct   ST_TblWidth = 2
	ST_TblWidthDxa   ST_TblWidth = 3
	ST_TblWidthAuto  ST_TblWidth = 4
)

func (_ecbac *CT_SdtBlock) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ecfdb:
	for {
		_bfcegd, _dcegf := d.Token()
		if _dcegf != nil {
			return _dcegf
		}
		switch _cedef := _bfcegd.(type) {
		case _d.StartElement:
			switch _cedef.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtPr"}:
				_ecbac.SdtPr = NewCT_SdtPr()
				if _ddabc := d.DecodeElement(_ecbac.SdtPr, &_cedef); _ddabc != nil {
					return _ddabc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtEndPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtEndPr"}:
				_ecbac.SdtEndPr = NewCT_SdtEndPr()
				if _agfaga := d.DecodeElement(_ecbac.SdtEndPr, &_cedef); _agfaga != nil {
					return _agfaga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtContent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtContent"}:
				_ecbac.SdtContent = NewCT_SdtContentBlock()
				if _bebegf := d.DecodeElement(_ecbac.SdtContent, &_cedef); _bebegf != nil {
					return _bebegf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SdtBlock\u0020\u0025v", _cedef.Name)
				if _caabf := d.Skip(); _caabf != nil {
					return _caabf
				}
			}
		case _d.EndElement:
			break _ecfdb
		case _d.CharData:
		}
	}
	return nil
}

type CT_TblOverlap struct {

	// Floating Table Overlap Setting
	ValAttr ST_TblOverlap
}

func NewCT_Bookmark() *CT_Bookmark { _gaa := &CT_Bookmark{}; return _gaa }
func (_eedbfg *ST_TextEffect) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_eedbfg = 0
	case "blinkBackground":
		*_eedbfg = 1
	case "lights":
		*_eedbfg = 2
	case "antsBlack":
		*_eedbfg = 3
	case "antsRed":
		*_eedbfg = 4
	case "shimmer":
		*_eedbfg = 5
	case "sparkle":
		*_eedbfg = 6
	case "none":
		*_eedbfg = 7
	}
	return nil
}
func (_fabecc ST_MailMergeSourceType) ValidateWithPath(path string) error {
	switch _fabecc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fabecc))
	}
	return nil
}
func NewCT_SdtContentBlock() *CT_SdtContentBlock { _dggbg := &CT_SdtContentBlock{}; return _dggbg }
func NewCT_Hyperlink() *CT_Hyperlink             { _dedg := &CT_Hyperlink{}; return _dedg }

// Validate validates the CT_Body and its children
func (_fcbe *CT_Body) Validate() error { return _fcbe.ValidateWithPath("CT_Body") }
func (_gcedcf *CT_SectPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gcedcf.RsidRPrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidRPr"}, Value: _b.Sprintf("\u0025v", *_gcedcf.RsidRPrAttr)})
	}
	if _gcedcf.RsidDelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidDel"}, Value: _b.Sprintf("\u0025v", *_gcedcf.RsidDelAttr)})
	}
	if _gcedcf.RsidRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidR"}, Value: _b.Sprintf("\u0025v", *_gcedcf.RsidRAttr)})
	}
	if _gcedcf.RsidSectAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidSect"}, Value: _b.Sprintf("\u0025v", *_gcedcf.RsidSectAttr)})
	}
	e.EncodeToken(start)
	if _gcedcf.EG_HdrFtrReferences != nil {
		for _, _aggbd := range _gcedcf.EG_HdrFtrReferences {
			_aggbd.MarshalXML(e, _d.StartElement{})
		}
	}
	if _gcedcf.FootnotePr != nil {
		_bcbdcb := _d.StartElement{Name: _d.Name{Local: "w:footnotePr"}}
		e.EncodeElement(_gcedcf.FootnotePr, _bcbdcb)
	}
	if _gcedcf.EndnotePr != nil {
		_egacb := _d.StartElement{Name: _d.Name{Local: "w:endnotePr"}}
		e.EncodeElement(_gcedcf.EndnotePr, _egacb)
	}
	if _gcedcf.Type != nil {
		_ebbbcg := _d.StartElement{Name: _d.Name{Local: "w:type"}}
		e.EncodeElement(_gcedcf.Type, _ebbbcg)
	}
	if _gcedcf.PgSz != nil {
		_cgfbb := _d.StartElement{Name: _d.Name{Local: "w:pgSz"}}
		e.EncodeElement(_gcedcf.PgSz, _cgfbb)
	}
	if _gcedcf.PgMar != nil {
		_ebbgd := _d.StartElement{Name: _d.Name{Local: "w:pgMar"}}
		e.EncodeElement(_gcedcf.PgMar, _ebbgd)
	}
	if _gcedcf.PaperSrc != nil {
		_eddea := _d.StartElement{Name: _d.Name{Local: "w:paperSrc"}}
		e.EncodeElement(_gcedcf.PaperSrc, _eddea)
	}
	if _gcedcf.PgBorders != nil {
		_bbegb := _d.StartElement{Name: _d.Name{Local: "w:pgBorders"}}
		e.EncodeElement(_gcedcf.PgBorders, _bbegb)
	}
	if _gcedcf.LnNumType != nil {
		_eedfe := _d.StartElement{Name: _d.Name{Local: "w:lnNumType"}}
		e.EncodeElement(_gcedcf.LnNumType, _eedfe)
	}
	if _gcedcf.PgNumType != nil {
		_baacc := _d.StartElement{Name: _d.Name{Local: "w:pgNumType"}}
		e.EncodeElement(_gcedcf.PgNumType, _baacc)
	}
	if _gcedcf.Cols != nil {
		_gcgdfc := _d.StartElement{Name: _d.Name{Local: "w:cols"}}
		e.EncodeElement(_gcedcf.Cols, _gcgdfc)
	}
	if _gcedcf.FormProt != nil {
		_acggb := _d.StartElement{Name: _d.Name{Local: "w:formProt"}}
		e.EncodeElement(_gcedcf.FormProt, _acggb)
	}
	if _gcedcf.VAlign != nil {
		_cecbg := _d.StartElement{Name: _d.Name{Local: "w:vAlign"}}
		e.EncodeElement(_gcedcf.VAlign, _cecbg)
	}
	if _gcedcf.NoEndnote != nil {
		_gdabc := _d.StartElement{Name: _d.Name{Local: "w:noEndnote"}}
		e.EncodeElement(_gcedcf.NoEndnote, _gdabc)
	}
	if _gcedcf.TitlePg != nil {
		_efbae := _d.StartElement{Name: _d.Name{Local: "w:titlePg"}}
		e.EncodeElement(_gcedcf.TitlePg, _efbae)
	}
	if _gcedcf.TextDirection != nil {
		_bdddb := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_gcedcf.TextDirection, _bdddb)
	}
	if _gcedcf.Bidi != nil {
		_bffda := _d.StartElement{Name: _d.Name{Local: "w:bidi"}}
		e.EncodeElement(_gcedcf.Bidi, _bffda)
	}
	if _gcedcf.RtlGutter != nil {
		_ffcegc := _d.StartElement{Name: _d.Name{Local: "w:rtlGutter"}}
		e.EncodeElement(_gcedcf.RtlGutter, _ffcegc)
	}
	if _gcedcf.DocGrid != nil {
		_aafec := _d.StartElement{Name: _d.Name{Local: "w:docGrid"}}
		e.EncodeElement(_gcedcf.DocGrid, _aafec)
	}
	if _gcedcf.PrinterSettings != nil {
		_ddbdc := _d.StartElement{Name: _d.Name{Local: "w:printerSettings"}}
		e.EncodeElement(_gcedcf.PrinterSettings, _ddbdc)
	}
	if _gcedcf.SectPrChange != nil {
		_aacdee := _d.StartElement{Name: _d.Name{Local: "w:sectPrChange"}}
		e.EncodeElement(_gcedcf.SectPrChange, _aacdee)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ST_HpsMeasure is a union type
type ST_HpsMeasure struct {
	ST_UnsignedDecimalNumber    *uint64
	ST_PositiveUniversalMeasure *string
}

// Validate validates the WdAnchor and its children
func (_dcafc *WdAnchor) Validate() error { return _dcafc.ValidateWithPath("WdAnchor") }

// Validate validates the CT_SdtRun and its children
func (_cgdfd *CT_SdtRun) Validate() error { return _cgdfd.ValidateWithPath("CT_SdtRun") }
func (_ceffcc ST_DocGrid) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eacfc := _d.Attr{}
	_eacfc.Name = name
	switch _ceffcc {
	case ST_DocGridUnset:
		_eacfc.Value = ""
	case ST_DocGridDefault:
		_eacfc.Value = "default"
	case ST_DocGridLines:
		_eacfc.Value = "lines"
	case ST_DocGridLinesAndChars:
		_eacfc.Value = "linesAndChars"
	case ST_DocGridSnapToChars:
		_eacfc.Value = "snapToChars"
	}
	return _eacfc, nil
}

// ValidateWithPath validates the CT_DocPart and its children, prefixing error messages with path
func (_eabag *CT_DocPart) ValidateWithPath(path string) error {
	if _eabag.DocPartPr != nil {
		if _effe := _eabag.DocPartPr.ValidateWithPath(path + "\u002fDocPartPr"); _effe != nil {
			return _effe
		}
	}
	if _eabag.DocPartBody != nil {
		if _fege := _eabag.DocPartBody.ValidateWithPath(path + "\u002fDocPartBody"); _fege != nil {
			return _fege
		}
	}
	return nil
}
func (_fac *CT_Cnf) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bdag := range start.Attr {
		if _bdag.Name.Local == "evenVBand" {
			_bggc, _babce := ParseUnionST_OnOff(_bdag.Value)
			if _babce != nil {
				return _babce
			}
			_fac.EvenVBandAttr = &_bggc
			continue
		}
		if _bdag.Name.Local == "firstRow" {
			_ggea, _eabb := ParseUnionST_OnOff(_bdag.Value)
			if _eabb != nil {
				return _eabb
			}
			_fac.FirstRowAttr = &_ggea
			continue
		}
		if _bdag.Name.Local == "lastRow" {
			_aabfe, _abf := ParseUnionST_OnOff(_bdag.Value)
			if _abf != nil {
				return _abf
			}
			_fac.LastRowAttr = &_aabfe
			continue
		}
		if _bdag.Name.Local == "firstColumn" {
			_gada, _bggf := ParseUnionST_OnOff(_bdag.Value)
			if _bggf != nil {
				return _bggf
			}
			_fac.FirstColumnAttr = &_gada
			continue
		}
		if _bdag.Name.Local == "lastColumn" {
			_egefg, _dadb := ParseUnionST_OnOff(_bdag.Value)
			if _dadb != nil {
				return _dadb
			}
			_fac.LastColumnAttr = &_egefg
			continue
		}
		if _bdag.Name.Local == "oddVBand" {
			_eae, _efge := ParseUnionST_OnOff(_bdag.Value)
			if _efge != nil {
				return _efge
			}
			_fac.OddVBandAttr = &_eae
			continue
		}
		if _bdag.Name.Local == "val" {
			_gfbd, _caec := _bdag.Value, error(nil)
			if _caec != nil {
				return _caec
			}
			_fac.ValAttr = &_gfbd
			continue
		}
		if _bdag.Name.Local == "oddHBand" {
			_bfda, _gfba := ParseUnionST_OnOff(_bdag.Value)
			if _gfba != nil {
				return _gfba
			}
			_fac.OddHBandAttr = &_bfda
			continue
		}
		if _bdag.Name.Local == "evenHBand" {
			_dcfb, _cdca := ParseUnionST_OnOff(_bdag.Value)
			if _cdca != nil {
				return _cdca
			}
			_fac.EvenHBandAttr = &_dcfb
			continue
		}
		if _bdag.Name.Local == "firstRowFirstColumn" {
			_becb, _faae := ParseUnionST_OnOff(_bdag.Value)
			if _faae != nil {
				return _faae
			}
			_fac.FirstRowFirstColumnAttr = &_becb
			continue
		}
		if _bdag.Name.Local == "firstRowLastColumn" {
			_dbe, _egda := ParseUnionST_OnOff(_bdag.Value)
			if _egda != nil {
				return _egda
			}
			_fac.FirstRowLastColumnAttr = &_dbe
			continue
		}
		if _bdag.Name.Local == "lastRowFirstColumn" {
			_feca, _eadcd := ParseUnionST_OnOff(_bdag.Value)
			if _eadcd != nil {
				return _eadcd
			}
			_fac.LastRowFirstColumnAttr = &_feca
			continue
		}
		if _bdag.Name.Local == "lastRowLastColumn" {
			_bae, _ffccg := ParseUnionST_OnOff(_bdag.Value)
			if _ffccg != nil {
				return _ffccg
			}
			_fac.LastRowLastColumnAttr = &_bae
			continue
		}
	}
	for {
		_dbacg, _cegg := d.Token()
		if _cegg != nil {
			return _b.Errorf("parsing\u0020CT_Cnf:\u0020\u0025s", _cegg)
		}
		if _abgf, _gbga := _dbacg.(_d.EndElement); _gbga && _abgf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cddfee ST_TextDirection) ValidateWithPath(path string) error {
	switch _cddfee {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cddfee))
	}
	return nil
}
func (_abddfe *ST_CombineBrackets) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_abddfe = 0
	case "none":
		*_abddfe = 1
	case "round":
		*_abddfe = 2
	case "square":
		*_abddfe = 3
	case "angle":
		*_abddfe = 4
	case "curly":
		*_abddfe = 5
	}
	return nil
}
func (_ffgcbg WdST_AlignH) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ffgcbg.String(), start)
}
func NewCT_Num() *CT_Num {
	_eadbf := &CT_Num{}
	_eadbf.AbstractNumId = NewCT_DecimalNumber()
	return _eadbf
}
func (_gdba *CT_CustomXmlCell) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gdba.UriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uri"}, Value: _b.Sprintf("\u0025v", *_gdba.UriAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:element"}, Value: _b.Sprintf("\u0025v", _gdba.ElementAttr)})
	e.EncodeToken(start)
	if _gdba.CustomXmlPr != nil {
		_fdaeb := _d.StartElement{Name: _d.Name{Local: "w:customXmlPr"}}
		e.EncodeElement(_gdba.CustomXmlPr, _fdaeb)
	}
	if _gdba.EG_ContentCellContent != nil {
		for _, _fccc := range _gdba.EG_ContentCellContent {
			_fccc.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_PPrDefault struct {

	// Paragraph Properties
	PPr *CT_PPrGeneral
}
type CT_Panose struct {

	// Value
	ValAttr string
}
type CT_TextEffect struct {

	// Animated Text Effect Type
	ValAttr ST_TextEffect
}

// Validate validates the AG_SectPrAttributes and its children
func (_ce *AG_SectPrAttributes) Validate() error { return _ce.ValidateWithPath("AG_SectPrAttributes") }

type EG_ContentBlockContent struct {

	// Block-Level Custom XML Element
	CustomXml *CT_CustomXmlBlock

	// Block-Level Structured Document Tag
	Sdt *CT_SdtBlock

	// Paragraph
	P []*CT_P

	// Table
	Tbl             []*CT_Tbl
	EG_RunLevelElts []*EG_RunLevelElts
}

func (_fgbfd *CT_NumFmt) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_bgegb, _deecd := _fgbfd.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _deecd != nil {
		return _deecd
	}
	start.Attr = append(start.Attr, _bgegb)
	if _fgbfd.FormatAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:format"}, Value: _b.Sprintf("\u0025v", *_fgbfd.FormatAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_RecipientData and its children
func (_aeaff *CT_RecipientData) Validate() error { return _aeaff.ValidateWithPath("CT_RecipientData") }

const (
	ST_TblStyleOverrideTypeUnset      ST_TblStyleOverrideType = 0
	ST_TblStyleOverrideTypeWholeTable ST_TblStyleOverrideType = 1
	ST_TblStyleOverrideTypeFirstRow   ST_TblStyleOverrideType = 2
	ST_TblStyleOverrideTypeLastRow    ST_TblStyleOverrideType = 3
	ST_TblStyleOverrideTypeFirstCol   ST_TblStyleOverrideType = 4
	ST_TblStyleOverrideTypeLastCol    ST_TblStyleOverrideType = 5
	ST_TblStyleOverrideTypeBand1Vert  ST_TblStyleOverrideType = 6
	ST_TblStyleOverrideTypeBand2Vert  ST_TblStyleOverrideType = 7
	ST_TblStyleOverrideTypeBand1Horz  ST_TblStyleOverrideType = 8
	ST_TblStyleOverrideTypeBand2Horz  ST_TblStyleOverrideType = 9
	ST_TblStyleOverrideTypeNeCell     ST_TblStyleOverrideType = 10
	ST_TblStyleOverrideTypeNwCell     ST_TblStyleOverrideType = 11
	ST_TblStyleOverrideTypeSeCell     ST_TblStyleOverrideType = 12
	ST_TblStyleOverrideTypeSwCell     ST_TblStyleOverrideType = 13
)

func NewFtr() *Ftr { _eagadb := &Ftr{}; _eagadb.CT_HdrFtr = *NewCT_HdrFtr(); return _eagadb }

type EG_PContentBase struct {
	CustomXml *CT_CustomXmlRun
	FldSimple []*CT_SimpleField
	Hyperlink *CT_Hyperlink
}

func (_agafg *ST_BrType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_agafg = 0
	case "page":
		*_agafg = 1
	case "column":
		*_agafg = 2
	case "textWrapping":
		*_agafg = 3
	}
	return nil
}
func NewCT_Footnotes() *CT_Footnotes { _beddee := &CT_Footnotes{}; return _beddee }
func (_ecggd *CT_MathCtrlIns) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _ecggd.AuthorAttr)})
	if _ecggd.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_ecggd.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _ecggd.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dbdedb *EG_MathContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dbdedb.OMathPara != nil {
		_cfcaa := _d.StartElement{Name: _d.Name{Local: "m:oMathPara"}}
		e.EncodeElement(_dbdedb.OMathPara, _cfcaa)
	}
	if _dbdedb.OMath != nil {
		_bgebfa := _d.StartElement{Name: _d.Name{Local: "m:oMath"}}
		e.EncodeElement(_dbdedb.OMath, _bgebfa)
	}
	return nil
}

type ST_PageBorderOffset byte

// ValidateWithPath validates the CT_PaperSource and its children, prefixing error messages with path
func (_geac *CT_PaperSource) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_DocPartTypes and its children
func (_cbfb *CT_DocPartTypes) Validate() error { return _cbfb.ValidateWithPath("CT_DocPartTypes") }
func NewCT_PageMar() *CT_PageMar               { _ggcf := &CT_PageMar{}; return _ggcf }
func (_dccdg *ST_VAnchor) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gaafae, _fecafd := d.Token()
	if _fecafd != nil {
		return _fecafd
	}
	if _ffaaa, _gdgecc := _gaafae.(_d.EndElement); _gdgecc && _ffaaa.Name == start.Name {
		*_dccdg = 1
		return nil
	}
	if _bdgba, _ggddcd := _gaafae.(_d.CharData); !_ggddcd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _gaafae)
	} else {
		switch string(_bdgba) {
		case "":
			*_dccdg = 0
		case "text":
			*_dccdg = 1
		case "margin":
			*_dccdg = 2
		case "page":
			*_dccdg = 3
		}
	}
	_gaafae, _fecafd = d.Token()
	if _fecafd != nil {
		return _fecafd
	}
	if _cbcbb, _gdgccfe := _gaafae.(_d.EndElement); _gdgccfe && _cbcbb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _gaafae)
}
func NewCT_PPrGeneral() *CT_PPrGeneral { _eecae := &CT_PPrGeneral{}; return _eecae }

// Validate validates the WdCT_WrapPath and its children
func (_ccfeea *WdCT_WrapPath) Validate() error { return _ccfeea.ValidateWithPath("WdCT_WrapPath") }
func (_gadcg *ST_CaptionPos) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gadcg = 0
	case "above":
		*_gadcg = 1
	case "below":
		*_gadcg = 2
	case "left":
		*_gadcg = 3
	case "right":
		*_gadcg = 4
	}
	return nil
}
func (_cabgb ST_HexColorAuto) Validate() error { return _cabgb.ValidateWithPath("") }

// ValidateWithPath validates the CT_FFTextInput and its children, prefixing error messages with path
func (_eaeea *CT_FFTextInput) ValidateWithPath(path string) error {
	if _eaeea.Type != nil {
		if _gfbe := _eaeea.Type.ValidateWithPath(path + "\u002fType"); _gfbe != nil {
			return _gfbe
		}
	}
	if _eaeea.Default != nil {
		if _abbaf := _eaeea.Default.ValidateWithPath(path + "\u002fDefault"); _abbaf != nil {
			return _abbaf
		}
	}
	if _eaeea.MaxLength != nil {
		if _fgcggg := _eaeea.MaxLength.ValidateWithPath(path + "\u002fMaxLength"); _fgcggg != nil {
			return _fgcggg
		}
	}
	if _eaeea.Format != nil {
		if _aadec := _eaeea.Format.ValidateWithPath(path + "\u002fFormat"); _aadec != nil {
			return _aadec
		}
	}
	return nil
}
func NewCT_FitText() *CT_FitText { _cgddb := &CT_FitText{}; return _cgddb }

// Validate validates the CT_DocPartPr and its children
func (_bbbgb *CT_DocPartPr) Validate() error { return _bbbgb.ValidateWithPath("CT_DocPartPr") }
func NewEG_RPrMath() *EG_RPrMath             { _adfbc := &EG_RPrMath{}; return _adfbc }

type TxbxContent struct{ CT_TxbxContent }

func (_bgbaee *WdCT_WordprocessingCanvasChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bgbaee.Wsp != nil {
		_gfgfdf := _d.StartElement{Name: _d.Name{Local: "wp:wsp"}}
		for _, _facff := range _bgbaee.Wsp {
			e.EncodeElement(_facff, _gfgfdf)
		}
	}
	if _bgbaee.Pic != nil {
		_eddadg := _d.StartElement{Name: _d.Name{Local: "pic:pic"}}
		for _, _fgdgad := range _bgbaee.Pic {
			e.EncodeElement(_fgdgad, _eddadg)
		}
	}
	if _bgbaee.ContentPart != nil {
		_agbgdg := _d.StartElement{Name: _d.Name{Local: "wp:contentPart"}}
		for _, _efdaf := range _bgbaee.ContentPart {
			e.EncodeElement(_efdaf, _agbgdg)
		}
	}
	if _bgbaee.Wgp != nil {
		_cfbfg := _d.StartElement{Name: _d.Name{Local: "wp:wgp"}}
		for _, _fddcdf := range _bgbaee.Wgp {
			e.EncodeElement(_fddcdf, _cfbfg)
		}
	}
	if _bgbaee.GraphicFrame != nil {
		_cbgadf := _d.StartElement{Name: _d.Name{Local: "wp:graphicFrame"}}
		for _, _cgadcf := range _bgbaee.GraphicFrame {
			e.EncodeElement(_cgadcf, _cbgadf)
		}
	}
	return nil
}
func NewCT_DocPartBehavior() *CT_DocPartBehavior {
	_cgdcb := &CT_DocPartBehavior{}
	_cgdcb.ValAttr = ST_DocPartBehavior(1)
	return _cgdcb
}

// ValidateWithPath validates the CT_TrackChangesView and its children, prefixing error messages with path
func (_ddgf *CT_TrackChangesView) ValidateWithPath(path string) error {
	if _ddgf.MarkupAttr != nil {
		if _adabca := _ddgf.MarkupAttr.ValidateWithPath(path + "/MarkupAttr"); _adabca != nil {
			return _adabca
		}
	}
	if _ddgf.CommentsAttr != nil {
		if _gdfag := _ddgf.CommentsAttr.ValidateWithPath(path + "\u002fCommentsAttr"); _gdfag != nil {
			return _gdfag
		}
	}
	if _ddgf.InsDelAttr != nil {
		if _geecee := _ddgf.InsDelAttr.ValidateWithPath(path + "/InsDelAttr"); _geecee != nil {
			return _geecee
		}
	}
	if _ddgf.FormattingAttr != nil {
		if _bcaeaf := _ddgf.FormattingAttr.ValidateWithPath(path + "\u002fFormattingAttr"); _bcaeaf != nil {
			return _bcaeaf
		}
	}
	if _ddgf.InkAnnotationsAttr != nil {
		if _fabdfd := _ddgf.InkAnnotationsAttr.ValidateWithPath(path + "\u002fInkAnnotationsAttr"); _fabdfd != nil {
			return _fabdfd
		}
	}
	return nil
}

type CT_CustomXmlPr struct {

	// Custom XML Element Placeholder Text
	Placeholder *CT_String

	// Custom XML Attribute
	Attr []*CT_Attr
}

// ValidateWithPath validates the CT_ObjectEmbed and its children, prefixing error messages with path
func (_febde *CT_ObjectEmbed) ValidateWithPath(path string) error {
	if _cegae := _febde.DrawAspectAttr.ValidateWithPath(path + "\u002fDrawAspectAttr"); _cegae != nil {
		return _cegae
	}
	return nil
}
func NewCT_FramePr() *CT_FramePr { _bgcee := &CT_FramePr{}; return _bgcee }
func (_bcfeeg ST_TblStyleOverrideType) ValidateWithPath(path string) error {
	switch _bcfeeg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_bcfeeg))
	}
	return nil
}
func NewCT_PBdr() *CT_PBdr           { _gfgee := &CT_PBdr{}; return _gfgee }
func (_cfafa ST_Em) Validate() error { return _cfafa.ValidateWithPath("") }

type CT_DocPartPr struct {

	// Entry Name
	Name *CT_DocPartName

	// Associated Paragraph Style Name
	Style *CT_String

	// Entry Categorization
	Category *CT_DocPartCategory

	// Entry Types
	Types *CT_DocPartTypes

	// Entry Insertion Behaviors
	Behaviors *CT_DocPartBehaviors

	// Description for Entry
	Description *CT_String

	// Entry ID
	Guid *CT_Guid
}

func (_bbecc *CT_TblOverlap) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_gbcfe, _edfgd := _bbecc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _edfgd != nil {
		return _edfgd
	}
	start.Attr = append(start.Attr, _gbcfe)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewWdCT_Inline() *WdCT_Inline {
	_facbdb := &WdCT_Inline{}
	_facbdb.Extent = _eb.NewCT_PositiveSize2D()
	_facbdb.DocPr = _eb.NewCT_NonVisualDrawingProps()
	_facbdb.Graphic = _eb.NewGraphic()
	return _facbdb
}

const (
	WdST_AlignVUnset   WdST_AlignV = 0
	WdST_AlignVTop     WdST_AlignV = 1
	WdST_AlignVBottom  WdST_AlignV = 2
	WdST_AlignVCenter  WdST_AlignV = 3
	WdST_AlignVInside  WdST_AlignV = 4
	WdST_AlignVOutside WdST_AlignV = 5
)

// ValidateWithPath validates the CT_PTab and its children, prefixing error messages with path
func (_abbga *CT_PTab) ValidateWithPath(path string) error {
	if _abbga.AlignmentAttr == ST_PTabAlignmentUnset {
		return _b.Errorf("\u0025s/AlignmentAttr\u0020is a\u0020mandatory\u0020field", path)
	}
	if _ggedd := _abbga.AlignmentAttr.ValidateWithPath(path + "\u002fAlignmentAttr"); _ggedd != nil {
		return _ggedd
	}
	if _abbga.RelativeToAttr == ST_PTabRelativeToUnset {
		return _b.Errorf("\u0025s\u002fRelativeToAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _egcfa := _abbga.RelativeToAttr.ValidateWithPath(path + "\u002fRelativeToAttr"); _egcfa != nil {
		return _egcfa
	}
	if _abbga.LeaderAttr == ST_PTabLeaderUnset {
		return _b.Errorf("\u0025s\u002fLeaderAttr\u0020is a mandatory\u0020field", path)
	}
	if _bdccf := _abbga.LeaderAttr.ValidateWithPath(path + "/LeaderAttr"); _bdccf != nil {
		return _bdccf
	}
	return nil
}

// ValidateWithPath validates the CT_Headers and its children, prefixing error messages with path
func (_dfddc *CT_Headers) ValidateWithPath(path string) error {
	for _dcfe, _eebb := range _dfddc.Header {
		if _gfaca := _eebb.ValidateWithPath(_b.Sprintf("\u0025s\u002fHeader\u005b\u0025d\u005d", path, _dcfe)); _gfaca != nil {
			return _gfaca
		}
	}
	return nil
}
func NewCT_Settings() *CT_Settings { _becba := &CT_Settings{}; return _becba }
func (_bfeff *WdCT_LinkedTextboxInformation) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ececd := range start.Attr {
		if _ececd.Name.Local == "id" {
			_dgbda, _gggaab := _dd.ParseUint(_ececd.Value, 10, 16)
			if _gggaab != nil {
				return _gggaab
			}
			_bfeff.IdAttr = uint16(_dgbda)
			continue
		}
		if _ececd.Name.Local == "seq" {
			_fbceb, _bcbcca := _dd.ParseUint(_ececd.Value, 10, 16)
			if _bcbcca != nil {
				return _bcbcca
			}
			_bfeff.SeqAttr = uint16(_fbceb)
			continue
		}
	}
_defbfg:
	for {
		_abdef, _cdadfg := d.Token()
		if _cdadfg != nil {
			return _cdadfg
		}
		switch _gcbfba := _abdef.(type) {
		case _d.StartElement:
			switch _gcbfba.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_bfeff.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _cgeec := d.DecodeElement(_bfeff.ExtLst, &_gcbfba); _cgeec != nil {
					return _cgeec
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on\u0020WdCT_LinkedTextboxInformation\u0020%v", _gcbfba.Name)
				if _bbedc := d.Skip(); _bbedc != nil {
					return _bbedc
				}
			}
		case _d.EndElement:
			break _defbfg
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_TcPrInner() *CT_TcPrInner { _gdbea := &CT_TcPrInner{}; return _gdbea }

// ValidateWithPath validates the CT_ShapeDefaults and its children, prefixing error messages with path
func (_gfefc *CT_ShapeDefaults) ValidateWithPath(path string) error { return nil }

type CT_HMerge struct {

	// Horizontal Merge Type
	ValAttr ST_Merge
}

func NewWdCT_TextboxInfo() *WdCT_TextboxInfo {
	_beddeg := &WdCT_TextboxInfo{}
	_beddeg.TxbxContent = NewWdCT_TxbxContent()
	return _beddeg
}

type CT_StylePaneFilter struct {

	// Display All Styles
	AllStylesAttr *_g.ST_OnOff

	// Display Only Custom Styles
	CustomStylesAttr *_g.ST_OnOff

	// Display Latent Styles
	LatentStylesAttr *_g.ST_OnOff

	// Display Styles in Use
	StylesInUseAttr *_g.ST_OnOff

	// Display Heading Styles
	HeadingStylesAttr *_g.ST_OnOff

	// Display Numbering Styles
	NumberingStylesAttr *_g.ST_OnOff

	// Display Table Styles
	TableStylesAttr *_g.ST_OnOff

	// Display Run Level Direct Formatting
	DirectFormattingOnRunsAttr *_g.ST_OnOff

	// Display Paragraph Level Direct Formatting
	DirectFormattingOnParagraphsAttr *_g.ST_OnOff

	// Display Direct Formatting on Numbering Data
	DirectFormattingOnNumberingAttr *_g.ST_OnOff

	// Display Direct Formatting on Tables
	DirectFormattingOnTablesAttr *_g.ST_OnOff

	// Display Styles to Remove Formatting
	ClearFormattingAttr *_g.ST_OnOff

	// Display Heading 1 through 3
	Top3HeadingStylesAttr *_g.ST_OnOff

	// Only Show Visible Styles
	VisibleStylesAttr *_g.ST_OnOff

	// Use the Alternate Style Name
	AlternateStyleNamesAttr *_g.ST_OnOff

	// Bitmask of Suggested Filtering Options
	ValAttr *string
}

func (_egae *CT_DocVars) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _egae.DocVar != nil {
		_cbdce := _d.StartElement{Name: _d.Name{Local: "w:docVar"}}
		for _, _fbbg := range _egae.DocVar {
			e.EncodeElement(_fbbg, _cbdce)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Frame struct {

	// Frame Size
	Sz *CT_String

	// Frame Name
	Name *CT_String

	// Frame or Frameset Title
	Title *CT_String

	// Frame Long Description
	LongDesc *CT_Rel

	// Source File for Frame
	SourceFileName *CT_Rel

	// Left and Right Margin for Frame
	MarW *CT_PixelsMeasure

	// Top and Bottom Margin for Frame
	MarH *CT_PixelsMeasure

	// Scrollbar Display Option
	Scrollbar *CT_FrameScrollbar

	// Frame Cannot Be Resized
	NoResizeAllowed *CT_OnOff

	// Maintain Link to Existing File
	LinkedToFile *CT_OnOff
}

func (_ceee *ST_MailMergeSourceType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ddacb, _eefce := d.Token()
	if _eefce != nil {
		return _eefce
	}
	if _bgaacb, _dbbfce := _ddacb.(_d.EndElement); _dbbfce && _bgaacb.Name == start.Name {
		*_ceee = 1
		return nil
	}
	if _dfged, _ffeda := _ddacb.(_d.CharData); !_ffeda {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ddacb)
	} else {
		switch string(_dfged) {
		case "":
			*_ceee = 0
		case "database":
			*_ceee = 1
		case "addressBook":
			*_ceee = 2
		case "document1":
			*_ceee = 3
		case "document2":
			*_ceee = 4
		case "text":
			*_ceee = 5
		case "email":
			*_ceee = 6
		case "native":
			*_ceee = 7
		case "legacy":
			*_ceee = 8
		case "master":
			*_ceee = 9
		}
	}
	_ddacb, _eefce = d.Token()
	if _eefce != nil {
		return _eefce
	}
	if _geecf, _fddef := _ddacb.(_d.EndElement); _fddef && _geecf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ddacb)
}

const (
	ST_EmUnset    ST_Em = 0
	ST_EmNone     ST_Em = 1
	ST_EmDot      ST_Em = 2
	ST_EmComma    ST_Em = 3
	ST_EmCircle   ST_Em = 4
	ST_EmUnderDot ST_Em = 5
)

func (_efbbdd *Styles) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_efbbdd.CT_Styles = *NewCT_Styles()
_fbgacf:
	for {
		_ebegdb, _cfagfg := d.Token()
		if _cfagfg != nil {
			return _cfagfg
		}
		switch _ebcefc := _ebegdb.(type) {
		case _d.StartElement:
			switch _ebcefc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docDefaults"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docDefaults"}:
				_efbbdd.DocDefaults = NewCT_DocDefaults()
				if _gabbd := d.DecodeElement(_efbbdd.DocDefaults, &_ebcefc); _gabbd != nil {
					return _gabbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "latentStyles"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "latentStyles"}:
				_efbbdd.LatentStyles = NewCT_LatentStyles()
				if _bfaef := d.DecodeElement(_efbbdd.LatentStyles, &_ebcefc); _bfaef != nil {
					return _bfaef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "style"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "style"}:
				_fbege := NewCT_Style()
				if _eddcaf := d.DecodeElement(_fbege, &_ebcefc); _eddcaf != nil {
					return _eddcaf
				}
				_efbbdd.Style = append(_efbbdd.Style, _fbege)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020Styles\u0020\u0025v", _ebcefc.Name)
				if _fbfgfd := d.Skip(); _fbfgfd != nil {
					return _fbfgfd
				}
			}
		case _d.EndElement:
			break _fbgacf
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_TcPrChange and its children
func (_eeefbgf *CT_TcPrChange) Validate() error { return _eeefbgf.ValidateWithPath("CT_TcPrChange") }
func (_fdebg *CT_WebSettings) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fdebg.Frameset != nil {
		_afgeb := _d.StartElement{Name: _d.Name{Local: "w:frameset"}}
		e.EncodeElement(_fdebg.Frameset, _afgeb)
	}
	if _fdebg.Divs != nil {
		_agbdaa := _d.StartElement{Name: _d.Name{Local: "w:divs"}}
		e.EncodeElement(_fdebg.Divs, _agbdaa)
	}
	if _fdebg.Encoding != nil {
		_fcadd := _d.StartElement{Name: _d.Name{Local: "w:encoding"}}
		e.EncodeElement(_fdebg.Encoding, _fcadd)
	}
	if _fdebg.OptimizeForBrowser != nil {
		_bggaff := _d.StartElement{Name: _d.Name{Local: "w:optimizeForBrowser"}}
		e.EncodeElement(_fdebg.OptimizeForBrowser, _bggaff)
	}
	if _fdebg.RelyOnVML != nil {
		_ccdfc := _d.StartElement{Name: _d.Name{Local: "w:relyOnVML"}}
		e.EncodeElement(_fdebg.RelyOnVML, _ccdfc)
	}
	if _fdebg.AllowPNG != nil {
		_abbgf := _d.StartElement{Name: _d.Name{Local: "w:allowPNG"}}
		e.EncodeElement(_fdebg.AllowPNG, _abbgf)
	}
	if _fdebg.DoNotRelyOnCSS != nil {
		_bgdeg := _d.StartElement{Name: _d.Name{Local: "w:doNotRelyOnCSS"}}
		e.EncodeElement(_fdebg.DoNotRelyOnCSS, _bgdeg)
	}
	if _fdebg.DoNotSaveAsSingleFile != nil {
		_bedafb := _d.StartElement{Name: _d.Name{Local: "w:doNotSaveAsSingleFile"}}
		e.EncodeElement(_fdebg.DoNotSaveAsSingleFile, _bedafb)
	}
	if _fdebg.DoNotOrganizeInFolder != nil {
		_eebada := _d.StartElement{Name: _d.Name{Local: "w:doNotOrganizeInFolder"}}
		e.EncodeElement(_fdebg.DoNotOrganizeInFolder, _eebada)
	}
	if _fdebg.DoNotUseLongFileNames != nil {
		_cegee := _d.StartElement{Name: _d.Name{Local: "w:doNotUseLongFileNames"}}
		e.EncodeElement(_fdebg.DoNotUseLongFileNames, _cegee)
	}
	if _fdebg.PixelsPerInch != nil {
		_eegda := _d.StartElement{Name: _d.Name{Local: "w:pixelsPerInch"}}
		e.EncodeElement(_fdebg.PixelsPerInch, _eegda)
	}
	if _fdebg.TargetScreenSz != nil {
		_faecec := _d.StartElement{Name: _d.Name{Local: "w:targetScreenSz"}}
		e.EncodeElement(_fdebg.TargetScreenSz, _faecec)
	}
	if _fdebg.SaveSmartTagsAsXml != nil {
		_eaadgd := _d.StartElement{Name: _d.Name{Local: "w:saveSmartTagsAsXml"}}
		e.EncodeElement(_fdebg.SaveSmartTagsAsXml, _eaadgd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cdfeg *CT_TcPrBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_affda:
	for {
		_cbedf, _cggfef := d.Token()
		if _cggfef != nil {
			return _cggfef
		}
		switch _afdcfa := _cbedf.(type) {
		case _d.StartElement:
			switch _afdcfa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_cdfeg.CnfStyle = NewCT_Cnf()
				if _degfd := d.DecodeElement(_cdfeg.CnfStyle, &_afdcfa); _degfd != nil {
					return _degfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcW"}:
				_cdfeg.TcW = NewCT_TblWidth()
				if _gbcga := d.DecodeElement(_cdfeg.TcW, &_afdcfa); _gbcga != nil {
					return _gbcga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridSpan"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridSpan"}:
				_cdfeg.GridSpan = NewCT_DecimalNumber()
				if _agadcf := d.DecodeElement(_cdfeg.GridSpan, &_afdcfa); _agadcf != nil {
					return _agadcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hMerge"}:
				_cdfeg.HMerge = NewCT_HMerge()
				if _daed := d.DecodeElement(_cdfeg.HMerge, &_afdcfa); _daed != nil {
					return _daed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vMerge"}:
				_cdfeg.VMerge = NewCT_VMerge()
				if _abfgeb := d.DecodeElement(_cdfeg.VMerge, &_afdcfa); _abfgeb != nil {
					return _abfgeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcBorders"}:
				_cdfeg.TcBorders = NewCT_TcBorders()
				if _ecabgf := d.DecodeElement(_cdfeg.TcBorders, &_afdcfa); _ecabgf != nil {
					return _ecabgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_cdfeg.Shd = NewCT_Shd()
				if _dceba := d.DecodeElement(_cdfeg.Shd, &_afdcfa); _dceba != nil {
					return _dceba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noWrap"}:
				_cdfeg.NoWrap = NewCT_OnOff()
				if _aggec := d.DecodeElement(_cdfeg.NoWrap, &_afdcfa); _aggec != nil {
					return _aggec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcMar"}:
				_cdfeg.TcMar = NewCT_TcMar()
				if _ffaafb := d.DecodeElement(_cdfeg.TcMar, &_afdcfa); _ffaafb != nil {
					return _ffaafb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_cdfeg.TextDirection = NewCT_TextDirection()
				if _cebdf := d.DecodeElement(_cdfeg.TextDirection, &_afdcfa); _cebdf != nil {
					return _cebdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcFitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcFitText"}:
				_cdfeg.TcFitText = NewCT_OnOff()
				if _bccaf := d.DecodeElement(_cdfeg.TcFitText, &_afdcfa); _bccaf != nil {
					return _bccaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vAlign"}:
				_cdfeg.VAlign = NewCT_VerticalJc()
				if _cfaag := d.DecodeElement(_cdfeg.VAlign, &_afdcfa); _cfaag != nil {
					return _cfaag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hideMark"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hideMark"}:
				_cdfeg.HideMark = NewCT_OnOff()
				if _abaed := d.DecodeElement(_cdfeg.HideMark, &_afdcfa); _abaed != nil {
					return _abaed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "headers"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "headers"}:
				_cdfeg.Headers = NewCT_Headers()
				if _cfgdg := d.DecodeElement(_cdfeg.Headers, &_afdcfa); _cfgdg != nil {
					return _cfgdg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TcPrBase\u0020\u0025v", _afdcfa.Name)
				if _fecgf := d.Skip(); _fecgf != nil {
					return _fecgf
				}
			}
		case _d.EndElement:
			break _affda
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LineNumber and its children, prefixing error messages with path
func (_abafb *CT_LineNumber) ValidateWithPath(path string) error {
	if _abafb.DistanceAttr != nil {
		if _dfggb := _abafb.DistanceAttr.ValidateWithPath(path + "\u002fDistanceAttr"); _dfggb != nil {
			return _dfggb
		}
	}
	if _bddaaa := _abafb.RestartAttr.ValidateWithPath(path + "\u002fRestartAttr"); _bddaaa != nil {
		return _bddaaa
	}
	return nil
}

// Validate validates the CT_Tbl and its children
func (_ddbecc *CT_Tbl) Validate() error { return _ddbecc.ValidateWithPath("CT_Tbl") }

type CT_SignedTwipsMeasure struct {

	// Positive or Negative Value in Twentieths of a Point
	ValAttr ST_SignedTwipsMeasure
}

func (_gffge *CT_VerticalAlignRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gffge.ValAttr = _g.ST_VerticalAlignRun(1)
	for _, _faafgf := range start.Attr {
		if _faafgf.Name.Local == "val" {
			_gffge.ValAttr.UnmarshalXMLAttr(_faafgf)
			continue
		}
	}
	for {
		_bdagc, _fabag := d.Token()
		if _fabag != nil {
			return _b.Errorf("parsing\u0020CT_VerticalAlignRun:\u0020\u0025s", _fabag)
		}
		if _efdgag, _ddbfd := _bdagc.(_d.EndElement); _ddbfd && _efdgag.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cacgcg *ST_JcTable) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffdegb, _bbaaf := d.Token()
	if _bbaaf != nil {
		return _bbaaf
	}
	if _effcf, _egbdg := _ffdegb.(_d.EndElement); _egbdg && _effcf.Name == start.Name {
		*_cacgcg = 1
		return nil
	}
	if _fdeaba, _ebcag := _ffdegb.(_d.CharData); !_ebcag {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ffdegb)
	} else {
		switch string(_fdeaba) {
		case "":
			*_cacgcg = 0
		case "center":
			*_cacgcg = 1
		case "end":
			*_cacgcg = 2
		case "left":
			*_cacgcg = 3
		case "right":
			*_cacgcg = 4
		case "start":
			*_cacgcg = 5
		}
	}
	_ffdegb, _bbaaf = d.Token()
	if _bbaaf != nil {
		return _bbaaf
	}
	if _edcdd, _facdad := _ffdegb.(_d.EndElement); _facdad && _edcdd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ffdegb)
}

// ValidateWithPath validates the CT_SdtListItem and its children, prefixing error messages with path
func (_cbefg *CT_SdtListItem) ValidateWithPath(path string) error { return nil }
func (_eggge *CT_DecimalNumber) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _eggge.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_HMerge and its children
func (_gbbfg *CT_HMerge) Validate() error { return _gbbfg.ValidateWithPath("CT_HMerge") }
func (_dcebdf ST_EdnPos) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_aebbbb := _d.Attr{}
	_aebbbb.Name = name
	switch _dcebdf {
	case ST_EdnPosUnset:
		_aebbbb.Value = ""
	case ST_EdnPosSectEnd:
		_aebbbb.Value = "sectEnd"
	case ST_EdnPosDocEnd:
		_aebbbb.Value = "docEnd"
	}
	return _aebbbb, nil
}

// Validate validates the CT_WritingStyle and its children
func (_adcbg *CT_WritingStyle) Validate() error { return _adcbg.ValidateWithPath("CT_WritingStyle") }

// ValidateWithPath validates the CT_SaveThroughXslt and its children, prefixing error messages with path
func (_badbb *CT_SaveThroughXslt) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_TrPrBase and its children, prefixing error messages with path
func (_dgebgc *CT_TrPrBase) ValidateWithPath(path string) error {
	for _bbgef, _cadcd := range _dgebgc.CnfStyle {
		if _dbfegf := _cadcd.ValidateWithPath(_b.Sprintf("\u0025s\u002fCnfStyle\u005b\u0025d\u005d", path, _bbgef)); _dbfegf != nil {
			return _dbfegf
		}
	}
	for _bggcba, _fcaad := range _dgebgc.DivId {
		if _gbedcc := _fcaad.ValidateWithPath(_b.Sprintf("\u0025s\u002fDivId\u005b\u0025d\u005d", path, _bggcba)); _gbedcc != nil {
			return _gbedcc
		}
	}
	for _ffcac, _dgcae := range _dgebgc.GridBefore {
		if _gdgag := _dgcae.ValidateWithPath(_b.Sprintf("\u0025s\u002fGridBefore\u005b\u0025d\u005d", path, _ffcac)); _gdgag != nil {
			return _gdgag
		}
	}
	for _bagca, _ebfceb := range _dgebgc.GridAfter {
		if _faecg := _ebfceb.ValidateWithPath(_b.Sprintf("\u0025s/GridAfter\u005b\u0025d\u005d", path, _bagca)); _faecg != nil {
			return _faecg
		}
	}
	for _dbggaa, _egdfe := range _dgebgc.WBefore {
		if _cbcca := _egdfe.ValidateWithPath(_b.Sprintf("\u0025s\u002fWBefore\u005b\u0025d\u005d", path, _dbggaa)); _cbcca != nil {
			return _cbcca
		}
	}
	for _bgbf, _bffef := range _dgebgc.WAfter {
		if _gebdbf := _bffef.ValidateWithPath(_b.Sprintf("\u0025s\u002fWAfter\u005b\u0025d\u005d", path, _bgbf)); _gebdbf != nil {
			return _gebdbf
		}
	}
	for _ccgfag, _cegeb := range _dgebgc.CantSplit {
		if _daeea := _cegeb.ValidateWithPath(_b.Sprintf("\u0025s/CantSplit\u005b\u0025d\u005d", path, _ccgfag)); _daeea != nil {
			return _daeea
		}
	}
	for _dgbdf, _bdgac := range _dgebgc.TrHeight {
		if _gabda := _bdgac.ValidateWithPath(_b.Sprintf("\u0025s\u002fTrHeight\u005b\u0025d\u005d", path, _dgbdf)); _gabda != nil {
			return _gabda
		}
	}
	for _bgbbfg, _eaadd := range _dgebgc.TblHeader {
		if _acaga := _eaadd.ValidateWithPath(_b.Sprintf("\u0025s/TblHeader\u005b\u0025d\u005d", path, _bgbbfg)); _acaga != nil {
			return _acaga
		}
	}
	for _gfcbea, _bbdff := range _dgebgc.TblCellSpacing {
		if _afced := _bbdff.ValidateWithPath(_b.Sprintf("%s\u002fTblCellSpacing\u005b\u0025d\u005d", path, _gfcbea)); _afced != nil {
			return _afced
		}
	}
	for _bgdgd, _gaefdf := range _dgebgc.Jc {
		if _ggfdd := _gaefdf.ValidateWithPath(_b.Sprintf("\u0025s\u002fJc\u005b\u0025d]", path, _bgdgd)); _ggfdd != nil {
			return _ggfdd
		}
	}
	for _ggdac, _bgddcg := range _dgebgc.Hidden {
		if _afebe := _bgddcg.ValidateWithPath(_b.Sprintf("\u0025s\u002fHidden\u005b\u0025d\u005d", path, _ggdac)); _afebe != nil {
			return _afebe
		}
	}
	return nil
}
func (_edacc *CT_FtnDocProps) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gbacd:
	for {
		_cgfe, _fbgef := d.Token()
		if _fbgef != nil {
			return _fbgef
		}
		switch _caefd := _cgfe.(type) {
		case _d.StartElement:
			switch _caefd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pos"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pos"}:
				_edacc.Pos = NewCT_FtnPos()
				if _ecag := d.DecodeElement(_edacc.Pos, &_caefd); _ecag != nil {
					return _ecag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numFmt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numFmt"}:
				_edacc.NumFmt = NewCT_NumFmt()
				if _ebagd := d.DecodeElement(_edacc.NumFmt, &_caefd); _ebagd != nil {
					return _ebagd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numStart"}:
				_edacc.NumStart = NewCT_DecimalNumber()
				if _ffafd := d.DecodeElement(_edacc.NumStart, &_caefd); _ffafd != nil {
					return _ffafd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numRestart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numRestart"}:
				_edacc.NumRestart = NewCT_NumRestart()
				if _acbda := d.DecodeElement(_edacc.NumRestart, &_caefd); _acbda != nil {
					return _acbda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnote"}:
				_fgef := NewCT_FtnEdnSepRef()
				if _gefd := d.DecodeElement(_fgef, &_caefd); _gefd != nil {
					return _gefd
				}
				_edacc.Footnote = append(_edacc.Footnote, _fgef)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_FtnDocProps\u0020\u0025v", _caefd.Name)
				if _dced := d.Skip(); _dced != nil {
					return _dced
				}
			}
		case _d.EndElement:
			break _gbacd
		case _d.CharData:
		}
	}
	return nil
}
func (_aaded *CT_PageMar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gagbe := range start.Attr {
		if _gagbe.Name.Local == "top" {
			_ddbba, _cfgba := ParseUnionST_SignedTwipsMeasure(_gagbe.Value)
			if _cfgba != nil {
				return _cfgba
			}
			_aaded.TopAttr = _ddbba
			continue
		}
		if _gagbe.Name.Local == "right" {
			_baed, _aefea := ParseUnionST_TwipsMeasure(_gagbe.Value)
			if _aefea != nil {
				return _aefea
			}
			_aaded.RightAttr = _baed
			continue
		}
		if _gagbe.Name.Local == "bottom" {
			_bbbfa, _gcfegd := ParseUnionST_SignedTwipsMeasure(_gagbe.Value)
			if _gcfegd != nil {
				return _gcfegd
			}
			_aaded.BottomAttr = _bbbfa
			continue
		}
		if _gagbe.Name.Local == "left" {
			_ebcfb, _ccbab := ParseUnionST_TwipsMeasure(_gagbe.Value)
			if _ccbab != nil {
				return _ccbab
			}
			_aaded.LeftAttr = _ebcfb
			continue
		}
		if _gagbe.Name.Local == "header" {
			_eacgb, _efgcd := ParseUnionST_TwipsMeasure(_gagbe.Value)
			if _efgcd != nil {
				return _efgcd
			}
			_aaded.HeaderAttr = _eacgb
			continue
		}
		if _gagbe.Name.Local == "footer" {
			_ebefdb, _cdddd := ParseUnionST_TwipsMeasure(_gagbe.Value)
			if _cdddd != nil {
				return _cdddd
			}
			_aaded.FooterAttr = _ebefdb
			continue
		}
		if _gagbe.Name.Local == "gutter" {
			_dcddb, _daeabg := ParseUnionST_TwipsMeasure(_gagbe.Value)
			if _daeabg != nil {
				return _daeabg
			}
			_aaded.GutterAttr = _dcddb
			continue
		}
	}
	for {
		_cgge, _dgbgg := d.Token()
		if _dgbgg != nil {
			return _b.Errorf("parsing\u0020CT_PageMar:\u0020%s", _dgbgg)
		}
		if _ggfaga, _bfcef := _cgge.(_d.EndElement); _bfcef && _ggfaga.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dceb *CT_Charset) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _deaf := range start.Attr {
		if _deaf.Name.Local == "val" {
			_cgeg, _bede := _deaf.Value, error(nil)
			if _bede != nil {
				return _bede
			}
			_dceb.ValAttr = &_cgeg
			continue
		}
		if _deaf.Name.Local == "characterSet" {
			_agbg, _begc := _deaf.Value, error(nil)
			if _begc != nil {
				return _begc
			}
			_dceb.CharacterSetAttr = &_agbg
			continue
		}
	}
	for {
		_dbbg, _dfca := d.Token()
		if _dfca != nil {
			return _b.Errorf("parsing\u0020CT_Charset:\u0020%s", _dfca)
		}
		if _ebca, _ecb := _dbbg.(_d.EndElement); _ecb && _ebca.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ccbfdf *CT_Proof) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bece := range start.Attr {
		if _bece.Name.Local == "spelling" {
			_ccbfdf.SpellingAttr.UnmarshalXMLAttr(_bece)
			continue
		}
		if _bece.Name.Local == "grammar" {
			_ccbfdf.GrammarAttr.UnmarshalXMLAttr(_bece)
			continue
		}
	}
	for {
		_aaffdb, _gbedc := d.Token()
		if _gbedc != nil {
			return _b.Errorf("parsing\u0020CT_Proof: \u0025s", _gbedc)
		}
		if _eega, _cdcgf := _aaffdb.(_d.EndElement); _cdcgf && _eega.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Underline() *CT_Underline { _gdaabf := &CT_Underline{}; return _gdaabf }
func (_daeeg *ST_RestartNumber) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgfgbb, _dcabbd := d.Token()
	if _dcabbd != nil {
		return _dcabbd
	}
	if _aeabde, _cbace := _fgfgbb.(_d.EndElement); _cbace && _aeabde.Name == start.Name {
		*_daeeg = 1
		return nil
	}
	if _ceaabb, _aedfg := _fgfgbb.(_d.CharData); !_aedfg {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fgfgbb)
	} else {
		switch string(_ceaabb) {
		case "":
			*_daeeg = 0
		case "continuous":
			*_daeeg = 1
		case "eachSect":
			*_daeeg = 2
		case "eachPage":
			*_daeeg = 3
		}
	}
	_fgfgbb, _dcabbd = d.Token()
	if _dcabbd != nil {
		return _dcabbd
	}
	if _dadgfd, _bbbbc := _fgfgbb.(_d.EndElement); _bbbbc && _dadgfd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fgfgbb)
}
func (_feadg *CT_SectPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fcbaf := range start.Attr {
		if _fcbaf.Name.Local == "rsidRPr" {
			_ggbeb, _cfcgfg := _fcbaf.Value, error(nil)
			if _cfcgfg != nil {
				return _cfcgfg
			}
			_feadg.RsidRPrAttr = &_ggbeb
			continue
		}
		if _fcbaf.Name.Local == "rsidR" {
			_cbgd, _ebbbg := _fcbaf.Value, error(nil)
			if _ebbbg != nil {
				return _ebbbg
			}
			_feadg.RsidRAttr = &_cbgd
			continue
		}
		if _fcbaf.Name.Local == "rsidDel" {
			_gacgga, _cfaeg := _fcbaf.Value, error(nil)
			if _cfaeg != nil {
				return _cfaeg
			}
			_feadg.RsidDelAttr = &_gacgga
			continue
		}
		if _fcbaf.Name.Local == "rsidSect" {
			_ccaccf, _cfcbf := _fcbaf.Value, error(nil)
			if _cfcbf != nil {
				return _cfcbf
			}
			_feadg.RsidSectAttr = &_ccaccf
			continue
		}
	}
_ecdfbb:
	for {
		_cdbag, _aabegb := d.Token()
		if _aabegb != nil {
			return _aabegb
		}
		switch _gdabad := _cdbag.(type) {
		case _d.StartElement:
			switch _gdabad.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "headerReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "headerReference"}:
				_dded := NewEG_HdrFtrReferences()
				_dded.HeaderReference = NewCT_HdrFtrRef()
				if _ffcfd := d.DecodeElement(_dded.HeaderReference, &_gdabad); _ffcfd != nil {
					return _ffcfd
				}
				_feadg.EG_HdrFtrReferences = append(_feadg.EG_HdrFtrReferences, _dded)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footerReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footerReference"}:
				_debgeg := NewEG_HdrFtrReferences()
				_debgeg.FooterReference = NewCT_HdrFtrRef()
				if _ddaef := d.DecodeElement(_debgeg.FooterReference, &_gdabad); _ddaef != nil {
					return _ddaef
				}
				_feadg.EG_HdrFtrReferences = append(_feadg.EG_HdrFtrReferences, _debgeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnotePr"}:
				_feadg.FootnotePr = NewCT_FtnProps()
				if _fgbfeb := d.DecodeElement(_feadg.FootnotePr, &_gdabad); _fgbfeb != nil {
					return _fgbfeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnotePr"}:
				_feadg.EndnotePr = NewCT_EdnProps()
				if _ecgbd := d.DecodeElement(_feadg.EndnotePr, &_gdabad); _ecgbd != nil {
					return _ecgbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "type"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "type"}:
				_feadg.Type = NewCT_SectType()
				if _eeada := d.DecodeElement(_feadg.Type, &_gdabad); _eeada != nil {
					return _eeada
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgSz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgSz"}:
				_feadg.PgSz = NewCT_PageSz()
				if _gfgg := d.DecodeElement(_feadg.PgSz, &_gdabad); _gfgg != nil {
					return _gfgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgMar"}:
				_feadg.PgMar = NewCT_PageMar()
				if _bbdafd := d.DecodeElement(_feadg.PgMar, &_gdabad); _bbdafd != nil {
					return _bbdafd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "paperSrc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "paperSrc"}:
				_feadg.PaperSrc = NewCT_PaperSource()
				if _gdbcf := d.DecodeElement(_feadg.PaperSrc, &_gdabad); _gdbcf != nil {
					return _gdbcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgBorders"}:
				_feadg.PgBorders = NewCT_PageBorders()
				if _ebcef := d.DecodeElement(_feadg.PgBorders, &_gdabad); _ebcef != nil {
					return _ebcef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lnNumType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lnNumType"}:
				_feadg.LnNumType = NewCT_LineNumber()
				if _abedf := d.DecodeElement(_feadg.LnNumType, &_gdabad); _abedf != nil {
					return _abedf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgNumType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgNumType"}:
				_feadg.PgNumType = NewCT_PageNumber()
				if _aagaea := d.DecodeElement(_feadg.PgNumType, &_gdabad); _aagaea != nil {
					return _aagaea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cols"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cols"}:
				_feadg.Cols = NewCT_Columns()
				if _cccaa := d.DecodeElement(_feadg.Cols, &_gdabad); _cccaa != nil {
					return _cccaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "formProt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "formProt"}:
				_feadg.FormProt = NewCT_OnOff()
				if _afagb := d.DecodeElement(_feadg.FormProt, &_gdabad); _afagb != nil {
					return _afagb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vAlign"}:
				_feadg.VAlign = NewCT_VerticalJc()
				if _efdgf := d.DecodeElement(_feadg.VAlign, &_gdabad); _efdgf != nil {
					return _efdgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noEndnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noEndnote"}:
				_feadg.NoEndnote = NewCT_OnOff()
				if _bebff := d.DecodeElement(_feadg.NoEndnote, &_gdabad); _bebff != nil {
					return _bebff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "titlePg"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "titlePg"}:
				_feadg.TitlePg = NewCT_OnOff()
				if _cfbfc := d.DecodeElement(_feadg.TitlePg, &_gdabad); _cfbfc != nil {
					return _cfbfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_feadg.TextDirection = NewCT_TextDirection()
				if _eafeb := d.DecodeElement(_feadg.TextDirection, &_gdabad); _eafeb != nil {
					return _eafeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidi"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidi"}:
				_feadg.Bidi = NewCT_OnOff()
				if _gcbgaf := d.DecodeElement(_feadg.Bidi, &_gdabad); _gcbgaf != nil {
					return _gcbgaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtlGutter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtlGutter"}:
				_feadg.RtlGutter = NewCT_OnOff()
				if _bceaf := d.DecodeElement(_feadg.RtlGutter, &_gdabad); _bceaf != nil {
					return _bceaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docGrid"}:
				_feadg.DocGrid = NewCT_DocGrid()
				if _bcbge := d.DecodeElement(_feadg.DocGrid, &_gdabad); _bcbge != nil {
					return _bcbge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printerSettings"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printerSettings"}:
				_feadg.PrinterSettings = NewCT_Rel()
				if _acdfa := d.DecodeElement(_feadg.PrinterSettings, &_gdabad); _acdfa != nil {
					return _acdfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sectPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sectPrChange"}:
				_feadg.SectPrChange = NewCT_SectPrChange()
				if _gbcacf := d.DecodeElement(_feadg.SectPrChange, &_gdabad); _gbcacf != nil {
					return _gbcacf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_SectPr \u0025v", _gdabad.Name)
				if _gbfcae := d.Skip(); _gbfcae != nil {
					return _gbfcae
				}
			}
		case _d.EndElement:
			break _ecdfbb
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_SignedHpsMeasure and its children
func (_eggeb *CT_SignedHpsMeasure) Validate() error {
	return _eggeb.ValidateWithPath("CT_SignedHpsMeasure")
}
func (_cfdcag ST_TabTlc) String() string {
	switch _cfdcag {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "dot"
	case 3:
		return "hyphen"
	case 4:
		return "underscore"
	case 5:
		return "heavy"
	case 6:
		return "middleDot"
	}
	return ""
}

// Validate validates the CT_FtnPos and its children
func (_ggeef *CT_FtnPos) Validate() error { return _ggeef.ValidateWithPath("CT_FtnPos") }
func (_bgbcee *ST_TblOverlap) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aeafd, _eeaabag := d.Token()
	if _eeaabag != nil {
		return _eeaabag
	}
	if _gccebd, _eadaaf := _aeafd.(_d.EndElement); _eadaaf && _gccebd.Name == start.Name {
		*_bgbcee = 1
		return nil
	}
	if _gbbgd, _bbbgdd := _aeafd.(_d.CharData); !_bbbgdd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _aeafd)
	} else {
		switch string(_gbbgd) {
		case "":
			*_bgbcee = 0
		case "never":
			*_bgbcee = 1
		case "overlap":
			*_bgbcee = 2
		}
	}
	_aeafd, _eeaabag = d.Token()
	if _eeaabag != nil {
		return _eeaabag
	}
	if _ceddd, _dacgdb := _aeafd.(_d.EndElement); _dacgdb && _ceddd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _aeafd)
}

// ValidateWithPath validates the CT_BdoContentRun and its children, prefixing error messages with path
func (_bdg *CT_BdoContentRun) ValidateWithPath(path string) error {
	if _aaad := _bdg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _aaad != nil {
		return _aaad
	}
	for _gbef, _dega := range _bdg.FldSimple {
		if _cabc := _dega.ValidateWithPath(_b.Sprintf("\u0025s/FldSimple\u005b\u0025d\u005d", path, _gbef)); _cabc != nil {
			return _cabc
		}
	}
	if _bdg.Hyperlink != nil {
		if _cgfa := _bdg.Hyperlink.ValidateWithPath(path + "\u002fHyperlink"); _cgfa != nil {
			return _cgfa
		}
	}
	if _bdg.SubDoc != nil {
		if _eac := _bdg.SubDoc.ValidateWithPath(path + "\u002fSubDoc"); _eac != nil {
			return _eac
		}
	}
	for _dec, _bfcg := range _bdg.EG_ContentRunContent {
		if _edg := _bfcg.ValidateWithPath(_b.Sprintf("%s\u002fEG_ContentRunContent[\u0025d\u005d", path, _dec)); _edg != nil {
			return _edg
		}
	}
	return nil
}
func NewCT_GlossaryDocument() *CT_GlossaryDocument { _cdccgd := &CT_GlossaryDocument{}; return _cdccgd }
func (_dcdba *CT_TcPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dcdba.CnfStyle != nil {
		_cbdeb := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		e.EncodeElement(_dcdba.CnfStyle, _cbdeb)
	}
	if _dcdba.TcW != nil {
		_abdgda := _d.StartElement{Name: _d.Name{Local: "w:tcW"}}
		e.EncodeElement(_dcdba.TcW, _abdgda)
	}
	if _dcdba.GridSpan != nil {
		_ddeef := _d.StartElement{Name: _d.Name{Local: "w:gridSpan"}}
		e.EncodeElement(_dcdba.GridSpan, _ddeef)
	}
	if _dcdba.HMerge != nil {
		_bcffc := _d.StartElement{Name: _d.Name{Local: "w:hMerge"}}
		e.EncodeElement(_dcdba.HMerge, _bcffc)
	}
	if _dcdba.VMerge != nil {
		_cdfagd := _d.StartElement{Name: _d.Name{Local: "w:vMerge"}}
		e.EncodeElement(_dcdba.VMerge, _cdfagd)
	}
	if _dcdba.TcBorders != nil {
		_gbfdbe := _d.StartElement{Name: _d.Name{Local: "w:tcBorders"}}
		e.EncodeElement(_dcdba.TcBorders, _gbfdbe)
	}
	if _dcdba.Shd != nil {
		_bgdbc := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_dcdba.Shd, _bgdbc)
	}
	if _dcdba.NoWrap != nil {
		_gegdec := _d.StartElement{Name: _d.Name{Local: "w:noWrap"}}
		e.EncodeElement(_dcdba.NoWrap, _gegdec)
	}
	if _dcdba.TcMar != nil {
		_ffgeg := _d.StartElement{Name: _d.Name{Local: "w:tcMar"}}
		e.EncodeElement(_dcdba.TcMar, _ffgeg)
	}
	if _dcdba.TextDirection != nil {
		_ffbgdg := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_dcdba.TextDirection, _ffbgdg)
	}
	if _dcdba.TcFitText != nil {
		_febgc := _d.StartElement{Name: _d.Name{Local: "w:tcFitText"}}
		e.EncodeElement(_dcdba.TcFitText, _febgc)
	}
	if _dcdba.VAlign != nil {
		_adcaaf := _d.StartElement{Name: _d.Name{Local: "w:vAlign"}}
		e.EncodeElement(_dcdba.VAlign, _adcaaf)
	}
	if _dcdba.HideMark != nil {
		_dgddbb := _d.StartElement{Name: _d.Name{Local: "w:hideMark"}}
		e.EncodeElement(_dcdba.HideMark, _dgddbb)
	}
	if _dcdba.Headers != nil {
		_bbbada := _d.StartElement{Name: _d.Name{Local: "w:headers"}}
		e.EncodeElement(_dcdba.Headers, _bbbada)
	}
	if _dcdba.CellIns != nil {
		_aebgbc := _d.StartElement{Name: _d.Name{Local: "w:cellIns"}}
		e.EncodeElement(_dcdba.CellIns, _aebgbc)
	}
	if _dcdba.CellDel != nil {
		_caaga := _d.StartElement{Name: _d.Name{Local: "w:cellDel"}}
		e.EncodeElement(_dcdba.CellDel, _caaga)
	}
	if _dcdba.CellMerge != nil {
		_ggbge := _d.StartElement{Name: _d.Name{Local: "w:cellMerge"}}
		e.EncodeElement(_dcdba.CellMerge, _ggbge)
	}
	if _dcdba.TcPrChange != nil {
		_adefc := _d.StartElement{Name: _d.Name{Local: "w:tcPrChange"}}
		e.EncodeElement(_dcdba.TcPrChange, _adefc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the AG_TransitionalPassword and its children
func (_acgg *AG_TransitionalPassword) Validate() error {
	return _acgg.ValidateWithPath("AG_TransitionalPassword")
}

type ST_Proof byte

func NewCT_PixelsMeasure() *CT_PixelsMeasure { _beaeeg := &CT_PixelsMeasure{}; return _beaeeg }
func (_ceecec *ST_VerticalJc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_daafg, _ccfec := d.Token()
	if _ccfec != nil {
		return _ccfec
	}
	if _ggfdc, _aggfc := _daafg.(_d.EndElement); _aggfc && _ggfdc.Name == start.Name {
		*_ceecec = 1
		return nil
	}
	if _defdf, _ddfdge := _daafg.(_d.CharData); !_ddfdge {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _daafg)
	} else {
		switch string(_defdf) {
		case "":
			*_ceecec = 0
		case "top":
			*_ceecec = 1
		case "center":
			*_ceecec = 2
		case "both":
			*_ceecec = 3
		case "bottom":
			*_ceecec = 4
		}
	}
	_daafg, _ccfec = d.Token()
	if _ccfec != nil {
		return _ccfec
	}
	if _efgbec, _fdcfbe := _daafg.(_d.EndElement); _fdcfbe && _efgbec.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _daafg)
}
func NewCT_TblPrBase() *CT_TblPrBase { _gagab := &CT_TblPrBase{}; return _gagab }

type CT_FrameScrollbar struct {

	// Scrollbar Display Option Value
	ValAttr ST_FrameScrollbar
}
type CT_FFDDList struct {

	// Drop-Down List Selection
	Result *CT_DecimalNumber

	// Default Drop-Down List Item Index
	Default *CT_DecimalNumber

	// Drop-Down List Entry
	ListEntry []*CT_String
}

func (_edfcefc ST_TblOverlap) ValidateWithPath(path string) error {
	switch _edfcefc {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_edfcefc))
	}
	return nil
}

// Validate validates the CT_CustomXmlRow and its children
func (_gaef *CT_CustomXmlRow) Validate() error { return _gaef.ValidateWithPath("CT_CustomXmlRow") }

type ST_DocPartType byte
type CT_SmartTagPr struct {

	// Smart Tag Property
	Attr []*CT_Attr
}

// ValidateWithPath validates the CT_RunTrackChange and its children, prefixing error messages with path
func (_aeceb *CT_RunTrackChange) ValidateWithPath(path string) error { return nil }
func (_aaaaae *ST_TargetScreenSz) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_aaaaae = 0
	case "544x376":
		*_aaaaae = 1
	case "640x480":
		*_aaaaae = 2
	case "720x512":
		*_aaaaae = 3
	case "800x600":
		*_aaaaae = 4
	case "1024x768":
		*_aaaaae = 5
	case "1152x882":
		*_aaaaae = 6
	case "1152x900":
		*_aaaaae = 7
	case "1280x1024":
		*_aaaaae = 8
	case "1600x1200":
		*_aaaaae = 9
	case "1800x1440":
		*_aaaaae = 10
	case "1920x1200":
		*_aaaaae = 11
	}
	return nil
}

type CT_DivBdr struct {

	// Top Border for HTML div
	Top *CT_Border

	// Left Border for HTML div
	Left *CT_Border

	// Bottom Border for HTML div
	Bottom *CT_Border

	// Right Border for HTML div
	Right *CT_Border
}

func NewWdCT_EffectExtent() *WdCT_EffectExtent { _dedbc := &WdCT_EffectExtent{}; return _dedbc }

// Validate validates the CT_SmartTagPr and its children
func (_bbfgb *CT_SmartTagPr) Validate() error { return _bbfgb.ValidateWithPath("CT_SmartTagPr") }
func (_fgaca *CT_MailMergeDest) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgaca.ValAttr = ST_MailMergeDest(1)
	for _, _ccabcc := range start.Attr {
		if _ccabcc.Name.Local == "val" {
			_fgaca.ValAttr.UnmarshalXMLAttr(_ccabcc)
			continue
		}
	}
	for {
		_aebca, _fgccd := d.Token()
		if _fgccd != nil {
			return _b.Errorf("parsing\u0020CT_MailMergeDest: \u0025s", _fgccd)
		}
		if _eaegc, _fbbfd := _aebca.(_d.EndElement); _fbbfd && _eaegc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfbdc *CT_EdnDocProps) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_abacb:
	for {
		_dfgf, _dfdgb := d.Token()
		if _dfdgb != nil {
			return _dfdgb
		}
		switch _dagc := _dfgf.(type) {
		case _d.StartElement:
			switch _dagc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pos"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pos"}:
				_dfbdc.Pos = NewCT_EdnPos()
				if _gffg := d.DecodeElement(_dfbdc.Pos, &_dagc); _gffg != nil {
					return _gffg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numFmt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numFmt"}:
				_dfbdc.NumFmt = NewCT_NumFmt()
				if _gdgeg := d.DecodeElement(_dfbdc.NumFmt, &_dagc); _gdgeg != nil {
					return _gdgeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numStart"}:
				_dfbdc.NumStart = NewCT_DecimalNumber()
				if _dcga := d.DecodeElement(_dfbdc.NumStart, &_dagc); _dcga != nil {
					return _dcga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numRestart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numRestart"}:
				_dfbdc.NumRestart = NewCT_NumRestart()
				if _bgae := d.DecodeElement(_dfbdc.NumRestart, &_dagc); _bgae != nil {
					return _bgae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnote"}:
				_fbbbd := NewCT_FtnEdnSepRef()
				if _cbdee := d.DecodeElement(_fbbbd, &_dagc); _cbdee != nil {
					return _cbdee
				}
				_dfbdc.Endnote = append(_dfbdc.Endnote, _fbbbd)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_EdnDocProps\u0020\u0025v", _dagc.Name)
				if _gaeafg := d.Skip(); _gaeafg != nil {
					return _gaeafg
				}
			}
		case _d.EndElement:
			break _abacb
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_CustomXmlBlock() *CT_CustomXmlBlock { _aeeeg := &CT_CustomXmlBlock{}; return _aeeeg }
func (_ccagc *CT_FontRel) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fontKey"}, Value: _b.Sprintf("\u0025v", _ccagc.FontKeyAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:subsetted"}, Value: _b.Sprintf("\u0025v", _ccagc.SubsettedAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", _ccagc.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PageNumber and its children, prefixing error messages with path
func (_deafg *CT_PageNumber) ValidateWithPath(path string) error {
	if _gaabg := _deafg.FmtAttr.ValidateWithPath(path + "\u002fFmtAttr"); _gaabg != nil {
		return _gaabg
	}
	if _ffggdc := _deafg.ChapSepAttr.ValidateWithPath(path + "\u002fChapSepAttr"); _ffggdc != nil {
		return _ffggdc
	}
	return nil
}
func NewCT_Ruby() *CT_Ruby {
	_bgfcc := &CT_Ruby{}
	_bgfcc.RubyPr = NewCT_RubyPr()
	_bgfcc.Rt = NewCT_RubyContent()
	_bgfcc.RubyBase = NewCT_RubyContent()
	return _bgfcc
}

type CT_Ruby struct {

	// Phonetic Guide Properties
	RubyPr *CT_RubyPr

	// Phonetic Guide Text
	Rt *CT_RubyContent

	// Phonetic Guide Base Text
	RubyBase *CT_RubyContent
}

// Validate validates the CT_TextScale and its children
func (_afaga *CT_TextScale) Validate() error { return _afaga.ValidateWithPath("CT_TextScale") }
func ParseUnionST_Coordinate(s string) (_eb.ST_Coordinate, error) {
	return _eb.ParseUnionST_Coordinate(s)
}
func (_ccafg *ST_FontFamily) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ccafg = 0
	case "decorative":
		*_ccafg = 1
	case "modern":
		*_ccafg = 2
	case "roman":
		*_ccafg = 3
	case "script":
		*_ccafg = 4
	case "swiss":
		*_ccafg = 5
	case "auto":
		*_ccafg = 6
	}
	return nil
}
func (_bgddae *CT_TblGrid) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ccbfgf:
	for {
		_aeaea, _befce := d.Token()
		if _befce != nil {
			return _befce
		}
		switch _agefbb := _aeaea.(type) {
		case _d.StartElement:
			switch _agefbb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridCol"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridCol"}:
				_daacb := NewCT_TblGridCol()
				if _bggcae := d.DecodeElement(_daacb, &_agefbb); _bggcae != nil {
					return _bggcae
				}
				_bgddae.GridCol = append(_bgddae.GridCol, _daacb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblGridChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblGridChange"}:
				_bgddae.TblGridChange = NewCT_TblGridChange()
				if _aeaaa := d.DecodeElement(_bgddae.TblGridChange, &_agefbb); _aeaaa != nil {
					return _aeaaa
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_TblGrid\u0020\u0025v", _agefbb.Name)
				if _gcbad := d.Skip(); _gcbad != nil {
					return _gcbad
				}
			}
		case _d.EndElement:
			break _ccbfgf
		case _d.CharData:
		}
	}
	return nil
}

type ST_RestartNumber byte

// ValidateWithPath validates the CT_FitText and its children, prefixing error messages with path
func (_ddafg *CT_FitText) ValidateWithPath(path string) error {
	if _fbbga := _ddafg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fbbga != nil {
		return _fbbga
	}
	return nil
}

// ValidateWithPath validates the Styles and its children, prefixing error messages with path
func (_fadgd *Styles) ValidateWithPath(path string) error {
	if _aecbe := _fadgd.CT_Styles.ValidateWithPath(path); _aecbe != nil {
		return _aecbe
	}
	return nil
}

// ValidateWithPath validates the CT_Base64Binary and its children, prefixing error messages with path
func (_fgb *CT_Base64Binary) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the WdCT_Anchor and its children, prefixing error messages with path
func (_cdbdc *WdCT_Anchor) ValidateWithPath(path string) error {
	if _eefbaa := _cdbdc.SimplePos.ValidateWithPath(path + "\u002fSimplePos"); _eefbaa != nil {
		return _eefbaa
	}
	if _gbbab := _cdbdc.PositionH.ValidateWithPath(path + "\u002fPositionH"); _gbbab != nil {
		return _gbbab
	}
	if _bdbde := _cdbdc.PositionV.ValidateWithPath(path + "\u002fPositionV"); _bdbde != nil {
		return _bdbde
	}
	if _bfafb := _cdbdc.Extent.ValidateWithPath(path + "\u002fExtent"); _bfafb != nil {
		return _bfafb
	}
	if _cdbdc.EffectExtent != nil {
		if _gdcaa := _cdbdc.EffectExtent.ValidateWithPath(path + "\u002fEffectExtent"); _gdcaa != nil {
			return _gdcaa
		}
	}
	if _cdbdc.Choice != nil {
		if _cgdbc := _cdbdc.Choice.ValidateWithPath(path + "\u002fChoice"); _cgdbc != nil {
			return _cgdbc
		}
	}
	if _bdagdc := _cdbdc.DocPr.ValidateWithPath(path + "\u002fDocPr"); _bdagdc != nil {
		return _bdagdc
	}
	if _cdbdc.CNvGraphicFramePr != nil {
		if _gcaffa := _cdbdc.CNvGraphicFramePr.ValidateWithPath(path + "\u002fCNvGraphicFramePr"); _gcaffa != nil {
			return _gcaffa
		}
	}
	if _acbdfc := _cdbdc.Graphic.ValidateWithPath(path + "\u002fGraphic"); _acbdfc != nil {
		return _acbdfc
	}
	return nil
}
func NewWdCT_WrapSquare() *WdCT_WrapSquare {
	_dcgaf := &WdCT_WrapSquare{}
	_dcgaf.WrapTextAttr = WdST_WrapText(1)
	return _dcgaf
}
func (_eagaac ST_BrClear) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fcaeea := _d.Attr{}
	_fcaeea.Name = name
	switch _eagaac {
	case ST_BrClearUnset:
		_fcaeea.Value = ""
	case ST_BrClearNone:
		_fcaeea.Value = "none"
	case ST_BrClearLeft:
		_fcaeea.Value = "left"
	case ST_BrClearRight:
		_fcaeea.Value = "right"
	case ST_BrClearAll:
		_fcaeea.Value = "all"
	}
	return _fcaeea, nil
}

// Validate validates the CT_SmartTagType and its children
func (_dcfea *CT_SmartTagType) Validate() error { return _dcfea.ValidateWithPath("CT_SmartTagType") }

type CT_RubyContent struct {

	// Phonetic Guide Text Run
	R               *CT_R
	EG_RunLevelElts []*EG_RunLevelElts
}

func (_bbgab ST_BrType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dbcefg := _d.Attr{}
	_dbcefg.Name = name
	switch _bbgab {
	case ST_BrTypeUnset:
		_dbcefg.Value = ""
	case ST_BrTypePage:
		_dbcefg.Value = "page"
	case ST_BrTypeColumn:
		_dbcefg.Value = "column"
	case ST_BrTypeTextWrapping:
		_dbcefg.Value = "textWrapping"
	}
	return _dbcefg, nil
}

type CT_MathCtrlDel struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
}

func (_dab *CT_AbstractNum) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gfe := range start.Attr {
		if _gfe.Name.Local == "abstractNumId" {
			_dgg, _cb := _dd.ParseInt(_gfe.Value, 10, 64)
			if _cb != nil {
				return _cb
			}
			_dab.AbstractNumIdAttr = _dgg
			continue
		}
	}
_cggd:
	for {
		_fbc, _afd := d.Token()
		if _afd != nil {
			return _afd
		}
		switch _cc := _fbc.(type) {
		case _d.StartElement:
			switch _cc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "nsid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "nsid"}:
				_dab.Nsid = NewCT_LongHexNumber()
				if _bc := d.DecodeElement(_dab.Nsid, &_cc); _bc != nil {
					return _bc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "multiLevelType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "multiLevelType"}:
				_dab.MultiLevelType = NewCT_MultiLevelType()
				if _gcd := d.DecodeElement(_dab.MultiLevelType, &_cc); _gcd != nil {
					return _gcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tmpl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tmpl"}:
				_dab.Tmpl = NewCT_LongHexNumber()
				if _eef := d.DecodeElement(_dab.Tmpl, &_cc); _eef != nil {
					return _eef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "name"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "name"}:
				_dab.Name = NewCT_String()
				if _bec := d.DecodeElement(_dab.Name, &_cc); _bec != nil {
					return _bec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "styleLink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "styleLink"}:
				_dab.StyleLink = NewCT_String()
				if _fbd := d.DecodeElement(_dab.StyleLink, &_cc); _fbd != nil {
					return _fbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numStyleLink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numStyleLink"}:
				_dab.NumStyleLink = NewCT_String()
				if _ebff := d.DecodeElement(_dab.NumStyleLink, &_cc); _ebff != nil {
					return _ebff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lvl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lvl"}:
				_cbg := NewCT_Lvl()
				if _fdg := d.DecodeElement(_cbg, &_cc); _fdg != nil {
					return _fdg
				}
				_dab.Lvl = append(_dab.Lvl, _cbg)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_AbstractNum\u0020\u0025v", _cc.Name)
				if _cbe := d.Skip(); _cbe != nil {
					return _cbe
				}
			}
		case _d.EndElement:
			break _cggd
		case _d.CharData:
		}
	}
	return nil
}
func (_gggdf *CT_Footnotes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gggdf.Footnote != nil {
		_gdedg := _d.StartElement{Name: _d.Name{Local: "w:footnote"}}
		for _, _dbbf := range _gggdf.Footnote {
			e.EncodeElement(_dbbf, _gdedg)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ecefd ST_RubyAlign) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ecefd.String(), start)
}
func NewCT_Odso() *CT_Odso { _gddc := &CT_Odso{}; return _gddc }

type CT_NumRestart struct {

	// Automatic Numbering Restart Value
	ValAttr ST_RestartNumber
}

// ValidateWithPath validates the CT_CalendarType and its children, prefixing error messages with path
func (_bbcfd *CT_CalendarType) ValidateWithPath(path string) error {
	if _edde := _bbcfd.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _edde != nil {
		return _edde
	}
	return nil
}
func (_gfec *CT_FFTextInput) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gacfg:
	for {
		_fefaa, _acbbf := d.Token()
		if _acbbf != nil {
			return _acbbf
		}
		switch _gdgff := _fefaa.(type) {
		case _d.StartElement:
			switch _gdgff.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "type"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "type"}:
				_gfec.Type = NewCT_FFTextType()
				if _efcfe := d.DecodeElement(_gfec.Type, &_gdgff); _efcfe != nil {
					return _efcfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "default"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "default"}:
				_gfec.Default = NewCT_String()
				if _fgfe := d.DecodeElement(_gfec.Default, &_gdgff); _fgfe != nil {
					return _fgfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "maxLength"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "maxLength"}:
				_gfec.MaxLength = NewCT_DecimalNumber()
				if _aeddf := d.DecodeElement(_gfec.MaxLength, &_gdgff); _aeddf != nil {
					return _aeddf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "format"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "format"}:
				_gfec.Format = NewCT_String()
				if _cdcd := d.DecodeElement(_gfec.Format, &_gdgff); _cdcd != nil {
					return _cdcd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_FFTextInput\u0020\u0025v", _gdgff.Name)
				if _daade := d.Skip(); _daade != nil {
					return _daade
				}
			}
		case _d.EndElement:
			break _gacfg
		case _d.CharData:
		}
	}
	return nil
}

type CT_EdnPos struct {

	// Endnote Position Type
	ValAttr ST_EdnPos
}
type ST_EdnPos byte

// ValidateWithPath validates the CT_TextDirection and its children, prefixing error messages with path
func (_gegbee *CT_TextDirection) ValidateWithPath(path string) error {
	if _gegbee.ValAttr == ST_TextDirectionUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cafbg := _gegbee.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cafbg != nil {
		return _cafbg
	}
	return nil
}

type WdCT_WordprocessingContentPart struct {
	BwModeAttr      _eb.ST_BlackWhiteMode
	IdAttr          string
	NvContentPartPr *WdCT_WordprocessingContentPartNonVisual
	Xfrm            *_eb.CT_Transform2D
	ExtLst          *_eb.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_DocPartCategory and its children, prefixing error messages with path
func (_ggff *CT_DocPartCategory) ValidateWithPath(path string) error {
	if _cbcgf := _ggff.Name.ValidateWithPath(path + "\u002fName"); _cbcgf != nil {
		return _cbcgf
	}
	if _gdcdg := _ggff.Gallery.ValidateWithPath(path + "\u002fGallery"); _gdcdg != nil {
		return _gdcdg
	}
	return nil
}
func (_gcfgc *WdCT_WrapThrough) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gcfgc.WrapTextAttr = WdST_WrapText(1)
	_gcfgc.WrapPolygon = NewWdCT_WrapPath()
	for _, _beccc := range start.Attr {
		if _beccc.Name.Local == "wrapText" {
			_gcfgc.WrapTextAttr.UnmarshalXMLAttr(_beccc)
			continue
		}
		if _beccc.Name.Local == "distL" {
			_faaadf, _gdaca := _dd.ParseUint(_beccc.Value, 10, 32)
			if _gdaca != nil {
				return _gdaca
			}
			_dbccg := uint32(_faaadf)
			_gcfgc.DistLAttr = &_dbccg
			continue
		}
		if _beccc.Name.Local == "distR" {
			_bcdace, _afbbef := _dd.ParseUint(_beccc.Value, 10, 32)
			if _afbbef != nil {
				return _afbbef
			}
			_fcgag := uint32(_bcdace)
			_gcfgc.DistRAttr = &_fcgag
			continue
		}
	}
_cfbaed:
	for {
		_abgfbg, _aaabfa := d.Token()
		if _aaabfa != nil {
			return _aaabfa
		}
		switch _eabagfc := _abgfbg.(type) {
		case _d.StartElement:
			switch _eabagfc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapPolygon"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapPolygon"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapPolygon"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapPolygon"}:
				if _efdcc := d.DecodeElement(_gcfgc.WrapPolygon, &_eabagfc); _efdcc != nil {
					return _efdcc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WrapThrough\u0020\u0025v", _eabagfc.Name)
				if _dbbdg := d.Skip(); _dbbdg != nil {
					return _dbbdg
				}
			}
		case _d.EndElement:
			break _cfbaed
		case _d.CharData:
		}
	}
	return nil
}

type CT_PageMar struct {

	// Top Margin Spacing
	TopAttr ST_SignedTwipsMeasure

	// Right Margin Spacing
	RightAttr _g.ST_TwipsMeasure

	// Page Bottom Spacing
	BottomAttr ST_SignedTwipsMeasure

	// Left Margin Spacing
	LeftAttr _g.ST_TwipsMeasure

	// Spacing to Top of Header
	HeaderAttr _g.ST_TwipsMeasure

	// Spacing to Bottom of Footer
	FooterAttr _g.ST_TwipsMeasure

	// Page Gutter Spacing
	GutterAttr _g.ST_TwipsMeasure
}

// Validate validates the WdCT_WrapSquare and its children
func (_dbega *WdCT_WrapSquare) Validate() error { return _dbega.ValidateWithPath("WdCT_WrapSquare") }
func (_bafggd *ST_CharacterSpacing) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_adgdb, _bfaea := d.Token()
	if _bfaea != nil {
		return _bfaea
	}
	if _dacdcf, _aeggbe := _adgdb.(_d.EndElement); _aeggbe && _dacdcf.Name == start.Name {
		*_bafggd = 1
		return nil
	}
	if _accee, _baddg := _adgdb.(_d.CharData); !_baddg {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _adgdb)
	} else {
		switch string(_accee) {
		case "":
			*_bafggd = 0
		case "doNotCompress":
			*_bafggd = 1
		case "compressPunctuation":
			*_bafggd = 2
		case "compressPunctuationAndJapaneseKana":
			*_bafggd = 3
		}
	}
	_adgdb, _bfaea = d.Token()
	if _bfaea != nil {
		return _bfaea
	}
	if _ebeed, _dfdabg := _adgdb.(_d.EndElement); _dfdabg && _ebeed.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _adgdb)
}

// Validate validates the CT_SignedTwipsMeasure and its children
func (_fcbff *CT_SignedTwipsMeasure) Validate() error {
	return _fcbff.ValidateWithPath("CT_SignedTwipsMeasure")
}

type CT_RubyAlign struct {

	// Phonetic Guide Text Alignment Value
	ValAttr ST_RubyAlign
}

func (_gcabe *CT_Lvl) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:ilvl"}, Value: _b.Sprintf("\u0025v", _gcabe.IlvlAttr)})
	if _gcabe.TplcAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:tplc"}, Value: _b.Sprintf("\u0025v", *_gcabe.TplcAttr)})
	}
	if _gcabe.TentativeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:tentative"}, Value: _b.Sprintf("\u0025v", *_gcabe.TentativeAttr)})
	}
	e.EncodeToken(start)
	if _gcabe.Start != nil {
		_dfcea := _d.StartElement{Name: _d.Name{Local: "w:start"}}
		e.EncodeElement(_gcabe.Start, _dfcea)
	}
	if _gcabe.NumFmt != nil {
		_bebfe := _d.StartElement{Name: _d.Name{Local: "w:numFmt"}}
		e.EncodeElement(_gcabe.NumFmt, _bebfe)
	}
	if _gcabe.LvlRestart != nil {
		_fagab := _d.StartElement{Name: _d.Name{Local: "w:lvlRestart"}}
		e.EncodeElement(_gcabe.LvlRestart, _fagab)
	}
	if _gcabe.PStyle != nil {
		_ecfac := _d.StartElement{Name: _d.Name{Local: "w:pStyle"}}
		e.EncodeElement(_gcabe.PStyle, _ecfac)
	}
	if _gcabe.IsLgl != nil {
		_ggbdg := _d.StartElement{Name: _d.Name{Local: "w:isLgl"}}
		e.EncodeElement(_gcabe.IsLgl, _ggbdg)
	}
	if _gcabe.Suff != nil {
		_baec := _d.StartElement{Name: _d.Name{Local: "w:suff"}}
		e.EncodeElement(_gcabe.Suff, _baec)
	}
	if _gcabe.LvlText != nil {
		_egde := _d.StartElement{Name: _d.Name{Local: "w:lvlText"}}
		e.EncodeElement(_gcabe.LvlText, _egde)
	}
	if _gcabe.LvlPicBulletId != nil {
		_adcec := _d.StartElement{Name: _d.Name{Local: "w:lvlPicBulletId"}}
		e.EncodeElement(_gcabe.LvlPicBulletId, _adcec)
	}
	if _gcabe.Legacy != nil {
		_fbba := _d.StartElement{Name: _d.Name{Local: "w:legacy"}}
		e.EncodeElement(_gcabe.Legacy, _fbba)
	}
	if _gcabe.LvlJc != nil {
		_cbabd := _d.StartElement{Name: _d.Name{Local: "w:lvlJc"}}
		e.EncodeElement(_gcabe.LvlJc, _cbabd)
	}
	if _gcabe.PPr != nil {
		_bdee := _d.StartElement{Name: _d.Name{Local: "w:pPr"}}
		e.EncodeElement(_gcabe.PPr, _bdee)
	}
	if _gcabe.RPr != nil {
		_cdcea := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_gcabe.RPr, _cdcea)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_RunLevelElts and its children, prefixing error messages with path
func (_gebcce *EG_RunLevelElts) ValidateWithPath(path string) error {
	if _gebcce.ProofErr != nil {
		if _edgcg := _gebcce.ProofErr.ValidateWithPath(path + "\u002fProofErr"); _edgcg != nil {
			return _edgcg
		}
	}
	if _gebcce.PermStart != nil {
		if _bbfdg := _gebcce.PermStart.ValidateWithPath(path + "\u002fPermStart"); _bbfdg != nil {
			return _bbfdg
		}
	}
	if _gebcce.PermEnd != nil {
		if _ecfce := _gebcce.PermEnd.ValidateWithPath(path + "\u002fPermEnd"); _ecfce != nil {
			return _ecfce
		}
	}
	if _gebcce.Ins != nil {
		if _cgaceb := _gebcce.Ins.ValidateWithPath(path + "\u002fIns"); _cgaceb != nil {
			return _cgaceb
		}
	}
	if _gebcce.Del != nil {
		if _bbacbc := _gebcce.Del.ValidateWithPath(path + "\u002fDel"); _bbacbc != nil {
			return _bbacbc
		}
	}
	if _gebcce.MoveFrom != nil {
		if _ecabdb := _gebcce.MoveFrom.ValidateWithPath(path + "\u002fMoveFrom"); _ecabdb != nil {
			return _ecabdb
		}
	}
	if _gebcce.MoveTo != nil {
		if _dafcf := _gebcce.MoveTo.ValidateWithPath(path + "\u002fMoveTo"); _dafcf != nil {
			return _dafcf
		}
	}
	for _becaac, _eabgcd := range _gebcce.EG_RangeMarkupElements {
		if _eabegb := _eabgcd.ValidateWithPath(_b.Sprintf("\u0025s/EG_RangeMarkupElements[%d\u005d", path, _becaac)); _eabegb != nil {
			return _eabegb
		}
	}
	for _aegba, _fbcfg := range _gebcce.EG_MathContent {
		if _cdcfb := _fbcfg.ValidateWithPath(_b.Sprintf("%s\u002fEG_MathContent\u005b\u0025d\u005d", path, _aegba)); _cdcfb != nil {
			return _cdcfb
		}
	}
	return nil
}
func (_beeec *CT_DocPartGallery) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_efcd, _efegde := _beeec.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _efegde != nil {
		return _efegde
	}
	start.Attr = append(start.Attr, _efcd)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_SdtDate struct {

	// Last Known Date in XML Schema DateTime Format
	FullDateAttr *_c.Time

	// Date Display Mask
	DateFormat *CT_String

	// Date Picker Language ID
	Lid *CT_Lang

	// Custom XML Data Date Storage Format
	StoreMappedDataAs *CT_SdtDateMappingType

	// Date Picker Calendar Type
	Calendar *CT_CalendarType
}

func (_fgcgf *ST_PTabRelativeTo) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aedeb, _ffdgd := d.Token()
	if _ffdgd != nil {
		return _ffdgd
	}
	if _affbef, _dedbda := _aedeb.(_d.EndElement); _dedbda && _affbef.Name == start.Name {
		*_fgcgf = 1
		return nil
	}
	if _bgceb, _bccgd := _aedeb.(_d.CharData); !_bccgd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _aedeb)
	} else {
		switch string(_bgceb) {
		case "":
			*_fgcgf = 0
		case "margin":
			*_fgcgf = 1
		case "indent":
			*_fgcgf = 2
		}
	}
	_aedeb, _ffdgd = d.Token()
	if _ffdgd != nil {
		return _ffdgd
	}
	if _ebffb, _bgbbd := _aedeb.(_d.EndElement); _bgbbd && _ebffb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _aedeb)
}
func (_gddeg *CT_SectType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gddeg.ValAttr != ST_SectionMarkUnset {
		_ecffc, _edcf := _gddeg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _edcf != nil {
			return _edcf
		}
		start.Attr = append(start.Attr, _ecffc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_DirContentRun() *CT_DirContentRun { _caaba := &CT_DirContentRun{}; return _caaba }
func (_dgacd *CT_SmartTagPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dgacd.Attr != nil {
		_cdbaf := _d.StartElement{Name: _d.Name{Local: "w:attr"}}
		for _, _dcfca := range _dgacd.Attr {
			e.EncodeElement(_dcfca, _cdbaf)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ProofErrUnset      ST_ProofErr = 0
	ST_ProofErrSpellStart ST_ProofErr = 1
	ST_ProofErrSpellEnd   ST_ProofErr = 2
	ST_ProofErrGramStart  ST_ProofErr = 3
	ST_ProofErrGramEnd    ST_ProofErr = 4
)

// ValidateWithPath validates the CT_Div and its children, prefixing error messages with path
func (_egcac *CT_Div) ValidateWithPath(path string) error {
	if _egcac.BlockQuote != nil {
		if _cabcg := _egcac.BlockQuote.ValidateWithPath(path + "/BlockQuote"); _cabcg != nil {
			return _cabcg
		}
	}
	if _egcac.BodyDiv != nil {
		if _fbee := _egcac.BodyDiv.ValidateWithPath(path + "\u002fBodyDiv"); _fbee != nil {
			return _fbee
		}
	}
	if _fega := _egcac.MarLeft.ValidateWithPath(path + "\u002fMarLeft"); _fega != nil {
		return _fega
	}
	if _ddabg := _egcac.MarRight.ValidateWithPath(path + "\u002fMarRight"); _ddabg != nil {
		return _ddabg
	}
	if _ccdeb := _egcac.MarTop.ValidateWithPath(path + "\u002fMarTop"); _ccdeb != nil {
		return _ccdeb
	}
	if _babde := _egcac.MarBottom.ValidateWithPath(path + "\u002fMarBottom"); _babde != nil {
		return _babde
	}
	if _egcac.DivBdr != nil {
		if _geeba := _egcac.DivBdr.ValidateWithPath(path + "\u002fDivBdr"); _geeba != nil {
			return _geeba
		}
	}
	for _gbcgb, _gfgb := range _egcac.DivsChild {
		if _ddca := _gfgb.ValidateWithPath(_b.Sprintf("\u0025s/DivsChild\u005b\u0025d\u005d", path, _gbcgb)); _ddca != nil {
			return _ddca
		}
	}
	return nil
}
func (_gfdd *CT_HdrFtr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gfdd.AltChunk != nil {
		_cbaaf := _d.StartElement{Name: _d.Name{Local: "w:altChunk"}}
		for _, _eefgb := range _gfdd.AltChunk {
			e.EncodeElement(_eefgb, _cbaaf)
		}
	}
	if _gfdd.EG_ContentBlockContent != nil {
		for _, _cgafb := range _gfdd.EG_ContentBlockContent {
			_cgafb.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_aacacg ST_Direction) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dfabfe := _d.Attr{}
	_dfabfe.Name = name
	switch _aacacg {
	case ST_DirectionUnset:
		_dfabfe.Value = ""
	case ST_DirectionLtr:
		_dfabfe.Value = "ltr"
	case ST_DirectionRtl:
		_dfabfe.Value = "rtl"
	}
	return _dfabfe, nil
}
func (_efcdgf WdST_AlignH) String() string {
	switch _efcdgf {
	case 0:
		return ""
	case 1:
		return "left"
	case 2:
		return "right"
	case 3:
		return "center"
	case 4:
		return "inside"
	case 5:
		return "outside"
	}
	return ""
}

// Validate validates the EG_RangeMarkupElements and its children
func (_beage *EG_RangeMarkupElements) Validate() error {
	return _beage.ValidateWithPath("EG_RangeMarkupElements")
}
func (_daddac *ST_SignedHpsMeasure) ValidateWithPath(path string) error {
	_dbfcab := []string{}
	if _daddac.Int64 != nil {
		_dbfcab = append(_dbfcab, "Int64")
	}
	if _daddac.ST_UniversalMeasure != nil {
		_dbfcab = append(_dbfcab, "ST_UniversalMeasure")
	}
	if len(_dbfcab) > 1 {
		return _b.Errorf("%s\u0020too\u0020many\u0020members\u0020set:\u0020\u0025v", path, _dbfcab)
	}
	return nil
}

const (
	ST_PTabRelativeToUnset  ST_PTabRelativeTo = 0
	ST_PTabRelativeToMargin ST_PTabRelativeTo = 1
	ST_PTabRelativeToIndent ST_PTabRelativeTo = 2
)

// ValidateWithPath validates the CT_Tabs and its children, prefixing error messages with path
func (_faabd *CT_Tabs) ValidateWithPath(path string) error {
	for _degge, _badefb := range _faabd.Tab {
		if _ecdb := _badefb.ValidateWithPath(_b.Sprintf("\u0025s\u002fTab\u005b\u0025d\u005d", path, _degge)); _ecdb != nil {
			return _ecdb
		}
	}
	return nil
}

// ValidateWithPath validates the WdCT_LinkedTextboxInformation and its children, prefixing error messages with path
func (_gcgbd *WdCT_LinkedTextboxInformation) ValidateWithPath(path string) error {
	if _gcgbd.ExtLst != nil {
		if _gdbdb := _gcgbd.ExtLst.ValidateWithPath(path + "\u002fExtLst"); _gdbdb != nil {
			return _gdbdb
		}
	}
	return nil
}
func (_gdceea *CT_SmartTagRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gdceea.UriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uri"}, Value: _b.Sprintf("\u0025v", *_gdceea.UriAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:element"}, Value: _b.Sprintf("\u0025v", _gdceea.ElementAttr)})
	e.EncodeToken(start)
	if _gdceea.SmartTagPr != nil {
		_fgcfad := _d.StartElement{Name: _d.Name{Local: "w:smartTagPr"}}
		e.EncodeElement(_gdceea.SmartTagPr, _fgcfad)
	}
	if _gdceea.EG_PContent != nil {
		for _, _cegdf := range _gdceea.EG_PContent {
			_cegdf.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_CustomXmlCell and its children
func (_defa *CT_CustomXmlCell) Validate() error { return _defa.ValidateWithPath("CT_CustomXmlCell") }
func (_gagcag *CT_TrackChangeRange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gagcag.DisplacedByCustomXmlAttr != ST_DisplacedByCustomXmlUnset {
		_ebdcg, _ffacb := _gagcag.DisplacedByCustomXmlAttr.MarshalXMLAttr(_d.Name{Local: "w:displacedByCustomXml"})
		if _ffacb != nil {
			return _ffacb
		}
		start.Attr = append(start.Attr, _ebdcg)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _gagcag.AuthorAttr)})
	if _gagcag.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_gagcag.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _gagcag.IdAttr)})
	start.Name.Local = "w:CT_TrackChangeRange"
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_DirectionUnset ST_Direction = 0
	ST_DirectionLtr   ST_Direction = 1
	ST_DirectionRtl   ST_Direction = 2
)

func (_geece *CT_MailMergeOdsoFMDFieldType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_geece.ValAttr = ST_MailMergeOdsoFMDFieldType(1)
	for _, _agcdcf := range start.Attr {
		if _agcdcf.Name.Local == "val" {
			_geece.ValAttr.UnmarshalXMLAttr(_agcdcf)
			continue
		}
	}
	for {
		_cedbde, _cceed := d.Token()
		if _cceed != nil {
			return _b.Errorf("parsing\u0020CT_MailMergeOdsoFMDFieldType: \u0025s", _cceed)
		}
		if _gcacf, _agdab := _cedbde.(_d.EndElement); _agdab && _gcacf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_RPrDefault() *CT_RPrDefault { _aafcfc := &CT_RPrDefault{}; return _aafcfc }

type CT_PageSz struct {

	// Page Width
	WAttr *_g.ST_TwipsMeasure

	// Page Height
	HAttr *_g.ST_TwipsMeasure

	// Page Orientation
	OrientAttr ST_PageOrientation

	// Printer Paper Code
	CodeAttr *int64
}

func (_facbd *CT_SectPrBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _facbd.RsidRPrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidRPr"}, Value: _b.Sprintf("\u0025v", *_facbd.RsidRPrAttr)})
	}
	if _facbd.RsidDelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidDel"}, Value: _b.Sprintf("\u0025v", *_facbd.RsidDelAttr)})
	}
	if _facbd.RsidRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidR"}, Value: _b.Sprintf("\u0025v", *_facbd.RsidRAttr)})
	}
	if _facbd.RsidSectAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidSect"}, Value: _b.Sprintf("\u0025v", *_facbd.RsidSectAttr)})
	}
	e.EncodeToken(start)
	if _facbd.FootnotePr != nil {
		_ffbga := _d.StartElement{Name: _d.Name{Local: "w:footnotePr"}}
		e.EncodeElement(_facbd.FootnotePr, _ffbga)
	}
	if _facbd.EndnotePr != nil {
		_cbafd := _d.StartElement{Name: _d.Name{Local: "w:endnotePr"}}
		e.EncodeElement(_facbd.EndnotePr, _cbafd)
	}
	if _facbd.Type != nil {
		_fceee := _d.StartElement{Name: _d.Name{Local: "w:type"}}
		e.EncodeElement(_facbd.Type, _fceee)
	}
	if _facbd.PgSz != nil {
		_cbafe := _d.StartElement{Name: _d.Name{Local: "w:pgSz"}}
		e.EncodeElement(_facbd.PgSz, _cbafe)
	}
	if _facbd.PgMar != nil {
		_bebefb := _d.StartElement{Name: _d.Name{Local: "w:pgMar"}}
		e.EncodeElement(_facbd.PgMar, _bebefb)
	}
	if _facbd.PaperSrc != nil {
		_bddcf := _d.StartElement{Name: _d.Name{Local: "w:paperSrc"}}
		e.EncodeElement(_facbd.PaperSrc, _bddcf)
	}
	if _facbd.PgBorders != nil {
		_dgafd := _d.StartElement{Name: _d.Name{Local: "w:pgBorders"}}
		e.EncodeElement(_facbd.PgBorders, _dgafd)
	}
	if _facbd.LnNumType != nil {
		_bgeca := _d.StartElement{Name: _d.Name{Local: "w:lnNumType"}}
		e.EncodeElement(_facbd.LnNumType, _bgeca)
	}
	if _facbd.PgNumType != nil {
		_adgb := _d.StartElement{Name: _d.Name{Local: "w:pgNumType"}}
		e.EncodeElement(_facbd.PgNumType, _adgb)
	}
	if _facbd.Cols != nil {
		_defag := _d.StartElement{Name: _d.Name{Local: "w:cols"}}
		e.EncodeElement(_facbd.Cols, _defag)
	}
	if _facbd.FormProt != nil {
		_fbcg := _d.StartElement{Name: _d.Name{Local: "w:formProt"}}
		e.EncodeElement(_facbd.FormProt, _fbcg)
	}
	if _facbd.VAlign != nil {
		_cadaba := _d.StartElement{Name: _d.Name{Local: "w:vAlign"}}
		e.EncodeElement(_facbd.VAlign, _cadaba)
	}
	if _facbd.NoEndnote != nil {
		_cdfca := _d.StartElement{Name: _d.Name{Local: "w:noEndnote"}}
		e.EncodeElement(_facbd.NoEndnote, _cdfca)
	}
	if _facbd.TitlePg != nil {
		_acaaa := _d.StartElement{Name: _d.Name{Local: "w:titlePg"}}
		e.EncodeElement(_facbd.TitlePg, _acaaa)
	}
	if _facbd.TextDirection != nil {
		_ccaccb := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_facbd.TextDirection, _ccaccb)
	}
	if _facbd.Bidi != nil {
		_bcfcf := _d.StartElement{Name: _d.Name{Local: "w:bidi"}}
		e.EncodeElement(_facbd.Bidi, _bcfcf)
	}
	if _facbd.RtlGutter != nil {
		_cabda := _d.StartElement{Name: _d.Name{Local: "w:rtlGutter"}}
		e.EncodeElement(_facbd.RtlGutter, _cabda)
	}
	if _facbd.DocGrid != nil {
		_adfbb := _d.StartElement{Name: _d.Name{Local: "w:docGrid"}}
		e.EncodeElement(_facbd.DocGrid, _adfbb)
	}
	if _facbd.PrinterSettings != nil {
		_feecd := _d.StartElement{Name: _d.Name{Local: "w:printerSettings"}}
		e.EncodeElement(_facbd.PrinterSettings, _feecd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bggce *CT_TextDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bggce.ValAttr = ST_TextDirection(1)
	for _, _ccecbg := range start.Attr {
		if _ccecbg.Name.Local == "val" {
			_bggce.ValAttr.UnmarshalXMLAttr(_ccecbg)
			continue
		}
	}
	for {
		_efddga, _eeaaeb := d.Token()
		if _eeaaeb != nil {
			return _b.Errorf("parsing\u0020CT_TextDirection: \u0025s", _eeaaeb)
		}
		if _agegag, _dafgdg := _efddga.(_d.EndElement); _dafgdg && _agegag.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Drawing() *CT_Drawing { _fgfb := &CT_Drawing{}; return _fgfb }

// Validate validates the CT_Drawing and its children
func (_dacff *CT_Drawing) Validate() error { return _dacff.ValidateWithPath("CT_Drawing") }
func (_gceec *CT_Shd) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gceec.ValAttr = ST_Shd(1)
	for _, _edagda := range start.Attr {
		if _edagda.Name.Local == "val" {
			_gceec.ValAttr.UnmarshalXMLAttr(_edagda)
			continue
		}
		if _edagda.Name.Local == "color" {
			_fefae, _dadbb := ParseUnionST_HexColor(_edagda.Value)
			if _dadbb != nil {
				return _dadbb
			}
			_gceec.ColorAttr = &_fefae
			continue
		}
		if _edagda.Name.Local == "themeColor" {
			_gceec.ThemeColorAttr.UnmarshalXMLAttr(_edagda)
			continue
		}
		if _edagda.Name.Local == "themeTint" {
			_fedbee, _dgggef := _edagda.Value, error(nil)
			if _dgggef != nil {
				return _dgggef
			}
			_gceec.ThemeTintAttr = &_fedbee
			continue
		}
		if _edagda.Name.Local == "themeShade" {
			_afdffb, _ecbdf := _edagda.Value, error(nil)
			if _ecbdf != nil {
				return _ecbdf
			}
			_gceec.ThemeShadeAttr = &_afdffb
			continue
		}
		if _edagda.Name.Local == "fill" {
			_faeef, _bced := ParseUnionST_HexColor(_edagda.Value)
			if _bced != nil {
				return _bced
			}
			_gceec.FillAttr = &_faeef
			continue
		}
		if _edagda.Name.Local == "themeFill" {
			_gceec.ThemeFillAttr.UnmarshalXMLAttr(_edagda)
			continue
		}
		if _edagda.Name.Local == "themeFillTint" {
			_dbcee, _gdggd := _edagda.Value, error(nil)
			if _gdggd != nil {
				return _gdggd
			}
			_gceec.ThemeFillTintAttr = &_dbcee
			continue
		}
		if _edagda.Name.Local == "themeFillShade" {
			_afgfb, _cadeb := _edagda.Value, error(nil)
			if _cadeb != nil {
				return _cadeb
			}
			_gceec.ThemeFillShadeAttr = &_afgfb
			continue
		}
	}
	for {
		_eegbd, _daada := d.Token()
		if _daada != nil {
			return _b.Errorf("parsing\u0020CT_Shd:\u0020\u0025s", _daada)
		}
		if _ecbgga, _ggacfb := _eegbd.(_d.EndElement); _ggacfb && _ecbgga.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fgcag *CT_LsdException) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _fgcag.NameAttr)})
	if _fgcag.LockedAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:locked"}, Value: _b.Sprintf("\u0025v", *_fgcag.LockedAttr)})
	}
	if _fgcag.UiPriorityAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uiPriority"}, Value: _b.Sprintf("\u0025v", *_fgcag.UiPriorityAttr)})
	}
	if _fgcag.SemiHiddenAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:semiHidden"}, Value: _b.Sprintf("\u0025v", *_fgcag.SemiHiddenAttr)})
	}
	if _fgcag.UnhideWhenUsedAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:unhideWhenUsed"}, Value: _b.Sprintf("\u0025v", *_fgcag.UnhideWhenUsedAttr)})
	}
	if _fgcag.QFormatAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:qFormat"}, Value: _b.Sprintf("\u0025v", *_fgcag.QFormatAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bdgag *ST_RubyAlign) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bdgag = 0
	case "center":
		*_bdgag = 1
	case "distributeLetter":
		*_bdgag = 2
	case "distributeSpace":
		*_bdgag = 3
	case "left":
		*_bdgag = 4
	case "right":
		*_bdgag = 5
	case "rightVertical":
		*_bdgag = 6
	}
	return nil
}
func (_fgebg *CT_Settings) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fgebg.WriteProtection != nil {
		_geeegg := _d.StartElement{Name: _d.Name{Local: "w:writeProtection"}}
		e.EncodeElement(_fgebg.WriteProtection, _geeegg)
	}
	if _fgebg.View != nil {
		_cddgag := _d.StartElement{Name: _d.Name{Local: "w:view"}}
		e.EncodeElement(_fgebg.View, _cddgag)
	}
	if _fgebg.Zoom != nil {
		_baaga := _d.StartElement{Name: _d.Name{Local: "w:zoom"}}
		e.EncodeElement(_fgebg.Zoom, _baaga)
	}
	if _fgebg.RemovePersonalInformation != nil {
		_ddddb := _d.StartElement{Name: _d.Name{Local: "w:removePersonalInformation"}}
		e.EncodeElement(_fgebg.RemovePersonalInformation, _ddddb)
	}
	if _fgebg.RemoveDateAndTime != nil {
		_fdgfb := _d.StartElement{Name: _d.Name{Local: "w:removeDateAndTime"}}
		e.EncodeElement(_fgebg.RemoveDateAndTime, _fdgfb)
	}
	if _fgebg.DoNotDisplayPageBoundaries != nil {
		_beffd := _d.StartElement{Name: _d.Name{Local: "w:doNotDisplayPageBoundaries"}}
		e.EncodeElement(_fgebg.DoNotDisplayPageBoundaries, _beffd)
	}
	if _fgebg.DisplayBackgroundShape != nil {
		_bcdcb := _d.StartElement{Name: _d.Name{Local: "w:displayBackgroundShape"}}
		e.EncodeElement(_fgebg.DisplayBackgroundShape, _bcdcb)
	}
	if _fgebg.PrintPostScriptOverText != nil {
		_fbfeb := _d.StartElement{Name: _d.Name{Local: "w:printPostScriptOverText"}}
		e.EncodeElement(_fgebg.PrintPostScriptOverText, _fbfeb)
	}
	if _fgebg.PrintFractionalCharacterWidth != nil {
		_bebbdg := _d.StartElement{Name: _d.Name{Local: "w:printFractionalCharacterWidth"}}
		e.EncodeElement(_fgebg.PrintFractionalCharacterWidth, _bebbdg)
	}
	if _fgebg.PrintFormsData != nil {
		_ddfcb := _d.StartElement{Name: _d.Name{Local: "w:printFormsData"}}
		e.EncodeElement(_fgebg.PrintFormsData, _ddfcb)
	}
	if _fgebg.EmbedTrueTypeFonts != nil {
		_cdbgee := _d.StartElement{Name: _d.Name{Local: "w:embedTrueTypeFonts"}}
		e.EncodeElement(_fgebg.EmbedTrueTypeFonts, _cdbgee)
	}
	if _fgebg.EmbedSystemFonts != nil {
		_gaaee := _d.StartElement{Name: _d.Name{Local: "w:embedSystemFonts"}}
		e.EncodeElement(_fgebg.EmbedSystemFonts, _gaaee)
	}
	if _fgebg.SaveSubsetFonts != nil {
		_daadee := _d.StartElement{Name: _d.Name{Local: "w:saveSubsetFonts"}}
		e.EncodeElement(_fgebg.SaveSubsetFonts, _daadee)
	}
	if _fgebg.SaveFormsData != nil {
		_gbaae := _d.StartElement{Name: _d.Name{Local: "w:saveFormsData"}}
		e.EncodeElement(_fgebg.SaveFormsData, _gbaae)
	}
	if _fgebg.MirrorMargins != nil {
		_ccaec := _d.StartElement{Name: _d.Name{Local: "w:mirrorMargins"}}
		e.EncodeElement(_fgebg.MirrorMargins, _ccaec)
	}
	if _fgebg.AlignBordersAndEdges != nil {
		_gcdbd := _d.StartElement{Name: _d.Name{Local: "w:alignBordersAndEdges"}}
		e.EncodeElement(_fgebg.AlignBordersAndEdges, _gcdbd)
	}
	if _fgebg.BordersDoNotSurroundHeader != nil {
		_eagfe := _d.StartElement{Name: _d.Name{Local: "w:bordersDoNotSurroundHeader"}}
		e.EncodeElement(_fgebg.BordersDoNotSurroundHeader, _eagfe)
	}
	if _fgebg.BordersDoNotSurroundFooter != nil {
		_aagfdd := _d.StartElement{Name: _d.Name{Local: "w:bordersDoNotSurroundFooter"}}
		e.EncodeElement(_fgebg.BordersDoNotSurroundFooter, _aagfdd)
	}
	if _fgebg.GutterAtTop != nil {
		_ffadfg := _d.StartElement{Name: _d.Name{Local: "w:gutterAtTop"}}
		e.EncodeElement(_fgebg.GutterAtTop, _ffadfg)
	}
	if _fgebg.HideSpellingErrors != nil {
		_ddfdc := _d.StartElement{Name: _d.Name{Local: "w:hideSpellingErrors"}}
		e.EncodeElement(_fgebg.HideSpellingErrors, _ddfdc)
	}
	if _fgebg.HideGrammaticalErrors != nil {
		_ebdd := _d.StartElement{Name: _d.Name{Local: "w:hideGrammaticalErrors"}}
		e.EncodeElement(_fgebg.HideGrammaticalErrors, _ebdd)
	}
	if _fgebg.ActiveWritingStyle != nil {
		_dbbce := _d.StartElement{Name: _d.Name{Local: "w:activeWritingStyle"}}
		for _, _bedbfg := range _fgebg.ActiveWritingStyle {
			e.EncodeElement(_bedbfg, _dbbce)
		}
	}
	if _fgebg.ProofState != nil {
		_fbbad := _d.StartElement{Name: _d.Name{Local: "w:proofState"}}
		e.EncodeElement(_fgebg.ProofState, _fbbad)
	}
	if _fgebg.FormsDesign != nil {
		_ffdeb := _d.StartElement{Name: _d.Name{Local: "w:formsDesign"}}
		e.EncodeElement(_fgebg.FormsDesign, _ffdeb)
	}
	if _fgebg.AttachedTemplate != nil {
		_acegda := _d.StartElement{Name: _d.Name{Local: "w:attachedTemplate"}}
		e.EncodeElement(_fgebg.AttachedTemplate, _acegda)
	}
	if _fgebg.LinkStyles != nil {
		_ccffa := _d.StartElement{Name: _d.Name{Local: "w:linkStyles"}}
		e.EncodeElement(_fgebg.LinkStyles, _ccffa)
	}
	if _fgebg.StylePaneFormatFilter != nil {
		_fefggg := _d.StartElement{Name: _d.Name{Local: "w:stylePaneFormatFilter"}}
		e.EncodeElement(_fgebg.StylePaneFormatFilter, _fefggg)
	}
	if _fgebg.StylePaneSortMethod != nil {
		_abeff := _d.StartElement{Name: _d.Name{Local: "w:stylePaneSortMethod"}}
		e.EncodeElement(_fgebg.StylePaneSortMethod, _abeff)
	}
	if _fgebg.DocumentType != nil {
		_cbfddc := _d.StartElement{Name: _d.Name{Local: "w:documentType"}}
		e.EncodeElement(_fgebg.DocumentType, _cbfddc)
	}
	if _fgebg.MailMerge != nil {
		_cedec := _d.StartElement{Name: _d.Name{Local: "w:mailMerge"}}
		e.EncodeElement(_fgebg.MailMerge, _cedec)
	}
	if _fgebg.RevisionView != nil {
		_ecfea := _d.StartElement{Name: _d.Name{Local: "w:revisionView"}}
		e.EncodeElement(_fgebg.RevisionView, _ecfea)
	}
	if _fgebg.TrackRevisions != nil {
		_abbgaa := _d.StartElement{Name: _d.Name{Local: "w:trackRevisions"}}
		e.EncodeElement(_fgebg.TrackRevisions, _abbgaa)
	}
	if _fgebg.DoNotTrackMoves != nil {
		_ddeee := _d.StartElement{Name: _d.Name{Local: "w:doNotTrackMoves"}}
		e.EncodeElement(_fgebg.DoNotTrackMoves, _ddeee)
	}
	if _fgebg.DoNotTrackFormatting != nil {
		_bdafa := _d.StartElement{Name: _d.Name{Local: "w:doNotTrackFormatting"}}
		e.EncodeElement(_fgebg.DoNotTrackFormatting, _bdafa)
	}
	if _fgebg.DocumentProtection != nil {
		_dfegf := _d.StartElement{Name: _d.Name{Local: "w:documentProtection"}}
		e.EncodeElement(_fgebg.DocumentProtection, _dfegf)
	}
	if _fgebg.AutoFormatOverride != nil {
		_bbcabc := _d.StartElement{Name: _d.Name{Local: "w:autoFormatOverride"}}
		e.EncodeElement(_fgebg.AutoFormatOverride, _bbcabc)
	}
	if _fgebg.StyleLockTheme != nil {
		_ggbefe := _d.StartElement{Name: _d.Name{Local: "w:styleLockTheme"}}
		e.EncodeElement(_fgebg.StyleLockTheme, _ggbefe)
	}
	if _fgebg.StyleLockQFSet != nil {
		_dfgcg := _d.StartElement{Name: _d.Name{Local: "w:styleLockQFSet"}}
		e.EncodeElement(_fgebg.StyleLockQFSet, _dfgcg)
	}
	if _fgebg.DefaultTabStop != nil {
		_afbcb := _d.StartElement{Name: _d.Name{Local: "w:defaultTabStop"}}
		e.EncodeElement(_fgebg.DefaultTabStop, _afbcb)
	}
	if _fgebg.AutoHyphenation != nil {
		_cfffg := _d.StartElement{Name: _d.Name{Local: "w:autoHyphenation"}}
		e.EncodeElement(_fgebg.AutoHyphenation, _cfffg)
	}
	if _fgebg.ConsecutiveHyphenLimit != nil {
		_fffde := _d.StartElement{Name: _d.Name{Local: "w:consecutiveHyphenLimit"}}
		e.EncodeElement(_fgebg.ConsecutiveHyphenLimit, _fffde)
	}
	if _fgebg.HyphenationZone != nil {
		_gcabef := _d.StartElement{Name: _d.Name{Local: "w:hyphenationZone"}}
		e.EncodeElement(_fgebg.HyphenationZone, _gcabef)
	}
	if _fgebg.DoNotHyphenateCaps != nil {
		_dfbfaa := _d.StartElement{Name: _d.Name{Local: "w:doNotHyphenateCaps"}}
		e.EncodeElement(_fgebg.DoNotHyphenateCaps, _dfbfaa)
	}
	if _fgebg.ShowEnvelope != nil {
		_geeaa := _d.StartElement{Name: _d.Name{Local: "w:showEnvelope"}}
		e.EncodeElement(_fgebg.ShowEnvelope, _geeaa)
	}
	if _fgebg.SummaryLength != nil {
		_dbbgde := _d.StartElement{Name: _d.Name{Local: "w:summaryLength"}}
		e.EncodeElement(_fgebg.SummaryLength, _dbbgde)
	}
	if _fgebg.ClickAndTypeStyle != nil {
		_geggf := _d.StartElement{Name: _d.Name{Local: "w:clickAndTypeStyle"}}
		e.EncodeElement(_fgebg.ClickAndTypeStyle, _geggf)
	}
	if _fgebg.DefaultTableStyle != nil {
		_dcfacc := _d.StartElement{Name: _d.Name{Local: "w:defaultTableStyle"}}
		e.EncodeElement(_fgebg.DefaultTableStyle, _dcfacc)
	}
	if _fgebg.EvenAndOddHeaders != nil {
		_abffe := _d.StartElement{Name: _d.Name{Local: "w:evenAndOddHeaders"}}
		e.EncodeElement(_fgebg.EvenAndOddHeaders, _abffe)
	}
	if _fgebg.BookFoldRevPrinting != nil {
		_fadge := _d.StartElement{Name: _d.Name{Local: "w:bookFoldRevPrinting"}}
		e.EncodeElement(_fgebg.BookFoldRevPrinting, _fadge)
	}
	if _fgebg.BookFoldPrinting != nil {
		_bgaacd := _d.StartElement{Name: _d.Name{Local: "w:bookFoldPrinting"}}
		e.EncodeElement(_fgebg.BookFoldPrinting, _bgaacd)
	}
	if _fgebg.BookFoldPrintingSheets != nil {
		_abdda := _d.StartElement{Name: _d.Name{Local: "w:bookFoldPrintingSheets"}}
		e.EncodeElement(_fgebg.BookFoldPrintingSheets, _abdda)
	}
	if _fgebg.DrawingGridHorizontalSpacing != nil {
		_bdbag := _d.StartElement{Name: _d.Name{Local: "w:drawingGridHorizontalSpacing"}}
		e.EncodeElement(_fgebg.DrawingGridHorizontalSpacing, _bdbag)
	}
	if _fgebg.DrawingGridVerticalSpacing != nil {
		_accfda := _d.StartElement{Name: _d.Name{Local: "w:drawingGridVerticalSpacing"}}
		e.EncodeElement(_fgebg.DrawingGridVerticalSpacing, _accfda)
	}
	if _fgebg.DisplayHorizontalDrawingGridEvery != nil {
		_ddagdd := _d.StartElement{Name: _d.Name{Local: "w:displayHorizontalDrawingGridEvery"}}
		e.EncodeElement(_fgebg.DisplayHorizontalDrawingGridEvery, _ddagdd)
	}
	if _fgebg.DisplayVerticalDrawingGridEvery != nil {
		_egbeg := _d.StartElement{Name: _d.Name{Local: "w:displayVerticalDrawingGridEvery"}}
		e.EncodeElement(_fgebg.DisplayVerticalDrawingGridEvery, _egbeg)
	}
	if _fgebg.DoNotUseMarginsForDrawingGridOrigin != nil {
		_ggeag := _d.StartElement{Name: _d.Name{Local: "w:doNotUseMarginsForDrawingGridOrigin"}}
		e.EncodeElement(_fgebg.DoNotUseMarginsForDrawingGridOrigin, _ggeag)
	}
	if _fgebg.DrawingGridHorizontalOrigin != nil {
		_cbacf := _d.StartElement{Name: _d.Name{Local: "w:drawingGridHorizontalOrigin"}}
		e.EncodeElement(_fgebg.DrawingGridHorizontalOrigin, _cbacf)
	}
	if _fgebg.DrawingGridVerticalOrigin != nil {
		_defgg := _d.StartElement{Name: _d.Name{Local: "w:drawingGridVerticalOrigin"}}
		e.EncodeElement(_fgebg.DrawingGridVerticalOrigin, _defgg)
	}
	if _fgebg.DoNotShadeFormData != nil {
		_cfdfd := _d.StartElement{Name: _d.Name{Local: "w:doNotShadeFormData"}}
		e.EncodeElement(_fgebg.DoNotShadeFormData, _cfdfd)
	}
	if _fgebg.NoPunctuationKerning != nil {
		_cbfgd := _d.StartElement{Name: _d.Name{Local: "w:noPunctuationKerning"}}
		e.EncodeElement(_fgebg.NoPunctuationKerning, _cbfgd)
	}
	if _fgebg.CharacterSpacingControl != nil {
		_ggcee := _d.StartElement{Name: _d.Name{Local: "w:characterSpacingControl"}}
		e.EncodeElement(_fgebg.CharacterSpacingControl, _ggcee)
	}
	if _fgebg.PrintTwoOnOne != nil {
		_cggacc := _d.StartElement{Name: _d.Name{Local: "w:printTwoOnOne"}}
		e.EncodeElement(_fgebg.PrintTwoOnOne, _cggacc)
	}
	if _fgebg.StrictFirstAndLastChars != nil {
		_eefcb := _d.StartElement{Name: _d.Name{Local: "w:strictFirstAndLastChars"}}
		e.EncodeElement(_fgebg.StrictFirstAndLastChars, _eefcb)
	}
	if _fgebg.NoLineBreaksAfter != nil {
		_bgbag := _d.StartElement{Name: _d.Name{Local: "w:noLineBreaksAfter"}}
		e.EncodeElement(_fgebg.NoLineBreaksAfter, _bgbag)
	}
	if _fgebg.NoLineBreaksBefore != nil {
		_geggga := _d.StartElement{Name: _d.Name{Local: "w:noLineBreaksBefore"}}
		e.EncodeElement(_fgebg.NoLineBreaksBefore, _geggga)
	}
	if _fgebg.SavePreviewPicture != nil {
		_gddgf := _d.StartElement{Name: _d.Name{Local: "w:savePreviewPicture"}}
		e.EncodeElement(_fgebg.SavePreviewPicture, _gddgf)
	}
	if _fgebg.DoNotValidateAgainstSchema != nil {
		_cagde := _d.StartElement{Name: _d.Name{Local: "w:doNotValidateAgainstSchema"}}
		e.EncodeElement(_fgebg.DoNotValidateAgainstSchema, _cagde)
	}
	if _fgebg.SaveInvalidXml != nil {
		_ebaad := _d.StartElement{Name: _d.Name{Local: "w:saveInvalidXml"}}
		e.EncodeElement(_fgebg.SaveInvalidXml, _ebaad)
	}
	if _fgebg.IgnoreMixedContent != nil {
		_fbggaa := _d.StartElement{Name: _d.Name{Local: "w:ignoreMixedContent"}}
		e.EncodeElement(_fgebg.IgnoreMixedContent, _fbggaa)
	}
	if _fgebg.AlwaysShowPlaceholderText != nil {
		_bebffc := _d.StartElement{Name: _d.Name{Local: "w:alwaysShowPlaceholderText"}}
		e.EncodeElement(_fgebg.AlwaysShowPlaceholderText, _bebffc)
	}
	if _fgebg.DoNotDemarcateInvalidXml != nil {
		_egebe := _d.StartElement{Name: _d.Name{Local: "w:doNotDemarcateInvalidXml"}}
		e.EncodeElement(_fgebg.DoNotDemarcateInvalidXml, _egebe)
	}
	if _fgebg.SaveXmlDataOnly != nil {
		_cabdaa := _d.StartElement{Name: _d.Name{Local: "w:saveXmlDataOnly"}}
		e.EncodeElement(_fgebg.SaveXmlDataOnly, _cabdaa)
	}
	if _fgebg.UseXSLTWhenSaving != nil {
		_eebdbc := _d.StartElement{Name: _d.Name{Local: "w:useXSLTWhenSaving"}}
		e.EncodeElement(_fgebg.UseXSLTWhenSaving, _eebdbc)
	}
	if _fgebg.SaveThroughXslt != nil {
		_cgcgac := _d.StartElement{Name: _d.Name{Local: "w:saveThroughXslt"}}
		e.EncodeElement(_fgebg.SaveThroughXslt, _cgcgac)
	}
	if _fgebg.ShowXMLTags != nil {
		_cefge := _d.StartElement{Name: _d.Name{Local: "w:showXMLTags"}}
		e.EncodeElement(_fgebg.ShowXMLTags, _cefge)
	}
	if _fgebg.AlwaysMergeEmptyNamespace != nil {
		_bgeeb := _d.StartElement{Name: _d.Name{Local: "w:alwaysMergeEmptyNamespace"}}
		e.EncodeElement(_fgebg.AlwaysMergeEmptyNamespace, _bgeeb)
	}
	if _fgebg.UpdateFields != nil {
		_ddcbga := _d.StartElement{Name: _d.Name{Local: "w:updateFields"}}
		e.EncodeElement(_fgebg.UpdateFields, _ddcbga)
	}
	if _fgebg.HdrShapeDefaults != nil {
		_daaeab := _d.StartElement{Name: _d.Name{Local: "w:hdrShapeDefaults"}}
		e.EncodeElement(_fgebg.HdrShapeDefaults, _daaeab)
	}
	if _fgebg.FootnotePr != nil {
		_acdbb := _d.StartElement{Name: _d.Name{Local: "w:footnotePr"}}
		e.EncodeElement(_fgebg.FootnotePr, _acdbb)
	}
	if _fgebg.EndnotePr != nil {
		_baceg := _d.StartElement{Name: _d.Name{Local: "w:endnotePr"}}
		e.EncodeElement(_fgebg.EndnotePr, _baceg)
	}
	if _fgebg.Compat != nil {
		_cbgfe := _d.StartElement{Name: _d.Name{Local: "w:compat"}}
		e.EncodeElement(_fgebg.Compat, _cbgfe)
	}
	if _fgebg.DocVars != nil {
		_gacbc := _d.StartElement{Name: _d.Name{Local: "w:docVars"}}
		e.EncodeElement(_fgebg.DocVars, _gacbc)
	}
	if _fgebg.Rsids != nil {
		_bgfga := _d.StartElement{Name: _d.Name{Local: "w:rsids"}}
		e.EncodeElement(_fgebg.Rsids, _bgfga)
	}
	if _fgebg.MathPr != nil {
		_daeebb := _d.StartElement{Name: _d.Name{Local: "m:mathPr"}}
		e.EncodeElement(_fgebg.MathPr, _daeebb)
	}
	if _fgebg.AttachedSchema != nil {
		_acgad := _d.StartElement{Name: _d.Name{Local: "w:attachedSchema"}}
		for _, _aeegc := range _fgebg.AttachedSchema {
			e.EncodeElement(_aeegc, _acgad)
		}
	}
	if _fgebg.ThemeFontLang != nil {
		_bcbdf := _d.StartElement{Name: _d.Name{Local: "w:themeFontLang"}}
		e.EncodeElement(_fgebg.ThemeFontLang, _bcbdf)
	}
	if _fgebg.ClrSchemeMapping != nil {
		_cgffeb := _d.StartElement{Name: _d.Name{Local: "w:clrSchemeMapping"}}
		e.EncodeElement(_fgebg.ClrSchemeMapping, _cgffeb)
	}
	if _fgebg.DoNotIncludeSubdocsInStats != nil {
		_ecgcd := _d.StartElement{Name: _d.Name{Local: "w:doNotIncludeSubdocsInStats"}}
		e.EncodeElement(_fgebg.DoNotIncludeSubdocsInStats, _ecgcd)
	}
	if _fgebg.DoNotAutoCompressPictures != nil {
		_debdae := _d.StartElement{Name: _d.Name{Local: "w:doNotAutoCompressPictures"}}
		e.EncodeElement(_fgebg.DoNotAutoCompressPictures, _debdae)
	}
	if _fgebg.ForceUpgrade != nil {
		_bbfcdc := _d.StartElement{Name: _d.Name{Local: "w:forceUpgrade"}}
		e.EncodeElement(_fgebg.ForceUpgrade, _bbfcdc)
	}
	if _fgebg.Captions != nil {
		_fbdfg := _d.StartElement{Name: _d.Name{Local: "w:captions"}}
		e.EncodeElement(_fgebg.Captions, _fbdfg)
	}
	if _fgebg.ReadModeInkLockDown != nil {
		_fdfee := _d.StartElement{Name: _d.Name{Local: "w:readModeInkLockDown"}}
		e.EncodeElement(_fgebg.ReadModeInkLockDown, _fdfee)
	}
	if _fgebg.SmartTagType != nil {
		_eeeda := _d.StartElement{Name: _d.Name{Local: "w:smartTagType"}}
		for _, _fcdbdg := range _fgebg.SmartTagType {
			e.EncodeElement(_fcdbdg, _eeeda)
		}
	}
	if _fgebg.SchemaLibrary != nil {
		_bcbedf := _d.StartElement{Name: _d.Name{Local: "ma:schemaLibrary"}}
		e.EncodeElement(_fgebg.SchemaLibrary, _bcbedf)
	}
	if _fgebg.ShapeDefaults != nil {
		_efaf := _d.StartElement{Name: _d.Name{Local: "w:shapeDefaults"}}
		e.EncodeElement(_fgebg.ShapeDefaults, _efaf)
	}
	if _fgebg.DoNotEmbedSmartTags != nil {
		_dcdgc := _d.StartElement{Name: _d.Name{Local: "w:doNotEmbedSmartTags"}}
		e.EncodeElement(_fgebg.DoNotEmbedSmartTags, _dcdgc)
	}
	if _fgebg.DecimalSymbol != nil {
		_fgeaca := _d.StartElement{Name: _d.Name{Local: "w:decimalSymbol"}}
		e.EncodeElement(_fgebg.DecimalSymbol, _fgeaca)
	}
	if _fgebg.ListSeparator != nil {
		_ggdcbb := _d.StartElement{Name: _d.Name{Local: "w:listSeparator"}}
		e.EncodeElement(_fgebg.ListSeparator, _ggdcbb)
	}
	for _, _gbebd := range _fgebg.Extra {
		if _cfbad := _gbebd.MarshalXML(e, _d.StartElement{}); _cfbad != nil {
			return _cfbad
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_ContentBlockContent and its children, prefixing error messages with path
func (_aefga *EG_ContentBlockContent) ValidateWithPath(path string) error {
	if _aefga.CustomXml != nil {
		if _fageb := _aefga.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _fageb != nil {
			return _fageb
		}
	}
	if _aefga.Sdt != nil {
		if _eeefc := _aefga.Sdt.ValidateWithPath(path + "\u002fSdt"); _eeefc != nil {
			return _eeefc
		}
	}
	for _bfdbea, _bafcde := range _aefga.P {
		if _ccfca := _bafcde.ValidateWithPath(_b.Sprintf("\u0025s\u002fP\u005b\u0025d\u005d", path, _bfdbea)); _ccfca != nil {
			return _ccfca
		}
	}
	for _adcecd, _fecaae := range _aefga.Tbl {
		if _aegeg := _fecaae.ValidateWithPath(_b.Sprintf("\u0025s\u002fTbl\u005b\u0025d\u005d", path, _adcecd)); _aegeg != nil {
			return _aegeg
		}
	}
	for _gagdd, _bbgac := range _aefga.EG_RunLevelElts {
		if _fgcdb := _bbgac.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _gagdd)); _fgcdb != nil {
			return _fgcdb
		}
	}
	return nil
}
func (_aabcbg *ST_DocPartBehavior) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ggfega, _aedaf := d.Token()
	if _aedaf != nil {
		return _aedaf
	}
	if _bcaceg, _cafbcb := _ggfega.(_d.EndElement); _cafbcb && _bcaceg.Name == start.Name {
		*_aabcbg = 1
		return nil
	}
	if _fgaed, _fbagea := _ggfega.(_d.CharData); !_fbagea {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ggfega)
	} else {
		switch string(_fgaed) {
		case "":
			*_aabcbg = 0
		case "content":
			*_aabcbg = 1
		case "p":
			*_aabcbg = 2
		case "pg":
			*_aabcbg = 3
		}
	}
	_ggfega, _aedaf = d.Token()
	if _aedaf != nil {
		return _aedaf
	}
	if _cgbcda, _beceba := _ggfega.(_d.EndElement); _beceba && _cgbcda.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ggfega)
}
func (_dagbf *WdCT_TxbxContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gaaac:
	for {
		_dgbce, _cbgef := d.Token()
		if _cbgef != nil {
			return _cbgef
		}
		switch _cbgecae := _dgbce.(type) {
		case _d.StartElement:
			switch _cbgecae.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_bcece := NewCT_AltChunk()
				if _defdg := d.DecodeElement(_bcece, &_cbgecae); _defdg != nil {
					return _defdg
				}
				_dagbf.AltChunk = append(_dagbf.AltChunk, _bcece)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}:
				_ccdaca := NewEG_ContentBlockContent()
				_eggcb := NewCT_P()
				if _cabae := d.DecodeElement(_eggcb, &_cbgecae); _cabae != nil {
					return _cabae
				}
				_ccdaca.P = append(_ccdaca.P, _eggcb)
				_dagbf.EG_ContentBlockContent = append(_dagbf.EG_ContentBlockContent, _ccdaca)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_TxbxContent\u0020\u0025v", _cbgecae.Name)
				if _dceac := d.Skip(); _dceac != nil {
					return _dceac
				}
			}
		case _d.EndElement:
			break _gaaac
		case _d.CharData:
		}
	}
	return nil
}
func (_fbacg *CT_FFName) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _afdbg := range start.Attr {
		if _afdbg.Name.Local == "val" {
			_cgbb, _fbeb := _afdbg.Value, error(nil)
			if _fbeb != nil {
				return _fbeb
			}
			_fbacg.ValAttr = &_cgbb
			continue
		}
	}
	for {
		_eafcc, _fdag := d.Token()
		if _fdag != nil {
			return _b.Errorf("parsing\u0020CT_FFName:\u0020\u0025s", _fdag)
		}
		if _aceda, _bbbdf := _eafcc.(_d.EndElement); _bbbdf && _aceda.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_CalendarType() *CT_CalendarType { _cba := &CT_CalendarType{}; return _cba }
func NewCT_FontSig() *CT_FontSig           { _cgfd := &CT_FontSig{}; return _cgfd }
func (_aegef *ST_FtnPos) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_aegef = 0
	case "pageBottom":
		*_aegef = 1
	case "beneathText":
		*_aegef = 2
	case "sectEnd":
		*_aegef = 3
	case "docEnd":
		*_aegef = 4
	}
	return nil
}
func (_fcgbg ST_ObjectDrawAspect) ValidateWithPath(path string) error {
	switch _fcgbg {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fcgbg))
	}
	return nil
}
func (_cbbadd ST_JcTable) ValidateWithPath(path string) error {
	switch _cbbadd {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cbbadd))
	}
	return nil
}
func NewCT_FontRel() *CT_FontRel {
	_aaeff := &CT_FontRel{}
	_aaeff.FontKeyAttr = "\u007b00000000\u002d0000\u002d0000\u002d0000-000000000000\u007d"
	return _aaeff
}

// ValidateWithPath validates the EG_BlockLevelChunkElts and its children, prefixing error messages with path
func (_agdbcd *EG_BlockLevelChunkElts) ValidateWithPath(path string) error {
	for _feafa, _edfce := range _agdbcd.EG_ContentBlockContent {
		if _eggbdg := _edfce.ValidateWithPath(_b.Sprintf("\u0025s/EG_ContentBlockContent[%d\u005d", path, _feafa)); _eggbdg != nil {
			return _eggbdg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Placeholder and its children, prefixing error messages with path
func (_gadda *CT_Placeholder) ValidateWithPath(path string) error {
	if _gcgbfg := _gadda.DocPart.ValidateWithPath(path + "\u002fDocPart"); _gcgbfg != nil {
		return _gcgbfg
	}
	return nil
}

// Validate validates the CT_RPrOriginal and its children
func (_dgaef *CT_RPrOriginal) Validate() error { return _dgaef.ValidateWithPath("CT_RPrOriginal") }

// Validate validates the CT_SdtDocPart and its children
func (_cgcf *CT_SdtDocPart) Validate() error { return _cgcf.ValidateWithPath("CT_SdtDocPart") }
func (_fbff *CT_Headers) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_bbbac := _d.StartElement{Name: _d.Name{Local: "w:header"}}
	for _, _afgfce := range _fbff.Header {
		e.EncodeElement(_afgfce, _bbbac)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_edcdf *CT_SdtDateMappingType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _edcdf.ValAttr != ST_SdtDateMappingTypeUnset {
		_fcbeea, _cbbae := _edcdf.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _cbbae != nil {
			return _cbbae
		}
		start.Attr = append(start.Attr, _fcbeea)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the AG_TransitionalPassword and its children, prefixing error messages with path
func (_ebf *AG_TransitionalPassword) ValidateWithPath(path string) error {
	if _dge := _ebf.CryptProviderTypeAttr.ValidateWithPath(path + "\u002fCryptProviderTypeAttr"); _dge != nil {
		return _dge
	}
	if _ddd := _ebf.CryptAlgorithmClassAttr.ValidateWithPath(path + "\u002fCryptAlgorithmClassAttr"); _ddd != nil {
		return _ddd
	}
	if _aad := _ebf.CryptAlgorithmTypeAttr.ValidateWithPath(path + "\u002fCryptAlgorithmTypeAttr"); _aad != nil {
		return _aad
	}
	return nil
}
func (_ccbdab *CT_TrackChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _ccbdab.AuthorAttr)})
	if _ccbdab.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_ccbdab.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _ccbdab.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Br and its children, prefixing error messages with path
func (_ddac *CT_Br) ValidateWithPath(path string) error {
	if _gfcf := _ddac.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _gfcf != nil {
		return _gfcf
	}
	if _gdge := _ddac.ClearAttr.ValidateWithPath(path + "\u002fClearAttr"); _gdge != nil {
		return _gdge
	}
	return nil
}

// ValidateWithPath validates the EG_ParaRPrTrackChanges and its children, prefixing error messages with path
func (_bcgfa *EG_ParaRPrTrackChanges) ValidateWithPath(path string) error {
	if _bcgfa.Ins != nil {
		if _dfbabg := _bcgfa.Ins.ValidateWithPath(path + "\u002fIns"); _dfbabg != nil {
			return _dfbabg
		}
	}
	if _bcgfa.Del != nil {
		if _fbgfbe := _bcgfa.Del.ValidateWithPath(path + "\u002fDel"); _fbgfbe != nil {
			return _fbgfbe
		}
	}
	if _bcgfa.MoveFrom != nil {
		if _gbdfe := _bcgfa.MoveFrom.ValidateWithPath(path + "\u002fMoveFrom"); _gbdfe != nil {
			return _gbdfe
		}
	}
	if _bcgfa.MoveTo != nil {
		if _adffbg := _bcgfa.MoveTo.ValidateWithPath(path + "\u002fMoveTo"); _adffbg != nil {
			return _adffbg
		}
	}
	return nil
}

type WdCT_TxbxContent struct {

	// Anchor for Imported External Content
	AltChunk               []*CT_AltChunk
	EG_ContentBlockContent []*EG_ContentBlockContent
}

const (
	ST_ObjectUpdateModeUnset  ST_ObjectUpdateMode = 0
	ST_ObjectUpdateModeAlways ST_ObjectUpdateMode = 1
	ST_ObjectUpdateModeOnCall ST_ObjectUpdateMode = 2
)

// Validate validates the CT_TxbxContent and its children
func (_ecfed *CT_TxbxContent) Validate() error { return _ecfed.ValidateWithPath("CT_TxbxContent") }

// ValidateWithPath validates the CT_JcTable and its children, prefixing error messages with path
func (_baeaf *CT_JcTable) ValidateWithPath(path string) error {
	if _baeaf.ValAttr == ST_JcTableUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _dbeea := _baeaf.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _dbeea != nil {
		return _dbeea
	}
	return nil
}

// Validate validates the CT_SdtContentRow and its children
func (_acbggd *CT_SdtContentRow) Validate() error {
	return _acbggd.ValidateWithPath("CT_SdtContentRow")
}
func (_cdfgd ST_NumberFormat) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fcgcb := _d.Attr{}
	_fcgcb.Name = name
	switch _cdfgd {
	case ST_NumberFormatUnset:
		_fcgcb.Value = ""
	case ST_NumberFormatDecimal:
		_fcgcb.Value = "decimal"
	case ST_NumberFormatUpperRoman:
		_fcgcb.Value = "upperRoman"
	case ST_NumberFormatLowerRoman:
		_fcgcb.Value = "lowerRoman"
	case ST_NumberFormatUpperLetter:
		_fcgcb.Value = "upperLetter"
	case ST_NumberFormatLowerLetter:
		_fcgcb.Value = "lowerLetter"
	case ST_NumberFormatOrdinal:
		_fcgcb.Value = "ordinal"
	case ST_NumberFormatCardinalText:
		_fcgcb.Value = "cardinalText"
	case ST_NumberFormatOrdinalText:
		_fcgcb.Value = "ordinalText"
	case ST_NumberFormatHex:
		_fcgcb.Value = "hex"
	case ST_NumberFormatChicago:
		_fcgcb.Value = "chicago"
	case ST_NumberFormatIdeographDigital:
		_fcgcb.Value = "ideographDigital"
	case ST_NumberFormatJapaneseCounting:
		_fcgcb.Value = "japaneseCounting"
	case ST_NumberFormatAiueo:
		_fcgcb.Value = "aiueo"
	case ST_NumberFormatIroha:
		_fcgcb.Value = "iroha"
	case ST_NumberFormatDecimalFullWidth:
		_fcgcb.Value = "decimalFullWidth"
	case ST_NumberFormatDecimalHalfWidth:
		_fcgcb.Value = "decimalHalfWidth"
	case ST_NumberFormatJapaneseLegal:
		_fcgcb.Value = "japaneseLegal"
	case ST_NumberFormatJapaneseDigitalTenThousand:
		_fcgcb.Value = "japaneseDigitalTenThousand"
	case ST_NumberFormatDecimalEnclosedCircle:
		_fcgcb.Value = "decimalEnclosedCircle"
	case ST_NumberFormatDecimalFullWidth2:
		_fcgcb.Value = "decimalFullWidth2"
	case ST_NumberFormatAiueoFullWidth:
		_fcgcb.Value = "aiueoFullWidth"
	case ST_NumberFormatIrohaFullWidth:
		_fcgcb.Value = "irohaFullWidth"
	case ST_NumberFormatDecimalZero:
		_fcgcb.Value = "decimalZero"
	case ST_NumberFormatBullet:
		_fcgcb.Value = "bullet"
	case ST_NumberFormatGanada:
		_fcgcb.Value = "ganada"
	case ST_NumberFormatChosung:
		_fcgcb.Value = "chosung"
	case ST_NumberFormatDecimalEnclosedFullstop:
		_fcgcb.Value = "decimalEnclosedFullstop"
	case ST_NumberFormatDecimalEnclosedParen:
		_fcgcb.Value = "decimalEnclosedParen"
	case ST_NumberFormatDecimalEnclosedCircleChinese:
		_fcgcb.Value = "decimalEnclosedCircleChinese"
	case ST_NumberFormatIdeographEnclosedCircle:
		_fcgcb.Value = "ideographEnclosedCircle"
	case ST_NumberFormatIdeographTraditional:
		_fcgcb.Value = "ideographTraditional"
	case ST_NumberFormatIdeographZodiac:
		_fcgcb.Value = "ideographZodiac"
	case ST_NumberFormatIdeographZodiacTraditional:
		_fcgcb.Value = "ideographZodiacTraditional"
	case ST_NumberFormatTaiwaneseCounting:
		_fcgcb.Value = "taiwaneseCounting"
	case ST_NumberFormatIdeographLegalTraditional:
		_fcgcb.Value = "ideographLegalTraditional"
	case ST_NumberFormatTaiwaneseCountingThousand:
		_fcgcb.Value = "taiwaneseCountingThousand"
	case ST_NumberFormatTaiwaneseDigital:
		_fcgcb.Value = "taiwaneseDigital"
	case ST_NumberFormatChineseCounting:
		_fcgcb.Value = "chineseCounting"
	case ST_NumberFormatChineseLegalSimplified:
		_fcgcb.Value = "chineseLegalSimplified"
	case ST_NumberFormatChineseCountingThousand:
		_fcgcb.Value = "chineseCountingThousand"
	case ST_NumberFormatKoreanDigital:
		_fcgcb.Value = "koreanDigital"
	case ST_NumberFormatKoreanCounting:
		_fcgcb.Value = "koreanCounting"
	case ST_NumberFormatKoreanLegal:
		_fcgcb.Value = "koreanLegal"
	case ST_NumberFormatKoreanDigital2:
		_fcgcb.Value = "koreanDigital2"
	case ST_NumberFormatVietnameseCounting:
		_fcgcb.Value = "vietnameseCounting"
	case ST_NumberFormatRussianLower:
		_fcgcb.Value = "russianLower"
	case ST_NumberFormatRussianUpper:
		_fcgcb.Value = "russianUpper"
	case ST_NumberFormatNone:
		_fcgcb.Value = "none"
	case ST_NumberFormatNumberInDash:
		_fcgcb.Value = "numberInDash"
	case ST_NumberFormatHebrew1:
		_fcgcb.Value = "hebrew1"
	case ST_NumberFormatHebrew2:
		_fcgcb.Value = "hebrew2"
	case ST_NumberFormatArabicAlpha:
		_fcgcb.Value = "arabicAlpha"
	case ST_NumberFormatArabicAbjad:
		_fcgcb.Value = "arabicAbjad"
	case ST_NumberFormatHindiVowels:
		_fcgcb.Value = "hindiVowels"
	case ST_NumberFormatHindiConsonants:
		_fcgcb.Value = "hindiConsonants"
	case ST_NumberFormatHindiNumbers:
		_fcgcb.Value = "hindiNumbers"
	case ST_NumberFormatHindiCounting:
		_fcgcb.Value = "hindiCounting"
	case ST_NumberFormatThaiLetters:
		_fcgcb.Value = "thaiLetters"
	case ST_NumberFormatThaiNumbers:
		_fcgcb.Value = "thaiNumbers"
	case ST_NumberFormatThaiCounting:
		_fcgcb.Value = "thaiCounting"
	case ST_NumberFormatBahtText:
		_fcgcb.Value = "bahtText"
	case ST_NumberFormatDollarText:
		_fcgcb.Value = "dollarText"
	case ST_NumberFormatCustom:
		_fcgcb.Value = "custom"
	}
	return _fcgcb, nil
}

type CT_Footnotes struct {

	// Footnote Content
	Footnote []*CT_FtnEdn
}

// Validate validates the CT_R and its children
func (_cdaga *CT_R) Validate() error { return _cdaga.ValidateWithPath("CT_R") }
func (_bbdbfe *CT_PermStart) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbdbfe.EdGrpAttr != ST_EdGrpUnset {
		_becag, _efcaa := _bbdbfe.EdGrpAttr.MarshalXMLAttr(_d.Name{Local: "w:edGrp"})
		if _efcaa != nil {
			return _efcaa
		}
		start.Attr = append(start.Attr, _becag)
	}
	if _bbdbfe.EdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:ed"}, Value: _b.Sprintf("\u0025v", *_bbdbfe.EdAttr)})
	}
	if _bbdbfe.ColFirstAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colFirst"}, Value: _b.Sprintf("\u0025v", *_bbdbfe.ColFirstAttr)})
	}
	if _bbdbfe.ColLastAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colLast"}, Value: _b.Sprintf("\u0025v", *_bbdbfe.ColLastAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _bbdbfe.IdAttr)})
	if _bbdbfe.DisplacedByCustomXmlAttr != ST_DisplacedByCustomXmlUnset {
		_eabfd, _ecega := _bbdbfe.DisplacedByCustomXmlAttr.MarshalXMLAttr(_d.Name{Local: "w:displacedByCustomXml"})
		if _ecega != nil {
			return _ecega
		}
		start.Attr = append(start.Attr, _eabfd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_LevelSuffix() *CT_LevelSuffix {
	_faaad := &CT_LevelSuffix{}
	_faaad.ValAttr = ST_LevelSuffix(1)
	return _faaad
}
func NewCT_SaveThroughXslt() *CT_SaveThroughXslt  { _cdaca := &CT_SaveThroughXslt{}; return _cdaca }
func (_ecaed ST_LineSpacingRule) Validate() error { return _ecaed.ValidateWithPath("") }
func (_gfefeb ST_HAnchor) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cgcda := _d.Attr{}
	_cgcda.Name = name
	switch _gfefeb {
	case ST_HAnchorUnset:
		_cgcda.Value = ""
	case ST_HAnchorText:
		_cgcda.Value = "text"
	case ST_HAnchorMargin:
		_cgcda.Value = "margin"
	case ST_HAnchorPage:
		_cgcda.Value = "page"
	}
	return _cgcda, nil
}
func (_bgadd *CT_FtnDocProps) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bgadd.Pos != nil {
		_adfba := _d.StartElement{Name: _d.Name{Local: "w:pos"}}
		e.EncodeElement(_bgadd.Pos, _adfba)
	}
	if _bgadd.NumFmt != nil {
		_babbd := _d.StartElement{Name: _d.Name{Local: "w:numFmt"}}
		e.EncodeElement(_bgadd.NumFmt, _babbd)
	}
	if _bgadd.NumStart != nil {
		_ceadg := _d.StartElement{Name: _d.Name{Local: "w:numStart"}}
		e.EncodeElement(_bgadd.NumStart, _ceadg)
	}
	if _bgadd.NumRestart != nil {
		_cggac := _d.StartElement{Name: _d.Name{Local: "w:numRestart"}}
		e.EncodeElement(_bgadd.NumRestart, _cggac)
	}
	if _bgadd.Footnote != nil {
		_agfgg := _d.StartElement{Name: _d.Name{Local: "w:footnote"}}
		for _, _eeaga := range _bgadd.Footnote {
			e.EncodeElement(_eeaga, _agfgg)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_SdtDateMappingType and its children
func (_ffecee *CT_SdtDateMappingType) Validate() error {
	return _ffecee.ValidateWithPath("CT_SdtDateMappingType")
}

type ST_TblStyleOverrideType byte

func (_gadbed ST_Underline) Validate() error { return _gadbed.ValidateWithPath("") }
func (_bfegdd ST_PageOrientation) ValidateWithPath(path string) error {
	switch _bfegdd {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_bfegdd))
	}
	return nil
}
func (_fbeage ST_DocPartBehavior) ValidateWithPath(path string) error {
	switch _fbeage {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fbeage))
	}
	return nil
}
func NewCT_PPrDefault() *CT_PPrDefault { _faag := &CT_PPrDefault{}; return _faag }
func NewCT_PageSz() *CT_PageSz         { _edfeeb := &CT_PageSz{}; return _edfeeb }

// Validate validates the CT_DocGrid and its children
func (_fbfdd *CT_DocGrid) Validate() error { return _fbfdd.ValidateWithPath("CT_DocGrid") }

// ValidateWithPath validates the CT_CustomXmlBlock and its children, prefixing error messages with path
func (_dedec *CT_CustomXmlBlock) ValidateWithPath(path string) error {
	if _dedec.CustomXmlPr != nil {
		if _ggeac := _dedec.CustomXmlPr.ValidateWithPath(path + "\u002fCustomXmlPr"); _ggeac != nil {
			return _ggeac
		}
	}
	for _gffeg, _ebge := range _dedec.EG_ContentBlockContent {
		if _fbeg := _ebge.ValidateWithPath(_b.Sprintf("\u0025s/EG_ContentBlockContent[%d\u005d", path, _gffeg)); _fbeg != nil {
			return _fbeg
		}
	}
	return nil
}
func (_egfcac ST_TextEffect) Validate() error { return _egfcac.ValidateWithPath("") }
func (_becgc ST_Merge) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_becgc.String(), start)
}

// ST_DecimalNumberOrPercent is a union type
type ST_DecimalNumberOrPercent struct {
	ST_UnqualifiedPercentage *int64
	ST_Percentage            *string
}

func NewCT_ParaRPrOriginal() *CT_ParaRPrOriginal { _addcgd := &CT_ParaRPrOriginal{}; return _addcgd }
func (_dddafd *CT_TblPrExChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dddafd.TblPrEx = NewCT_TblPrExBase()
	for _, _aafcfcd := range start.Attr {
		if _aafcfcd.Name.Local == "author" {
			_bgcdbg, _ecdcb := _aafcfcd.Value, error(nil)
			if _ecdcb != nil {
				return _ecdcb
			}
			_dddafd.AuthorAttr = _bgcdbg
			continue
		}
		if _aafcfcd.Name.Local == "date" {
			_dbeecb, _bbacb := ParseStdlibTime(_aafcfcd.Value)
			if _bbacb != nil {
				return _bbacb
			}
			_dddafd.DateAttr = &_dbeecb
			continue
		}
		if _aafcfcd.Name.Local == "id" {
			_abaae, _gddgg := _dd.ParseInt(_aafcfcd.Value, 10, 64)
			if _gddgg != nil {
				return _gddgg
			}
			_dddafd.IdAttr = _abaae
			continue
		}
	}
_fefed:
	for {
		_gbcfb, _fdadfb := d.Token()
		if _fdadfb != nil {
			return _fdadfb
		}
		switch _dadce := _gbcfb.(type) {
		case _d.StartElement:
			switch _dadce.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPrEx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPrEx"}:
				if _cggcefa := d.DecodeElement(_dddafd.TblPrEx, &_dadce); _cggcefa != nil {
					return _cggcefa
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TblPrExChange\u0020\u0025v", _dadce.Name)
				if _edgfag := d.Skip(); _edgfag != nil {
					return _edgfag
				}
			}
		case _d.EndElement:
			break _fefed
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_TblBorders() *CT_TblBorders { _becege := &CT_TblBorders{}; return _becege }

// ValidateWithPath validates the CT_FontsList and its children, prefixing error messages with path
func (_effg *CT_FontsList) ValidateWithPath(path string) error {
	for _ccefd, _aacga := range _effg.Font {
		if _gfeab := _aacga.ValidateWithPath(_b.Sprintf("%s\u002fFont\u005b\u0025d\u005d", path, _ccefd)); _gfeab != nil {
			return _gfeab
		}
	}
	return nil
}
func (_feaeg *CT_TrackChangesView) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _agabb := range start.Attr {
		if _agabb.Name.Local == "markup" {
			_feecg, _eggbdd := ParseUnionST_OnOff(_agabb.Value)
			if _eggbdd != nil {
				return _eggbdd
			}
			_feaeg.MarkupAttr = &_feecg
			continue
		}
		if _agabb.Name.Local == "comments" {
			_agabe, _eadbfd := ParseUnionST_OnOff(_agabb.Value)
			if _eadbfd != nil {
				return _eadbfd
			}
			_feaeg.CommentsAttr = &_agabe
			continue
		}
		if _agabb.Name.Local == "insDel" {
			_bcege, _edaba := ParseUnionST_OnOff(_agabb.Value)
			if _edaba != nil {
				return _edaba
			}
			_feaeg.InsDelAttr = &_bcege
			continue
		}
		if _agabb.Name.Local == "formatting" {
			_fbefc, _bebcb := ParseUnionST_OnOff(_agabb.Value)
			if _bebcb != nil {
				return _bebcb
			}
			_feaeg.FormattingAttr = &_fbefc
			continue
		}
		if _agabb.Name.Local == "inkAnnotations" {
			_dggcc, _afeae := ParseUnionST_OnOff(_agabb.Value)
			if _afeae != nil {
				return _afeae
			}
			_feaeg.InkAnnotationsAttr = &_dggcc
			continue
		}
	}
	for {
		_bfdcc, _decac := d.Token()
		if _decac != nil {
			return _b.Errorf("parsing\u0020CT_TrackChangesView:\u0020\u0025s", _decac)
		}
		if _edcgee, _fedbf := _bfdcc.(_d.EndElement); _fedbf && _edcgee.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ddaadd ST_FtnEdn) String() string {
	switch _ddaadd {
	case 0:
		return ""
	case 1:
		return "normal"
	case 2:
		return "separator"
	case 3:
		return "continuationSeparator"
	case 4:
		return "continuationNotice"
	}
	return ""
}
func (_fdfdb *CT_HdrFtrRef) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fdfdb.TypeAttr = ST_HdrFtr(1)
	for _, _fbecg := range start.Attr {
		if _fbecg.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _fbecg.Name.Local == "id" || _fbecg.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _fbecg.Name.Local == "id" {
			_ddgbc, _fgad := _fbecg.Value, error(nil)
			if _fgad != nil {
				return _fgad
			}
			_fdfdb.IdAttr = _ddgbc
			continue
		}
		if _fbecg.Name.Local == "type" {
			_fdfdb.TypeAttr.UnmarshalXMLAttr(_fbecg)
			continue
		}
	}
	for {
		_dbaggg, _aafbg := d.Token()
		if _aafbg != nil {
			return _b.Errorf("parsing\u0020CT_HdrFtrRef:\u0020\u0025s", _aafbg)
		}
		if _addec, _cdfae := _dbaggg.(_d.EndElement); _cdfae && _addec.Name == start.Name {
			break
		}
	}
	return nil
}
func (_babaa ST_WmlColorSchemeIndex) String() string {
	switch _babaa {
	case 0:
		return ""
	case 1:
		return "dark1"
	case 2:
		return "light1"
	case 3:
		return "dark2"
	case 4:
		return "light2"
	case 5:
		return "accent1"
	case 6:
		return "accent2"
	case 7:
		return "accent3"
	case 8:
		return "accent4"
	case 9:
		return "accent5"
	case 10:
		return "accent6"
	case 11:
		return "hyperlink"
	case 12:
		return "followedHyperlink"
	}
	return ""
}
func (_effeed ST_Theme) Validate() error { return _effeed.ValidateWithPath("") }
func (_gdabg *CT_SdtPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gdabg.RPr != nil {
		_aageb := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_gdabg.RPr, _aageb)
	}
	if _gdabg.Alias != nil {
		_efcbg := _d.StartElement{Name: _d.Name{Local: "w:alias"}}
		e.EncodeElement(_gdabg.Alias, _efcbg)
	}
	if _gdabg.Tag != nil {
		_ggecb := _d.StartElement{Name: _d.Name{Local: "w:tag"}}
		e.EncodeElement(_gdabg.Tag, _ggecb)
	}
	if _gdabg.Id != nil {
		_ffegb := _d.StartElement{Name: _d.Name{Local: "w:id"}}
		e.EncodeElement(_gdabg.Id, _ffegb)
	}
	if _gdabg.Lock != nil {
		_gddga := _d.StartElement{Name: _d.Name{Local: "w:lock"}}
		e.EncodeElement(_gdabg.Lock, _gddga)
	}
	if _gdabg.Placeholder != nil {
		_gcaee := _d.StartElement{Name: _d.Name{Local: "w:placeholder"}}
		e.EncodeElement(_gdabg.Placeholder, _gcaee)
	}
	if _gdabg.Temporary != nil {
		_dbgba := _d.StartElement{Name: _d.Name{Local: "w:temporary"}}
		e.EncodeElement(_gdabg.Temporary, _dbgba)
	}
	if _gdabg.ShowingPlcHdr != nil {
		_abffd := _d.StartElement{Name: _d.Name{Local: "w:showingPlcHdr"}}
		e.EncodeElement(_gdabg.ShowingPlcHdr, _abffd)
	}
	if _gdabg.DataBinding != nil {
		_aaggf := _d.StartElement{Name: _d.Name{Local: "w:dataBinding"}}
		e.EncodeElement(_gdabg.DataBinding, _aaggf)
	}
	if _gdabg.Label != nil {
		_ccceead := _d.StartElement{Name: _d.Name{Local: "w:label"}}
		e.EncodeElement(_gdabg.Label, _ccceead)
	}
	if _gdabg.TabIndex != nil {
		_fdfde := _d.StartElement{Name: _d.Name{Local: "w:tabIndex"}}
		e.EncodeElement(_gdabg.TabIndex, _fdfde)
	}
	if _gdabg.Choice != nil {
		_gdabg.Choice.MarshalXML(e, _d.StartElement{})
	}
	for _, _dcfage := range _gdabg.Extra {
		if _abgdd := _dcfage.MarshalXML(e, _d.StartElement{}); _abgdd != nil {
			return _abgdd
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_Charset() *CT_Charset { _caag := &CT_Charset{}; return _caag }
func (_cffc *CT_DocVar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _cffc.NameAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _cffc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ffgfge ST_PTabRelativeTo) String() string {
	switch _ffgfge {
	case 0:
		return ""
	case 1:
		return "margin"
	case 2:
		return "indent"
	}
	return ""
}
func (_dbcgg *CT_Lang) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ecgcc := range start.Attr {
		if _ecgcc.Name.Local == "val" {
			_aedg, _ecccg := _ecgcc.Value, error(nil)
			if _ecccg != nil {
				return _ecccg
			}
			_dbcgg.ValAttr = _aedg
			continue
		}
	}
	for {
		_gabee, _bafd := d.Token()
		if _bafd != nil {
			return _b.Errorf("parsing\u0020CT_Lang:\u0020\u0025s", _bafd)
		}
		if _fdbbd, _egbcb := _gabee.(_d.EndElement); _egbcb && _fdbbd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aeeegb *CT_SdtContentRow) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _aeeegb.Tr != nil {
		_ccceffe := _d.StartElement{Name: _d.Name{Local: "w:tr"}}
		for _, _gbccb := range _aeeegb.Tr {
			e.EncodeElement(_gbccb, _ccceffe)
		}
	}
	if _aeeegb.CustomXml != nil {
		_bebbdff := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_aeeegb.CustomXml, _bebbdff)
	}
	if _aeeegb.Sdt != nil {
		_gbbg := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_aeeegb.Sdt, _gbbg)
	}
	if _aeeegb.EG_RunLevelElts != nil {
		for _, _cbgbb := range _aeeegb.EG_RunLevelElts {
			_cbgbb.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_febfb ST_HAnchor) String() string {
	switch _febfb {
	case 0:
		return ""
	case 1:
		return "text"
	case 2:
		return "margin"
	case 3:
		return "page"
	}
	return ""
}

type EG_FtnEdnNumProps struct {

	// Footnote and Endnote Numbering Starting Value
	NumStart *CT_DecimalNumber

	// Footnote and Endnote Numbering Restart Location
	NumRestart *CT_NumRestart
}

func (_adccaf *CT_TcPrChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _adccaf.AuthorAttr)})
	if _adccaf.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_adccaf.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _adccaf.IdAttr)})
	e.EncodeToken(start)
	_cgcbbb := _d.StartElement{Name: _d.Name{Local: "w:tcPr"}}
	e.EncodeElement(_adccaf.TcPr, _cgcbbb)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_FtnProps and its children
func (_adgcc *CT_FtnProps) Validate() error { return _adgcc.ValidateWithPath("CT_FtnProps") }

// Validate validates the CT_TrackChange and its children
func (_dbfec *CT_TrackChange) Validate() error { return _dbfec.ValidateWithPath("CT_TrackChange") }

type CT_OptimizeForBrowser struct {
	TargetAttr *string

	// On/Off Value
	ValAttr *_g.ST_OnOff
}
type CT_SdtPr struct {

	// Run Properties For Structured Document Tag Contents
	RPr *CT_RPr

	// Friendly Name
	Alias *CT_String

	// Programmatic Tag
	Tag *CT_String

	// Unique ID
	Id *CT_DecimalNumber

	// Locking Setting
	Lock *CT_Lock

	// Structured Document Tag Placeholder Text
	Placeholder *CT_Placeholder

	// Remove Structured Document Tag When Contents Are Edited
	Temporary *CT_OnOff

	// Current Contents Are Placeholder Text
	ShowingPlcHdr *CT_OnOff

	// XML Mapping
	DataBinding *CT_DataBinding

	// Structured Document Tag Label
	Label *CT_DecimalNumber

	// Structured Document Tag Navigation Order Index
	TabIndex *CT_UnsignedDecimalNumber
	Choice   *CT_SdtPrChoice
	Extra    []_ga.Any
}

func NewCT_OnOff() *CT_OnOff { _fdaef := &CT_OnOff{}; return _fdaef }

type WdCT_PosH struct {
	RelativeFromAttr WdST_RelFromH
	Choice           *WdCT_PosHChoice
}

// ValidateWithPath validates the CT_RubyPr and its children, prefixing error messages with path
func (_dddce *CT_RubyPr) ValidateWithPath(path string) error {
	if _gecgg := _dddce.RubyAlign.ValidateWithPath(path + "\u002fRubyAlign"); _gecgg != nil {
		return _gecgg
	}
	if _fbfddd := _dddce.Hps.ValidateWithPath(path + "\u002fHps"); _fbfddd != nil {
		return _fbfddd
	}
	if _cafdf := _dddce.HpsRaise.ValidateWithPath(path + "\u002fHpsRaise"); _cafdf != nil {
		return _cafdf
	}
	if _cegcf := _dddce.HpsBaseText.ValidateWithPath(path + "\u002fHpsBaseText"); _cegcf != nil {
		return _cegcf
	}
	if _fcdbd := _dddce.Lid.ValidateWithPath(path + "\u002fLid"); _fcdbd != nil {
		return _fcdbd
	}
	if _dddce.Dirty != nil {
		if _gecbg := _dddce.Dirty.ValidateWithPath(path + "\u002fDirty"); _gecbg != nil {
			return _gecbg
		}
	}
	return nil
}
func (_ccgedf *EG_RPrMath) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Name.Local = "w:EG_RPrMath"
	if _ccgedf.Ins != nil {
		_gdefe := _d.StartElement{Name: _d.Name{Local: "w:ins"}}
		e.EncodeElement(_ccgedf.Ins, _gdefe)
	}
	if _ccgedf.Del != nil {
		_ggdea := _d.StartElement{Name: _d.Name{Local: "w:del"}}
		e.EncodeElement(_ccgedf.Del, _ggdea)
	}
	if _ccgedf.RPr != nil {
		_gdagd := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_ccgedf.RPr, _gdagd)
	}
	return nil
}

type WdCT_GraphicFrame struct {
	CNvPr   *_eb.CT_NonVisualDrawingProps
	CNvFrPr *_eb.CT_NonVisualGraphicFrameProperties
	Xfrm    *_eb.CT_Transform2D
	Graphic *_eb.Graphic
	ExtLst  *_eb.CT_OfficeArtExtensionList
}

func (_dddga *CT_Height) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ccabc := range start.Attr {
		if _ccabc.Name.Local == "val" {
			_cfeabg, _begb := ParseUnionST_TwipsMeasure(_ccabc.Value)
			if _begb != nil {
				return _begb
			}
			_dddga.ValAttr = &_cfeabg
			continue
		}
		if _ccabc.Name.Local == "hRule" {
			_dddga.HRuleAttr.UnmarshalXMLAttr(_ccabc)
			continue
		}
	}
	for {
		_cbebc, _deecb := d.Token()
		if _deecb != nil {
			return _b.Errorf("parsing\u0020CT_Height:\u0020\u0025s", _deecb)
		}
		if _ffga, _badc := _cbebc.(_d.EndElement); _badc && _ffga.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Document and its children
func (_agab *CT_Document) Validate() error { return _agab.ValidateWithPath("CT_Document") }
func (_addb *CT_Row) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _addb.RsidRPrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidRPr"}, Value: _b.Sprintf("\u0025v", *_addb.RsidRPrAttr)})
	}
	if _addb.RsidRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidR"}, Value: _b.Sprintf("\u0025v", *_addb.RsidRAttr)})
	}
	if _addb.RsidDelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidDel"}, Value: _b.Sprintf("\u0025v", *_addb.RsidDelAttr)})
	}
	if _addb.RsidTrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidTr"}, Value: _b.Sprintf("\u0025v", *_addb.RsidTrAttr)})
	}
	e.EncodeToken(start)
	if _addb.TblPrEx != nil {
		_gfbed := _d.StartElement{Name: _d.Name{Local: "w:tblPrEx"}}
		e.EncodeElement(_addb.TblPrEx, _gfbed)
	}
	if _addb.TrPr != nil {
		_dgcec := _d.StartElement{Name: _d.Name{Local: "w:trPr"}}
		e.EncodeElement(_addb.TrPr, _dgcec)
	}
	if _addb.EG_ContentCellContent != nil {
		for _, _gdgcc := range _addb.EG_ContentCellContent {
			_gdgcc.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PPrBase and its children, prefixing error messages with path
func (_bcgcec *CT_PPrBase) ValidateWithPath(path string) error {
	if _bcgcec.PStyle != nil {
		if _beed := _bcgcec.PStyle.ValidateWithPath(path + "\u002fPStyle"); _beed != nil {
			return _beed
		}
	}
	if _bcgcec.KeepNext != nil {
		if _gdccc := _bcgcec.KeepNext.ValidateWithPath(path + "\u002fKeepNext"); _gdccc != nil {
			return _gdccc
		}
	}
	if _bcgcec.KeepLines != nil {
		if _edbcf := _bcgcec.KeepLines.ValidateWithPath(path + "\u002fKeepLines"); _edbcf != nil {
			return _edbcf
		}
	}
	if _bcgcec.PageBreakBefore != nil {
		if _eeede := _bcgcec.PageBreakBefore.ValidateWithPath(path + "\u002fPageBreakBefore"); _eeede != nil {
			return _eeede
		}
	}
	if _bcgcec.FramePr != nil {
		if _cgbfad := _bcgcec.FramePr.ValidateWithPath(path + "\u002fFramePr"); _cgbfad != nil {
			return _cgbfad
		}
	}
	if _bcgcec.WidowControl != nil {
		if _abggb := _bcgcec.WidowControl.ValidateWithPath(path + "\u002fWidowControl"); _abggb != nil {
			return _abggb
		}
	}
	if _bcgcec.NumPr != nil {
		if _bgbaab := _bcgcec.NumPr.ValidateWithPath(path + "\u002fNumPr"); _bgbaab != nil {
			return _bgbaab
		}
	}
	if _bcgcec.SuppressLineNumbers != nil {
		if _bcddd := _bcgcec.SuppressLineNumbers.ValidateWithPath(path + "/SuppressLineNumbers"); _bcddd != nil {
			return _bcddd
		}
	}
	if _bcgcec.PBdr != nil {
		if _fbedc := _bcgcec.PBdr.ValidateWithPath(path + "\u002fPBdr"); _fbedc != nil {
			return _fbedc
		}
	}
	if _bcgcec.Shd != nil {
		if _eccgb := _bcgcec.Shd.ValidateWithPath(path + "\u002fShd"); _eccgb != nil {
			return _eccgb
		}
	}
	if _bcgcec.Tabs != nil {
		if _cceg := _bcgcec.Tabs.ValidateWithPath(path + "\u002fTabs"); _cceg != nil {
			return _cceg
		}
	}
	if _bcgcec.SuppressAutoHyphens != nil {
		if _bcdfd := _bcgcec.SuppressAutoHyphens.ValidateWithPath(path + "/SuppressAutoHyphens"); _bcdfd != nil {
			return _bcdfd
		}
	}
	if _bcgcec.Kinsoku != nil {
		if _addcf := _bcgcec.Kinsoku.ValidateWithPath(path + "\u002fKinsoku"); _addcf != nil {
			return _addcf
		}
	}
	if _bcgcec.WordWrap != nil {
		if _bbebe := _bcgcec.WordWrap.ValidateWithPath(path + "\u002fWordWrap"); _bbebe != nil {
			return _bbebe
		}
	}
	if _bcgcec.OverflowPunct != nil {
		if _eeege := _bcgcec.OverflowPunct.ValidateWithPath(path + "\u002fOverflowPunct"); _eeege != nil {
			return _eeege
		}
	}
	if _bcgcec.TopLinePunct != nil {
		if _ecdfb := _bcgcec.TopLinePunct.ValidateWithPath(path + "\u002fTopLinePunct"); _ecdfb != nil {
			return _ecdfb
		}
	}
	if _bcgcec.AutoSpaceDE != nil {
		if _gfcc := _bcgcec.AutoSpaceDE.ValidateWithPath(path + "\u002fAutoSpaceDE"); _gfcc != nil {
			return _gfcc
		}
	}
	if _bcgcec.AutoSpaceDN != nil {
		if _bgaa := _bcgcec.AutoSpaceDN.ValidateWithPath(path + "\u002fAutoSpaceDN"); _bgaa != nil {
			return _bgaa
		}
	}
	if _bcgcec.Bidi != nil {
		if _fgfbb := _bcgcec.Bidi.ValidateWithPath(path + "\u002fBidi"); _fgfbb != nil {
			return _fgfbb
		}
	}
	if _bcgcec.AdjustRightInd != nil {
		if _daggf := _bcgcec.AdjustRightInd.ValidateWithPath(path + "\u002fAdjustRightInd"); _daggf != nil {
			return _daggf
		}
	}
	if _bcgcec.SnapToGrid != nil {
		if _efbggd := _bcgcec.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _efbggd != nil {
			return _efbggd
		}
	}
	if _bcgcec.Spacing != nil {
		if _cccgg := _bcgcec.Spacing.ValidateWithPath(path + "\u002fSpacing"); _cccgg != nil {
			return _cccgg
		}
	}
	if _bcgcec.Ind != nil {
		if _ggccd := _bcgcec.Ind.ValidateWithPath(path + "\u002fInd"); _ggccd != nil {
			return _ggccd
		}
	}
	if _bcgcec.ContextualSpacing != nil {
		if _egede := _bcgcec.ContextualSpacing.ValidateWithPath(path + "\u002fContextualSpacing"); _egede != nil {
			return _egede
		}
	}
	if _bcgcec.MirrorIndents != nil {
		if _bcgde := _bcgcec.MirrorIndents.ValidateWithPath(path + "\u002fMirrorIndents"); _bcgde != nil {
			return _bcgde
		}
	}
	if _bcgcec.SuppressOverlap != nil {
		if _bdeaad := _bcgcec.SuppressOverlap.ValidateWithPath(path + "\u002fSuppressOverlap"); _bdeaad != nil {
			return _bdeaad
		}
	}
	if _bcgcec.Jc != nil {
		if _dggfe := _bcgcec.Jc.ValidateWithPath(path + "\u002fJc"); _dggfe != nil {
			return _dggfe
		}
	}
	if _bcgcec.TextDirection != nil {
		if _fabee := _bcgcec.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _fabee != nil {
			return _fabee
		}
	}
	if _bcgcec.TextAlignment != nil {
		if _debg := _bcgcec.TextAlignment.ValidateWithPath(path + "\u002fTextAlignment"); _debg != nil {
			return _debg
		}
	}
	if _bcgcec.TextboxTightWrap != nil {
		if _cdacf := _bcgcec.TextboxTightWrap.ValidateWithPath(path + "\u002fTextboxTightWrap"); _cdacf != nil {
			return _cdacf
		}
	}
	if _bcgcec.OutlineLvl != nil {
		if _bgcbac := _bcgcec.OutlineLvl.ValidateWithPath(path + "/OutlineLvl"); _bgcbac != nil {
			return _bgcbac
		}
	}
	if _bcgcec.DivId != nil {
		if _dbade := _bcgcec.DivId.ValidateWithPath(path + "\u002fDivId"); _dbade != nil {
			return _dbade
		}
	}
	if _bcgcec.CnfStyle != nil {
		if _bdbbe := _bcgcec.CnfStyle.ValidateWithPath(path + "\u002fCnfStyle"); _bdbbe != nil {
			return _bdbbe
		}
	}
	return nil
}
func (_gebfg ST_Jc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gebfg.String(), start)
}
func (_beggfe *WdCT_TextboxInfo) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _beggfe.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "id"}, Value: _b.Sprintf("\u0025v", *_beggfe.IdAttr)})
	}
	e.EncodeToken(start)
	_gccdbf := _d.StartElement{Name: _d.Name{Local: "w:txbxContent"}}
	e.EncodeElement(_beggfe.TxbxContent, _gccdbf)
	if _beggfe.ExtLst != nil {
		_acdfb := _d.StartElement{Name: _d.Name{Local: "wp:extLst"}}
		e.EncodeElement(_beggfe.ExtLst, _acdfb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_egfdd *CT_JcTable) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_egfdd.ValAttr = ST_JcTable(1)
	for _, _dageg := range start.Attr {
		if _dageg.Name.Local == "val" {
			_egfdd.ValAttr.UnmarshalXMLAttr(_dageg)
			continue
		}
	}
	for {
		_dddca, _bfdcd := d.Token()
		if _bfdcd != nil {
			return _b.Errorf("parsing\u0020CT_JcTable:\u0020%s", _bfdcd)
		}
		if _befcg, _ffcga := _dddca.(_d.EndElement); _ffcga && _befcg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cfdf *CT_ObjectLink) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_ccbde, _dbfd := _cfdf.UpdateModeAttr.MarshalXMLAttr(_d.Name{Local: "w:updateMode"})
	if _dbfd != nil {
		return _dbfd
	}
	start.Attr = append(start.Attr, _ccbde)
	if _cfdf.LockedFieldAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lockedField"}, Value: _b.Sprintf("\u0025v", *_cfdf.LockedFieldAttr)})
	}
	if _cfdf.DrawAspectAttr != ST_ObjectDrawAspectUnset {
		_edfb, _agcdd := _cfdf.DrawAspectAttr.MarshalXMLAttr(_d.Name{Local: "w:drawAspect"})
		if _agcdd != nil {
			return _agcdd
		}
		start.Attr = append(start.Attr, _edfb)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", _cfdf.IdAttr)})
	if _cfdf.ProgIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:progId"}, Value: _b.Sprintf("\u0025v", *_cfdf.ProgIdAttr)})
	}
	if _cfdf.ShapeIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:shapeId"}, Value: _b.Sprintf("\u0025v", *_cfdf.ShapeIdAttr)})
	}
	if _cfdf.FieldCodesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fieldCodes"}, Value: _b.Sprintf("\u0025v", *_cfdf.FieldCodesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Numbering and its children, prefixing error messages with path
func (_dcefa *CT_Numbering) ValidateWithPath(path string) error {
	for _bbcff, _gffc := range _dcefa.NumPicBullet {
		if _cabcc := _gffc.ValidateWithPath(_b.Sprintf("\u0025s\u002fNumPicBullet\u005b\u0025d\u005d", path, _bbcff)); _cabcc != nil {
			return _cabcc
		}
	}
	for _bgdbf, _ggccf := range _dcefa.AbstractNum {
		if _ddafa := _ggccf.ValidateWithPath(_b.Sprintf("\u0025s\u002fAbstractNum\u005b\u0025d\u005d", path, _bgdbf)); _ddafa != nil {
			return _ddafa
		}
	}
	for _abdd, _cfefa := range _dcefa.Num {
		if _cgea := _cfefa.ValidateWithPath(_b.Sprintf("\u0025s\u002fNum\u005b\u0025d\u005d", path, _abdd)); _cgea != nil {
			return _cgea
		}
	}
	if _dcefa.NumIdMacAtCleanup != nil {
		if _cecca := _dcefa.NumIdMacAtCleanup.ValidateWithPath(path + "\u002fNumIdMacAtCleanup"); _cecca != nil {
			return _cecca
		}
	}
	return nil
}
func (_ffefd ST_Underline) ValidateWithPath(path string) error {
	switch _ffefd {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ffefd))
	}
	return nil
}
func NewComments() *Comments {
	_bcbbe := &Comments{}
	_bcbbe.CT_Comments = *NewCT_Comments()
	return _bcbbe
}

// ValidateWithPath validates the CT_DecimalNumberOrPrecent and its children, prefixing error messages with path
func (_fgca *CT_DecimalNumberOrPrecent) ValidateWithPath(path string) error {
	if _aede := _fgca.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _aede != nil {
		return _aede
	}
	return nil
}

// Validate validates the CT_PageSz and its children
func (_cbfbe *CT_PageSz) Validate() error { return _cbfbe.ValidateWithPath("CT_PageSz") }
func (_gagcac *CT_RubyContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gagcac.R != nil {
		_gdbeda := _d.StartElement{Name: _d.Name{Local: "w:r"}}
		e.EncodeElement(_gagcac.R, _gdbeda)
	}
	if _gagcac.EG_RunLevelElts != nil {
		for _, _cdfgf := range _gagcac.EG_RunLevelElts {
			_cdfgf.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fbfed ST_PageBorderZOrder) String() string {
	switch _fbfed {
	case 0:
		return ""
	case 1:
		return "front"
	case 2:
		return "back"
	}
	return ""
}
func (_bcad *CT_SectPrChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _bcad.AuthorAttr)})
	if _bcad.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_bcad.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _bcad.IdAttr)})
	e.EncodeToken(start)
	if _bcad.SectPr != nil {
		_aaabd := _d.StartElement{Name: _d.Name{Local: "w:sectPr"}}
		e.EncodeElement(_bcad.SectPr, _aaabd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_abcba ST_MailMergeSourceType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_abcba.String(), start)
}
func (_abdbdd *ST_HdrFtr) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_abdbdd = 0
	case "even":
		*_abdbdd = 1
	case "default":
		*_abdbdd = 2
	case "first":
		*_abdbdd = 3
	}
	return nil
}

type CT_MailMergeSourceType struct {

	// Data Source Type Value
	ValAttr ST_MailMergeSourceType
}

const (
	ST_LockUnset            ST_Lock = 0
	ST_LockSdtLocked        ST_Lock = 1
	ST_LockContentLocked    ST_Lock = 2
	ST_LockUnlocked         ST_Lock = 3
	ST_LockSdtContentLocked ST_Lock = 4
)

func (_bbagbge ST_InfoTextType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bbagbge.String(), start)
}

const (
	ST_HeightRuleUnset   ST_HeightRule = 0
	ST_HeightRuleAuto    ST_HeightRule = 1
	ST_HeightRuleExact   ST_HeightRule = 2
	ST_HeightRuleAtLeast ST_HeightRule = 3
)

func (_ccceb *CT_DocPartCategory) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_ebeg := _d.StartElement{Name: _d.Name{Local: "w:name"}}
	e.EncodeElement(_ccceb.Name, _ebeg)
	_dgaa := _d.StartElement{Name: _d.Name{Local: "w:gallery"}}
	e.EncodeElement(_ccceb.Gallery, _dgaa)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_PContentBase and its children, prefixing error messages with path
func (_cedggd *EG_PContentBase) ValidateWithPath(path string) error {
	if _cedggd.CustomXml != nil {
		if _deabb := _cedggd.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _deabb != nil {
			return _deabb
		}
	}
	for _bcfcc, _ccdfff := range _cedggd.FldSimple {
		if _ffdga := _ccdfff.ValidateWithPath(_b.Sprintf("\u0025s/FldSimple\u005b\u0025d\u005d", path, _bcfcc)); _ffdga != nil {
			return _ffdga
		}
	}
	if _cedggd.Hyperlink != nil {
		if _defce := _cedggd.Hyperlink.ValidateWithPath(path + "\u002fHyperlink"); _defce != nil {
			return _defce
		}
	}
	return nil
}
func (_ggceg *ST_TextEffect) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gfaec, _gcdgf := d.Token()
	if _gcdgf != nil {
		return _gcdgf
	}
	if _ecacd, _gdbfc := _gfaec.(_d.EndElement); _gdbfc && _ecacd.Name == start.Name {
		*_ggceg = 1
		return nil
	}
	if _gfgda, _edbde := _gfaec.(_d.CharData); !_edbde {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _gfaec)
	} else {
		switch string(_gfgda) {
		case "":
			*_ggceg = 0
		case "blinkBackground":
			*_ggceg = 1
		case "lights":
			*_ggceg = 2
		case "antsBlack":
			*_ggceg = 3
		case "antsRed":
			*_ggceg = 4
		case "shimmer":
			*_ggceg = 5
		case "sparkle":
			*_ggceg = 6
		case "none":
			*_ggceg = 7
		}
	}
	_gfaec, _gcdgf = d.Token()
	if _gcdgf != nil {
		return _gcdgf
	}
	if _gddffd, _adbeg := _gfaec.(_d.EndElement); _adbeg && _gddffd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _gfaec)
}
func (_fbdac ST_BrClear) ValidateWithPath(path string) error {
	switch _fbdac {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fbdac))
	}
	return nil
}

// ValidateWithPath validates the AG_Password and its children, prefixing error messages with path
func (_eg *AG_Password) ValidateWithPath(path string) error { return nil }
func (_fedbef *ST_PTabLeader) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ecegag, _afeface := d.Token()
	if _afeface != nil {
		return _afeface
	}
	if _bgaeb, _bedff := _ecegag.(_d.EndElement); _bedff && _bgaeb.Name == start.Name {
		*_fedbef = 1
		return nil
	}
	if _dcccf, _agdcg := _ecegag.(_d.CharData); !_agdcg {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ecegag)
	} else {
		switch string(_dcccf) {
		case "":
			*_fedbef = 0
		case "none":
			*_fedbef = 1
		case "dot":
			*_fedbef = 2
		case "hyphen":
			*_fedbef = 3
		case "underscore":
			*_fedbef = 4
		case "middleDot":
			*_fedbef = 5
		}
	}
	_ecegag, _afeface = d.Token()
	if _afeface != nil {
		return _afeface
	}
	if _fafcfe, _bfdff := _ecegag.(_d.EndElement); _bfdff && _fafcfe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ecegag)
}
func NewCT_Markup() *CT_Markup { _dcccd := &CT_Markup{}; return _dcccd }

type CT_Rel struct{ IdAttr string }

// Validate validates the CT_RPrChange and its children
func (_facbf *CT_RPrChange) Validate() error { return _facbf.ValidateWithPath("CT_RPrChange") }

// ValidateWithPath validates the CT_TrackChangeNumbering and its children, prefixing error messages with path
func (_cccce *CT_TrackChangeNumbering) ValidateWithPath(path string) error { return nil }
func (_abbdg ST_VerticalJc) String() string {
	switch _abbdg {
	case 0:
		return ""
	case 1:
		return "top"
	case 2:
		return "center"
	case 3:
		return "both"
	case 4:
		return "bottom"
	}
	return ""
}

// Validate validates the CT_TblPrExChange and its children
func (_fecg *CT_TblPrExChange) Validate() error { return _fecg.ValidateWithPath("CT_TblPrExChange") }

const (
	ST_PageBorderOffsetUnset ST_PageBorderOffset = 0
	ST_PageBorderOffsetPage  ST_PageBorderOffset = 1
	ST_PageBorderOffsetText  ST_PageBorderOffset = 2
)

func NewSettings() *Settings {
	_gadcf := &Settings{}
	_gadcf.CT_Settings = *NewCT_Settings()
	return _gadcf
}
func (_efafb *EG_RPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _efafb.RPr != nil {
		_ecedad := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_efafb.RPr, _ecedad)
	}
	return nil
}
func (_cacdd ST_AnnotationVMerge) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cacdd.String(), start)
}
func (_cbabe *ST_ObjectDrawAspect) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cbabe = 0
	case "content":
		*_cbabe = 1
	case "icon":
		*_cbabe = 2
	}
	return nil
}

// Validate validates the CT_HpsMeasure and its children
func (_fada *CT_HpsMeasure) Validate() error { return _fada.ValidateWithPath("CT_HpsMeasure") }
func NewWdCT_LinkedTextboxInformation() *WdCT_LinkedTextboxInformation {
	_efecd := &WdCT_LinkedTextboxInformation{}
	return _efecd
}

// Validate validates the CT_PixelsMeasure and its children
func (_dgceb *CT_PixelsMeasure) Validate() error { return _dgceb.ValidateWithPath("CT_PixelsMeasure") }
func (_afbbfd *CT_WritingStyle) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gadcc := range start.Attr {
		if _gadcc.Name.Local == "lang" {
			_dfdfd, _gfgfee := _gadcc.Value, error(nil)
			if _gfgfee != nil {
				return _gfgfee
			}
			_afbbfd.LangAttr = _dfdfd
			continue
		}
		if _gadcc.Name.Local == "vendorID" {
			_ffed, _ebafdg := _gadcc.Value, error(nil)
			if _ebafdg != nil {
				return _ebafdg
			}
			_afbbfd.VendorIDAttr = _ffed
			continue
		}
		if _gadcc.Name.Local == "dllVersion" {
			_fdgcdd, _befdg := _gadcc.Value, error(nil)
			if _befdg != nil {
				return _befdg
			}
			_afbbfd.DllVersionAttr = _fdgcdd
			continue
		}
		if _gadcc.Name.Local == "nlCheck" {
			_fcdgg, _cffdg := ParseUnionST_OnOff(_gadcc.Value)
			if _cffdg != nil {
				return _cffdg
			}
			_afbbfd.NlCheckAttr = &_fcdgg
			continue
		}
		if _gadcc.Name.Local == "checkStyle" {
			_gfgaad, _bdcge := ParseUnionST_OnOff(_gadcc.Value)
			if _bdcge != nil {
				return _bdcge
			}
			_afbbfd.CheckStyleAttr = _gfgaad
			continue
		}
		if _gadcc.Name.Local == "appName" {
			_fgfaa, _dcbc := _gadcc.Value, error(nil)
			if _dcbc != nil {
				return _dcbc
			}
			_afbbfd.AppNameAttr = _fgfaa
			continue
		}
	}
	for {
		_eedcf, _bcgef := d.Token()
		if _bcgef != nil {
			return _b.Errorf("parsing CT_WritingStyle:\u0020\u0025s", _bcgef)
		}
		if _aefgee, _gebccg := _eedcf.(_d.EndElement); _gebccg && _aefgee.Name == start.Name {
			break
		}
	}
	return nil
}

// ST_MeasurementOrPercent is a union type
type ST_MeasurementOrPercent struct {
	ST_DecimalNumberOrPercent *ST_DecimalNumberOrPercent
	ST_UniversalMeasure       *string
}

// ValidateWithPath validates the CT_SdtDropDownList and its children, prefixing error messages with path
func (_aeace *CT_SdtDropDownList) ValidateWithPath(path string) error {
	for _eggbdc, _ccdgc := range _aeace.ListItem {
		if _daggb := _ccdgc.ValidateWithPath(_b.Sprintf("\u0025s\u002fListItem\u005b\u0025d\u005d", path, _eggbdc)); _daggb != nil {
			return _daggb
		}
	}
	return nil
}

// Validate validates the CT_FtnEdnRef and its children
func (_bfeb *CT_FtnEdnRef) Validate() error { return _bfeb.ValidateWithPath("CT_FtnEdnRef") }

// Validate validates the CT_SectPrBase and its children
func (_afafg *CT_SectPrBase) Validate() error { return _afafg.ValidateWithPath("CT_SectPrBase") }

type CT_RubyPr struct {

	// Phonetic Guide Text Alignment
	RubyAlign *CT_RubyAlign

	// Phonetic Guide Text Font Size
	Hps *CT_HpsMeasure

	// Distance Between Phonetic Guide Text and Phonetic Guide Base Text
	HpsRaise *CT_HpsMeasure

	// Phonetic Guide Base Text Font Size
	HpsBaseText *CT_HpsMeasure

	// Language ID for Phonetic Guide
	Lid *CT_Lang

	// Invalidated Field Cache
	Dirty *CT_OnOff
}

// Validate validates the EG_RunInnerContent and its children
func (_abebfb *EG_RunInnerContent) Validate() error {
	return _abebfb.ValidateWithPath("EG_RunInnerContent")
}
func NewCT_Panose() *CT_Panose { _abee := &CT_Panose{}; return _abee }

// ValidateWithPath validates the CT_Ind and its children, prefixing error messages with path
func (_fbaebd *CT_Ind) ValidateWithPath(path string) error {
	if _fbaebd.StartAttr != nil {
		if _cggca := _fbaebd.StartAttr.ValidateWithPath(path + "\u002fStartAttr"); _cggca != nil {
			return _cggca
		}
	}
	if _fbaebd.EndAttr != nil {
		if _dffgc := _fbaebd.EndAttr.ValidateWithPath(path + "\u002fEndAttr"); _dffgc != nil {
			return _dffgc
		}
	}
	if _fbaebd.LeftAttr != nil {
		if _ffadcc := _fbaebd.LeftAttr.ValidateWithPath(path + "\u002fLeftAttr"); _ffadcc != nil {
			return _ffadcc
		}
	}
	if _fbaebd.RightAttr != nil {
		if _dbgde := _fbaebd.RightAttr.ValidateWithPath(path + "\u002fRightAttr"); _dbgde != nil {
			return _dbgde
		}
	}
	if _fbaebd.HangingAttr != nil {
		if _cfggc := _fbaebd.HangingAttr.ValidateWithPath(path + "\u002fHangingAttr"); _cfggc != nil {
			return _cfggc
		}
	}
	if _fbaebd.FirstLineAttr != nil {
		if _gceae := _fbaebd.FirstLineAttr.ValidateWithPath(path + "\u002fFirstLineAttr"); _gceae != nil {
			return _gceae
		}
	}
	return nil
}
func (_cgfaee *WdWpc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "wp:wpc"
	return _cgfaee.WdCT_WordprocessingCanvas.MarshalXML(e, start)
}
func NewWdCT_WordprocessingShapeChoice() *WdCT_WordprocessingShapeChoice {
	_bccdcb := &WdCT_WordprocessingShapeChoice{}
	return _bccdcb
}

// Validate validates the AG_Password and its children
func (_bbf *AG_Password) Validate() error { return _bbf.ValidateWithPath("AG_Password") }
func NewCT_RPrOriginal() *CT_RPrOriginal  { _bgggf := &CT_RPrOriginal{}; return _bgggf }

type ST_HeightRule byte

// ValidateWithPath validates the CT_MailMerge and its children, prefixing error messages with path
func (_aecce *CT_MailMerge) ValidateWithPath(path string) error {
	if _ccacc := _aecce.MainDocumentType.ValidateWithPath(path + "\u002fMainDocumentType"); _ccacc != nil {
		return _ccacc
	}
	if _aecce.LinkToQuery != nil {
		if _bded := _aecce.LinkToQuery.ValidateWithPath(path + "\u002fLinkToQuery"); _bded != nil {
			return _bded
		}
	}
	if _debbe := _aecce.DataType.ValidateWithPath(path + "\u002fDataType"); _debbe != nil {
		return _debbe
	}
	if _aecce.ConnectString != nil {
		if _bcaea := _aecce.ConnectString.ValidateWithPath(path + "\u002fConnectString"); _bcaea != nil {
			return _bcaea
		}
	}
	if _aecce.Query != nil {
		if _egfa := _aecce.Query.ValidateWithPath(path + "\u002fQuery"); _egfa != nil {
			return _egfa
		}
	}
	if _aecce.DataSource != nil {
		if _geea := _aecce.DataSource.ValidateWithPath(path + "/DataSource"); _geea != nil {
			return _geea
		}
	}
	if _aecce.HeaderSource != nil {
		if _bbdaf := _aecce.HeaderSource.ValidateWithPath(path + "\u002fHeaderSource"); _bbdaf != nil {
			return _bbdaf
		}
	}
	if _aecce.DoNotSuppressBlankLines != nil {
		if _afad := _aecce.DoNotSuppressBlankLines.ValidateWithPath(path + "\u002fDoNotSuppressBlankLines"); _afad != nil {
			return _afad
		}
	}
	if _aecce.Destination != nil {
		if _becdd := _aecce.Destination.ValidateWithPath(path + "\u002fDestination"); _becdd != nil {
			return _becdd
		}
	}
	if _aecce.AddressFieldName != nil {
		if _dfcaa := _aecce.AddressFieldName.ValidateWithPath(path + "\u002fAddressFieldName"); _dfcaa != nil {
			return _dfcaa
		}
	}
	if _aecce.MailSubject != nil {
		if _fdab := _aecce.MailSubject.ValidateWithPath(path + "\u002fMailSubject"); _fdab != nil {
			return _fdab
		}
	}
	if _aecce.MailAsAttachment != nil {
		if _cdfdd := _aecce.MailAsAttachment.ValidateWithPath(path + "\u002fMailAsAttachment"); _cdfdd != nil {
			return _cdfdd
		}
	}
	if _aecce.ViewMergedData != nil {
		if _cadg := _aecce.ViewMergedData.ValidateWithPath(path + "\u002fViewMergedData"); _cadg != nil {
			return _cadg
		}
	}
	if _aecce.ActiveRecord != nil {
		if _eeceg := _aecce.ActiveRecord.ValidateWithPath(path + "\u002fActiveRecord"); _eeceg != nil {
			return _eeceg
		}
	}
	if _aecce.CheckErrors != nil {
		if _adaba := _aecce.CheckErrors.ValidateWithPath(path + "\u002fCheckErrors"); _adaba != nil {
			return _adaba
		}
	}
	if _aecce.Odso != nil {
		if _cefad := _aecce.Odso.ValidateWithPath(path + "\u002fOdso"); _cefad != nil {
			return _cefad
		}
	}
	return nil
}

// Validate validates the CT_UnsignedDecimalNumber and its children
func (_dcbbbe *CT_UnsignedDecimalNumber) Validate() error {
	return _dcbbbe.ValidateWithPath("CT_UnsignedDecimalNumber")
}

type CT_TcPr struct {

	// Table Cell Conditional Formatting
	CnfStyle *CT_Cnf

	// Preferred Table Cell Width
	TcW *CT_TblWidth

	// Grid Columns Spanned by Current Table Cell
	GridSpan *CT_DecimalNumber

	// Horizontally Merged Cell
	HMerge *CT_HMerge

	// Vertically Merged Cell
	VMerge *CT_VMerge

	// Table Cell Borders
	TcBorders *CT_TcBorders

	// Table Cell Shading
	Shd *CT_Shd

	// Don't Wrap Cell Content
	NoWrap *CT_OnOff

	// Single Table Cell Margins
	TcMar *CT_TcMar

	// Table Cell Text Flow Direction
	TextDirection *CT_TextDirection

	// Fit Text Within Cell
	TcFitText *CT_OnOff

	// Table Cell Vertical Alignment
	VAlign *CT_VerticalJc

	// Ignore End Of Cell Marker In Row Height Calculation
	HideMark *CT_OnOff

	// Header Cells Associated With Table Cell
	Headers *CT_Headers

	// Table Cell Insertion
	CellIns *CT_TrackChange

	// Table Cell Deletion
	CellDel *CT_TrackChange

	// Vertically Merged/Split Table Cells
	CellMerge  *CT_CellMergeTrackChange
	TcPrChange *CT_TcPrChange
}

func NewCT_SdtText() *CT_SdtText { _cbbef := &CT_SdtText{}; return _cbbef }
func (_aeegcf ST_InfoTextType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dfdggd := _d.Attr{}
	_dfdggd.Name = name
	switch _aeegcf {
	case ST_InfoTextTypeUnset:
		_dfdggd.Value = ""
	case ST_InfoTextTypeText:
		_dfdggd.Value = "text"
	case ST_InfoTextTypeAutoText:
		_dfdggd.Value = "autoText"
	}
	return _dfdggd, nil
}
func NewCT_SectPr() *CT_SectPr { _edcge := &CT_SectPr{}; return _edcge }
func (_cdag *CT_NumPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aecdc:
	for {
		_gdfac, _dcac := d.Token()
		if _dcac != nil {
			return _dcac
		}
		switch _cacbe := _gdfac.(type) {
		case _d.StartElement:
			switch _cacbe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ilvl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ilvl"}:
				_cdag.Ilvl = NewCT_DecimalNumber()
				if _cagca := d.DecodeElement(_cdag.Ilvl, &_cacbe); _cagca != nil {
					return _cagca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numId"}:
				_cdag.NumId = NewCT_DecimalNumber()
				if _cffcg := d.DecodeElement(_cdag.NumId, &_cacbe); _cffcg != nil {
					return _cffcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numberingChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numberingChange"}:
				_cdag.NumberingChange = NewCT_TrackChangeNumbering()
				if _gfeac := d.DecodeElement(_cdag.NumberingChange, &_cacbe); _gfeac != nil {
					return _gfeac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cdag.Ins = NewCT_TrackChange()
				if _ffec := d.DecodeElement(_cdag.Ins, &_cacbe); _ffec != nil {
					return _ffec
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_NumPr\u0020\u0025v", _cacbe.Name)
				if _gabed := d.Skip(); _gabed != nil {
					return _gabed
				}
			}
		case _d.EndElement:
			break _aecdc
		case _d.CharData:
		}
	}
	return nil
}
func (_cbea *CT_AltChunk) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cbea.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", *_cbea.IdAttr)})
	}
	e.EncodeToken(start)
	if _cbea.AltChunkPr != nil {
		_acf := _d.StartElement{Name: _d.Name{Local: "w:altChunkPr"}}
		e.EncodeElement(_cbea.AltChunkPr, _acf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_befbe *CT_SdtContentRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cdefd:
	for {
		_cefeag, _acabce := d.Token()
		if _acabce != nil {
			return _acabce
		}
		switch _defded := _cefeag.(type) {
		case _d.StartElement:
			switch _defded.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_bgeae := NewCT_SimpleField()
				if _ccfea := d.DecodeElement(_bgeae, &_defded); _ccfea != nil {
					return _ccfea
				}
				_befbe.FldSimple = append(_befbe.FldSimple, _bgeae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_befbe.Hyperlink = NewCT_Hyperlink()
				if _fgcfc := d.DecodeElement(_befbe.Hyperlink, &_defded); _fgcfc != nil {
					return _fgcfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_befbe.SubDoc = NewCT_Rel()
				if _adcgdb := d.DecodeElement(_befbe.SubDoc, &_defded); _adcgdb != nil {
					return _adcgdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_eadgc := NewEG_ContentRunContent()
				_eadgc.CustomXml = NewCT_CustomXmlRun()
				if _gbcaaf := d.DecodeElement(_eadgc.CustomXml, &_defded); _gbcaaf != nil {
					return _gbcaaf
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _eadgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_bgfee := NewEG_ContentRunContent()
				_bgfee.SmartTag = NewCT_SmartTagRun()
				if _gbgfb := d.DecodeElement(_bgfee.SmartTag, &_defded); _gbgfb != nil {
					return _gbgfb
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _bgfee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_ebbbf := NewEG_ContentRunContent()
				_ebbbf.Sdt = NewCT_SdtRun()
				if _cfgeg := d.DecodeElement(_ebbbf.Sdt, &_defded); _cfgeg != nil {
					return _cfgeg
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _ebbbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_egfgbc := NewEG_ContentRunContent()
				_egfgbc.Dir = NewCT_DirContentRun()
				if _befad := d.DecodeElement(_egfgbc.Dir, &_defded); _befad != nil {
					return _befad
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _egfgbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_aaecgg := NewEG_ContentRunContent()
				_aaecgg.Bdo = NewCT_BdoContentRun()
				if _cfgece := d.DecodeElement(_aaecgg.Bdo, &_defded); _cfgece != nil {
					return _cfgece
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _aaecgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_gdaba := NewEG_ContentRunContent()
				_gdaba.R = NewCT_R()
				if _geaga := d.DecodeElement(_gdaba.R, &_defded); _geaga != nil {
					return _geaga
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _gdaba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_bgcbda := NewEG_ContentRunContent()
				_gcgge := NewEG_RunLevelElts()
				_gcgge.ProofErr = NewCT_ProofErr()
				if _cfgee := d.DecodeElement(_gcgge.ProofErr, &_defded); _cfgee != nil {
					return _cfgee
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _bgcbda)
				_bgcbda.EG_RunLevelElts = append(_bgcbda.EG_RunLevelElts, _gcgge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ffadd := NewEG_ContentRunContent()
				_eeegef := NewEG_RunLevelElts()
				_eeegef.PermStart = NewCT_PermStart()
				if _fcacd := d.DecodeElement(_eeegef.PermStart, &_defded); _fcacd != nil {
					return _fcacd
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _ffadd)
				_ffadd.EG_RunLevelElts = append(_ffadd.EG_RunLevelElts, _eeegef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_feafcd := NewEG_ContentRunContent()
				_fcacf := NewEG_RunLevelElts()
				_fcacf.PermEnd = NewCT_Perm()
				if _dbcfb := d.DecodeElement(_fcacf.PermEnd, &_defded); _dbcfb != nil {
					return _dbcfb
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _feafcd)
				_feafcd.EG_RunLevelElts = append(_feafcd.EG_RunLevelElts, _fcacf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_ddcaa := NewEG_ContentRunContent()
				_gbcbe := NewEG_RunLevelElts()
				_gbcbe.Ins = NewCT_RunTrackChange()
				if _gfgbc := d.DecodeElement(_gbcbe.Ins, &_defded); _gfgbc != nil {
					return _gfgbc
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _ddcaa)
				_ddcaa.EG_RunLevelElts = append(_ddcaa.EG_RunLevelElts, _gbcbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_egdg := NewEG_ContentRunContent()
				_acagdg := NewEG_RunLevelElts()
				_acagdg.Del = NewCT_RunTrackChange()
				if _edage := d.DecodeElement(_acagdg.Del, &_defded); _edage != nil {
					return _edage
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _egdg)
				_egdg.EG_RunLevelElts = append(_egdg.EG_RunLevelElts, _acagdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_aaadgc := NewEG_ContentRunContent()
				_dagcgg := NewEG_RunLevelElts()
				_dagcgg.MoveFrom = NewCT_RunTrackChange()
				if _fgcga := d.DecodeElement(_dagcgg.MoveFrom, &_defded); _fgcga != nil {
					return _fgcga
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _aaadgc)
				_aaadgc.EG_RunLevelElts = append(_aaadgc.EG_RunLevelElts, _dagcgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_bgab := NewEG_ContentRunContent()
				_cddefg := NewEG_RunLevelElts()
				_cddefg.MoveTo = NewCT_RunTrackChange()
				if _dfacf := d.DecodeElement(_cddefg.MoveTo, &_defded); _dfacf != nil {
					return _dfacf
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _bgab)
				_bgab.EG_RunLevelElts = append(_bgab.EG_RunLevelElts, _cddefg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_cadbf := NewEG_ContentRunContent()
				_acggd := NewEG_RunLevelElts()
				_aecac := NewEG_RangeMarkupElements()
				_aecac.BookmarkStart = NewCT_Bookmark()
				if _cdabg := d.DecodeElement(_aecac.BookmarkStart, &_defded); _cdabg != nil {
					return _cdabg
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _cadbf)
				_cadbf.EG_RunLevelElts = append(_cadbf.EG_RunLevelElts, _acggd)
				_acggd.EG_RangeMarkupElements = append(_acggd.EG_RangeMarkupElements, _aecac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_adbac := NewEG_ContentRunContent()
				_gdfeed := NewEG_RunLevelElts()
				_dfcca := NewEG_RangeMarkupElements()
				_dfcca.BookmarkEnd = NewCT_MarkupRange()
				if _bdgbd := d.DecodeElement(_dfcca.BookmarkEnd, &_defded); _bdgbd != nil {
					return _bdgbd
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _adbac)
				_adbac.EG_RunLevelElts = append(_adbac.EG_RunLevelElts, _gdfeed)
				_gdfeed.EG_RangeMarkupElements = append(_gdfeed.EG_RangeMarkupElements, _dfcca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fbgfg := NewEG_ContentRunContent()
				_cafga := NewEG_RunLevelElts()
				_adcgdbf := NewEG_RangeMarkupElements()
				_adcgdbf.MoveFromRangeStart = NewCT_MoveBookmark()
				if _acgdb := d.DecodeElement(_adcgdbf.MoveFromRangeStart, &_defded); _acgdb != nil {
					return _acgdb
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _fbgfg)
				_fbgfg.EG_RunLevelElts = append(_fbgfg.EG_RunLevelElts, _cafga)
				_cafga.EG_RangeMarkupElements = append(_cafga.EG_RangeMarkupElements, _adcgdbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_ffdeg := NewEG_ContentRunContent()
				_gefde := NewEG_RunLevelElts()
				_abccde := NewEG_RangeMarkupElements()
				_abccde.MoveFromRangeEnd = NewCT_MarkupRange()
				if _ccged := d.DecodeElement(_abccde.MoveFromRangeEnd, &_defded); _ccged != nil {
					return _ccged
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _ffdeg)
				_ffdeg.EG_RunLevelElts = append(_ffdeg.EG_RunLevelElts, _gefde)
				_gefde.EG_RangeMarkupElements = append(_gefde.EG_RangeMarkupElements, _abccde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_agbaa := NewEG_ContentRunContent()
				_efbda := NewEG_RunLevelElts()
				_ebafg := NewEG_RangeMarkupElements()
				_ebafg.MoveToRangeStart = NewCT_MoveBookmark()
				if _cdacae := d.DecodeElement(_ebafg.MoveToRangeStart, &_defded); _cdacae != nil {
					return _cdacae
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _agbaa)
				_agbaa.EG_RunLevelElts = append(_agbaa.EG_RunLevelElts, _efbda)
				_efbda.EG_RangeMarkupElements = append(_efbda.EG_RangeMarkupElements, _ebafg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_eegbe := NewEG_ContentRunContent()
				_gfgfe := NewEG_RunLevelElts()
				_gcdcg := NewEG_RangeMarkupElements()
				_gcdcg.MoveToRangeEnd = NewCT_MarkupRange()
				if _badec := d.DecodeElement(_gcdcg.MoveToRangeEnd, &_defded); _badec != nil {
					return _badec
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _eegbe)
				_eegbe.EG_RunLevelElts = append(_eegbe.EG_RunLevelElts, _gfgfe)
				_gfgfe.EG_RangeMarkupElements = append(_gfgfe.EG_RangeMarkupElements, _gcdcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_bfcfe := NewEG_ContentRunContent()
				_cbagd := NewEG_RunLevelElts()
				_ddbg := NewEG_RangeMarkupElements()
				_ddbg.CommentRangeStart = NewCT_MarkupRange()
				if _gfde := d.DecodeElement(_ddbg.CommentRangeStart, &_defded); _gfde != nil {
					return _gfde
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _bfcfe)
				_bfcfe.EG_RunLevelElts = append(_bfcfe.EG_RunLevelElts, _cbagd)
				_cbagd.EG_RangeMarkupElements = append(_cbagd.EG_RangeMarkupElements, _ddbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_gccea := NewEG_ContentRunContent()
				_cgcdd := NewEG_RunLevelElts()
				_feebcd := NewEG_RangeMarkupElements()
				_feebcd.CommentRangeEnd = NewCT_MarkupRange()
				if _cfgff := d.DecodeElement(_feebcd.CommentRangeEnd, &_defded); _cfgff != nil {
					return _cfgff
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _gccea)
				_gccea.EG_RunLevelElts = append(_gccea.EG_RunLevelElts, _cgcdd)
				_cgcdd.EG_RangeMarkupElements = append(_cgcdd.EG_RangeMarkupElements, _feebcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_cgcbda := NewEG_ContentRunContent()
				_bgdbdf := NewEG_RunLevelElts()
				_bagdg := NewEG_RangeMarkupElements()
				_bagdg.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _fabga := d.DecodeElement(_bagdg.CustomXmlInsRangeStart, &_defded); _fabga != nil {
					return _fabga
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _cgcbda)
				_cgcbda.EG_RunLevelElts = append(_cgcbda.EG_RunLevelElts, _bgdbdf)
				_bgdbdf.EG_RangeMarkupElements = append(_bgdbdf.EG_RangeMarkupElements, _bagdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_ecccgf := NewEG_ContentRunContent()
				_bedbfb := NewEG_RunLevelElts()
				_cbfcc := NewEG_RangeMarkupElements()
				_cbfcc.CustomXmlInsRangeEnd = NewCT_Markup()
				if _bfagf := d.DecodeElement(_cbfcc.CustomXmlInsRangeEnd, &_defded); _bfagf != nil {
					return _bfagf
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _ecccgf)
				_ecccgf.EG_RunLevelElts = append(_ecccgf.EG_RunLevelElts, _bedbfb)
				_bedbfb.EG_RangeMarkupElements = append(_bedbfb.EG_RangeMarkupElements, _cbfcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_dcgd := NewEG_ContentRunContent()
				_bacfc := NewEG_RunLevelElts()
				_dadged := NewEG_RangeMarkupElements()
				_dadged.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _acgaa := d.DecodeElement(_dadged.CustomXmlDelRangeStart, &_defded); _acgaa != nil {
					return _acgaa
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _dcgd)
				_dcgd.EG_RunLevelElts = append(_dcgd.EG_RunLevelElts, _bacfc)
				_bacfc.EG_RangeMarkupElements = append(_bacfc.EG_RangeMarkupElements, _dadged)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fefgg := NewEG_ContentRunContent()
				_cggbe := NewEG_RunLevelElts()
				_fgegf := NewEG_RangeMarkupElements()
				_fgegf.CustomXmlDelRangeEnd = NewCT_Markup()
				if _cdgfa := d.DecodeElement(_fgegf.CustomXmlDelRangeEnd, &_defded); _cdgfa != nil {
					return _cdgfa
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _fefgg)
				_fefgg.EG_RunLevelElts = append(_fefgg.EG_RunLevelElts, _cggbe)
				_cggbe.EG_RangeMarkupElements = append(_cggbe.EG_RangeMarkupElements, _fgegf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_accaa := NewEG_ContentRunContent()
				_bebed := NewEG_RunLevelElts()
				_fafcgg := NewEG_RangeMarkupElements()
				_fafcgg.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _cfdgb := d.DecodeElement(_fafcgg.CustomXmlMoveFromRangeStart, &_defded); _cfdgb != nil {
					return _cfdgb
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _accaa)
				_accaa.EG_RunLevelElts = append(_accaa.EG_RunLevelElts, _bebed)
				_bebed.EG_RangeMarkupElements = append(_bebed.EG_RangeMarkupElements, _fafcgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_dfabf := NewEG_ContentRunContent()
				_fedffb := NewEG_RunLevelElts()
				_fcfec := NewEG_RangeMarkupElements()
				_fcfec.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _dcbaa := d.DecodeElement(_fcfec.CustomXmlMoveFromRangeEnd, &_defded); _dcbaa != nil {
					return _dcbaa
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _dfabf)
				_dfabf.EG_RunLevelElts = append(_dfabf.EG_RunLevelElts, _fedffb)
				_fedffb.EG_RangeMarkupElements = append(_fedffb.EG_RangeMarkupElements, _fcfec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_aadba := NewEG_ContentRunContent()
				_aeefd := NewEG_RunLevelElts()
				_geeegf := NewEG_RangeMarkupElements()
				_geeegf.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bcbaf := d.DecodeElement(_geeegf.CustomXmlMoveToRangeStart, &_defded); _bcbaf != nil {
					return _bcbaf
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _aadba)
				_aadba.EG_RunLevelElts = append(_aadba.EG_RunLevelElts, _aeefd)
				_aeefd.EG_RangeMarkupElements = append(_aeefd.EG_RangeMarkupElements, _geeegf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_fecfd := NewEG_ContentRunContent()
				_dgdae := NewEG_RunLevelElts()
				_agdef := NewEG_RangeMarkupElements()
				_agdef.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _dcefb := d.DecodeElement(_agdef.CustomXmlMoveToRangeEnd, &_defded); _dcefb != nil {
					return _dcefb
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _fecfd)
				_fecfd.EG_RunLevelElts = append(_fecfd.EG_RunLevelElts, _dgdae)
				_dgdae.EG_RangeMarkupElements = append(_dgdae.EG_RangeMarkupElements, _agdef)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_affbb := NewEG_ContentRunContent()
				_deded := NewEG_RunLevelElts()
				_ddfgbe := NewEG_MathContent()
				_ddfgbe.OMathPara = _f.NewOMathPara()
				if _ggabe := d.DecodeElement(_ddfgbe.OMathPara, &_defded); _ggabe != nil {
					return _ggabe
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _affbb)
				_affbb.EG_RunLevelElts = append(_affbb.EG_RunLevelElts, _deded)
				_deded.EG_MathContent = append(_deded.EG_MathContent, _ddfgbe)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_gagaf := NewEG_ContentRunContent()
				_ddfed := NewEG_RunLevelElts()
				_dbfdf := NewEG_MathContent()
				_dbfdf.OMath = _f.NewOMath()
				if _cfgfb := d.DecodeElement(_dbfdf.OMath, &_defded); _cfgfb != nil {
					return _cfgfb
				}
				_befbe.EG_ContentRunContent = append(_befbe.EG_ContentRunContent, _gagaf)
				_gagaf.EG_RunLevelElts = append(_gagaf.EG_RunLevelElts, _ddfed)
				_ddfed.EG_MathContent = append(_ddfed.EG_MathContent, _dbfdf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SdtContentRun\u0020\u0025v", _defded.Name)
				if _adcca := d.Skip(); _adcca != nil {
					return _adcca
				}
			}
		case _d.EndElement:
			break _cdefd
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_PBdr and its children
func (_ebcfe *CT_PBdr) Validate() error { return _ebcfe.ValidateWithPath("CT_PBdr") }

type Endnotes struct{ CT_Endnotes }

func (_cabf *CT_NumLvl) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:ilvl"}, Value: _b.Sprintf("\u0025v", _cabf.IlvlAttr)})
	e.EncodeToken(start)
	if _cabf.StartOverride != nil {
		_edega := _d.StartElement{Name: _d.Name{Local: "w:startOverride"}}
		e.EncodeElement(_cabf.StartOverride, _edega)
	}
	if _cabf.Lvl != nil {
		_dacac := _d.StartElement{Name: _d.Name{Local: "w:lvl"}}
		e.EncodeElement(_cabf.Lvl, _dacac)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fddaf *CT_TextAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_affea, _ebbafe := _fddaf.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _ebbafe != nil {
		return _ebbafe
	}
	start.Attr = append(start.Attr, _affea)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_efcaef ST_TextAlignment) String() string {
	switch _efcaef {
	case 0:
		return ""
	case 1:
		return "top"
	case 2:
		return "center"
	case 3:
		return "baseline"
	case 4:
		return "bottom"
	case 5:
		return "auto"
	}
	return ""
}

// Validate validates the CT_TextAlignment and its children
func (_agcfe *CT_TextAlignment) Validate() error { return _agcfe.ValidateWithPath("CT_TextAlignment") }
func (_becgf *CT_Frameset) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dgcc:
	for {
		_cebbgf, _fggb := d.Token()
		if _fggb != nil {
			return _fggb
		}
		switch _cbga := _cebbgf.(type) {
		case _d.StartElement:
			switch _cbga.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_becgf.Sz = NewCT_String()
				if _bdef := d.DecodeElement(_becgf.Sz, &_cbga); _bdef != nil {
					return _bdef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "framesetSplitbar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "framesetSplitbar"}:
				_becgf.FramesetSplitbar = NewCT_FramesetSplitbar()
				if _dgbc := d.DecodeElement(_becgf.FramesetSplitbar, &_cbga); _dgbc != nil {
					return _dgbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "frameLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "frameLayout"}:
				_becgf.FrameLayout = NewCT_FrameLayout()
				if _gfbaf := d.DecodeElement(_becgf.FrameLayout, &_cbga); _gfbaf != nil {
					return _gfbaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "title"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "title"}:
				_becgf.Title = NewCT_String()
				if _eeca := d.DecodeElement(_becgf.Title, &_cbga); _eeca != nil {
					return _eeca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "frameset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "frameset"}:
				_fcfga := NewCT_FramesetChoice()
				if _cfaec := d.DecodeElement(&_fcfga.Frameset, &_cbga); _cfaec != nil {
					return _cfaec
				}
				_becgf.Choice = append(_becgf.Choice, _fcfga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "frame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "frame"}:
				_gceea := NewCT_FramesetChoice()
				if _abcge := d.DecodeElement(&_gceea.Frame, &_cbga); _abcge != nil {
					return _abcge
				}
				_becgf.Choice = append(_becgf.Choice, _gceea)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Frameset\u0020\u0025v", _cbga.Name)
				if _cgfgd := d.Skip(); _cgfgd != nil {
					return _cgfgd
				}
			}
		case _d.EndElement:
			break _dgcc
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StyleSort and its children, prefixing error messages with path
func (_egeadb *CT_StyleSort) ValidateWithPath(path string) error {
	if _egeadb.ValAttr == ST_StyleSortUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fbbcf := _egeadb.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fbbcf != nil {
		return _fbbcf
	}
	return nil
}
func (_baf *AG_TransitionalPassword) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cf := range start.Attr {
		if _cf.Name.Local == "cryptProviderType" {
			_baf.CryptProviderTypeAttr.UnmarshalXMLAttr(_cf)
			continue
		}
		if _cf.Name.Local == "cryptAlgorithmClass" {
			_baf.CryptAlgorithmClassAttr.UnmarshalXMLAttr(_cf)
			continue
		}
		if _cf.Name.Local == "cryptAlgorithmType" {
			_baf.CryptAlgorithmTypeAttr.UnmarshalXMLAttr(_cf)
			continue
		}
		if _cf.Name.Local == "cryptAlgorithmSid" {
			_gd, _gcb := _dd.ParseInt(_cf.Value, 10, 64)
			if _gcb != nil {
				return _gcb
			}
			_baf.CryptAlgorithmSidAttr = &_gd
			continue
		}
		if _cf.Name.Local == "cryptSpinCount" {
			_fb, _baaf := _dd.ParseInt(_cf.Value, 10, 64)
			if _baaf != nil {
				return _baaf
			}
			_baf.CryptSpinCountAttr = &_fb
			continue
		}
		if _cf.Name.Local == "cryptProvider" {
			_ffg, _ceb := _cf.Value, error(nil)
			if _ceb != nil {
				return _ceb
			}
			_baf.CryptProviderAttr = &_ffg
			continue
		}
		if _cf.Name.Local == "algIdExt" {
			_bfe, _gb := _cf.Value, error(nil)
			if _gb != nil {
				return _gb
			}
			_baf.AlgIdExtAttr = &_bfe
			continue
		}
		if _cf.Name.Local == "algIdExtSource" {
			_dag, _gbg := _cf.Value, error(nil)
			if _gbg != nil {
				return _gbg
			}
			_baf.AlgIdExtSourceAttr = &_dag
			continue
		}
		if _cf.Name.Local == "cryptProviderTypeExt" {
			_agf, _gcc := _cf.Value, error(nil)
			if _gcc != nil {
				return _gcc
			}
			_baf.CryptProviderTypeExtAttr = &_agf
			continue
		}
		if _cf.Name.Local == "cryptProviderTypeExtSource" {
			_dba, _cda := _cf.Value, error(nil)
			if _cda != nil {
				return _cda
			}
			_baf.CryptProviderTypeExtSourceAttr = &_dba
			continue
		}
		if _cf.Name.Local == "hash" {
			_gdg, _aed := _cf.Value, error(nil)
			if _aed != nil {
				return _aed
			}
			_baf.HashAttr = &_gdg
			continue
		}
		if _cf.Name.Local == "salt" {
			_cg, _cff := _cf.Value, error(nil)
			if _cff != nil {
				return _cff
			}
			_baf.SaltAttr = &_cg
			continue
		}
	}
	for {
		_fdd, _ea := d.Token()
		if _ea != nil {
			return _b.Errorf("parsing AG_TransitionalPassword:\u0020%s", _ea)
		}
		if _cgg, _ebc := _fdd.(_d.EndElement); _ebc && _cgg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Lock() *CT_Lock { _dgbcc := &CT_Lock{}; return _dgbcc }
func (_ae *AG_Password) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _adg := range start.Attr {
		if _adg.Name.Local == "algorithmName" {
			_bb, _de := _adg.Value, error(nil)
			if _de != nil {
				return _de
			}
			_ae.AlgorithmNameAttr = &_bb
			continue
		}
		if _adg.Name.Local == "hashValue" {
			_ac, _dea := _adg.Value, error(nil)
			if _dea != nil {
				return _dea
			}
			_ae.HashValueAttr = &_ac
			continue
		}
		if _adg.Name.Local == "saltValue" {
			_dgc, _ag := _adg.Value, error(nil)
			if _ag != nil {
				return _ag
			}
			_ae.SaltValueAttr = &_dgc
			continue
		}
		if _adg.Name.Local == "spinCount" {
			_db, _dc := _dd.ParseInt(_adg.Value, 10, 64)
			if _dc != nil {
				return _dc
			}
			_ae.SpinCountAttr = &_db
			continue
		}
	}
	for {
		_fe, _be := d.Token()
		if _be != nil {
			return _b.Errorf("parsing\u0020AG_Password:\u0020\u0025s", _be)
		}
		if _fa, _cd := _fe.(_d.EndElement); _cd && _fa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_edeag *CT_PageBorder) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _edeag.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", *_edeag.IdAttr)})
	}
	_fcfc, _ffccb := _edeag.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _ffccb != nil {
		return _ffccb
	}
	start.Attr = append(start.Attr, _fcfc)
	if _edeag.ColorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:color"}, Value: _b.Sprintf("\u0025v", *_edeag.ColorAttr)})
	}
	if _edeag.ThemeColorAttr != ST_ThemeColorUnset {
		_afgfcf, _efbgc := _edeag.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _efbgc != nil {
			return _efbgc
		}
		start.Attr = append(start.Attr, _afgfcf)
	}
	if _edeag.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_edeag.ThemeTintAttr)})
	}
	if _edeag.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_edeag.ThemeShadeAttr)})
	}
	if _edeag.SzAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:sz"}, Value: _b.Sprintf("\u0025v", *_edeag.SzAttr)})
	}
	if _edeag.SpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:space"}, Value: _b.Sprintf("\u0025v", *_edeag.SpaceAttr)})
	}
	if _edeag.ShadowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:shadow"}, Value: _b.Sprintf("\u0025v", *_edeag.ShadowAttr)})
	}
	if _edeag.FrameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:frame"}, Value: _b.Sprintf("\u0025v", *_edeag.FrameAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type EG_ParaRPrTrackChanges struct {

	// Inserted Paragraph
	Ins *CT_TrackChange

	// Deleted Paragraph
	Del *CT_TrackChange

	// Move Source Paragraph
	MoveFrom *CT_TrackChange

	// Move Destination Paragraph
	MoveTo *CT_TrackChange
}

// Validate validates the CT_MathCtrlDel and its children
func (_cffeg *CT_MathCtrlDel) Validate() error { return _cffeg.ValidateWithPath("CT_MathCtrlDel") }
func (_ddeec *CT_ObjectEmbed) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ddeec.DrawAspectAttr != ST_ObjectDrawAspectUnset {
		_gacbb, _dcagg := _ddeec.DrawAspectAttr.MarshalXMLAttr(_d.Name{Local: "w:drawAspect"})
		if _dcagg != nil {
			return _dcagg
		}
		start.Attr = append(start.Attr, _gacbb)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", _ddeec.IdAttr)})
	if _ddeec.ProgIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:progId"}, Value: _b.Sprintf("\u0025v", *_ddeec.ProgIdAttr)})
	}
	if _ddeec.ShapeIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:shapeId"}, Value: _b.Sprintf("\u0025v", *_ddeec.ShapeIdAttr)})
	}
	if _ddeec.FieldCodesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fieldCodes"}, Value: _b.Sprintf("\u0025v", *_ddeec.FieldCodesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the WdCT_WrapTight and its children, prefixing error messages with path
func (_dgeaa *WdCT_WrapTight) ValidateWithPath(path string) error {
	if _dgeaa.WrapTextAttr == WdST_WrapTextUnset {
		return _b.Errorf("\u0025s/WrapTextAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ceebbc := _dgeaa.WrapTextAttr.ValidateWithPath(path + "\u002fWrapTextAttr"); _ceebbc != nil {
		return _ceebbc
	}
	if _bbade := _dgeaa.WrapPolygon.ValidateWithPath(path + "\u002fWrapPolygon"); _bbade != nil {
		return _bbade
	}
	return nil
}

type CT_DocType struct {

	// Document Classification Value
	ValAttr string
}
type WdCT_PosVChoice struct {
	Align     WdST_AlignV
	PosOffset *int32
}
type Recipients struct{ CT_Recipients }

// ValidateWithPath validates the CT_SdtContentCell and its children, prefixing error messages with path
func (_dfbgb *CT_SdtContentCell) ValidateWithPath(path string) error {
	for _afdcc, _cbfed := range _dfbgb.Tc {
		if _adccc := _cbfed.ValidateWithPath(_b.Sprintf("\u0025s\u002fTc\u005b\u0025d]", path, _afdcc)); _adccc != nil {
			return _adccc
		}
	}
	if _dfbgb.CustomXml != nil {
		if _febaaa := _dfbgb.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _febaaa != nil {
			return _febaaa
		}
	}
	if _dfbgb.Sdt != nil {
		if _bcdcc := _dfbgb.Sdt.ValidateWithPath(path + "\u002fSdt"); _bcdcc != nil {
			return _bcdcc
		}
	}
	for _faedf, _gaffg := range _dfbgb.EG_RunLevelElts {
		if _bcefcf := _gaffg.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _faedf)); _bcefcf != nil {
			return _bcefcf
		}
	}
	return nil
}
func NewCT_HdrFtr() *CT_HdrFtr { _fbacgd := &CT_HdrFtr{}; return _fbacgd }

type CT_Lvl struct {

	// Numbering Level
	IlvlAttr int64

	// Template Code
	TplcAttr *string

	// Tentative Numbering
	TentativeAttr *_g.ST_OnOff

	// Starting Value
	Start *CT_DecimalNumber

	// Numbering Format
	NumFmt *CT_NumFmt

	// Restart Numbering Level Symbol
	LvlRestart *CT_DecimalNumber

	// Paragraph Style's Associated Numbering Level
	PStyle *CT_String

	// Display All Levels Using Arabic Numerals
	IsLgl *CT_OnOff

	// Content Between Numbering Symbol and Paragraph Text
	Suff *CT_LevelSuffix

	// Numbering Level Text
	LvlText *CT_LevelText

	// Picture Numbering Symbol Definition Reference
	LvlPicBulletId *CT_DecimalNumber

	// Legacy Numbering Level Properties
	Legacy *CT_LvlLegacy

	// Justification
	LvlJc *CT_Jc

	// Numbering Level Associated Paragraph Properties
	PPr *CT_PPrGeneral

	// Numbering Symbol Run Properties
	RPr *CT_RPr
}
type ST_LevelSuffix byte

func (_addafc *CT_PageBorders) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _edgga := range start.Attr {
		if _edgga.Name.Local == "zOrder" {
			_addafc.ZOrderAttr.UnmarshalXMLAttr(_edgga)
			continue
		}
		if _edgga.Name.Local == "display" {
			_addafc.DisplayAttr.UnmarshalXMLAttr(_edgga)
			continue
		}
		if _edgga.Name.Local == "offsetFrom" {
			_addafc.OffsetFromAttr.UnmarshalXMLAttr(_edgga)
			continue
		}
	}
_cebc:
	for {
		_cbffae, _dgdc := d.Token()
		if _dgdc != nil {
			return _dgdc
		}
		switch _geca := _cbffae.(type) {
		case _d.StartElement:
			switch _geca.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "top"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "top"}:
				_addafc.Top = NewCT_TopPageBorder()
				if _eedeb := d.DecodeElement(_addafc.Top, &_geca); _eedeb != nil {
					return _eedeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "left"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "left"}:
				_addafc.Left = NewCT_PageBorder()
				if _gegd := d.DecodeElement(_addafc.Left, &_geca); _gegd != nil {
					return _gegd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bottom"}:
				_addafc.Bottom = NewCT_BottomPageBorder()
				if _fdbdd := d.DecodeElement(_addafc.Bottom, &_geca); _fdbdd != nil {
					return _fdbdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "right"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "right"}:
				_addafc.Right = NewCT_PageBorder()
				if _cgacb := d.DecodeElement(_addafc.Right, &_geca); _cgacb != nil {
					return _cgacb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_PageBorders\u0020\u0025v", _geca.Name)
				if _gcdf := d.Skip(); _gcdf != nil {
					return _gcdf
				}
			}
		case _d.EndElement:
			break _cebc
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Jc and its children
func (_ggcab *CT_Jc) Validate() error { return _ggcab.ValidateWithPath("CT_Jc") }

// ValidateWithPath validates the CT_DocPartTypes and its children, prefixing error messages with path
func (_fdbb *CT_DocPartTypes) ValidateWithPath(path string) error {
	if _fdbb.AllAttr != nil {
		if _aeac := _fdbb.AllAttr.ValidateWithPath(path + "\u002fAllAttr"); _aeac != nil {
			return _aeac
		}
	}
	for _dfdgg, _gfgfc := range _fdbb.Type {
		if _caed := _gfgfc.ValidateWithPath(_b.Sprintf("%s\u002fType\u005b\u0025d\u005d", path, _dfdgg)); _caed != nil {
			return _caed
		}
	}
	return nil
}
func (_gebbcb WdST_RelFromH) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gebbcb.String(), start)
}
func (_cgaca *CT_FtnEdnSepRef) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dggdb := range start.Attr {
		if _dggdb.Name.Local == "id" {
			_ebdgg, _gbcae := _dd.ParseInt(_dggdb.Value, 10, 64)
			if _gbcae != nil {
				return _gbcae
			}
			_cgaca.IdAttr = _ebdgg
			continue
		}
	}
	for {
		_cbcb, _afcda := d.Token()
		if _afcda != nil {
			return _b.Errorf("parsing CT_FtnEdnSepRef:\u0020\u0025s", _afcda)
		}
		if _agabf, _dbefb := _cbcb.(_d.EndElement); _dbefb && _agabf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_beggb *CT_DocPartTypes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _beggb.AllAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:all"}, Value: _b.Sprintf("\u0025v", *_beggb.AllAttr)})
	}
	e.EncodeToken(start)
	if _beggb.Type != nil {
		_cabe := _d.StartElement{Name: _d.Name{Local: "w:type"}}
		for _, _egbed := range _beggb.Type {
			e.EncodeElement(_egbed, _cabe)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewEndnotes() *Endnotes {
	_bdegca := &Endnotes{}
	_bdegca.CT_Endnotes = *NewCT_Endnotes()
	return _bdegca
}

// ValidateWithPath validates the Footnotes and its children, prefixing error messages with path
func (_deeee *Footnotes) ValidateWithPath(path string) error {
	if _cfead := _deeee.CT_Footnotes.ValidateWithPath(path); _cfead != nil {
		return _cfead
	}
	return nil
}
func (_egcdd *CT_FramesetChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ggdee:
	for {
		_beecb, _bgfcee := d.Token()
		if _bgfcee != nil {
			return _bgfcee
		}
		switch _dfceg := _beecb.(type) {
		case _d.StartElement:
			switch _dfceg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "frameset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "frameset"}:
				_baaaf := NewCT_Frameset()
				if _dacfe := d.DecodeElement(_baaaf, &_dfceg); _dacfe != nil {
					return _dacfe
				}
				_egcdd.Frameset = append(_egcdd.Frameset, _baaaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "frame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "frame"}:
				_becf := NewCT_Frame()
				if _dcfae := d.DecodeElement(_becf, &_dfceg); _dcfae != nil {
					return _dcfae
				}
				_egcdd.Frame = append(_egcdd.Frame, _becf)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_FramesetChoice\u0020\u0025v", _dfceg.Name)
				if _cdcaag := d.Skip(); _cdcaag != nil {
					return _cdcaag
				}
			}
		case _d.EndElement:
			break _ggdee
		case _d.CharData:
		}
	}
	return nil
}
func (_edbeec *WdWsp) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return _edbeec.WdCT_WordprocessingShape.MarshalXML(e, start)
}

// ValidateWithPath validates the CT_DataBinding and its children, prefixing error messages with path
func (_cdbge *CT_DataBinding) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_MacroName and its children
func (_afdc *CT_MacroName) Validate() error { return _afdc.ValidateWithPath("CT_MacroName") }
func NewCT_Em() *CT_Em                      { _aacc := &CT_Em{}; _aacc.ValAttr = ST_Em(1); return _aacc }
func (_adeeec *ST_Direction) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgdfae, _ceegba := d.Token()
	if _ceegba != nil {
		return _ceegba
	}
	if _gdfcdc, _bbeaf := _fgdfae.(_d.EndElement); _bbeaf && _gdfcdc.Name == start.Name {
		*_adeeec = 1
		return nil
	}
	if _fddgcf, _edffgc := _fgdfae.(_d.CharData); !_edffgc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fgdfae)
	} else {
		switch string(_fddgcf) {
		case "":
			*_adeeec = 0
		case "ltr":
			*_adeeec = 1
		case "rtl":
			*_adeeec = 2
		}
	}
	_fgdfae, _ceegba = d.Token()
	if _ceegba != nil {
		return _ceegba
	}
	if _eabggb, _bfdcge := _fgdfae.(_d.EndElement); _bfdcge && _eabggb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fgdfae)
}

// ValidateWithPath validates the CT_Lock and its children, prefixing error messages with path
func (_ggacc *CT_Lock) ValidateWithPath(path string) error {
	if _cadc := _ggacc.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cadc != nil {
		return _cadc
	}
	return nil
}

// ValidateWithPath validates the CT_Drawing and its children, prefixing error messages with path
func (_bfec *CT_Drawing) ValidateWithPath(path string) error {
	for _fcaa, _fbge := range _bfec.Anchor {
		if _badbd := _fbge.ValidateWithPath(_b.Sprintf("\u0025s\u002fAnchor\u005b\u0025d\u005d", path, _fcaa)); _badbd != nil {
			return _badbd
		}
	}
	for _ebccf, _gcfba := range _bfec.Inline {
		if _cadb := _gcfba.ValidateWithPath(_b.Sprintf("\u0025s\u002fInline\u005b\u0025d\u005d", path, _ebccf)); _cadb != nil {
			return _cadb
		}
	}
	return nil
}

// Validate validates the CT_Rel and its children
func (_ebega *CT_Rel) Validate() error { return _ebega.ValidateWithPath("CT_Rel") }
func (_gedgf *CT_RPrDefault) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ecdd:
	for {
		_eeeecb, _ffefa := d.Token()
		if _ffefa != nil {
			return _ffefa
		}
		switch _dfgcfe := _eeeecb.(type) {
		case _d.StartElement:
			switch _dfgcfe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_gedgf.RPr = NewCT_RPr()
				if _aaaddf := d.DecodeElement(_gedgf.RPr, &_dfgcfe); _aaaddf != nil {
					return _aaaddf
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_RPrDefault \u0025v", _dfgcfe.Name)
				if _ecbf := d.Skip(); _ecbf != nil {
					return _ecbf
				}
			}
		case _d.EndElement:
			break _ecdd
		case _d.CharData:
		}
	}
	return nil
}

// ST_SignedHpsMeasure is a union type
type ST_SignedHpsMeasure struct {
	Int64               *int64
	ST_UniversalMeasure *string
}

// Validate validates the CT_PPrBase and its children
func (_cfdgc *CT_PPrBase) Validate() error { return _cfdgc.ValidateWithPath("CT_PPrBase") }
func (_efebd *CT_TcBorders) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_babfg:
	for {
		_dfdabe, _agdbg := d.Token()
		if _agdbg != nil {
			return _agdbg
		}
		switch _begba := _dfdabe.(type) {
		case _d.StartElement:
			switch _begba.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "top"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "top"}:
				_efebd.Top = NewCT_Border()
				if _ebafcg := d.DecodeElement(_efebd.Top, &_begba); _ebafcg != nil {
					return _ebafcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "start"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "start"}:
				_efebd.Start = NewCT_Border()
				if _gbgbfd := d.DecodeElement(_efebd.Start, &_begba); _gbgbfd != nil {
					return _gbgbfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "left"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "left"}:
				_efebd.Left = NewCT_Border()
				if _bgccc := d.DecodeElement(_efebd.Left, &_begba); _bgccc != nil {
					return _bgccc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bottom"}:
				_efebd.Bottom = NewCT_Border()
				if _gefbb := d.DecodeElement(_efebd.Bottom, &_begba); _gefbb != nil {
					return _gefbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "end"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "end"}:
				_efebd.End = NewCT_Border()
				if _faead := d.DecodeElement(_efebd.End, &_begba); _faead != nil {
					return _faead
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "right"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "right"}:
				_efebd.Right = NewCT_Border()
				if _fcgba := d.DecodeElement(_efebd.Right, &_begba); _fcgba != nil {
					return _fcgba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "insideH"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "insideH"}:
				_efebd.InsideH = NewCT_Border()
				if _edecc := d.DecodeElement(_efebd.InsideH, &_begba); _edecc != nil {
					return _edecc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "insideV"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "insideV"}:
				_efebd.InsideV = NewCT_Border()
				if _gabce := d.DecodeElement(_efebd.InsideV, &_begba); _gabce != nil {
					return _gabce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tl2br"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tl2br"}:
				_efebd.Tl2br = NewCT_Border()
				if _eceff := d.DecodeElement(_efebd.Tl2br, &_begba); _eceff != nil {
					return _eceff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tr2bl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tr2bl"}:
				_efebd.Tr2bl = NewCT_Border()
				if _bcffd := d.DecodeElement(_efebd.Tr2bl, &_begba); _bcffd != nil {
					return _bcffd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TcBorders\u0020\u0025v", _begba.Name)
				if _gbbeg := d.Skip(); _gbbeg != nil {
					return _gbbeg
				}
			}
		case _d.EndElement:
			break _babfg
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Color and its children
func (_bba *CT_Color) Validate() error { return _bba.ValidateWithPath("CT_Color") }
func (_bbcca *CT_PPrChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _bbcca.AuthorAttr)})
	if _bbcca.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_bbcca.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _bbcca.IdAttr)})
	e.EncodeToken(start)
	_gcged := _d.StartElement{Name: _d.Name{Local: "w:pPr"}}
	e.EncodeElement(_bbcca.PPr, _gcged)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gdfde *CT_Style) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _acfgd := range start.Attr {
		if _acfgd.Name.Local == "type" {
			_gdfde.TypeAttr.UnmarshalXMLAttr(_acfgd)
			continue
		}
		if _acfgd.Name.Local == "default" {
			_bebab, _facdg := ParseUnionST_OnOff(_acfgd.Value)
			if _facdg != nil {
				return _facdg
			}
			_gdfde.DefaultAttr = &_bebab
			continue
		}
		if _acfgd.Name.Local == "customStyle" {
			_caede, _acbdf := ParseUnionST_OnOff(_acfgd.Value)
			if _acbdf != nil {
				return _acbdf
			}
			_gdfde.CustomStyleAttr = &_caede
			continue
		}
		if _acfgd.Name.Local == "styleId" {
			_dgffb, _ggebbc := _acfgd.Value, error(nil)
			if _ggebbc != nil {
				return _ggebbc
			}
			_gdfde.StyleIdAttr = &_dgffb
			continue
		}
	}
_ffgbd:
	for {
		_beggg, _fffgeb := d.Token()
		if _fffgeb != nil {
			return _fffgeb
		}
		switch _gfafe := _beggg.(type) {
		case _d.StartElement:
			switch _gfafe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "name"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "name"}:
				_gdfde.Name = NewCT_String()
				if _cdacg := d.DecodeElement(_gdfde.Name, &_gfafe); _cdacg != nil {
					return _cdacg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "aliases"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "aliases"}:
				_gdfde.Aliases = NewCT_String()
				if _afcddb := d.DecodeElement(_gdfde.Aliases, &_gfafe); _afcddb != nil {
					return _afcddb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "basedOn"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "basedOn"}:
				_gdfde.BasedOn = NewCT_String()
				if _eeaaa := d.DecodeElement(_gdfde.BasedOn, &_gfafe); _eeaaa != nil {
					return _eeaaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "next"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "next"}:
				_gdfde.Next = NewCT_String()
				if _fccbf := d.DecodeElement(_gdfde.Next, &_gfafe); _fccbf != nil {
					return _fccbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "link"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "link"}:
				_gdfde.Link = NewCT_String()
				if _bacbe := d.DecodeElement(_gdfde.Link, &_gfafe); _bacbe != nil {
					return _bacbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoRedefine"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoRedefine"}:
				_gdfde.AutoRedefine = NewCT_OnOff()
				if _adeeg := d.DecodeElement(_gdfde.AutoRedefine, &_gfafe); _adeeg != nil {
					return _adeeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hidden"}:
				_gdfde.Hidden = NewCT_OnOff()
				if _gggcc := d.DecodeElement(_gdfde.Hidden, &_gfafe); _gggcc != nil {
					return _gggcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "uiPriority"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "uiPriority"}:
				_gdfde.UiPriority = NewCT_DecimalNumber()
				if _bbcdd := d.DecodeElement(_gdfde.UiPriority, &_gfafe); _bbcdd != nil {
					return _bbcdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "semiHidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "semiHidden"}:
				_gdfde.SemiHidden = NewCT_OnOff()
				if _edge := d.DecodeElement(_gdfde.SemiHidden, &_gfafe); _edge != nil {
					return _edge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "unhideWhenUsed"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "unhideWhenUsed"}:
				_gdfde.UnhideWhenUsed = NewCT_OnOff()
				if _ccbcg := d.DecodeElement(_gdfde.UnhideWhenUsed, &_gfafe); _ccbcg != nil {
					return _ccbcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "qFormat"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "qFormat"}:
				_gdfde.QFormat = NewCT_OnOff()
				if _gbdbd := d.DecodeElement(_gdfde.QFormat, &_gfafe); _gbdbd != nil {
					return _gbdbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "locked"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "locked"}:
				_gdfde.Locked = NewCT_OnOff()
				if _eagcd := d.DecodeElement(_gdfde.Locked, &_gfafe); _eagcd != nil {
					return _eagcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "personal"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "personal"}:
				_gdfde.Personal = NewCT_OnOff()
				if _edbfec := d.DecodeElement(_gdfde.Personal, &_gfafe); _edbfec != nil {
					return _edbfec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "personalCompose"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "personalCompose"}:
				_gdfde.PersonalCompose = NewCT_OnOff()
				if _bcffe := d.DecodeElement(_gdfde.PersonalCompose, &_gfafe); _bcffe != nil {
					return _bcffe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "personalReply"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "personalReply"}:
				_gdfde.PersonalReply = NewCT_OnOff()
				if _gbbbd := d.DecodeElement(_gdfde.PersonalReply, &_gfafe); _gbbbd != nil {
					return _gbbbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rsid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rsid"}:
				_gdfde.Rsid = NewCT_LongHexNumber()
				if _bafef := d.DecodeElement(_gdfde.Rsid, &_gfafe); _bafef != nil {
					return _bafef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPr"}:
				_gdfde.PPr = NewCT_PPrGeneral()
				if _cgfcg := d.DecodeElement(_gdfde.PPr, &_gfafe); _cgfcg != nil {
					return _cgfcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_gdfde.RPr = NewCT_RPr()
				if _deddg := d.DecodeElement(_gdfde.RPr, &_gfafe); _deddg != nil {
					return _deddg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPr"}:
				_gdfde.TblPr = NewCT_TblPrBase()
				if _dcfgd := d.DecodeElement(_gdfde.TblPr, &_gfafe); _dcfgd != nil {
					return _dcfgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trPr"}:
				_gdfde.TrPr = NewCT_TrPr()
				if _bbeab := d.DecodeElement(_gdfde.TrPr, &_gfafe); _bbeab != nil {
					return _bbeab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcPr"}:
				_gdfde.TcPr = NewCT_TcPr()
				if _adbfce := d.DecodeElement(_gdfde.TcPr, &_gfafe); _adbfce != nil {
					return _adbfce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblStylePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblStylePr"}:
				_aegcae := NewCT_TblStylePr()
				if _efccf := d.DecodeElement(_aegcae, &_gfafe); _efccf != nil {
					return _efccf
				}
				_gdfde.TblStylePr = append(_gdfde.TblStylePr, _aegcae)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Style\u0020\u0025v", _gfafe.Name)
				if _bgcdd := d.Skip(); _bgcdd != nil {
					return _bgcdd
				}
			}
		case _d.EndElement:
			break _ffgbd
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_StylePaneFilter and its children
func (_fdefg *CT_StylePaneFilter) Validate() error {
	return _fdefg.ValidateWithPath("CT_StylePaneFilter")
}
func (_cfeeb *CT_TextAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cfeeb.ValAttr = ST_TextAlignment(1)
	for _, _ffgde := range start.Attr {
		if _ffgde.Name.Local == "val" {
			_cfeeb.ValAttr.UnmarshalXMLAttr(_ffgde)
			continue
		}
	}
	for {
		_aagfe, _fdded := d.Token()
		if _fdded != nil {
			return _b.Errorf("parsing\u0020CT_TextAlignment: \u0025s", _fdded)
		}
		if _ecceb, _ebage := _aagfe.(_d.EndElement); _ebage && _ecceb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the EG_RPrContent and its children, prefixing error messages with path
func (_acfaea *EG_RPrContent) ValidateWithPath(path string) error {
	if _acfaea.RStyle != nil {
		if _ebfdaf := _acfaea.RStyle.ValidateWithPath(path + "\u002fRStyle"); _ebfdaf != nil {
			return _ebfdaf
		}
	}
	if _acfaea.RFonts != nil {
		if _egaab := _acfaea.RFonts.ValidateWithPath(path + "\u002fRFonts"); _egaab != nil {
			return _egaab
		}
	}
	if _acfaea.B != nil {
		if _gdgbe := _acfaea.B.ValidateWithPath(path + "\u002fB"); _gdgbe != nil {
			return _gdgbe
		}
	}
	if _acfaea.BCs != nil {
		if _accfce := _acfaea.BCs.ValidateWithPath(path + "\u002fBCs"); _accfce != nil {
			return _accfce
		}
	}
	if _acfaea.I != nil {
		if _bdebf := _acfaea.I.ValidateWithPath(path + "\u002fI"); _bdebf != nil {
			return _bdebf
		}
	}
	if _acfaea.ICs != nil {
		if _ffcfb := _acfaea.ICs.ValidateWithPath(path + "\u002fICs"); _ffcfb != nil {
			return _ffcfb
		}
	}
	if _acfaea.Caps != nil {
		if _ffdcf := _acfaea.Caps.ValidateWithPath(path + "\u002fCaps"); _ffdcf != nil {
			return _ffdcf
		}
	}
	if _acfaea.SmallCaps != nil {
		if _agbfd := _acfaea.SmallCaps.ValidateWithPath(path + "\u002fSmallCaps"); _agbfd != nil {
			return _agbfd
		}
	}
	if _acfaea.Strike != nil {
		if _bcdcbg := _acfaea.Strike.ValidateWithPath(path + "\u002fStrike"); _bcdcbg != nil {
			return _bcdcbg
		}
	}
	if _acfaea.Dstrike != nil {
		if _cdacac := _acfaea.Dstrike.ValidateWithPath(path + "\u002fDstrike"); _cdacac != nil {
			return _cdacac
		}
	}
	if _acfaea.Outline != nil {
		if _fgffe := _acfaea.Outline.ValidateWithPath(path + "\u002fOutline"); _fgffe != nil {
			return _fgffe
		}
	}
	if _acfaea.Shadow != nil {
		if _cfffcg := _acfaea.Shadow.ValidateWithPath(path + "\u002fShadow"); _cfffcg != nil {
			return _cfffcg
		}
	}
	if _acfaea.Emboss != nil {
		if _gbgeb := _acfaea.Emboss.ValidateWithPath(path + "\u002fEmboss"); _gbgeb != nil {
			return _gbgeb
		}
	}
	if _acfaea.Imprint != nil {
		if _edfagb := _acfaea.Imprint.ValidateWithPath(path + "\u002fImprint"); _edfagb != nil {
			return _edfagb
		}
	}
	if _acfaea.NoProof != nil {
		if _cedfba := _acfaea.NoProof.ValidateWithPath(path + "\u002fNoProof"); _cedfba != nil {
			return _cedfba
		}
	}
	if _acfaea.SnapToGrid != nil {
		if _aeggc := _acfaea.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _aeggc != nil {
			return _aeggc
		}
	}
	if _acfaea.Vanish != nil {
		if _deae := _acfaea.Vanish.ValidateWithPath(path + "\u002fVanish"); _deae != nil {
			return _deae
		}
	}
	if _acfaea.WebHidden != nil {
		if _gbddf := _acfaea.WebHidden.ValidateWithPath(path + "\u002fWebHidden"); _gbddf != nil {
			return _gbddf
		}
	}
	if _acfaea.Color != nil {
		if _cadgg := _acfaea.Color.ValidateWithPath(path + "\u002fColor"); _cadgg != nil {
			return _cadgg
		}
	}
	if _acfaea.Spacing != nil {
		if _cgbcf := _acfaea.Spacing.ValidateWithPath(path + "\u002fSpacing"); _cgbcf != nil {
			return _cgbcf
		}
	}
	if _acfaea.W != nil {
		if _cafag := _acfaea.W.ValidateWithPath(path + "\u002fW"); _cafag != nil {
			return _cafag
		}
	}
	if _acfaea.Kern != nil {
		if _eedgd := _acfaea.Kern.ValidateWithPath(path + "\u002fKern"); _eedgd != nil {
			return _eedgd
		}
	}
	if _acfaea.Position != nil {
		if _bgdde := _acfaea.Position.ValidateWithPath(path + "\u002fPosition"); _bgdde != nil {
			return _bgdde
		}
	}
	if _acfaea.Sz != nil {
		if _eceec := _acfaea.Sz.ValidateWithPath(path + "\u002fSz"); _eceec != nil {
			return _eceec
		}
	}
	if _acfaea.SzCs != nil {
		if _efccd := _acfaea.SzCs.ValidateWithPath(path + "\u002fSzCs"); _efccd != nil {
			return _efccd
		}
	}
	if _acfaea.Highlight != nil {
		if _fgdfe := _acfaea.Highlight.ValidateWithPath(path + "\u002fHighlight"); _fgdfe != nil {
			return _fgdfe
		}
	}
	if _acfaea.U != nil {
		if _dbgfe := _acfaea.U.ValidateWithPath(path + "\u002fU"); _dbgfe != nil {
			return _dbgfe
		}
	}
	if _acfaea.Effect != nil {
		if _ebdae := _acfaea.Effect.ValidateWithPath(path + "\u002fEffect"); _ebdae != nil {
			return _ebdae
		}
	}
	if _acfaea.Bdr != nil {
		if _eafdcg := _acfaea.Bdr.ValidateWithPath(path + "\u002fBdr"); _eafdcg != nil {
			return _eafdcg
		}
	}
	if _acfaea.Shd != nil {
		if _dgbfd := _acfaea.Shd.ValidateWithPath(path + "\u002fShd"); _dgbfd != nil {
			return _dgbfd
		}
	}
	if _acfaea.FitText != nil {
		if _gacgdd := _acfaea.FitText.ValidateWithPath(path + "\u002fFitText"); _gacgdd != nil {
			return _gacgdd
		}
	}
	if _acfaea.VertAlign != nil {
		if _dfbaf := _acfaea.VertAlign.ValidateWithPath(path + "\u002fVertAlign"); _dfbaf != nil {
			return _dfbaf
		}
	}
	if _acfaea.Rtl != nil {
		if _ededfa := _acfaea.Rtl.ValidateWithPath(path + "\u002fRtl"); _ededfa != nil {
			return _ededfa
		}
	}
	if _acfaea.Cs != nil {
		if _bdadfg := _acfaea.Cs.ValidateWithPath(path + "\u002fCs"); _bdadfg != nil {
			return _bdadfg
		}
	}
	if _acfaea.Em != nil {
		if _begbe := _acfaea.Em.ValidateWithPath(path + "\u002fEm"); _begbe != nil {
			return _begbe
		}
	}
	if _acfaea.Lang != nil {
		if _agefdg := _acfaea.Lang.ValidateWithPath(path + "\u002fLang"); _agefdg != nil {
			return _agefdg
		}
	}
	if _acfaea.EastAsianLayout != nil {
		if _beedg := _acfaea.EastAsianLayout.ValidateWithPath(path + "\u002fEastAsianLayout"); _beedg != nil {
			return _beedg
		}
	}
	if _acfaea.SpecVanish != nil {
		if _ccaba := _acfaea.SpecVanish.ValidateWithPath(path + "/SpecVanish"); _ccaba != nil {
			return _ccaba
		}
	}
	if _acfaea.OMath != nil {
		if _fcgcf := _acfaea.OMath.ValidateWithPath(path + "\u002fOMath"); _fcgcf != nil {
			return _fcgcf
		}
	}
	if _acfaea.RPrChange != nil {
		if _gcdeg := _acfaea.RPrChange.ValidateWithPath(path + "\u002fRPrChange"); _gcdeg != nil {
			return _gcdeg
		}
	}
	return nil
}
func (_egdbd *EG_PContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aadbca:
	for {
		_dgaeff, _gdace := d.Token()
		if _gdace != nil {
			return _gdace
		}
		switch _dfgfg := _dgaeff.(type) {
		case _d.StartElement:
			switch _dfgfg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_cfgggc := NewCT_SimpleField()
				if _egbdfe := d.DecodeElement(_cfgggc, &_dfgfg); _egbdfe != nil {
					return _egbdfe
				}
				_egdbd.FldSimple = append(_egdbd.FldSimple, _cfgggc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_egdbd.Hyperlink = NewCT_Hyperlink()
				if _cabge := d.DecodeElement(_egdbd.Hyperlink, &_dfgfg); _cabge != nil {
					return _cabge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_egdbd.SubDoc = NewCT_Rel()
				if _bfcfc := d.DecodeElement(_egdbd.SubDoc, &_dfgfg); _bfcfc != nil {
					return _bfcfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_adcdac := NewEG_ContentRunContent()
				_adcdac.CustomXml = NewCT_CustomXmlRun()
				if _ebgdgd := d.DecodeElement(_adcdac.CustomXml, &_dfgfg); _ebgdgd != nil {
					return _ebgdgd
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _adcdac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_bbagbg := NewEG_ContentRunContent()
				_bbagbg.SmartTag = NewCT_SmartTagRun()
				if _dccae := d.DecodeElement(_bbagbg.SmartTag, &_dfgfg); _dccae != nil {
					return _dccae
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _bbagbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_dbgegd := NewEG_ContentRunContent()
				_dbgegd.Sdt = NewCT_SdtRun()
				if _eeedba := d.DecodeElement(_dbgegd.Sdt, &_dfgfg); _eeedba != nil {
					return _eeedba
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _dbgegd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_gbbca := NewEG_ContentRunContent()
				_gbbca.Dir = NewCT_DirContentRun()
				if _bcfbd := d.DecodeElement(_gbbca.Dir, &_dfgfg); _bcfbd != nil {
					return _bcfbd
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _gbbca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_cgaeb := NewEG_ContentRunContent()
				_cgaeb.Bdo = NewCT_BdoContentRun()
				if _bfcba := d.DecodeElement(_cgaeb.Bdo, &_dfgfg); _bfcba != nil {
					return _bfcba
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _cgaeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_bacfcf := NewEG_ContentRunContent()
				_bacfcf.R = NewCT_R()
				if _bcddf := d.DecodeElement(_bacfcf.R, &_dfgfg); _bcddf != nil {
					return _bcddf
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _bacfcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_adaffd := NewEG_ContentRunContent()
				_ebcadf := NewEG_RunLevelElts()
				_ebcadf.ProofErr = NewCT_ProofErr()
				if _degfc := d.DecodeElement(_ebcadf.ProofErr, &_dfgfg); _degfc != nil {
					return _degfc
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _adaffd)
				_adaffd.EG_RunLevelElts = append(_adaffd.EG_RunLevelElts, _ebcadf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_gfbgd := NewEG_ContentRunContent()
				_fefaeg := NewEG_RunLevelElts()
				_fefaeg.PermStart = NewCT_PermStart()
				if _feefgg := d.DecodeElement(_fefaeg.PermStart, &_dfgfg); _feefgg != nil {
					return _feefgg
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _gfbgd)
				_gfbgd.EG_RunLevelElts = append(_gfbgd.EG_RunLevelElts, _fefaeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_ddddbd := NewEG_ContentRunContent()
				_gdceecg := NewEG_RunLevelElts()
				_gdceecg.PermEnd = NewCT_Perm()
				if _aacgd := d.DecodeElement(_gdceecg.PermEnd, &_dfgfg); _aacgd != nil {
					return _aacgd
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _ddddbd)
				_ddddbd.EG_RunLevelElts = append(_ddddbd.EG_RunLevelElts, _gdceecg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cfabg := NewEG_ContentRunContent()
				_aebcf := NewEG_RunLevelElts()
				_aebcf.Ins = NewCT_RunTrackChange()
				if _gddbf := d.DecodeElement(_aebcf.Ins, &_dfgfg); _gddbf != nil {
					return _gddbf
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _cfabg)
				_cfabg.EG_RunLevelElts = append(_cfabg.EG_RunLevelElts, _aebcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_cdegda := NewEG_ContentRunContent()
				_efcag := NewEG_RunLevelElts()
				_efcag.Del = NewCT_RunTrackChange()
				if _efaab := d.DecodeElement(_efcag.Del, &_dfgfg); _efaab != nil {
					return _efaab
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _cdegda)
				_cdegda.EG_RunLevelElts = append(_cdegda.EG_RunLevelElts, _efcag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_dcddg := NewEG_ContentRunContent()
				_gecgf := NewEG_RunLevelElts()
				_gecgf.MoveFrom = NewCT_RunTrackChange()
				if _cfdee := d.DecodeElement(_gecgf.MoveFrom, &_dfgfg); _cfdee != nil {
					return _cfdee
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _dcddg)
				_dcddg.EG_RunLevelElts = append(_dcddg.EG_RunLevelElts, _gecgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_eeebb := NewEG_ContentRunContent()
				_gggbc := NewEG_RunLevelElts()
				_gggbc.MoveTo = NewCT_RunTrackChange()
				if _fggde := d.DecodeElement(_gggbc.MoveTo, &_dfgfg); _fggde != nil {
					return _fggde
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _eeebb)
				_eeebb.EG_RunLevelElts = append(_eeebb.EG_RunLevelElts, _gggbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_eddfb := NewEG_ContentRunContent()
				_degeec := NewEG_RunLevelElts()
				_acebd := NewEG_RangeMarkupElements()
				_acebd.BookmarkStart = NewCT_Bookmark()
				if _dccced := d.DecodeElement(_acebd.BookmarkStart, &_dfgfg); _dccced != nil {
					return _dccced
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _eddfb)
				_eddfb.EG_RunLevelElts = append(_eddfb.EG_RunLevelElts, _degeec)
				_degeec.EG_RangeMarkupElements = append(_degeec.EG_RangeMarkupElements, _acebd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_bbfdb := NewEG_ContentRunContent()
				_fbgaf := NewEG_RunLevelElts()
				_fbddg := NewEG_RangeMarkupElements()
				_fbddg.BookmarkEnd = NewCT_MarkupRange()
				if _fbgcf := d.DecodeElement(_fbddg.BookmarkEnd, &_dfgfg); _fbgcf != nil {
					return _fbgcf
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _bbfdb)
				_bbfdb.EG_RunLevelElts = append(_bbfdb.EG_RunLevelElts, _fbgaf)
				_fbgaf.EG_RangeMarkupElements = append(_fbgaf.EG_RangeMarkupElements, _fbddg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fbfab := NewEG_ContentRunContent()
				_bcdgeg := NewEG_RunLevelElts()
				_gebdc := NewEG_RangeMarkupElements()
				_gebdc.MoveFromRangeStart = NewCT_MoveBookmark()
				if _fbeag := d.DecodeElement(_gebdc.MoveFromRangeStart, &_dfgfg); _fbeag != nil {
					return _fbeag
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _fbfab)
				_fbfab.EG_RunLevelElts = append(_fbfab.EG_RunLevelElts, _bcdgeg)
				_bcdgeg.EG_RangeMarkupElements = append(_bcdgeg.EG_RangeMarkupElements, _gebdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_acefg := NewEG_ContentRunContent()
				_cbaed := NewEG_RunLevelElts()
				_dgabac := NewEG_RangeMarkupElements()
				_dgabac.MoveFromRangeEnd = NewCT_MarkupRange()
				if _dgead := d.DecodeElement(_dgabac.MoveFromRangeEnd, &_dfgfg); _dgead != nil {
					return _dgead
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _acefg)
				_acefg.EG_RunLevelElts = append(_acefg.EG_RunLevelElts, _cbaed)
				_cbaed.EG_RangeMarkupElements = append(_cbaed.EG_RangeMarkupElements, _dgabac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_afdacf := NewEG_ContentRunContent()
				_acbgde := NewEG_RunLevelElts()
				_gceedf := NewEG_RangeMarkupElements()
				_gceedf.MoveToRangeStart = NewCT_MoveBookmark()
				if _dacddb := d.DecodeElement(_gceedf.MoveToRangeStart, &_dfgfg); _dacddb != nil {
					return _dacddb
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _afdacf)
				_afdacf.EG_RunLevelElts = append(_afdacf.EG_RunLevelElts, _acbgde)
				_acbgde.EG_RangeMarkupElements = append(_acbgde.EG_RangeMarkupElements, _gceedf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_cbdfb := NewEG_ContentRunContent()
				_faeefa := NewEG_RunLevelElts()
				_gfafg := NewEG_RangeMarkupElements()
				_gfafg.MoveToRangeEnd = NewCT_MarkupRange()
				if _agbcf := d.DecodeElement(_gfafg.MoveToRangeEnd, &_dfgfg); _agbcf != nil {
					return _agbcf
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _cbdfb)
				_cbdfb.EG_RunLevelElts = append(_cbdfb.EG_RunLevelElts, _faeefa)
				_faeefa.EG_RangeMarkupElements = append(_faeefa.EG_RangeMarkupElements, _gfafg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_gaafa := NewEG_ContentRunContent()
				_gfafaa := NewEG_RunLevelElts()
				_afeegd := NewEG_RangeMarkupElements()
				_afeegd.CommentRangeStart = NewCT_MarkupRange()
				if _deeeac := d.DecodeElement(_afeegd.CommentRangeStart, &_dfgfg); _deeeac != nil {
					return _deeeac
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _gaafa)
				_gaafa.EG_RunLevelElts = append(_gaafa.EG_RunLevelElts, _gfafaa)
				_gfafaa.EG_RangeMarkupElements = append(_gfafaa.EG_RangeMarkupElements, _afeegd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_ggaad := NewEG_ContentRunContent()
				_ebacga := NewEG_RunLevelElts()
				_gbcbf := NewEG_RangeMarkupElements()
				_gbcbf.CommentRangeEnd = NewCT_MarkupRange()
				if _ffffgc := d.DecodeElement(_gbcbf.CommentRangeEnd, &_dfgfg); _ffffgc != nil {
					return _ffffgc
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _ggaad)
				_ggaad.EG_RunLevelElts = append(_ggaad.EG_RunLevelElts, _ebacga)
				_ebacga.EG_RangeMarkupElements = append(_ebacga.EG_RangeMarkupElements, _gbcbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gaegcg := NewEG_ContentRunContent()
				_edfda := NewEG_RunLevelElts()
				_febbdd := NewEG_RangeMarkupElements()
				_febbdd.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _gfdef := d.DecodeElement(_febbdd.CustomXmlInsRangeStart, &_dfgfg); _gfdef != nil {
					return _gfdef
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _gaegcg)
				_gaegcg.EG_RunLevelElts = append(_gaegcg.EG_RunLevelElts, _edfda)
				_edfda.EG_RangeMarkupElements = append(_edfda.EG_RangeMarkupElements, _febbdd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_eddead := NewEG_ContentRunContent()
				_fbdbg := NewEG_RunLevelElts()
				_fdgffe := NewEG_RangeMarkupElements()
				_fdgffe.CustomXmlInsRangeEnd = NewCT_Markup()
				if _gfffcg := d.DecodeElement(_fdgffe.CustomXmlInsRangeEnd, &_dfgfg); _gfffcg != nil {
					return _gfffcg
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _eddead)
				_eddead.EG_RunLevelElts = append(_eddead.EG_RunLevelElts, _fbdbg)
				_fbdbg.EG_RangeMarkupElements = append(_fbdbg.EG_RangeMarkupElements, _fdgffe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_geccd := NewEG_ContentRunContent()
				_adadc := NewEG_RunLevelElts()
				_affdg := NewEG_RangeMarkupElements()
				_affdg.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gdebb := d.DecodeElement(_affdg.CustomXmlDelRangeStart, &_dfgfg); _gdebb != nil {
					return _gdebb
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _geccd)
				_geccd.EG_RunLevelElts = append(_geccd.EG_RunLevelElts, _adadc)
				_adadc.EG_RangeMarkupElements = append(_adadc.EG_RangeMarkupElements, _affdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_accga := NewEG_ContentRunContent()
				_gefca := NewEG_RunLevelElts()
				_gdcbba := NewEG_RangeMarkupElements()
				_gdcbba.CustomXmlDelRangeEnd = NewCT_Markup()
				if _cadede := d.DecodeElement(_gdcbba.CustomXmlDelRangeEnd, &_dfgfg); _cadede != nil {
					return _cadede
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _accga)
				_accga.EG_RunLevelElts = append(_accga.EG_RunLevelElts, _gefca)
				_gefca.EG_RangeMarkupElements = append(_gefca.EG_RangeMarkupElements, _gdcbba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_gadge := NewEG_ContentRunContent()
				_fgecf := NewEG_RunLevelElts()
				_fbggf := NewEG_RangeMarkupElements()
				_fbggf.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _afebg := d.DecodeElement(_fbggf.CustomXmlMoveFromRangeStart, &_dfgfg); _afebg != nil {
					return _afebg
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _gadge)
				_gadge.EG_RunLevelElts = append(_gadge.EG_RunLevelElts, _fgecf)
				_fgecf.EG_RangeMarkupElements = append(_fgecf.EG_RangeMarkupElements, _fbggf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_bgfgeg := NewEG_ContentRunContent()
				_fbdff := NewEG_RunLevelElts()
				_gbfaf := NewEG_RangeMarkupElements()
				_gbfaf.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _gbaebc := d.DecodeElement(_gbfaf.CustomXmlMoveFromRangeEnd, &_dfgfg); _gbaebc != nil {
					return _gbaebc
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _bgfgeg)
				_bgfgeg.EG_RunLevelElts = append(_bgfgeg.EG_RunLevelElts, _fbdff)
				_fbdff.EG_RangeMarkupElements = append(_fbdff.EG_RangeMarkupElements, _gbfaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_dafaa := NewEG_ContentRunContent()
				_efdbd := NewEG_RunLevelElts()
				_gacfe := NewEG_RangeMarkupElements()
				_gacfe.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _cgabb := d.DecodeElement(_gacfe.CustomXmlMoveToRangeStart, &_dfgfg); _cgabb != nil {
					return _cgabb
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _dafaa)
				_dafaa.EG_RunLevelElts = append(_dafaa.EG_RunLevelElts, _efdbd)
				_efdbd.EG_RangeMarkupElements = append(_efdbd.EG_RangeMarkupElements, _gacfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_eccaae := NewEG_ContentRunContent()
				_beaaaf := NewEG_RunLevelElts()
				_cddaf := NewEG_RangeMarkupElements()
				_cddaf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _ceebb := d.DecodeElement(_cddaf.CustomXmlMoveToRangeEnd, &_dfgfg); _ceebb != nil {
					return _ceebb
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _eccaae)
				_eccaae.EG_RunLevelElts = append(_eccaae.EG_RunLevelElts, _beaaaf)
				_beaaaf.EG_RangeMarkupElements = append(_beaaaf.EG_RangeMarkupElements, _cddaf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_adfcbf := NewEG_ContentRunContent()
				_dgfdcd := NewEG_RunLevelElts()
				_caafb := NewEG_MathContent()
				_caafb.OMathPara = _f.NewOMathPara()
				if _dagbba := d.DecodeElement(_caafb.OMathPara, &_dfgfg); _dagbba != nil {
					return _dagbba
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _adfcbf)
				_adfcbf.EG_RunLevelElts = append(_adfcbf.EG_RunLevelElts, _dgfdcd)
				_dgfdcd.EG_MathContent = append(_dgfdcd.EG_MathContent, _caafb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_eecdebe := NewEG_ContentRunContent()
				_edcff := NewEG_RunLevelElts()
				_afcafa := NewEG_MathContent()
				_afcafa.OMath = _f.NewOMath()
				if _caadaa := d.DecodeElement(_afcafa.OMath, &_dfgfg); _caadaa != nil {
					return _caadaa
				}
				_egdbd.EG_ContentRunContent = append(_egdbd.EG_ContentRunContent, _eecdebe)
				_eecdebe.EG_RunLevelElts = append(_eecdebe.EG_RunLevelElts, _edcff)
				_edcff.EG_MathContent = append(_edcff.EG_MathContent, _afcafa)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_PContent\u0020\u0025v", _dfgfg.Name)
				if _gcdcdc := d.Skip(); _gcdcdc != nil {
					return _gcdcdc
				}
			}
		case _d.EndElement:
			break _aadbca
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_TrackChangeRange() *CT_TrackChangeRange { _gdgcdf := &CT_TrackChangeRange{}; return _gdgcdf }

type CT_OdsoFieldMapData struct {

	// Merge Field Mapping
	Type *CT_MailMergeOdsoFMDFieldType

	// Data Source Name for Column
	Name *CT_String

	// Predefined Merge Field Name
	MappedName *CT_String

	// Index of Column Being Mapped
	Column *CT_DecimalNumber

	// Merge Field Name Language ID
	Lid *CT_Lang

	// Use Country-Based Address Field Ordering
	DynamicAddress *CT_OnOff
}

func (_ddbce ST_VAnchor) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ddbce.String(), start)
}

// Validate validates the CT_DocDefaults and its children
func (_agdfd *CT_DocDefaults) Validate() error { return _agdfd.ValidateWithPath("CT_DocDefaults") }
func (_bbbb *CT_DirContentRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbbb.ValAttr != ST_DirectionUnset {
		_bfdag, _dgcdd := _bbbb.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _dgcdd != nil {
			return _dgcdd
		}
		start.Attr = append(start.Attr, _bfdag)
	}
	e.EncodeToken(start)
	if _bbbb.FldSimple != nil {
		_ceaa := _d.StartElement{Name: _d.Name{Local: "w:fldSimple"}}
		for _, _aecc := range _bbbb.FldSimple {
			e.EncodeElement(_aecc, _ceaa)
		}
	}
	if _bbbb.Hyperlink != nil {
		_abbc := _d.StartElement{Name: _d.Name{Local: "w:hyperlink"}}
		e.EncodeElement(_bbbb.Hyperlink, _abbc)
	}
	if _bbbb.SubDoc != nil {
		_efdb := _d.StartElement{Name: _d.Name{Local: "w:subDoc"}}
		e.EncodeElement(_bbbb.SubDoc, _efdb)
	}
	if _bbbb.EG_ContentRunContent != nil {
		for _, _adgce := range _bbbb.EG_ContentRunContent {
			_adgce.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_AutoCaptions struct {

	// Single Automatic Captioning Setting
	AutoCaption []*CT_AutoCaption
}

func (_befge *WdCT_WordprocessingShapeChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _befge.CNvSpPr != nil {
		_edddd := _d.StartElement{Name: _d.Name{Local: "wp:cNvSpPr"}}
		e.EncodeElement(_befge.CNvSpPr, _edddd)
	}
	if _befge.CNvCnPr != nil {
		_babgdg := _d.StartElement{Name: _d.Name{Local: "wp:cNvCnPr"}}
		e.EncodeElement(_befge.CNvCnPr, _babgdg)
	}
	return nil
}
func NewCT_NumPicBullet() *CT_NumPicBullet { _bgacg := &CT_NumPicBullet{}; return _bgacg }

// Validate validates the CT_FontFamily and its children
func (_bdcbbe *CT_FontFamily) Validate() error { return _bdcbbe.ValidateWithPath("CT_FontFamily") }

// Validate validates the CT_GlossaryDocument and its children
func (_bcfg *CT_GlossaryDocument) Validate() error {
	return _bcfg.ValidateWithPath("CT_GlossaryDocument")
}

// Validate validates the CT_DocPartType and its children
func (_dggfa *CT_DocPartType) Validate() error { return _dggfa.ValidateWithPath("CT_DocPartType") }

// ValidateWithPath validates the CT_SdtContentRun and its children, prefixing error messages with path
func (_gaabbd *CT_SdtContentRun) ValidateWithPath(path string) error {
	for _cfffd, _ebace := range _gaabbd.FldSimple {
		if _adcb := _ebace.ValidateWithPath(_b.Sprintf("\u0025s/FldSimple\u005b\u0025d\u005d", path, _cfffd)); _adcb != nil {
			return _adcb
		}
	}
	if _gaabbd.Hyperlink != nil {
		if _fbecb := _gaabbd.Hyperlink.ValidateWithPath(path + "\u002fHyperlink"); _fbecb != nil {
			return _fbecb
		}
	}
	if _gaabbd.SubDoc != nil {
		if _fbfgbf := _gaabbd.SubDoc.ValidateWithPath(path + "\u002fSubDoc"); _fbfgbf != nil {
			return _fbfgbf
		}
	}
	for _ebdbec, _dcaeg := range _gaabbd.EG_ContentRunContent {
		if _dbbeb := _dcaeg.ValidateWithPath(_b.Sprintf("%s\u002fEG_ContentRunContent[\u0025d\u005d", path, _ebdbec)); _dbbeb != nil {
			return _dbbeb
		}
	}
	return nil
}
func NewCT_TextAlignment() *CT_TextAlignment {
	_gbcd := &CT_TextAlignment{}
	_gbcd.ValAttr = ST_TextAlignment(1)
	return _gbcd
}

type CT_Pitch struct {

	// Value
	ValAttr ST_Pitch
}

func (_ddgdb *CT_TwipsMeasure) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _agdcd := range start.Attr {
		if _agdcd.Name.Local == "val" {
			_cgecc, _fabgc := ParseUnionST_TwipsMeasure(_agdcd.Value)
			if _fabgc != nil {
				return _fabgc
			}
			_ddgdb.ValAttr = _cgecc
			continue
		}
	}
	for {
		_ddfadb, _edbcd := d.Token()
		if _edbcd != nil {
			return _b.Errorf("parsing CT_TwipsMeasure:\u0020\u0025s", _edbcd)
		}
		if _ggace, _eecgg := _ddfadb.(_d.EndElement); _eecgg && _ggace.Name == start.Name {
			break
		}
	}
	return nil
}
func NewEG_RangeMarkupElements() *EG_RangeMarkupElements {
	_cbabc := &EG_RangeMarkupElements{}
	return _cbabc
}
func (_fbgfac *ST_DecimalNumberOrPercent) Validate() error { return _fbgfac.ValidateWithPath("") }

// Validate validates the CT_View and its children
func (_gfbdd *CT_View) Validate() error { return _gfbdd.ValidateWithPath("CT_View") }
func (_efabaa ST_LineSpacingRule) String() string {
	switch _efabaa {
	case 0:
		return ""
	case 1:
		return "auto"
	case 2:
		return "exact"
	case 3:
		return "atLeast"
	}
	return ""
}
func NewCT_DocPartGallery() *CT_DocPartGallery {
	_bebc := &CT_DocPartGallery{}
	_bebc.ValAttr = ST_DocPartGallery(1)
	return _bebc
}
func (_ffefccb *ST_HAnchor) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ffefccb = 0
	case "text":
		*_ffefccb = 1
	case "margin":
		*_ffefccb = 2
	case "page":
		*_ffefccb = 3
	}
	return nil
}

type CT_Divs struct {

	// Information About Single HTML div Element
	Div []*CT_Div
}

func NewCT_NumPr() *CT_NumPr { _geged := &CT_NumPr{}; return _geged }

// Validate validates the EG_ContentRunContent and its children
func (_faggg *EG_ContentRunContent) Validate() error {
	return _faggg.ValidateWithPath("EG_ContentRunContent")
}
func NewCT_SectPrBase() *CT_SectPrBase { _bageb := &CT_SectPrBase{}; return _bageb }

type WdST_RelFromV byte

// Validate validates the CT_MailMergeDest and its children
func (_ccdfg *CT_MailMergeDest) Validate() error   { return _ccdfg.ValidateWithPath("CT_MailMergeDest") }
func (_bdbcfd ST_CombineBrackets) Validate() error { return _bdbcfd.ValidateWithPath("") }

type CT_TblPrChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
	TblPr  *CT_TblPrBase
}

func (_faaaa *CT_TextDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_cbgbe, _caafe := _faaaa.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _caafe != nil {
		return _caafe
	}
	start.Attr = append(start.Attr, _cbgbe)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewEG_RunLevelElts() *EG_RunLevelElts { _cdcffa := &EG_RunLevelElts{}; return _cdcffa }
func (_cgfcae *CT_TrPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_agaceg:
	for {
		_bbceea, _egaac := d.Token()
		if _egaac != nil {
			return _egaac
		}
		switch _fadgbd := _bbceea.(type) {
		case _d.StartElement:
			switch _fadgbd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_gbbda := NewCT_Cnf()
				if _dbfeg := d.DecodeElement(_gbbda, &_fadgbd); _dbfeg != nil {
					return _dbfeg
				}
				_cgfcae.CnfStyle = append(_cgfcae.CnfStyle, _gbbda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divId"}:
				_bebffe := NewCT_DecimalNumber()
				if _caagg := d.DecodeElement(_bebffe, &_fadgbd); _caagg != nil {
					return _caagg
				}
				_cgfcae.DivId = append(_cgfcae.DivId, _bebffe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridBefore"}:
				_gdfcd := NewCT_DecimalNumber()
				if _ffecc := d.DecodeElement(_gdfcd, &_fadgbd); _ffecc != nil {
					return _ffecc
				}
				_cgfcae.GridBefore = append(_cgfcae.GridBefore, _gdfcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridAfter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridAfter"}:
				_egaee := NewCT_DecimalNumber()
				if _gfceb := d.DecodeElement(_egaee, &_fadgbd); _gfceb != nil {
					return _gfceb
				}
				_cgfcae.GridAfter = append(_cgfcae.GridAfter, _egaee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wBefore"}:
				_dcgca := NewCT_TblWidth()
				if _efcegc := d.DecodeElement(_dcgca, &_fadgbd); _efcegc != nil {
					return _efcegc
				}
				_cgfcae.WBefore = append(_cgfcae.WBefore, _dcgca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wAfter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wAfter"}:
				_aadab := NewCT_TblWidth()
				if _cdcf := d.DecodeElement(_aadab, &_fadgbd); _cdcf != nil {
					return _cdcf
				}
				_cgfcae.WAfter = append(_cgfcae.WAfter, _aadab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cantSplit"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cantSplit"}:
				_edecg := NewCT_OnOff()
				if _eedba := d.DecodeElement(_edecg, &_fadgbd); _eedba != nil {
					return _eedba
				}
				_cgfcae.CantSplit = append(_cgfcae.CantSplit, _edecg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trHeight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trHeight"}:
				_acdbe := NewCT_Height()
				if _cagcac := d.DecodeElement(_acdbe, &_fadgbd); _cagcac != nil {
					return _cagcac
				}
				_cgfcae.TrHeight = append(_cgfcae.TrHeight, _acdbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblHeader"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblHeader"}:
				_fcabed := NewCT_OnOff()
				if _dbdgg := d.DecodeElement(_fcabed, &_fadgbd); _dbdgg != nil {
					return _dbdgg
				}
				_cgfcae.TblHeader = append(_cgfcae.TblHeader, _fcabed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellSpacing"}:
				_badae := NewCT_TblWidth()
				if _dagge := d.DecodeElement(_badae, &_fadgbd); _dagge != nil {
					return _dagge
				}
				_cgfcae.TblCellSpacing = append(_cgfcae.TblCellSpacing, _badae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_fcbga := NewCT_JcTable()
				if _egcedg := d.DecodeElement(_fcbga, &_fadgbd); _egcedg != nil {
					return _egcedg
				}
				_cgfcae.Jc = append(_cgfcae.Jc, _fcbga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hidden"}:
				_dceed := NewCT_OnOff()
				if _dcbbb := d.DecodeElement(_dceed, &_fadgbd); _dcbbb != nil {
					return _dcbbb
				}
				_cgfcae.Hidden = append(_cgfcae.Hidden, _dceed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cgfcae.Ins = NewCT_TrackChange()
				if _efdebc := d.DecodeElement(_cgfcae.Ins, &_fadgbd); _efdebc != nil {
					return _efdebc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_cgfcae.Del = NewCT_TrackChange()
				if _cbefab := d.DecodeElement(_cgfcae.Del, &_fadgbd); _cbefab != nil {
					return _cbefab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trPrChange"}:
				_cgfcae.TrPrChange = NewCT_TrPrChange()
				if _ccfgd := d.DecodeElement(_cgfcae.TrPrChange, &_fadgbd); _ccfgd != nil {
					return _ccfgd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TrPr\u0020\u0025v", _fadgbd.Name)
				if _eeabf := d.Skip(); _eeabf != nil {
					return _eeabf
				}
			}
		case _d.EndElement:
			break _agaceg
		case _d.CharData:
		}
	}
	return nil
}
func (_dfccff *CT_ObjectChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bfegd:
	for {
		_fdcge, _acfge := d.Token()
		if _acfge != nil {
			return _acfge
		}
		switch _ffgfe := _fdcge.(type) {
		case _d.StartElement:
			switch _ffgfe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "control"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "control"}:
				_dfccff.Control = NewCT_Control()
				if _bdca := d.DecodeElement(_dfccff.Control, &_ffgfe); _bdca != nil {
					return _bdca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "objectLink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "objectLink"}:
				_dfccff.ObjectLink = NewCT_ObjectLink()
				if _bafgd := d.DecodeElement(_dfccff.ObjectLink, &_ffgfe); _bafgd != nil {
					return _bafgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "objectEmbed"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "objectEmbed"}:
				_dfccff.ObjectEmbed = NewCT_ObjectEmbed()
				if _bgbbe := d.DecodeElement(_dfccff.ObjectEmbed, &_ffgfe); _bgbbe != nil {
					return _bgbbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "movie"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "movie"}:
				_dfccff.Movie = NewCT_Rel()
				if _agabd := d.DecodeElement(_dfccff.Movie, &_ffgfe); _agabd != nil {
					return _agabd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_ObjectChoice\u0020\u0025v", _ffgfe.Name)
				if _adbefd := d.Skip(); _adbefd != nil {
					return _adbefd
				}
			}
		case _d.EndElement:
			break _bfegd
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_MailMergeOdsoFMDFieldType and its children, prefixing error messages with path
func (_fcabff *CT_MailMergeOdsoFMDFieldType) ValidateWithPath(path string) error {
	if _fcabff.ValAttr == ST_MailMergeOdsoFMDFieldTypeUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fccae := _fcabff.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fccae != nil {
		return _fccae
	}
	return nil
}
func (_ebbdcc *WdST_AlignH) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_edegdcf, _aecbaa := d.Token()
	if _aecbaa != nil {
		return _aecbaa
	}
	if _eddef, _dffcee := _edegdcf.(_d.EndElement); _dffcee && _eddef.Name == start.Name {
		*_ebbdcc = 1
		return nil
	}
	if _affeddg, _bbdcbf := _edegdcf.(_d.CharData); !_bbdcbf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _edegdcf)
	} else {
		switch string(_affeddg) {
		case "":
			*_ebbdcc = 0
		case "left":
			*_ebbdcc = 1
		case "right":
			*_ebbdcc = 2
		case "center":
			*_ebbdcc = 3
		case "inside":
			*_ebbdcc = 4
		case "outside":
			*_ebbdcc = 5
		}
	}
	_edegdcf, _aecbaa = d.Token()
	if _aecbaa != nil {
		return _aecbaa
	}
	if _cacee, _gfcdc := _edegdcf.(_d.EndElement); _gfcdc && _cacee.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _edegdcf)
}

// Validate validates the Hdr and its children
func (_cbgfg *Hdr) Validate() error { return _cbgfg.ValidateWithPath("Hdr") }
func (_ecefadc ST_HAnchor) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ecefadc.String(), start)
}

// ValidateWithPath validates the CT_FFData and its children, prefixing error messages with path
func (_dbede *CT_FFData) ValidateWithPath(path string) error {
	for _ecga, _babdf := range _dbede.Name {
		if _cbeff := _babdf.ValidateWithPath(_b.Sprintf("%s\u002fName\u005b\u0025d\u005d", path, _ecga)); _cbeff != nil {
			return _cbeff
		}
	}
	for _efaa, _caebd := range _dbede.Label {
		if _cffd := _caebd.ValidateWithPath(_b.Sprintf("\u0025s\u002fLabel\u005b\u0025d\u005d", path, _efaa)); _cffd != nil {
			return _cffd
		}
	}
	for _faed, _aacg := range _dbede.TabIndex {
		if _bfac := _aacg.ValidateWithPath(_b.Sprintf("\u0025s\u002fTabIndex\u005b\u0025d\u005d", path, _faed)); _bfac != nil {
			return _bfac
		}
	}
	for _cbbfe, _edbdf := range _dbede.Enabled {
		if _daefb := _edbdf.ValidateWithPath(_b.Sprintf("\u0025s\u002fEnabled\u005b\u0025d\u005d", path, _cbbfe)); _daefb != nil {
			return _daefb
		}
	}
	for _gdefg, _agbga := range _dbede.CalcOnExit {
		if _eeddb := _agbga.ValidateWithPath(_b.Sprintf("\u0025s\u002fCalcOnExit\u005b\u0025d\u005d", path, _gdefg)); _eeddb != nil {
			return _eeddb
		}
	}
	for _afaf, _deagb := range _dbede.EntryMacro {
		if _ggbdc := _deagb.ValidateWithPath(_b.Sprintf("\u0025s\u002fEntryMacro\u005b\u0025d\u005d", path, _afaf)); _ggbdc != nil {
			return _ggbdc
		}
	}
	for _ecac, _bbdeb := range _dbede.ExitMacro {
		if _cdcac := _bbdeb.ValidateWithPath(_b.Sprintf("\u0025s/ExitMacro\u005b\u0025d\u005d", path, _ecac)); _cdcac != nil {
			return _cdcac
		}
	}
	for _egfefc, _fabaf := range _dbede.HelpText {
		if _cbdbd := _fabaf.ValidateWithPath(_b.Sprintf("\u0025s\u002fHelpText\u005b\u0025d\u005d", path, _egfefc)); _cbdbd != nil {
			return _cbdbd
		}
	}
	for _ddbda, _efeaa := range _dbede.StatusText {
		if _gcea := _efeaa.ValidateWithPath(_b.Sprintf("\u0025s\u002fStatusText\u005b\u0025d\u005d", path, _ddbda)); _gcea != nil {
			return _gcea
		}
	}
	if _dbede.CheckBox != nil {
		if _gaaad := _dbede.CheckBox.ValidateWithPath(path + "\u002fCheckBox"); _gaaad != nil {
			return _gaaad
		}
	}
	if _dbede.DdList != nil {
		if _dcbgf := _dbede.DdList.ValidateWithPath(path + "\u002fDdList"); _dcbgf != nil {
			return _dcbgf
		}
	}
	if _dbede.TextInput != nil {
		if _faaa := _dbede.TextInput.ValidateWithPath(path + "\u002fTextInput"); _faaa != nil {
			return _faaa
		}
	}
	return nil
}
func NewCT_Pitch() *CT_Pitch { _accad := &CT_Pitch{}; _accad.ValAttr = ST_Pitch(1); return _accad }
func (_ebcfa *ST_Zoom) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ebcfa = 0
	case "none":
		*_ebcfa = 1
	case "fullPage":
		*_ebcfa = 2
	case "bestFit":
		*_ebcfa = 3
	case "textFit":
		*_ebcfa = 4
	}
	return nil
}
func (_ccefdd *CT_LevelSuffix) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dbbbef, _cbccff := _ccefdd.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _cbccff != nil {
		return _cbccff
	}
	start.Attr = append(start.Attr, _dbbbef)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gccfg *ST_TabTlc) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gccfg = 0
	case "none":
		*_gccfg = 1
	case "dot":
		*_gccfg = 2
	case "hyphen":
		*_gccfg = 3
	case "underscore":
		*_gccfg = 4
	case "heavy":
		*_gccfg = 5
	case "middleDot":
		*_gccfg = 6
	}
	return nil
}
func (_faggab ST_SdtDateMappingType) Validate() error { return _faggab.ValidateWithPath("") }

type CT_ObjectEmbed struct {

	// Object Representation
	DrawAspectAttr ST_ObjectDrawAspect
	IdAttr         string

	// Object Application
	ProgIdAttr *string

	// Object Shape
	ShapeIdAttr *string

	// Field Switches
	FieldCodesAttr *string
}

func (_bcgbcg *CT_TextEffect) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dedcbc, _bfbbea := _bcgbcg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _bfbbea != nil {
		return _bfbbea
	}
	start.Attr = append(start.Attr, _dedcbc)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Columns struct {

	// Equal Column Widths
	EqualWidthAttr *_g.ST_OnOff

	// Spacing Between Equal Width Columns
	SpaceAttr *_g.ST_TwipsMeasure

	// Number of Equal Width Columns
	NumAttr *int64

	// Draw Line Between Columns
	SepAttr *_g.ST_OnOff

	// Single Column Definition
	Col []*CT_Column
}

// ValidateWithPath validates the CT_TblPPr and its children, prefixing error messages with path
func (_gabaae *CT_TblPPr) ValidateWithPath(path string) error {
	if _gabaae.LeftFromTextAttr != nil {
		if _ebeggb := _gabaae.LeftFromTextAttr.ValidateWithPath(path + "\u002fLeftFromTextAttr"); _ebeggb != nil {
			return _ebeggb
		}
	}
	if _gabaae.RightFromTextAttr != nil {
		if _eagbf := _gabaae.RightFromTextAttr.ValidateWithPath(path + "\u002fRightFromTextAttr"); _eagbf != nil {
			return _eagbf
		}
	}
	if _gabaae.TopFromTextAttr != nil {
		if _cabee := _gabaae.TopFromTextAttr.ValidateWithPath(path + "\u002fTopFromTextAttr"); _cabee != nil {
			return _cabee
		}
	}
	if _gabaae.BottomFromTextAttr != nil {
		if _bgdfa := _gabaae.BottomFromTextAttr.ValidateWithPath(path + "\u002fBottomFromTextAttr"); _bgdfa != nil {
			return _bgdfa
		}
	}
	if _egbbbb := _gabaae.VertAnchorAttr.ValidateWithPath(path + "\u002fVertAnchorAttr"); _egbbbb != nil {
		return _egbbbb
	}
	if _bdbcd := _gabaae.HorzAnchorAttr.ValidateWithPath(path + "\u002fHorzAnchorAttr"); _bdbcd != nil {
		return _bdbcd
	}
	if _fgcab := _gabaae.TblpXSpecAttr.ValidateWithPath(path + "\u002fTblpXSpecAttr"); _fgcab != nil {
		return _fgcab
	}
	if _gabaae.TblpXAttr != nil {
		if _fbaed := _gabaae.TblpXAttr.ValidateWithPath(path + "\u002fTblpXAttr"); _fbaed != nil {
			return _fbaed
		}
	}
	if _abffdc := _gabaae.TblpYSpecAttr.ValidateWithPath(path + "\u002fTblpYSpecAttr"); _abffdc != nil {
		return _abffdc
	}
	if _gabaae.TblpYAttr != nil {
		if _fdea := _gabaae.TblpYAttr.ValidateWithPath(path + "\u002fTblpYAttr"); _fdea != nil {
			return _fdea
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TxbxContent and its children, prefixing error messages with path
func (_agbba *CT_TxbxContent) ValidateWithPath(path string) error {
	for _bdage, _eddeaa := range _agbba.AltChunk {
		if _ebefe := _eddeaa.ValidateWithPath(_b.Sprintf("\u0025s\u002fAltChunk\u005b\u0025d\u005d", path, _bdage)); _ebefe != nil {
			return _ebefe
		}
	}
	for _abace, _fdaebg := range _agbba.EG_ContentBlockContent {
		if _affbd := _fdaebg.ValidateWithPath(_b.Sprintf("\u0025s/EG_ContentBlockContent[%d\u005d", path, _abace)); _affbd != nil {
			return _affbd
		}
	}
	return nil
}
func (_bacag *CT_HdrFtr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fcbg:
	for {
		_gegbf, _eece := d.Token()
		if _eece != nil {
			return _eece
		}
		switch _dbeca := _gegbf.(type) {
		case _d.StartElement:
			switch _dbeca.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_bggad := NewCT_AltChunk()
				if _cagag := d.DecodeElement(_bggad, &_dbeca); _cagag != nil {
					return _cagag
				}
				_bacag.AltChunk = append(_bacag.AltChunk, _bggad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_efecf := NewEG_ContentBlockContent()
				_efecf.CustomXml = NewCT_CustomXmlBlock()
				if _gcbb := d.DecodeElement(_efecf.CustomXml, &_dbeca); _gcbb != nil {
					return _gcbb
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _efecf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_ccaebb := NewEG_ContentBlockContent()
				_ccaebb.Sdt = NewCT_SdtBlock()
				if _gfdg := d.DecodeElement(_ccaebb.Sdt, &_dbeca); _gfdg != nil {
					return _gfdg
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ccaebb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_ebegbf := NewEG_ContentBlockContent()
				_ebfag := NewCT_P()
				if _eeeec := d.DecodeElement(_ebfag, &_dbeca); _eeeec != nil {
					return _eeeec
				}
				_ebegbf.P = append(_ebegbf.P, _ebfag)
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ebegbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_ccgbf := NewEG_ContentBlockContent()
				_ecgd := NewCT_Tbl()
				if _egee := d.DecodeElement(_ecgd, &_dbeca); _egee != nil {
					return _egee
				}
				_ccgbf.Tbl = append(_ccgbf.Tbl, _ecgd)
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ccgbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_fbegc := NewEG_ContentBlockContent()
				_cfcd := NewEG_RunLevelElts()
				_cfcd.ProofErr = NewCT_ProofErr()
				if _bbeac := d.DecodeElement(_cfcd.ProofErr, &_dbeca); _bbeac != nil {
					return _bbeac
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _fbegc)
				_fbegc.EG_RunLevelElts = append(_fbegc.EG_RunLevelElts, _cfcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ffgcb := NewEG_ContentBlockContent()
				_ebba := NewEG_RunLevelElts()
				_ebba.PermStart = NewCT_PermStart()
				if _gcfef := d.DecodeElement(_ebba.PermStart, &_dbeca); _gcfef != nil {
					return _gcfef
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ffgcb)
				_ffgcb.EG_RunLevelElts = append(_ffgcb.EG_RunLevelElts, _ebba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_cgec := NewEG_ContentBlockContent()
				_bgfbg := NewEG_RunLevelElts()
				_bgfbg.PermEnd = NewCT_Perm()
				if _bgfd := d.DecodeElement(_bgfbg.PermEnd, &_dbeca); _bgfd != nil {
					return _bgfd
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _cgec)
				_cgec.EG_RunLevelElts = append(_cgec.EG_RunLevelElts, _bgfbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_aebed := NewEG_ContentBlockContent()
				_facae := NewEG_RunLevelElts()
				_facae.Ins = NewCT_RunTrackChange()
				if _bfgfd := d.DecodeElement(_facae.Ins, &_dbeca); _bfgfd != nil {
					return _bfgfd
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _aebed)
				_aebed.EG_RunLevelElts = append(_aebed.EG_RunLevelElts, _facae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_afae := NewEG_ContentBlockContent()
				_bfgdc := NewEG_RunLevelElts()
				_bfgdc.Del = NewCT_RunTrackChange()
				if _abga := d.DecodeElement(_bfgdc.Del, &_dbeca); _abga != nil {
					return _abga
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _afae)
				_afae.EG_RunLevelElts = append(_afae.EG_RunLevelElts, _bfgdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_geda := NewEG_ContentBlockContent()
				_cdbeb := NewEG_RunLevelElts()
				_cdbeb.MoveFrom = NewCT_RunTrackChange()
				if _afbcae := d.DecodeElement(_cdbeb.MoveFrom, &_dbeca); _afbcae != nil {
					return _afbcae
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _geda)
				_geda.EG_RunLevelElts = append(_geda.EG_RunLevelElts, _cdbeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_bffff := NewEG_ContentBlockContent()
				_gdeda := NewEG_RunLevelElts()
				_gdeda.MoveTo = NewCT_RunTrackChange()
				if _dbbag := d.DecodeElement(_gdeda.MoveTo, &_dbeca); _dbbag != nil {
					return _dbbag
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _bffff)
				_bffff.EG_RunLevelElts = append(_bffff.EG_RunLevelElts, _gdeda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_cefec := NewEG_ContentBlockContent()
				_fcbcd := NewEG_RunLevelElts()
				_gffda := NewEG_RangeMarkupElements()
				_gffda.BookmarkStart = NewCT_Bookmark()
				if _agabg := d.DecodeElement(_gffda.BookmarkStart, &_dbeca); _agabg != nil {
					return _agabg
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _cefec)
				_cefec.EG_RunLevelElts = append(_cefec.EG_RunLevelElts, _fcbcd)
				_fcbcd.EG_RangeMarkupElements = append(_fcbcd.EG_RangeMarkupElements, _gffda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_ccbda := NewEG_ContentBlockContent()
				_decca := NewEG_RunLevelElts()
				_ddee := NewEG_RangeMarkupElements()
				_ddee.BookmarkEnd = NewCT_MarkupRange()
				if _bagea := d.DecodeElement(_ddee.BookmarkEnd, &_dbeca); _bagea != nil {
					return _bagea
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ccbda)
				_ccbda.EG_RunLevelElts = append(_ccbda.EG_RunLevelElts, _decca)
				_decca.EG_RangeMarkupElements = append(_decca.EG_RangeMarkupElements, _ddee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fbdbc := NewEG_ContentBlockContent()
				_edgfa := NewEG_RunLevelElts()
				_degab := NewEG_RangeMarkupElements()
				_degab.MoveFromRangeStart = NewCT_MoveBookmark()
				if _fgddd := d.DecodeElement(_degab.MoveFromRangeStart, &_dbeca); _fgddd != nil {
					return _fgddd
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _fbdbc)
				_fbdbc.EG_RunLevelElts = append(_fbdbc.EG_RunLevelElts, _edgfa)
				_edgfa.EG_RangeMarkupElements = append(_edgfa.EG_RangeMarkupElements, _degab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_dffdd := NewEG_ContentBlockContent()
				_bgbdc := NewEG_RunLevelElts()
				_cabef := NewEG_RangeMarkupElements()
				_cabef.MoveFromRangeEnd = NewCT_MarkupRange()
				if _abdbg := d.DecodeElement(_cabef.MoveFromRangeEnd, &_dbeca); _abdbg != nil {
					return _abdbg
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _dffdd)
				_dffdd.EG_RunLevelElts = append(_dffdd.EG_RunLevelElts, _bgbdc)
				_bgbdc.EG_RangeMarkupElements = append(_bgbdc.EG_RangeMarkupElements, _cabef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_adcgd := NewEG_ContentBlockContent()
				_cggdf := NewEG_RunLevelElts()
				_fefbfc := NewEG_RangeMarkupElements()
				_fefbfc.MoveToRangeStart = NewCT_MoveBookmark()
				if _dcfag := d.DecodeElement(_fefbfc.MoveToRangeStart, &_dbeca); _dcfag != nil {
					return _dcfag
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _adcgd)
				_adcgd.EG_RunLevelElts = append(_adcgd.EG_RunLevelElts, _cggdf)
				_cggdf.EG_RangeMarkupElements = append(_cggdf.EG_RangeMarkupElements, _fefbfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_ffdge := NewEG_ContentBlockContent()
				_ceffda := NewEG_RunLevelElts()
				_dcgf := NewEG_RangeMarkupElements()
				_dcgf.MoveToRangeEnd = NewCT_MarkupRange()
				if _dccafd := d.DecodeElement(_dcgf.MoveToRangeEnd, &_dbeca); _dccafd != nil {
					return _dccafd
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ffdge)
				_ffdge.EG_RunLevelElts = append(_ffdge.EG_RunLevelElts, _ceffda)
				_ceffda.EG_RangeMarkupElements = append(_ceffda.EG_RangeMarkupElements, _dcgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_deff := NewEG_ContentBlockContent()
				_fdfbc := NewEG_RunLevelElts()
				_edgfb := NewEG_RangeMarkupElements()
				_edgfb.CommentRangeStart = NewCT_MarkupRange()
				if _ccgbb := d.DecodeElement(_edgfb.CommentRangeStart, &_dbeca); _ccgbb != nil {
					return _ccgbb
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _deff)
				_deff.EG_RunLevelElts = append(_deff.EG_RunLevelElts, _fdfbc)
				_fdfbc.EG_RangeMarkupElements = append(_fdfbc.EG_RangeMarkupElements, _edgfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_ebda := NewEG_ContentBlockContent()
				_fabad := NewEG_RunLevelElts()
				_dffeg := NewEG_RangeMarkupElements()
				_dffeg.CommentRangeEnd = NewCT_MarkupRange()
				if _adbff := d.DecodeElement(_dffeg.CommentRangeEnd, &_dbeca); _adbff != nil {
					return _adbff
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ebda)
				_ebda.EG_RunLevelElts = append(_ebda.EG_RunLevelElts, _fabad)
				_fabad.EG_RangeMarkupElements = append(_fabad.EG_RangeMarkupElements, _dffeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_eegc := NewEG_ContentBlockContent()
				_fcceg := NewEG_RunLevelElts()
				_feddd := NewEG_RangeMarkupElements()
				_feddd.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _beecg := d.DecodeElement(_feddd.CustomXmlInsRangeStart, &_dbeca); _beecg != nil {
					return _beecg
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _eegc)
				_eegc.EG_RunLevelElts = append(_eegc.EG_RunLevelElts, _fcceg)
				_fcceg.EG_RangeMarkupElements = append(_fcceg.EG_RangeMarkupElements, _feddd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_afedg := NewEG_ContentBlockContent()
				_cfada := NewEG_RunLevelElts()
				_bdadg := NewEG_RangeMarkupElements()
				_bdadg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _gbba := d.DecodeElement(_bdadg.CustomXmlInsRangeEnd, &_dbeca); _gbba != nil {
					return _gbba
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _afedg)
				_afedg.EG_RunLevelElts = append(_afedg.EG_RunLevelElts, _cfada)
				_cfada.EG_RangeMarkupElements = append(_cfada.EG_RangeMarkupElements, _bdadg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_eeced := NewEG_ContentBlockContent()
				_aacdc := NewEG_RunLevelElts()
				_caggef := NewEG_RangeMarkupElements()
				_caggef.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _bfcgd := d.DecodeElement(_caggef.CustomXmlDelRangeStart, &_dbeca); _bfcgd != nil {
					return _bfcgd
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _eeced)
				_eeced.EG_RunLevelElts = append(_eeced.EG_RunLevelElts, _aacdc)
				_aacdc.EG_RangeMarkupElements = append(_aacdc.EG_RangeMarkupElements, _caggef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_egfcf := NewEG_ContentBlockContent()
				_eedde := NewEG_RunLevelElts()
				_afeac := NewEG_RangeMarkupElements()
				_afeac.CustomXmlDelRangeEnd = NewCT_Markup()
				if _gbfa := d.DecodeElement(_afeac.CustomXmlDelRangeEnd, &_dbeca); _gbfa != nil {
					return _gbfa
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _egfcf)
				_egfcf.EG_RunLevelElts = append(_egfcf.EG_RunLevelElts, _eedde)
				_eedde.EG_RangeMarkupElements = append(_eedde.EG_RangeMarkupElements, _afeac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_ageec := NewEG_ContentBlockContent()
				_badd := NewEG_RunLevelElts()
				_dbdcb := NewEG_RangeMarkupElements()
				_dbdcb.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _cfeab := d.DecodeElement(_dbdcb.CustomXmlMoveFromRangeStart, &_dbeca); _cfeab != nil {
					return _cfeab
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ageec)
				_ageec.EG_RunLevelElts = append(_ageec.EG_RunLevelElts, _badd)
				_badd.EG_RangeMarkupElements = append(_badd.EG_RangeMarkupElements, _dbdcb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_fbgc := NewEG_ContentBlockContent()
				_gdaab := NewEG_RunLevelElts()
				_cdgcf := NewEG_RangeMarkupElements()
				_cdgcf.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _cfcgf := d.DecodeElement(_cdgcf.CustomXmlMoveFromRangeEnd, &_dbeca); _cfcgf != nil {
					return _cfcgf
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _fbgc)
				_fbgc.EG_RunLevelElts = append(_fbgc.EG_RunLevelElts, _gdaab)
				_gdaab.EG_RangeMarkupElements = append(_gdaab.EG_RangeMarkupElements, _cdgcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gbbec := NewEG_ContentBlockContent()
				_dcdd := NewEG_RunLevelElts()
				_afddb := NewEG_RangeMarkupElements()
				_afddb.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _cegbc := d.DecodeElement(_afddb.CustomXmlMoveToRangeStart, &_dbeca); _cegbc != nil {
					return _cegbc
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _gbbec)
				_gbbec.EG_RunLevelElts = append(_gbbec.EG_RunLevelElts, _dcdd)
				_dcdd.EG_RangeMarkupElements = append(_dcdd.EG_RangeMarkupElements, _afddb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_geabd := NewEG_ContentBlockContent()
				_ddcbe := NewEG_RunLevelElts()
				_fgdcc := NewEG_RangeMarkupElements()
				_fgdcc.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _bedge := d.DecodeElement(_fgdcc.CustomXmlMoveToRangeEnd, &_dbeca); _bedge != nil {
					return _bedge
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _geabd)
				_geabd.EG_RunLevelElts = append(_geabd.EG_RunLevelElts, _ddcbe)
				_ddcbe.EG_RangeMarkupElements = append(_ddcbe.EG_RangeMarkupElements, _fgdcc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_fbddf := NewEG_ContentBlockContent()
				_bcdgc := NewEG_RunLevelElts()
				_addf := NewEG_MathContent()
				_addf.OMathPara = _f.NewOMathPara()
				if _caabd := d.DecodeElement(_addf.OMathPara, &_dbeca); _caabd != nil {
					return _caabd
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _fbddf)
				_fbddf.EG_RunLevelElts = append(_fbddf.EG_RunLevelElts, _bcdgc)
				_bcdgc.EG_MathContent = append(_bcdgc.EG_MathContent, _addf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_ddgg := NewEG_ContentBlockContent()
				_abab := NewEG_RunLevelElts()
				_becabe := NewEG_MathContent()
				_becabe.OMath = _f.NewOMath()
				if _ffcgb := d.DecodeElement(_becabe.OMath, &_dbeca); _ffcgb != nil {
					return _ffcgb
				}
				_bacag.EG_ContentBlockContent = append(_bacag.EG_ContentBlockContent, _ddgg)
				_ddgg.EG_RunLevelElts = append(_ddgg.EG_RunLevelElts, _abab)
				_abab.EG_MathContent = append(_abab.EG_MathContent, _becabe)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_HdrFtr \u0025v", _dbeca.Name)
				if _ddfdg := d.Skip(); _ddfdg != nil {
					return _ddfdg
				}
			}
		case _d.EndElement:
			break _fcbg
		case _d.CharData:
		}
	}
	return nil
}
func (_ebedd *ST_Em) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ebedd = 0
	case "none":
		*_ebedd = 1
	case "dot":
		*_ebedd = 2
	case "comma":
		*_ebedd = 3
	case "circle":
		*_ebedd = 4
	case "underDot":
		*_ebedd = 5
	}
	return nil
}

type ST_ProofErr byte

func (_abad *CT_Headers) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gecbee:
	for {
		_ccdf, _eabbc := d.Token()
		if _eabbc != nil {
			return _eabbc
		}
		switch _cacga := _ccdf.(type) {
		case _d.StartElement:
			switch _cacga.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "header"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "header"}:
				_fcffe := NewCT_String()
				if _cgaee := d.DecodeElement(_fcffe, &_cacga); _cgaee != nil {
					return _cgaee
				}
				_abad.Header = append(_abad.Header, _fcffe)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_Headers\u0020\u0025v", _cacga.Name)
				if _fbfcg := d.Skip(); _fbfcg != nil {
					return _fbfcg
				}
			}
		case _d.EndElement:
			break _gecbee
		case _d.CharData:
		}
	}
	return nil
}
func (_cfba *CT_FFStatusText) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _eggee := range start.Attr {
		if _eggee.Name.Local == "type" {
			_cfba.TypeAttr.UnmarshalXMLAttr(_eggee)
			continue
		}
		if _eggee.Name.Local == "val" {
			_eeaeg, _cbae := _eggee.Value, error(nil)
			if _cbae != nil {
				return _cbae
			}
			_cfba.ValAttr = &_eeaeg
			continue
		}
	}
	for {
		_afbdc, _aecefa := d.Token()
		if _aecefa != nil {
			return _b.Errorf("parsing CT_FFStatusText:\u0020\u0025s", _aecefa)
		}
		if _agfg, _gdgde := _afbdc.(_d.EndElement); _gdgde && _agfg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aedb *CT_Background) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _efd := range start.Attr {
		if _efd.Name.Local == "color" {
			_egc, _bfad := ParseUnionST_HexColor(_efd.Value)
			if _bfad != nil {
				return _bfad
			}
			_aedb.ColorAttr = &_egc
			continue
		}
		if _efd.Name.Local == "themeColor" {
			_aedb.ThemeColorAttr.UnmarshalXMLAttr(_efd)
			continue
		}
		if _efd.Name.Local == "themeTint" {
			_dage, _adf := _efd.Value, error(nil)
			if _adf != nil {
				return _adf
			}
			_aedb.ThemeTintAttr = &_dage
			continue
		}
		if _efd.Name.Local == "themeShade" {
			_bdec, _addc := _efd.Value, error(nil)
			if _addc != nil {
				return _addc
			}
			_aedb.ThemeShadeAttr = &_bdec
			continue
		}
	}
_fdgg:
	for {
		_bbc, _cedb := d.Token()
		if _cedb != nil {
			return _cedb
		}
		switch _aee := _bbc.(type) {
		case _d.StartElement:
			switch _aee.Name {
			default:
				if _adc, _feefg := _ga.CreateElement(_aee); _feefg != nil {
					return _feefg
				} else {
					if _gcg := d.DecodeElement(_adc, &_aee); _gcg != nil {
						return _gcg
					}
					_aedb.Any = append(_aedb.Any, _adc)
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawing"}:
				_aedb.Drawing = NewCT_Drawing()
				if _bbcf := d.DecodeElement(_aedb.Drawing, &_aee); _bbcf != nil {
					return _bbcf
				}
			}
		case _d.EndElement:
			break _fdgg
		case _d.CharData:
		}
	}
	return nil
}
func (_ebbeec ST_HexColorAuto) ValidateWithPath(path string) error {
	switch _ebbeec {
	case 0, 1:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ebbeec))
	}
	return nil
}
func (_adfbfa ST_Zoom) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dbcgdg := _d.Attr{}
	_dbcgdg.Name = name
	switch _adfbfa {
	case ST_ZoomUnset:
		_dbcgdg.Value = ""
	case ST_ZoomNone:
		_dbcgdg.Value = "none"
	case ST_ZoomFullPage:
		_dbcgdg.Value = "fullPage"
	case ST_ZoomBestFit:
		_dbcgdg.Value = "bestFit"
	case ST_ZoomTextFit:
		_dbcgdg.Value = "textFit"
	}
	return _dbcgdg, nil
}
func (_gcgb *CT_Endnotes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gcgb.Endnote != nil {
		_edaf := _d.StartElement{Name: _d.Name{Local: "w:endnote"}}
		for _, _gfcfe := range _gcgb.Endnote {
			e.EncodeElement(_gfcfe, _edaf)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type EG_RPrMath struct {

	// Inserted Math Control Character
	Ins *CT_MathCtrlIns

	// Deleted Math Control Character
	Del *CT_MathCtrlDel

	// Run Properties
	RPr *CT_RPr
}

// Validate validates the CT_TcPrBase and its children
func (_gagdcc *CT_TcPrBase) Validate() error { return _gagdcc.ValidateWithPath("CT_TcPrBase") }

// ValidateWithPath validates the CT_TblGridChange and its children, prefixing error messages with path
func (_gaebg *CT_TblGridChange) ValidateWithPath(path string) error {
	if _cfbdb := _gaebg.TblGrid.ValidateWithPath(path + "\u002fTblGrid"); _cfbdb != nil {
		return _cfbdb
	}
	return nil
}
func (_bgeec *CT_FFCheckBox) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bgeec.Choice != nil {
		_bgeec.Choice.MarshalXML(e, _d.StartElement{})
	}
	if _bgeec.Default != nil {
		_fdgec := _d.StartElement{Name: _d.Name{Local: "w:default"}}
		e.EncodeElement(_bgeec.Default, _fdgec)
	}
	if _bgeec.Checked != nil {
		_ebfa := _d.StartElement{Name: _d.Name{Local: "w:checked"}}
		e.EncodeElement(_bgeec.Checked, _ebfa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewEG_PContentBase() *EG_PContentBase { _efcec := &EG_PContentBase{}; return _efcec }

type WdCT_WordprocessingShapeChoice1 struct {
	Txbx       *WdCT_TextboxInfo
	LinkedTxbx *WdCT_LinkedTextboxInformation
}

// ValidateWithPath validates the CT_MailMergeDocType and its children, prefixing error messages with path
func (_fegfe *CT_MailMergeDocType) ValidateWithPath(path string) error {
	if _fegfe.ValAttr == ST_MailMergeDocTypeUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fffb := _fegfe.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fffb != nil {
		return _fffb
	}
	return nil
}
func (_aaade *ST_ChapterSep) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_aaade = 0
	case "hyphen":
		*_aaade = 1
	case "period":
		*_aaade = 2
	case "colon":
		*_aaade = 3
	case "emDash":
		*_aaade = 4
	case "enDash":
		*_aaade = 5
	}
	return nil
}
func NewCT_Border() *CT_Border { _efdg := &CT_Border{}; _efdg.ValAttr = ST_Border(1); return _efdg }

// Validate validates the CT_DocumentBase and its children
func (_cbaae *CT_DocumentBase) Validate() error { return _cbaae.ValidateWithPath("CT_DocumentBase") }
func (_edag *CT_P) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _edag.RsidRPrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidRPr"}, Value: _b.Sprintf("\u0025v", *_edag.RsidRPrAttr)})
	}
	if _edag.RsidRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidR"}, Value: _b.Sprintf("\u0025v", *_edag.RsidRAttr)})
	}
	if _edag.RsidDelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidDel"}, Value: _b.Sprintf("\u0025v", *_edag.RsidDelAttr)})
	}
	if _edag.RsidPAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidP"}, Value: _b.Sprintf("\u0025v", *_edag.RsidPAttr)})
	}
	if _edag.RsidRDefaultAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidRDefault"}, Value: _b.Sprintf("\u0025v", *_edag.RsidRDefaultAttr)})
	}
	e.EncodeToken(start)
	if _edag.PPr != nil {
		_abgee := _d.StartElement{Name: _d.Name{Local: "w:pPr"}}
		e.EncodeElement(_edag.PPr, _abgee)
	}
	if _edag.EG_PContent != nil {
		for _, _edabf := range _edag.EG_PContent {
			_edabf.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ggecf *CT_DocProtect) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ggecf.EditAttr != ST_DocProtectUnset {
		_dbbbe, _becdc := _ggecf.EditAttr.MarshalXMLAttr(_d.Name{Local: "w:edit"})
		if _becdc != nil {
			return _becdc
		}
		start.Attr = append(start.Attr, _dbbbe)
	}
	if _ggecf.FormattingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:formatting"}, Value: _b.Sprintf("\u0025v", *_ggecf.FormattingAttr)})
	}
	if _ggecf.EnforcementAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:enforcement"}, Value: _b.Sprintf("\u0025v", *_ggecf.EnforcementAttr)})
	}
	if _ggecf.AlgorithmNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algorithmName"}, Value: _b.Sprintf("\u0025v", *_ggecf.AlgorithmNameAttr)})
	}
	if _ggecf.HashValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hashValue"}, Value: _b.Sprintf("\u0025v", *_ggecf.HashValueAttr)})
	}
	if _ggecf.SaltValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:saltValue"}, Value: _b.Sprintf("\u0025v", *_ggecf.SaltValueAttr)})
	}
	if _ggecf.SpinCountAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:spinCount"}, Value: _b.Sprintf("\u0025v", *_ggecf.SpinCountAttr)})
	}
	if _ggecf.CryptProviderTypeAttr != _g.ST_CryptProvUnset {
		_cceec, _dfgb := _ggecf.CryptProviderTypeAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptProviderType"})
		if _dfgb != nil {
			return _dfgb
		}
		start.Attr = append(start.Attr, _cceec)
	}
	if _ggecf.CryptAlgorithmClassAttr != _g.ST_AlgClassUnset {
		_cddef, _fbbfff := _ggecf.CryptAlgorithmClassAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptAlgorithmClass"})
		if _fbbfff != nil {
			return _fbbfff
		}
		start.Attr = append(start.Attr, _cddef)
	}
	if _ggecf.CryptAlgorithmTypeAttr != _g.ST_AlgTypeUnset {
		_abaf, _bcbe := _ggecf.CryptAlgorithmTypeAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptAlgorithmType"})
		if _bcbe != nil {
			return _bcbe
		}
		start.Attr = append(start.Attr, _abaf)
	}
	if _ggecf.CryptAlgorithmSidAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptAlgorithmSid"}, Value: _b.Sprintf("\u0025v", *_ggecf.CryptAlgorithmSidAttr)})
	}
	if _ggecf.CryptSpinCountAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptSpinCount"}, Value: _b.Sprintf("\u0025v", *_ggecf.CryptSpinCountAttr)})
	}
	if _ggecf.CryptProviderAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProvider"}, Value: _b.Sprintf("\u0025v", *_ggecf.CryptProviderAttr)})
	}
	if _ggecf.AlgIdExtAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algIdExt"}, Value: _b.Sprintf("\u0025v", *_ggecf.AlgIdExtAttr)})
	}
	if _ggecf.AlgIdExtSourceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algIdExtSource"}, Value: _b.Sprintf("\u0025v", *_ggecf.AlgIdExtSourceAttr)})
	}
	if _ggecf.CryptProviderTypeExtAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProviderTypeExt"}, Value: _b.Sprintf("\u0025v", *_ggecf.CryptProviderTypeExtAttr)})
	}
	if _ggecf.CryptProviderTypeExtSourceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProviderTypeExtSource"}, Value: _b.Sprintf("\u0025v", *_ggecf.CryptProviderTypeExtSourceAttr)})
	}
	if _ggecf.HashAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hash"}, Value: _b.Sprintf("\u0025v", *_ggecf.HashAttr)})
	}
	if _ggecf.SaltAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:salt"}, Value: _b.Sprintf("\u0025v", *_ggecf.SaltAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_agfef ST_PageBorderOffset) Validate() error { return _agfef.ValidateWithPath("") }
func NewAG_Password() *AG_Password                 { _ba := &AG_Password{}; return _ba }
func (_gdgd *CT_Endnotes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dgefg:
	for {
		_fbfa, _bccb := d.Token()
		if _bccb != nil {
			return _bccb
		}
		switch _fcaea := _fbfa.(type) {
		case _d.StartElement:
			switch _fcaea.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnote"}:
				_fccf := NewCT_FtnEdn()
				if _aacbf := d.DecodeElement(_fccf, &_fcaea); _aacbf != nil {
					return _aacbf
				}
				_gdgd.Endnote = append(_gdgd.Endnote, _fccf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Endnotes\u0020\u0025v", _fcaea.Name)
				if _bada := d.Skip(); _bada != nil {
					return _bada
				}
			}
		case _d.EndElement:
			break _dgefg
		case _d.CharData:
		}
	}
	return nil
}
func (_ebbad *CT_TextboxTightWrap) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ebbad.ValAttr = ST_TextboxTightWrap(1)
	for _, _bcaebe := range start.Attr {
		if _bcaebe.Name.Local == "val" {
			_ebbad.ValAttr.UnmarshalXMLAttr(_bcaebe)
			continue
		}
	}
	for {
		_aacab, _gffeea := d.Token()
		if _gffeea != nil {
			return _b.Errorf("parsing\u0020CT_TextboxTightWrap:\u0020\u0025s", _gffeea)
		}
		if _gcfgg, _adfcaf := _aacab.(_d.EndElement); _adfcaf && _gcfgg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fbae *CT_Bookmark) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _fbae.NameAttr)})
	if _fbae.ColFirstAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colFirst"}, Value: _b.Sprintf("\u0025v", *_fbae.ColFirstAttr)})
	}
	if _fbae.ColLastAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colLast"}, Value: _b.Sprintf("\u0025v", *_fbae.ColLastAttr)})
	}
	if _fbae.DisplacedByCustomXmlAttr != ST_DisplacedByCustomXmlUnset {
		_ccef, _befg := _fbae.DisplacedByCustomXmlAttr.MarshalXMLAttr(_d.Name{Local: "w:displacedByCustomXml"})
		if _befg != nil {
			return _befg
		}
		start.Attr = append(start.Attr, _ccef)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _fbae.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_PaperSource struct {

	// First Page Printer Tray Code
	FirstAttr *int64

	// Non-First Page Printer Tray Code
	OtherAttr *int64
}

func (_ddfb *CT_Comment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ddfb.InitialsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:initials"}, Value: _b.Sprintf("\u0025v", *_ddfb.InitialsAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _ddfb.AuthorAttr)})
	if _ddfb.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_ddfb.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _ddfb.IdAttr)})
	e.EncodeToken(start)
	if _ddfb.EG_BlockLevelElts != nil {
		for _, _gefbe := range _ddfb.EG_BlockLevelElts {
			_gefbe.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type EG_RunLevelElts struct {

	// Proofing Error Anchor
	ProofErr *CT_ProofErr

	// Range Permission Start
	PermStart *CT_PermStart

	// Range Permission End
	PermEnd *CT_Perm

	// Inserted Run Content
	Ins *CT_RunTrackChange

	// Deleted Run Content
	Del *CT_RunTrackChange

	// Move Source Run Content
	MoveFrom *CT_RunTrackChange

	// Move Destination Run Content
	MoveTo                 *CT_RunTrackChange
	EG_RangeMarkupElements []*EG_RangeMarkupElements
	EG_MathContent         []*EG_MathContent
}

// Validate validates the CT_P and its children
func (_gefdc *CT_P) Validate() error { return _gefdc.ValidateWithPath("CT_P") }

// ValidateWithPath validates the CT_SectPr and its children, prefixing error messages with path
func (_afdcf *CT_SectPr) ValidateWithPath(path string) error {
	for _ebaef, _gbffgc := range _afdcf.EG_HdrFtrReferences {
		if _abbgb := _gbffgc.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_HdrFtrReferences[\u0025d\u005d", path, _ebaef)); _abbgb != nil {
			return _abbgb
		}
	}
	if _afdcf.FootnotePr != nil {
		if _cceea := _afdcf.FootnotePr.ValidateWithPath(path + "/FootnotePr"); _cceea != nil {
			return _cceea
		}
	}
	if _afdcf.EndnotePr != nil {
		if _befeb := _afdcf.EndnotePr.ValidateWithPath(path + "\u002fEndnotePr"); _befeb != nil {
			return _befeb
		}
	}
	if _afdcf.Type != nil {
		if _beafdd := _afdcf.Type.ValidateWithPath(path + "\u002fType"); _beafdd != nil {
			return _beafdd
		}
	}
	if _afdcf.PgSz != nil {
		if _gaded := _afdcf.PgSz.ValidateWithPath(path + "\u002fPgSz"); _gaded != nil {
			return _gaded
		}
	}
	if _afdcf.PgMar != nil {
		if _gdaaf := _afdcf.PgMar.ValidateWithPath(path + "\u002fPgMar"); _gdaaf != nil {
			return _gdaaf
		}
	}
	if _afdcf.PaperSrc != nil {
		if _gfdfec := _afdcf.PaperSrc.ValidateWithPath(path + "\u002fPaperSrc"); _gfdfec != nil {
			return _gfdfec
		}
	}
	if _afdcf.PgBorders != nil {
		if _gbccgg := _afdcf.PgBorders.ValidateWithPath(path + "\u002fPgBorders"); _gbccgg != nil {
			return _gbccgg
		}
	}
	if _afdcf.LnNumType != nil {
		if _caebdfb := _afdcf.LnNumType.ValidateWithPath(path + "\u002fLnNumType"); _caebdfb != nil {
			return _caebdfb
		}
	}
	if _afdcf.PgNumType != nil {
		if _cgafbb := _afdcf.PgNumType.ValidateWithPath(path + "\u002fPgNumType"); _cgafbb != nil {
			return _cgafbb
		}
	}
	if _afdcf.Cols != nil {
		if _bffcg := _afdcf.Cols.ValidateWithPath(path + "\u002fCols"); _bffcg != nil {
			return _bffcg
		}
	}
	if _afdcf.FormProt != nil {
		if _bggca := _afdcf.FormProt.ValidateWithPath(path + "\u002fFormProt"); _bggca != nil {
			return _bggca
		}
	}
	if _afdcf.VAlign != nil {
		if _adecd := _afdcf.VAlign.ValidateWithPath(path + "\u002fVAlign"); _adecd != nil {
			return _adecd
		}
	}
	if _afdcf.NoEndnote != nil {
		if _bccec := _afdcf.NoEndnote.ValidateWithPath(path + "\u002fNoEndnote"); _bccec != nil {
			return _bccec
		}
	}
	if _afdcf.TitlePg != nil {
		if _bbbfb := _afdcf.TitlePg.ValidateWithPath(path + "\u002fTitlePg"); _bbbfb != nil {
			return _bbbfb
		}
	}
	if _afdcf.TextDirection != nil {
		if _ddfea := _afdcf.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _ddfea != nil {
			return _ddfea
		}
	}
	if _afdcf.Bidi != nil {
		if _cdgcb := _afdcf.Bidi.ValidateWithPath(path + "\u002fBidi"); _cdgcb != nil {
			return _cdgcb
		}
	}
	if _afdcf.RtlGutter != nil {
		if _ececfg := _afdcf.RtlGutter.ValidateWithPath(path + "\u002fRtlGutter"); _ececfg != nil {
			return _ececfg
		}
	}
	if _afdcf.DocGrid != nil {
		if _ecgfd := _afdcf.DocGrid.ValidateWithPath(path + "\u002fDocGrid"); _ecgfd != nil {
			return _ecgfd
		}
	}
	if _afdcf.PrinterSettings != nil {
		if _dcbgdc := _afdcf.PrinterSettings.ValidateWithPath(path + "\u002fPrinterSettings"); _dcbgdc != nil {
			return _dcbgdc
		}
	}
	if _afdcf.SectPrChange != nil {
		if _debda := _afdcf.SectPrChange.ValidateWithPath(path + "\u002fSectPrChange"); _debda != nil {
			return _debda
		}
	}
	return nil
}

type CT_MailMergeDataType struct {

	// Value
	ValAttr string
}

// ValidateWithPath validates the CT_SdtBlock and its children, prefixing error messages with path
func (_aafcg *CT_SdtBlock) ValidateWithPath(path string) error {
	if _aafcg.SdtPr != nil {
		if _eafde := _aafcg.SdtPr.ValidateWithPath(path + "\u002fSdtPr"); _eafde != nil {
			return _eafde
		}
	}
	if _aafcg.SdtEndPr != nil {
		if _dfecf := _aafcg.SdtEndPr.ValidateWithPath(path + "\u002fSdtEndPr"); _dfecf != nil {
			return _dfecf
		}
	}
	if _aafcg.SdtContent != nil {
		if _adbed := _aafcg.SdtContent.ValidateWithPath(path + "/SdtContent"); _adbed != nil {
			return _adbed
		}
	}
	return nil
}
func (_gcbfbd ST_InfoTextType) Validate() error { return _gcbfbd.ValidateWithPath("") }
func (_gbfdg *WdCT_TextboxInfo) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gbfdg.TxbxContent = NewWdCT_TxbxContent()
	for _, _aadbbb := range start.Attr {
		if _aadbbb.Name.Local == "id" {
			_cgabce, _dfeaa := _dd.ParseUint(_aadbbb.Value, 10, 16)
			if _dfeaa != nil {
				return _dfeaa
			}
			_dddcf := uint16(_cgabce)
			_gbfdg.IdAttr = &_dddcf
			continue
		}
	}
_bdbeb:
	for {
		_daggbe, _ececc := d.Token()
		if _ececc != nil {
			return _ececc
		}
		switch _geebc := _daggbe.(type) {
		case _d.StartElement:
			switch _geebc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "txbxContent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "txbxContent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "txbxContent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "txbxContent"}:
				if _caebbe := d.DecodeElement(_gbfdg.TxbxContent, &_geebc); _caebbe != nil {
					return _caebbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_gbfdg.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _gbfdc := d.DecodeElement(_gbfdg.ExtLst, &_geebc); _gbfdc != nil {
					return _gbfdc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_TextboxInfo\u0020\u0025v", _geebc.Name)
				if _fbcad := d.Skip(); _fbcad != nil {
					return _fbcad
				}
			}
		case _d.EndElement:
			break _bdbeb
		case _d.CharData:
		}
	}
	return nil
}

type ST_InfoTextType byte

func (_becbag WdST_AlignV) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eggbfc := _d.Attr{}
	_eggbfc.Name = name
	switch _becbag {
	case WdST_AlignVUnset:
		_eggbfc.Value = ""
	case WdST_AlignVTop:
		_eggbfc.Value = "top"
	case WdST_AlignVBottom:
		_eggbfc.Value = "bottom"
	case WdST_AlignVCenter:
		_eggbfc.Value = "center"
	case WdST_AlignVInside:
		_eggbfc.Value = "inside"
	case WdST_AlignVOutside:
		_eggbfc.Value = "outside"
	}
	return _eggbfc, nil
}
func (_degg *CT_MailMergeDest) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_agcab, _gbdegb := _degg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _gbdegb != nil {
		return _gbdegb
	}
	start.Attr = append(start.Attr, _agcab)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ffcf *CT_Rel) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", _ffcf.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_adce *CT_DocPartBehavior) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_afgfg, _bdffb := _adce.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _bdffb != nil {
		return _bdffb
	}
	start.Attr = append(start.Attr, _afgfg)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_afgdd *CT_SdtComboBox) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _afgdd.LastValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastValue"}, Value: _b.Sprintf("\u0025v", *_afgdd.LastValueAttr)})
	}
	e.EncodeToken(start)
	if _afgdd.ListItem != nil {
		_fbdgg := _d.StartElement{Name: _d.Name{Local: "w:listItem"}}
		for _, _ffbgb := range _afgdd.ListItem {
			e.EncodeElement(_ffbgb, _fbdgg)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_Column() *CT_Column { _dccb := &CT_Column{}; return _dccb }

// Validate validates the CT_OnOff and its children
func (_babedb *CT_OnOff) Validate() error { return _babedb.ValidateWithPath("CT_OnOff") }

const (
	ST_DocProtectUnset          ST_DocProtect = 0
	ST_DocProtectNone           ST_DocProtect = 1
	ST_DocProtectReadOnly       ST_DocProtect = 2
	ST_DocProtectComments       ST_DocProtect = 3
	ST_DocProtectTrackedChanges ST_DocProtect = 4
	ST_DocProtectForms          ST_DocProtect = 5
)

// ST_HexColor is a union type
type ST_HexColor struct {
	ST_HexColorAuto ST_HexColorAuto
	ST_HexColorRGB  *string
}

func (_cabdea ST_EdnPos) String() string {
	switch _cabdea {
	case 0:
		return ""
	case 1:
		return "sectEnd"
	case 2:
		return "docEnd"
	}
	return ""
}
func ParseUnionST_OnOff(s string) (_g.ST_OnOff, error) { return _g.ParseUnionST_OnOff(s) }
func (_bdffe *CT_SmartTagType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fdccb := range start.Attr {
		if _fdccb.Name.Local == "namespaceuri" {
			_caeaca, _fbbdb := _fdccb.Value, error(nil)
			if _fbbdb != nil {
				return _fbbdb
			}
			_bdffe.NamespaceuriAttr = &_caeaca
			continue
		}
		if _fdccb.Name.Local == "name" {
			_ffgdf, _cdagf := _fdccb.Value, error(nil)
			if _cdagf != nil {
				return _cdagf
			}
			_bdffe.NameAttr = &_ffgdf
			continue
		}
		if _fdccb.Name.Local == "url" {
			_fbgeb, _cfagcg := _fdccb.Value, error(nil)
			if _cfagcg != nil {
				return _cfagcg
			}
			_bdffe.UrlAttr = &_fbgeb
			continue
		}
	}
	for {
		_geafd, _dgcga := d.Token()
		if _dgcga != nil {
			return _b.Errorf("parsing CT_SmartTagType:\u0020\u0025s", _dgcga)
		}
		if _gabfa, _cggcef := _geafd.(_d.EndElement); _cggcef && _gabfa.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_PPr() *CT_PPr { _gaggb := &CT_PPr{}; return _gaggb }

// ValidateWithPath validates the CT_Frame and its children, prefixing error messages with path
func (_bcafeg *CT_Frame) ValidateWithPath(path string) error {
	if _bcafeg.Sz != nil {
		if _beef := _bcafeg.Sz.ValidateWithPath(path + "\u002fSz"); _beef != nil {
			return _beef
		}
	}
	if _bcafeg.Name != nil {
		if _cbgeg := _bcafeg.Name.ValidateWithPath(path + "\u002fName"); _cbgeg != nil {
			return _cbgeg
		}
	}
	if _bcafeg.Title != nil {
		if _bgbda := _bcafeg.Title.ValidateWithPath(path + "\u002fTitle"); _bgbda != nil {
			return _bgbda
		}
	}
	if _bcafeg.LongDesc != nil {
		if _dffg := _bcafeg.LongDesc.ValidateWithPath(path + "\u002fLongDesc"); _dffg != nil {
			return _dffg
		}
	}
	if _bcafeg.SourceFileName != nil {
		if _fddb := _bcafeg.SourceFileName.ValidateWithPath(path + "\u002fSourceFileName"); _fddb != nil {
			return _fddb
		}
	}
	if _bcafeg.MarW != nil {
		if _cefag := _bcafeg.MarW.ValidateWithPath(path + "\u002fMarW"); _cefag != nil {
			return _cefag
		}
	}
	if _bcafeg.MarH != nil {
		if _abead := _bcafeg.MarH.ValidateWithPath(path + "\u002fMarH"); _abead != nil {
			return _abead
		}
	}
	if _bcafeg.Scrollbar != nil {
		if _ggaea := _bcafeg.Scrollbar.ValidateWithPath(path + "\u002fScrollbar"); _ggaea != nil {
			return _ggaea
		}
	}
	if _bcafeg.NoResizeAllowed != nil {
		if _affe := _bcafeg.NoResizeAllowed.ValidateWithPath(path + "\u002fNoResizeAllowed"); _affe != nil {
			return _affe
		}
	}
	if _bcafeg.LinkedToFile != nil {
		if _aggdg := _bcafeg.LinkedToFile.ValidateWithPath(path + "\u002fLinkedToFile"); _aggdg != nil {
			return _aggdg
		}
	}
	return nil
}
func (_bdfbb ST_FontFamily) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gdaeef := _d.Attr{}
	_gdaeef.Name = name
	switch _bdfbb {
	case ST_FontFamilyUnset:
		_gdaeef.Value = ""
	case ST_FontFamilyDecorative:
		_gdaeef.Value = "decorative"
	case ST_FontFamilyModern:
		_gdaeef.Value = "modern"
	case ST_FontFamilyRoman:
		_gdaeef.Value = "roman"
	case ST_FontFamilyScript:
		_gdaeef.Value = "script"
	case ST_FontFamilySwiss:
		_gdaeef.Value = "swiss"
	case ST_FontFamilyAuto:
		_gdaeef.Value = "auto"
	}
	return _gdaeef, nil
}
func (_accdf *CT_MarkupRange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bbeeg := range start.Attr {
		if _bbeeg.Name.Local == "displacedByCustomXml" {
			_accdf.DisplacedByCustomXmlAttr.UnmarshalXMLAttr(_bbeeg)
			continue
		}
		if _bbeeg.Name.Local == "id" {
			_bddfg, _eabee := _dd.ParseInt(_bbeeg.Value, 10, 64)
			if _eabee != nil {
				return _eabee
			}
			_accdf.IdAttr = _bddfg
			continue
		}
	}
	for {
		_dddaf, _efgegg := d.Token()
		if _efgegg != nil {
			return _b.Errorf("parsing\u0020CT_MarkupRange:\u0020\u0025s", _efgegg)
		}
		if _dfccd, _aeabc := _dddaf.(_d.EndElement); _aeabc && _dfccd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adab *CT_LevelText) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _adab.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_adab.ValAttr)})
	}
	if _adab.NullAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:null"}, Value: _b.Sprintf("\u0025v", *_adab.NullAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TabJcUnset   ST_TabJc = 0
	ST_TabJcClear   ST_TabJc = 1
	ST_TabJcStart   ST_TabJc = 2
	ST_TabJcCenter  ST_TabJc = 3
	ST_TabJcEnd     ST_TabJc = 4
	ST_TabJcDecimal ST_TabJc = 5
	ST_TabJcBar     ST_TabJc = 6
	ST_TabJcNum     ST_TabJc = 7
	ST_TabJcLeft    ST_TabJc = 8
	ST_TabJcRight   ST_TabJc = 9
)

type CT_DocVar struct {

	// Document Variable Name
	NameAttr string

	// Document Variable Value
	ValAttr string
}

// ValidateWithPath validates the AG_SectPrAttributes and its children, prefixing error messages with path
func (_eeb *AG_SectPrAttributes) ValidateWithPath(path string) error { return nil }
func (_dbgec ST_RestartNumber) Validate() error                      { return _dbgec.ValidateWithPath("") }
func (_agcfd *CT_SdtListItem) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _agcfd.DisplayTextAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:displayText"}, Value: _b.Sprintf("\u0025v", *_agcfd.DisplayTextAttr)})
	}
	if _agcfd.ValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:value"}, Value: _b.Sprintf("\u0025v", *_agcfd.ValueAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_afgag ST_FtnPos) ValidateWithPath(path string) error {
	switch _afgag {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_afgag))
	}
	return nil
}

type CT_FontsList struct {

	// Properties for a Single Font
	Font []*CT_Font
}

func NewCT_FtnPos() *CT_FtnPos { _acaba := &CT_FtnPos{}; _acaba.ValAttr = ST_FtnPos(1); return _acaba }
func NewWdCT_WordprocessingContentPartNonVisual() *WdCT_WordprocessingContentPartNonVisual {
	_dbbded := &WdCT_WordprocessingContentPartNonVisual{}
	return _dbbded
}
func (_cecag *Settings) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cecag.CT_Settings = *NewCT_Settings()
_cadabb:
	for {
		_ccdedd, _gfaegc := d.Token()
		if _gfaegc != nil {
			return _gfaegc
		}
		switch _cbdcec := _ccdedd.(type) {
		case _d.StartElement:
			switch _cbdcec.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "writeProtection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "writeProtection"}:
				_cecag.WriteProtection = NewCT_WriteProtection()
				if _baaaff := d.DecodeElement(_cecag.WriteProtection, &_cbdcec); _baaaff != nil {
					return _baaaff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "view"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "view"}:
				_cecag.View = NewCT_View()
				if _cafbfa := d.DecodeElement(_cecag.View, &_cbdcec); _cafbfa != nil {
					return _cafbfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "zoom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "zoom"}:
				_cecag.Zoom = NewCT_Zoom()
				if _feaga := d.DecodeElement(_cecag.Zoom, &_cbdcec); _feaga != nil {
					return _feaga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "removePersonalInformation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "removePersonalInformation"}:
				_cecag.RemovePersonalInformation = NewCT_OnOff()
				if _degec := d.DecodeElement(_cecag.RemovePersonalInformation, &_cbdcec); _degec != nil {
					return _degec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "removeDateAndTime"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "removeDateAndTime"}:
				_cecag.RemoveDateAndTime = NewCT_OnOff()
				if _ecgbfg := d.DecodeElement(_cecag.RemoveDateAndTime, &_cbdcec); _ecgbfg != nil {
					return _ecgbfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotDisplayPageBoundaries"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotDisplayPageBoundaries"}:
				_cecag.DoNotDisplayPageBoundaries = NewCT_OnOff()
				if _gdagce := d.DecodeElement(_cecag.DoNotDisplayPageBoundaries, &_cbdcec); _gdagce != nil {
					return _gdagce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "displayBackgroundShape"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "displayBackgroundShape"}:
				_cecag.DisplayBackgroundShape = NewCT_OnOff()
				if _bebcdf := d.DecodeElement(_cecag.DisplayBackgroundShape, &_cbdcec); _bebcdf != nil {
					return _bebcdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printPostScriptOverText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printPostScriptOverText"}:
				_cecag.PrintPostScriptOverText = NewCT_OnOff()
				if _bcfcfd := d.DecodeElement(_cecag.PrintPostScriptOverText, &_cbdcec); _bcfcfd != nil {
					return _bcfcfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printFractionalCharacterWidth"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printFractionalCharacterWidth"}:
				_cecag.PrintFractionalCharacterWidth = NewCT_OnOff()
				if _abbcc := d.DecodeElement(_cecag.PrintFractionalCharacterWidth, &_cbdcec); _abbcc != nil {
					return _abbcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printFormsData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printFormsData"}:
				_cecag.PrintFormsData = NewCT_OnOff()
				if _aeafg := d.DecodeElement(_cecag.PrintFormsData, &_cbdcec); _aeafg != nil {
					return _aeafg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedTrueTypeFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedTrueTypeFonts"}:
				_cecag.EmbedTrueTypeFonts = NewCT_OnOff()
				if _ggbgcb := d.DecodeElement(_cecag.EmbedTrueTypeFonts, &_cbdcec); _ggbgcb != nil {
					return _ggbgcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedSystemFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedSystemFonts"}:
				_cecag.EmbedSystemFonts = NewCT_OnOff()
				if _cbabddf := d.DecodeElement(_cecag.EmbedSystemFonts, &_cbdcec); _cbabddf != nil {
					return _cbabddf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveSubsetFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveSubsetFonts"}:
				_cecag.SaveSubsetFonts = NewCT_OnOff()
				if _agebgd := d.DecodeElement(_cecag.SaveSubsetFonts, &_cbdcec); _agebgd != nil {
					return _agebgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveFormsData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveFormsData"}:
				_cecag.SaveFormsData = NewCT_OnOff()
				if _ccefc := d.DecodeElement(_cecag.SaveFormsData, &_cbdcec); _ccefc != nil {
					return _ccefc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mirrorMargins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mirrorMargins"}:
				_cecag.MirrorMargins = NewCT_OnOff()
				if _ebeag := d.DecodeElement(_cecag.MirrorMargins, &_cbdcec); _ebeag != nil {
					return _ebeag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alignBordersAndEdges"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alignBordersAndEdges"}:
				_cecag.AlignBordersAndEdges = NewCT_OnOff()
				if _ceceaf := d.DecodeElement(_cecag.AlignBordersAndEdges, &_cbdcec); _ceceaf != nil {
					return _ceceaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bordersDoNotSurroundHeader"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bordersDoNotSurroundHeader"}:
				_cecag.BordersDoNotSurroundHeader = NewCT_OnOff()
				if _gdabb := d.DecodeElement(_cecag.BordersDoNotSurroundHeader, &_cbdcec); _gdabb != nil {
					return _gdabb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bordersDoNotSurroundFooter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bordersDoNotSurroundFooter"}:
				_cecag.BordersDoNotSurroundFooter = NewCT_OnOff()
				if _bfceeb := d.DecodeElement(_cecag.BordersDoNotSurroundFooter, &_cbdcec); _bfceeb != nil {
					return _bfceeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gutterAtTop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gutterAtTop"}:
				_cecag.GutterAtTop = NewCT_OnOff()
				if _ecggc := d.DecodeElement(_cecag.GutterAtTop, &_cbdcec); _ecggc != nil {
					return _ecggc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hideSpellingErrors"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hideSpellingErrors"}:
				_cecag.HideSpellingErrors = NewCT_OnOff()
				if _bceee := d.DecodeElement(_cecag.HideSpellingErrors, &_cbdcec); _bceee != nil {
					return _bceee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hideGrammaticalErrors"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hideGrammaticalErrors"}:
				_cecag.HideGrammaticalErrors = NewCT_OnOff()
				if _caedf := d.DecodeElement(_cecag.HideGrammaticalErrors, &_cbdcec); _caedf != nil {
					return _caedf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "activeWritingStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "activeWritingStyle"}:
				_cdbde := NewCT_WritingStyle()
				if _bdfaga := d.DecodeElement(_cdbde, &_cbdcec); _bdfaga != nil {
					return _bdfaga
				}
				_cecag.ActiveWritingStyle = append(_cecag.ActiveWritingStyle, _cdbde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofState"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofState"}:
				_cecag.ProofState = NewCT_Proof()
				if _acgef := d.DecodeElement(_cecag.ProofState, &_cbdcec); _acgef != nil {
					return _acgef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "formsDesign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "formsDesign"}:
				_cecag.FormsDesign = NewCT_OnOff()
				if _cccbe := d.DecodeElement(_cecag.FormsDesign, &_cbdcec); _cccbe != nil {
					return _cccbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "attachedTemplate"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "attachedTemplate"}:
				_cecag.AttachedTemplate = NewCT_Rel()
				if _bddfd := d.DecodeElement(_cecag.AttachedTemplate, &_cbdcec); _bddfd != nil {
					return _bddfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "linkStyles"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "linkStyles"}:
				_cecag.LinkStyles = NewCT_OnOff()
				if _dbgcd := d.DecodeElement(_cecag.LinkStyles, &_cbdcec); _dbgcd != nil {
					return _dbgcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "stylePaneFormatFilter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "stylePaneFormatFilter"}:
				_cecag.StylePaneFormatFilter = NewCT_StylePaneFilter()
				if _cgbed := d.DecodeElement(_cecag.StylePaneFormatFilter, &_cbdcec); _cgbed != nil {
					return _cgbed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "stylePaneSortMethod"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "stylePaneSortMethod"}:
				_cecag.StylePaneSortMethod = NewCT_StyleSort()
				if _babfe := d.DecodeElement(_cecag.StylePaneSortMethod, &_cbdcec); _babfe != nil {
					return _babfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "documentType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "documentType"}:
				_cecag.DocumentType = NewCT_DocType()
				if _gcbfbc := d.DecodeElement(_cecag.DocumentType, &_cbdcec); _gcbfbc != nil {
					return _gcbfbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mailMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mailMerge"}:
				_cecag.MailMerge = NewCT_MailMerge()
				if _ddagf := d.DecodeElement(_cecag.MailMerge, &_cbdcec); _ddagf != nil {
					return _ddagf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "revisionView"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "revisionView"}:
				_cecag.RevisionView = NewCT_TrackChangesView()
				if _cecddf := d.DecodeElement(_cecag.RevisionView, &_cbdcec); _cecddf != nil {
					return _cecddf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trackRevisions"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trackRevisions"}:
				_cecag.TrackRevisions = NewCT_OnOff()
				if _acgbc := d.DecodeElement(_cecag.TrackRevisions, &_cbdcec); _acgbc != nil {
					return _acgbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotTrackMoves"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotTrackMoves"}:
				_cecag.DoNotTrackMoves = NewCT_OnOff()
				if _efedf := d.DecodeElement(_cecag.DoNotTrackMoves, &_cbdcec); _efedf != nil {
					return _efedf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotTrackFormatting"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotTrackFormatting"}:
				_cecag.DoNotTrackFormatting = NewCT_OnOff()
				if _gebaa := d.DecodeElement(_cecag.DoNotTrackFormatting, &_cbdcec); _gebaa != nil {
					return _gebaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "documentProtection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "documentProtection"}:
				_cecag.DocumentProtection = NewCT_DocProtect()
				if _gbafe := d.DecodeElement(_cecag.DocumentProtection, &_cbdcec); _gbafe != nil {
					return _gbafe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoFormatOverride"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoFormatOverride"}:
				_cecag.AutoFormatOverride = NewCT_OnOff()
				if _bcdcbc := d.DecodeElement(_cecag.AutoFormatOverride, &_cbdcec); _bcdcbc != nil {
					return _bcdcbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "styleLockTheme"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "styleLockTheme"}:
				_cecag.StyleLockTheme = NewCT_OnOff()
				if _dfdcec := d.DecodeElement(_cecag.StyleLockTheme, &_cbdcec); _dfdcec != nil {
					return _dfdcec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "styleLockQFSet"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "styleLockQFSet"}:
				_cecag.StyleLockQFSet = NewCT_OnOff()
				if _cgfbdg := d.DecodeElement(_cecag.StyleLockQFSet, &_cbdcec); _cgfbdg != nil {
					return _cgfbdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "defaultTabStop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "defaultTabStop"}:
				_cecag.DefaultTabStop = NewCT_TwipsMeasure()
				if _eggff := d.DecodeElement(_cecag.DefaultTabStop, &_cbdcec); _eggff != nil {
					return _eggff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoHyphenation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoHyphenation"}:
				_cecag.AutoHyphenation = NewCT_OnOff()
				if _afccfd := d.DecodeElement(_cecag.AutoHyphenation, &_cbdcec); _afccfd != nil {
					return _afccfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "consecutiveHyphenLimit"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "consecutiveHyphenLimit"}:
				_cecag.ConsecutiveHyphenLimit = NewCT_DecimalNumber()
				if _eecaag := d.DecodeElement(_cecag.ConsecutiveHyphenLimit, &_cbdcec); _eecaag != nil {
					return _eecaag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyphenationZone"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyphenationZone"}:
				_cecag.HyphenationZone = NewCT_TwipsMeasure()
				if _dcefbb := d.DecodeElement(_cecag.HyphenationZone, &_cbdcec); _dcefbb != nil {
					return _dcefbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotHyphenateCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotHyphenateCaps"}:
				_cecag.DoNotHyphenateCaps = NewCT_OnOff()
				if _dbddf := d.DecodeElement(_cecag.DoNotHyphenateCaps, &_cbdcec); _dbddf != nil {
					return _dbddf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "showEnvelope"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "showEnvelope"}:
				_cecag.ShowEnvelope = NewCT_OnOff()
				if _cdfaf := d.DecodeElement(_cecag.ShowEnvelope, &_cbdcec); _cdfaf != nil {
					return _cdfaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "summaryLength"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "summaryLength"}:
				_cecag.SummaryLength = NewCT_DecimalNumberOrPrecent()
				if _fbbaa := d.DecodeElement(_cecag.SummaryLength, &_cbdcec); _fbbaa != nil {
					return _fbbaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "clickAndTypeStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "clickAndTypeStyle"}:
				_cecag.ClickAndTypeStyle = NewCT_String()
				if _eccca := d.DecodeElement(_cecag.ClickAndTypeStyle, &_cbdcec); _eccca != nil {
					return _eccca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "defaultTableStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "defaultTableStyle"}:
				_cecag.DefaultTableStyle = NewCT_String()
				if _bgdbg := d.DecodeElement(_cecag.DefaultTableStyle, &_cbdcec); _bgdbg != nil {
					return _bgdbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "evenAndOddHeaders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "evenAndOddHeaders"}:
				_cecag.EvenAndOddHeaders = NewCT_OnOff()
				if _cdedeb := d.DecodeElement(_cecag.EvenAndOddHeaders, &_cbdcec); _cdedeb != nil {
					return _cdedeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookFoldRevPrinting"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookFoldRevPrinting"}:
				_cecag.BookFoldRevPrinting = NewCT_OnOff()
				if _dbfff := d.DecodeElement(_cecag.BookFoldRevPrinting, &_cbdcec); _dbfff != nil {
					return _dbfff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookFoldPrinting"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookFoldPrinting"}:
				_cecag.BookFoldPrinting = NewCT_OnOff()
				if _gcceef := d.DecodeElement(_cecag.BookFoldPrinting, &_cbdcec); _gcceef != nil {
					return _gcceef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookFoldPrintingSheets"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookFoldPrintingSheets"}:
				_cecag.BookFoldPrintingSheets = NewCT_DecimalNumber()
				if _gbfgg := d.DecodeElement(_cecag.BookFoldPrintingSheets, &_cbdcec); _gbfgg != nil {
					return _gbfgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridHorizontalSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridHorizontalSpacing"}:
				_cecag.DrawingGridHorizontalSpacing = NewCT_TwipsMeasure()
				if _edaddgf := d.DecodeElement(_cecag.DrawingGridHorizontalSpacing, &_cbdcec); _edaddgf != nil {
					return _edaddgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridVerticalSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridVerticalSpacing"}:
				_cecag.DrawingGridVerticalSpacing = NewCT_TwipsMeasure()
				if _abgfda := d.DecodeElement(_cecag.DrawingGridVerticalSpacing, &_cbdcec); _abgfda != nil {
					return _abgfda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "displayHorizontalDrawingGridEvery"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "displayHorizontalDrawingGridEvery"}:
				_cecag.DisplayHorizontalDrawingGridEvery = NewCT_DecimalNumber()
				if _dbebb := d.DecodeElement(_cecag.DisplayHorizontalDrawingGridEvery, &_cbdcec); _dbebb != nil {
					return _dbebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "displayVerticalDrawingGridEvery"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "displayVerticalDrawingGridEvery"}:
				_cecag.DisplayVerticalDrawingGridEvery = NewCT_DecimalNumber()
				if _fdcfb := d.DecodeElement(_cecag.DisplayVerticalDrawingGridEvery, &_cbdcec); _fdcfb != nil {
					return _fdcfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotUseMarginsForDrawingGridOrigin"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotUseMarginsForDrawingGridOrigin"}:
				_cecag.DoNotUseMarginsForDrawingGridOrigin = NewCT_OnOff()
				if _ecagd := d.DecodeElement(_cecag.DoNotUseMarginsForDrawingGridOrigin, &_cbdcec); _ecagd != nil {
					return _ecagd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridHorizontalOrigin"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridHorizontalOrigin"}:
				_cecag.DrawingGridHorizontalOrigin = NewCT_TwipsMeasure()
				if _cbgggf := d.DecodeElement(_cecag.DrawingGridHorizontalOrigin, &_cbdcec); _cbgggf != nil {
					return _cbgggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridVerticalOrigin"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridVerticalOrigin"}:
				_cecag.DrawingGridVerticalOrigin = NewCT_TwipsMeasure()
				if _cccad := d.DecodeElement(_cecag.DrawingGridVerticalOrigin, &_cbdcec); _cccad != nil {
					return _cccad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotShadeFormData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotShadeFormData"}:
				_cecag.DoNotShadeFormData = NewCT_OnOff()
				if _agfgc := d.DecodeElement(_cecag.DoNotShadeFormData, &_cbdcec); _agfgc != nil {
					return _agfgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noPunctuationKerning"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noPunctuationKerning"}:
				_cecag.NoPunctuationKerning = NewCT_OnOff()
				if _beegg := d.DecodeElement(_cecag.NoPunctuationKerning, &_cbdcec); _beegg != nil {
					return _beegg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "characterSpacingControl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "characterSpacingControl"}:
				_cecag.CharacterSpacingControl = NewCT_CharacterSpacing()
				if _dfaab := d.DecodeElement(_cecag.CharacterSpacingControl, &_cbdcec); _dfaab != nil {
					return _dfaab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printTwoOnOne"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printTwoOnOne"}:
				_cecag.PrintTwoOnOne = NewCT_OnOff()
				if _defee := d.DecodeElement(_cecag.PrintTwoOnOne, &_cbdcec); _defee != nil {
					return _defee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strictFirstAndLastChars"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strictFirstAndLastChars"}:
				_cecag.StrictFirstAndLastChars = NewCT_OnOff()
				if _ggbad := d.DecodeElement(_cecag.StrictFirstAndLastChars, &_cbdcec); _ggbad != nil {
					return _ggbad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noLineBreaksAfter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noLineBreaksAfter"}:
				_cecag.NoLineBreaksAfter = NewCT_Kinsoku()
				if _faagd := d.DecodeElement(_cecag.NoLineBreaksAfter, &_cbdcec); _faagd != nil {
					return _faagd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noLineBreaksBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noLineBreaksBefore"}:
				_cecag.NoLineBreaksBefore = NewCT_Kinsoku()
				if _abfec := d.DecodeElement(_cecag.NoLineBreaksBefore, &_cbdcec); _abfec != nil {
					return _abfec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "savePreviewPicture"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "savePreviewPicture"}:
				_cecag.SavePreviewPicture = NewCT_OnOff()
				if _dacfdc := d.DecodeElement(_cecag.SavePreviewPicture, &_cbdcec); _dacfdc != nil {
					return _dacfdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotValidateAgainstSchema"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotValidateAgainstSchema"}:
				_cecag.DoNotValidateAgainstSchema = NewCT_OnOff()
				if _bgcccg := d.DecodeElement(_cecag.DoNotValidateAgainstSchema, &_cbdcec); _bgcccg != nil {
					return _bgcccg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveInvalidXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveInvalidXml"}:
				_cecag.SaveInvalidXml = NewCT_OnOff()
				if _beeda := d.DecodeElement(_cecag.SaveInvalidXml, &_cbdcec); _beeda != nil {
					return _beeda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ignoreMixedContent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ignoreMixedContent"}:
				_cecag.IgnoreMixedContent = NewCT_OnOff()
				if _cgcef := d.DecodeElement(_cecag.IgnoreMixedContent, &_cbdcec); _cgcef != nil {
					return _cgcef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alwaysShowPlaceholderText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alwaysShowPlaceholderText"}:
				_cecag.AlwaysShowPlaceholderText = NewCT_OnOff()
				if _cffcb := d.DecodeElement(_cecag.AlwaysShowPlaceholderText, &_cbdcec); _cffcb != nil {
					return _cffcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotDemarcateInvalidXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotDemarcateInvalidXml"}:
				_cecag.DoNotDemarcateInvalidXml = NewCT_OnOff()
				if _fdfgcg := d.DecodeElement(_cecag.DoNotDemarcateInvalidXml, &_cbdcec); _fdfgcg != nil {
					return _fdfgcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveXmlDataOnly"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveXmlDataOnly"}:
				_cecag.SaveXmlDataOnly = NewCT_OnOff()
				if _fcddcf := d.DecodeElement(_cecag.SaveXmlDataOnly, &_cbdcec); _fcddcf != nil {
					return _fcddcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useXSLTWhenSaving"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useXSLTWhenSaving"}:
				_cecag.UseXSLTWhenSaving = NewCT_OnOff()
				if _dbcdd := d.DecodeElement(_cecag.UseXSLTWhenSaving, &_cbdcec); _dbcdd != nil {
					return _dbcdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveThroughXslt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveThroughXslt"}:
				_cecag.SaveThroughXslt = NewCT_SaveThroughXslt()
				if _eccaff := d.DecodeElement(_cecag.SaveThroughXslt, &_cbdcec); _eccaff != nil {
					return _eccaff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "showXMLTags"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "showXMLTags"}:
				_cecag.ShowXMLTags = NewCT_OnOff()
				if _bbfdgc := d.DecodeElement(_cecag.ShowXMLTags, &_cbdcec); _bbfdgc != nil {
					return _bbfdgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alwaysMergeEmptyNamespace"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alwaysMergeEmptyNamespace"}:
				_cecag.AlwaysMergeEmptyNamespace = NewCT_OnOff()
				if _ebdafec := d.DecodeElement(_cecag.AlwaysMergeEmptyNamespace, &_cbdcec); _ebdafec != nil {
					return _ebdafec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "updateFields"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "updateFields"}:
				_cecag.UpdateFields = NewCT_OnOff()
				if _cddacg := d.DecodeElement(_cecag.UpdateFields, &_cbdcec); _cddacg != nil {
					return _cddacg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hdrShapeDefaults"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hdrShapeDefaults"}:
				_cecag.HdrShapeDefaults = NewCT_ShapeDefaults()
				if _gccbg := d.DecodeElement(_cecag.HdrShapeDefaults, &_cbdcec); _gccbg != nil {
					return _gccbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnotePr"}:
				_cecag.FootnotePr = NewCT_FtnDocProps()
				if _fabfc := d.DecodeElement(_cecag.FootnotePr, &_cbdcec); _fabfc != nil {
					return _fabfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnotePr"}:
				_cecag.EndnotePr = NewCT_EdnDocProps()
				if _cggdd := d.DecodeElement(_cecag.EndnotePr, &_cbdcec); _cggdd != nil {
					return _cggdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "compat"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "compat"}:
				_cecag.Compat = NewCT_Compat()
				if _fdaffd := d.DecodeElement(_cecag.Compat, &_cbdcec); _fdaffd != nil {
					return _fdaffd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docVars"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docVars"}:
				_cecag.DocVars = NewCT_DocVars()
				if _acdffc := d.DecodeElement(_cecag.DocVars, &_cbdcec); _acdffc != nil {
					return _acdffc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rsids"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rsids"}:
				_cecag.Rsids = NewCT_DocRsids()
				if _aebeg := d.DecodeElement(_cecag.Rsids, &_cbdcec); _aebeg != nil {
					return _aebeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "mathPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "mathPr"}:
				_cecag.MathPr = _f.NewMathPr()
				if _gcbfa := d.DecodeElement(_cecag.MathPr, &_cbdcec); _gcbfa != nil {
					return _gcbfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "attachedSchema"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "attachedSchema"}:
				_abecc := NewCT_String()
				if _cccegd := d.DecodeElement(_abecc, &_cbdcec); _cccegd != nil {
					return _cccegd
				}
				_cecag.AttachedSchema = append(_cecag.AttachedSchema, _abecc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "themeFontLang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "themeFontLang"}:
				_cecag.ThemeFontLang = NewCT_Language()
				if _bafff := d.DecodeElement(_cecag.ThemeFontLang, &_cbdcec); _bafff != nil {
					return _bafff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "clrSchemeMapping"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "clrSchemeMapping"}:
				_cecag.ClrSchemeMapping = NewCT_ColorSchemeMapping()
				if _beedb := d.DecodeElement(_cecag.ClrSchemeMapping, &_cbdcec); _beedb != nil {
					return _beedb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotIncludeSubdocsInStats"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotIncludeSubdocsInStats"}:
				_cecag.DoNotIncludeSubdocsInStats = NewCT_OnOff()
				if _efaef := d.DecodeElement(_cecag.DoNotIncludeSubdocsInStats, &_cbdcec); _efaef != nil {
					return _efaef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotAutoCompressPictures"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotAutoCompressPictures"}:
				_cecag.DoNotAutoCompressPictures = NewCT_OnOff()
				if _acefd := d.DecodeElement(_cecag.DoNotAutoCompressPictures, &_cbdcec); _acefd != nil {
					return _acefd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "forceUpgrade"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "forceUpgrade"}:
				_cecag.ForceUpgrade = NewCT_Empty()
				if _fdgbfe := d.DecodeElement(_cecag.ForceUpgrade, &_cbdcec); _fdgbfe != nil {
					return _fdgbfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "captions"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "captions"}:
				_cecag.Captions = NewCT_Captions()
				if _bbged := d.DecodeElement(_cecag.Captions, &_cbdcec); _bbged != nil {
					return _bbged
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "readModeInkLockDown"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "readModeInkLockDown"}:
				_cecag.ReadModeInkLockDown = NewCT_ReadingModeInkLockDown()
				if _agacfg := d.DecodeElement(_cecag.ReadModeInkLockDown, &_cbdcec); _agacfg != nil {
					return _agacfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTagType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTagType"}:
				_decda := NewCT_SmartTagType()
				if _dffcbb := d.DecodeElement(_decda, &_cbdcec); _dffcbb != nil {
					return _dffcbb
				}
				_cecag.SmartTagType = append(_cecag.SmartTagType, _decda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain", Local: "schemaLibrary"}:
				_cecag.SchemaLibrary = _gg.NewSchemaLibrary()
				if _aeagbg := d.DecodeElement(_cecag.SchemaLibrary, &_cbdcec); _aeagbg != nil {
					return _aeagbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shapeDefaults"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shapeDefaults"}:
				_cecag.ShapeDefaults = NewCT_ShapeDefaults()
				if _dcgeac := d.DecodeElement(_cecag.ShapeDefaults, &_cbdcec); _dcgeac != nil {
					return _dcgeac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotEmbedSmartTags"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotEmbedSmartTags"}:
				_cecag.DoNotEmbedSmartTags = NewCT_OnOff()
				if _gbgfc := d.DecodeElement(_cecag.DoNotEmbedSmartTags, &_cbdcec); _gbgfc != nil {
					return _gbgfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "decimalSymbol"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "decimalSymbol"}:
				_cecag.DecimalSymbol = NewCT_String()
				if _gdcad := d.DecodeElement(_cecag.DecimalSymbol, &_cbdcec); _gdcad != nil {
					return _gdcad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "listSeparator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "listSeparator"}:
				_cecag.ListSeparator = NewCT_String()
				if _gageg := d.DecodeElement(_cecag.ListSeparator, &_cbdcec); _gageg != nil {
					return _gageg
				}
			default:
				_dceffd := &_ga.XSDAny{}
				if _dcbcf := d.DecodeElement(_dceffd, &_cbdcec); _dcbcf != nil {
					return _dcbcf
				}
				_cecag.Extra = append(_cecag.Extra, _dceffd)
			}
		case _d.EndElement:
			break _cadabb
		case _d.CharData:
		}
	}
	return nil
}
func (_geeg *CT_FFDDList) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _geeg.Result != nil {
		_bgdag := _d.StartElement{Name: _d.Name{Local: "w:result"}}
		e.EncodeElement(_geeg.Result, _bgdag)
	}
	if _geeg.Default != nil {
		_aabcb := _d.StartElement{Name: _d.Name{Local: "w:default"}}
		e.EncodeElement(_geeg.Default, _aabcb)
	}
	if _geeg.ListEntry != nil {
		_bcafe := _d.StartElement{Name: _d.Name{Local: "w:listEntry"}}
		for _, _efbb := range _geeg.ListEntry {
			e.EncodeElement(_efbb, _bcafe)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DocVar and its children
func (_ecfa *CT_DocVar) Validate() error { return _ecfa.ValidateWithPath("CT_DocVar") }
func (_afcfbg *CT_Underline) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _afcfbg.ValAttr != ST_UnderlineUnset {
		_afddcd, _adfag := _afcfbg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _adfag != nil {
			return _adfag
		}
		start.Attr = append(start.Attr, _afddcd)
	}
	if _afcfbg.ColorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:color"}, Value: _b.Sprintf("\u0025v", *_afcfbg.ColorAttr)})
	}
	if _afcfbg.ThemeColorAttr != ST_ThemeColorUnset {
		_aaeaf, _gfbag := _afcfbg.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _gfbag != nil {
			return _gfbag
		}
		start.Attr = append(start.Attr, _aaeaf)
	}
	if _afcfbg.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_afcfbg.ThemeTintAttr)})
	}
	if _afcfbg.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_afcfbg.ThemeShadeAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gcafb *CT_PaperSource) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _febf := range start.Attr {
		if _febf.Name.Local == "first" {
			_bafgf, _aafcf := _dd.ParseInt(_febf.Value, 10, 64)
			if _aafcf != nil {
				return _aafcf
			}
			_gcafb.FirstAttr = &_bafgf
			continue
		}
		if _febf.Name.Local == "other" {
			_dfgee, _fcdg := _dd.ParseInt(_febf.Value, 10, 64)
			if _fcdg != nil {
				return _fcdg
			}
			_gcafb.OtherAttr = &_dfgee
			continue
		}
	}
	for {
		_dgdaa, _ggbea := d.Token()
		if _ggbea != nil {
			return _b.Errorf("parsing\u0020CT_PaperSource:\u0020\u0025s", _ggbea)
		}
		if _aadcc, _bgfdg := _dgdaa.(_d.EndElement); _bgfdg && _aadcc.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_LineSpacingRule byte

func NewCT_Comment() *CT_Comment { _bdbd := &CT_Comment{}; return _bdbd }
func (_fdgdda ST_StyleType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cbedeg := _d.Attr{}
	_cbedeg.Name = name
	switch _fdgdda {
	case ST_StyleTypeUnset:
		_cbedeg.Value = ""
	case ST_StyleTypeParagraph:
		_cbedeg.Value = "paragraph"
	case ST_StyleTypeCharacter:
		_cbedeg.Value = "character"
	case ST_StyleTypeTable:
		_cbedeg.Value = "table"
	case ST_StyleTypeNumbering:
		_cbedeg.Value = "numbering"
	}
	return _cbedeg, nil
}

// ValidateWithPath validates the CT_TblWidth and its children, prefixing error messages with path
func (_afcbf *CT_TblWidth) ValidateWithPath(path string) error {
	if _afcbf.WAttr != nil {
		if _bgccg := _afcbf.WAttr.ValidateWithPath(path + "\u002fWAttr"); _bgccg != nil {
			return _bgccg
		}
	}
	if _cgdba := _afcbf.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _cgdba != nil {
		return _cgdba
	}
	return nil
}
func (_edaccc *ST_PageOrientation) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_caagdf, _cedcga := d.Token()
	if _cedcga != nil {
		return _cedcga
	}
	if _gcadde, _dddef := _caagdf.(_d.EndElement); _dddef && _gcadde.Name == start.Name {
		*_edaccc = 1
		return nil
	}
	if _fcbgd, _fcafa := _caagdf.(_d.CharData); !_fcafa {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _caagdf)
	} else {
		switch string(_fcbgd) {
		case "":
			*_edaccc = 0
		case "portrait":
			*_edaccc = 1
		case "landscape":
			*_edaccc = 2
		}
	}
	_caagdf, _cedcga = d.Token()
	if _cedcga != nil {
		return _cedcga
	}
	if _abcbf, _dgdcd := _caagdf.(_d.EndElement); _dgdcd && _abcbf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _caagdf)
}
func (_dfefaf *CT_TcPrInner) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dfefaf.CnfStyle != nil {
		_egegc := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		e.EncodeElement(_dfefaf.CnfStyle, _egegc)
	}
	if _dfefaf.TcW != nil {
		_ggagf := _d.StartElement{Name: _d.Name{Local: "w:tcW"}}
		e.EncodeElement(_dfefaf.TcW, _ggagf)
	}
	if _dfefaf.GridSpan != nil {
		_ffadcf := _d.StartElement{Name: _d.Name{Local: "w:gridSpan"}}
		e.EncodeElement(_dfefaf.GridSpan, _ffadcf)
	}
	if _dfefaf.HMerge != nil {
		_ddedf := _d.StartElement{Name: _d.Name{Local: "w:hMerge"}}
		e.EncodeElement(_dfefaf.HMerge, _ddedf)
	}
	if _dfefaf.VMerge != nil {
		_cfdfg := _d.StartElement{Name: _d.Name{Local: "w:vMerge"}}
		e.EncodeElement(_dfefaf.VMerge, _cfdfg)
	}
	if _dfefaf.TcBorders != nil {
		_cggdg := _d.StartElement{Name: _d.Name{Local: "w:tcBorders"}}
		e.EncodeElement(_dfefaf.TcBorders, _cggdg)
	}
	if _dfefaf.Shd != nil {
		_cacbef := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_dfefaf.Shd, _cacbef)
	}
	if _dfefaf.NoWrap != nil {
		_gdcbg := _d.StartElement{Name: _d.Name{Local: "w:noWrap"}}
		e.EncodeElement(_dfefaf.NoWrap, _gdcbg)
	}
	if _dfefaf.TcMar != nil {
		_cebab := _d.StartElement{Name: _d.Name{Local: "w:tcMar"}}
		e.EncodeElement(_dfefaf.TcMar, _cebab)
	}
	if _dfefaf.TextDirection != nil {
		_fbfbfe := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_dfefaf.TextDirection, _fbfbfe)
	}
	if _dfefaf.TcFitText != nil {
		_fddce := _d.StartElement{Name: _d.Name{Local: "w:tcFitText"}}
		e.EncodeElement(_dfefaf.TcFitText, _fddce)
	}
	if _dfefaf.VAlign != nil {
		_fdgfbc := _d.StartElement{Name: _d.Name{Local: "w:vAlign"}}
		e.EncodeElement(_dfefaf.VAlign, _fdgfbc)
	}
	if _dfefaf.HideMark != nil {
		_ebdbff := _d.StartElement{Name: _d.Name{Local: "w:hideMark"}}
		e.EncodeElement(_dfefaf.HideMark, _ebdbff)
	}
	if _dfefaf.Headers != nil {
		_bfdbe := _d.StartElement{Name: _d.Name{Local: "w:headers"}}
		e.EncodeElement(_dfefaf.Headers, _bfdbe)
	}
	if _dfefaf.CellIns != nil {
		_agdbcg := _d.StartElement{Name: _d.Name{Local: "w:cellIns"}}
		e.EncodeElement(_dfefaf.CellIns, _agdbcg)
	}
	if _dfefaf.CellDel != nil {
		_bbcgc := _d.StartElement{Name: _d.Name{Local: "w:cellDel"}}
		e.EncodeElement(_dfefaf.CellDel, _bbcgc)
	}
	if _dfefaf.CellMerge != nil {
		_abgdcb := _d.StartElement{Name: _d.Name{Local: "w:cellMerge"}}
		e.EncodeElement(_dfefaf.CellMerge, _abgdcb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Underline and its children, prefixing error messages with path
func (_facfe *CT_Underline) ValidateWithPath(path string) error {
	if _agceb := _facfe.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _agceb != nil {
		return _agceb
	}
	if _facfe.ColorAttr != nil {
		if _ggeddg := _facfe.ColorAttr.ValidateWithPath(path + "\u002fColorAttr"); _ggeddg != nil {
			return _ggeddg
		}
	}
	if _bbdeaf := _facfe.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _bbdeaf != nil {
		return _bbdeaf
	}
	return nil
}
func NewCT_TblStylePr() *CT_TblStylePr {
	_deagab := &CT_TblStylePr{}
	_deagab.TypeAttr = ST_TblStyleOverrideType(1)
	return _deagab
}
func (_fgdcg *WdCT_WrapNone) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for {
		_becbgf, _bgbfca := d.Token()
		if _bgbfca != nil {
			return _b.Errorf("parsing\u0020WdCT_WrapNone:\u0020\u0025s", _bgbfca)
		}
		if _aebcg, _bcbfe := _becbgf.(_d.EndElement); _bcbfe && _aebcg.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_TrackChangeNumbering struct {
	OriginalAttr *string
	AuthorAttr   string
	DateAttr     *_c.Time

	// Annotation Identifier
	IdAttr int64
}

func (_dagbac *ST_MeasurementOrPercent) Validate() error { return _dagbac.ValidateWithPath("") }

// Validate validates the EG_PContent and its children
func (_fdecf *EG_PContent) Validate() error { return _fdecf.ValidateWithPath("EG_PContent") }
func (_gecbeea *CT_Ind) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _eaaga := range start.Attr {
		if _eaaga.Name.Local == "start" {
			_dbbga, _ccaf := ParseUnionST_SignedTwipsMeasure(_eaaga.Value)
			if _ccaf != nil {
				return _ccaf
			}
			_gecbeea.StartAttr = &_dbbga
			continue
		}
		if _eaaga.Name.Local == "startChars" {
			_aeeegd, _fegca := _dd.ParseInt(_eaaga.Value, 10, 64)
			if _fegca != nil {
				return _fegca
			}
			_gecbeea.StartCharsAttr = &_aeeegd
			continue
		}
		if _eaaga.Name.Local == "end" {
			_bbfcd, _cgbgf := ParseUnionST_SignedTwipsMeasure(_eaaga.Value)
			if _cgbgf != nil {
				return _cgbgf
			}
			_gecbeea.EndAttr = &_bbfcd
			continue
		}
		if _eaaga.Name.Local == "endChars" {
			_eadce, _dabcc := _dd.ParseInt(_eaaga.Value, 10, 64)
			if _dabcc != nil {
				return _dabcc
			}
			_gecbeea.EndCharsAttr = &_eadce
			continue
		}
		if _eaaga.Name.Local == "left" {
			_agdfa, _ecedb := ParseUnionST_SignedTwipsMeasure(_eaaga.Value)
			if _ecedb != nil {
				return _ecedb
			}
			_gecbeea.LeftAttr = &_agdfa
			continue
		}
		if _eaaga.Name.Local == "leftChars" {
			_fdbeb, _babcff := _dd.ParseInt(_eaaga.Value, 10, 64)
			if _babcff != nil {
				return _babcff
			}
			_gecbeea.LeftCharsAttr = &_fdbeb
			continue
		}
		if _eaaga.Name.Local == "right" {
			_dcgfd, _ccbfc := ParseUnionST_SignedTwipsMeasure(_eaaga.Value)
			if _ccbfc != nil {
				return _ccbfc
			}
			_gecbeea.RightAttr = &_dcgfd
			continue
		}
		if _eaaga.Name.Local == "rightChars" {
			_afggd, _ffeb := _dd.ParseInt(_eaaga.Value, 10, 64)
			if _ffeb != nil {
				return _ffeb
			}
			_gecbeea.RightCharsAttr = &_afggd
			continue
		}
		if _eaaga.Name.Local == "hanging" {
			_aabed, _aebgb := ParseUnionST_TwipsMeasure(_eaaga.Value)
			if _aebgb != nil {
				return _aebgb
			}
			_gecbeea.HangingAttr = &_aabed
			continue
		}
		if _eaaga.Name.Local == "hangingChars" {
			_acaac, _ddadc := _dd.ParseInt(_eaaga.Value, 10, 64)
			if _ddadc != nil {
				return _ddadc
			}
			_gecbeea.HangingCharsAttr = &_acaac
			continue
		}
		if _eaaga.Name.Local == "firstLine" {
			_gaefgb, _gffb := ParseUnionST_TwipsMeasure(_eaaga.Value)
			if _gffb != nil {
				return _gffb
			}
			_gecbeea.FirstLineAttr = &_gaefgb
			continue
		}
		if _eaaga.Name.Local == "firstLineChars" {
			_ceab, _agfc := _dd.ParseInt(_eaaga.Value, 10, 64)
			if _agfc != nil {
				return _agfc
			}
			_gecbeea.FirstLineCharsAttr = &_ceab
			continue
		}
	}
	for {
		_egbdf, _gbgbf := d.Token()
		if _gbgbf != nil {
			return _b.Errorf("parsing\u0020CT_Ind:\u0020\u0025s", _gbgbf)
		}
		if _bfed, _ffbbe := _egbdf.(_d.EndElement); _ffbbe && _bfed.Name == start.Name {
			break
		}
	}
	return nil
}
func (_abcdd *WdST_RelFromH) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffaeda, _caafg := d.Token()
	if _caafg != nil {
		return _caafg
	}
	if _edbcfc, _adgfbb := _ffaeda.(_d.EndElement); _adgfbb && _edbcfc.Name == start.Name {
		*_abcdd = 1
		return nil
	}
	if _gfddb, _gcccdd := _ffaeda.(_d.CharData); !_gcccdd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ffaeda)
	} else {
		switch string(_gfddb) {
		case "":
			*_abcdd = 0
		case "margin":
			*_abcdd = 1
		case "page":
			*_abcdd = 2
		case "column":
			*_abcdd = 3
		case "character":
			*_abcdd = 4
		case "leftMargin":
			*_abcdd = 5
		case "rightMargin":
			*_abcdd = 6
		case "insideMargin":
			*_abcdd = 7
		case "outsideMargin":
			*_abcdd = 8
		}
	}
	_ffaeda, _caafg = d.Token()
	if _caafg != nil {
		return _caafg
	}
	if _efdde, _dfaac := _ffaeda.(_d.EndElement); _dfaac && _efdde.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ffaeda)
}
func (_ededc *CT_TblPPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ededc.LeftFromTextAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:leftFromText"}, Value: _b.Sprintf("\u0025v", *_ededc.LeftFromTextAttr)})
	}
	if _ededc.RightFromTextAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rightFromText"}, Value: _b.Sprintf("\u0025v", *_ededc.RightFromTextAttr)})
	}
	if _ededc.TopFromTextAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:topFromText"}, Value: _b.Sprintf("\u0025v", *_ededc.TopFromTextAttr)})
	}
	if _ededc.BottomFromTextAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:bottomFromText"}, Value: _b.Sprintf("\u0025v", *_ededc.BottomFromTextAttr)})
	}
	if _ededc.VertAnchorAttr != ST_VAnchorUnset {
		_ffbf, _gdegc := _ededc.VertAnchorAttr.MarshalXMLAttr(_d.Name{Local: "w:vertAnchor"})
		if _gdegc != nil {
			return _gdegc
		}
		start.Attr = append(start.Attr, _ffbf)
	}
	if _ededc.HorzAnchorAttr != ST_HAnchorUnset {
		_afgbg, _adfdb := _ededc.HorzAnchorAttr.MarshalXMLAttr(_d.Name{Local: "w:horzAnchor"})
		if _adfdb != nil {
			return _adfdb
		}
		start.Attr = append(start.Attr, _afgbg)
	}
	if _ededc.TblpXSpecAttr != _g.ST_XAlignUnset {
		_ggffd, _ccgbbe := _ededc.TblpXSpecAttr.MarshalXMLAttr(_d.Name{Local: "w:tblpXSpec"})
		if _ccgbbe != nil {
			return _ccgbbe
		}
		start.Attr = append(start.Attr, _ggffd)
	}
	if _ededc.TblpXAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:tblpX"}, Value: _b.Sprintf("\u0025v", *_ededc.TblpXAttr)})
	}
	if _ededc.TblpYSpecAttr != _g.ST_YAlignUnset {
		_ggdegc, _gfcga := _ededc.TblpYSpecAttr.MarshalXMLAttr(_d.Name{Local: "w:tblpYSpec"})
		if _gfcga != nil {
			return _gfcga
		}
		start.Attr = append(start.Attr, _ggdegc)
	}
	if _ededc.TblpYAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:tblpY"}, Value: _b.Sprintf("\u0025v", *_ededc.TblpYAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fbdafc ST_View) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dabfg := _d.Attr{}
	_dabfg.Name = name
	switch _fbdafc {
	case ST_ViewUnset:
		_dabfg.Value = ""
	case ST_ViewNone:
		_dabfg.Value = "none"
	case ST_ViewPrint:
		_dabfg.Value = "print"
	case ST_ViewOutline:
		_dabfg.Value = "outline"
	case ST_ViewMasterPages:
		_dabfg.Value = "masterPages"
	case ST_ViewNormal:
		_dabfg.Value = "normal"
	case ST_ViewWeb:
		_dabfg.Value = "web"
	}
	return _dabfg, nil
}

type CT_TrackChangeRange struct {
	DisplacedByCustomXmlAttr ST_DisplacedByCustomXml
	AuthorAttr               string
	DateAttr                 *_c.Time

	// Annotation Identifier
	IdAttr int64
}

func NewCT_TblPrEx() *CT_TblPrEx { _dcggf := &CT_TblPrEx{}; return _dcggf }
func (_ddgbf ST_ChapterSep) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fgage := _d.Attr{}
	_fgage.Name = name
	switch _ddgbf {
	case ST_ChapterSepUnset:
		_fgage.Value = ""
	case ST_ChapterSepHyphen:
		_fgage.Value = "hyphen"
	case ST_ChapterSepPeriod:
		_fgage.Value = "period"
	case ST_ChapterSepColon:
		_fgage.Value = "colon"
	case ST_ChapterSepEmDash:
		_fgage.Value = "emDash"
	case ST_ChapterSepEnDash:
		_fgage.Value = "enDash"
	}
	return _fgage, nil
}
func (_aedce ST_DropCap) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bceddg := _d.Attr{}
	_bceddg.Name = name
	switch _aedce {
	case ST_DropCapUnset:
		_bceddg.Value = ""
	case ST_DropCapNone:
		_bceddg.Value = "none"
	case ST_DropCapDrop:
		_bceddg.Value = "drop"
	case ST_DropCapMargin:
		_bceddg.Value = "margin"
	}
	return _bceddg, nil
}

type Numbering struct{ CT_Numbering }

func (_ebbece ST_HAnchor) ValidateWithPath(path string) error {
	switch _ebbece {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ebbece))
	}
	return nil
}

const (
	ST_LineSpacingRuleUnset   ST_LineSpacingRule = 0
	ST_LineSpacingRuleAuto    ST_LineSpacingRule = 1
	ST_LineSpacingRuleExact   ST_LineSpacingRule = 2
	ST_LineSpacingRuleAtLeast ST_LineSpacingRule = 3
)

func (_fdebc *ST_MeasurementOrPercent) ValidateWithPath(path string) error {
	_adedg := []string{}
	if _fdebc.ST_DecimalNumberOrPercent != nil {
		if _cbfcfc := _fdebc.ST_DecimalNumberOrPercent.ValidateWithPath(path + "\u002fST_DecimalNumberOrPercent"); _cbfcfc != nil {
			return _cbfcfc
		}
		_adedg = append(_adedg, "ST_DecimalNumberOrPercent")
	}
	if _fdebc.ST_UniversalMeasure != nil {
		_adedg = append(_adedg, "ST_UniversalMeasure")
	}
	if len(_adedg) > 1 {
		return _b.Errorf("%s\u0020too\u0020many\u0020members\u0020set:\u0020\u0025v", path, _adedg)
	}
	return nil
}
func (_fcbaed ST_Lock) String() string {
	switch _fcbaed {
	case 0:
		return ""
	case 1:
		return "sdtLocked"
	case 2:
		return "contentLocked"
	case 3:
		return "unlocked"
	case 4:
		return "sdtContentLocked"
	}
	return ""
}
func (_bacdfg *CT_Panose) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _agfdf := range start.Attr {
		if _agfdf.Name.Local == "val" {
			_ddeed, _gdcag := _agfdf.Value, error(nil)
			if _gdcag != nil {
				return _gdcag
			}
			_bacdfg.ValAttr = _ddeed
			continue
		}
	}
	for {
		_dceec, _bddacc := d.Token()
		if _bddacc != nil {
			return _b.Errorf("parsing\u0020CT_Panose:\u0020\u0025s", _bddacc)
		}
		if _cgbgc, _eabfg := _dceec.(_d.EndElement); _eabfg && _cgbgc.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_EdnProps and its children
func (_gdcbbd *CT_EdnProps) Validate() error { return _gdcbbd.ValidateWithPath("CT_EdnProps") }
func NewCT_Spacing() *CT_Spacing             { _dbdee := &CT_Spacing{}; return _dbdee }

// Validate validates the CT_TblLook and its children
func (_aabef *CT_TblLook) Validate() error { return _aabef.ValidateWithPath("CT_TblLook") }
func NewCT_SmartTagType() *CT_SmartTagType { _ggbcfd := &CT_SmartTagType{}; return _ggbcfd }
func (_gbcef *CT_CompatSetting) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gbcef.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", *_gbcef.NameAttr)})
	}
	if _gbcef.UriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uri"}, Value: _b.Sprintf("\u0025v", *_gbcef.UriAttr)})
	}
	if _gbcef.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_gbcef.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fdgbd ST_Hint) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eadac := _d.Attr{}
	_eadac.Name = name
	switch _fdgbd {
	case ST_HintUnset:
		_eadac.Value = ""
	case ST_HintDefault:
		_eadac.Value = "default"
	case ST_HintEastAsia:
		_eadac.Value = "eastAsia"
	}
	return _eadac, nil
}

// Validate validates the WdCT_PosV and its children
func (_cfbea *WdCT_PosV) Validate() error       { return _cfbea.ValidateWithPath("WdCT_PosV") }
func (_cdeeg ST_TblLayoutType) Validate() error { return _cdeeg.ValidateWithPath("") }
func (_gfegc *CT_TblBorders) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dffgd:
	for {
		_dbcce, _beggf := d.Token()
		if _beggf != nil {
			return _beggf
		}
		switch _ffdega := _dbcce.(type) {
		case _d.StartElement:
			switch _ffdega.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "top"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "top"}:
				_gfegc.Top = NewCT_Border()
				if _gagdbb := d.DecodeElement(_gfegc.Top, &_ffdega); _gagdbb != nil {
					return _gagdbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "start"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "start"}:
				_gfegc.Start = NewCT_Border()
				if _ggeda := d.DecodeElement(_gfegc.Start, &_ffdega); _ggeda != nil {
					return _ggeda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "left"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "left"}:
				_gfegc.Left = NewCT_Border()
				if _fgddcb := d.DecodeElement(_gfegc.Left, &_ffdega); _fgddcb != nil {
					return _fgddcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bottom"}:
				_gfegc.Bottom = NewCT_Border()
				if _egeade := d.DecodeElement(_gfegc.Bottom, &_ffdega); _egeade != nil {
					return _egeade
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "end"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "end"}:
				_gfegc.End = NewCT_Border()
				if _dagdb := d.DecodeElement(_gfegc.End, &_ffdega); _dagdb != nil {
					return _dagdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "right"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "right"}:
				_gfegc.Right = NewCT_Border()
				if _fbbgb := d.DecodeElement(_gfegc.Right, &_ffdega); _fbbgb != nil {
					return _fbbgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "insideH"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "insideH"}:
				_gfegc.InsideH = NewCT_Border()
				if _bgabg := d.DecodeElement(_gfegc.InsideH, &_ffdega); _bgabg != nil {
					return _bgabg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "insideV"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "insideV"}:
				_gfegc.InsideV = NewCT_Border()
				if _gdbcd := d.DecodeElement(_gfegc.InsideV, &_ffdega); _gdbcd != nil {
					return _gdbcd
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_TblBorders \u0025v", _ffdega.Name)
				if _dccda := d.Skip(); _dccda != nil {
					return _dccda
				}
			}
		case _d.EndElement:
			break _dffgd
		case _d.CharData:
		}
	}
	return nil
}
func (_eagdfc *ST_FrameLayout) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ccgef, _effeea := d.Token()
	if _effeea != nil {
		return _effeea
	}
	if _afebege, _ggacdfd := _ccgef.(_d.EndElement); _ggacdfd && _afebege.Name == start.Name {
		*_eagdfc = 1
		return nil
	}
	if _fafabf, _agdgde := _ccgef.(_d.CharData); !_agdgde {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ccgef)
	} else {
		switch string(_fafabf) {
		case "":
			*_eagdfc = 0
		case "rows":
			*_eagdfc = 1
		case "cols":
			*_eagdfc = 2
		case "none":
			*_eagdfc = 3
		}
	}
	_ccgef, _effeea = d.Token()
	if _effeea != nil {
		return _effeea
	}
	if _bceef, _beggfd := _ccgef.(_d.EndElement); _beggfd && _bceef.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ccgef)
}
func NewWdCT_TxbxContent() *WdCT_TxbxContent { _gbfaeb := &WdCT_TxbxContent{}; return _gbfaeb }

const (
	ST_TblLayoutTypeUnset   ST_TblLayoutType = 0
	ST_TblLayoutTypeFixed   ST_TblLayoutType = 1
	ST_TblLayoutTypeAutofit ST_TblLayoutType = 2
)

// ValidateWithPath validates the CT_DocPartBehaviors and its children, prefixing error messages with path
func (_acda *CT_DocPartBehaviors) ValidateWithPath(path string) error {
	for _eabbg, _ceef := range _acda.Behavior {
		if _gcgc := _ceef.ValidateWithPath(_b.Sprintf("\u0025s\u002fBehavior\u005b\u0025d\u005d", path, _eabbg)); _gcgc != nil {
			return _gcgc
		}
	}
	return nil
}
func (_fegagd ST_CaptionPos) ValidateWithPath(path string) error {
	switch _fegagd {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fegagd))
	}
	return nil
}
func NewCT_PageBorder() *CT_PageBorder {
	_abfge := &CT_PageBorder{}
	_abfge.ValAttr = ST_Border(1)
	return _abfge
}
func (_afgde *EG_FtnEdnNumProps) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _afgde.NumStart != nil {
		_aaeda := _d.StartElement{Name: _d.Name{Local: "w:numStart"}}
		e.EncodeElement(_afgde.NumStart, _aaeda)
	}
	if _afgde.NumRestart != nil {
		_egbgf := _d.StartElement{Name: _d.Name{Local: "w:numRestart"}}
		e.EncodeElement(_afgde.NumRestart, _egbgf)
	}
	return nil
}
func NewCT_FldChar() *CT_FldChar {
	_bcfee := &CT_FldChar{}
	_bcfee.FldCharTypeAttr = ST_FldCharType(1)
	return _bcfee
}

// Validate validates the WdCT_WrapThrough and its children
func (_dfbdf *WdCT_WrapThrough) Validate() error { return _dfbdf.ValidateWithPath("WdCT_WrapThrough") }

// Validate validates the EG_ContentCellContent and its children
func (_bcaad *EG_ContentCellContent) Validate() error {
	return _bcaad.ValidateWithPath("EG_ContentCellContent")
}
func NewCT_Numbering() *CT_Numbering { _afacfg := &CT_Numbering{}; return _afacfg }
func (_cbaec *CT_PageSz) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cfgfa := range start.Attr {
		if _cfgfa.Name.Local == "w" {
			_dbdgc, _fgbee := ParseUnionST_TwipsMeasure(_cfgfa.Value)
			if _fgbee != nil {
				return _fgbee
			}
			_cbaec.WAttr = &_dbdgc
			continue
		}
		if _cfgfa.Name.Local == "h" {
			_gegedd, _dgacg := ParseUnionST_TwipsMeasure(_cfgfa.Value)
			if _dgacg != nil {
				return _dgacg
			}
			_cbaec.HAttr = &_gegedd
			continue
		}
		if _cfgfa.Name.Local == "orient" {
			_cbaec.OrientAttr.UnmarshalXMLAttr(_cfgfa)
			continue
		}
		if _cfgfa.Name.Local == "code" {
			_cfcbga, _ebfda := _dd.ParseInt(_cfgfa.Value, 10, 64)
			if _ebfda != nil {
				return _ebfda
			}
			_cbaec.CodeAttr = &_cfcbga
			continue
		}
	}
	for {
		_dcdaf, _ededa := d.Token()
		if _ededa != nil {
			return _b.Errorf("parsing\u0020CT_PageSz:\u0020\u0025s", _ededa)
		}
		if _egdbc, _dedab := _dcdaf.(_d.EndElement); _dedab && _egdbc.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PageBorder and its children
func (_efdggc *CT_PageBorder) Validate() error { return _efdggc.ValidateWithPath("CT_PageBorder") }

const (
	ST_FontFamilyUnset      ST_FontFamily = 0
	ST_FontFamilyDecorative ST_FontFamily = 1
	ST_FontFamilyModern     ST_FontFamily = 2
	ST_FontFamilyRoman      ST_FontFamily = 3
	ST_FontFamilyScript     ST_FontFamily = 4
	ST_FontFamilySwiss      ST_FontFamily = 5
	ST_FontFamilyAuto       ST_FontFamily = 6
)

func (_baebf *CT_RecipientData) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_baebf.Column = NewCT_DecimalNumber()
	_baebf.UniqueTag = NewCT_Base64Binary()
_afbfb:
	for {
		_dafba, _bcbed := d.Token()
		if _bcbed != nil {
			return _bcbed
		}
		switch _ababb := _dafba.(type) {
		case _d.StartElement:
			switch _ababb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "active"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "active"}:
				_baebf.Active = NewCT_OnOff()
				if _caded := d.DecodeElement(_baebf.Active, &_ababb); _caded != nil {
					return _caded
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "column"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "column"}:
				if _cefea := d.DecodeElement(_baebf.Column, &_ababb); _cefea != nil {
					return _cefea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "uniqueTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "uniqueTag"}:
				if _gcaac := d.DecodeElement(_baebf.UniqueTag, &_ababb); _gcaac != nil {
					return _gcaac
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_RecipientData\u0020\u0025v", _ababb.Name)
				if _fcbce := d.Skip(); _fcbce != nil {
					return _fcbce
				}
			}
		case _d.EndElement:
			break _afbfb
		case _d.CharData:
		}
	}
	return nil
}
func (_efcffb *CT_SdtComboBox) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _febdge := range start.Attr {
		if _febdge.Name.Local == "lastValue" {
			_aggde, _gggfc := _febdge.Value, error(nil)
			if _gggfc != nil {
				return _gggfc
			}
			_efcffb.LastValueAttr = &_aggde
			continue
		}
	}
_cefbf:
	for {
		_bfdcb, _eccff := d.Token()
		if _eccff != nil {
			return _eccff
		}
		switch _cdggd := _bfdcb.(type) {
		case _d.StartElement:
			switch _cdggd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "listItem"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "listItem"}:
				_gfdfd := NewCT_SdtListItem()
				if _dadfbe := d.DecodeElement(_gfdfd, &_cdggd); _dadfbe != nil {
					return _dadfbe
				}
				_efcffb.ListItem = append(_efcffb.ListItem, _gfdfd)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SdtComboBox\u0020\u0025v", _cdggd.Name)
				if _afcaf := d.Skip(); _afcaf != nil {
					return _afcaf
				}
			}
		case _d.EndElement:
			break _cefbf
		case _d.CharData:
		}
	}
	return nil
}
func (_bbbeb *ST_Border) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afecf, _acfcde := d.Token()
	if _acfcde != nil {
		return _acfcde
	}
	if _fgbcbe, _eeffga := _afecf.(_d.EndElement); _eeffga && _fgbcbe.Name == start.Name {
		*_bbbeb = 1
		return nil
	}
	if _gfbbdb, _eegdg := _afecf.(_d.CharData); !_eegdg {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _afecf)
	} else {
		switch string(_gfbbdb) {
		case "":
			*_bbbeb = 0
		case "nil":
			*_bbbeb = 1
		case "none":
			*_bbbeb = 2
		case "single":
			*_bbbeb = 3
		case "thick":
			*_bbbeb = 4
		case "double":
			*_bbbeb = 5
		case "dotted":
			*_bbbeb = 6
		case "dashed":
			*_bbbeb = 7
		case "dotDash":
			*_bbbeb = 8
		case "dotDotDash":
			*_bbbeb = 9
		case "triple":
			*_bbbeb = 10
		case "thinThickSmallGap":
			*_bbbeb = 11
		case "thickThinSmallGap":
			*_bbbeb = 12
		case "thinThickThinSmallGap":
			*_bbbeb = 13
		case "thinThickMediumGap":
			*_bbbeb = 14
		case "thickThinMediumGap":
			*_bbbeb = 15
		case "thinThickThinMediumGap":
			*_bbbeb = 16
		case "thinThickLargeGap":
			*_bbbeb = 17
		case "thickThinLargeGap":
			*_bbbeb = 18
		case "thinThickThinLargeGap":
			*_bbbeb = 19
		case "wave":
			*_bbbeb = 20
		case "doubleWave":
			*_bbbeb = 21
		case "dashSmallGap":
			*_bbbeb = 22
		case "dashDotStroked":
			*_bbbeb = 23
		case "threeDEmboss":
			*_bbbeb = 24
		case "threeDEngrave":
			*_bbbeb = 25
		case "outset":
			*_bbbeb = 26
		case "inset":
			*_bbbeb = 27
		case "apples":
			*_bbbeb = 28
		case "archedScallops":
			*_bbbeb = 29
		case "babyPacifier":
			*_bbbeb = 30
		case "babyRattle":
			*_bbbeb = 31
		case "balloons3Colors":
			*_bbbeb = 32
		case "balloonsHotAir":
			*_bbbeb = 33
		case "basicBlackDashes":
			*_bbbeb = 34
		case "basicBlackDots":
			*_bbbeb = 35
		case "basicBlackSquares":
			*_bbbeb = 36
		case "basicThinLines":
			*_bbbeb = 37
		case "basicWhiteDashes":
			*_bbbeb = 38
		case "basicWhiteDots":
			*_bbbeb = 39
		case "basicWhiteSquares":
			*_bbbeb = 40
		case "basicWideInline":
			*_bbbeb = 41
		case "basicWideMidline":
			*_bbbeb = 42
		case "basicWideOutline":
			*_bbbeb = 43
		case "bats":
			*_bbbeb = 44
		case "birds":
			*_bbbeb = 45
		case "birdsFlight":
			*_bbbeb = 46
		case "cabins":
			*_bbbeb = 47
		case "cakeSlice":
			*_bbbeb = 48
		case "candyCorn":
			*_bbbeb = 49
		case "celticKnotwork":
			*_bbbeb = 50
		case "certificateBanner":
			*_bbbeb = 51
		case "chainLink":
			*_bbbeb = 52
		case "champagneBottle":
			*_bbbeb = 53
		case "checkedBarBlack":
			*_bbbeb = 54
		case "checkedBarColor":
			*_bbbeb = 55
		case "checkered":
			*_bbbeb = 56
		case "christmasTree":
			*_bbbeb = 57
		case "circlesLines":
			*_bbbeb = 58
		case "circlesRectangles":
			*_bbbeb = 59
		case "classicalWave":
			*_bbbeb = 60
		case "clocks":
			*_bbbeb = 61
		case "compass":
			*_bbbeb = 62
		case "confetti":
			*_bbbeb = 63
		case "confettiGrays":
			*_bbbeb = 64
		case "confettiOutline":
			*_bbbeb = 65
		case "confettiStreamers":
			*_bbbeb = 66
		case "confettiWhite":
			*_bbbeb = 67
		case "cornerTriangles":
			*_bbbeb = 68
		case "couponCutoutDashes":
			*_bbbeb = 69
		case "couponCutoutDots":
			*_bbbeb = 70
		case "crazyMaze":
			*_bbbeb = 71
		case "creaturesButterfly":
			*_bbbeb = 72
		case "creaturesFish":
			*_bbbeb = 73
		case "creaturesInsects":
			*_bbbeb = 74
		case "creaturesLadyBug":
			*_bbbeb = 75
		case "crossStitch":
			*_bbbeb = 76
		case "cup":
			*_bbbeb = 77
		case "decoArch":
			*_bbbeb = 78
		case "decoArchColor":
			*_bbbeb = 79
		case "decoBlocks":
			*_bbbeb = 80
		case "diamondsGray":
			*_bbbeb = 81
		case "doubleD":
			*_bbbeb = 82
		case "doubleDiamonds":
			*_bbbeb = 83
		case "earth1":
			*_bbbeb = 84
		case "earth2":
			*_bbbeb = 85
		case "earth3":
			*_bbbeb = 86
		case "eclipsingSquares1":
			*_bbbeb = 87
		case "eclipsingSquares2":
			*_bbbeb = 88
		case "eggsBlack":
			*_bbbeb = 89
		case "fans":
			*_bbbeb = 90
		case "film":
			*_bbbeb = 91
		case "firecrackers":
			*_bbbeb = 92
		case "flowersBlockPrint":
			*_bbbeb = 93
		case "flowersDaisies":
			*_bbbeb = 94
		case "flowersModern1":
			*_bbbeb = 95
		case "flowersModern2":
			*_bbbeb = 96
		case "flowersPansy":
			*_bbbeb = 97
		case "flowersRedRose":
			*_bbbeb = 98
		case "flowersRoses":
			*_bbbeb = 99
		case "flowersTeacup":
			*_bbbeb = 100
		case "flowersTiny":
			*_bbbeb = 101
		case "gems":
			*_bbbeb = 102
		case "gingerbreadMan":
			*_bbbeb = 103
		case "gradient":
			*_bbbeb = 104
		case "handmade1":
			*_bbbeb = 105
		case "handmade2":
			*_bbbeb = 106
		case "heartBalloon":
			*_bbbeb = 107
		case "heartGray":
			*_bbbeb = 108
		case "hearts":
			*_bbbeb = 109
		case "heebieJeebies":
			*_bbbeb = 110
		case "holly":
			*_bbbeb = 111
		case "houseFunky":
			*_bbbeb = 112
		case "hypnotic":
			*_bbbeb = 113
		case "iceCreamCones":
			*_bbbeb = 114
		case "lightBulb":
			*_bbbeb = 115
		case "lightning1":
			*_bbbeb = 116
		case "lightning2":
			*_bbbeb = 117
		case "mapPins":
			*_bbbeb = 118
		case "mapleLeaf":
			*_bbbeb = 119
		case "mapleMuffins":
			*_bbbeb = 120
		case "marquee":
			*_bbbeb = 121
		case "marqueeToothed":
			*_bbbeb = 122
		case "moons":
			*_bbbeb = 123
		case "mosaic":
			*_bbbeb = 124
		case "musicNotes":
			*_bbbeb = 125
		case "northwest":
			*_bbbeb = 126
		case "ovals":
			*_bbbeb = 127
		case "packages":
			*_bbbeb = 128
		case "palmsBlack":
			*_bbbeb = 129
		case "palmsColor":
			*_bbbeb = 130
		case "paperClips":
			*_bbbeb = 131
		case "papyrus":
			*_bbbeb = 132
		case "partyFavor":
			*_bbbeb = 133
		case "partyGlass":
			*_bbbeb = 134
		case "pencils":
			*_bbbeb = 135
		case "people":
			*_bbbeb = 136
		case "peopleWaving":
			*_bbbeb = 137
		case "peopleHats":
			*_bbbeb = 138
		case "poinsettias":
			*_bbbeb = 139
		case "postageStamp":
			*_bbbeb = 140
		case "pumpkin1":
			*_bbbeb = 141
		case "pushPinNote2":
			*_bbbeb = 142
		case "pushPinNote1":
			*_bbbeb = 143
		case "pyramids":
			*_bbbeb = 144
		case "pyramidsAbove":
			*_bbbeb = 145
		case "quadrants":
			*_bbbeb = 146
		case "rings":
			*_bbbeb = 147
		case "safari":
			*_bbbeb = 148
		case "sawtooth":
			*_bbbeb = 149
		case "sawtoothGray":
			*_bbbeb = 150
		case "scaredCat":
			*_bbbeb = 151
		case "seattle":
			*_bbbeb = 152
		case "shadowedSquares":
			*_bbbeb = 153
		case "sharksTeeth":
			*_bbbeb = 154
		case "shorebirdTracks":
			*_bbbeb = 155
		case "skyrocket":
			*_bbbeb = 156
		case "snowflakeFancy":
			*_bbbeb = 157
		case "snowflakes":
			*_bbbeb = 158
		case "sombrero":
			*_bbbeb = 159
		case "southwest":
			*_bbbeb = 160
		case "stars":
			*_bbbeb = 161
		case "starsTop":
			*_bbbeb = 162
		case "stars3d":
			*_bbbeb = 163
		case "starsBlack":
			*_bbbeb = 164
		case "starsShadowed":
			*_bbbeb = 165
		case "sun":
			*_bbbeb = 166
		case "swirligig":
			*_bbbeb = 167
		case "tornPaper":
			*_bbbeb = 168
		case "tornPaperBlack":
			*_bbbeb = 169
		case "trees":
			*_bbbeb = 170
		case "triangleParty":
			*_bbbeb = 171
		case "triangles":
			*_bbbeb = 172
		case "triangle1":
			*_bbbeb = 173
		case "triangle2":
			*_bbbeb = 174
		case "triangleCircle1":
			*_bbbeb = 175
		case "triangleCircle2":
			*_bbbeb = 176
		case "shapes1":
			*_bbbeb = 177
		case "shapes2":
			*_bbbeb = 178
		case "twistedLines1":
			*_bbbeb = 179
		case "twistedLines2":
			*_bbbeb = 180
		case "vine":
			*_bbbeb = 181
		case "waveline":
			*_bbbeb = 182
		case "weavingAngles":
			*_bbbeb = 183
		case "weavingBraid":
			*_bbbeb = 184
		case "weavingRibbon":
			*_bbbeb = 185
		case "weavingStrips":
			*_bbbeb = 186
		case "whiteFlowers":
			*_bbbeb = 187
		case "woodwork":
			*_bbbeb = 188
		case "xIllusions":
			*_bbbeb = 189
		case "zanyTriangles":
			*_bbbeb = 190
		case "zigZag":
			*_bbbeb = 191
		case "zigZagStitch":
			*_bbbeb = 192
		case "custom":
			*_bbbeb = 193
		}
	}
	_afecf, _acfcde = d.Token()
	if _acfcde != nil {
		return _acfcde
	}
	if _daagf, _gacec := _afecf.(_d.EndElement); _gacec && _daagf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _afecf)
}

// ValidateWithPath validates the CT_SdtDocPart and its children, prefixing error messages with path
func (_fccffc *CT_SdtDocPart) ValidateWithPath(path string) error {
	if _fccffc.DocPartGallery != nil {
		if _gcgca := _fccffc.DocPartGallery.ValidateWithPath(path + "\u002fDocPartGallery"); _gcgca != nil {
			return _gcgca
		}
	}
	if _fccffc.DocPartCategory != nil {
		if _dfgce := _fccffc.DocPartCategory.ValidateWithPath(path + "\u002fDocPartCategory"); _dfgce != nil {
			return _dfgce
		}
	}
	if _fccffc.DocPartUnique != nil {
		if _cgcbb := _fccffc.DocPartUnique.ValidateWithPath(path + "\u002fDocPartUnique"); _cgcbb != nil {
			return _cgcbb
		}
	}
	return nil
}
func (_cgeee ST_TblStyleOverrideType) Validate() error { return _cgeee.ValidateWithPath("") }
func (_gggffa *WdCT_PosHChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_deaab:
	for {
		_gagff, _cagbc := d.Token()
		if _cagbc != nil {
			return _cagbc
		}
		switch _cbgad := _gagff.(type) {
		case _d.StartElement:
			switch _cbgad.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "align"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "align"}:
				_gggffa.Align = WdST_AlignHUnset
				if _fggacg := d.DecodeElement(&_gggffa.Align, &_cbgad); _fggacg != nil {
					return _fggacg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "posOffset"}:
				_gggffa.PosOffset = new(int32)
				if _eccbaf := d.DecodeElement(_gggffa.PosOffset, &_cbgad); _eccbaf != nil {
					return _eccbaf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_PosHChoice\u0020\u0025v", _cbgad.Name)
				if _eaddcad := d.Skip(); _eaddcad != nil {
					return _eaddcad
				}
			}
		case _d.EndElement:
			break _deaab
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Tabs and its children
func (_gbfgc *CT_Tabs) Validate() error { return _gbfgc.ValidateWithPath("CT_Tabs") }
func (_ccabdg ST_DocPartGallery) String() string {
	switch _ccabdg {
	case 0:
		return ""
	case 1:
		return "placeholder"
	case 2:
		return "any"
	case 3:
		return "default"
	case 4:
		return "docParts"
	case 5:
		return "coverPg"
	case 6:
		return "eq"
	case 7:
		return "ftrs"
	case 8:
		return "hdrs"
	case 9:
		return "pgNum"
	case 10:
		return "tbls"
	case 11:
		return "watermarks"
	case 12:
		return "autoTxt"
	case 13:
		return "txtBox"
	case 14:
		return "pgNumT"
	case 15:
		return "pgNumB"
	case 16:
		return "pgNumMargins"
	case 17:
		return "tblOfContents"
	case 18:
		return "bib"
	case 19:
		return "custQuickParts"
	case 20:
		return "custCoverPg"
	case 21:
		return "custEq"
	case 22:
		return "custFtrs"
	case 23:
		return "custHdrs"
	case 24:
		return "custPgNum"
	case 25:
		return "custTbls"
	case 26:
		return "custWatermarks"
	case 27:
		return "custAutoTxt"
	case 28:
		return "custTxtBox"
	case 29:
		return "custPgNumT"
	case 30:
		return "custPgNumB"
	case 31:
		return "custPgNumMargins"
	case 32:
		return "custTblOfContents"
	case 33:
		return "custBib"
	case 34:
		return "custom1"
	case 35:
		return "custom2"
	case 36:
		return "custom3"
	case 37:
		return "custom4"
	case 38:
		return "custom5"
	}
	return ""
}
func (_agded *WdCT_PosV) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_agded.RelativeFromAttr = WdST_RelFromV(1)
	_agded.Choice = NewWdCT_PosVChoice()
	for _, _fddgad := range start.Attr {
		if _fddgad.Name.Local == "relativeFrom" {
			_agded.RelativeFromAttr.UnmarshalXMLAttr(_fddgad)
			continue
		}
	}
_bdfgbb:
	for {
		_aggcd, _dddbgd := d.Token()
		if _dddbgd != nil {
			return _dddbgd
		}
		switch _gagaa := _aggcd.(type) {
		case _d.StartElement:
			switch _gagaa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "align"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "align"}:
				_agded.Choice = NewWdCT_PosVChoice()
				if _gdbfb := d.DecodeElement(&_agded.Choice.Align, &_gagaa); _gdbfb != nil {
					return _gdbfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "posOffset"}:
				_agded.Choice = NewWdCT_PosVChoice()
				if _cdgfce := d.DecodeElement(&_agded.Choice.PosOffset, &_gagaa); _cdgfce != nil {
					return _cdgfce
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on WdCT_PosV \u0025v", _gagaa.Name)
				if _bgddbd := d.Skip(); _bgddbd != nil {
					return _bgddbd
				}
			}
		case _d.EndElement:
			break _bdfgbb
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SimpleField and its children, prefixing error messages with path
func (_bafga *CT_SimpleField) ValidateWithPath(path string) error {
	if _bafga.FldLockAttr != nil {
		if _dbfcf := _bafga.FldLockAttr.ValidateWithPath(path + "\u002fFldLockAttr"); _dbfcf != nil {
			return _dbfcf
		}
	}
	if _bafga.DirtyAttr != nil {
		if _gccbc := _bafga.DirtyAttr.ValidateWithPath(path + "\u002fDirtyAttr"); _gccbc != nil {
			return _gccbc
		}
	}
	if _bafga.FldData != nil {
		if _cabfdd := _bafga.FldData.ValidateWithPath(path + "\u002fFldData"); _cabfdd != nil {
			return _cabfdd
		}
	}
	for _deccac, _bbaae := range _bafga.EG_PContent {
		if _cdgfd := _bbaae.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_PContent\u005b\u0025d\u005d", path, _deccac)); _cdgfd != nil {
			return _cdgfd
		}
	}
	return nil
}
func (_cagf *CT_ProofErr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cagf.TypeAttr = ST_ProofErr(1)
	for _, _cebga := range start.Attr {
		if _cebga.Name.Local == "type" {
			_cagf.TypeAttr.UnmarshalXMLAttr(_cebga)
			continue
		}
	}
	for {
		_facecc, _efded := d.Token()
		if _efded != nil {
			return _b.Errorf("parsing\u0020CT_ProofErr:\u0020\u0025s", _efded)
		}
		if _ccfced, _dbgeb := _facecc.(_d.EndElement); _dbgeb && _ccfced.Name == start.Name {
			break
		}
	}
	return nil
}
func (_geccgc *Numbering) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:numbering"
	return _geccgc.CT_Numbering.MarshalXML(e, start)
}
func NewCT_DocType() *CT_DocType { _abgeg := &CT_DocType{}; return _abgeg }
func (_fgfcff *CT_RubyContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aadca:
	for {
		_dbce, _cffg := d.Token()
		if _cffg != nil {
			return _cffg
		}
		switch _aabedg := _dbce.(type) {
		case _d.StartElement:
			switch _aabedg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_fgfcff.R = NewCT_R()
				if _agbdb := d.DecodeElement(_fgfcff.R, &_aabedg); _agbdb != nil {
					return _agbdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_cdadf := NewEG_RunLevelElts()
				_cdadf.ProofErr = NewCT_ProofErr()
				if _cbdeeg := d.DecodeElement(_cdadf.ProofErr, &_aabedg); _cbdeeg != nil {
					return _cbdeeg
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _cdadf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_cdbab := NewEG_RunLevelElts()
				_cdbab.PermStart = NewCT_PermStart()
				if _cfagf := d.DecodeElement(_cdbab.PermStart, &_aabedg); _cfagf != nil {
					return _cfagf
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _cdbab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_gfdfe := NewEG_RunLevelElts()
				_gfdfe.PermEnd = NewCT_Perm()
				if _ddfee := d.DecodeElement(_gfdfe.PermEnd, &_aabedg); _ddfee != nil {
					return _ddfee
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _gfdfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_ccbec := NewEG_RunLevelElts()
				_ccbec.Ins = NewCT_RunTrackChange()
				if _fgeac := d.DecodeElement(_ccbec.Ins, &_aabedg); _fgeac != nil {
					return _fgeac
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _ccbec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_bcee := NewEG_RunLevelElts()
				_bcee.Del = NewCT_RunTrackChange()
				if _dgfdd := d.DecodeElement(_bcee.Del, &_aabedg); _dgfdd != nil {
					return _dgfdd
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _bcee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_ffeag := NewEG_RunLevelElts()
				_ffeag.MoveFrom = NewCT_RunTrackChange()
				if _dccgb := d.DecodeElement(_ffeag.MoveFrom, &_aabedg); _dccgb != nil {
					return _dccgb
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _ffeag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_aeadg := NewEG_RunLevelElts()
				_aeadg.MoveTo = NewCT_RunTrackChange()
				if _bbada := d.DecodeElement(_aeadg.MoveTo, &_aabedg); _bbada != nil {
					return _bbada
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _aeadg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_ecadggf := NewEG_RunLevelElts()
				_fdfbf := NewEG_RangeMarkupElements()
				_fdfbf.BookmarkStart = NewCT_Bookmark()
				if _cecbf := d.DecodeElement(_fdfbf.BookmarkStart, &_aabedg); _cecbf != nil {
					return _cecbf
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _ecadggf)
				_ecadggf.EG_RangeMarkupElements = append(_ecadggf.EG_RangeMarkupElements, _fdfbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_dfada := NewEG_RunLevelElts()
				_dcfba := NewEG_RangeMarkupElements()
				_dcfba.BookmarkEnd = NewCT_MarkupRange()
				if _dagde := d.DecodeElement(_dcfba.BookmarkEnd, &_aabedg); _dagde != nil {
					return _dagde
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _dfada)
				_dfada.EG_RangeMarkupElements = append(_dfada.EG_RangeMarkupElements, _dcfba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_dggbc := NewEG_RunLevelElts()
				_ccceff := NewEG_RangeMarkupElements()
				_ccceff.MoveFromRangeStart = NewCT_MoveBookmark()
				if _dcbf := d.DecodeElement(_ccceff.MoveFromRangeStart, &_aabedg); _dcbf != nil {
					return _dcbf
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _dggbc)
				_dggbc.EG_RangeMarkupElements = append(_dggbc.EG_RangeMarkupElements, _ccceff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_aaedd := NewEG_RunLevelElts()
				_ebfgbb := NewEG_RangeMarkupElements()
				_ebfgbb.MoveFromRangeEnd = NewCT_MarkupRange()
				if _fcdgf := d.DecodeElement(_ebfgbb.MoveFromRangeEnd, &_aabedg); _fcdgf != nil {
					return _fcdgf
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _aaedd)
				_aaedd.EG_RangeMarkupElements = append(_aaedd.EG_RangeMarkupElements, _ebfgbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_fccaf := NewEG_RunLevelElts()
				_fgacfe := NewEG_RangeMarkupElements()
				_fgacfe.MoveToRangeStart = NewCT_MoveBookmark()
				if _fbcacd := d.DecodeElement(_fgacfe.MoveToRangeStart, &_aabedg); _fbcacd != nil {
					return _fbcacd
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _fccaf)
				_fccaf.EG_RangeMarkupElements = append(_fccaf.EG_RangeMarkupElements, _fgacfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_fafcd := NewEG_RunLevelElts()
				_dgddg := NewEG_RangeMarkupElements()
				_dgddg.MoveToRangeEnd = NewCT_MarkupRange()
				if _gbfae := d.DecodeElement(_dgddg.MoveToRangeEnd, &_aabedg); _gbfae != nil {
					return _gbfae
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _fafcd)
				_fafcd.EG_RangeMarkupElements = append(_fafcd.EG_RangeMarkupElements, _dgddg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_gbbfa := NewEG_RunLevelElts()
				_egfaf := NewEG_RangeMarkupElements()
				_egfaf.CommentRangeStart = NewCT_MarkupRange()
				if _dbcfcg := d.DecodeElement(_egfaf.CommentRangeStart, &_aabedg); _dbcfcg != nil {
					return _dbcfcg
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _gbbfa)
				_gbbfa.EG_RangeMarkupElements = append(_gbbfa.EG_RangeMarkupElements, _egfaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_aadede := NewEG_RunLevelElts()
				_bcccd := NewEG_RangeMarkupElements()
				_bcccd.CommentRangeEnd = NewCT_MarkupRange()
				if _cegag := d.DecodeElement(_bcccd.CommentRangeEnd, &_aabedg); _cegag != nil {
					return _cegag
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _aadede)
				_aadede.EG_RangeMarkupElements = append(_aadede.EG_RangeMarkupElements, _bcccd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gadgc := NewEG_RunLevelElts()
				_efbcc := NewEG_RangeMarkupElements()
				_efbcc.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _bbbaf := d.DecodeElement(_efbcc.CustomXmlInsRangeStart, &_aabedg); _bbbaf != nil {
					return _bbbaf
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _gadgc)
				_gadgc.EG_RangeMarkupElements = append(_gadgc.EG_RangeMarkupElements, _efbcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_ecccd := NewEG_RunLevelElts()
				_caada := NewEG_RangeMarkupElements()
				_caada.CustomXmlInsRangeEnd = NewCT_Markup()
				if _fabbc := d.DecodeElement(_caada.CustomXmlInsRangeEnd, &_aabedg); _fabbc != nil {
					return _fabbc
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _ecccd)
				_ecccd.EG_RangeMarkupElements = append(_ecccd.EG_RangeMarkupElements, _caada)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_efcff := NewEG_RunLevelElts()
				_bccbe := NewEG_RangeMarkupElements()
				_bccbe.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _eccfc := d.DecodeElement(_bccbe.CustomXmlDelRangeStart, &_aabedg); _eccfc != nil {
					return _eccfc
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _efcff)
				_efcff.EG_RangeMarkupElements = append(_efcff.EG_RangeMarkupElements, _bccbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_dfga := NewEG_RunLevelElts()
				_gbcaa := NewEG_RangeMarkupElements()
				_gbcaa.CustomXmlDelRangeEnd = NewCT_Markup()
				if _bgfcg := d.DecodeElement(_gbcaa.CustomXmlDelRangeEnd, &_aabedg); _bgfcg != nil {
					return _bgfcg
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _dfga)
				_dfga.EG_RangeMarkupElements = append(_dfga.EG_RangeMarkupElements, _gbcaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_eeaa := NewEG_RunLevelElts()
				_gcbde := NewEG_RangeMarkupElements()
				_gcbde.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _ccbgf := d.DecodeElement(_gcbde.CustomXmlMoveFromRangeStart, &_aabedg); _ccbgf != nil {
					return _ccbgf
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _eeaa)
				_eeaa.EG_RangeMarkupElements = append(_eeaa.EG_RangeMarkupElements, _gcbde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_cfdcad := NewEG_RunLevelElts()
				_edcad := NewEG_RangeMarkupElements()
				_edcad.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _fgebe := d.DecodeElement(_edcad.CustomXmlMoveFromRangeEnd, &_aabedg); _fgebe != nil {
					return _fgebe
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _cfdcad)
				_cfdcad.EG_RangeMarkupElements = append(_cfdcad.EG_RangeMarkupElements, _edcad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_ccdeg := NewEG_RunLevelElts()
				_eceace := NewEG_RangeMarkupElements()
				_eceace.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _efged := d.DecodeElement(_eceace.CustomXmlMoveToRangeStart, &_aabedg); _efged != nil {
					return _efged
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _ccdeg)
				_ccdeg.EG_RangeMarkupElements = append(_ccdeg.EG_RangeMarkupElements, _eceace)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_cbdae := NewEG_RunLevelElts()
				_fgeff := NewEG_RangeMarkupElements()
				_fgeff.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _bcfgf := d.DecodeElement(_fgeff.CustomXmlMoveToRangeEnd, &_aabedg); _bcfgf != nil {
					return _bcfgf
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _cbdae)
				_cbdae.EG_RangeMarkupElements = append(_cbdae.EG_RangeMarkupElements, _fgeff)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_ebafd := NewEG_RunLevelElts()
				_fddf := NewEG_MathContent()
				_fddf.OMathPara = _f.NewOMathPara()
				if _gbgbe := d.DecodeElement(_fddf.OMathPara, &_aabedg); _gbgbe != nil {
					return _gbgbe
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _ebafd)
				_ebafd.EG_MathContent = append(_ebafd.EG_MathContent, _fddf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_eggca := NewEG_RunLevelElts()
				_dagcgb := NewEG_MathContent()
				_dagcgb.OMath = _f.NewOMath()
				if _dfafgd := d.DecodeElement(_dagcgb.OMath, &_aabedg); _dfafgd != nil {
					return _dfafgd
				}
				_fgfcff.EG_RunLevelElts = append(_fgfcff.EG_RunLevelElts, _eggca)
				_eggca.EG_MathContent = append(_eggca.EG_MathContent, _dagcgb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_RubyContent\u0020\u0025v", _aabedg.Name)
				if _cbcfg := d.Skip(); _cbcfg != nil {
					return _cbcfg
				}
			}
		case _d.EndElement:
			break _aadca
		case _d.CharData:
		}
	}
	return nil
}
func (_eabcgb ST_Pitch) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_eabcgb.String(), start)
}

// ValidateWithPath validates the CT_FtnDocProps and its children, prefixing error messages with path
func (_fcfddb *CT_FtnDocProps) ValidateWithPath(path string) error {
	if _fcfddb.Pos != nil {
		if _bdccde := _fcfddb.Pos.ValidateWithPath(path + "\u002fPos"); _bdccde != nil {
			return _bdccde
		}
	}
	if _fcfddb.NumFmt != nil {
		if _effa := _fcfddb.NumFmt.ValidateWithPath(path + "\u002fNumFmt"); _effa != nil {
			return _effa
		}
	}
	if _fcfddb.NumStart != nil {
		if _bafbb := _fcfddb.NumStart.ValidateWithPath(path + "\u002fNumStart"); _bafbb != nil {
			return _bafbb
		}
	}
	if _fcfddb.NumRestart != nil {
		if _dbfea := _fcfddb.NumRestart.ValidateWithPath(path + "/NumRestart"); _dbfea != nil {
			return _dbfea
		}
	}
	for _cbbg, _fefbf := range _fcfddb.Footnote {
		if _bbbfe := _fefbf.ValidateWithPath(_b.Sprintf("\u0025s\u002fFootnote\u005b\u0025d\u005d", path, _cbbg)); _bbbfe != nil {
			return _bbbfe
		}
	}
	return nil
}
func (_bddb *CT_OptimizeForBrowser) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bddb.TargetAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:target"}, Value: _b.Sprintf("\u0025v", *_bddb.TargetAttr)})
	}
	if _bddb.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_bddb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gceab *CT_Rel) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dbaa := range start.Attr {
		if _dbaa.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _dbaa.Name.Local == "id" || _dbaa.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _dbaa.Name.Local == "id" {
			_beaeea, _fgdda := _dbaa.Value, error(nil)
			if _fgdda != nil {
				return _fgdda
			}
			_gceab.IdAttr = _beaeea
			continue
		}
	}
	for {
		_agea, _ebggd := d.Token()
		if _ebggd != nil {
			return _b.Errorf("parsing\u0020CT_Rel:\u0020\u0025s", _ebggd)
		}
		if _faaga, _feaabc := _agea.(_d.EndElement); _feaabc && _faaga.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adabd ST_DocGrid) Validate() error { return _adabd.ValidateWithPath("") }

type EG_MathContent struct {
	OMathPara *_f.OMathPara
	OMath     *_f.OMath
}
type EG_RPr struct {

	// Run Properties
	RPr *CT_RPr
}
type CT_Guid struct {

	// GUID Value
	ValAttr *string
}

func (_bbfcb ST_EdGrp) String() string {
	switch _bbfcb {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "everyone"
	case 3:
		return "administrators"
	case 4:
		return "contributors"
	case 5:
		return "editors"
	case 6:
		return "owners"
	case 7:
		return "current"
	}
	return ""
}
func NewCT_DocPartPr() *CT_DocPartPr {
	_abbgg := &CT_DocPartPr{}
	_abbgg.Name = NewCT_DocPartName()
	return _abbgg
}

const _ebccbg = "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fmarkup\u002dcompatibility\u002f2006"

func NewCT_FtnDocProps() *CT_FtnDocProps { _gfgcb := &CT_FtnDocProps{}; return _gfgcb }
func (_gddcf ST_DropCap) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gddcf.String(), start)
}

type CT_TblBorders struct {

	// Table Top Border
	Top *CT_Border

	// Table Leading Edge Border
	Start *CT_Border

	// Table Leading Edge Border
	Left *CT_Border

	// Table Bottom Border
	Bottom *CT_Border

	// Table Trailing Edge Border
	End *CT_Border

	// Table Trailing Edge Border
	Right *CT_Border

	// Table Inside Horizontal Edges Border
	InsideH *CT_Border

	// Table Inside Vertical Edges Border
	InsideV *CT_Border
}

// ValidateWithPath validates the CT_VerticalJc and its children, prefixing error messages with path
func (_bcdcag *CT_VerticalJc) ValidateWithPath(path string) error {
	if _bcdcag.ValAttr == ST_VerticalJcUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cgaacd := _bcdcag.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cgaacd != nil {
		return _cgaacd
	}
	return nil
}
func NewCT_ReadingModeInkLockDown() *CT_ReadingModeInkLockDown {
	_fdbcd := &CT_ReadingModeInkLockDown{}
	return _fdbcd
}

type CT_View struct {

	// Document View Setting Value
	ValAttr ST_View
}

func NewCT_DivBdr() *CT_DivBdr { _ecadd := &CT_DivBdr{}; return _ecadd }
func (_bcgcb ST_View) String() string {
	switch _bcgcb {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "print"
	case 3:
		return "outline"
	case 4:
		return "masterPages"
	case 5:
		return "normal"
	case 6:
		return "web"
	}
	return ""
}
func (_dafff ST_FFTextType) Validate() error { return _dafff.ValidateWithPath("") }
func NewCT_FtnEdnSepRef() *CT_FtnEdnSepRef   { _ddgaa := &CT_FtnEdnSepRef{}; return _ddgaa }

// Validate validates the CT_FldChar and its children
func (_dbgbe *CT_FldChar) Validate() error { return _dbgbe.ValidateWithPath("CT_FldChar") }

// ValidateWithPath validates the CT_AltChunkPr and its children, prefixing error messages with path
func (_ege *CT_AltChunkPr) ValidateWithPath(path string) error {
	if _ege.MatchSrc != nil {
		if _afdf := _ege.MatchSrc.ValidateWithPath(path + "\u002fMatchSrc"); _afdf != nil {
			return _afdf
		}
	}
	return nil
}
func NewCT_RecipientData() *CT_RecipientData {
	_becea := &CT_RecipientData{}
	_becea.Column = NewCT_DecimalNumber()
	_becea.UniqueTag = NewCT_Base64Binary()
	return _becea
}
func (_gbacg *CT_CharacterSpacing) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_agad, _affc := _gbacg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _affc != nil {
		return _affc
	}
	start.Attr = append(start.Attr, _agad)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dedfe *ST_RestartNumber) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dedfe = 0
	case "continuous":
		*_dedfe = 1
	case "eachSect":
		*_dedfe = 2
	case "eachPage":
		*_dedfe = 3
	}
	return nil
}

type ST_TextboxTightWrap byte

func (_agagbg *CT_Sym) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _agagbg.FontAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:font"}, Value: _b.Sprintf("\u0025v", *_agagbg.FontAttr)})
	}
	if _agagbg.CharAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:char"}, Value: _b.Sprintf("\u0025v", *_agagbg.CharAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DirContentRun and its children, prefixing error messages with path
func (_eeac *CT_DirContentRun) ValidateWithPath(path string) error {
	if _gebb := _eeac.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _gebb != nil {
		return _gebb
	}
	for _ggcge, _cbbf := range _eeac.FldSimple {
		if _cffeb := _cbbf.ValidateWithPath(_b.Sprintf("\u0025s/FldSimple\u005b\u0025d\u005d", path, _ggcge)); _cffeb != nil {
			return _cffeb
		}
	}
	if _eeac.Hyperlink != nil {
		if _cccbd := _eeac.Hyperlink.ValidateWithPath(path + "\u002fHyperlink"); _cccbd != nil {
			return _cccbd
		}
	}
	if _eeac.SubDoc != nil {
		if _aadc := _eeac.SubDoc.ValidateWithPath(path + "\u002fSubDoc"); _aadc != nil {
			return _aadc
		}
	}
	for _cfddd, _badef := range _eeac.EG_ContentRunContent {
		if _adgfe := _badef.ValidateWithPath(_b.Sprintf("%s\u002fEG_ContentRunContent[\u0025d\u005d", path, _cfddd)); _adgfe != nil {
			return _adgfe
		}
	}
	return nil
}
func (_dbeccc WdST_AlignH) ValidateWithPath(path string) error {
	switch _dbeccc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dbeccc))
	}
	return nil
}

// ValidateWithPath validates the CT_Frameset and its children, prefixing error messages with path
func (_gcgfb *CT_Frameset) ValidateWithPath(path string) error {
	if _gcgfb.Sz != nil {
		if _effbg := _gcgfb.Sz.ValidateWithPath(path + "\u002fSz"); _effbg != nil {
			return _effbg
		}
	}
	if _gcgfb.FramesetSplitbar != nil {
		if _bfcfa := _gcgfb.FramesetSplitbar.ValidateWithPath(path + "\u002fFramesetSplitbar"); _bfcfa != nil {
			return _bfcfa
		}
	}
	if _gcgfb.FrameLayout != nil {
		if _ffdb := _gcgfb.FrameLayout.ValidateWithPath(path + "\u002fFrameLayout"); _ffdb != nil {
			return _ffdb
		}
	}
	if _gcgfb.Title != nil {
		if _aafdg := _gcgfb.Title.ValidateWithPath(path + "\u002fTitle"); _aafdg != nil {
			return _aafdg
		}
	}
	for _ccebf, _effeg := range _gcgfb.Choice {
		if _fegb := _effeg.ValidateWithPath(_b.Sprintf("\u0025s\u002fChoice\u005b\u0025d\u005d", path, _ccebf)); _fegb != nil {
			return _fegb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Perm and its children, prefixing error messages with path
func (_badba *CT_Perm) ValidateWithPath(path string) error {
	if _cbgge := _badba.DisplacedByCustomXmlAttr.ValidateWithPath(path + "\u002fDisplacedByCustomXmlAttr"); _cbgge != nil {
		return _cbgge
	}
	return nil
}
func (_aabecc *CT_Tc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aabecc.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", *_aabecc.IdAttr)})
	}
	e.EncodeToken(start)
	if _aabecc.TcPr != nil {
		_gcecdg := _d.StartElement{Name: _d.Name{Local: "w:tcPr"}}
		e.EncodeElement(_aabecc.TcPr, _gcecdg)
	}
	for _, _cebda := range _aabecc.EG_BlockLevelElts {
		_cebda.MarshalXML(e, _d.StartElement{})
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_eegfe *ST_Hint) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eefbaf, _gffac := d.Token()
	if _gffac != nil {
		return _gffac
	}
	if _eeefeg, _dbbeag := _eefbaf.(_d.EndElement); _dbbeag && _eeefeg.Name == start.Name {
		*_eegfe = 1
		return nil
	}
	if _gbacbg, _dddea := _eefbaf.(_d.CharData); !_dddea {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _eefbaf)
	} else {
		switch string(_gbacbg) {
		case "":
			*_eegfe = 0
		case "default":
			*_eegfe = 1
		case "eastAsia":
			*_eegfe = 2
		}
	}
	_eefbaf, _gffac = d.Token()
	if _gffac != nil {
		return _gffac
	}
	if _gbdff, _fccfce := _eefbaf.(_d.EndElement); _fccfce && _gbdff.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _eefbaf)
}

type CT_NumPr struct {

	// Numbering Level Reference
	Ilvl *CT_DecimalNumber

	// Numbering Definition Instance Reference
	NumId *CT_DecimalNumber

	// Previous Paragraph Numbering Properties
	NumberingChange *CT_TrackChangeNumbering

	// Inserted Numbering Properties
	Ins *CT_TrackChange
}

// Validate validates the CT_TblLayoutType and its children
func (_bfecg *CT_TblLayoutType) Validate() error { return _bfecg.ValidateWithPath("CT_TblLayoutType") }
func (_daddc *CT_SmartTagPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gafe:
	for {
		_afegd, _facdcb := d.Token()
		if _facdcb != nil {
			return _facdcb
		}
		switch _gbegg := _afegd.(type) {
		case _d.StartElement:
			switch _gbegg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "attr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "attr"}:
				_fadff := NewCT_Attr()
				if _fadgb := d.DecodeElement(_fadff, &_gbegg); _fadgb != nil {
					return _fadgb
				}
				_daddc.Attr = append(_daddc.Attr, _fadff)
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_SmartTagPr \u0025v", _gbegg.Name)
				if _fabed := d.Skip(); _fabed != nil {
					return _fabed
				}
			}
		case _d.EndElement:
			break _gafe
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_RPrChange() *CT_RPrChange {
	_ggbcf := &CT_RPrChange{}
	_ggbcf.RPr = NewCT_RPrOriginal()
	return _ggbcf
}

type CT_TcMar struct {

	// Table Cell Top Margin Exception
	Top *CT_TblWidth

	// Table Cell Leading Margin Exception
	Start *CT_TblWidth

	// Table Cell Leading Margin Exception
	Left *CT_TblWidth

	// Table Cell Bottom Margin Exception
	Bottom *CT_TblWidth

	// Table Cell Trailing Margin Exception
	End *CT_TblWidth

	// Table Cell Trailing Margin Exception
	Right *CT_TblWidth
}

func NewCT_SdtCell() *CT_SdtCell { _gbbed := &CT_SdtCell{}; return _gbbed }
func (_bdddee *CT_SdtCell) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bdddee.SdtPr != nil {
		_bace := _d.StartElement{Name: _d.Name{Local: "w:sdtPr"}}
		e.EncodeElement(_bdddee.SdtPr, _bace)
	}
	if _bdddee.SdtEndPr != nil {
		_fdebd := _d.StartElement{Name: _d.Name{Local: "w:sdtEndPr"}}
		e.EncodeElement(_bdddee.SdtEndPr, _fdebd)
	}
	if _bdddee.SdtContent != nil {
		_eacdd := _d.StartElement{Name: _d.Name{Local: "w:sdtContent"}}
		e.EncodeElement(_bdddee.SdtContent, _eacdd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_DocParts() *CT_DocParts { _cfaa := &CT_DocParts{}; return _cfaa }
func (_bfbeee ST_RestartNumber) String() string {
	switch _bfbeee {
	case 0:
		return ""
	case 1:
		return "continuous"
	case 2:
		return "eachSect"
	case 3:
		return "eachPage"
	}
	return ""
}
func NewCT_FtnEdn() *CT_FtnEdn { _addaf := &CT_FtnEdn{}; return _addaf }

type EG_RunInnerContent struct {

	// Break
	Br *CT_Br

	// Text
	T *CT_Text

	// Content Part
	ContentPart *CT_Rel

	// Deleted Text
	DelText *CT_Text

	// Field Code
	InstrText *CT_Text

	// Deleted Field Code
	DelInstrText *CT_Text

	// Non Breaking Hyphen Character
	NoBreakHyphen *CT_Empty

	// Optional Hyphen Character
	SoftHyphen *CT_Empty

	// Date Block - Short Day Format
	DayShort *CT_Empty

	// Date Block - Short Month Format
	MonthShort *CT_Empty

	// Date Block - Short Year Format
	YearShort *CT_Empty

	// Date Block - Long Day Format
	DayLong *CT_Empty

	// Date Block - Long Month Format
	MonthLong *CT_Empty

	// Date Block - Long Year Format
	YearLong *CT_Empty

	// Comment Information Block
	AnnotationRef *CT_Empty

	// Footnote Reference Mark
	FootnoteRef *CT_Empty

	// Endnote Reference Mark
	EndnoteRef *CT_Empty

	// Footnote/Endnote Separator Mark
	Separator *CT_Empty

	// Continuation Separator Mark
	ContinuationSeparator *CT_Empty

	// Symbol Character
	Sym *CT_Sym

	// Page Number Block
	PgNum *CT_Empty

	// Carriage Return
	Cr *CT_Empty

	// Tab Character
	Tab *CT_Empty

	// Embedded Object
	Object *CT_Object

	// VML Object
	Pict *CT_Picture

	// Complex Field Character
	FldChar *CT_FldChar

	// Phonetic Guide
	Ruby *CT_Ruby

	// Footnote Reference
	FootnoteReference *CT_FtnEdnRef

	// Endnote Reference
	EndnoteReference *CT_FtnEdnRef

	// Comment Content Reference Mark
	CommentReference *CT_Markup

	// DrawingML Object
	Drawing *CT_Drawing

	// Absolute Position Tab Character
	Ptab *CT_PTab

	// Position of Last Calculated Page Break
	LastRenderedPageBreak *CT_Empty
}

func NewCT_BdoContentRun() *CT_BdoContentRun { _accc := &CT_BdoContentRun{}; return _accc }
func (_gbee *CT_R) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gbee.RsidRPrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidRPr"}, Value: _b.Sprintf("\u0025v", *_gbee.RsidRPrAttr)})
	}
	if _gbee.RsidDelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidDel"}, Value: _b.Sprintf("\u0025v", *_gbee.RsidDelAttr)})
	}
	if _gbee.RsidRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidR"}, Value: _b.Sprintf("\u0025v", *_gbee.RsidRAttr)})
	}
	e.EncodeToken(start)
	if _gbee.RPr != nil {
		_gegdf := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_gbee.RPr, _gegdf)
	}
	if _gbee.EG_RunInnerContent != nil {
		for _, _ceegd := range _gbee.EG_RunInnerContent {
			_ceegd.MarshalXML(e, _d.StartElement{})
		}
	}
	for _, _cdaff := range _gbee.Extra {
		if _dgecae, _ccfbb := _cdaff.(*AlternateContentRun); _ccfbb {
			if _fbaba := _dgecae.MarshalXML(e, _d.StartElement{Name: _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fmarkup\u002dcompatibility\u002f2006", Local: "mc:AlternateContent"}}); _fbaba != nil {
				return _fbaba
			}
		} else if _bccga := _cdaff.MarshalXML(e, _d.StartElement{}); _bccga != nil {
			return _bccga
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cbbc *CT_SdtContentBlock) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cbbc.CustomXml != nil {
		_eceebe := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_cbbc.CustomXml, _eceebe)
	}
	if _cbbc.Sdt != nil {
		_eebgd := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_cbbc.Sdt, _eebgd)
	}
	if _cbbc.P != nil {
		_bbfea := _d.StartElement{Name: _d.Name{Local: "w:p"}}
		for _, _dcdec := range _cbbc.P {
			e.EncodeElement(_dcdec, _bbfea)
		}
	}
	if _cbbc.Tbl != nil {
		_bebgc := _d.StartElement{Name: _d.Name{Local: "w:tbl"}}
		for _, _bggaa := range _cbbc.Tbl {
			e.EncodeElement(_bggaa, _bebgc)
		}
	}
	if _cbbc.EG_RunLevelElts != nil {
		for _, _gaeeb := range _cbbc.EG_RunLevelElts {
			_gaeeb.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Control struct {

	// Unique Name for Embedded Control
	NameAttr *string

	// Shape Reference
	ShapeidAttr *string
	IdAttr      *string
}

func NewCT_TblGrid() *CT_TblGrid { _dafcb := &CT_TblGrid{}; return _dafcb }

type CT_TxbxContent struct {

	// Anchor for Imported External Content
	AltChunk               []*CT_AltChunk
	EG_ContentBlockContent []*EG_ContentBlockContent
}

func (_bgacab *CT_PageNumber) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ccdc := range start.Attr {
		if _ccdc.Name.Local == "fmt" {
			_bgacab.FmtAttr.UnmarshalXMLAttr(_ccdc)
			continue
		}
		if _ccdc.Name.Local == "start" {
			_eddga, _dfbf := _dd.ParseInt(_ccdc.Value, 10, 64)
			if _dfbf != nil {
				return _dfbf
			}
			_bgacab.StartAttr = &_eddga
			continue
		}
		if _ccdc.Name.Local == "chapStyle" {
			_edcgf, _dgddd := _dd.ParseInt(_ccdc.Value, 10, 64)
			if _dgddd != nil {
				return _dgddd
			}
			_bgacab.ChapStyleAttr = &_edcgf
			continue
		}
		if _ccdc.Name.Local == "chapSep" {
			_bgacab.ChapSepAttr.UnmarshalXMLAttr(_ccdc)
			continue
		}
	}
	for {
		_aeagfc, _aabafe := d.Token()
		if _aabafe != nil {
			return _b.Errorf("parsing\u0020CT_PageNumber:\u0020\u0025s", _aabafe)
		}
		if _ccbb, _abcgb := _aeagfc.(_d.EndElement); _abcgb && _ccbb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Kinsoku struct {

	// Language For Which Custom Line Breaking Rule Applies
	LangAttr string

	// Characters For Custom Line Breaking Rule
	ValAttr string
}

func (_dcedc ST_DisplacedByCustomXml) String() string {
	switch _dcedc {
	case 0:
		return ""
	case 1:
		return "next"
	case 2:
		return "prev"
	}
	return ""
}
func (_aacgf *CT_PPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _aacgf.PStyle != nil {
		_edgfff := _d.StartElement{Name: _d.Name{Local: "w:pStyle"}}
		e.EncodeElement(_aacgf.PStyle, _edgfff)
	}
	if _aacgf.KeepNext != nil {
		_efcdg := _d.StartElement{Name: _d.Name{Local: "w:keepNext"}}
		e.EncodeElement(_aacgf.KeepNext, _efcdg)
	}
	if _aacgf.KeepLines != nil {
		_ccafa := _d.StartElement{Name: _d.Name{Local: "w:keepLines"}}
		e.EncodeElement(_aacgf.KeepLines, _ccafa)
	}
	if _aacgf.PageBreakBefore != nil {
		_gdfca := _d.StartElement{Name: _d.Name{Local: "w:pageBreakBefore"}}
		e.EncodeElement(_aacgf.PageBreakBefore, _gdfca)
	}
	if _aacgf.FramePr != nil {
		_eddbd := _d.StartElement{Name: _d.Name{Local: "w:framePr"}}
		e.EncodeElement(_aacgf.FramePr, _eddbd)
	}
	if _aacgf.WidowControl != nil {
		_bedaa := _d.StartElement{Name: _d.Name{Local: "w:widowControl"}}
		e.EncodeElement(_aacgf.WidowControl, _bedaa)
	}
	if _aacgf.NumPr != nil {
		_bedfb := _d.StartElement{Name: _d.Name{Local: "w:numPr"}}
		e.EncodeElement(_aacgf.NumPr, _bedfb)
	}
	if _aacgf.SuppressLineNumbers != nil {
		_gbcce := _d.StartElement{Name: _d.Name{Local: "w:suppressLineNumbers"}}
		e.EncodeElement(_aacgf.SuppressLineNumbers, _gbcce)
	}
	if _aacgf.PBdr != nil {
		_ebdgbf := _d.StartElement{Name: _d.Name{Local: "w:pBdr"}}
		e.EncodeElement(_aacgf.PBdr, _ebdgbf)
	}
	if _aacgf.Shd != nil {
		_dfbbf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_aacgf.Shd, _dfbbf)
	}
	if _aacgf.Tabs != nil {
		_fbbdc := _d.StartElement{Name: _d.Name{Local: "w:tabs"}}
		e.EncodeElement(_aacgf.Tabs, _fbbdc)
	}
	if _aacgf.SuppressAutoHyphens != nil {
		_bged := _d.StartElement{Name: _d.Name{Local: "w:suppressAutoHyphens"}}
		e.EncodeElement(_aacgf.SuppressAutoHyphens, _bged)
	}
	if _aacgf.Kinsoku != nil {
		_ccfba := _d.StartElement{Name: _d.Name{Local: "w:kinsoku"}}
		e.EncodeElement(_aacgf.Kinsoku, _ccfba)
	}
	if _aacgf.WordWrap != nil {
		_gbddd := _d.StartElement{Name: _d.Name{Local: "w:wordWrap"}}
		e.EncodeElement(_aacgf.WordWrap, _gbddd)
	}
	if _aacgf.OverflowPunct != nil {
		_feeaa := _d.StartElement{Name: _d.Name{Local: "w:overflowPunct"}}
		e.EncodeElement(_aacgf.OverflowPunct, _feeaa)
	}
	if _aacgf.TopLinePunct != nil {
		_dgcabc := _d.StartElement{Name: _d.Name{Local: "w:topLinePunct"}}
		e.EncodeElement(_aacgf.TopLinePunct, _dgcabc)
	}
	if _aacgf.AutoSpaceDE != nil {
		_bcgga := _d.StartElement{Name: _d.Name{Local: "w:autoSpaceDE"}}
		e.EncodeElement(_aacgf.AutoSpaceDE, _bcgga)
	}
	if _aacgf.AutoSpaceDN != nil {
		_agaf := _d.StartElement{Name: _d.Name{Local: "w:autoSpaceDN"}}
		e.EncodeElement(_aacgf.AutoSpaceDN, _agaf)
	}
	if _aacgf.Bidi != nil {
		_abgg := _d.StartElement{Name: _d.Name{Local: "w:bidi"}}
		e.EncodeElement(_aacgf.Bidi, _abgg)
	}
	if _aacgf.AdjustRightInd != nil {
		_adfcbg := _d.StartElement{Name: _d.Name{Local: "w:adjustRightInd"}}
		e.EncodeElement(_aacgf.AdjustRightInd, _adfcbg)
	}
	if _aacgf.SnapToGrid != nil {
		_efdga := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_aacgf.SnapToGrid, _efdga)
	}
	if _aacgf.Spacing != nil {
		_gdbda := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_aacgf.Spacing, _gdbda)
	}
	if _aacgf.Ind != nil {
		_cabeb := _d.StartElement{Name: _d.Name{Local: "w:ind"}}
		e.EncodeElement(_aacgf.Ind, _cabeb)
	}
	if _aacgf.ContextualSpacing != nil {
		_acdcg := _d.StartElement{Name: _d.Name{Local: "w:contextualSpacing"}}
		e.EncodeElement(_aacgf.ContextualSpacing, _acdcg)
	}
	if _aacgf.MirrorIndents != nil {
		_gafdg := _d.StartElement{Name: _d.Name{Local: "w:mirrorIndents"}}
		e.EncodeElement(_aacgf.MirrorIndents, _gafdg)
	}
	if _aacgf.SuppressOverlap != nil {
		_dcgga := _d.StartElement{Name: _d.Name{Local: "w:suppressOverlap"}}
		e.EncodeElement(_aacgf.SuppressOverlap, _dcgga)
	}
	if _aacgf.Jc != nil {
		_gdfaf := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		e.EncodeElement(_aacgf.Jc, _gdfaf)
	}
	if _aacgf.TextDirection != nil {
		_aabfc := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_aacgf.TextDirection, _aabfc)
	}
	if _aacgf.TextAlignment != nil {
		_begfc := _d.StartElement{Name: _d.Name{Local: "w:textAlignment"}}
		e.EncodeElement(_aacgf.TextAlignment, _begfc)
	}
	if _aacgf.TextboxTightWrap != nil {
		_acaed := _d.StartElement{Name: _d.Name{Local: "w:textboxTightWrap"}}
		e.EncodeElement(_aacgf.TextboxTightWrap, _acaed)
	}
	if _aacgf.OutlineLvl != nil {
		_aeagf := _d.StartElement{Name: _d.Name{Local: "w:outlineLvl"}}
		e.EncodeElement(_aacgf.OutlineLvl, _aeagf)
	}
	if _aacgf.DivId != nil {
		_eccfbg := _d.StartElement{Name: _d.Name{Local: "w:divId"}}
		e.EncodeElement(_aacgf.DivId, _eccfbg)
	}
	if _aacgf.CnfStyle != nil {
		_ageff := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		e.EncodeElement(_aacgf.CnfStyle, _ageff)
	}
	if _aacgf.RPr != nil {
		_dcege := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_aacgf.RPr, _dcege)
	}
	if _aacgf.SectPr != nil {
		_ggacf := _d.StartElement{Name: _d.Name{Local: "w:sectPr"}}
		e.EncodeElement(_aacgf.SectPr, _ggacf)
	}
	if _aacgf.PPrChange != nil {
		_abbffb := _d.StartElement{Name: _d.Name{Local: "w:pPrChange"}}
		e.EncodeElement(_aacgf.PPrChange, _abbffb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cadac ST_MailMergeSourceType) String() string {
	switch _cadac {
	case 0:
		return ""
	case 1:
		return "database"
	case 2:
		return "addressBook"
	case 3:
		return "document1"
	case 4:
		return "document2"
	case 5:
		return "text"
	case 6:
		return "email"
	case 7:
		return "native"
	case 8:
		return "legacy"
	case 9:
		return "master"
	}
	return ""
}
func (_afgff ST_PTabLeader) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gbccab := _d.Attr{}
	_gbccab.Name = name
	switch _afgff {
	case ST_PTabLeaderUnset:
		_gbccab.Value = ""
	case ST_PTabLeaderNone:
		_gbccab.Value = "none"
	case ST_PTabLeaderDot:
		_gbccab.Value = "dot"
	case ST_PTabLeaderHyphen:
		_gbccab.Value = "hyphen"
	case ST_PTabLeaderUnderscore:
		_gbccab.Value = "underscore"
	case ST_PTabLeaderMiddleDot:
		_gbccab.Value = "middleDot"
	}
	return _gbccab, nil
}
func (_fgabfb ST_DisplacedByCustomXml) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cefbea := _d.Attr{}
	_cefbea.Name = name
	switch _fgabfb {
	case ST_DisplacedByCustomXmlUnset:
		_cefbea.Value = ""
	case ST_DisplacedByCustomXmlNext:
		_cefbea.Value = "next"
	case ST_DisplacedByCustomXmlPrev:
		_cefbea.Value = "prev"
	}
	return _cefbea, nil
}

// AC_ChoiceRun is used to marshal/unmarshal mc:Choice types inside of CT_R Extra in the OOXML schema.
type AC_ChoiceRun struct {
	_dafeee string

	// Break
	Br *CT_Br

	// Text
	T *CT_Text

	// Content Part
	ContentPart *CT_Rel

	// Deleted Text
	DelText *CT_Text

	// Field Code
	InstrText *CT_Text

	// Deleted Field Code
	DelInstrText *CT_Text

	// Non Breaking Hyphen Character
	NoBreakHyphen *CT_Empty

	// Choiceal Hyphen Character
	SoftHyphen *CT_Empty

	// Date Block - Short Day Format
	DayShort *CT_Empty

	// Date Block - Short Month Format
	MonthShort *CT_Empty

	// Date Block - Short Year Format
	YearShort *CT_Empty

	// Date Block - Long Day Format
	DayLong *CT_Empty

	// Date Block - Long Month Format
	MonthLong *CT_Empty

	// Date Block - Long Year Format
	YearLong *CT_Empty

	// Comment Information Block
	AnnotationRef *CT_Empty

	// Footnote Reference Mark
	FootnoteRef *CT_Empty

	// Endnote Reference Mark
	EndnoteRef *CT_Empty

	// Footnote/Endnote Separator Mark
	Separator *CT_Empty

	// Continuation Separator Mark
	ContinuationSeparator *CT_Empty

	// Symbol Character
	Sym *CT_Sym

	// Page Number Block
	PgNum *CT_Empty

	// Carriage Return
	Cr *CT_Empty

	// Tab Character
	Tab *CT_Empty

	// Embedded Object
	Object *CT_Object

	// VML Object
	Pict *CT_Picture

	// Complex Field Character
	FldChar *CT_FldChar

	// Phonetic Guide
	Ruby *CT_Ruby

	// Footnote Reference
	FootnoteReference *CT_FtnEdnRef

	// Endnote Reference
	EndnoteReference *CT_FtnEdnRef

	// Comment Content Reference Mark
	CommentReference *CT_Markup

	// DrawingML Object
	Drawing *CT_Drawing

	// Absolute Position Tab Character
	Ptab *CT_PTab

	// Position of Last Calculated Page Break
	LastRenderedPageBreak *CT_Empty
}

func (_agdec ST_FrameLayout) String() string {
	switch _agdec {
	case 0:
		return ""
	case 1:
		return "rows"
	case 2:
		return "cols"
	case 3:
		return "none"
	}
	return ""
}

// Validate validates the CT_NumPr and its children
func (_dgbb *CT_NumPr) Validate() error { return _dgbb.ValidateWithPath("CT_NumPr") }

type ST_DocPartGallery byte
type WdST_AlignV byte

// ValidateWithPath validates the EG_ContentRowContent and its children, prefixing error messages with path
func (_fbdcd *EG_ContentRowContent) ValidateWithPath(path string) error {
	for _abggeb, _acggbb := range _fbdcd.Tr {
		if _edagdc := _acggbb.ValidateWithPath(_b.Sprintf("\u0025s\u002fTr\u005b\u0025d]", path, _abggeb)); _edagdc != nil {
			return _edagdc
		}
	}
	if _fbdcd.CustomXml != nil {
		if _bcfea := _fbdcd.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _bcfea != nil {
			return _bcfea
		}
	}
	if _fbdcd.Sdt != nil {
		if _feggd := _fbdcd.Sdt.ValidateWithPath(path + "\u002fSdt"); _feggd != nil {
			return _feggd
		}
	}
	for _aaaba, _fcaaed := range _fbdcd.EG_RunLevelElts {
		if _aagcce := _fcaaed.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _aaaba)); _aagcce != nil {
			return _aagcce
		}
	}
	return nil
}

// ValidateWithPath validates the TxbxContent and its children, prefixing error messages with path
func (_efaag *TxbxContent) ValidateWithPath(path string) error {
	if _gedgbe := _efaag.CT_TxbxContent.ValidateWithPath(path); _gedgbe != nil {
		return _gedgbe
	}
	return nil
}
func (_dacdf *CT_CustomXmlBlock) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dacdf.UriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uri"}, Value: _b.Sprintf("\u0025v", *_dacdf.UriAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:element"}, Value: _b.Sprintf("\u0025v", _dacdf.ElementAttr)})
	e.EncodeToken(start)
	if _dacdf.CustomXmlPr != nil {
		_dacdfb := _d.StartElement{Name: _d.Name{Local: "w:customXmlPr"}}
		e.EncodeElement(_dacdf.CustomXmlPr, _dacdfb)
	}
	if _dacdf.EG_ContentBlockContent != nil {
		for _, _gbf := range _dacdf.EG_ContentBlockContent {
			_gbf.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_ParaRPrChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
	RPr    *CT_ParaRPrOriginal
}
type CT_PTab struct {

	// Positional Tab Stop Alignment
	AlignmentAttr ST_PTabAlignment

	// Positional Tab Base
	RelativeToAttr ST_PTabRelativeTo

	// Tab Leader Character
	LeaderAttr ST_PTabLeader
}

func (_deccg ST_Wrap) Validate() error { return _deccg.ValidateWithPath("") }
func (_ebfc *CT_BookmarkRange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _degd := range start.Attr {
		if _degd.Name.Local == "colFirst" {
			_efbe, _egd := _dd.ParseInt(_degd.Value, 10, 64)
			if _egd != nil {
				return _egd
			}
			_ebfc.ColFirstAttr = &_efbe
			continue
		}
		if _degd.Name.Local == "colLast" {
			_gca, _dca := _dd.ParseInt(_degd.Value, 10, 64)
			if _dca != nil {
				return _dca
			}
			_ebfc.ColLastAttr = &_gca
			continue
		}
		if _degd.Name.Local == "displacedByCustomXml" {
			_ebfc.DisplacedByCustomXmlAttr.UnmarshalXMLAttr(_degd)
			continue
		}
		if _degd.Name.Local == "id" {
			_eggd, _aece := _dd.ParseInt(_degd.Value, 10, 64)
			if _aece != nil {
				return _aece
			}
			_ebfc.IdAttr = _eggd
			continue
		}
	}
	for {
		_dfdd, _ecd := d.Token()
		if _ecd != nil {
			return _b.Errorf("parsing\u0020CT_BookmarkRange: \u0025s", _ecd)
		}
		if _aacd, _egab := _dfdd.(_d.EndElement); _egab && _aacd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_MailMergeOdsoFMDFieldType() *CT_MailMergeOdsoFMDFieldType {
	_caacb := &CT_MailMergeOdsoFMDFieldType{}
	_caacb.ValAttr = ST_MailMergeOdsoFMDFieldType(1)
	return _caacb
}

// ValidateWithPath validates the CT_OnOff and its children, prefixing error messages with path
func (_cbbfa *CT_OnOff) ValidateWithPath(path string) error {
	if _cbbfa.ValAttr != nil {
		if _adfcfe := _cbbfa.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _adfcfe != nil {
			return _adfcfe
		}
	}
	return nil
}
func (_dfbef *CT_Spacing) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dfbef.BeforeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:before"}, Value: _b.Sprintf("\u0025v", *_dfbef.BeforeAttr)})
	}
	if _dfbef.BeforeLinesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:beforeLines"}, Value: _b.Sprintf("\u0025v", *_dfbef.BeforeLinesAttr)})
	}
	if _dfbef.BeforeAutospacingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:beforeAutospacing"}, Value: _b.Sprintf("\u0025v", *_dfbef.BeforeAutospacingAttr)})
	}
	if _dfbef.AfterAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:after"}, Value: _b.Sprintf("\u0025v", *_dfbef.AfterAttr)})
	}
	if _dfbef.AfterLinesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:afterLines"}, Value: _b.Sprintf("\u0025v", *_dfbef.AfterLinesAttr)})
	}
	if _dfbef.AfterAutospacingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:afterAutospacing"}, Value: _b.Sprintf("\u0025v", *_dfbef.AfterAutospacingAttr)})
	}
	if _dfbef.LineAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:line"}, Value: _b.Sprintf("\u0025v", *_dfbef.LineAttr)})
	}
	if _dfbef.LineRuleAttr != ST_LineSpacingRuleUnset {
		_ffgcf, _ggffe := _dfbef.LineRuleAttr.MarshalXMLAttr(_d.Name{Local: "w:lineRule"})
		if _ggffe != nil {
			return _ggffe
		}
		start.Attr = append(start.Attr, _ffgcf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_dfdc *CT_Empty) ValidateWithPath(path string) error { return nil }

// Validate validates the WdWgp and its children
func (_fdaccb *WdWgp) Validate() error { return _fdaccb.ValidateWithPath("WdWgp") }

// Validate validates the CT_DocParts and its children
func (_fedd *CT_DocParts) Validate() error { return _fedd.ValidateWithPath("CT_DocParts") }

const (
	ST_StyleTypeUnset     ST_StyleType = 0
	ST_StyleTypeParagraph ST_StyleType = 1
	ST_StyleTypeCharacter ST_StyleType = 2
	ST_StyleTypeTable     ST_StyleType = 3
	ST_StyleTypeNumbering ST_StyleType = 4
)

func (_cdgfb *ST_FFTextType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbccae, _bgacec := d.Token()
	if _bgacec != nil {
		return _bgacec
	}
	if _dggbb, _aaaffa := _bbccae.(_d.EndElement); _aaaffa && _dggbb.Name == start.Name {
		*_cdgfb = 1
		return nil
	}
	if _ffeeef, _dgfgf := _bbccae.(_d.CharData); !_dgfgf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bbccae)
	} else {
		switch string(_ffeeef) {
		case "":
			*_cdgfb = 0
		case "regular":
			*_cdgfb = 1
		case "number":
			*_cdgfb = 2
		case "date":
			*_cdgfb = 3
		case "currentTime":
			*_cdgfb = 4
		case "currentDate":
			*_cdgfb = 5
		case "calculated":
			*_cdgfb = 6
		}
	}
	_bbccae, _bgacec = d.Token()
	if _bgacec != nil {
		return _bgacec
	}
	if _fbfecd, _cdbbf := _bbccae.(_d.EndElement); _cdbbf && _fbfecd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bbccae)
}

// Validate validates the CT_PPr and its children
func (_addff *CT_PPr) Validate() error { return _addff.ValidateWithPath("CT_PPr") }

// ValidateWithPath validates the CT_PermStart and its children, prefixing error messages with path
func (_cfcdb *CT_PermStart) ValidateWithPath(path string) error {
	if _gbedgg := _cfcdb.EdGrpAttr.ValidateWithPath(path + "\u002fEdGrpAttr"); _gbedgg != nil {
		return _gbedgg
	}
	if _agafa := _cfcdb.DisplacedByCustomXmlAttr.ValidateWithPath(path + "\u002fDisplacedByCustomXmlAttr"); _agafa != nil {
		return _agafa
	}
	return nil
}

// Validate validates the CT_VerticalAlignRun and its children
func (_gdbgbd *CT_VerticalAlignRun) Validate() error {
	return _gdbgbd.ValidateWithPath("CT_VerticalAlignRun")
}

// ValidateWithPath validates the CT_RPrChange and its children, prefixing error messages with path
func (_bagbc *CT_RPrChange) ValidateWithPath(path string) error {
	if _cgddf := _bagbc.RPr.ValidateWithPath(path + "\u002fRPr"); _cgddf != nil {
		return _cgddf
	}
	return nil
}
func NewCT_TrackChange() *CT_TrackChange { _dgedg := &CT_TrackChange{}; return _dgedg }

type CT_SaveThroughXslt struct {
	IdAttr *string

	// Local Identifier for XSL Transform
	SolutionIDAttr *string
}

// ValidateWithPath validates the WdCT_WordprocessingShape and its children, prefixing error messages with path
func (_gecfaf *WdCT_WordprocessingShape) ValidateWithPath(path string) error {
	if _gecfaf.CNvPr != nil {
		if _dcage := _gecfaf.CNvPr.ValidateWithPath(path + "\u002fCNvPr"); _dcage != nil {
			return _dcage
		}
	}
	if _aafff := _gecfaf.Choice.ValidateWithPath(path + "\u002fChoice"); _aafff != nil {
		return _aafff
	}
	if _caadgb := _gecfaf.SpPr.ValidateWithPath(path + "\u002fSpPr"); _caadgb != nil {
		return _caadgb
	}
	if _gecfaf.Style != nil {
		if _bddbf := _gecfaf.Style.ValidateWithPath(path + "\u002fStyle"); _bddbf != nil {
			return _bddbf
		}
	}
	if _gecfaf.ExtLst != nil {
		if _feaebc := _gecfaf.ExtLst.ValidateWithPath(path + "\u002fExtLst"); _feaebc != nil {
			return _feaebc
		}
	}
	if _gecfaf.WChoice != nil {
		if _ffbfc := _gecfaf.WChoice.ValidateWithPath(path + "\u002fWChoice"); _ffbfc != nil {
			return _ffbfc
		}
	}
	if _bdgbg := _gecfaf.BodyPr.ValidateWithPath(path + "\u002fBodyPr"); _bdgbg != nil {
		return _bdgbg
	}
	return nil
}
func (_fbggca *ST_PageBorderOffset) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fbggca = 0
	case "page":
		*_fbggca = 1
	case "text":
		*_fbggca = 2
	}
	return nil
}
func (_ffaca *CT_PPrGeneral) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fbfgd:
	for {
		_bcfge, _fbcbb := d.Token()
		if _fbcbb != nil {
			return _fbcbb
		}
		switch _cabfe := _bcfge.(type) {
		case _d.StartElement:
			switch _cabfe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pStyle"}:
				_ffaca.PStyle = NewCT_String()
				if _fabdc := d.DecodeElement(_ffaca.PStyle, &_cabfe); _fabdc != nil {
					return _fabdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "keepNext"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "keepNext"}:
				_ffaca.KeepNext = NewCT_OnOff()
				if _gede := d.DecodeElement(_ffaca.KeepNext, &_cabfe); _gede != nil {
					return _gede
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "keepLines"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "keepLines"}:
				_ffaca.KeepLines = NewCT_OnOff()
				if _eaggc := d.DecodeElement(_ffaca.KeepLines, &_cabfe); _eaggc != nil {
					return _eaggc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pageBreakBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pageBreakBefore"}:
				_ffaca.PageBreakBefore = NewCT_OnOff()
				if _bdbg := d.DecodeElement(_ffaca.PageBreakBefore, &_cabfe); _bdbg != nil {
					return _bdbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "framePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "framePr"}:
				_ffaca.FramePr = NewCT_FramePr()
				if _fcbaa := d.DecodeElement(_ffaca.FramePr, &_cabfe); _fcbaa != nil {
					return _fcbaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "widowControl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "widowControl"}:
				_ffaca.WidowControl = NewCT_OnOff()
				if _bgacgg := d.DecodeElement(_ffaca.WidowControl, &_cabfe); _bgacgg != nil {
					return _bgacgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numPr"}:
				_ffaca.NumPr = NewCT_NumPr()
				if _deee := d.DecodeElement(_ffaca.NumPr, &_cabfe); _deee != nil {
					return _deee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressLineNumbers"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressLineNumbers"}:
				_ffaca.SuppressLineNumbers = NewCT_OnOff()
				if _fafcaf := d.DecodeElement(_ffaca.SuppressLineNumbers, &_cabfe); _fafcaf != nil {
					return _fafcaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pBdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pBdr"}:
				_ffaca.PBdr = NewCT_PBdr()
				if _fcdbad := d.DecodeElement(_ffaca.PBdr, &_cabfe); _fcdbad != nil {
					return _fcdbad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_ffaca.Shd = NewCT_Shd()
				if _fadfdg := d.DecodeElement(_ffaca.Shd, &_cabfe); _fadfdg != nil {
					return _fadfdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tabs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tabs"}:
				_ffaca.Tabs = NewCT_Tabs()
				if _eagda := d.DecodeElement(_ffaca.Tabs, &_cabfe); _eagda != nil {
					return _eagda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressAutoHyphens"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressAutoHyphens"}:
				_ffaca.SuppressAutoHyphens = NewCT_OnOff()
				if _ggagg := d.DecodeElement(_ffaca.SuppressAutoHyphens, &_cabfe); _ggagg != nil {
					return _ggagg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kinsoku"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kinsoku"}:
				_ffaca.Kinsoku = NewCT_OnOff()
				if _gbfef := d.DecodeElement(_ffaca.Kinsoku, &_cabfe); _gbfef != nil {
					return _gbfef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wordWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wordWrap"}:
				_ffaca.WordWrap = NewCT_OnOff()
				if _gdeb := d.DecodeElement(_ffaca.WordWrap, &_cabfe); _gdeb != nil {
					return _gdeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "overflowPunct"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "overflowPunct"}:
				_ffaca.OverflowPunct = NewCT_OnOff()
				if _gdebf := d.DecodeElement(_ffaca.OverflowPunct, &_cabfe); _gdebf != nil {
					return _gdebf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "topLinePunct"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "topLinePunct"}:
				_ffaca.TopLinePunct = NewCT_OnOff()
				if _gbgag := d.DecodeElement(_ffaca.TopLinePunct, &_cabfe); _gbgag != nil {
					return _gbgag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoSpaceDE"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoSpaceDE"}:
				_ffaca.AutoSpaceDE = NewCT_OnOff()
				if _ecfgg := d.DecodeElement(_ffaca.AutoSpaceDE, &_cabfe); _ecfgg != nil {
					return _ecfgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoSpaceDN"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoSpaceDN"}:
				_ffaca.AutoSpaceDN = NewCT_OnOff()
				if _egadg := d.DecodeElement(_ffaca.AutoSpaceDN, &_cabfe); _egadg != nil {
					return _egadg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidi"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidi"}:
				_ffaca.Bidi = NewCT_OnOff()
				if _fabfacc := d.DecodeElement(_ffaca.Bidi, &_cabfe); _fabfacc != nil {
					return _fabfacc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "adjustRightInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "adjustRightInd"}:
				_ffaca.AdjustRightInd = NewCT_OnOff()
				if _dbbgab := d.DecodeElement(_ffaca.AdjustRightInd, &_cabfe); _dbbgab != nil {
					return _dbbgab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_ffaca.SnapToGrid = NewCT_OnOff()
				if _agcga := d.DecodeElement(_ffaca.SnapToGrid, &_cabfe); _agcga != nil {
					return _agcga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_ffaca.Spacing = NewCT_Spacing()
				if _efcb := d.DecodeElement(_ffaca.Spacing, &_cabfe); _efcb != nil {
					return _efcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ind"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ind"}:
				_ffaca.Ind = NewCT_Ind()
				if _eebba := d.DecodeElement(_ffaca.Ind, &_cabfe); _eebba != nil {
					return _eebba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contextualSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "contextualSpacing"}:
				_ffaca.ContextualSpacing = NewCT_OnOff()
				if _bbgd := d.DecodeElement(_ffaca.ContextualSpacing, &_cabfe); _bbgd != nil {
					return _bbgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mirrorIndents"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mirrorIndents"}:
				_ffaca.MirrorIndents = NewCT_OnOff()
				if _eccec := d.DecodeElement(_ffaca.MirrorIndents, &_cabfe); _eccec != nil {
					return _eccec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressOverlap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressOverlap"}:
				_ffaca.SuppressOverlap = NewCT_OnOff()
				if _gfdfc := d.DecodeElement(_ffaca.SuppressOverlap, &_cabfe); _gfdfc != nil {
					return _gfdfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_ffaca.Jc = NewCT_Jc()
				if _gccddd := d.DecodeElement(_ffaca.Jc, &_cabfe); _gccddd != nil {
					return _gccddd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_ffaca.TextDirection = NewCT_TextDirection()
				if _ceccfc := d.DecodeElement(_ffaca.TextDirection, &_cabfe); _ceccfc != nil {
					return _ceccfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textAlignment"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textAlignment"}:
				_ffaca.TextAlignment = NewCT_TextAlignment()
				if _dbea := d.DecodeElement(_ffaca.TextAlignment, &_cabfe); _dbea != nil {
					return _dbea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textboxTightWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textboxTightWrap"}:
				_ffaca.TextboxTightWrap = NewCT_TextboxTightWrap()
				if _faedg := d.DecodeElement(_ffaca.TextboxTightWrap, &_cabfe); _faedg != nil {
					return _faedg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outlineLvl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outlineLvl"}:
				_ffaca.OutlineLvl = NewCT_DecimalNumber()
				if _gddea := d.DecodeElement(_ffaca.OutlineLvl, &_cabfe); _gddea != nil {
					return _gddea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divId"}:
				_ffaca.DivId = NewCT_DecimalNumber()
				if _bagfcgc := d.DecodeElement(_ffaca.DivId, &_cabfe); _bagfcgc != nil {
					return _bagfcgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_ffaca.CnfStyle = NewCT_Cnf()
				if _gcdcd := d.DecodeElement(_ffaca.CnfStyle, &_cabfe); _gcdcd != nil {
					return _gcdcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPrChange"}:
				_ffaca.PPrChange = NewCT_PPrChange()
				if _dgaae := d.DecodeElement(_ffaca.PPrChange, &_cabfe); _dgaae != nil {
					return _dgaae
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_PPrGeneral \u0025v", _cabfe.Name)
				if _eaab := d.Skip(); _eaab != nil {
					return _eaab
				}
			}
		case _d.EndElement:
			break _fbfgd
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_TrackChangeRange and its children
func (_gfdddf *CT_TrackChangeRange) Validate() error {
	return _gfdddf.ValidateWithPath("CT_TrackChangeRange")
}
func NewEG_ContentRunContentBase() *EG_ContentRunContentBase {
	_fgfea := &EG_ContentRunContentBase{}
	return _fgfea
}

type ST_Lock byte

func (_bceff *CT_Tabs) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gebbdc:
	for {
		_gecccb, _dggfb := d.Token()
		if _dggfb != nil {
			return _dggfb
		}
		switch _dgcdg := _gecccb.(type) {
		case _d.StartElement:
			switch _dgcdg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tab"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tab"}:
				_gfedfg := NewCT_TabStop()
				if _ceeba := d.DecodeElement(_gfedfg, &_dgcdg); _ceeba != nil {
					return _ceeba
				}
				_bceff.Tab = append(_bceff.Tab, _gfedfg)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Tabs\u0020\u0025v", _dgcdg.Name)
				if _fdfbcc := d.Skip(); _fdfbcc != nil {
					return _fdfbcc
				}
			}
		case _d.EndElement:
			break _gebbdc
		case _d.CharData:
		}
	}
	return nil
}
func (_daedb ST_Zoom) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_daedb.String(), start)
}

// ValidateWithPath validates the CT_Highlight and its children, prefixing error messages with path
func (_fedbb *CT_Highlight) ValidateWithPath(path string) error {
	if _fedbb.ValAttr == ST_HighlightColorUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ceefg := _fedbb.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _ceefg != nil {
		return _ceefg
	}
	return nil
}

// Validate validates the CT_PaperSource and its children
func (_ceddf *CT_PaperSource) Validate() error { return _ceddf.ValidateWithPath("CT_PaperSource") }

type ST_TblOverlap byte

func (_ggbdb *WdCT_EffectExtent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "l"}, Value: _b.Sprintf("\u0025v", _ggbdb.LAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "t"}, Value: _b.Sprintf("\u0025v", _ggbdb.TAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r"}, Value: _b.Sprintf("\u0025v", _ggbdb.RAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "b"}, Value: _b.Sprintf("\u0025v", _ggbdb.BAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	WdST_AlignHUnset   WdST_AlignH = 0
	WdST_AlignHLeft    WdST_AlignH = 1
	WdST_AlignHRight   WdST_AlignH = 2
	WdST_AlignHCenter  WdST_AlignH = 3
	WdST_AlignHInside  WdST_AlignH = 4
	WdST_AlignHOutside WdST_AlignH = 5
)

// Validate validates the CT_LineNumber and its children
func (_fcfgc *CT_LineNumber) Validate() error { return _fcfgc.ValidateWithPath("CT_LineNumber") }

const (
	ST_FrameLayoutUnset ST_FrameLayout = 0
	ST_FrameLayoutRows  ST_FrameLayout = 1
	ST_FrameLayoutCols  ST_FrameLayout = 2
	ST_FrameLayoutNone  ST_FrameLayout = 3
)

type CT_FtnProps struct {

	// Footnote Placement
	Pos *CT_FtnPos

	// Footnote Numbering Format
	NumFmt *CT_NumFmt

	// Footnote and Endnote Numbering Starting Value
	NumStart *CT_DecimalNumber

	// Footnote and Endnote Numbering Restart Location
	NumRestart *CT_NumRestart
}

func (_caggfg ST_RubyAlign) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_ggdeb := _d.Attr{}
	_ggdeb.Name = name
	switch _caggfg {
	case ST_RubyAlignUnset:
		_ggdeb.Value = ""
	case ST_RubyAlignCenter:
		_ggdeb.Value = "center"
	case ST_RubyAlignDistributeLetter:
		_ggdeb.Value = "distributeLetter"
	case ST_RubyAlignDistributeSpace:
		_ggdeb.Value = "distributeSpace"
	case ST_RubyAlignLeft:
		_ggdeb.Value = "left"
	case ST_RubyAlignRight:
		_ggdeb.Value = "right"
	case ST_RubyAlignRightVertical:
		_ggdeb.Value = "rightVertical"
	}
	return _ggdeb, nil
}
func NewEG_CellMarkupElements() *EG_CellMarkupElements {
	_eefegc := &EG_CellMarkupElements{}
	return _eefegc
}
func (_cgggg ST_BrType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cgggg.String(), start)
}
func (_fccgb ST_DocPartType) ValidateWithPath(path string) error {
	switch _fccgb {
	case 0, 1, 2, 3, 4, 5, 6, 7:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fccgb))
	}
	return nil
}
func NewCT_TextScale() *CT_TextScale        { _facag := &CT_TextScale{}; return _facag }
func (_cfgecc WdST_AlignH) Validate() error { return _cfgecc.ValidateWithPath("") }
func (_daefbbc ST_ChapterSep) ValidateWithPath(path string) error {
	switch _daefbbc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_daefbbc))
	}
	return nil
}

type CT_PPr struct {

	// Referenced Paragraph Style
	PStyle *CT_String

	// Keep Paragraph With Next Paragraph
	KeepNext *CT_OnOff

	// Keep All Lines On One Page
	KeepLines *CT_OnOff

	// Start Paragraph on Next Page
	PageBreakBefore *CT_OnOff

	// Text Frame Properties
	FramePr *CT_FramePr

	// Allow First/Last Line to Display on a Separate Page
	WidowControl *CT_OnOff

	// Numbering Definition Instance Reference
	NumPr *CT_NumPr

	// Suppress Line Numbers for Paragraph
	SuppressLineNumbers *CT_OnOff

	// Paragraph Borders
	PBdr *CT_PBdr

	// Paragraph Shading
	Shd *CT_Shd

	// Set of Custom Tab Stops
	Tabs *CT_Tabs

	// Suppress Hyphenation for Paragraph
	SuppressAutoHyphens *CT_OnOff

	// Use East Asian Typography Rules for First and Last Character per Line
	Kinsoku *CT_OnOff

	// Allow Line Breaking At Character Level
	WordWrap *CT_OnOff

	// Allow Punctuation to Extend Past Text Extents
	OverflowPunct *CT_OnOff

	// Compress Punctuation at Start of a Line
	TopLinePunct *CT_OnOff

	// Automatically Adjust Spacing of Latin and East Asian Text
	AutoSpaceDE *CT_OnOff

	// Automatically Adjust Spacing of East Asian Text and Numbers
	AutoSpaceDN *CT_OnOff

	// Right to Left Paragraph Layout
	Bidi *CT_OnOff

	// Automatically Adjust Right Indent When Using Document Grid
	AdjustRightInd *CT_OnOff

	// Use Document Grid Settings for Inter-Line Paragraph Spacing
	SnapToGrid *CT_OnOff

	// Spacing Between Lines and Above/Below Paragraph
	Spacing *CT_Spacing

	// Paragraph Indentation
	Ind *CT_Ind

	// Ignore Spacing Above and Below When Using Identical Styles
	ContextualSpacing *CT_OnOff

	// Use Left/Right Indents as Inside/Outside Indents
	MirrorIndents *CT_OnOff

	// Prevent Text Frames From Overlapping
	SuppressOverlap *CT_OnOff

	// Paragraph Alignment
	Jc *CT_Jc

	// Paragraph Text Flow Direction
	TextDirection *CT_TextDirection

	// Vertical Character Alignment on Line
	TextAlignment *CT_TextAlignment

	// Allow Surrounding Paragraphs to Tight Wrap to Text Box Contents
	TextboxTightWrap *CT_TextboxTightWrap

	// Associated Outline Level
	OutlineLvl *CT_DecimalNumber

	// Associated HTML div ID
	DivId *CT_DecimalNumber

	// Paragraph Conditional Formatting
	CnfStyle  *CT_Cnf
	RPr       *CT_ParaRPr
	SectPr    *CT_SectPr
	PPrChange *CT_PPrChange
}

func NewCT_TcPr() *CT_TcPr { _feeggb := &CT_TcPr{}; return _feeggb }
func (_dbaec *CT_Empty) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_FFStatusText and its children, prefixing error messages with path
func (_ccca *CT_FFStatusText) ValidateWithPath(path string) error {
	if _gcbf := _ccca.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _gcbf != nil {
		return _gcbf
	}
	return nil
}

// ValidateWithPath validates the CT_PPrDefault and its children, prefixing error messages with path
func (_cfgdc *CT_PPrDefault) ValidateWithPath(path string) error {
	if _cfgdc.PPr != nil {
		if _facdd := _cfgdc.PPr.ValidateWithPath(path + "\u002fPPr"); _facdd != nil {
			return _facdd
		}
	}
	return nil
}
func NewCT_Jc() *CT_Jc { _fgfeb := &CT_Jc{}; _fgfeb.ValAttr = ST_Jc(1); return _fgfeb }

// ValidateWithPath validates the CT_SdtPrChoice and its children, prefixing error messages with path
func (_dceaf *CT_SdtPrChoice) ValidateWithPath(path string) error {
	if _dceaf.Equation != nil {
		if _bcfab := _dceaf.Equation.ValidateWithPath(path + "\u002fEquation"); _bcfab != nil {
			return _bcfab
		}
	}
	if _dceaf.ComboBox != nil {
		if _ffbdfa := _dceaf.ComboBox.ValidateWithPath(path + "\u002fComboBox"); _ffbdfa != nil {
			return _ffbdfa
		}
	}
	if _dceaf.Date != nil {
		if _dfdab := _dceaf.Date.ValidateWithPath(path + "\u002fDate"); _dfdab != nil {
			return _dfdab
		}
	}
	if _dceaf.DocPartObj != nil {
		if _bceae := _dceaf.DocPartObj.ValidateWithPath(path + "/DocPartObj"); _bceae != nil {
			return _bceae
		}
	}
	if _dceaf.DocPartList != nil {
		if _ecbfb := _dceaf.DocPartList.ValidateWithPath(path + "\u002fDocPartList"); _ecbfb != nil {
			return _ecbfb
		}
	}
	if _dceaf.DropDownList != nil {
		if _fggae := _dceaf.DropDownList.ValidateWithPath(path + "\u002fDropDownList"); _fggae != nil {
			return _fggae
		}
	}
	if _dceaf.Picture != nil {
		if _fcebg := _dceaf.Picture.ValidateWithPath(path + "\u002fPicture"); _fcebg != nil {
			return _fcebg
		}
	}
	if _dceaf.RichText != nil {
		if _cgfge := _dceaf.RichText.ValidateWithPath(path + "\u002fRichText"); _cgfge != nil {
			return _cgfge
		}
	}
	if _dceaf.Text != nil {
		if _acddba := _dceaf.Text.ValidateWithPath(path + "\u002fText"); _acddba != nil {
			return _acddba
		}
	}
	if _dceaf.Citation != nil {
		if _bdgec := _dceaf.Citation.ValidateWithPath(path + "\u002fCitation"); _bdgec != nil {
			return _bdgec
		}
	}
	if _dceaf.Group != nil {
		if _gaeee := _dceaf.Group.ValidateWithPath(path + "\u002fGroup"); _gaeee != nil {
			return _gaeee
		}
	}
	if _dceaf.Bibliography != nil {
		if _cdfag := _dceaf.Bibliography.ValidateWithPath(path + "\u002fBibliography"); _cdfag != nil {
			return _cdfag
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_efddc *CT_Rel) ValidateWithPath(path string) error { return nil }
func (_bfgd *CT_CustomXmlPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bfgd.Placeholder != nil {
		_afga := _d.StartElement{Name: _d.Name{Local: "w:placeholder"}}
		e.EncodeElement(_bfgd.Placeholder, _afga)
	}
	if _bfgd.Attr != nil {
		_agag := _d.StartElement{Name: _d.Name{Local: "w:attr"}}
		for _, _ccbe := range _bfgd.Attr {
			e.EncodeElement(_ccbe, _agag)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dfg *CT_CalendarType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _feaf := range start.Attr {
		if _feaf.Name.Local == "val" {
			_dfg.ValAttr.UnmarshalXMLAttr(_feaf)
			continue
		}
	}
	for {
		_dgbf, _gbce := d.Token()
		if _gbce != nil {
			return _b.Errorf("parsing CT_CalendarType:\u0020\u0025s", _gbce)
		}
		if _acbe, _faeb := _dgbf.(_d.EndElement); _faeb && _acbe.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the WdCT_EffectExtent and its children, prefixing error messages with path
func (_dedaff *WdCT_EffectExtent) ValidateWithPath(path string) error {
	if _gdfdf := _dedaff.LAttr.ValidateWithPath(path + "\u002fLAttr"); _gdfdf != nil {
		return _gdfdf
	}
	if _cbbaa := _dedaff.TAttr.ValidateWithPath(path + "\u002fTAttr"); _cbbaa != nil {
		return _cbbaa
	}
	if _dabac := _dedaff.RAttr.ValidateWithPath(path + "\u002fRAttr"); _dabac != nil {
		return _dabac
	}
	if _ebeeg := _dedaff.BAttr.ValidateWithPath(path + "\u002fBAttr"); _ebeeg != nil {
		return _ebeeg
	}
	return nil
}

type ST_PageOrientation byte

// Validate validates the CT_Sym and its children
func (_fbefe *CT_Sym) Validate() error { return _fbefe.ValidateWithPath("CT_Sym") }
func (_aafeaf ST_ObjectDrawAspect) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_aafeaf.String(), start)
}

// ValidateWithPath validates the Fonts and its children, prefixing error messages with path
func (_bafgg *Fonts) ValidateWithPath(path string) error {
	if _gecdc := _bafgg.CT_FontsList.ValidateWithPath(path); _gecdc != nil {
		return _gecdc
	}
	return nil
}

// Validate validates the CT_Style and its children
func (_bgbbee *CT_Style) Validate() error { return _bgbbee.ValidateWithPath("CT_Style") }
func (_caaee *CT_Text) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gdcbc := range start.Attr {
		if _gdcbc.Name.Space == "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace" && _gdcbc.Name.Local == "space" {
			_gbfgcb, _cbcfb := _gdcbc.Value, error(nil)
			if _cbcfb != nil {
				return _cbcfb
			}
			_caaee.SpaceAttr = &_gbfgcb
			continue
		}
	}
	for {
		_fdfgb, _adcee := d.Token()
		if _adcee != nil {
			return _b.Errorf("parsing\u0020CT_Text:\u0020\u0025s", _adcee)
		}
		if _bdbbd, _gebag := _fdfgb.(_d.CharData); _gebag {
			_caaee.Content = string(_bdbbd)
		}
		if _gbgbc, _egbgg := _fdfgb.(_d.EndElement); _egbgg && _gbgbc.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Kinsoku() *CT_Kinsoku { _gbggd := &CT_Kinsoku{}; return _gbggd }
func (_acdda ST_FtnPos) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gdfbgf := _d.Attr{}
	_gdfbgf.Name = name
	switch _acdda {
	case ST_FtnPosUnset:
		_gdfbgf.Value = ""
	case ST_FtnPosPageBottom:
		_gdfbgf.Value = "pageBottom"
	case ST_FtnPosBeneathText:
		_gdfbgf.Value = "beneathText"
	case ST_FtnPosSectEnd:
		_gdfbgf.Value = "sectEnd"
	case ST_FtnPosDocEnd:
		_gdfbgf.Value = "docEnd"
	}
	return _gdfbgf, nil
}
func (_cegbcb ST_FrameLayout) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gfggdd := _d.Attr{}
	_gfggdd.Name = name
	switch _cegbcb {
	case ST_FrameLayoutUnset:
		_gfggdd.Value = ""
	case ST_FrameLayoutRows:
		_gfggdd.Value = "rows"
	case ST_FrameLayoutCols:
		_gfggdd.Value = "cols"
	case ST_FrameLayoutNone:
		_gfggdd.Value = "none"
	}
	return _gfggdd, nil
}
func (_cedgf *CT_SdtDocPart) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gadfa:
	for {
		_ffgaa, _bedab := d.Token()
		if _bedab != nil {
			return _bedab
		}
		switch _ddfad := _ffgaa.(type) {
		case _d.StartElement:
			switch _ddfad.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartGallery"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartGallery"}:
				_cedgf.DocPartGallery = NewCT_String()
				if _efdec := d.DecodeElement(_cedgf.DocPartGallery, &_ddfad); _efdec != nil {
					return _efdec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartCategory"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartCategory"}:
				_cedgf.DocPartCategory = NewCT_String()
				if _bccdda := d.DecodeElement(_cedgf.DocPartCategory, &_ddfad); _bccdda != nil {
					return _bccdda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartUnique"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartUnique"}:
				_cedgf.DocPartUnique = NewCT_OnOff()
				if _abdca := d.DecodeElement(_cedgf.DocPartUnique, &_ddfad); _abdca != nil {
					return _abdca
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_SdtDocPart \u0025v", _ddfad.Name)
				if _gdggg := d.Skip(); _gdggg != nil {
					return _gdggg
				}
			}
		case _d.EndElement:
			break _gadfa
		case _d.CharData:
		}
	}
	return nil
}
func (_aeabgf *ST_ObjectUpdateMode) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_feacg, _aagfc := d.Token()
	if _aagfc != nil {
		return _aagfc
	}
	if _gddgag, _gfcfg := _feacg.(_d.EndElement); _gfcfg && _gddgag.Name == start.Name {
		*_aeabgf = 1
		return nil
	}
	if _gbcfc, _afeega := _feacg.(_d.CharData); !_afeega {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _feacg)
	} else {
		switch string(_gbcfc) {
		case "":
			*_aeabgf = 0
		case "always":
			*_aeabgf = 1
		case "onCall":
			*_aeabgf = 2
		}
	}
	_feacg, _aagfc = d.Token()
	if _aagfc != nil {
		return _aagfc
	}
	if _edfdg, _cefagg := _feacg.(_d.EndElement); _cefagg && _edfdg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _feacg)
}
func (_eafdg ST_TabTlc) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gcaaf := _d.Attr{}
	_gcaaf.Name = name
	switch _eafdg {
	case ST_TabTlcUnset:
		_gcaaf.Value = ""
	case ST_TabTlcNone:
		_gcaaf.Value = "none"
	case ST_TabTlcDot:
		_gcaaf.Value = "dot"
	case ST_TabTlcHyphen:
		_gcaaf.Value = "hyphen"
	case ST_TabTlcUnderscore:
		_gcaaf.Value = "underscore"
	case ST_TabTlcHeavy:
		_gcaaf.Value = "heavy"
	case ST_TabTlcMiddleDot:
		_gcaaf.Value = "middleDot"
	}
	return _gcaaf, nil
}

// ValidateWithPath validates the WdCT_PosV and its children, prefixing error messages with path
func (_gceff *WdCT_PosV) ValidateWithPath(path string) error {
	if _gceff.RelativeFromAttr == WdST_RelFromVUnset {
		return _b.Errorf("%s\u002fRelativeFromAttr is\u0020a\u0020mandatory\u0020field", path)
	}
	if _gdgaa := _gceff.RelativeFromAttr.ValidateWithPath(path + "\u002fRelativeFromAttr"); _gdgaa != nil {
		return _gdgaa
	}
	if _cbdec := _gceff.Choice.ValidateWithPath(path + "\u002fChoice"); _cbdec != nil {
		return _cbdec
	}
	return nil
}

type WdCT_PosHChoice struct {
	Align     WdST_AlignH
	PosOffset *int32
}

func (_bdfe *CT_SdtEndPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bdfe.RPr != nil {
		_gegde := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		for _, _dfbbe := range _bdfe.RPr {
			e.EncodeElement(_dfbbe, _gegde)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dggea *CT_ObjectLink) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dggea.UpdateModeAttr = ST_ObjectUpdateMode(1)
	for _, _ebcee := range start.Attr {
		if _ebcee.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _ebcee.Name.Local == "id" || _ebcee.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _ebcee.Name.Local == "id" {
			_adgcec, _cfebg := _ebcee.Value, error(nil)
			if _cfebg != nil {
				return _cfebg
			}
			_dggea.IdAttr = _adgcec
			continue
		}
		if _ebcee.Name.Local == "updateMode" {
			_dggea.UpdateModeAttr.UnmarshalXMLAttr(_ebcee)
			continue
		}
		if _ebcee.Name.Local == "lockedField" {
			_fbefb, _caafc := ParseUnionST_OnOff(_ebcee.Value)
			if _caafc != nil {
				return _caafc
			}
			_dggea.LockedFieldAttr = &_fbefb
			continue
		}
		if _ebcee.Name.Local == "drawAspect" {
			_dggea.DrawAspectAttr.UnmarshalXMLAttr(_ebcee)
			continue
		}
		if _ebcee.Name.Local == "progId" {
			_gedfb, _bgbaa := _ebcee.Value, error(nil)
			if _bgbaa != nil {
				return _bgbaa
			}
			_dggea.ProgIdAttr = &_gedfb
			continue
		}
		if _ebcee.Name.Local == "shapeId" {
			_afda, _aecdf := _ebcee.Value, error(nil)
			if _aecdf != nil {
				return _aecdf
			}
			_dggea.ShapeIdAttr = &_afda
			continue
		}
		if _ebcee.Name.Local == "fieldCodes" {
			_fbgefe, _bbgcc := _ebcee.Value, error(nil)
			if _bbgcc != nil {
				return _bbgcc
			}
			_dggea.FieldCodesAttr = &_fbgefe
			continue
		}
	}
	for {
		_fgdbd, _edffc := d.Token()
		if _edffc != nil {
			return _b.Errorf("parsing\u0020CT_ObjectLink:\u0020\u0025s", _edffc)
		}
		if _aacba, _ceec := _fgdbd.(_d.EndElement); _ceec && _aacba.Name == start.Name {
			break
		}
	}
	return nil
}
func (_feagge *CT_View) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dgedc, _bgeaed := _feagge.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _bgeaed != nil {
		return _bgeaed
	}
	start.Attr = append(start.Attr, _dgedc)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_CustomXmlRow struct {

	// Custom XML Element Namespace
	UriAttr *string

	// Custom XML Element Name
	ElementAttr string

	// Custom XML Element Properties
	CustomXmlPr          *CT_CustomXmlPr
	EG_ContentRowContent []*EG_ContentRowContent
}

func (_abeac *CT_ParaRPrChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_abeac.RPr = NewCT_ParaRPrOriginal()
	for _, _cbbeb := range start.Attr {
		if _cbbeb.Name.Local == "author" {
			_bcdcg, _caaaf := _cbbeb.Value, error(nil)
			if _caaaf != nil {
				return _caaaf
			}
			_abeac.AuthorAttr = _bcdcg
			continue
		}
		if _cbbeb.Name.Local == "date" {
			_efcga, _bgfebb := ParseStdlibTime(_cbbeb.Value)
			if _bgfebb != nil {
				return _bgfebb
			}
			_abeac.DateAttr = &_efcga
			continue
		}
		if _cbbeb.Name.Local == "id" {
			_dggeg, _dcdcd := _dd.ParseInt(_cbbeb.Value, 10, 64)
			if _dcdcd != nil {
				return _dcdcd
			}
			_abeac.IdAttr = _dggeg
			continue
		}
	}
_aeacc:
	for {
		_cbcfd, _ccfgf := d.Token()
		if _ccfgf != nil {
			return _ccfgf
		}
		switch _fcgad := _cbcfd.(type) {
		case _d.StartElement:
			switch _fcgad.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				if _bbbaa := d.DecodeElement(_abeac.RPr, &_fcgad); _bbbaa != nil {
					return _bbbaa
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_ParaRPrChange\u0020\u0025v", _fcgad.Name)
				if _ddgcd := d.Skip(); _ddgcd != nil {
					return _ddgcd
				}
			}
		case _d.EndElement:
			break _aeacc
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TrPrChange and its children, prefixing error messages with path
func (_bgfad *CT_TrPrChange) ValidateWithPath(path string) error {
	if _gegdb := _bgfad.TrPr.ValidateWithPath(path + "\u002fTrPr"); _gegdb != nil {
		return _gegdb
	}
	return nil
}
func (_dcfeaa *TxbxContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dcfeaa.CT_TxbxContent = *NewCT_TxbxContent()
_dfceaeb:
	for {
		_dbaae, _degecf := d.Token()
		if _degecf != nil {
			return _degecf
		}
		switch _fagfg := _dbaae.(type) {
		case _d.StartElement:
			switch _fagfg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_ccdab := NewCT_AltChunk()
				if _ecece := d.DecodeElement(_ccdab, &_fagfg); _ecece != nil {
					return _ecece
				}
				_dcfeaa.AltChunk = append(_dcfeaa.AltChunk, _ccdab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_gaeaff := NewEG_ContentBlockContent()
				_gaeaff.CustomXml = NewCT_CustomXmlBlock()
				if _ecbafa := d.DecodeElement(_gaeaff.CustomXml, &_fagfg); _ecbafa != nil {
					return _ecbafa
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _gaeaff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_efbad := NewEG_ContentBlockContent()
				_efbad.Sdt = NewCT_SdtBlock()
				if _cfgfae := d.DecodeElement(_efbad.Sdt, &_fagfg); _cfgfae != nil {
					return _cfgfae
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _efbad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_dadfd := NewEG_ContentBlockContent()
				_bbfef := NewCT_P()
				if _fbbfg := d.DecodeElement(_bbfef, &_fagfg); _fbbfg != nil {
					return _fbbfg
				}
				_dadfd.P = append(_dadfd.P, _bbfef)
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _dadfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_dfgcea := NewEG_ContentBlockContent()
				_affgdc := NewCT_Tbl()
				if _beggfg := d.DecodeElement(_affgdc, &_fagfg); _beggfg != nil {
					return _beggfg
				}
				_dfgcea.Tbl = append(_dfgcea.Tbl, _affgdc)
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _dfgcea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_efebb := NewEG_ContentBlockContent()
				_bafcgc := NewEG_RunLevelElts()
				_bafcgc.ProofErr = NewCT_ProofErr()
				if _agbcb := d.DecodeElement(_bafcgc.ProofErr, &_fagfg); _agbcb != nil {
					return _agbcb
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _efebb)
				_efebb.EG_RunLevelElts = append(_efebb.EG_RunLevelElts, _bafcgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_gdbcfc := NewEG_ContentBlockContent()
				_fgggb := NewEG_RunLevelElts()
				_fgggb.PermStart = NewCT_PermStart()
				if _gddaf := d.DecodeElement(_fgggb.PermStart, &_fagfg); _gddaf != nil {
					return _gddaf
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _gdbcfc)
				_gdbcfc.EG_RunLevelElts = append(_gdbcfc.EG_RunLevelElts, _fgggb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_fabebd := NewEG_ContentBlockContent()
				_afaeb := NewEG_RunLevelElts()
				_afaeb.PermEnd = NewCT_Perm()
				if _ddcec := d.DecodeElement(_afaeb.PermEnd, &_fagfg); _ddcec != nil {
					return _ddcec
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _fabebd)
				_fabebd.EG_RunLevelElts = append(_fabebd.EG_RunLevelElts, _afaeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_edgab := NewEG_ContentBlockContent()
				_edgfbg := NewEG_RunLevelElts()
				_edgfbg.Ins = NewCT_RunTrackChange()
				if _adbfd := d.DecodeElement(_edgfbg.Ins, &_fagfg); _adbfd != nil {
					return _adbfd
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _edgab)
				_edgab.EG_RunLevelElts = append(_edgab.EG_RunLevelElts, _edgfbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_fdebe := NewEG_ContentBlockContent()
				_fedae := NewEG_RunLevelElts()
				_fedae.Del = NewCT_RunTrackChange()
				if _ddfeee := d.DecodeElement(_fedae.Del, &_fagfg); _ddfeee != nil {
					return _ddfeee
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _fdebe)
				_fdebe.EG_RunLevelElts = append(_fdebe.EG_RunLevelElts, _fedae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_cdbbbe := NewEG_ContentBlockContent()
				_cgbae := NewEG_RunLevelElts()
				_cgbae.MoveFrom = NewCT_RunTrackChange()
				if _ddafgcg := d.DecodeElement(_cgbae.MoveFrom, &_fagfg); _ddafgcg != nil {
					return _ddafgcg
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _cdbbbe)
				_cdbbbe.EG_RunLevelElts = append(_cdbbbe.EG_RunLevelElts, _cgbae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_ccbcgd := NewEG_ContentBlockContent()
				_gbadd := NewEG_RunLevelElts()
				_gbadd.MoveTo = NewCT_RunTrackChange()
				if _bdgfe := d.DecodeElement(_gbadd.MoveTo, &_fagfg); _bdgfe != nil {
					return _bdgfe
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _ccbcgd)
				_ccbcgd.EG_RunLevelElts = append(_ccbcgd.EG_RunLevelElts, _gbadd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_acbdcg := NewEG_ContentBlockContent()
				_bdbgf := NewEG_RunLevelElts()
				_cfcgc := NewEG_RangeMarkupElements()
				_cfcgc.BookmarkStart = NewCT_Bookmark()
				if _eddee := d.DecodeElement(_cfcgc.BookmarkStart, &_fagfg); _eddee != nil {
					return _eddee
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _acbdcg)
				_acbdcg.EG_RunLevelElts = append(_acbdcg.EG_RunLevelElts, _bdbgf)
				_bdbgf.EG_RangeMarkupElements = append(_bdbgf.EG_RangeMarkupElements, _cfcgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_gbffe := NewEG_ContentBlockContent()
				_gecfgg := NewEG_RunLevelElts()
				_gecade := NewEG_RangeMarkupElements()
				_gecade.BookmarkEnd = NewCT_MarkupRange()
				if _baabe := d.DecodeElement(_gecade.BookmarkEnd, &_fagfg); _baabe != nil {
					return _baabe
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _gbffe)
				_gbffe.EG_RunLevelElts = append(_gbffe.EG_RunLevelElts, _gecfgg)
				_gecfgg.EG_RangeMarkupElements = append(_gecfgg.EG_RangeMarkupElements, _gecade)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fgdgef := NewEG_ContentBlockContent()
				_adaab := NewEG_RunLevelElts()
				_ccagg := NewEG_RangeMarkupElements()
				_ccagg.MoveFromRangeStart = NewCT_MoveBookmark()
				if _cdcfcc := d.DecodeElement(_ccagg.MoveFromRangeStart, &_fagfg); _cdcfcc != nil {
					return _cdcfcc
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _fgdgef)
				_fgdgef.EG_RunLevelElts = append(_fgdgef.EG_RunLevelElts, _adaab)
				_adaab.EG_RangeMarkupElements = append(_adaab.EG_RangeMarkupElements, _ccagg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_eaddd := NewEG_ContentBlockContent()
				_afcfe := NewEG_RunLevelElts()
				_dgbac := NewEG_RangeMarkupElements()
				_dgbac.MoveFromRangeEnd = NewCT_MarkupRange()
				if _gdbggg := d.DecodeElement(_dgbac.MoveFromRangeEnd, &_fagfg); _gdbggg != nil {
					return _gdbggg
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _eaddd)
				_eaddd.EG_RunLevelElts = append(_eaddd.EG_RunLevelElts, _afcfe)
				_afcfe.EG_RangeMarkupElements = append(_afcfe.EG_RangeMarkupElements, _dgbac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_bfcbc := NewEG_ContentBlockContent()
				_addfg := NewEG_RunLevelElts()
				_gabfab := NewEG_RangeMarkupElements()
				_gabfab.MoveToRangeStart = NewCT_MoveBookmark()
				if _egcb := d.DecodeElement(_gabfab.MoveToRangeStart, &_fagfg); _egcb != nil {
					return _egcb
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _bfcbc)
				_bfcbc.EG_RunLevelElts = append(_bfcbc.EG_RunLevelElts, _addfg)
				_addfg.EG_RangeMarkupElements = append(_addfg.EG_RangeMarkupElements, _gabfab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_ggbdd := NewEG_ContentBlockContent()
				_dgadd := NewEG_RunLevelElts()
				_afdgec := NewEG_RangeMarkupElements()
				_afdgec.MoveToRangeEnd = NewCT_MarkupRange()
				if _bcceee := d.DecodeElement(_afdgec.MoveToRangeEnd, &_fagfg); _bcceee != nil {
					return _bcceee
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _ggbdd)
				_ggbdd.EG_RunLevelElts = append(_ggbdd.EG_RunLevelElts, _dgadd)
				_dgadd.EG_RangeMarkupElements = append(_dgadd.EG_RangeMarkupElements, _afdgec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_gcdba := NewEG_ContentBlockContent()
				_dagea := NewEG_RunLevelElts()
				_cccbea := NewEG_RangeMarkupElements()
				_cccbea.CommentRangeStart = NewCT_MarkupRange()
				if _ccfag := d.DecodeElement(_cccbea.CommentRangeStart, &_fagfg); _ccfag != nil {
					return _ccfag
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _gcdba)
				_gcdba.EG_RunLevelElts = append(_gcdba.EG_RunLevelElts, _dagea)
				_dagea.EG_RangeMarkupElements = append(_dagea.EG_RangeMarkupElements, _cccbea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_gdedbc := NewEG_ContentBlockContent()
				_bbefb := NewEG_RunLevelElts()
				_egadea := NewEG_RangeMarkupElements()
				_egadea.CommentRangeEnd = NewCT_MarkupRange()
				if _fdcgd := d.DecodeElement(_egadea.CommentRangeEnd, &_fagfg); _fdcgd != nil {
					return _fdcgd
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _gdedbc)
				_gdedbc.EG_RunLevelElts = append(_gdedbc.EG_RunLevelElts, _bbefb)
				_bbefb.EG_RangeMarkupElements = append(_bbefb.EG_RangeMarkupElements, _egadea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gggcg := NewEG_ContentBlockContent()
				_edfeee := NewEG_RunLevelElts()
				_bbcbfg := NewEG_RangeMarkupElements()
				_bbcbfg.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _eeefaf := d.DecodeElement(_bbcbfg.CustomXmlInsRangeStart, &_fagfg); _eeefaf != nil {
					return _eeefaf
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _gggcg)
				_gggcg.EG_RunLevelElts = append(_gggcg.EG_RunLevelElts, _edfeee)
				_edfeee.EG_RangeMarkupElements = append(_edfeee.EG_RangeMarkupElements, _bbcbfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_fdgcb := NewEG_ContentBlockContent()
				_ecfddf := NewEG_RunLevelElts()
				_dafbcd := NewEG_RangeMarkupElements()
				_dafbcd.CustomXmlInsRangeEnd = NewCT_Markup()
				if _daagb := d.DecodeElement(_dafbcd.CustomXmlInsRangeEnd, &_fagfg); _daagb != nil {
					return _daagb
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _fdgcb)
				_fdgcb.EG_RunLevelElts = append(_fdgcb.EG_RunLevelElts, _ecfddf)
				_ecfddf.EG_RangeMarkupElements = append(_ecfddf.EG_RangeMarkupElements, _dafbcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_aedagc := NewEG_ContentBlockContent()
				_abdee := NewEG_RunLevelElts()
				_caedfg := NewEG_RangeMarkupElements()
				_caedfg.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _ecefad := d.DecodeElement(_caedfg.CustomXmlDelRangeStart, &_fagfg); _ecefad != nil {
					return _ecefad
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _aedagc)
				_aedagc.EG_RunLevelElts = append(_aedagc.EG_RunLevelElts, _abdee)
				_abdee.EG_RangeMarkupElements = append(_abdee.EG_RangeMarkupElements, _caedfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fabdcf := NewEG_ContentBlockContent()
				_febgg := NewEG_RunLevelElts()
				_dffeab := NewEG_RangeMarkupElements()
				_dffeab.CustomXmlDelRangeEnd = NewCT_Markup()
				if _cccebc := d.DecodeElement(_dffeab.CustomXmlDelRangeEnd, &_fagfg); _cccebc != nil {
					return _cccebc
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _fabdcf)
				_fabdcf.EG_RunLevelElts = append(_fabdcf.EG_RunLevelElts, _febgg)
				_febgg.EG_RangeMarkupElements = append(_febgg.EG_RangeMarkupElements, _dffeab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_cfgefc := NewEG_ContentBlockContent()
				_dggcd := NewEG_RunLevelElts()
				_gafbda := NewEG_RangeMarkupElements()
				_gafbda.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _dagca := d.DecodeElement(_gafbda.CustomXmlMoveFromRangeStart, &_fagfg); _dagca != nil {
					return _dagca
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _cfgefc)
				_cfgefc.EG_RunLevelElts = append(_cfgefc.EG_RunLevelElts, _dggcd)
				_dggcd.EG_RangeMarkupElements = append(_dggcd.EG_RangeMarkupElements, _gafbda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_cfccec := NewEG_ContentBlockContent()
				_acbgab := NewEG_RunLevelElts()
				_cgaecd := NewEG_RangeMarkupElements()
				_cgaecd.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _bgffg := d.DecodeElement(_cgaecd.CustomXmlMoveFromRangeEnd, &_fagfg); _bgffg != nil {
					return _bgffg
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _cfccec)
				_cfccec.EG_RunLevelElts = append(_cfccec.EG_RunLevelElts, _acbgab)
				_acbgab.EG_RangeMarkupElements = append(_acbgab.EG_RangeMarkupElements, _cgaecd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_ddcbeb := NewEG_ContentBlockContent()
				_decgaf := NewEG_RunLevelElts()
				_ccaebbe := NewEG_RangeMarkupElements()
				_ccaebbe.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _dcgfba := d.DecodeElement(_ccaebbe.CustomXmlMoveToRangeStart, &_fagfg); _dcgfba != nil {
					return _dcgfba
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _ddcbeb)
				_ddcbeb.EG_RunLevelElts = append(_ddcbeb.EG_RunLevelElts, _decgaf)
				_decgaf.EG_RangeMarkupElements = append(_decgaf.EG_RangeMarkupElements, _ccaebbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_ecbdb := NewEG_ContentBlockContent()
				_bbgdg := NewEG_RunLevelElts()
				_adeaf := NewEG_RangeMarkupElements()
				_adeaf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _geaaf := d.DecodeElement(_adeaf.CustomXmlMoveToRangeEnd, &_fagfg); _geaaf != nil {
					return _geaaf
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _ecbdb)
				_ecbdb.EG_RunLevelElts = append(_ecbdb.EG_RunLevelElts, _bbgdg)
				_bbgdg.EG_RangeMarkupElements = append(_bbgdg.EG_RangeMarkupElements, _adeaf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_febdce := NewEG_ContentBlockContent()
				_cgagc := NewEG_RunLevelElts()
				_cdcccd := NewEG_MathContent()
				_cdcccd.OMathPara = _f.NewOMathPara()
				if _ddfefb := d.DecodeElement(_cdcccd.OMathPara, &_fagfg); _ddfefb != nil {
					return _ddfefb
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _febdce)
				_febdce.EG_RunLevelElts = append(_febdce.EG_RunLevelElts, _cgagc)
				_cgagc.EG_MathContent = append(_cgagc.EG_MathContent, _cdcccd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_aefaa := NewEG_ContentBlockContent()
				_ffdbf := NewEG_RunLevelElts()
				_feebf := NewEG_MathContent()
				_feebf.OMath = _f.NewOMath()
				if _cfgcd := d.DecodeElement(_feebf.OMath, &_fagfg); _cfgcd != nil {
					return _cfgcd
				}
				_dcfeaa.EG_ContentBlockContent = append(_dcfeaa.EG_ContentBlockContent, _aefaa)
				_aefaa.EG_RunLevelElts = append(_aefaa.EG_RunLevelElts, _ffdbf)
				_ffdbf.EG_MathContent = append(_ffdbf.EG_MathContent, _feebf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020TxbxContent\u0020\u0025v", _fagfg.Name)
				if _gbgfe := d.Skip(); _gbgfe != nil {
					return _gbgfe
				}
			}
		case _d.EndElement:
			break _dfceaeb
		case _d.CharData:
		}
	}
	return nil
}
func (_bfgbag *EG_ContentCellContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cabed:
	for {
		_cfgcf, _bfbcac := d.Token()
		if _bfbcac != nil {
			return _bfbcac
		}
		switch _dbecge := _cfgcf.(type) {
		case _d.StartElement:
			switch _dbecge.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tc"}:
				_fdgbgc := NewCT_Tc()
				if _bdddg := d.DecodeElement(_fdgbgc, &_dbecge); _bdddg != nil {
					return _bdddg
				}
				_bfgbag.Tc = append(_bfgbag.Tc, _fdgbgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_bfgbag.CustomXml = NewCT_CustomXmlCell()
				if _eedggd := d.DecodeElement(_bfgbag.CustomXml, &_dbecge); _eedggd != nil {
					return _eedggd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_bfgbag.Sdt = NewCT_SdtCell()
				if _ccagda := d.DecodeElement(_bfgbag.Sdt, &_dbecge); _ccagda != nil {
					return _ccagda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_cbgeb := NewEG_RunLevelElts()
				_cbgeb.ProofErr = NewCT_ProofErr()
				if _befgg := d.DecodeElement(_cbgeb.ProofErr, &_dbecge); _befgg != nil {
					return _befgg
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _cbgeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_bgadb := NewEG_RunLevelElts()
				_bgadb.PermStart = NewCT_PermStart()
				if _gffca := d.DecodeElement(_bgadb.PermStart, &_dbecge); _gffca != nil {
					return _gffca
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _bgadb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_agbec := NewEG_RunLevelElts()
				_agbec.PermEnd = NewCT_Perm()
				if _cefbb := d.DecodeElement(_agbec.PermEnd, &_dbecge); _cefbb != nil {
					return _cefbb
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _agbec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_addeg := NewEG_RunLevelElts()
				_addeg.Ins = NewCT_RunTrackChange()
				if _agacc := d.DecodeElement(_addeg.Ins, &_dbecge); _agacc != nil {
					return _agacc
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _addeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_agaaba := NewEG_RunLevelElts()
				_agaaba.Del = NewCT_RunTrackChange()
				if _aecgag := d.DecodeElement(_agaaba.Del, &_dbecge); _aecgag != nil {
					return _aecgag
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _agaaba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_fbfcgb := NewEG_RunLevelElts()
				_fbfcgb.MoveFrom = NewCT_RunTrackChange()
				if _gdcga := d.DecodeElement(_fbfcgb.MoveFrom, &_dbecge); _gdcga != nil {
					return _gdcga
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _fbfcgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_cdagca := NewEG_RunLevelElts()
				_cdagca.MoveTo = NewCT_RunTrackChange()
				if _cecee := d.DecodeElement(_cdagca.MoveTo, &_dbecge); _cecee != nil {
					return _cecee
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _cdagca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_dgabge := NewEG_RunLevelElts()
				_eaeecg := NewEG_RangeMarkupElements()
				_eaeecg.BookmarkStart = NewCT_Bookmark()
				if _dffbcg := d.DecodeElement(_eaeecg.BookmarkStart, &_dbecge); _dffbcg != nil {
					return _dffbcg
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _dgabge)
				_dgabge.EG_RangeMarkupElements = append(_dgabge.EG_RangeMarkupElements, _eaeecg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_aebbbg := NewEG_RunLevelElts()
				_aceaa := NewEG_RangeMarkupElements()
				_aceaa.BookmarkEnd = NewCT_MarkupRange()
				if _bebcg := d.DecodeElement(_aceaa.BookmarkEnd, &_dbecge); _bebcg != nil {
					return _bebcg
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _aebbbg)
				_aebbbg.EG_RangeMarkupElements = append(_aebbbg.EG_RangeMarkupElements, _aceaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_ccdfe := NewEG_RunLevelElts()
				_egedd := NewEG_RangeMarkupElements()
				_egedd.MoveFromRangeStart = NewCT_MoveBookmark()
				if _aafcde := d.DecodeElement(_egedd.MoveFromRangeStart, &_dbecge); _aafcde != nil {
					return _aafcde
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _ccdfe)
				_ccdfe.EG_RangeMarkupElements = append(_ccdfe.EG_RangeMarkupElements, _egedd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_ebege := NewEG_RunLevelElts()
				_gddddc := NewEG_RangeMarkupElements()
				_gddddc.MoveFromRangeEnd = NewCT_MarkupRange()
				if _ebfcd := d.DecodeElement(_gddddc.MoveFromRangeEnd, &_dbecge); _ebfcd != nil {
					return _ebfcd
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _ebege)
				_ebege.EG_RangeMarkupElements = append(_ebege.EG_RangeMarkupElements, _gddddc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_fdbbdg := NewEG_RunLevelElts()
				_cccefd := NewEG_RangeMarkupElements()
				_cccefd.MoveToRangeStart = NewCT_MoveBookmark()
				if _dffga := d.DecodeElement(_cccefd.MoveToRangeStart, &_dbecge); _dffga != nil {
					return _dffga
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _fdbbdg)
				_fdbbdg.EG_RangeMarkupElements = append(_fdbbdg.EG_RangeMarkupElements, _cccefd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_dabbd := NewEG_RunLevelElts()
				_aegbc := NewEG_RangeMarkupElements()
				_aegbc.MoveToRangeEnd = NewCT_MarkupRange()
				if _fabdb := d.DecodeElement(_aegbc.MoveToRangeEnd, &_dbecge); _fabdb != nil {
					return _fabdb
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _dabbd)
				_dabbd.EG_RangeMarkupElements = append(_dabbd.EG_RangeMarkupElements, _aegbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_edffd := NewEG_RunLevelElts()
				_ebfefd := NewEG_RangeMarkupElements()
				_ebfefd.CommentRangeStart = NewCT_MarkupRange()
				if _cegcd := d.DecodeElement(_ebfefd.CommentRangeStart, &_dbecge); _cegcd != nil {
					return _cegcd
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _edffd)
				_edffd.EG_RangeMarkupElements = append(_edffd.EG_RangeMarkupElements, _ebfefd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_bafefg := NewEG_RunLevelElts()
				_fcbeg := NewEG_RangeMarkupElements()
				_fcbeg.CommentRangeEnd = NewCT_MarkupRange()
				if _fadfg := d.DecodeElement(_fcbeg.CommentRangeEnd, &_dbecge); _fadfg != nil {
					return _fadfg
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _bafefg)
				_bafefg.EG_RangeMarkupElements = append(_bafefg.EG_RangeMarkupElements, _fcbeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gbfce := NewEG_RunLevelElts()
				_bccef := NewEG_RangeMarkupElements()
				_bccef.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _gfbggc := d.DecodeElement(_bccef.CustomXmlInsRangeStart, &_dbecge); _gfbggc != nil {
					return _gfbggc
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _gbfce)
				_gbfce.EG_RangeMarkupElements = append(_gbfce.EG_RangeMarkupElements, _bccef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_gaffcb := NewEG_RunLevelElts()
				_bdfca := NewEG_RangeMarkupElements()
				_bdfca.CustomXmlInsRangeEnd = NewCT_Markup()
				if _cdeae := d.DecodeElement(_bdfca.CustomXmlInsRangeEnd, &_dbecge); _cdeae != nil {
					return _cdeae
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _gaffcb)
				_gaffcb.EG_RangeMarkupElements = append(_gaffcb.EG_RangeMarkupElements, _bdfca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_geefb := NewEG_RunLevelElts()
				_acbfad := NewEG_RangeMarkupElements()
				_acbfad.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _fgacc := d.DecodeElement(_acbfad.CustomXmlDelRangeStart, &_dbecge); _fgacc != nil {
					return _fgacc
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _geefb)
				_geefb.EG_RangeMarkupElements = append(_geefb.EG_RangeMarkupElements, _acbfad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fcffcd := NewEG_RunLevelElts()
				_ebbfdg := NewEG_RangeMarkupElements()
				_ebbfdg.CustomXmlDelRangeEnd = NewCT_Markup()
				if _agdbb := d.DecodeElement(_ebbfdg.CustomXmlDelRangeEnd, &_dbecge); _agdbb != nil {
					return _agdbb
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _fcffcd)
				_fcffcd.EG_RangeMarkupElements = append(_fcffcd.EG_RangeMarkupElements, _ebbfdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_decga := NewEG_RunLevelElts()
				_cebef := NewEG_RangeMarkupElements()
				_cebef.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _bacddf := d.DecodeElement(_cebef.CustomXmlMoveFromRangeStart, &_dbecge); _bacddf != nil {
					return _bacddf
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _decga)
				_decga.EG_RangeMarkupElements = append(_decga.EG_RangeMarkupElements, _cebef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_fddeae := NewEG_RunLevelElts()
				_ggadc := NewEG_RangeMarkupElements()
				_ggadc.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _baced := d.DecodeElement(_ggadc.CustomXmlMoveFromRangeEnd, &_dbecge); _baced != nil {
					return _baced
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _fddeae)
				_fddeae.EG_RangeMarkupElements = append(_fddeae.EG_RangeMarkupElements, _ggadc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gbbgef := NewEG_RunLevelElts()
				_dabde := NewEG_RangeMarkupElements()
				_dabde.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _gcbgbc := d.DecodeElement(_dabde.CustomXmlMoveToRangeStart, &_dbecge); _gcbgbc != nil {
					return _gcbgbc
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _gbbgef)
				_gbbgef.EG_RangeMarkupElements = append(_gbbgef.EG_RangeMarkupElements, _dabde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_bfcebc := NewEG_RunLevelElts()
				_gffef := NewEG_RangeMarkupElements()
				_gffef.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _cgeeaa := d.DecodeElement(_gffef.CustomXmlMoveToRangeEnd, &_dbecge); _cgeeaa != nil {
					return _cgeeaa
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _bfcebc)
				_bfcebc.EG_RangeMarkupElements = append(_bfcebc.EG_RangeMarkupElements, _gffef)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_egebg := NewEG_RunLevelElts()
				_feecca := NewEG_MathContent()
				_feecca.OMathPara = _f.NewOMathPara()
				if _eeceb := d.DecodeElement(_feecca.OMathPara, &_dbecge); _eeceb != nil {
					return _eeceb
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _egebg)
				_egebg.EG_MathContent = append(_egebg.EG_MathContent, _feecca)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_bgacda := NewEG_RunLevelElts()
				_fggcf := NewEG_MathContent()
				_fggcf.OMath = _f.NewOMath()
				if _cccab := d.DecodeElement(_fggcf.OMath, &_dbecge); _cccab != nil {
					return _cccab
				}
				_bfgbag.EG_RunLevelElts = append(_bfgbag.EG_RunLevelElts, _bgacda)
				_bgacda.EG_MathContent = append(_bgacda.EG_MathContent, _fggcf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on EG_ContentCellContent\u0020\u0025v", _dbecge.Name)
				if _afaae := d.Skip(); _afaae != nil {
					return _afaae
				}
			}
		case _d.EndElement:
			break _cabed
		case _d.CharData:
		}
	}
	return nil
}

type CT_SdtContentRow struct {

	// Table Row
	Tr []*CT_Row

	// Row-Level Custom XML Element
	CustomXml *CT_CustomXmlRow

	// Row-Level Structured Document Tag
	Sdt             *CT_SdtRow
	EG_RunLevelElts []*EG_RunLevelElts
}

const (
	ST_MailMergeOdsoFMDFieldTypeUnset    ST_MailMergeOdsoFMDFieldType = 0
	ST_MailMergeOdsoFMDFieldTypeNull     ST_MailMergeOdsoFMDFieldType = 1
	ST_MailMergeOdsoFMDFieldTypeDbColumn ST_MailMergeOdsoFMDFieldType = 2
)

func (_bfcafd *CT_TblPPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ffffee := range start.Attr {
		if _ffffee.Name.Local == "leftFromText" {
			_eabgg, _efefd := ParseUnionST_TwipsMeasure(_ffffee.Value)
			if _efefd != nil {
				return _efefd
			}
			_bfcafd.LeftFromTextAttr = &_eabgg
			continue
		}
		if _ffffee.Name.Local == "rightFromText" {
			_cbbgfa, _fddbg := ParseUnionST_TwipsMeasure(_ffffee.Value)
			if _fddbg != nil {
				return _fddbg
			}
			_bfcafd.RightFromTextAttr = &_cbbgfa
			continue
		}
		if _ffffee.Name.Local == "topFromText" {
			_bfcfd, _fagfe := ParseUnionST_TwipsMeasure(_ffffee.Value)
			if _fagfe != nil {
				return _fagfe
			}
			_bfcafd.TopFromTextAttr = &_bfcfd
			continue
		}
		if _ffffee.Name.Local == "bottomFromText" {
			_gafgdg, _geeaba := ParseUnionST_TwipsMeasure(_ffffee.Value)
			if _geeaba != nil {
				return _geeaba
			}
			_bfcafd.BottomFromTextAttr = &_gafgdg
			continue
		}
		if _ffffee.Name.Local == "vertAnchor" {
			_bfcafd.VertAnchorAttr.UnmarshalXMLAttr(_ffffee)
			continue
		}
		if _ffffee.Name.Local == "horzAnchor" {
			_bfcafd.HorzAnchorAttr.UnmarshalXMLAttr(_ffffee)
			continue
		}
		if _ffffee.Name.Local == "tblpXSpec" {
			_bfcafd.TblpXSpecAttr.UnmarshalXMLAttr(_ffffee)
			continue
		}
		if _ffffee.Name.Local == "tblpX" {
			_ebdda, _cgefe := ParseUnionST_SignedTwipsMeasure(_ffffee.Value)
			if _cgefe != nil {
				return _cgefe
			}
			_bfcafd.TblpXAttr = &_ebdda
			continue
		}
		if _ffffee.Name.Local == "tblpYSpec" {
			_bfcafd.TblpYSpecAttr.UnmarshalXMLAttr(_ffffee)
			continue
		}
		if _ffffee.Name.Local == "tblpY" {
			_adagb, _bdeaga := ParseUnionST_SignedTwipsMeasure(_ffffee.Value)
			if _bdeaga != nil {
				return _bdeaga
			}
			_bfcafd.TblpYAttr = &_adagb
			continue
		}
	}
	for {
		_babcc, _gdfad := d.Token()
		if _gdfad != nil {
			return _b.Errorf("parsing\u0020CT_TblPPr:\u0020\u0025s", _gdfad)
		}
		if _febcbg, _cecdbg := _babcc.(_d.EndElement); _cecdbg && _febcbg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aagagd *CT_SdtDate) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fefca := range start.Attr {
		if _fefca.Name.Local == "fullDate" {
			_cddfef, _efbcb := ParseStdlibTime(_fefca.Value)
			if _efbcb != nil {
				return _efbcb
			}
			_aagagd.FullDateAttr = &_cddfef
			continue
		}
	}
_bccbc:
	for {
		_dcdab, _fdcgc := d.Token()
		if _fdcgc != nil {
			return _fdcgc
		}
		switch _ccggc := _dcdab.(type) {
		case _d.StartElement:
			switch _ccggc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dateFormat"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dateFormat"}:
				_aagagd.DateFormat = NewCT_String()
				if _aecdcc := d.DecodeElement(_aagagd.DateFormat, &_ccggc); _aecdcc != nil {
					return _aecdcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lid"}:
				_aagagd.Lid = NewCT_Lang()
				if _edfgb := d.DecodeElement(_aagagd.Lid, &_ccggc); _edfgb != nil {
					return _edfgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "storeMappedDataAs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "storeMappedDataAs"}:
				_aagagd.StoreMappedDataAs = NewCT_SdtDateMappingType()
				if _cfeggf := d.DecodeElement(_aagagd.StoreMappedDataAs, &_ccggc); _cfeggf != nil {
					return _cfeggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "calendar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "calendar"}:
				_aagagd.Calendar = NewCT_CalendarType()
				if _ccgdbg := d.DecodeElement(_aagagd.Calendar, &_ccggc); _ccgdbg != nil {
					return _ccgdbg
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_SdtDate\u0020\u0025v", _ccggc.Name)
				if _gfagec := d.Skip(); _gfagec != nil {
					return _gfagec
				}
			}
		case _d.EndElement:
			break _bccbc
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Zoom and its children, prefixing error messages with path
func (_agdag *CT_Zoom) ValidateWithPath(path string) error {
	if _fffdeb := _agdag.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fffdeb != nil {
		return _fffdeb
	}
	if _affedd := _agdag.PercentAttr.ValidateWithPath(path + "\u002fPercentAttr"); _affedd != nil {
		return _affedd
	}
	return nil
}
func NewCT_DocPartBehaviors() *CT_DocPartBehaviors { _afggc := &CT_DocPartBehaviors{}; return _afggc }

const (
	ST_RubyAlignUnset            ST_RubyAlign = 0
	ST_RubyAlignCenter           ST_RubyAlign = 1
	ST_RubyAlignDistributeLetter ST_RubyAlign = 2
	ST_RubyAlignDistributeSpace  ST_RubyAlign = 3
	ST_RubyAlignLeft             ST_RubyAlign = 4
	ST_RubyAlignRight            ST_RubyAlign = 5
	ST_RubyAlignRightVertical    ST_RubyAlign = 6
)

func (_ddaddb ST_JcTable) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_adfcd := _d.Attr{}
	_adfcd.Name = name
	switch _ddaddb {
	case ST_JcTableUnset:
		_adfcd.Value = ""
	case ST_JcTableCenter:
		_adfcd.Value = "center"
	case ST_JcTableEnd:
		_adfcd.Value = "end"
	case ST_JcTableLeft:
		_adfcd.Value = "left"
	case ST_JcTableRight:
		_adfcd.Value = "right"
	case ST_JcTableStart:
		_adfcd.Value = "start"
	}
	return _adfcd, nil
}
func (_ebddc *ST_ThemeColor) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ebddc = 0
	case "dark1":
		*_ebddc = 1
	case "light1":
		*_ebddc = 2
	case "dark2":
		*_ebddc = 3
	case "light2":
		*_ebddc = 4
	case "accent1":
		*_ebddc = 5
	case "accent2":
		*_ebddc = 6
	case "accent3":
		*_ebddc = 7
	case "accent4":
		*_ebddc = 8
	case "accent5":
		*_ebddc = 9
	case "accent6":
		*_ebddc = 10
	case "hyperlink":
		*_ebddc = 11
	case "followedHyperlink":
		*_ebddc = 12
	case "none":
		*_ebddc = 13
	case "background1":
		*_ebddc = 14
	case "text1":
		*_ebddc = 15
	case "background2":
		*_ebddc = 16
	case "text2":
		*_ebddc = 17
	}
	return nil
}
func NewCT_ProofErr() *CT_ProofErr {
	_gfgaa := &CT_ProofErr{}
	_gfgaa.TypeAttr = ST_ProofErr(1)
	return _gfgaa
}
func (_fefaaf *CT_TblLook) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fefaaf.FirstRowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstRow"}, Value: _b.Sprintf("\u0025v", *_fefaaf.FirstRowAttr)})
	}
	if _fefaaf.LastRowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastRow"}, Value: _b.Sprintf("\u0025v", *_fefaaf.LastRowAttr)})
	}
	if _fefaaf.FirstColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstColumn"}, Value: _b.Sprintf("\u0025v", *_fefaaf.FirstColumnAttr)})
	}
	if _fefaaf.LastColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastColumn"}, Value: _b.Sprintf("\u0025v", *_fefaaf.LastColumnAttr)})
	}
	if _fefaaf.NoHBandAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:noHBand"}, Value: _b.Sprintf("\u0025v", *_fefaaf.NoHBandAttr)})
	}
	if _fefaaf.NoVBandAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:noVBand"}, Value: _b.Sprintf("\u0025v", *_fefaaf.NoVBandAttr)})
	}
	if _fefaaf.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_fefaaf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bebgfg ST_LineNumberRestart) String() string {
	switch _bebgfg {
	case 0:
		return ""
	case 1:
		return "newPage"
	case 2:
		return "newSection"
	case 3:
		return "continuous"
	}
	return ""
}
func (_bfcecdb *Comments) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:comments"
	return _bfcecdb.CT_Comments.MarshalXML(e, start)
}

// Validate validates the EG_PContentBase and its children
func (_dcbeg *EG_PContentBase) Validate() error { return _dcbeg.ValidateWithPath("EG_PContentBase") }

type ST_FrameLayout byte

func (_cbgae *CT_Settings) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fbagc:
	for {
		_acdgd, _bcffb := d.Token()
		if _bcffb != nil {
			return _bcffb
		}
		switch _cefcc := _acdgd.(type) {
		case _d.StartElement:
			switch _cefcc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "writeProtection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "writeProtection"}:
				_cbgae.WriteProtection = NewCT_WriteProtection()
				if _ddaeg := d.DecodeElement(_cbgae.WriteProtection, &_cefcc); _ddaeg != nil {
					return _ddaeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "view"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "view"}:
				_cbgae.View = NewCT_View()
				if _ecgccb := d.DecodeElement(_cbgae.View, &_cefcc); _ecgccb != nil {
					return _ecgccb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "zoom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "zoom"}:
				_cbgae.Zoom = NewCT_Zoom()
				if _eecda := d.DecodeElement(_cbgae.Zoom, &_cefcc); _eecda != nil {
					return _eecda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "removePersonalInformation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "removePersonalInformation"}:
				_cbgae.RemovePersonalInformation = NewCT_OnOff()
				if _afgfe := d.DecodeElement(_cbgae.RemovePersonalInformation, &_cefcc); _afgfe != nil {
					return _afgfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "removeDateAndTime"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "removeDateAndTime"}:
				_cbgae.RemoveDateAndTime = NewCT_OnOff()
				if _cbdfaa := d.DecodeElement(_cbgae.RemoveDateAndTime, &_cefcc); _cbdfaa != nil {
					return _cbdfaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotDisplayPageBoundaries"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotDisplayPageBoundaries"}:
				_cbgae.DoNotDisplayPageBoundaries = NewCT_OnOff()
				if _fcfdb := d.DecodeElement(_cbgae.DoNotDisplayPageBoundaries, &_cefcc); _fcfdb != nil {
					return _fcfdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "displayBackgroundShape"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "displayBackgroundShape"}:
				_cbgae.DisplayBackgroundShape = NewCT_OnOff()
				if _agbca := d.DecodeElement(_cbgae.DisplayBackgroundShape, &_cefcc); _agbca != nil {
					return _agbca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printPostScriptOverText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printPostScriptOverText"}:
				_cbgae.PrintPostScriptOverText = NewCT_OnOff()
				if _aefdff := d.DecodeElement(_cbgae.PrintPostScriptOverText, &_cefcc); _aefdff != nil {
					return _aefdff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printFractionalCharacterWidth"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printFractionalCharacterWidth"}:
				_cbgae.PrintFractionalCharacterWidth = NewCT_OnOff()
				if _geebg := d.DecodeElement(_cbgae.PrintFractionalCharacterWidth, &_cefcc); _geebg != nil {
					return _geebg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printFormsData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printFormsData"}:
				_cbgae.PrintFormsData = NewCT_OnOff()
				if _aaadbb := d.DecodeElement(_cbgae.PrintFormsData, &_cefcc); _aaadbb != nil {
					return _aaadbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedTrueTypeFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedTrueTypeFonts"}:
				_cbgae.EmbedTrueTypeFonts = NewCT_OnOff()
				if _ccddfb := d.DecodeElement(_cbgae.EmbedTrueTypeFonts, &_cefcc); _ccddfb != nil {
					return _ccddfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedSystemFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedSystemFonts"}:
				_cbgae.EmbedSystemFonts = NewCT_OnOff()
				if _dcged := d.DecodeElement(_cbgae.EmbedSystemFonts, &_cefcc); _dcged != nil {
					return _dcged
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveSubsetFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveSubsetFonts"}:
				_cbgae.SaveSubsetFonts = NewCT_OnOff()
				if _fdegb := d.DecodeElement(_cbgae.SaveSubsetFonts, &_cefcc); _fdegb != nil {
					return _fdegb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveFormsData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveFormsData"}:
				_cbgae.SaveFormsData = NewCT_OnOff()
				if _egdbgf := d.DecodeElement(_cbgae.SaveFormsData, &_cefcc); _egdbgf != nil {
					return _egdbgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mirrorMargins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mirrorMargins"}:
				_cbgae.MirrorMargins = NewCT_OnOff()
				if _gcfbg := d.DecodeElement(_cbgae.MirrorMargins, &_cefcc); _gcfbg != nil {
					return _gcfbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alignBordersAndEdges"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alignBordersAndEdges"}:
				_cbgae.AlignBordersAndEdges = NewCT_OnOff()
				if _dbbca := d.DecodeElement(_cbgae.AlignBordersAndEdges, &_cefcc); _dbbca != nil {
					return _dbbca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bordersDoNotSurroundHeader"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bordersDoNotSurroundHeader"}:
				_cbgae.BordersDoNotSurroundHeader = NewCT_OnOff()
				if _agdfad := d.DecodeElement(_cbgae.BordersDoNotSurroundHeader, &_cefcc); _agdfad != nil {
					return _agdfad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bordersDoNotSurroundFooter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bordersDoNotSurroundFooter"}:
				_cbgae.BordersDoNotSurroundFooter = NewCT_OnOff()
				if _eeffa := d.DecodeElement(_cbgae.BordersDoNotSurroundFooter, &_cefcc); _eeffa != nil {
					return _eeffa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gutterAtTop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gutterAtTop"}:
				_cbgae.GutterAtTop = NewCT_OnOff()
				if _ceffa := d.DecodeElement(_cbgae.GutterAtTop, &_cefcc); _ceffa != nil {
					return _ceffa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hideSpellingErrors"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hideSpellingErrors"}:
				_cbgae.HideSpellingErrors = NewCT_OnOff()
				if _fdefc := d.DecodeElement(_cbgae.HideSpellingErrors, &_cefcc); _fdefc != nil {
					return _fdefc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hideGrammaticalErrors"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hideGrammaticalErrors"}:
				_cbgae.HideGrammaticalErrors = NewCT_OnOff()
				if _gabeae := d.DecodeElement(_cbgae.HideGrammaticalErrors, &_cefcc); _gabeae != nil {
					return _gabeae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "activeWritingStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "activeWritingStyle"}:
				_fbedcd := NewCT_WritingStyle()
				if _ffdbdc := d.DecodeElement(_fbedcd, &_cefcc); _ffdbdc != nil {
					return _ffdbdc
				}
				_cbgae.ActiveWritingStyle = append(_cbgae.ActiveWritingStyle, _fbedcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofState"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofState"}:
				_cbgae.ProofState = NewCT_Proof()
				if _cfbce := d.DecodeElement(_cbgae.ProofState, &_cefcc); _cfbce != nil {
					return _cfbce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "formsDesign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "formsDesign"}:
				_cbgae.FormsDesign = NewCT_OnOff()
				if _dggaa := d.DecodeElement(_cbgae.FormsDesign, &_cefcc); _dggaa != nil {
					return _dggaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "attachedTemplate"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "attachedTemplate"}:
				_cbgae.AttachedTemplate = NewCT_Rel()
				if _caffb := d.DecodeElement(_cbgae.AttachedTemplate, &_cefcc); _caffb != nil {
					return _caffb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "linkStyles"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "linkStyles"}:
				_cbgae.LinkStyles = NewCT_OnOff()
				if _ccfa := d.DecodeElement(_cbgae.LinkStyles, &_cefcc); _ccfa != nil {
					return _ccfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "stylePaneFormatFilter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "stylePaneFormatFilter"}:
				_cbgae.StylePaneFormatFilter = NewCT_StylePaneFilter()
				if _cbfgef := d.DecodeElement(_cbgae.StylePaneFormatFilter, &_cefcc); _cbfgef != nil {
					return _cbfgef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "stylePaneSortMethod"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "stylePaneSortMethod"}:
				_cbgae.StylePaneSortMethod = NewCT_StyleSort()
				if _bgfcb := d.DecodeElement(_cbgae.StylePaneSortMethod, &_cefcc); _bgfcb != nil {
					return _bgfcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "documentType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "documentType"}:
				_cbgae.DocumentType = NewCT_DocType()
				if _eegae := d.DecodeElement(_cbgae.DocumentType, &_cefcc); _eegae != nil {
					return _eegae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mailMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mailMerge"}:
				_cbgae.MailMerge = NewCT_MailMerge()
				if _baacg := d.DecodeElement(_cbgae.MailMerge, &_cefcc); _baacg != nil {
					return _baacg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "revisionView"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "revisionView"}:
				_cbgae.RevisionView = NewCT_TrackChangesView()
				if _gcgbb := d.DecodeElement(_cbgae.RevisionView, &_cefcc); _gcgbb != nil {
					return _gcgbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trackRevisions"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trackRevisions"}:
				_cbgae.TrackRevisions = NewCT_OnOff()
				if _ccdadb := d.DecodeElement(_cbgae.TrackRevisions, &_cefcc); _ccdadb != nil {
					return _ccdadb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotTrackMoves"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotTrackMoves"}:
				_cbgae.DoNotTrackMoves = NewCT_OnOff()
				if _affgf := d.DecodeElement(_cbgae.DoNotTrackMoves, &_cefcc); _affgf != nil {
					return _affgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotTrackFormatting"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotTrackFormatting"}:
				_cbgae.DoNotTrackFormatting = NewCT_OnOff()
				if _feeeg := d.DecodeElement(_cbgae.DoNotTrackFormatting, &_cefcc); _feeeg != nil {
					return _feeeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "documentProtection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "documentProtection"}:
				_cbgae.DocumentProtection = NewCT_DocProtect()
				if _dfdcfd := d.DecodeElement(_cbgae.DocumentProtection, &_cefcc); _dfdcfd != nil {
					return _dfdcfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoFormatOverride"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoFormatOverride"}:
				_cbgae.AutoFormatOverride = NewCT_OnOff()
				if _agddd := d.DecodeElement(_cbgae.AutoFormatOverride, &_cefcc); _agddd != nil {
					return _agddd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "styleLockTheme"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "styleLockTheme"}:
				_cbgae.StyleLockTheme = NewCT_OnOff()
				if _edgc := d.DecodeElement(_cbgae.StyleLockTheme, &_cefcc); _edgc != nil {
					return _edgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "styleLockQFSet"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "styleLockQFSet"}:
				_cbgae.StyleLockQFSet = NewCT_OnOff()
				if _cggfe := d.DecodeElement(_cbgae.StyleLockQFSet, &_cefcc); _cggfe != nil {
					return _cggfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "defaultTabStop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "defaultTabStop"}:
				_cbgae.DefaultTabStop = NewCT_TwipsMeasure()
				if _gbbeee := d.DecodeElement(_cbgae.DefaultTabStop, &_cefcc); _gbbeee != nil {
					return _gbbeee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoHyphenation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoHyphenation"}:
				_cbgae.AutoHyphenation = NewCT_OnOff()
				if _aeggg := d.DecodeElement(_cbgae.AutoHyphenation, &_cefcc); _aeggg != nil {
					return _aeggg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "consecutiveHyphenLimit"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "consecutiveHyphenLimit"}:
				_cbgae.ConsecutiveHyphenLimit = NewCT_DecimalNumber()
				if _fbcgc := d.DecodeElement(_cbgae.ConsecutiveHyphenLimit, &_cefcc); _fbcgc != nil {
					return _fbcgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyphenationZone"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyphenationZone"}:
				_cbgae.HyphenationZone = NewCT_TwipsMeasure()
				if _adbaa := d.DecodeElement(_cbgae.HyphenationZone, &_cefcc); _adbaa != nil {
					return _adbaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotHyphenateCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotHyphenateCaps"}:
				_cbgae.DoNotHyphenateCaps = NewCT_OnOff()
				if _gffaf := d.DecodeElement(_cbgae.DoNotHyphenateCaps, &_cefcc); _gffaf != nil {
					return _gffaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "showEnvelope"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "showEnvelope"}:
				_cbgae.ShowEnvelope = NewCT_OnOff()
				if _acacb := d.DecodeElement(_cbgae.ShowEnvelope, &_cefcc); _acacb != nil {
					return _acacb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "summaryLength"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "summaryLength"}:
				_cbgae.SummaryLength = NewCT_DecimalNumberOrPrecent()
				if _dcfgc := d.DecodeElement(_cbgae.SummaryLength, &_cefcc); _dcfgc != nil {
					return _dcfgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "clickAndTypeStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "clickAndTypeStyle"}:
				_cbgae.ClickAndTypeStyle = NewCT_String()
				if _dfddd := d.DecodeElement(_cbgae.ClickAndTypeStyle, &_cefcc); _dfddd != nil {
					return _dfddd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "defaultTableStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "defaultTableStyle"}:
				_cbgae.DefaultTableStyle = NewCT_String()
				if _ebbfgc := d.DecodeElement(_cbgae.DefaultTableStyle, &_cefcc); _ebbfgc != nil {
					return _ebbfgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "evenAndOddHeaders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "evenAndOddHeaders"}:
				_cbgae.EvenAndOddHeaders = NewCT_OnOff()
				if _cagab := d.DecodeElement(_cbgae.EvenAndOddHeaders, &_cefcc); _cagab != nil {
					return _cagab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookFoldRevPrinting"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookFoldRevPrinting"}:
				_cbgae.BookFoldRevPrinting = NewCT_OnOff()
				if _bgfdc := d.DecodeElement(_cbgae.BookFoldRevPrinting, &_cefcc); _bgfdc != nil {
					return _bgfdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookFoldPrinting"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookFoldPrinting"}:
				_cbgae.BookFoldPrinting = NewCT_OnOff()
				if _fccef := d.DecodeElement(_cbgae.BookFoldPrinting, &_cefcc); _fccef != nil {
					return _fccef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookFoldPrintingSheets"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookFoldPrintingSheets"}:
				_cbgae.BookFoldPrintingSheets = NewCT_DecimalNumber()
				if _cbgcd := d.DecodeElement(_cbgae.BookFoldPrintingSheets, &_cefcc); _cbgcd != nil {
					return _cbgcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridHorizontalSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridHorizontalSpacing"}:
				_cbgae.DrawingGridHorizontalSpacing = NewCT_TwipsMeasure()
				if _cedce := d.DecodeElement(_cbgae.DrawingGridHorizontalSpacing, &_cefcc); _cedce != nil {
					return _cedce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridVerticalSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridVerticalSpacing"}:
				_cbgae.DrawingGridVerticalSpacing = NewCT_TwipsMeasure()
				if _abbba := d.DecodeElement(_cbgae.DrawingGridVerticalSpacing, &_cefcc); _abbba != nil {
					return _abbba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "displayHorizontalDrawingGridEvery"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "displayHorizontalDrawingGridEvery"}:
				_cbgae.DisplayHorizontalDrawingGridEvery = NewCT_DecimalNumber()
				if _abfbe := d.DecodeElement(_cbgae.DisplayHorizontalDrawingGridEvery, &_cefcc); _abfbe != nil {
					return _abfbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "displayVerticalDrawingGridEvery"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "displayVerticalDrawingGridEvery"}:
				_cbgae.DisplayVerticalDrawingGridEvery = NewCT_DecimalNumber()
				if _baaaa := d.DecodeElement(_cbgae.DisplayVerticalDrawingGridEvery, &_cefcc); _baaaa != nil {
					return _baaaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotUseMarginsForDrawingGridOrigin"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotUseMarginsForDrawingGridOrigin"}:
				_cbgae.DoNotUseMarginsForDrawingGridOrigin = NewCT_OnOff()
				if _ddcd := d.DecodeElement(_cbgae.DoNotUseMarginsForDrawingGridOrigin, &_cefcc); _ddcd != nil {
					return _ddcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridHorizontalOrigin"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridHorizontalOrigin"}:
				_cbgae.DrawingGridHorizontalOrigin = NewCT_TwipsMeasure()
				if _fgaac := d.DecodeElement(_cbgae.DrawingGridHorizontalOrigin, &_cefcc); _fgaac != nil {
					return _fgaac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawingGridVerticalOrigin"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawingGridVerticalOrigin"}:
				_cbgae.DrawingGridVerticalOrigin = NewCT_TwipsMeasure()
				if _eebca := d.DecodeElement(_cbgae.DrawingGridVerticalOrigin, &_cefcc); _eebca != nil {
					return _eebca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotShadeFormData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotShadeFormData"}:
				_cbgae.DoNotShadeFormData = NewCT_OnOff()
				if _gacbbc := d.DecodeElement(_cbgae.DoNotShadeFormData, &_cefcc); _gacbbc != nil {
					return _gacbbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noPunctuationKerning"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noPunctuationKerning"}:
				_cbgae.NoPunctuationKerning = NewCT_OnOff()
				if _faedd := d.DecodeElement(_cbgae.NoPunctuationKerning, &_cefcc); _faedd != nil {
					return _faedd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "characterSpacingControl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "characterSpacingControl"}:
				_cbgae.CharacterSpacingControl = NewCT_CharacterSpacing()
				if _gafcg := d.DecodeElement(_cbgae.CharacterSpacingControl, &_cefcc); _gafcg != nil {
					return _gafcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printTwoOnOne"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printTwoOnOne"}:
				_cbgae.PrintTwoOnOne = NewCT_OnOff()
				if _begdfg := d.DecodeElement(_cbgae.PrintTwoOnOne, &_cefcc); _begdfg != nil {
					return _begdfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strictFirstAndLastChars"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strictFirstAndLastChars"}:
				_cbgae.StrictFirstAndLastChars = NewCT_OnOff()
				if _acfff := d.DecodeElement(_cbgae.StrictFirstAndLastChars, &_cefcc); _acfff != nil {
					return _acfff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noLineBreaksAfter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noLineBreaksAfter"}:
				_cbgae.NoLineBreaksAfter = NewCT_Kinsoku()
				if _gbgde := d.DecodeElement(_cbgae.NoLineBreaksAfter, &_cefcc); _gbgde != nil {
					return _gbgde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noLineBreaksBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noLineBreaksBefore"}:
				_cbgae.NoLineBreaksBefore = NewCT_Kinsoku()
				if _bbfff := d.DecodeElement(_cbgae.NoLineBreaksBefore, &_cefcc); _bbfff != nil {
					return _bbfff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "savePreviewPicture"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "savePreviewPicture"}:
				_cbgae.SavePreviewPicture = NewCT_OnOff()
				if _bfedc := d.DecodeElement(_cbgae.SavePreviewPicture, &_cefcc); _bfedc != nil {
					return _bfedc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotValidateAgainstSchema"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotValidateAgainstSchema"}:
				_cbgae.DoNotValidateAgainstSchema = NewCT_OnOff()
				if _adgec := d.DecodeElement(_cbgae.DoNotValidateAgainstSchema, &_cefcc); _adgec != nil {
					return _adgec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveInvalidXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveInvalidXml"}:
				_cbgae.SaveInvalidXml = NewCT_OnOff()
				if _acccf := d.DecodeElement(_cbgae.SaveInvalidXml, &_cefcc); _acccf != nil {
					return _acccf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ignoreMixedContent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ignoreMixedContent"}:
				_cbgae.IgnoreMixedContent = NewCT_OnOff()
				if _aaacc := d.DecodeElement(_cbgae.IgnoreMixedContent, &_cefcc); _aaacc != nil {
					return _aaacc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alwaysShowPlaceholderText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alwaysShowPlaceholderText"}:
				_cbgae.AlwaysShowPlaceholderText = NewCT_OnOff()
				if _bbbgd := d.DecodeElement(_cbgae.AlwaysShowPlaceholderText, &_cefcc); _bbbgd != nil {
					return _bbbgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotDemarcateInvalidXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotDemarcateInvalidXml"}:
				_cbgae.DoNotDemarcateInvalidXml = NewCT_OnOff()
				if _bedcb := d.DecodeElement(_cbgae.DoNotDemarcateInvalidXml, &_cefcc); _bedcb != nil {
					return _bedcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveXmlDataOnly"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveXmlDataOnly"}:
				_cbgae.SaveXmlDataOnly = NewCT_OnOff()
				if _fefaad := d.DecodeElement(_cbgae.SaveXmlDataOnly, &_cefcc); _fefaad != nil {
					return _fefaad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useXSLTWhenSaving"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useXSLTWhenSaving"}:
				_cbgae.UseXSLTWhenSaving = NewCT_OnOff()
				if _efddgc := d.DecodeElement(_cbgae.UseXSLTWhenSaving, &_cefcc); _efddgc != nil {
					return _efddgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveThroughXslt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveThroughXslt"}:
				_cbgae.SaveThroughXslt = NewCT_SaveThroughXslt()
				if _dbdfg := d.DecodeElement(_cbgae.SaveThroughXslt, &_cefcc); _dbdfg != nil {
					return _dbdfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "showXMLTags"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "showXMLTags"}:
				_cbgae.ShowXMLTags = NewCT_OnOff()
				if _dedgg := d.DecodeElement(_cbgae.ShowXMLTags, &_cefcc); _dedgg != nil {
					return _dedgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alwaysMergeEmptyNamespace"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alwaysMergeEmptyNamespace"}:
				_cbgae.AlwaysMergeEmptyNamespace = NewCT_OnOff()
				if _afedd := d.DecodeElement(_cbgae.AlwaysMergeEmptyNamespace, &_cefcc); _afedd != nil {
					return _afedd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "updateFields"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "updateFields"}:
				_cbgae.UpdateFields = NewCT_OnOff()
				if _dfaefd := d.DecodeElement(_cbgae.UpdateFields, &_cefcc); _dfaefd != nil {
					return _dfaefd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hdrShapeDefaults"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hdrShapeDefaults"}:
				_cbgae.HdrShapeDefaults = NewCT_ShapeDefaults()
				if _eebebd := d.DecodeElement(_cbgae.HdrShapeDefaults, &_cefcc); _eebebd != nil {
					return _eebebd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnotePr"}:
				_cbgae.FootnotePr = NewCT_FtnDocProps()
				if _gecad := d.DecodeElement(_cbgae.FootnotePr, &_cefcc); _gecad != nil {
					return _gecad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnotePr"}:
				_cbgae.EndnotePr = NewCT_EdnDocProps()
				if _bbfbd := d.DecodeElement(_cbgae.EndnotePr, &_cefcc); _bbfbd != nil {
					return _bbfbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "compat"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "compat"}:
				_cbgae.Compat = NewCT_Compat()
				if _cgaed := d.DecodeElement(_cbgae.Compat, &_cefcc); _cgaed != nil {
					return _cgaed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docVars"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docVars"}:
				_cbgae.DocVars = NewCT_DocVars()
				if _bfbcb := d.DecodeElement(_cbgae.DocVars, &_cefcc); _bfbcb != nil {
					return _bfbcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rsids"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rsids"}:
				_cbgae.Rsids = NewCT_DocRsids()
				if _gebae := d.DecodeElement(_cbgae.Rsids, &_cefcc); _gebae != nil {
					return _gebae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "mathPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "mathPr"}:
				_cbgae.MathPr = _f.NewMathPr()
				if _fdeee := d.DecodeElement(_cbgae.MathPr, &_cefcc); _fdeee != nil {
					return _fdeee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "attachedSchema"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "attachedSchema"}:
				_befffg := NewCT_String()
				if _gggge := d.DecodeElement(_befffg, &_cefcc); _gggge != nil {
					return _gggge
				}
				_cbgae.AttachedSchema = append(_cbgae.AttachedSchema, _befffg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "themeFontLang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "themeFontLang"}:
				_cbgae.ThemeFontLang = NewCT_Language()
				if _addea := d.DecodeElement(_cbgae.ThemeFontLang, &_cefcc); _addea != nil {
					return _addea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "clrSchemeMapping"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "clrSchemeMapping"}:
				_cbgae.ClrSchemeMapping = NewCT_ColorSchemeMapping()
				if _gadae := d.DecodeElement(_cbgae.ClrSchemeMapping, &_cefcc); _gadae != nil {
					return _gadae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotIncludeSubdocsInStats"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotIncludeSubdocsInStats"}:
				_cbgae.DoNotIncludeSubdocsInStats = NewCT_OnOff()
				if _dcfaae := d.DecodeElement(_cbgae.DoNotIncludeSubdocsInStats, &_cefcc); _dcfaae != nil {
					return _dcfaae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotAutoCompressPictures"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotAutoCompressPictures"}:
				_cbgae.DoNotAutoCompressPictures = NewCT_OnOff()
				if _fbbba := d.DecodeElement(_cbgae.DoNotAutoCompressPictures, &_cefcc); _fbbba != nil {
					return _fbbba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "forceUpgrade"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "forceUpgrade"}:
				_cbgae.ForceUpgrade = NewCT_Empty()
				if _agaac := d.DecodeElement(_cbgae.ForceUpgrade, &_cefcc); _agaac != nil {
					return _agaac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "captions"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "captions"}:
				_cbgae.Captions = NewCT_Captions()
				if _cbbab := d.DecodeElement(_cbgae.Captions, &_cefcc); _cbbab != nil {
					return _cbbab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "readModeInkLockDown"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "readModeInkLockDown"}:
				_cbgae.ReadModeInkLockDown = NewCT_ReadingModeInkLockDown()
				if _bgagc := d.DecodeElement(_cbgae.ReadModeInkLockDown, &_cefcc); _bgagc != nil {
					return _bgagc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTagType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTagType"}:
				_ebcfbe := NewCT_SmartTagType()
				if _ddbea := d.DecodeElement(_ebcfbe, &_cefcc); _ddbea != nil {
					return _ddbea
				}
				_cbgae.SmartTagType = append(_cbgae.SmartTagType, _ebcfbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain", Local: "schemaLibrary"}:
				_cbgae.SchemaLibrary = _gg.NewSchemaLibrary()
				if _abdgd := d.DecodeElement(_cbgae.SchemaLibrary, &_cefcc); _abdgd != nil {
					return _abdgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shapeDefaults"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shapeDefaults"}:
				_cbgae.ShapeDefaults = NewCT_ShapeDefaults()
				if _afcbb := d.DecodeElement(_cbgae.ShapeDefaults, &_cefcc); _afcbb != nil {
					return _afcbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotEmbedSmartTags"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotEmbedSmartTags"}:
				_cbgae.DoNotEmbedSmartTags = NewCT_OnOff()
				if _fcgfe := d.DecodeElement(_cbgae.DoNotEmbedSmartTags, &_cefcc); _fcgfe != nil {
					return _fcgfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "decimalSymbol"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "decimalSymbol"}:
				_cbgae.DecimalSymbol = NewCT_String()
				if _bcdca := d.DecodeElement(_cbgae.DecimalSymbol, &_cefcc); _bcdca != nil {
					return _bcdca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "listSeparator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "listSeparator"}:
				_cbgae.ListSeparator = NewCT_String()
				if _geabf := d.DecodeElement(_cbgae.ListSeparator, &_cefcc); _geabf != nil {
					return _geabf
				}
			default:
				_adeba := &_ga.XSDAny{}
				if _cgaac := d.DecodeElement(_adeba, &_cefcc); _cgaac != nil {
					return _cgaac
				}
				_cbgae.Extra = append(_cbgae.Extra, _adeba)
			}
		case _d.EndElement:
			break _fbagc
		case _d.CharData:
		}
	}
	return nil
}
func (_bgegc *Footnotes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bgegc.CT_Footnotes = *NewCT_Footnotes()
_egfcge:
	for {
		_facgc, _ecagb := d.Token()
		if _ecagb != nil {
			return _ecagb
		}
		switch _bcfag := _facgc.(type) {
		case _d.StartElement:
			switch _bcfag.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnote"}:
				_cebaf := NewCT_FtnEdn()
				if _bbdfe := d.DecodeElement(_cebaf, &_bcfag); _bbdfe != nil {
					return _bbdfe
				}
				_bgegc.Footnote = append(_bgegc.Footnote, _cebaf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on Footnotes \u0025v", _bcfag.Name)
				if _faefab := d.Skip(); _faefab != nil {
					return _faefab
				}
			}
		case _d.EndElement:
			break _egfcge
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Fonts and its children
func (_ffdg *CT_Fonts) Validate() error { return _ffdg.ValidateWithPath("CT_Fonts") }

// ValidateWithPath validates the CT_TblPrChange and its children, prefixing error messages with path
func (_fegeb *CT_TblPrChange) ValidateWithPath(path string) error {
	if _fdgecd := _fegeb.TblPr.ValidateWithPath(path + "\u002fTblPr"); _fdgecd != nil {
		return _fdgecd
	}
	return nil
}

// ValidateWithPath validates the CT_BottomPageBorder and its children, prefixing error messages with path
func (_aaef *CT_BottomPageBorder) ValidateWithPath(path string) error {
	if _aaef.ValAttr == ST_BorderUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ffad := _aaef.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _ffad != nil {
		return _ffad
	}
	if _aaef.ColorAttr != nil {
		if _eaffe := _aaef.ColorAttr.ValidateWithPath(path + "\u002fColorAttr"); _eaffe != nil {
			return _eaffe
		}
	}
	if _afgf := _aaef.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _afgf != nil {
		return _afgf
	}
	if _aaef.ShadowAttr != nil {
		if _fgaab := _aaef.ShadowAttr.ValidateWithPath(path + "/ShadowAttr"); _fgaab != nil {
			return _fgaab
		}
	}
	if _aaef.FrameAttr != nil {
		if _fgeb := _aaef.FrameAttr.ValidateWithPath(path + "\u002fFrameAttr"); _fgeb != nil {
			return _fgeb
		}
	}
	return nil
}
func (_eaedf *EG_HdrFtrReferences) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eaedf.HeaderReference != nil {
		_fdcef := _d.StartElement{Name: _d.Name{Local: "w:headerReference"}}
		e.EncodeElement(_eaedf.HeaderReference, _fdcef)
	}
	if _eaedf.FooterReference != nil {
		_gbcggf := _d.StartElement{Name: _d.Name{Local: "w:footerReference"}}
		e.EncodeElement(_eaedf.FooterReference, _gbcggf)
	}
	return nil
}

// Validate validates the CT_CustomXmlBlock and its children
func (_fdfeg *CT_CustomXmlBlock) Validate() error {
	return _fdfeg.ValidateWithPath("CT_CustomXmlBlock")
}

// ValidateWithPath validates the CT_MailMergeSourceType and its children, prefixing error messages with path
func (_fagd *CT_MailMergeSourceType) ValidateWithPath(path string) error {
	if _fagd.ValAttr == ST_MailMergeSourceTypeUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _adace := _fagd.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _adace != nil {
		return _adace
	}
	return nil
}
func (_gga *CT_AutoCaption) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _afb := range start.Attr {
		if _afb.Name.Local == "name" {
			_gad, _dff := _afb.Value, error(nil)
			if _dff != nil {
				return _dff
			}
			_gga.NameAttr = _gad
			continue
		}
		if _afb.Name.Local == "caption" {
			_ecc, _edf := _afb.Value, error(nil)
			if _edf != nil {
				return _edf
			}
			_gga.CaptionAttr = _ecc
			continue
		}
	}
	for {
		_deg, _affg := d.Token()
		if _affg != nil {
			return _b.Errorf("parsing\u0020CT_AutoCaption:\u0020\u0025s", _affg)
		}
		if _aaff, _acfg := _deg.(_d.EndElement); _acfg && _aaff.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bfcgef *CT_TblPrExChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _bfcgef.AuthorAttr)})
	if _bfcgef.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_bfcgef.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _bfcgef.IdAttr)})
	e.EncodeToken(start)
	_ebabf := _d.StartElement{Name: _d.Name{Local: "w:tblPrEx"}}
	e.EncodeElement(_bfcgef.TblPrEx, _ebabf)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_BrClearUnset ST_BrClear = 0
	ST_BrClearNone  ST_BrClear = 1
	ST_BrClearLeft  ST_BrClear = 2
	ST_BrClearRight ST_BrClear = 3
	ST_BrClearAll   ST_BrClear = 4
)

func (_ggagd *CT_MathCtrlIns) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dgegf := range start.Attr {
		if _dgegf.Name.Local == "author" {
			_cfaf, _agdde := _dgegf.Value, error(nil)
			if _agdde != nil {
				return _agdde
			}
			_ggagd.AuthorAttr = _cfaf
			continue
		}
		if _dgegf.Name.Local == "date" {
			_gcbcd, _acgcc := ParseStdlibTime(_dgegf.Value)
			if _acgcc != nil {
				return _acgcc
			}
			_ggagd.DateAttr = &_gcbcd
			continue
		}
		if _dgegf.Name.Local == "id" {
			_adaee, _fgab := _dd.ParseInt(_dgegf.Value, 10, 64)
			if _fgab != nil {
				return _fgab
			}
			_ggagd.IdAttr = _adaee
			continue
		}
	}
	for {
		_eccge, _gdgded := d.Token()
		if _gdgded != nil {
			return _b.Errorf("parsing\u0020CT_MathCtrlIns:\u0020\u0025s", _gdgded)
		}
		if _dagf, _cfeffb := _eccge.(_d.EndElement); _cfeffb && _dagf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_SdtListItem() *CT_SdtListItem { _ebdbf := &CT_SdtListItem{}; return _ebdbf }

// Validate validates the CT_Base64Binary and its children
func (_cdda *CT_Base64Binary) Validate() error { return _cdda.ValidateWithPath("CT_Base64Binary") }
func (_gcdae *EG_RubyContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cdgdaa:
	for {
		_gegcd, _gaffe := d.Token()
		if _gaffe != nil {
			return _gaffe
		}
		switch _eggbaa := _gegcd.(type) {
		case _d.StartElement:
			switch _eggbaa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_gcdae.R = NewCT_R()
				if _eeaaac := d.DecodeElement(_gcdae.R, &_eggbaa); _eeaaac != nil {
					return _eeaaac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_bfaeb := NewEG_RunLevelElts()
				_bfaeb.ProofErr = NewCT_ProofErr()
				if _bddebef := d.DecodeElement(_bfaeb.ProofErr, &_eggbaa); _bddebef != nil {
					return _bddebef
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _bfaeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_eccdf := NewEG_RunLevelElts()
				_eccdf.PermStart = NewCT_PermStart()
				if _ggcbgg := d.DecodeElement(_eccdf.PermStart, &_eggbaa); _ggcbgg != nil {
					return _ggcbgg
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _eccdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_edcca := NewEG_RunLevelElts()
				_edcca.PermEnd = NewCT_Perm()
				if _eddag := d.DecodeElement(_edcca.PermEnd, &_eggbaa); _eddag != nil {
					return _eddag
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _edcca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_ccabe := NewEG_RunLevelElts()
				_ccabe.Ins = NewCT_RunTrackChange()
				if _aabfaf := d.DecodeElement(_ccabe.Ins, &_eggbaa); _aabfaf != nil {
					return _aabfaf
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _ccabe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ecgfad := NewEG_RunLevelElts()
				_ecgfad.Del = NewCT_RunTrackChange()
				if _ffedf := d.DecodeElement(_ecgfad.Del, &_eggbaa); _ffedf != nil {
					return _ffedf
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _ecgfad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_bfddcfa := NewEG_RunLevelElts()
				_bfddcfa.MoveFrom = NewCT_RunTrackChange()
				if _addbd := d.DecodeElement(_bfddcfa.MoveFrom, &_eggbaa); _addbd != nil {
					return _addbd
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _bfddcfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_dfbacd := NewEG_RunLevelElts()
				_dfbacd.MoveTo = NewCT_RunTrackChange()
				if _ffgcce := d.DecodeElement(_dfbacd.MoveTo, &_eggbaa); _ffgcce != nil {
					return _ffgcce
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _dfbacd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_ceaadf := NewEG_RunLevelElts()
				_dbbbg := NewEG_RangeMarkupElements()
				_dbbbg.BookmarkStart = NewCT_Bookmark()
				if _dddebf := d.DecodeElement(_dbbbg.BookmarkStart, &_eggbaa); _dddebf != nil {
					return _dddebf
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _ceaadf)
				_ceaadf.EG_RangeMarkupElements = append(_ceaadf.EG_RangeMarkupElements, _dbbbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_bcabac := NewEG_RunLevelElts()
				_cafefe := NewEG_RangeMarkupElements()
				_cafefe.BookmarkEnd = NewCT_MarkupRange()
				if _ecdab := d.DecodeElement(_cafefe.BookmarkEnd, &_eggbaa); _ecdab != nil {
					return _ecdab
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _bcabac)
				_bcabac.EG_RangeMarkupElements = append(_bcabac.EG_RangeMarkupElements, _cafefe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_dcfad := NewEG_RunLevelElts()
				_fgace := NewEG_RangeMarkupElements()
				_fgace.MoveFromRangeStart = NewCT_MoveBookmark()
				if _ecabcc := d.DecodeElement(_fgace.MoveFromRangeStart, &_eggbaa); _ecabcc != nil {
					return _ecabcc
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _dcfad)
				_dcfad.EG_RangeMarkupElements = append(_dcfad.EG_RangeMarkupElements, _fgace)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_bbbcfb := NewEG_RunLevelElts()
				_eeeae := NewEG_RangeMarkupElements()
				_eeeae.MoveFromRangeEnd = NewCT_MarkupRange()
				if _ccggg := d.DecodeElement(_eeeae.MoveFromRangeEnd, &_eggbaa); _ccggg != nil {
					return _ccggg
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _bbbcfb)
				_bbbcfb.EG_RangeMarkupElements = append(_bbbcfb.EG_RangeMarkupElements, _eeeae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_abacd := NewEG_RunLevelElts()
				_dfacfa := NewEG_RangeMarkupElements()
				_dfacfa.MoveToRangeStart = NewCT_MoveBookmark()
				if _dccfa := d.DecodeElement(_dfacfa.MoveToRangeStart, &_eggbaa); _dccfa != nil {
					return _dccfa
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _abacd)
				_abacd.EG_RangeMarkupElements = append(_abacd.EG_RangeMarkupElements, _dfacfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_acfgde := NewEG_RunLevelElts()
				_gbcbfc := NewEG_RangeMarkupElements()
				_gbcbfc.MoveToRangeEnd = NewCT_MarkupRange()
				if _cbfdg := d.DecodeElement(_gbcbfc.MoveToRangeEnd, &_eggbaa); _cbfdg != nil {
					return _cbfdg
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _acfgde)
				_acfgde.EG_RangeMarkupElements = append(_acfgde.EG_RangeMarkupElements, _gbcbfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_cceaa := NewEG_RunLevelElts()
				_gfbae := NewEG_RangeMarkupElements()
				_gfbae.CommentRangeStart = NewCT_MarkupRange()
				if _dgcaa := d.DecodeElement(_gfbae.CommentRangeStart, &_eggbaa); _dgcaa != nil {
					return _dgcaa
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _cceaa)
				_cceaa.EG_RangeMarkupElements = append(_cceaa.EG_RangeMarkupElements, _gfbae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_ebgecf := NewEG_RunLevelElts()
				_gacgeb := NewEG_RangeMarkupElements()
				_gacgeb.CommentRangeEnd = NewCT_MarkupRange()
				if _bbfdc := d.DecodeElement(_gacgeb.CommentRangeEnd, &_eggbaa); _bbfdc != nil {
					return _bbfdc
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _ebgecf)
				_ebgecf.EG_RangeMarkupElements = append(_ebgecf.EG_RangeMarkupElements, _gacgeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_caddc := NewEG_RunLevelElts()
				_ccgbde := NewEG_RangeMarkupElements()
				_ccgbde.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _ggaf := d.DecodeElement(_ccgbde.CustomXmlInsRangeStart, &_eggbaa); _ggaf != nil {
					return _ggaf
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _caddc)
				_caddc.EG_RangeMarkupElements = append(_caddc.EG_RangeMarkupElements, _ccgbde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_eedab := NewEG_RunLevelElts()
				_efedcfe := NewEG_RangeMarkupElements()
				_efedcfe.CustomXmlInsRangeEnd = NewCT_Markup()
				if _abcdbc := d.DecodeElement(_efedcfe.CustomXmlInsRangeEnd, &_eggbaa); _abcdbc != nil {
					return _abcdbc
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _eedab)
				_eedab.EG_RangeMarkupElements = append(_eedab.EG_RangeMarkupElements, _efedcfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_acgda := NewEG_RunLevelElts()
				_efaecc := NewEG_RangeMarkupElements()
				_efaecc.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _edgeed := d.DecodeElement(_efaecc.CustomXmlDelRangeStart, &_eggbaa); _edgeed != nil {
					return _edgeed
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _acgda)
				_acgda.EG_RangeMarkupElements = append(_acgda.EG_RangeMarkupElements, _efaecc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_deaeg := NewEG_RunLevelElts()
				_bafgab := NewEG_RangeMarkupElements()
				_bafgab.CustomXmlDelRangeEnd = NewCT_Markup()
				if _fcbaag := d.DecodeElement(_bafgab.CustomXmlDelRangeEnd, &_eggbaa); _fcbaag != nil {
					return _fcbaag
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _deaeg)
				_deaeg.EG_RangeMarkupElements = append(_deaeg.EG_RangeMarkupElements, _bafgab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_gffgg := NewEG_RunLevelElts()
				_ccgde := NewEG_RangeMarkupElements()
				_ccgde.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _acbebe := d.DecodeElement(_ccgde.CustomXmlMoveFromRangeStart, &_eggbaa); _acbebe != nil {
					return _acbebe
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _gffgg)
				_gffgg.EG_RangeMarkupElements = append(_gffgg.EG_RangeMarkupElements, _ccgde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_cbgeeg := NewEG_RunLevelElts()
				_ddafgc := NewEG_RangeMarkupElements()
				_ddafgc.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _egfbcb := d.DecodeElement(_ddafgc.CustomXmlMoveFromRangeEnd, &_eggbaa); _egfbcb != nil {
					return _egfbcb
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _cbgeeg)
				_cbgeeg.EG_RangeMarkupElements = append(_cbgeeg.EG_RangeMarkupElements, _ddafgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_caegeca := NewEG_RunLevelElts()
				_gfgbd := NewEG_RangeMarkupElements()
				_gfgbd.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _ebggge := d.DecodeElement(_gfgbd.CustomXmlMoveToRangeStart, &_eggbaa); _ebggge != nil {
					return _ebggge
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _caegeca)
				_caegeca.EG_RangeMarkupElements = append(_caegeca.EG_RangeMarkupElements, _gfgbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_dedabc := NewEG_RunLevelElts()
				_ggeffc := NewEG_RangeMarkupElements()
				_ggeffc.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _acfeb := d.DecodeElement(_ggeffc.CustomXmlMoveToRangeEnd, &_eggbaa); _acfeb != nil {
					return _acfeb
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _dedabc)
				_dedabc.EG_RangeMarkupElements = append(_dedabc.EG_RangeMarkupElements, _ggeffc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_ageggb := NewEG_RunLevelElts()
				_egggg := NewEG_MathContent()
				_egggg.OMathPara = _f.NewOMathPara()
				if _bbbedg := d.DecodeElement(_egggg.OMathPara, &_eggbaa); _bbbedg != nil {
					return _bbbedg
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _ageggb)
				_ageggb.EG_MathContent = append(_ageggb.EG_MathContent, _egggg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_daadc := NewEG_RunLevelElts()
				_efgag := NewEG_MathContent()
				_efgag.OMath = _f.NewOMath()
				if _degeeg := d.DecodeElement(_efgag.OMath, &_eggbaa); _degeeg != nil {
					return _degeeg
				}
				_gcdae.EG_RunLevelElts = append(_gcdae.EG_RunLevelElts, _daadc)
				_daadc.EG_MathContent = append(_daadc.EG_MathContent, _efgag)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_RubyContent\u0020\u0025v", _eggbaa.Name)
				if _facdff := d.Skip(); _facdff != nil {
					return _facdff
				}
			}
		case _d.EndElement:
			break _cdgdaa
		case _d.CharData:
		}
	}
	return nil
}
func (_aebef ST_BrClear) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_aebef.String(), start)
}

// Validate validates the WdWpc and its children
func (_aefgf *WdWpc) Validate() error { return _aefgf.ValidateWithPath("WdWpc") }
func (_eba *CT_AutoCaption) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _eba.NameAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:caption"}, Value: _b.Sprintf("\u0025v", _eba.CaptionAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ddbeeab *ST_EdGrp) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afgfa, _ccbaee := d.Token()
	if _ccbaee != nil {
		return _ccbaee
	}
	if _ecfbf, _bdceac := _afgfa.(_d.EndElement); _bdceac && _ecfbf.Name == start.Name {
		*_ddbeeab = 1
		return nil
	}
	if _ddbfe, _feafbf := _afgfa.(_d.CharData); !_feafbf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _afgfa)
	} else {
		switch string(_ddbfe) {
		case "":
			*_ddbeeab = 0
		case "none":
			*_ddbeeab = 1
		case "everyone":
			*_ddbeeab = 2
		case "administrators":
			*_ddbeeab = 3
		case "contributors":
			*_ddbeeab = 4
		case "editors":
			*_ddbeeab = 5
		case "owners":
			*_ddbeeab = 6
		case "current":
			*_ddbeeab = 7
		}
	}
	_afgfa, _ccbaee = d.Token()
	if _ccbaee != nil {
		return _ccbaee
	}
	if _afgffb, _eecfc := _afgfa.(_d.EndElement); _eecfc && _afgffb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _afgfa)
}

// ValidateWithPath validates the CT_GlossaryDocument and its children, prefixing error messages with path
func (_cgbbd *CT_GlossaryDocument) ValidateWithPath(path string) error {
	if _cgbbd.Background != nil {
		if _dffba := _cgbbd.Background.ValidateWithPath(path + "/Background"); _dffba != nil {
			return _dffba
		}
	}
	if _cgbbd.DocParts != nil {
		if _gdadb := _cgbbd.DocParts.ValidateWithPath(path + "\u002fDocParts"); _gdadb != nil {
			return _gdadb
		}
	}
	return nil
}
func (_aeabf *ST_DocProtect) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cfdacb, _fagga := d.Token()
	if _fagga != nil {
		return _fagga
	}
	if _daefbb, _ddafde := _cfdacb.(_d.EndElement); _ddafde && _daefbb.Name == start.Name {
		*_aeabf = 1
		return nil
	}
	if _fecbcb, _abecce := _cfdacb.(_d.CharData); !_abecce {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cfdacb)
	} else {
		switch string(_fecbcb) {
		case "":
			*_aeabf = 0
		case "none":
			*_aeabf = 1
		case "readOnly":
			*_aeabf = 2
		case "comments":
			*_aeabf = 3
		case "trackedChanges":
			*_aeabf = 4
		case "forms":
			*_aeabf = 5
		}
	}
	_cfdacb, _fagga = d.Token()
	if _fagga != nil {
		return _fagga
	}
	if _babdea, _fgafa := _cfdacb.(_d.EndElement); _fgafa && _babdea.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cfdacb)
}

// Validate validates the WdCT_TxbxContent and its children
func (_cdaac *WdCT_TxbxContent) Validate() error   { return _cdaac.ValidateWithPath("WdCT_TxbxContent") }
func NewCT_TblPrExBase() *CT_TblPrExBase           { _badea := &CT_TblPrExBase{}; return _badea }
func NewAG_SectPrAttributes() *AG_SectPrAttributes { _fee := &AG_SectPrAttributes{}; return _fee }

type ST_FontFamily byte

func (_cdggdc *CT_TcMar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_edacaa:
	for {
		_eafbf, _dbcgc := d.Token()
		if _dbcgc != nil {
			return _dbcgc
		}
		switch _efcbc := _eafbf.(type) {
		case _d.StartElement:
			switch _efcbc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "top"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "top"}:
				_cdggdc.Top = NewCT_TblWidth()
				if _gabba := d.DecodeElement(_cdggdc.Top, &_efcbc); _gabba != nil {
					return _gabba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "start"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "start"}:
				_cdggdc.Start = NewCT_TblWidth()
				if _dgbfbb := d.DecodeElement(_cdggdc.Start, &_efcbc); _dgbfbb != nil {
					return _dgbfbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "left"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "left"}:
				_cdggdc.Left = NewCT_TblWidth()
				if _ebabe := d.DecodeElement(_cdggdc.Left, &_efcbc); _ebabe != nil {
					return _ebabe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bottom"}:
				_cdggdc.Bottom = NewCT_TblWidth()
				if _dcebe := d.DecodeElement(_cdggdc.Bottom, &_efcbc); _dcebe != nil {
					return _dcebe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "end"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "end"}:
				_cdggdc.End = NewCT_TblWidth()
				if _eceggb := d.DecodeElement(_cdggdc.End, &_efcbc); _eceggb != nil {
					return _eceggb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "right"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "right"}:
				_cdggdc.Right = NewCT_TblWidth()
				if _cffcc := d.DecodeElement(_cdggdc.Right, &_efcbc); _cffcc != nil {
					return _cffcc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TcMar\u0020\u0025v", _efcbc.Name)
				if _aabea := d.Skip(); _aabea != nil {
					return _aabea
				}
			}
		case _d.EndElement:
			break _edacaa
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_MultiLevelType and its children, prefixing error messages with path
func (_ggaaa *CT_MultiLevelType) ValidateWithPath(path string) error {
	if _ggaaa.ValAttr == ST_MultiLevelTypeUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _dbgdg := _ggaaa.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _dbgdg != nil {
		return _dbgdg
	}
	return nil
}
func NewCT_Rel() *CT_Rel                 { _eageb := &CT_Rel{}; return _eageb }
func NewCT_MathCtrlDel() *CT_MathCtrlDel { _bgfed := &CT_MathCtrlDel{}; return _bgfed }

// Validate validates the CT_Language and its children
func (_eedc *CT_Language) Validate() error { return _eedc.ValidateWithPath("CT_Language") }

type CT_BookmarkRange struct {
	ColFirstAttr             *int64
	ColLastAttr              *int64
	DisplacedByCustomXmlAttr ST_DisplacedByCustomXml

	// Annotation Identifier
	IdAttr int64
}

func (_befdb ST_SdtDateMappingType) ValidateWithPath(path string) error {
	switch _befdb {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_befdb))
	}
	return nil
}

const (
	ST_FFTextTypeUnset       ST_FFTextType = 0
	ST_FFTextTypeRegular     ST_FFTextType = 1
	ST_FFTextTypeNumber      ST_FFTextType = 2
	ST_FFTextTypeDate        ST_FFTextType = 3
	ST_FFTextTypeCurrentTime ST_FFTextType = 4
	ST_FFTextTypeCurrentDate ST_FFTextType = 5
	ST_FFTextTypeCalculated  ST_FFTextType = 6
)

type CT_RecipientData struct {

	// Record Is Included in Mail Merge
	Active *CT_OnOff

	// Index of Column Containing Unique Values for Record
	Column *CT_DecimalNumber

	// Unique Value for Record
	UniqueTag *CT_Base64Binary
}

// Validate validates the WdCT_Anchor and its children
func (_fcaeb *WdCT_Anchor) Validate() error { return _fcaeb.ValidateWithPath("WdCT_Anchor") }
func (_dgegd *CT_DocPart) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fbfgb:
	for {
		_agbe, _gdcbb := d.Token()
		if _gdcbb != nil {
			return _gdcbb
		}
		switch _cegdc := _agbe.(type) {
		case _d.StartElement:
			switch _cegdc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartPr"}:
				_dgegd.DocPartPr = NewCT_DocPartPr()
				if _bbdbg := d.DecodeElement(_dgegd.DocPartPr, &_cegdc); _bbdbg != nil {
					return _bbdbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartBody"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartBody"}:
				_dgegd.DocPartBody = NewCT_Body()
				if _gccg := d.DecodeElement(_dgegd.DocPartBody, &_cegdc); _gccg != nil {
					return _gccg
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_DocPart\u0020\u0025v", _cegdc.Name)
				if _fbbb := d.Skip(); _fbbb != nil {
					return _fbbb
				}
			}
		case _d.EndElement:
			break _fbfgb
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_ShapeDefaults() *CT_ShapeDefaults { _gaged := &CT_ShapeDefaults{}; return _gaged }

// Validate validates the CT_FontSig and its children
func (_gded *CT_FontSig) Validate() error { return _gded.ValidateWithPath("CT_FontSig") }

// ValidateWithPath validates the WdWgp and its children, prefixing error messages with path
func (_ecgag *WdWgp) ValidateWithPath(path string) error {
	if _ffbab := _ecgag.WdCT_WordprocessingGroup.ValidateWithPath(path); _ffbab != nil {
		return _ffbab
	}
	return nil
}

type CT_Bookmark struct {
	NameAttr                 string
	ColFirstAttr             *int64
	ColLastAttr              *int64
	DisplacedByCustomXmlAttr ST_DisplacedByCustomXml

	// Annotation Identifier
	IdAttr int64
}

func (_gbgba *WdCT_WordprocessingGroupChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cbebee:
	for {
		_edgag, _cdedb := d.Token()
		if _cdedb != nil {
			return _cdedb
		}
		switch _decgba := _edgag.(type) {
		case _d.StartElement:
			switch _decgba.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wsp"}:
				_gddaeg := NewWdWsp()
				if _dcafd := d.DecodeElement(_gddaeg, &_decgba); _dcafd != nil {
					return _dcafd
				}
				_gbgba.Wsp = append(_gbgba.Wsp, _gddaeg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "grpSp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "grpSp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "grpSp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "grpSp"}:
				_gaaaa := NewWdCT_WordprocessingGroup()
				if _gfebbe := d.DecodeElement(_gaaaa, &_decgba); _gfebbe != nil {
					return _gfebbe
				}
				_gbgba.GrpSp = append(_gbgba.GrpSp, _gaaaa)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "graphicFrame"}:
				_ddaff := NewWdCT_GraphicFrame()
				if _aebedb := d.DecodeElement(_ddaff, &_decgba); _aebedb != nil {
					return _aebedb
				}
				_gbgba.GraphicFrame = append(_gbgba.GraphicFrame, _ddaff)
			case _d.Name{Space: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture", Local: "pic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fpicture", Local: "pic"}:
				_dbfcdb := _ca.NewPic()
				if _afggcc := d.DecodeElement(_dbfcdb, &_decgba); _afggcc != nil {
					return _afggcc
				}
				_gbgba.Pic = append(_gbgba.Pic, _dbfcdb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}:
				_ggacd := NewWdCT_WordprocessingContentPart()
				if _cdddgg := d.DecodeElement(_ggacd, &_decgba); _cdddgg != nil {
					return _cdddgg
				}
				_gbgba.ContentPart = append(_gbgba.ContentPart, _ggacd)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WordprocessingGroupChoice\u0020\u0025v", _decgba.Name)
				if _cbebdc := d.Skip(); _cbebdc != nil {
					return _cbebdc
				}
			}
		case _d.EndElement:
			break _cbebee
		case _d.CharData:
		}
	}
	return nil
}

type ST_Pitch byte

func (_bgddbg *ST_Jc) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bgddbg = 0
	case "start":
		*_bgddbg = 1
	case "center":
		*_bgddbg = 2
	case "end":
		*_bgddbg = 3
	case "both":
		*_bgddbg = 4
	case "mediumKashida":
		*_bgddbg = 5
	case "distribute":
		*_bgddbg = 6
	case "numTab":
		*_bgddbg = 7
	case "highKashida":
		*_bgddbg = 8
	case "lowKashida":
		*_bgddbg = 9
	case "thaiDistribute":
		*_bgddbg = 10
	case "left":
		*_bgddbg = 11
	case "right":
		*_bgddbg = 12
	}
	return nil
}

// ValidateWithPath validates the CT_ParaRPr and its children, prefixing error messages with path
func (_cbded *CT_ParaRPr) ValidateWithPath(path string) error {
	if _cbded.Ins != nil {
		if _aabbb := _cbded.Ins.ValidateWithPath(path + "\u002fIns"); _aabbb != nil {
			return _aabbb
		}
	}
	if _cbded.Del != nil {
		if _bgdcf := _cbded.Del.ValidateWithPath(path + "\u002fDel"); _bgdcf != nil {
			return _bgdcf
		}
	}
	if _cbded.MoveFrom != nil {
		if _acbgg := _cbded.MoveFrom.ValidateWithPath(path + "\u002fMoveFrom"); _acbgg != nil {
			return _acbgg
		}
	}
	if _cbded.MoveTo != nil {
		if _cfffb := _cbded.MoveTo.ValidateWithPath(path + "\u002fMoveTo"); _cfffb != nil {
			return _cfffb
		}
	}
	if _cbded.RStyle != nil {
		if _eaffd := _cbded.RStyle.ValidateWithPath(path + "\u002fRStyle"); _eaffd != nil {
			return _eaffd
		}
	}
	if _cbded.RFonts != nil {
		if _egceff := _cbded.RFonts.ValidateWithPath(path + "\u002fRFonts"); _egceff != nil {
			return _egceff
		}
	}
	if _cbded.B != nil {
		if _begde := _cbded.B.ValidateWithPath(path + "\u002fB"); _begde != nil {
			return _begde
		}
	}
	if _cbded.BCs != nil {
		if _edffg := _cbded.BCs.ValidateWithPath(path + "\u002fBCs"); _edffg != nil {
			return _edffg
		}
	}
	if _cbded.I != nil {
		if _bgeac := _cbded.I.ValidateWithPath(path + "\u002fI"); _bgeac != nil {
			return _bgeac
		}
	}
	if _cbded.ICs != nil {
		if _febca := _cbded.ICs.ValidateWithPath(path + "\u002fICs"); _febca != nil {
			return _febca
		}
	}
	if _cbded.Caps != nil {
		if _dcced := _cbded.Caps.ValidateWithPath(path + "\u002fCaps"); _dcced != nil {
			return _dcced
		}
	}
	if _cbded.SmallCaps != nil {
		if _dbdce := _cbded.SmallCaps.ValidateWithPath(path + "\u002fSmallCaps"); _dbdce != nil {
			return _dbdce
		}
	}
	if _cbded.Strike != nil {
		if _badfb := _cbded.Strike.ValidateWithPath(path + "\u002fStrike"); _badfb != nil {
			return _badfb
		}
	}
	if _cbded.Dstrike != nil {
		if _afcde := _cbded.Dstrike.ValidateWithPath(path + "\u002fDstrike"); _afcde != nil {
			return _afcde
		}
	}
	if _cbded.Outline != nil {
		if _ccebg := _cbded.Outline.ValidateWithPath(path + "\u002fOutline"); _ccebg != nil {
			return _ccebg
		}
	}
	if _cbded.Shadow != nil {
		if _egaga := _cbded.Shadow.ValidateWithPath(path + "\u002fShadow"); _egaga != nil {
			return _egaga
		}
	}
	if _cbded.Emboss != nil {
		if _fecfabe := _cbded.Emboss.ValidateWithPath(path + "\u002fEmboss"); _fecfabe != nil {
			return _fecfabe
		}
	}
	if _cbded.Imprint != nil {
		if _caeec := _cbded.Imprint.ValidateWithPath(path + "\u002fImprint"); _caeec != nil {
			return _caeec
		}
	}
	if _cbded.NoProof != nil {
		if _fdbdc := _cbded.NoProof.ValidateWithPath(path + "\u002fNoProof"); _fdbdc != nil {
			return _fdbdc
		}
	}
	if _cbded.SnapToGrid != nil {
		if _eadg := _cbded.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _eadg != nil {
			return _eadg
		}
	}
	if _cbded.Vanish != nil {
		if _aeed := _cbded.Vanish.ValidateWithPath(path + "\u002fVanish"); _aeed != nil {
			return _aeed
		}
	}
	if _cbded.WebHidden != nil {
		if _bceaa := _cbded.WebHidden.ValidateWithPath(path + "\u002fWebHidden"); _bceaa != nil {
			return _bceaa
		}
	}
	if _cbded.Color != nil {
		if _fbcab := _cbded.Color.ValidateWithPath(path + "\u002fColor"); _fbcab != nil {
			return _fbcab
		}
	}
	if _cbded.Spacing != nil {
		if _ddafd := _cbded.Spacing.ValidateWithPath(path + "\u002fSpacing"); _ddafd != nil {
			return _ddafd
		}
	}
	if _cbded.W != nil {
		if _cbbd := _cbded.W.ValidateWithPath(path + "\u002fW"); _cbbd != nil {
			return _cbbd
		}
	}
	if _cbded.Kern != nil {
		if _dgadfd := _cbded.Kern.ValidateWithPath(path + "\u002fKern"); _dgadfd != nil {
			return _dgadfd
		}
	}
	if _cbded.Position != nil {
		if _geagb := _cbded.Position.ValidateWithPath(path + "\u002fPosition"); _geagb != nil {
			return _geagb
		}
	}
	if _cbded.Sz != nil {
		if _fdgce := _cbded.Sz.ValidateWithPath(path + "\u002fSz"); _fdgce != nil {
			return _fdgce
		}
	}
	if _cbded.SzCs != nil {
		if _eaedb := _cbded.SzCs.ValidateWithPath(path + "\u002fSzCs"); _eaedb != nil {
			return _eaedb
		}
	}
	if _cbded.Highlight != nil {
		if _fgebd := _cbded.Highlight.ValidateWithPath(path + "\u002fHighlight"); _fgebd != nil {
			return _fgebd
		}
	}
	if _cbded.U != nil {
		if _cbggb := _cbded.U.ValidateWithPath(path + "\u002fU"); _cbggb != nil {
			return _cbggb
		}
	}
	if _cbded.Effect != nil {
		if _cdccf := _cbded.Effect.ValidateWithPath(path + "\u002fEffect"); _cdccf != nil {
			return _cdccf
		}
	}
	if _cbded.Bdr != nil {
		if _abbde := _cbded.Bdr.ValidateWithPath(path + "\u002fBdr"); _abbde != nil {
			return _abbde
		}
	}
	if _cbded.Shd != nil {
		if _fgbbc := _cbded.Shd.ValidateWithPath(path + "\u002fShd"); _fgbbc != nil {
			return _fgbbc
		}
	}
	if _cbded.FitText != nil {
		if _dacabd := _cbded.FitText.ValidateWithPath(path + "\u002fFitText"); _dacabd != nil {
			return _dacabd
		}
	}
	if _cbded.VertAlign != nil {
		if _eeeac := _cbded.VertAlign.ValidateWithPath(path + "\u002fVertAlign"); _eeeac != nil {
			return _eeeac
		}
	}
	if _cbded.Rtl != nil {
		if _ffgcc := _cbded.Rtl.ValidateWithPath(path + "\u002fRtl"); _ffgcc != nil {
			return _ffgcc
		}
	}
	if _cbded.Cs != nil {
		if _ecacb := _cbded.Cs.ValidateWithPath(path + "\u002fCs"); _ecacb != nil {
			return _ecacb
		}
	}
	if _cbded.Em != nil {
		if _gaecc := _cbded.Em.ValidateWithPath(path + "\u002fEm"); _gaecc != nil {
			return _gaecc
		}
	}
	if _cbded.Lang != nil {
		if _aaaef := _cbded.Lang.ValidateWithPath(path + "\u002fLang"); _aaaef != nil {
			return _aaaef
		}
	}
	if _cbded.EastAsianLayout != nil {
		if _ddfeg := _cbded.EastAsianLayout.ValidateWithPath(path + "\u002fEastAsianLayout"); _ddfeg != nil {
			return _ddfeg
		}
	}
	if _cbded.SpecVanish != nil {
		if _fabdf := _cbded.SpecVanish.ValidateWithPath(path + "/SpecVanish"); _fabdf != nil {
			return _fabdf
		}
	}
	if _cbded.OMath != nil {
		if _dbbgb := _cbded.OMath.ValidateWithPath(path + "\u002fOMath"); _dbbgb != nil {
			return _dbbgb
		}
	}
	if _cbded.RPrChange != nil {
		if _bgbdg := _cbded.RPrChange.ValidateWithPath(path + "\u002fRPrChange"); _bgbdg != nil {
			return _bgbdg
		}
	}
	return nil
}
func (_ebefb *CT_Comments) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_deege:
	for {
		_adfaa, _feab := d.Token()
		if _feab != nil {
			return _feab
		}
		switch _bafc := _adfaa.(type) {
		case _d.StartElement:
			switch _bafc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "comment"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "comment"}:
				_aabe := NewCT_Comment()
				if _cdbg := d.DecodeElement(_aabe, &_bafc); _cdbg != nil {
					return _cdbg
				}
				_ebefb.Comment = append(_ebefb.Comment, _aabe)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Comments\u0020\u0025v", _bafc.Name)
				if _eceb := d.Skip(); _eceb != nil {
					return _eceb
				}
			}
		case _d.EndElement:
			break _deege
		case _d.CharData:
		}
	}
	return nil
}
func ParseUnionST_DecimalNumberOrPercent(s string) (ST_DecimalNumberOrPercent, error) {
	_fecfaa := ST_DecimalNumberOrPercent{}
	if _g.ST_PercentagePatternRe.MatchString(s) {
		_fecfaa.ST_Percentage = &s
	} else {
		_geffa, _afbece := _dd.ParseFloat(s, 64)
		if _afbece != nil {
			return _fecfaa, _b.Errorf("parsing\u0020%s\u0020as\u0020int:\u0020\u0025s", s, _afbece)
		}
		_fecfaa.ST_UnqualifiedPercentage = _ga.Int64(int64(_geffa))
	}
	return _fecfaa, nil
}
func (_fgbgdg ST_TblOverlap) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fgbgdg.String(), start)
}

type CT_R struct {

	// Revision Identifier for Run Properties
	RsidRPrAttr *string

	// Revision Identifier for Run Deletion
	RsidDelAttr *string

	// Revision Identifier for Run
	RsidRAttr *string

	// Run Properties
	RPr                *CT_RPr
	EG_RunInnerContent []*EG_RunInnerContent
	Extra              []_ga.Any
}

func (_ddedb *CT_TblPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ddedb.TblStyle != nil {
		_begdfa := _d.StartElement{Name: _d.Name{Local: "w:tblStyle"}}
		e.EncodeElement(_ddedb.TblStyle, _begdfa)
	}
	if _ddedb.TblpPr != nil {
		_ggebc := _d.StartElement{Name: _d.Name{Local: "w:tblpPr"}}
		e.EncodeElement(_ddedb.TblpPr, _ggebc)
	}
	if _ddedb.TblOverlap != nil {
		_cbgab := _d.StartElement{Name: _d.Name{Local: "w:tblOverlap"}}
		e.EncodeElement(_ddedb.TblOverlap, _cbgab)
	}
	if _ddedb.BidiVisual != nil {
		_dgbfbe := _d.StartElement{Name: _d.Name{Local: "w:bidiVisual"}}
		e.EncodeElement(_ddedb.BidiVisual, _dgbfbe)
	}
	if _ddedb.TblStyleRowBandSize != nil {
		_gbcgc := _d.StartElement{Name: _d.Name{Local: "w:tblStyleRowBandSize"}}
		e.EncodeElement(_ddedb.TblStyleRowBandSize, _gbcgc)
	}
	if _ddedb.TblStyleColBandSize != nil {
		_cfdbb := _d.StartElement{Name: _d.Name{Local: "w:tblStyleColBandSize"}}
		e.EncodeElement(_ddedb.TblStyleColBandSize, _cfdbb)
	}
	if _ddedb.TblW != nil {
		_cffge := _d.StartElement{Name: _d.Name{Local: "w:tblW"}}
		e.EncodeElement(_ddedb.TblW, _cffge)
	}
	if _ddedb.Jc != nil {
		_abegf := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		e.EncodeElement(_ddedb.Jc, _abegf)
	}
	if _ddedb.TblCellSpacing != nil {
		_gagag := _d.StartElement{Name: _d.Name{Local: "w:tblCellSpacing"}}
		e.EncodeElement(_ddedb.TblCellSpacing, _gagag)
	}
	if _ddedb.TblInd != nil {
		_adabe := _d.StartElement{Name: _d.Name{Local: "w:tblInd"}}
		e.EncodeElement(_ddedb.TblInd, _adabe)
	}
	if _ddedb.TblBorders != nil {
		_ccebfb := _d.StartElement{Name: _d.Name{Local: "w:tblBorders"}}
		e.EncodeElement(_ddedb.TblBorders, _ccebfb)
	}
	if _ddedb.Shd != nil {
		_gfebbf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_ddedb.Shd, _gfebbf)
	}
	if _ddedb.TblLayout != nil {
		_cgddd := _d.StartElement{Name: _d.Name{Local: "w:tblLayout"}}
		e.EncodeElement(_ddedb.TblLayout, _cgddd)
	}
	if _ddedb.TblCellMar != nil {
		_fefgea := _d.StartElement{Name: _d.Name{Local: "w:tblCellMar"}}
		e.EncodeElement(_ddedb.TblCellMar, _fefgea)
	}
	if _ddedb.TblLook != nil {
		_cefgf := _d.StartElement{Name: _d.Name{Local: "w:tblLook"}}
		e.EncodeElement(_ddedb.TblLook, _cefgf)
	}
	if _ddedb.TblCaption != nil {
		_ceddc := _d.StartElement{Name: _d.Name{Local: "w:tblCaption"}}
		e.EncodeElement(_ddedb.TblCaption, _ceddc)
	}
	if _ddedb.TblDescription != nil {
		_agcgf := _d.StartElement{Name: _d.Name{Local: "w:tblDescription"}}
		e.EncodeElement(_ddedb.TblDescription, _agcgf)
	}
	if _ddedb.TblPrChange != nil {
		_ebefgc := _d.StartElement{Name: _d.Name{Local: "w:tblPrChange"}}
		e.EncodeElement(_ddedb.TblPrChange, _ebefgc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_afeeb *Fonts) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afeeb.CT_FontsList = *NewCT_FontsList()
_cdccgdb:
	for {
		_cafgdf, _fgfcfb := d.Token()
		if _fgfcfb != nil {
			return _fgfcfb
		}
		switch _bafbcd := _cafgdf.(type) {
		case _d.StartElement:
			switch _bafbcd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "font"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "font"}:
				_cccefe := NewCT_Font()
				if _afdbgg := d.DecodeElement(_cccefe, &_bafbcd); _afdbgg != nil {
					return _afdbgg
				}
				_afeeb.Font = append(_afeeb.Font, _cccefe)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on Fonts \u0025v", _bafbcd.Name)
				if _gceca := d.Skip(); _gceca != nil {
					return _gceca
				}
			}
		case _d.EndElement:
			break _cdccgdb
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_Shd() *CT_Shd { _bfabdf := &CT_Shd{}; _bfabdf.ValAttr = ST_Shd(1); return _bfabdf }
func (_fdcc *CT_Em) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_ggfd, _dfef := _fdcc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _dfef != nil {
		return _dfef
	}
	start.Attr = append(start.Attr, _ggfd)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_FramesetSplitbar and its children
func (_bbagg *CT_FramesetSplitbar) Validate() error {
	return _bbagg.ValidateWithPath("CT_FramesetSplitbar")
}

type CT_NumFmt struct {

	// Numbering Format Type
	ValAttr ST_NumberFormat

	// Custom Defined Number Format
	FormatAttr *string
}

func (_eecbab ST_MailMergeDocType) String() string {
	switch _eecbab {
	case 0:
		return ""
	case 1:
		return "catalog"
	case 2:
		return "envelopes"
	case 3:
		return "mailingLabels"
	case 4:
		return "formLetters"
	case 5:
		return "email"
	case 6:
		return "fax"
	}
	return ""
}
func (_bbgcb *CT_FFHelpText) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbgcb.TypeAttr != ST_InfoTextTypeUnset {
		_ffffbc, _bbgea := _bbgcb.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _bbgea != nil {
			return _bbgea
		}
		start.Attr = append(start.Attr, _ffffbc)
	}
	if _bbgcb.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_bbgcb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type Fonts struct{ CT_FontsList }

// Validate validates the CT_TblPrEx and its children
func (_agaed *CT_TblPrEx) Validate() error { return _agaed.ValidateWithPath("CT_TblPrEx") }
func NewCT_Cnf() *CT_Cnf                   { _egbf := &CT_Cnf{}; return _egbf }

// ValidateWithPath validates the CT_RPrDefault and its children, prefixing error messages with path
func (_aacgff *CT_RPrDefault) ValidateWithPath(path string) error {
	if _aacgff.RPr != nil {
		if _gaaff := _aacgff.RPr.ValidateWithPath(path + "\u002fRPr"); _gaaff != nil {
			return _gaaff
		}
	}
	return nil
}
func (_abegff *CT_UnsignedDecimalNumber) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _abegff.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Placeholder struct {

	// Document Part Reference
	DocPart *CT_String
}

func (_baebag *ST_Zoom) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfbgg, _fgccg := d.Token()
	if _fgccg != nil {
		return _fgccg
	}
	if _gedfed, _egaed := _dfbgg.(_d.EndElement); _egaed && _gedfed.Name == start.Name {
		*_baebag = 1
		return nil
	}
	if _dfegb, _daeaa := _dfbgg.(_d.CharData); !_daeaa {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _dfbgg)
	} else {
		switch string(_dfegb) {
		case "":
			*_baebag = 0
		case "none":
			*_baebag = 1
		case "fullPage":
			*_baebag = 2
		case "bestFit":
			*_baebag = 3
		case "textFit":
			*_baebag = 4
		}
	}
	_dfbgg, _fgccg = d.Token()
	if _fgccg != nil {
		return _fgccg
	}
	if _afacdg, _bgafc := _dfbgg.(_d.EndElement); _bgafc && _afacdg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _dfbgg)
}
func (_cfcca ST_MailMergeOdsoFMDFieldType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cfcca.String(), start)
}

// ValidateWithPath validates the CT_Spacing and its children, prefixing error messages with path
func (_bgffd *CT_Spacing) ValidateWithPath(path string) error {
	if _bgffd.BeforeAttr != nil {
		if _dcadgd := _bgffd.BeforeAttr.ValidateWithPath(path + "/BeforeAttr"); _dcadgd != nil {
			return _dcadgd
		}
	}
	if _bgffd.BeforeAutospacingAttr != nil {
		if _fbfga := _bgffd.BeforeAutospacingAttr.ValidateWithPath(path + "\u002fBeforeAutospacingAttr"); _fbfga != nil {
			return _fbfga
		}
	}
	if _bgffd.AfterAttr != nil {
		if _bdecg := _bgffd.AfterAttr.ValidateWithPath(path + "\u002fAfterAttr"); _bdecg != nil {
			return _bdecg
		}
	}
	if _bgffd.AfterAutospacingAttr != nil {
		if _dgbca := _bgffd.AfterAutospacingAttr.ValidateWithPath(path + "/AfterAutospacingAttr"); _dgbca != nil {
			return _dgbca
		}
	}
	if _bgffd.LineAttr != nil {
		if _fdaae := _bgffd.LineAttr.ValidateWithPath(path + "\u002fLineAttr"); _fdaae != nil {
			return _fdaae
		}
	}
	if _fbacd := _bgffd.LineRuleAttr.ValidateWithPath(path + "\u002fLineRuleAttr"); _fbacd != nil {
		return _fbacd
	}
	return nil
}

type ST_Em byte

// Validate validates the CT_MathCtrlIns and its children
func (_ebeef *CT_MathCtrlIns) Validate() error { return _ebeef.ValidateWithPath("CT_MathCtrlIns") }
func NewCT_ObjectLink() *CT_ObjectLink {
	_fdaa := &CT_ObjectLink{}
	_fdaa.UpdateModeAttr = ST_ObjectUpdateMode(1)
	return _fdaa
}

type CT_TopPageBorder struct {
	TopLeftAttr  *string
	TopRightAttr *string
	IdAttr       *string

	// Border Style
	ValAttr ST_Border

	// Border Color
	ColorAttr *ST_HexColor

	// Border Theme Color
	ThemeColorAttr ST_ThemeColor

	// Border Theme Color Tint
	ThemeTintAttr *string

	// Border Theme Color Shade
	ThemeShadeAttr *string

	// Border Width
	SzAttr *uint64

	// Border Spacing Measurement
	SpaceAttr *uint64

	// Border Shadow
	ShadowAttr *_g.ST_OnOff

	// Create Frame Effect
	FrameAttr *_g.ST_OnOff
}

func (_bgbgg *CT_RecipientData) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bgbgg.Active != nil {
		_bgebg := _d.StartElement{Name: _d.Name{Local: "w:active"}}
		e.EncodeElement(_bgbgg.Active, _bgebg)
	}
	_gbbffg := _d.StartElement{Name: _d.Name{Local: "w:column"}}
	e.EncodeElement(_bgbgg.Column, _gbbffg)
	_eeefd := _d.StartElement{Name: _d.Name{Local: "w:uniqueTag"}}
	e.EncodeElement(_bgbgg.UniqueTag, _eeefd)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_eafbg *WdCT_WordprocessingContentPartNonVisual) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _eafbg.CNvPr != nil {
		_feeadg := _d.StartElement{Name: _d.Name{Local: "wp:cNvPr"}}
		e.EncodeElement(_eafbg.CNvPr, _feeadg)
	}
	if _eafbg.CNvContentPartPr != nil {
		_gaedg := _d.StartElement{Name: _d.Name{Local: "wp:cNvContentPartPr"}}
		e.EncodeElement(_eafbg.CNvContentPartPr, _gaedg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gadeg *ST_TextboxTightWrap) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dffbfa, _eeadf := d.Token()
	if _eeadf != nil {
		return _eeadf
	}
	if _dbbbec, _eebdf := _dffbfa.(_d.EndElement); _eebdf && _dbbbec.Name == start.Name {
		*_gadeg = 1
		return nil
	}
	if _gecbc, _cgcgfb := _dffbfa.(_d.CharData); !_cgcgfb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _dffbfa)
	} else {
		switch string(_gecbc) {
		case "":
			*_gadeg = 0
		case "none":
			*_gadeg = 1
		case "allLines":
			*_gadeg = 2
		case "firstAndLastLine":
			*_gadeg = 3
		case "firstLineOnly":
			*_gadeg = 4
		case "lastLineOnly":
			*_gadeg = 5
		}
	}
	_dffbfa, _eeadf = d.Token()
	if _eeadf != nil {
		return _eeadf
	}
	if _bfbgf, _eadbc := _dffbfa.(_d.EndElement); _eadbc && _bfbgf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _dffbfa)
}
func (_bbddb WdST_RelFromH) Validate() error { return _bbddb.ValidateWithPath("") }
func (_abadf *EG_RunLevelElts) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ggdcg:
	for {
		_fdggaf, _eggec := d.Token()
		if _eggec != nil {
			return _eggec
		}
		switch _aeagb := _fdggaf.(type) {
		case _d.StartElement:
			switch _aeagb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_abadf.ProofErr = NewCT_ProofErr()
				if _ccgcf := d.DecodeElement(_abadf.ProofErr, &_aeagb); _ccgcf != nil {
					return _ccgcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_abadf.PermStart = NewCT_PermStart()
				if _fgcaff := d.DecodeElement(_abadf.PermStart, &_aeagb); _fgcaff != nil {
					return _fgcaff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_abadf.PermEnd = NewCT_Perm()
				if _cgdga := d.DecodeElement(_abadf.PermEnd, &_aeagb); _cgdga != nil {
					return _cgdga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_abadf.Ins = NewCT_RunTrackChange()
				if _aagcbf := d.DecodeElement(_abadf.Ins, &_aeagb); _aagcbf != nil {
					return _aagcbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_abadf.Del = NewCT_RunTrackChange()
				if _gcecfa := d.DecodeElement(_abadf.Del, &_aeagb); _gcecfa != nil {
					return _gcecfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_abadf.MoveFrom = NewCT_RunTrackChange()
				if _caaebf := d.DecodeElement(_abadf.MoveFrom, &_aeagb); _caaebf != nil {
					return _caaebf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_abadf.MoveTo = NewCT_RunTrackChange()
				if _ffagb := d.DecodeElement(_abadf.MoveTo, &_aeagb); _ffagb != nil {
					return _ffagb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_efaac := NewEG_RangeMarkupElements()
				_efaac.BookmarkStart = NewCT_Bookmark()
				if _gcagab := d.DecodeElement(_efaac.BookmarkStart, &_aeagb); _gcagab != nil {
					return _gcagab
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _efaac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_fabeg := NewEG_RangeMarkupElements()
				_fabeg.BookmarkEnd = NewCT_MarkupRange()
				if _faddd := d.DecodeElement(_fabeg.BookmarkEnd, &_aeagb); _faddd != nil {
					return _faddd
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _fabeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_egcdea := NewEG_RangeMarkupElements()
				_egcdea.MoveFromRangeStart = NewCT_MoveBookmark()
				if _eaffa := d.DecodeElement(_egcdea.MoveFromRangeStart, &_aeagb); _eaffa != nil {
					return _eaffa
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _egcdea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_bbede := NewEG_RangeMarkupElements()
				_bbede.MoveFromRangeEnd = NewCT_MarkupRange()
				if _dabfb := d.DecodeElement(_bbede.MoveFromRangeEnd, &_aeagb); _dabfb != nil {
					return _dabfb
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _bbede)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_ceeaab := NewEG_RangeMarkupElements()
				_ceeaab.MoveToRangeStart = NewCT_MoveBookmark()
				if _ffgad := d.DecodeElement(_ceeaab.MoveToRangeStart, &_aeagb); _ffgad != nil {
					return _ffgad
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _ceeaab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_geafb := NewEG_RangeMarkupElements()
				_geafb.MoveToRangeEnd = NewCT_MarkupRange()
				if _fagebd := d.DecodeElement(_geafb.MoveToRangeEnd, &_aeagb); _fagebd != nil {
					return _fagebd
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _geafb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_afgbe := NewEG_RangeMarkupElements()
				_afgbe.CommentRangeStart = NewCT_MarkupRange()
				if _fdaefb := d.DecodeElement(_afgbe.CommentRangeStart, &_aeagb); _fdaefb != nil {
					return _fdaefb
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _afgbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_bffgec := NewEG_RangeMarkupElements()
				_bffgec.CommentRangeEnd = NewCT_MarkupRange()
				if _edgfce := d.DecodeElement(_bffgec.CommentRangeEnd, &_aeagb); _edgfce != nil {
					return _edgfce
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _bffgec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_beaef := NewEG_RangeMarkupElements()
				_beaef.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _ddbbfe := d.DecodeElement(_beaef.CustomXmlInsRangeStart, &_aeagb); _ddbbfe != nil {
					return _ddbbfe
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _beaef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_ebaecf := NewEG_RangeMarkupElements()
				_ebaecf.CustomXmlInsRangeEnd = NewCT_Markup()
				if _dcffg := d.DecodeElement(_ebaecf.CustomXmlInsRangeEnd, &_aeagb); _dcffg != nil {
					return _dcffg
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _ebaecf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_fffff := NewEG_RangeMarkupElements()
				_fffff.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _dgeggd := d.DecodeElement(_fffff.CustomXmlDelRangeStart, &_aeagb); _dgeggd != nil {
					return _dgeggd
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _fffff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_ecgefc := NewEG_RangeMarkupElements()
				_ecgefc.CustomXmlDelRangeEnd = NewCT_Markup()
				if _abgcag := d.DecodeElement(_ecgefc.CustomXmlDelRangeEnd, &_aeagb); _abgcag != nil {
					return _abgcag
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _ecgefc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_cabfag := NewEG_RangeMarkupElements()
				_cabfag.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _gbfff := d.DecodeElement(_cabfag.CustomXmlMoveFromRangeStart, &_aeagb); _gbfff != nil {
					return _gbfff
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _cabfag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_aedag := NewEG_RangeMarkupElements()
				_aedag.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _cedadb := d.DecodeElement(_aedag.CustomXmlMoveFromRangeEnd, &_aeagb); _cedadb != nil {
					return _cedadb
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _aedag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_acgcbc := NewEG_RangeMarkupElements()
				_acgcbc.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _ccegg := d.DecodeElement(_acgcbc.CustomXmlMoveToRangeStart, &_aeagb); _ccegg != nil {
					return _ccegg
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _acgcbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_dbfeb := NewEG_RangeMarkupElements()
				_dbfeb.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _eddbeb := d.DecodeElement(_dbfeb.CustomXmlMoveToRangeEnd, &_aeagb); _eddbeb != nil {
					return _eddbeb
				}
				_abadf.EG_RangeMarkupElements = append(_abadf.EG_RangeMarkupElements, _dbfeb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_dceafg := NewEG_MathContent()
				_dceafg.OMathPara = _f.NewOMathPara()
				if _aeggb := d.DecodeElement(_dceafg.OMathPara, &_aeagb); _aeggb != nil {
					return _aeggb
				}
				_abadf.EG_MathContent = append(_abadf.EG_MathContent, _dceafg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_dcgb := NewEG_MathContent()
				_dcgb.OMath = _f.NewOMath()
				if _fegebe := d.DecodeElement(_dcgb.OMath, &_aeagb); _fegebe != nil {
					return _fegebe
				}
				_abadf.EG_MathContent = append(_abadf.EG_MathContent, _dcgb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_RunLevelElts\u0020\u0025v", _aeagb.Name)
				if _gbdbdc := d.Skip(); _gbdbdc != nil {
					return _gbdbdc
				}
			}
		case _d.EndElement:
			break _ggdcg
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LsdException and its children, prefixing error messages with path
func (_dacge *CT_LsdException) ValidateWithPath(path string) error {
	if _dacge.LockedAttr != nil {
		if _ggdba := _dacge.LockedAttr.ValidateWithPath(path + "/LockedAttr"); _ggdba != nil {
			return _ggdba
		}
	}
	if _dacge.SemiHiddenAttr != nil {
		if _bfffb := _dacge.SemiHiddenAttr.ValidateWithPath(path + "\u002fSemiHiddenAttr"); _bfffb != nil {
			return _bfffb
		}
	}
	if _dacge.UnhideWhenUsedAttr != nil {
		if _ggaga := _dacge.UnhideWhenUsedAttr.ValidateWithPath(path + "\u002fUnhideWhenUsedAttr"); _ggaga != nil {
			return _ggaga
		}
	}
	if _dacge.QFormatAttr != nil {
		if _acdc := _dacge.QFormatAttr.ValidateWithPath(path + "\u002fQFormatAttr"); _acdc != nil {
			return _acdc
		}
	}
	return nil
}
func NewCT_EdnPos() *CT_EdnPos { _gagg := &CT_EdnPos{}; _gagg.ValAttr = ST_EdnPos(1); return _gagg }
func (_aaacg *CT_PBdr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_afega:
	for {
		_adgcg, _gefcg := d.Token()
		if _gefcg != nil {
			return _gefcg
		}
		switch _ffgfgb := _adgcg.(type) {
		case _d.StartElement:
			switch _ffgfgb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "top"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "top"}:
				_aaacg.Top = NewCT_Border()
				if _afded := d.DecodeElement(_aaacg.Top, &_ffgfgb); _afded != nil {
					return _afded
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "left"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "left"}:
				_aaacg.Left = NewCT_Border()
				if _ccbc := d.DecodeElement(_aaacg.Left, &_ffgfgb); _ccbc != nil {
					return _ccbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bottom"}:
				_aaacg.Bottom = NewCT_Border()
				if _dgcf := d.DecodeElement(_aaacg.Bottom, &_ffgfgb); _dgcf != nil {
					return _dgcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "right"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "right"}:
				_aaacg.Right = NewCT_Border()
				if _fcdba := d.DecodeElement(_aaacg.Right, &_ffgfgb); _fcdba != nil {
					return _fcdba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "between"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "between"}:
				_aaacg.Between = NewCT_Border()
				if _adbffe := d.DecodeElement(_aaacg.Between, &_ffgfgb); _adbffe != nil {
					return _adbffe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bar"}:
				_aaacg.Bar = NewCT_Border()
				if _cbgga := d.DecodeElement(_aaacg.Bar, &_ffgfgb); _cbgga != nil {
					return _cbgga
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_PBdr\u0020\u0025v", _ffgfgb.Name)
				if _dgadb := d.Skip(); _dgadb != nil {
					return _dgadb
				}
			}
		case _d.EndElement:
			break _afega
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Divs and its children, prefixing error messages with path
func (_bfff *CT_Divs) ValidateWithPath(path string) error {
	for _ddabe, _cfde := range _bfff.Div {
		if _bcbf := _cfde.ValidateWithPath(_b.Sprintf("\u0025s\u002fDiv\u005b\u0025d\u005d", path, _ddabe)); _bcbf != nil {
			return _bcbf
		}
	}
	return nil
}

// Validate validates the CT_CellMergeTrackChange and its children
func (_aagb *CT_CellMergeTrackChange) Validate() error {
	return _aagb.ValidateWithPath("CT_CellMergeTrackChange")
}
func (_dfcac *CT_FFCheckBoxChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dfcac.Size != nil {
		_egfef := _d.StartElement{Name: _d.Name{Local: "w:size"}}
		e.EncodeElement(_dfcac.Size, _egfef)
	}
	if _dfcac.SizeAuto != nil {
		_baggf := _d.StartElement{Name: _d.Name{Local: "w:sizeAuto"}}
		e.EncodeElement(_dfcac.SizeAuto, _baggf)
	}
	return nil
}
func (_fbgf *CT_Div) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _fbgf.IdAttr)})
	e.EncodeToken(start)
	if _fbgf.BlockQuote != nil {
		_eggbf := _d.StartElement{Name: _d.Name{Local: "w:blockQuote"}}
		e.EncodeElement(_fbgf.BlockQuote, _eggbf)
	}
	if _fbgf.BodyDiv != nil {
		_ffffb := _d.StartElement{Name: _d.Name{Local: "w:bodyDiv"}}
		e.EncodeElement(_fbgf.BodyDiv, _ffffb)
	}
	_bgea := _d.StartElement{Name: _d.Name{Local: "w:marLeft"}}
	e.EncodeElement(_fbgf.MarLeft, _bgea)
	_gaefg := _d.StartElement{Name: _d.Name{Local: "w:marRight"}}
	e.EncodeElement(_fbgf.MarRight, _gaefg)
	_ggfa := _d.StartElement{Name: _d.Name{Local: "w:marTop"}}
	e.EncodeElement(_fbgf.MarTop, _ggfa)
	_ceeg := _d.StartElement{Name: _d.Name{Local: "w:marBottom"}}
	e.EncodeElement(_fbgf.MarBottom, _ceeg)
	if _fbgf.DivBdr != nil {
		_fbce := _d.StartElement{Name: _d.Name{Local: "w:divBdr"}}
		e.EncodeElement(_fbgf.DivBdr, _fbce)
	}
	if _fbgf.DivsChild != nil {
		_gedg := _d.StartElement{Name: _d.Name{Local: "w:divsChild"}}
		for _, _fgcb := range _fbgf.DivsChild {
			e.EncodeElement(_fgcb, _gedg)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_TblGridChange() *CT_TblGridChange {
	_cbgeca := &CT_TblGridChange{}
	_cbgeca.TblGrid = NewCT_TblGridBase()
	return _cbgeca
}
func NewCT_TwipsMeasure() *CT_TwipsMeasure { _cgdcg := &CT_TwipsMeasure{}; return _cgdcg }
func NewCT_Sym() *CT_Sym                   { _ggcgb := &CT_Sym{}; return _ggcgb }
func (_efdgc *EG_MathContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fbdbce:
	for {
		_bfbfa, _gcffd := d.Token()
		if _gcffd != nil {
			return _gcffd
		}
		switch _efegfc := _bfbfa.(type) {
		case _d.StartElement:
			switch _efegfc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_efdgc.OMathPara = _f.NewOMathPara()
				if _gedad := d.DecodeElement(_efdgc.OMathPara, &_efegfc); _gedad != nil {
					return _gedad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_efdgc.OMath = _f.NewOMath()
				if _bfbbc := d.DecodeElement(_efdgc.OMath, &_efegfc); _bfbbc != nil {
					return _bfbbc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_MathContent\u0020\u0025v", _efegfc.Name)
				if _ccdgff := d.Skip(); _ccdgff != nil {
					return _ccdgff
				}
			}
		case _d.EndElement:
			break _fbdbce
		case _d.CharData:
		}
	}
	return nil
}
func (_ccced *CT_FontSig) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:usb0"}, Value: _b.Sprintf("\u0025v", _ccced.Usb0Attr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:usb1"}, Value: _b.Sprintf("\u0025v", _ccced.Usb1Attr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:usb2"}, Value: _b.Sprintf("\u0025v", _ccced.Usb2Attr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:usb3"}, Value: _b.Sprintf("\u0025v", _ccced.Usb3Attr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:csb0"}, Value: _b.Sprintf("\u0025v", _ccced.Csb0Attr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:csb1"}, Value: _b.Sprintf("\u0025v", _ccced.Csb1Attr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fafged ST_HdrFtr) ValidateWithPath(path string) error {
	switch _fafged {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fafged))
	}
	return nil
}
func (_cfbag *CT_RubyPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_aabgfc := _d.StartElement{Name: _d.Name{Local: "w:rubyAlign"}}
	e.EncodeElement(_cfbag.RubyAlign, _aabgfc)
	_bcfae := _d.StartElement{Name: _d.Name{Local: "w:hps"}}
	e.EncodeElement(_cfbag.Hps, _bcfae)
	_fabgb := _d.StartElement{Name: _d.Name{Local: "w:hpsRaise"}}
	e.EncodeElement(_cfbag.HpsRaise, _fabgb)
	_egdcb := _d.StartElement{Name: _d.Name{Local: "w:hpsBaseText"}}
	e.EncodeElement(_cfbag.HpsBaseText, _egdcb)
	_fccdc := _d.StartElement{Name: _d.Name{Local: "w:lid"}}
	e.EncodeElement(_cfbag.Lid, _fccdc)
	if _cfbag.Dirty != nil {
		_fafaf := _d.StartElement{Name: _d.Name{Local: "w:dirty"}}
		e.EncodeElement(_cfbag.Dirty, _fafaf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_deggf *CT_TextScale) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _deggf.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_deggf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfffa ST_CaptionPos) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_ebbdbc := _d.Attr{}
	_ebbdbc.Name = name
	switch _cfffa {
	case ST_CaptionPosUnset:
		_ebbdbc.Value = ""
	case ST_CaptionPosAbove:
		_ebbdbc.Value = "above"
	case ST_CaptionPosBelow:
		_ebbdbc.Value = "below"
	case ST_CaptionPosLeft:
		_ebbdbc.Value = "left"
	case ST_CaptionPosRight:
		_ebbdbc.Value = "right"
	}
	return _ebbdbc, nil
}

type ST_SdtDateMappingType byte

const (
	ST_FrameScrollbarUnset ST_FrameScrollbar = 0
	ST_FrameScrollbarOn    ST_FrameScrollbar = 1
	ST_FrameScrollbarOff   ST_FrameScrollbar = 2
	ST_FrameScrollbarAuto  ST_FrameScrollbar = 3
)

// Validate validates the CT_AbstractNum and its children
func (_aff *CT_AbstractNum) Validate() error { return _aff.ValidateWithPath("CT_AbstractNum") }
func (_dgfbdd ST_HeightRule) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fggee := _d.Attr{}
	_fggee.Name = name
	switch _dgfbdd {
	case ST_HeightRuleUnset:
		_fggee.Value = ""
	case ST_HeightRuleAuto:
		_fggee.Value = "auto"
	case ST_HeightRuleExact:
		_fggee.Value = "exact"
	case ST_HeightRuleAtLeast:
		_fggee.Value = "atLeast"
	}
	return _fggee, nil
}
func (_agaedd *WdEG_WrapType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _agaedd.Choice != nil {
		_agaedd.Choice.MarshalXML(e, _d.StartElement{})
	}
	return nil
}
func NewCT_SdtContentRun() *CT_SdtContentRun { _accff := &CT_SdtContentRun{}; return _accff }
func NewCT_SimpleField() *CT_SimpleField     { _bggfd := &CT_SimpleField{}; return _bggfd }

type CT_SdtDateMappingType struct {

	// Date Storage Type
	ValAttr ST_SdtDateMappingType
}

func NewCT_BookmarkRange() *CT_BookmarkRange { _beae := &CT_BookmarkRange{}; return _beae }

// ValidateWithPath validates the CT_SignedHpsMeasure and its children, prefixing error messages with path
func (_fgbfc *CT_SignedHpsMeasure) ValidateWithPath(path string) error {
	if _afeddf := _fgbfc.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _afeddf != nil {
		return _afeddf
	}
	return nil
}

type CT_DocPartTypes struct {

	// Entry Is Of All Types
	AllAttr *_g.ST_OnOff

	// Entry Type
	Type []*CT_DocPartType
}

const (
	ST_DocPartTypeUnset    ST_DocPartType = 0
	ST_DocPartTypeNone     ST_DocPartType = 1
	ST_DocPartTypeNormal   ST_DocPartType = 2
	ST_DocPartTypeAutoExp  ST_DocPartType = 3
	ST_DocPartTypeToolbar  ST_DocPartType = 4
	ST_DocPartTypeSpeller  ST_DocPartType = 5
	ST_DocPartTypeFormFld  ST_DocPartType = 6
	ST_DocPartTypeBbPlcHdr ST_DocPartType = 7
)

func NewFonts() *Fonts { _cadgc := &Fonts{}; _cadgc.CT_FontsList = *NewCT_FontsList(); return _cadgc }
func (_ccg *CT_AutoCaptions) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_eff:
	for {
		_egea, _bca := d.Token()
		if _bca != nil {
			return _bca
		}
		switch _ead := _egea.(type) {
		case _d.StartElement:
			switch _ead.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoCaption"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoCaption"}:
				_cbd := NewCT_AutoCaption()
				if _fdgeg := d.DecodeElement(_cbd, &_ead); _fdgeg != nil {
					return _fdgeg
				}
				_ccg.AutoCaption = append(_ccg.AutoCaption, _cbd)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_AutoCaptions\u0020\u0025v", _ead.Name)
				if _bbe := d.Skip(); _bbe != nil {
					return _bbe
				}
			}
		case _d.EndElement:
			break _eff
		case _d.CharData:
		}
	}
	return nil
}
func (_gcbgd *CT_PBdr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gcbgd.Top != nil {
		_bbffa := _d.StartElement{Name: _d.Name{Local: "w:top"}}
		e.EncodeElement(_gcbgd.Top, _bbffa)
	}
	if _gcbgd.Left != nil {
		_fbagf := _d.StartElement{Name: _d.Name{Local: "w:left"}}
		e.EncodeElement(_gcbgd.Left, _fbagf)
	}
	if _gcbgd.Bottom != nil {
		_fcaaec := _d.StartElement{Name: _d.Name{Local: "w:bottom"}}
		e.EncodeElement(_gcbgd.Bottom, _fcaaec)
	}
	if _gcbgd.Right != nil {
		_eeecf := _d.StartElement{Name: _d.Name{Local: "w:right"}}
		e.EncodeElement(_gcbgd.Right, _eeecf)
	}
	if _gcbgd.Between != nil {
		_begcf := _d.StartElement{Name: _d.Name{Local: "w:between"}}
		e.EncodeElement(_gcbgd.Between, _begcf)
	}
	if _gcbgd.Bar != nil {
		_fecbd := _d.StartElement{Name: _d.Name{Local: "w:bar"}}
		e.EncodeElement(_gcbgd.Bar, _fecbd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Spacing struct {

	// Spacing Above Paragraph
	BeforeAttr *_g.ST_TwipsMeasure

	// Spacing Above Paragraph IN Line Units
	BeforeLinesAttr *int64

	// Automatically Determine Spacing Above Paragraph
	BeforeAutospacingAttr *_g.ST_OnOff

	// Spacing Below Paragraph
	AfterAttr *_g.ST_TwipsMeasure

	// Spacing Below Paragraph in Line Units
	AfterLinesAttr *int64

	// Automatically Determine Spacing Below Paragraph
	AfterAutospacingAttr *_g.ST_OnOff

	// Spacing Between Lines in Paragraph
	LineAttr *ST_SignedTwipsMeasure

	// Spacing Between Lines
	LineRuleAttr ST_LineSpacingRule
}
type CT_ReadingModeInkLockDown struct {

	// Use Actual Pages, Not Virtual Pages
	ActualPgAttr _g.ST_OnOff

	// Virtual Page Width
	WAttr uint64

	// Virtual Page Height
	HAttr uint64

	// Font Size Scaling
	FontSzAttr ST_DecimalNumberOrPercent
}

// Validate validates the CT_EdnPos and its children
func (_accfd *CT_EdnPos) Validate() error { return _accfd.ValidateWithPath("CT_EdnPos") }

// ValidateWithPath validates the WdCT_WordprocessingShapeChoice1 and its children, prefixing error messages with path
func (_agegd *WdCT_WordprocessingShapeChoice1) ValidateWithPath(path string) error {
	if _agegd.Txbx != nil {
		if _cgfcec := _agegd.Txbx.ValidateWithPath(path + "\u002fTxbx"); _cgfcec != nil {
			return _cgfcec
		}
	}
	if _agegd.LinkedTxbx != nil {
		if _adddbd := _agegd.LinkedTxbx.ValidateWithPath(path + "/LinkedTxbx"); _adddbd != nil {
			return _adddbd
		}
	}
	return nil
}
func (_deaaae ST_PageBorderDisplay) Validate() error { return _deaaae.ValidateWithPath("") }
func (_eaac *CT_SectPrChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _aedfa := range start.Attr {
		if _aedfa.Name.Local == "author" {
			_fbecbb, _affba := _aedfa.Value, error(nil)
			if _affba != nil {
				return _affba
			}
			_eaac.AuthorAttr = _fbecbb
			continue
		}
		if _aedfa.Name.Local == "date" {
			_dcbgae, _bcacf := ParseStdlibTime(_aedfa.Value)
			if _bcacf != nil {
				return _bcacf
			}
			_eaac.DateAttr = &_dcbgae
			continue
		}
		if _aedfa.Name.Local == "id" {
			_ggbafd, _efaec := _dd.ParseInt(_aedfa.Value, 10, 64)
			if _efaec != nil {
				return _efaec
			}
			_eaac.IdAttr = _ggbafd
			continue
		}
	}
_gfcef:
	for {
		_abbce, _eebdb := d.Token()
		if _eebdb != nil {
			return _eebdb
		}
		switch _bceaae := _abbce.(type) {
		case _d.StartElement:
			switch _bceaae.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sectPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sectPr"}:
				_eaac.SectPr = NewCT_SectPrBase()
				if _ddafgf := d.DecodeElement(_eaac.SectPr, &_bceaae); _ddafgf != nil {
					return _ddafgf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SectPrChange\u0020\u0025v", _bceaae.Name)
				if _bfcecd := d.Skip(); _bfcecd != nil {
					return _bfcecd
				}
			}
		case _d.EndElement:
			break _gfcef
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_SdtRow() *CT_SdtRow                    { _fedadg := &CT_SdtRow{}; return _fedadg }
func (_dadceb ST_HighlightColor) Validate() error { return _dadceb.ValidateWithPath("") }
func NewDocument() *Document {
	_egcacf := &Document{}
	_egcacf.CT_Document = *NewCT_Document()
	return _egcacf
}

// Validate validates the CT_BottomPageBorder and its children
func (_cafe *CT_BottomPageBorder) Validate() error {
	return _cafe.ValidateWithPath("CT_BottomPageBorder")
}
func (_baggfb *CT_TblPrEx) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _baggfb.TblW != nil {
		_abgfed := _d.StartElement{Name: _d.Name{Local: "w:tblW"}}
		e.EncodeElement(_baggfb.TblW, _abgfed)
	}
	if _baggfb.Jc != nil {
		_adfda := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		e.EncodeElement(_baggfb.Jc, _adfda)
	}
	if _baggfb.TblCellSpacing != nil {
		_fafda := _d.StartElement{Name: _d.Name{Local: "w:tblCellSpacing"}}
		e.EncodeElement(_baggfb.TblCellSpacing, _fafda)
	}
	if _baggfb.TblInd != nil {
		_ffecf := _d.StartElement{Name: _d.Name{Local: "w:tblInd"}}
		e.EncodeElement(_baggfb.TblInd, _ffecf)
	}
	if _baggfb.TblBorders != nil {
		_degda := _d.StartElement{Name: _d.Name{Local: "w:tblBorders"}}
		e.EncodeElement(_baggfb.TblBorders, _degda)
	}
	if _baggfb.Shd != nil {
		_bgbbf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_baggfb.Shd, _bgbbf)
	}
	if _baggfb.TblLayout != nil {
		_fdggbg := _d.StartElement{Name: _d.Name{Local: "w:tblLayout"}}
		e.EncodeElement(_baggfb.TblLayout, _fdggbg)
	}
	if _baggfb.TblCellMar != nil {
		_eccacb := _d.StartElement{Name: _d.Name{Local: "w:tblCellMar"}}
		e.EncodeElement(_baggfb.TblCellMar, _eccacb)
	}
	if _baggfb.TblLook != nil {
		_bbccgge := _d.StartElement{Name: _d.Name{Local: "w:tblLook"}}
		e.EncodeElement(_baggfb.TblLook, _bbccgge)
	}
	if _baggfb.TblPrExChange != nil {
		_ebfdd := _d.StartElement{Name: _d.Name{Local: "w:tblPrExChange"}}
		e.EncodeElement(_baggfb.TblPrExChange, _ebfdd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cdcdc *CT_HdrFtrRef) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_caagf, _eedf := _cdcdc.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
	if _eedf != nil {
		return _eedf
	}
	start.Attr = append(start.Attr, _caagf)
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", _cdcdc.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type WdWpc struct{ WdCT_WordprocessingCanvas }

func (_geeec *Settings) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:settings"
	return _geeec.CT_Settings.MarshalXML(e, start)
}
func (_efeffc ST_StyleSort) ValidateWithPath(path string) error {
	switch _efeffc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_efeffc))
	}
	return nil
}

type CT_Tc struct {

	// Table Cell Identifier
	IdAttr *string

	// Table Cell Properties
	TcPr              *CT_TcPr
	EG_BlockLevelElts []*EG_BlockLevelElts
}

func (_cgfcf ST_TblLayoutType) ValidateWithPath(path string) error {
	switch _cgfcf {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cgfcf))
	}
	return nil
}
func (_fdgcc *CT_LineNumber) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fdgcc.CountByAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:countBy"}, Value: _b.Sprintf("\u0025v", *_fdgcc.CountByAttr)})
	}
	if _fdgcc.StartAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:start"}, Value: _b.Sprintf("\u0025v", *_fdgcc.StartAttr)})
	}
	if _fdgcc.DistanceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:distance"}, Value: _b.Sprintf("\u0025v", *_fdgcc.DistanceAttr)})
	}
	if _fdgcc.RestartAttr != ST_LineNumberRestartUnset {
		_dgdd, _cbffa := _fdgcc.RestartAttr.MarshalXMLAttr(_d.Name{Local: "w:restart"})
		if _cbffa != nil {
			return _cbffa
		}
		start.Attr = append(start.Attr, _dgdd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_TblGridBase() *CT_TblGridBase { _ebbee := &CT_TblGridBase{}; return _ebbee }
func NewCT_AltChunk() *CT_AltChunk       { _fbf := &CT_AltChunk{}; return _fbf }

type ST_CaptionPos byte

func (_bgfb *CT_FFHelpText) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _acgcb := range start.Attr {
		if _acgcb.Name.Local == "type" {
			_bgfb.TypeAttr.UnmarshalXMLAttr(_acgcb)
			continue
		}
		if _acgcb.Name.Local == "val" {
			_dfab, _aeef := _acgcb.Value, error(nil)
			if _aeef != nil {
				return _aeef
			}
			_bgfb.ValAttr = &_dfab
			continue
		}
	}
	for {
		_edee, _bdfcg := d.Token()
		if _bdfcg != nil {
			return _b.Errorf("parsing\u0020CT_FFHelpText:\u0020\u0025s", _bdfcg)
		}
		if _efadf, _fgea := _edee.(_d.EndElement); _fgea && _efadf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gdabcc ST_FrameScrollbar) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bfacc := _d.Attr{}
	_bfacc.Name = name
	switch _gdabcc {
	case ST_FrameScrollbarUnset:
		_bfacc.Value = ""
	case ST_FrameScrollbarOn:
		_bfacc.Value = "on"
	case ST_FrameScrollbarOff:
		_bfacc.Value = "off"
	case ST_FrameScrollbarAuto:
		_bfacc.Value = "auto"
	}
	return _bfacc, nil
}
func (_baeabe ST_TextEffect) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_baeabe.String(), start)
}

// ValidateWithPath validates the CT_HdrFtr and its children, prefixing error messages with path
func (_aabec *CT_HdrFtr) ValidateWithPath(path string) error {
	for _cbaeg, _dgfd := range _aabec.AltChunk {
		if _fgedd := _dgfd.ValidateWithPath(_b.Sprintf("\u0025s\u002fAltChunk\u005b\u0025d\u005d", path, _cbaeg)); _fgedd != nil {
			return _fgedd
		}
	}
	for _agcbc, _dddge := range _aabec.EG_ContentBlockContent {
		if _fgbfe := _dddge.ValidateWithPath(_b.Sprintf("\u0025s/EG_ContentBlockContent[%d\u005d", path, _agcbc)); _fgbfe != nil {
			return _fgbfe
		}
	}
	return nil
}
func (_ggbfbd ST_TblWidth) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ggbfbd.String(), start)
}
func (_dfgge *CT_TopPageBorder) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfgge.ValAttr = ST_Border(1)
	for _, _eedef := range start.Attr {
		if _eedef.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _eedef.Name.Local == "topLeft" || _eedef.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _eedef.Name.Local == "topLeft" {
			_acdbc, _eddcd := _eedef.Value, error(nil)
			if _eddcd != nil {
				return _eddcd
			}
			_dfgge.TopLeftAttr = &_acdbc
			continue
		}
		if _eedef.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _eedef.Name.Local == "topRight" || _eedef.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _eedef.Name.Local == "topRight" {
			_fbegcc, _gbbc := _eedef.Value, error(nil)
			if _gbbc != nil {
				return _gbbc
			}
			_dfgge.TopRightAttr = &_fbegcc
			continue
		}
		if _eedef.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _eedef.Name.Local == "id" || _eedef.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _eedef.Name.Local == "id" {
			_eeaab, _aaagd := _eedef.Value, error(nil)
			if _aaagd != nil {
				return _aaagd
			}
			_dfgge.IdAttr = &_eeaab
			continue
		}
		if _eedef.Name.Local == "val" {
			_dfgge.ValAttr.UnmarshalXMLAttr(_eedef)
			continue
		}
		if _eedef.Name.Local == "color" {
			_acgffa, _aeafc := ParseUnionST_HexColor(_eedef.Value)
			if _aeafc != nil {
				return _aeafc
			}
			_dfgge.ColorAttr = &_acgffa
			continue
		}
		if _eedef.Name.Local == "themeColor" {
			_dfgge.ThemeColorAttr.UnmarshalXMLAttr(_eedef)
			continue
		}
		if _eedef.Name.Local == "themeTint" {
			_gacacf, _eeefdd := _eedef.Value, error(nil)
			if _eeefdd != nil {
				return _eeefdd
			}
			_dfgge.ThemeTintAttr = &_gacacf
			continue
		}
		if _eedef.Name.Local == "themeShade" {
			_gaebe, _efgbe := _eedef.Value, error(nil)
			if _efgbe != nil {
				return _efgbe
			}
			_dfgge.ThemeShadeAttr = &_gaebe
			continue
		}
		if _eedef.Name.Local == "sz" {
			_ddfege, _eaafe := _dd.ParseUint(_eedef.Value, 10, 64)
			if _eaafe != nil {
				return _eaafe
			}
			_dfgge.SzAttr = &_ddfege
			continue
		}
		if _eedef.Name.Local == "space" {
			_gadc, _bbdea := _dd.ParseUint(_eedef.Value, 10, 64)
			if _bbdea != nil {
				return _bbdea
			}
			_dfgge.SpaceAttr = &_gadc
			continue
		}
		if _eedef.Name.Local == "shadow" {
			_dedgd, _geedf := ParseUnionST_OnOff(_eedef.Value)
			if _geedf != nil {
				return _geedf
			}
			_dfgge.ShadowAttr = &_dedgd
			continue
		}
		if _eedef.Name.Local == "frame" {
			_bbbaef, _gaaeee := ParseUnionST_OnOff(_eedef.Value)
			if _gaaeee != nil {
				return _gaaeee
			}
			_dfgge.FrameAttr = &_bbbaef
			continue
		}
	}
	for {
		_fdbebf, _dgdbf := d.Token()
		if _dgdbf != nil {
			return _b.Errorf("parsing\u0020CT_TopPageBorder: \u0025s", _dgdbf)
		}
		if _bcacfb, _adfge := _fdbebf.(_d.EndElement); _adfge && _bcacfb.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_TextAlignmentUnset    ST_TextAlignment = 0
	ST_TextAlignmentTop      ST_TextAlignment = 1
	ST_TextAlignmentCenter   ST_TextAlignment = 2
	ST_TextAlignmentBaseline ST_TextAlignment = 3
	ST_TextAlignmentBottom   ST_TextAlignment = 4
	ST_TextAlignmentAuto     ST_TextAlignment = 5
)

type CT_SectPr struct {
	EG_HdrFtrReferences []*EG_HdrFtrReferences

	// Section-Wide Footnote Properties
	FootnotePr *CT_FtnProps

	// Section-Wide Endnote Properties
	EndnotePr *CT_EdnProps

	// Section Type
	Type *CT_SectType

	// Page Size
	PgSz *CT_PageSz

	// Page Margins
	PgMar *CT_PageMar

	// Paper Source Information
	PaperSrc *CT_PaperSource

	// Page Borders
	PgBorders *CT_PageBorders

	// Line Numbering Settings
	LnNumType *CT_LineNumber

	// Page Numbering Settings
	PgNumType *CT_PageNumber

	// Column Definitions
	Cols *CT_Columns

	// Only Allow Editing of Form Fields
	FormProt *CT_OnOff

	// Vertical Text Alignment on Page
	VAlign *CT_VerticalJc

	// Suppress Endnotes In Document
	NoEndnote *CT_OnOff

	// Different First Page Headers and Footers
	TitlePg *CT_OnOff

	// Text Flow Direction
	TextDirection *CT_TextDirection

	// Right to Left Section Layout
	Bidi *CT_OnOff

	// Gutter on Right Side of Page
	RtlGutter *CT_OnOff

	// Document Grid
	DocGrid *CT_DocGrid

	// Reference to Printer Settings Data
	PrinterSettings *CT_Rel

	// Revision Information for Section Properties
	SectPrChange *CT_SectPrChange
	RsidRPrAttr  *string
	RsidDelAttr  *string
	RsidRAttr    *string
	RsidSectAttr *string
}

// Validate validates the CT_DocPartBehaviors and its children
func (_eefda *CT_DocPartBehaviors) Validate() error {
	return _eefda.ValidateWithPath("CT_DocPartBehaviors")
}
func (_agdgdg *ST_VerticalJc) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_agdgdg = 0
	case "top":
		*_agdgdg = 1
	case "center":
		*_agdgdg = 2
	case "both":
		*_agdgdg = 3
	case "bottom":
		*_agdgdg = 4
	}
	return nil
}
func (_fdgega *ST_SectionMark) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_acbde, _abfde := d.Token()
	if _abfde != nil {
		return _abfde
	}
	if _agfggb, _fdfeec := _acbde.(_d.EndElement); _fdfeec && _agfggb.Name == start.Name {
		*_fdgega = 1
		return nil
	}
	if _agbfbc, _gbcgd := _acbde.(_d.CharData); !_gbcgd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _acbde)
	} else {
		switch string(_agbfbc) {
		case "":
			*_fdgega = 0
		case "nextPage":
			*_fdgega = 1
		case "nextColumn":
			*_fdgega = 2
		case "continuous":
			*_fdgega = 3
		case "evenPage":
			*_fdgega = 4
		case "oddPage":
			*_fdgega = 5
		}
	}
	_acbde, _abfde = d.Token()
	if _abfde != nil {
		return _abfde
	}
	if _cgebb, _fbcgg := _acbde.(_d.EndElement); _fbcgg && _cgebb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _acbde)
}
func (_gfgdab *ST_TblStyleOverrideType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eafcec, _cgccgg := d.Token()
	if _cgccgg != nil {
		return _cgccgg
	}
	if _fagdgb, _gacdde := _eafcec.(_d.EndElement); _gacdde && _fagdgb.Name == start.Name {
		*_gfgdab = 1
		return nil
	}
	if _ccbbd, _adadbc := _eafcec.(_d.CharData); !_adadbc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _eafcec)
	} else {
		switch string(_ccbbd) {
		case "":
			*_gfgdab = 0
		case "wholeTable":
			*_gfgdab = 1
		case "firstRow":
			*_gfgdab = 2
		case "lastRow":
			*_gfgdab = 3
		case "firstCol":
			*_gfgdab = 4
		case "lastCol":
			*_gfgdab = 5
		case "band1Vert":
			*_gfgdab = 6
		case "band2Vert":
			*_gfgdab = 7
		case "band1Horz":
			*_gfgdab = 8
		case "band2Horz":
			*_gfgdab = 9
		case "neCell":
			*_gfgdab = 10
		case "nwCell":
			*_gfgdab = 11
		case "seCell":
			*_gfgdab = 12
		case "swCell":
			*_gfgdab = 13
		}
	}
	_eafcec, _cgccgg = d.Token()
	if _cgccgg != nil {
		return _cgccgg
	}
	if _fdcfba, _bfcfae := _eafcec.(_d.EndElement); _bfcfae && _fdcfba.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _eafcec)
}
func (_bgced *WdCT_PosH) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_ececef, _gfaba := _bgced.RelativeFromAttr.MarshalXMLAttr(_d.Name{Local: "relativeFrom"})
	if _gfaba != nil {
		return _gfaba
	}
	start.Attr = append(start.Attr, _ececef)
	e.EncodeToken(start)
	_bgced.Choice.MarshalXML(e, _d.StartElement{})
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_DocProtect() *CT_DocProtect { _gefc := &CT_DocProtect{}; return _gefc }
func NewWdWgp() *WdWgp {
	_edfagg := &WdWgp{}
	_edfagg.WdCT_WordprocessingGroup = *NewWdCT_WordprocessingGroup()
	return _edfagg
}
func NewCT_SignedHpsMeasure() *CT_SignedHpsMeasure { _baffc := &CT_SignedHpsMeasure{}; return _baffc }
func (_ebefbda *WdCT_PosV) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_abcfc, _ffbef := _ebefbda.RelativeFromAttr.MarshalXMLAttr(_d.Name{Local: "relativeFrom"})
	if _ffbef != nil {
		return _ffbef
	}
	start.Attr = append(start.Attr, _abcfc)
	e.EncodeToken(start)
	_ebefbda.Choice.MarshalXML(e, _d.StartElement{})
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the TxbxContent and its children
func (_bebccf *TxbxContent) Validate() error { return _bebccf.ValidateWithPath("TxbxContent") }
func (_adecc *CT_TblBorders) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _adecc.Top != nil {
		_ggfgb := _d.StartElement{Name: _d.Name{Local: "w:top"}}
		e.EncodeElement(_adecc.Top, _ggfgb)
	}
	if _adecc.Start != nil {
		_fgebfc := _d.StartElement{Name: _d.Name{Local: "w:start"}}
		e.EncodeElement(_adecc.Start, _fgebfc)
	}
	if _adecc.Left != nil {
		_gagdc := _d.StartElement{Name: _d.Name{Local: "w:left"}}
		e.EncodeElement(_adecc.Left, _gagdc)
	}
	if _adecc.Bottom != nil {
		_egbdc := _d.StartElement{Name: _d.Name{Local: "w:bottom"}}
		e.EncodeElement(_adecc.Bottom, _egbdc)
	}
	if _adecc.End != nil {
		_fafddc := _d.StartElement{Name: _d.Name{Local: "w:end"}}
		e.EncodeElement(_adecc.End, _fafddc)
	}
	if _adecc.Right != nil {
		_abbgbf := _d.StartElement{Name: _d.Name{Local: "w:right"}}
		e.EncodeElement(_adecc.Right, _abbgbf)
	}
	if _adecc.InsideH != nil {
		_edged := _d.StartElement{Name: _d.Name{Local: "w:insideH"}}
		e.EncodeElement(_adecc.InsideH, _edged)
	}
	if _adecc.InsideV != nil {
		_bafgdd := _d.StartElement{Name: _d.Name{Local: "w:insideV"}}
		e.EncodeElement(_adecc.InsideV, _bafgdd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfeff *CT_Caption) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _cfeff.NameAttr)})
	if _cfeff.PosAttr != ST_CaptionPosUnset {
		_fcea, _abac := _cfeff.PosAttr.MarshalXMLAttr(_d.Name{Local: "w:pos"})
		if _abac != nil {
			return _abac
		}
		start.Attr = append(start.Attr, _fcea)
	}
	if _cfeff.ChapNumAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:chapNum"}, Value: _b.Sprintf("\u0025v", *_cfeff.ChapNumAttr)})
	}
	if _cfeff.HeadingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:heading"}, Value: _b.Sprintf("\u0025v", *_cfeff.HeadingAttr)})
	}
	if _cfeff.NoLabelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:noLabel"}, Value: _b.Sprintf("\u0025v", *_cfeff.NoLabelAttr)})
	}
	if _cfeff.NumFmtAttr != ST_NumberFormatUnset {
		_faad, _agg := _cfeff.NumFmtAttr.MarshalXMLAttr(_d.Name{Local: "w:numFmt"})
		if _agg != nil {
			return _agg
		}
		start.Attr = append(start.Attr, _faad)
	}
	if _cfeff.SepAttr != ST_ChapterSepUnset {
		_eda, _fecf := _cfeff.SepAttr.MarshalXMLAttr(_d.Name{Local: "w:sep"})
		if _fecf != nil {
			return _fecf
		}
		start.Attr = append(start.Attr, _eda)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the Recipients and its children, prefixing error messages with path
func (_dbdfb *Recipients) ValidateWithPath(path string) error {
	if _fccgg := _dbdfb.CT_Recipients.ValidateWithPath(path); _fccgg != nil {
		return _fccgg
	}
	return nil
}

type CT_DocPartBehavior struct {

	// Insertion Behavior Value
	ValAttr ST_DocPartBehavior
}

func NewHdr() *Hdr { _fgeeg := &Hdr{}; _fgeeg.CT_HdrFtr = *NewCT_HdrFtr(); return _fgeeg }

type CT_SdtComboBox struct {

	// Combo Box Last Saved Value
	LastValueAttr *string

	// Combo Box List Item
	ListItem []*CT_SdtListItem
}
type CT_FFName struct {

	// Form Field Name Value
	ValAttr *string
}

func (_gcada ST_HAnchor) Validate() error { return _gcada.ValidateWithPath("") }
func (_abba *CT_Columns) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _abba.EqualWidthAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:equalWidth"}, Value: _b.Sprintf("\u0025v", *_abba.EqualWidthAttr)})
	}
	if _abba.SpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:space"}, Value: _b.Sprintf("\u0025v", *_abba.SpaceAttr)})
	}
	if _abba.NumAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:num"}, Value: _b.Sprintf("\u0025v", *_abba.NumAttr)})
	}
	if _abba.SepAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:sep"}, Value: _b.Sprintf("\u0025v", *_abba.SepAttr)})
	}
	e.EncodeToken(start)
	_eedd := _d.StartElement{Name: _d.Name{Local: "w:col"}}
	for _, _ccefa := range _abba.Col {
		e.EncodeElement(_ccefa, _eedd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_FFData struct {

	// Form Field Name
	Name []*CT_FFName

	// Form Field Label
	Label []*CT_DecimalNumber

	// Form Field Navigation Order Index
	TabIndex []*CT_UnsignedDecimalNumber

	// Form Field Enabled
	Enabled []*CT_OnOff

	// Recalculate Fields When Current Field Is Modified
	CalcOnExit []*CT_OnOff

	// Script Function to Execute on Form Field Entry
	EntryMacro []*CT_MacroName

	// Script Function to Execute on Form Field Exit
	ExitMacro []*CT_MacroName

	// Associated Help Text
	HelpText []*CT_FFHelpText

	// Associated Status Text
	StatusText []*CT_FFStatusText
	CheckBox   *CT_FFCheckBox
	DdList     *CT_FFDDList
	TextInput  *CT_FFTextInput
}

func NewCT_Zoom() *CT_Zoom { _bdadf := &CT_Zoom{}; return _bdadf }
func (_cgcefa ST_JcTable) String() string {
	switch _cgcefa {
	case 0:
		return ""
	case 1:
		return "center"
	case 2:
		return "end"
	case 3:
		return "left"
	case 4:
		return "right"
	case 5:
		return "start"
	}
	return ""
}

// ValidateWithPath validates the CT_Comment and its children, prefixing error messages with path
func (_bgge *CT_Comment) ValidateWithPath(path string) error {
	for _dgce, _cacd := range _bgge.EG_BlockLevelElts {
		if _eefa := _cacd.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_BlockLevelElts\u005b\u0025d\u005d", path, _dgce)); _eefa != nil {
			return _eefa
		}
	}
	return nil
}
func (_begeb *CT_ParaRPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _begeb.Ins != nil {
		_febdc := _d.StartElement{Name: _d.Name{Local: "w:ins"}}
		e.EncodeElement(_begeb.Ins, _febdc)
	}
	if _begeb.Del != nil {
		_ffdaf := _d.StartElement{Name: _d.Name{Local: "w:del"}}
		e.EncodeElement(_begeb.Del, _ffdaf)
	}
	if _begeb.MoveFrom != nil {
		_bcea := _d.StartElement{Name: _d.Name{Local: "w:moveFrom"}}
		e.EncodeElement(_begeb.MoveFrom, _bcea)
	}
	if _begeb.MoveTo != nil {
		_cdddec := _d.StartElement{Name: _d.Name{Local: "w:moveTo"}}
		e.EncodeElement(_begeb.MoveTo, _cdddec)
	}
	if _begeb.RStyle != nil {
		_gcbcc := _d.StartElement{Name: _d.Name{Local: "w:rStyle"}}
		e.EncodeElement(_begeb.RStyle, _gcbcc)
	}
	if _begeb.RFonts != nil {
		_ecbge := _d.StartElement{Name: _d.Name{Local: "w:rFonts"}}
		e.EncodeElement(_begeb.RFonts, _ecbge)
	}
	if _begeb.B != nil {
		_edaad := _d.StartElement{Name: _d.Name{Local: "w:b"}}
		e.EncodeElement(_begeb.B, _edaad)
	}
	if _begeb.BCs != nil {
		_dbccb := _d.StartElement{Name: _d.Name{Local: "w:bCs"}}
		e.EncodeElement(_begeb.BCs, _dbccb)
	}
	if _begeb.I != nil {
		_eabaa := _d.StartElement{Name: _d.Name{Local: "w:i"}}
		e.EncodeElement(_begeb.I, _eabaa)
	}
	if _begeb.ICs != nil {
		_fegfbc := _d.StartElement{Name: _d.Name{Local: "w:iCs"}}
		e.EncodeElement(_begeb.ICs, _fegfbc)
	}
	if _begeb.Caps != nil {
		_dbbge := _d.StartElement{Name: _d.Name{Local: "w:caps"}}
		e.EncodeElement(_begeb.Caps, _dbbge)
	}
	if _begeb.SmallCaps != nil {
		_beecef := _d.StartElement{Name: _d.Name{Local: "w:smallCaps"}}
		e.EncodeElement(_begeb.SmallCaps, _beecef)
	}
	if _begeb.Strike != nil {
		_gbccec := _d.StartElement{Name: _d.Name{Local: "w:strike"}}
		e.EncodeElement(_begeb.Strike, _gbccec)
	}
	if _begeb.Dstrike != nil {
		_gbaad := _d.StartElement{Name: _d.Name{Local: "w:dstrike"}}
		e.EncodeElement(_begeb.Dstrike, _gbaad)
	}
	if _begeb.Outline != nil {
		_gdabeg := _d.StartElement{Name: _d.Name{Local: "w:outline"}}
		e.EncodeElement(_begeb.Outline, _gdabeg)
	}
	if _begeb.Shadow != nil {
		_aeacb := _d.StartElement{Name: _d.Name{Local: "w:shadow"}}
		e.EncodeElement(_begeb.Shadow, _aeacb)
	}
	if _begeb.Emboss != nil {
		_fceba := _d.StartElement{Name: _d.Name{Local: "w:emboss"}}
		e.EncodeElement(_begeb.Emboss, _fceba)
	}
	if _begeb.Imprint != nil {
		_cgfbg := _d.StartElement{Name: _d.Name{Local: "w:imprint"}}
		e.EncodeElement(_begeb.Imprint, _cgfbg)
	}
	if _begeb.NoProof != nil {
		_cbfag := _d.StartElement{Name: _d.Name{Local: "w:noProof"}}
		e.EncodeElement(_begeb.NoProof, _cbfag)
	}
	if _begeb.SnapToGrid != nil {
		_ddega := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_begeb.SnapToGrid, _ddega)
	}
	if _begeb.Vanish != nil {
		_acbc := _d.StartElement{Name: _d.Name{Local: "w:vanish"}}
		e.EncodeElement(_begeb.Vanish, _acbc)
	}
	if _begeb.WebHidden != nil {
		_aagec := _d.StartElement{Name: _d.Name{Local: "w:webHidden"}}
		e.EncodeElement(_begeb.WebHidden, _aagec)
	}
	if _begeb.Color != nil {
		_gabea := _d.StartElement{Name: _d.Name{Local: "w:color"}}
		e.EncodeElement(_begeb.Color, _gabea)
	}
	if _begeb.Spacing != nil {
		_cgffg := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_begeb.Spacing, _cgffg)
	}
	if _begeb.W != nil {
		_eccb := _d.StartElement{Name: _d.Name{Local: "w:w"}}
		e.EncodeElement(_begeb.W, _eccb)
	}
	if _begeb.Kern != nil {
		_bfaag := _d.StartElement{Name: _d.Name{Local: "w:kern"}}
		e.EncodeElement(_begeb.Kern, _bfaag)
	}
	if _begeb.Position != nil {
		_ccafc := _d.StartElement{Name: _d.Name{Local: "w:position"}}
		e.EncodeElement(_begeb.Position, _ccafc)
	}
	if _begeb.Sz != nil {
		_eecdd := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_begeb.Sz, _eecdd)
	}
	if _begeb.SzCs != nil {
		_gbag := _d.StartElement{Name: _d.Name{Local: "w:szCs"}}
		e.EncodeElement(_begeb.SzCs, _gbag)
	}
	if _begeb.Highlight != nil {
		_aabgf := _d.StartElement{Name: _d.Name{Local: "w:highlight"}}
		e.EncodeElement(_begeb.Highlight, _aabgf)
	}
	if _begeb.U != nil {
		_dfafd := _d.StartElement{Name: _d.Name{Local: "w:u"}}
		e.EncodeElement(_begeb.U, _dfafd)
	}
	if _begeb.Effect != nil {
		_fdbbg := _d.StartElement{Name: _d.Name{Local: "w:effect"}}
		e.EncodeElement(_begeb.Effect, _fdbbg)
	}
	if _begeb.Bdr != nil {
		_cgfbdb := _d.StartElement{Name: _d.Name{Local: "w:bdr"}}
		e.EncodeElement(_begeb.Bdr, _cgfbdb)
	}
	if _begeb.Shd != nil {
		_efegb := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_begeb.Shd, _efegb)
	}
	if _begeb.FitText != nil {
		_ddadb := _d.StartElement{Name: _d.Name{Local: "w:fitText"}}
		e.EncodeElement(_begeb.FitText, _ddadb)
	}
	if _begeb.VertAlign != nil {
		_gbdea := _d.StartElement{Name: _d.Name{Local: "w:vertAlign"}}
		e.EncodeElement(_begeb.VertAlign, _gbdea)
	}
	if _begeb.Rtl != nil {
		_bddef := _d.StartElement{Name: _d.Name{Local: "w:rtl"}}
		e.EncodeElement(_begeb.Rtl, _bddef)
	}
	if _begeb.Cs != nil {
		_fccgfc := _d.StartElement{Name: _d.Name{Local: "w:cs"}}
		e.EncodeElement(_begeb.Cs, _fccgfc)
	}
	if _begeb.Em != nil {
		_dcaca := _d.StartElement{Name: _d.Name{Local: "w:em"}}
		e.EncodeElement(_begeb.Em, _dcaca)
	}
	if _begeb.Lang != nil {
		_dacec := _d.StartElement{Name: _d.Name{Local: "w:lang"}}
		e.EncodeElement(_begeb.Lang, _dacec)
	}
	if _begeb.EastAsianLayout != nil {
		_bdceg := _d.StartElement{Name: _d.Name{Local: "w:eastAsianLayout"}}
		e.EncodeElement(_begeb.EastAsianLayout, _bdceg)
	}
	if _begeb.SpecVanish != nil {
		_ebcbb := _d.StartElement{Name: _d.Name{Local: "w:specVanish"}}
		e.EncodeElement(_begeb.SpecVanish, _ebcbb)
	}
	if _begeb.OMath != nil {
		_dfadg := _d.StartElement{Name: _d.Name{Local: "w:oMath"}}
		e.EncodeElement(_begeb.OMath, _dfadg)
	}
	if _begeb.RPrChange != nil {
		_gfacb := _d.StartElement{Name: _d.Name{Local: "w:rPrChange"}}
		e.EncodeElement(_begeb.RPrChange, _gfacb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_MailMergeDocType struct {

	// Mail Merge Source Document Type
	ValAttr ST_MailMergeDocType
}

// ValidateWithPath validates the Numbering and its children, prefixing error messages with path
func (_cgfgdb *Numbering) ValidateWithPath(path string) error {
	if _cddced := _cgfgdb.CT_Numbering.ValidateWithPath(path); _cddced != nil {
		return _cddced
	}
	return nil
}

// ValidateWithPath validates the WdCT_WordprocessingContentPartNonVisual and its children, prefixing error messages with path
func (_dbaff *WdCT_WordprocessingContentPartNonVisual) ValidateWithPath(path string) error {
	if _dbaff.CNvPr != nil {
		if _bdfggf := _dbaff.CNvPr.ValidateWithPath(path + "\u002fCNvPr"); _bdfggf != nil {
			return _bdfggf
		}
	}
	if _dbaff.CNvContentPartPr != nil {
		if _dbacde := _dbaff.CNvContentPartPr.ValidateWithPath(path + "\u002fCNvContentPartPr"); _dbacde != nil {
			return _dbacde
		}
	}
	return nil
}
func (_dgbfb *CT_Row) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cbcdg := range start.Attr {
		if _cbcdg.Name.Local == "rsidR" {
			_bedaf, _fadd := _cbcdg.Value, error(nil)
			if _fadd != nil {
				return _fadd
			}
			_dgbfb.RsidRAttr = &_bedaf
			continue
		}
		if _cbcdg.Name.Local == "rsidDel" {
			_cacbb, _afce := _cbcdg.Value, error(nil)
			if _afce != nil {
				return _afce
			}
			_dgbfb.RsidDelAttr = &_cacbb
			continue
		}
		if _cbcdg.Name.Local == "rsidTr" {
			_bcgeg, _gdefd := _cbcdg.Value, error(nil)
			if _gdefd != nil {
				return _gdefd
			}
			_dgbfb.RsidTrAttr = &_bcgeg
			continue
		}
		if _cbcdg.Name.Local == "rsidRPr" {
			_befff, _fcbb := _cbcdg.Value, error(nil)
			if _fcbb != nil {
				return _fcbb
			}
			_dgbfb.RsidRPrAttr = &_befff
			continue
		}
	}
_dcgfb:
	for {
		_ceae, _bbccg := d.Token()
		if _bbccg != nil {
			return _bbccg
		}
		switch _dcaggc := _ceae.(type) {
		case _d.StartElement:
			switch _dcaggc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPrEx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPrEx"}:
				_dgbfb.TblPrEx = NewCT_TblPrEx()
				if _gebdf := d.DecodeElement(_dgbfb.TblPrEx, &_dcaggc); _gebdf != nil {
					return _gebdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trPr"}:
				_dgbfb.TrPr = NewCT_TrPr()
				if _bfaf := d.DecodeElement(_dgbfb.TrPr, &_dcaggc); _bfaf != nil {
					return _bfaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tc"}:
				_dcfd := NewEG_ContentCellContent()
				_deaag := NewCT_Tc()
				if _ebbcb := d.DecodeElement(_deaag, &_dcaggc); _ebbcb != nil {
					return _ebbcb
				}
				_dcfd.Tc = append(_dcfd.Tc, _deaag)
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _dcfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_bcafc := NewEG_ContentCellContent()
				_bcafc.CustomXml = NewCT_CustomXmlCell()
				if _cdffag := d.DecodeElement(_bcafc.CustomXml, &_dcaggc); _cdffag != nil {
					return _cdffag
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _bcafc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_addgbc := NewEG_ContentCellContent()
				_addgbc.Sdt = NewCT_SdtCell()
				if _caggb := d.DecodeElement(_addgbc.Sdt, &_dcaggc); _caggb != nil {
					return _caggb
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _addgbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_ecgeb := NewEG_ContentCellContent()
				_cbggaa := NewEG_RunLevelElts()
				_cbggaa.ProofErr = NewCT_ProofErr()
				if _afgafe := d.DecodeElement(_cbggaa.ProofErr, &_dcaggc); _afgafe != nil {
					return _afgafe
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _ecgeb)
				_ecgeb.EG_RunLevelElts = append(_ecgeb.EG_RunLevelElts, _cbggaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ddeac := NewEG_ContentCellContent()
				_agaea := NewEG_RunLevelElts()
				_agaea.PermStart = NewCT_PermStart()
				if _cddfe := d.DecodeElement(_agaea.PermStart, &_dcaggc); _cddfe != nil {
					return _cddfe
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _ddeac)
				_ddeac.EG_RunLevelElts = append(_ddeac.EG_RunLevelElts, _agaea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_afdff := NewEG_ContentCellContent()
				_bedeea := NewEG_RunLevelElts()
				_bedeea.PermEnd = NewCT_Perm()
				if _afdfag := d.DecodeElement(_bedeea.PermEnd, &_dcaggc); _afdfag != nil {
					return _afdfag
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _afdff)
				_afdff.EG_RunLevelElts = append(_afdff.EG_RunLevelElts, _bedeea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_babfcf := NewEG_ContentCellContent()
				_aeecef := NewEG_RunLevelElts()
				_aeecef.Ins = NewCT_RunTrackChange()
				if _gcbbc := d.DecodeElement(_aeecef.Ins, &_dcaggc); _gcbbc != nil {
					return _gcbbc
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _babfcf)
				_babfcf.EG_RunLevelElts = append(_babfcf.EG_RunLevelElts, _aeecef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ggbec := NewEG_ContentCellContent()
				_ggaagf := NewEG_RunLevelElts()
				_ggaagf.Del = NewCT_RunTrackChange()
				if _cgbgd := d.DecodeElement(_ggaagf.Del, &_dcaggc); _cgbgd != nil {
					return _cgbgd
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _ggbec)
				_ggbec.EG_RunLevelElts = append(_ggbec.EG_RunLevelElts, _ggaagf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_cadde := NewEG_ContentCellContent()
				_eaeec := NewEG_RunLevelElts()
				_eaeec.MoveFrom = NewCT_RunTrackChange()
				if _eagcg := d.DecodeElement(_eaeec.MoveFrom, &_dcaggc); _eagcg != nil {
					return _eagcg
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _cadde)
				_cadde.EG_RunLevelElts = append(_cadde.EG_RunLevelElts, _eaeec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_daaad := NewEG_ContentCellContent()
				_decae := NewEG_RunLevelElts()
				_decae.MoveTo = NewCT_RunTrackChange()
				if _gcaab := d.DecodeElement(_decae.MoveTo, &_dcaggc); _gcaab != nil {
					return _gcaab
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _daaad)
				_daaad.EG_RunLevelElts = append(_daaad.EG_RunLevelElts, _decae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_gbcbb := NewEG_ContentCellContent()
				_fcadc := NewEG_RunLevelElts()
				_dfgcfa := NewEG_RangeMarkupElements()
				_dfgcfa.BookmarkStart = NewCT_Bookmark()
				if _gfgdc := d.DecodeElement(_dfgcfa.BookmarkStart, &_dcaggc); _gfgdc != nil {
					return _gfgdc
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _gbcbb)
				_gbcbb.EG_RunLevelElts = append(_gbcbb.EG_RunLevelElts, _fcadc)
				_fcadc.EG_RangeMarkupElements = append(_fcadc.EG_RangeMarkupElements, _dfgcfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_aaddc := NewEG_ContentCellContent()
				_egecg := NewEG_RunLevelElts()
				_dbcbb := NewEG_RangeMarkupElements()
				_dbcbb.BookmarkEnd = NewCT_MarkupRange()
				if _efcgb := d.DecodeElement(_dbcbb.BookmarkEnd, &_dcaggc); _efcgb != nil {
					return _efcgb
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _aaddc)
				_aaddc.EG_RunLevelElts = append(_aaddc.EG_RunLevelElts, _egecg)
				_egecg.EG_RangeMarkupElements = append(_egecg.EG_RangeMarkupElements, _dbcbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_dfeef := NewEG_ContentCellContent()
				_dcgfa := NewEG_RunLevelElts()
				_fgcac := NewEG_RangeMarkupElements()
				_fgcac.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gbgbd := d.DecodeElement(_fgcac.MoveFromRangeStart, &_dcaggc); _gbgbd != nil {
					return _gbgbd
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _dfeef)
				_dfeef.EG_RunLevelElts = append(_dfeef.EG_RunLevelElts, _dcgfa)
				_dcgfa.EG_RangeMarkupElements = append(_dcgfa.EG_RangeMarkupElements, _fgcac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_ecaef := NewEG_ContentCellContent()
				_fcafb := NewEG_RunLevelElts()
				_fbefdf := NewEG_RangeMarkupElements()
				_fbefdf.MoveFromRangeEnd = NewCT_MarkupRange()
				if _eabd := d.DecodeElement(_fbefdf.MoveFromRangeEnd, &_dcaggc); _eabd != nil {
					return _eabd
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _ecaef)
				_ecaef.EG_RunLevelElts = append(_ecaef.EG_RunLevelElts, _fcafb)
				_fcafb.EG_RangeMarkupElements = append(_fcafb.EG_RangeMarkupElements, _fbefdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_acegdb := NewEG_ContentCellContent()
				_ffced := NewEG_RunLevelElts()
				_cfded := NewEG_RangeMarkupElements()
				_cfded.MoveToRangeStart = NewCT_MoveBookmark()
				if _caceg := d.DecodeElement(_cfded.MoveToRangeStart, &_dcaggc); _caceg != nil {
					return _caceg
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _acegdb)
				_acegdb.EG_RunLevelElts = append(_acegdb.EG_RunLevelElts, _ffced)
				_ffced.EG_RangeMarkupElements = append(_ffced.EG_RangeMarkupElements, _cfded)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_fgbcb := NewEG_ContentCellContent()
				_gcfac := NewEG_RunLevelElts()
				_afbed := NewEG_RangeMarkupElements()
				_afbed.MoveToRangeEnd = NewCT_MarkupRange()
				if _dbaaf := d.DecodeElement(_afbed.MoveToRangeEnd, &_dcaggc); _dbaaf != nil {
					return _dbaaf
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _fgbcb)
				_fgbcb.EG_RunLevelElts = append(_fgbcb.EG_RunLevelElts, _gcfac)
				_gcfac.EG_RangeMarkupElements = append(_gcfac.EG_RangeMarkupElements, _afbed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_dbgca := NewEG_ContentCellContent()
				_fcddc := NewEG_RunLevelElts()
				_dbfca := NewEG_RangeMarkupElements()
				_dbfca.CommentRangeStart = NewCT_MarkupRange()
				if _eadfa := d.DecodeElement(_dbfca.CommentRangeStart, &_dcaggc); _eadfa != nil {
					return _eadfa
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _dbgca)
				_dbgca.EG_RunLevelElts = append(_dbgca.EG_RunLevelElts, _fcddc)
				_fcddc.EG_RangeMarkupElements = append(_fcddc.EG_RangeMarkupElements, _dbfca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_dedef := NewEG_ContentCellContent()
				_eagbga := NewEG_RunLevelElts()
				_deffc := NewEG_RangeMarkupElements()
				_deffc.CommentRangeEnd = NewCT_MarkupRange()
				if _gebca := d.DecodeElement(_deffc.CommentRangeEnd, &_dcaggc); _gebca != nil {
					return _gebca
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _dedef)
				_dedef.EG_RunLevelElts = append(_dedef.EG_RunLevelElts, _eagbga)
				_eagbga.EG_RangeMarkupElements = append(_eagbga.EG_RangeMarkupElements, _deffc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_addee := NewEG_ContentCellContent()
				_eadfe := NewEG_RunLevelElts()
				_eabcc := NewEG_RangeMarkupElements()
				_eabcc.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _edffgd := d.DecodeElement(_eabcc.CustomXmlInsRangeStart, &_dcaggc); _edffgd != nil {
					return _edffgd
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _addee)
				_addee.EG_RunLevelElts = append(_addee.EG_RunLevelElts, _eadfe)
				_eadfe.EG_RangeMarkupElements = append(_eadfe.EG_RangeMarkupElements, _eabcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_ddefa := NewEG_ContentCellContent()
				_ddegc := NewEG_RunLevelElts()
				_afacd := NewEG_RangeMarkupElements()
				_afacd.CustomXmlInsRangeEnd = NewCT_Markup()
				if _dbbcg := d.DecodeElement(_afacd.CustomXmlInsRangeEnd, &_dcaggc); _dbbcg != nil {
					return _dbbcg
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _ddefa)
				_ddefa.EG_RunLevelElts = append(_ddefa.EG_RunLevelElts, _ddegc)
				_ddegc.EG_RangeMarkupElements = append(_ddegc.EG_RangeMarkupElements, _afacd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_afaff := NewEG_ContentCellContent()
				_ccbca := NewEG_RunLevelElts()
				_abaca := NewEG_RangeMarkupElements()
				_abaca.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _bfcad := d.DecodeElement(_abaca.CustomXmlDelRangeStart, &_dcaggc); _bfcad != nil {
					return _bfcad
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _afaff)
				_afaff.EG_RunLevelElts = append(_afaff.EG_RunLevelElts, _ccbca)
				_ccbca.EG_RangeMarkupElements = append(_ccbca.EG_RangeMarkupElements, _abaca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_abgcf := NewEG_ContentCellContent()
				_dbbee := NewEG_RunLevelElts()
				_dabdg := NewEG_RangeMarkupElements()
				_dabdg.CustomXmlDelRangeEnd = NewCT_Markup()
				if _dfece := d.DecodeElement(_dabdg.CustomXmlDelRangeEnd, &_dcaggc); _dfece != nil {
					return _dfece
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _abgcf)
				_abgcf.EG_RunLevelElts = append(_abgcf.EG_RunLevelElts, _dbbee)
				_dbbee.EG_RangeMarkupElements = append(_dbbee.EG_RangeMarkupElements, _dabdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_afbef := NewEG_ContentCellContent()
				_bbdad := NewEG_RunLevelElts()
				_gagfb := NewEG_RangeMarkupElements()
				_gagfb.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _cddda := d.DecodeElement(_gagfb.CustomXmlMoveFromRangeStart, &_dcaggc); _cddda != nil {
					return _cddda
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _afbef)
				_afbef.EG_RunLevelElts = append(_afbef.EG_RunLevelElts, _bbdad)
				_bbdad.EG_RangeMarkupElements = append(_bbdad.EG_RangeMarkupElements, _gagfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_cfgfab := NewEG_ContentCellContent()
				_ceaag := NewEG_RunLevelElts()
				_ddeeg := NewEG_RangeMarkupElements()
				_ddeeg.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _agega := d.DecodeElement(_ddeeg.CustomXmlMoveFromRangeEnd, &_dcaggc); _agega != nil {
					return _agega
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _cfgfab)
				_cfgfab.EG_RunLevelElts = append(_cfgfab.EG_RunLevelElts, _ceaag)
				_ceaag.EG_RangeMarkupElements = append(_ceaag.EG_RangeMarkupElements, _ddeeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_fegab := NewEG_ContentCellContent()
				_acaf := NewEG_RunLevelElts()
				_defba := NewEG_RangeMarkupElements()
				_defba.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _facda := d.DecodeElement(_defba.CustomXmlMoveToRangeStart, &_dcaggc); _facda != nil {
					return _facda
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _fegab)
				_fegab.EG_RunLevelElts = append(_fegab.EG_RunLevelElts, _acaf)
				_acaf.EG_RangeMarkupElements = append(_acaf.EG_RangeMarkupElements, _defba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_gddab := NewEG_ContentCellContent()
				_gcbbe := NewEG_RunLevelElts()
				_bddbb := NewEG_RangeMarkupElements()
				_bddbb.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _bbddf := d.DecodeElement(_bddbb.CustomXmlMoveToRangeEnd, &_dcaggc); _bbddf != nil {
					return _bbddf
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _gddab)
				_gddab.EG_RunLevelElts = append(_gddab.EG_RunLevelElts, _gcbbe)
				_gcbbe.EG_RangeMarkupElements = append(_gcbbe.EG_RangeMarkupElements, _bddbb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_afbgd := NewEG_ContentCellContent()
				_cbfae := NewEG_RunLevelElts()
				_bgfdgb := NewEG_MathContent()
				_bgfdgb.OMathPara = _f.NewOMathPara()
				if _acagd := d.DecodeElement(_bgfdgb.OMathPara, &_dcaggc); _acagd != nil {
					return _acagd
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _afbgd)
				_afbgd.EG_RunLevelElts = append(_afbgd.EG_RunLevelElts, _cbfae)
				_cbfae.EG_MathContent = append(_cbfae.EG_MathContent, _bgfdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_fdggb := NewEG_ContentCellContent()
				_bbcggd := NewEG_RunLevelElts()
				_fccad := NewEG_MathContent()
				_fccad.OMath = _f.NewOMath()
				if _efaeg := d.DecodeElement(_fccad.OMath, &_dcaggc); _efaeg != nil {
					return _efaeg
				}
				_dgbfb.EG_ContentCellContent = append(_dgbfb.EG_ContentCellContent, _fdggb)
				_fdggb.EG_RunLevelElts = append(_fdggb.EG_RunLevelElts, _bbcggd)
				_bbcggd.EG_MathContent = append(_bbcggd.EG_MathContent, _fccad)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Row\u0020\u0025v", _dcaggc.Name)
				if _abebf := d.Skip(); _abebf != nil {
					return _abebf
				}
			}
		case _d.EndElement:
			break _dcgfb
		case _d.CharData:
		}
	}
	return nil
}
func (_bgbc *CT_Color) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _bgbc.ValAttr)})
	if _bgbc.ThemeColorAttr != ST_ThemeColorUnset {
		_dcdg, _dcca := _bgbc.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _dcca != nil {
			return _dcca
		}
		start.Attr = append(start.Attr, _dcdg)
	}
	if _bgbc.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_bgbc.ThemeTintAttr)})
	}
	if _bgbc.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_bgbc.ThemeShadeAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewEG_ContentCellContent() *EG_ContentCellContent {
	_decbbf := &EG_ContentCellContent{}
	return _decbbf
}

// Validate validates the CT_ReadingModeInkLockDown and its children
func (_abacf *CT_ReadingModeInkLockDown) Validate() error {
	return _abacf.ValidateWithPath("CT_ReadingModeInkLockDown")
}

type Settings struct{ CT_Settings }

func NewCT_VerticalJc() *CT_VerticalJc {
	_agadge := &CT_VerticalJc{}
	_agadge.ValAttr = ST_VerticalJc(1)
	return _agadge
}
func (_bafeba *WdCT_EffectExtent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bffefb := range start.Attr {
		if _bffefb.Name.Local == "l" {
			_ddfcab, _bbabe := ParseUnionST_Coordinate(_bffefb.Value)
			if _bbabe != nil {
				return _bbabe
			}
			_bafeba.LAttr = _ddfcab
			continue
		}
		if _bffefb.Name.Local == "t" {
			_aeaaf, _dgcgg := ParseUnionST_Coordinate(_bffefb.Value)
			if _dgcgg != nil {
				return _dgcgg
			}
			_bafeba.TAttr = _aeaaf
			continue
		}
		if _bffefb.Name.Local == "r" {
			_ebefbd, _cagce := ParseUnionST_Coordinate(_bffefb.Value)
			if _cagce != nil {
				return _cagce
			}
			_bafeba.RAttr = _ebefbd
			continue
		}
		if _bffefb.Name.Local == "b" {
			_bfeafd, _ffgecd := ParseUnionST_Coordinate(_bffefb.Value)
			if _ffgecd != nil {
				return _ffgecd
			}
			_bafeba.BAttr = _bfeafd
			continue
		}
	}
	for {
		_dedaf, _edgcb := d.Token()
		if _edgcb != nil {
			return _b.Errorf("parsing\u0020WdCT_EffectExtent: \u0025s", _edgcb)
		}
		if _egdfec, _bagee := _dedaf.(_d.EndElement); _bagee && _egdfec.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gafaae ST_DocPartBehavior) Validate() error { return _gafaae.ValidateWithPath("") }
func (_dafcdd *CT_SaveThroughXslt) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dafcdd.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", *_dafcdd.IdAttr)})
	}
	if _dafcdd.SolutionIDAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:solutionID"}, Value: _b.Sprintf("\u0025v", *_dafcdd.SolutionIDAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Ind struct {

	// Start Indentation
	StartAttr *ST_SignedTwipsMeasure

	// Start Indentation in Character Units
	StartCharsAttr *int64

	// End Indentation
	EndAttr *ST_SignedTwipsMeasure

	// End Indentation in Character Units
	EndCharsAttr *int64

	// Start Indentation
	LeftAttr *ST_SignedTwipsMeasure

	// Start Indentation in Character Units
	LeftCharsAttr *int64

	// End Indentation
	RightAttr *ST_SignedTwipsMeasure

	// End Indentation in Character Units
	RightCharsAttr *int64

	// Indentation Removed from First Line
	HangingAttr *_g.ST_TwipsMeasure

	// Indentation Removed From First Line in Character Units
	HangingCharsAttr *int64

	// Additional First Line Indentation
	FirstLineAttr *_g.ST_TwipsMeasure

	// Additional First Line Indentation in Character Units
	FirstLineCharsAttr *int64
}

func (_cbcea ST_RubyAlign) Validate() error { return _cbcea.ValidateWithPath("") }
func (_edbcb ST_TabJc) String() string {
	switch _edbcb {
	case 0:
		return ""
	case 1:
		return "clear"
	case 2:
		return "start"
	case 3:
		return "center"
	case 4:
		return "end"
	case 5:
		return "decimal"
	case 6:
		return "bar"
	case 7:
		return "num"
	case 8:
		return "left"
	case 9:
		return "right"
	}
	return ""
}
func (_cffcd *ST_PageBorderDisplay) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cffcd = 0
	case "allPages":
		*_cffcd = 1
	case "firstPage":
		*_cffcd = 2
	case "notFirstPage":
		*_cffcd = 3
	}
	return nil
}
func (_dfggf *CT_CustomXmlCell) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _accf := range start.Attr {
		if _accf.Name.Local == "uri" {
			_gdce, _cfdd := _accf.Value, error(nil)
			if _cfdd != nil {
				return _cfdd
			}
			_dfggf.UriAttr = &_gdce
			continue
		}
		if _accf.Name.Local == "element" {
			_cbcc, _ccaeb := _accf.Value, error(nil)
			if _ccaeb != nil {
				return _ccaeb
			}
			_dfggf.ElementAttr = _cbcc
			continue
		}
	}
_fggg:
	for {
		_cega, _cgdc := d.Token()
		if _cgdc != nil {
			return _cgdc
		}
		switch _afba := _cega.(type) {
		case _d.StartElement:
			switch _afba.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlPr"}:
				_dfggf.CustomXmlPr = NewCT_CustomXmlPr()
				if _dbbcc := d.DecodeElement(_dfggf.CustomXmlPr, &_afba); _dbbcc != nil {
					return _dbbcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tc"}:
				_abdb := NewEG_ContentCellContent()
				_bdff := NewCT_Tc()
				if _bcdf := d.DecodeElement(_bdff, &_afba); _bcdf != nil {
					return _bcdf
				}
				_abdb.Tc = append(_abdb.Tc, _bdff)
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _abdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_gafgf := NewEG_ContentCellContent()
				_gafgf.CustomXml = NewCT_CustomXmlCell()
				if _egfgd := d.DecodeElement(_gafgf.CustomXml, &_afba); _egfgd != nil {
					return _egfgd
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _gafgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_bade := NewEG_ContentCellContent()
				_bade.Sdt = NewCT_SdtCell()
				if _cbdc := d.DecodeElement(_bade.Sdt, &_afba); _cbdc != nil {
					return _cbdc
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _bade)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_cegf := NewEG_ContentCellContent()
				_fde := NewEG_RunLevelElts()
				_fde.ProofErr = NewCT_ProofErr()
				if _egbb := d.DecodeElement(_fde.ProofErr, &_afba); _egbb != nil {
					return _egbb
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _cegf)
				_cegf.EG_RunLevelElts = append(_cegf.EG_RunLevelElts, _fde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_afcf := NewEG_ContentCellContent()
				_caacc := NewEG_RunLevelElts()
				_caacc.PermStart = NewCT_PermStart()
				if _fafgb := d.DecodeElement(_caacc.PermStart, &_afba); _fafgb != nil {
					return _fafgb
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _afcf)
				_afcf.EG_RunLevelElts = append(_afcf.EG_RunLevelElts, _caacc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_fbea := NewEG_ContentCellContent()
				_fgae := NewEG_RunLevelElts()
				_fgae.PermEnd = NewCT_Perm()
				if _aagc := d.DecodeElement(_fgae.PermEnd, &_afba); _aagc != nil {
					return _aagc
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _fbea)
				_fbea.EG_RunLevelElts = append(_fbea.EG_RunLevelElts, _fgae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cebeg := NewEG_ContentCellContent()
				_gcda := NewEG_RunLevelElts()
				_gcda.Ins = NewCT_RunTrackChange()
				if _cbdb := d.DecodeElement(_gcda.Ins, &_afba); _cbdb != nil {
					return _cbdb
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _cebeg)
				_cebeg.EG_RunLevelElts = append(_cebeg.EG_RunLevelElts, _gcda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_bgef := NewEG_ContentCellContent()
				_dffe := NewEG_RunLevelElts()
				_dffe.Del = NewCT_RunTrackChange()
				if _cfea := d.DecodeElement(_dffe.Del, &_afba); _cfea != nil {
					return _cfea
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _bgef)
				_bgef.EG_RunLevelElts = append(_bgef.EG_RunLevelElts, _dffe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_fecff := NewEG_ContentCellContent()
				_fffd := NewEG_RunLevelElts()
				_fffd.MoveFrom = NewCT_RunTrackChange()
				if _bgecc := d.DecodeElement(_fffd.MoveFrom, &_afba); _bgecc != nil {
					return _bgecc
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _fecff)
				_fecff.EG_RunLevelElts = append(_fecff.EG_RunLevelElts, _fffd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_aaae := NewEG_ContentCellContent()
				_cagge := NewEG_RunLevelElts()
				_cagge.MoveTo = NewCT_RunTrackChange()
				if _ggde := d.DecodeElement(_cagge.MoveTo, &_afba); _ggde != nil {
					return _ggde
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _aaae)
				_aaae.EG_RunLevelElts = append(_aaae.EG_RunLevelElts, _cagge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_facd := NewEG_ContentCellContent()
				_cacg := NewEG_RunLevelElts()
				_bdea := NewEG_RangeMarkupElements()
				_bdea.BookmarkStart = NewCT_Bookmark()
				if _dadgg := d.DecodeElement(_bdea.BookmarkStart, &_afba); _dadgg != nil {
					return _dadgg
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _facd)
				_facd.EG_RunLevelElts = append(_facd.EG_RunLevelElts, _cacg)
				_cacg.EG_RangeMarkupElements = append(_cacg.EG_RangeMarkupElements, _bdea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_fgfa := NewEG_ContentCellContent()
				_gefa := NewEG_RunLevelElts()
				_fagg := NewEG_RangeMarkupElements()
				_fagg.BookmarkEnd = NewCT_MarkupRange()
				if _debfe := d.DecodeElement(_fagg.BookmarkEnd, &_afba); _debfe != nil {
					return _debfe
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _fgfa)
				_fgfa.EG_RunLevelElts = append(_fgfa.EG_RunLevelElts, _gefa)
				_gefa.EG_RangeMarkupElements = append(_gefa.EG_RangeMarkupElements, _fagg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_afcd := NewEG_ContentCellContent()
				_eagf := NewEG_RunLevelElts()
				_ggcg := NewEG_RangeMarkupElements()
				_ggcg.MoveFromRangeStart = NewCT_MoveBookmark()
				if _fagc := d.DecodeElement(_ggcg.MoveFromRangeStart, &_afba); _fagc != nil {
					return _fagc
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _afcd)
				_afcd.EG_RunLevelElts = append(_afcd.EG_RunLevelElts, _eagf)
				_eagf.EG_RangeMarkupElements = append(_eagf.EG_RangeMarkupElements, _ggcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_edaac := NewEG_ContentCellContent()
				_gdgc := NewEG_RunLevelElts()
				_ffca := NewEG_RangeMarkupElements()
				_ffca.MoveFromRangeEnd = NewCT_MarkupRange()
				if _cedg := d.DecodeElement(_ffca.MoveFromRangeEnd, &_afba); _cedg != nil {
					return _cedg
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _edaac)
				_edaac.EG_RunLevelElts = append(_edaac.EG_RunLevelElts, _gdgc)
				_gdgc.EG_RangeMarkupElements = append(_gdgc.EG_RangeMarkupElements, _ffca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_eggg := NewEG_ContentCellContent()
				_ggbde := NewEG_RunLevelElts()
				_gefgd := NewEG_RangeMarkupElements()
				_gefgd.MoveToRangeStart = NewCT_MoveBookmark()
				if _gfac := d.DecodeElement(_gefgd.MoveToRangeStart, &_afba); _gfac != nil {
					return _gfac
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _eggg)
				_eggg.EG_RunLevelElts = append(_eggg.EG_RunLevelElts, _ggbde)
				_ggbde.EG_RangeMarkupElements = append(_ggbde.EG_RangeMarkupElements, _gefgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_aadbd := NewEG_ContentCellContent()
				_daca := NewEG_RunLevelElts()
				_fgdge := NewEG_RangeMarkupElements()
				_fgdge.MoveToRangeEnd = NewCT_MarkupRange()
				if _dffc := d.DecodeElement(_fgdge.MoveToRangeEnd, &_afba); _dffc != nil {
					return _dffc
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _aadbd)
				_aadbd.EG_RunLevelElts = append(_aadbd.EG_RunLevelElts, _daca)
				_daca.EG_RangeMarkupElements = append(_daca.EG_RangeMarkupElements, _fgdge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_deed := NewEG_ContentCellContent()
				_fafa := NewEG_RunLevelElts()
				_bbab := NewEG_RangeMarkupElements()
				_bbab.CommentRangeStart = NewCT_MarkupRange()
				if _gabdd := d.DecodeElement(_bbab.CommentRangeStart, &_afba); _gabdd != nil {
					return _gabdd
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _deed)
				_deed.EG_RunLevelElts = append(_deed.EG_RunLevelElts, _fafa)
				_fafa.EG_RangeMarkupElements = append(_fafa.EG_RangeMarkupElements, _bbab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_egbab := NewEG_ContentCellContent()
				_efgb := NewEG_RunLevelElts()
				_fdfec := NewEG_RangeMarkupElements()
				_fdfec.CommentRangeEnd = NewCT_MarkupRange()
				if _ecba := d.DecodeElement(_fdfec.CommentRangeEnd, &_afba); _ecba != nil {
					return _ecba
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _egbab)
				_egbab.EG_RunLevelElts = append(_egbab.EG_RunLevelElts, _efgb)
				_efgb.EG_RangeMarkupElements = append(_efgb.EG_RangeMarkupElements, _fdfec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gedca := NewEG_ContentCellContent()
				_cdea := NewEG_RunLevelElts()
				_bbfd := NewEG_RangeMarkupElements()
				_bbfd.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _fcdc := d.DecodeElement(_bbfd.CustomXmlInsRangeStart, &_afba); _fcdc != nil {
					return _fcdc
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _gedca)
				_gedca.EG_RunLevelElts = append(_gedca.EG_RunLevelElts, _cdea)
				_cdea.EG_RangeMarkupElements = append(_cdea.EG_RangeMarkupElements, _bbfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_dcec := NewEG_ContentCellContent()
				_degb := NewEG_RunLevelElts()
				_aeeg := NewEG_RangeMarkupElements()
				_aeeg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _cafc := d.DecodeElement(_aeeg.CustomXmlInsRangeEnd, &_afba); _cafc != nil {
					return _cafc
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _dcec)
				_dcec.EG_RunLevelElts = append(_dcec.EG_RunLevelElts, _degb)
				_degb.EG_RangeMarkupElements = append(_degb.EG_RangeMarkupElements, _aeeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_ebdg := NewEG_ContentCellContent()
				_bgad := NewEG_RunLevelElts()
				_afbca := NewEG_RangeMarkupElements()
				_afbca.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gced := d.DecodeElement(_afbca.CustomXmlDelRangeStart, &_afba); _gced != nil {
					return _gced
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _ebdg)
				_ebdg.EG_RunLevelElts = append(_ebdg.EG_RunLevelElts, _bgad)
				_bgad.EG_RangeMarkupElements = append(_bgad.EG_RangeMarkupElements, _afbca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_gege := NewEG_ContentCellContent()
				_aeag := NewEG_RunLevelElts()
				_bcaeb := NewEG_RangeMarkupElements()
				_bcaeb.CustomXmlDelRangeEnd = NewCT_Markup()
				if _defd := d.DecodeElement(_bcaeb.CustomXmlDelRangeEnd, &_afba); _defd != nil {
					return _defd
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _gege)
				_gege.EG_RunLevelElts = append(_gege.EG_RunLevelElts, _aeag)
				_aeag.EG_RangeMarkupElements = append(_aeag.EG_RangeMarkupElements, _bcaeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_ggf := NewEG_ContentCellContent()
				_aebaf := NewEG_RunLevelElts()
				_cfdca := NewEG_RangeMarkupElements()
				_cfdca.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _adcd := d.DecodeElement(_cfdca.CustomXmlMoveFromRangeStart, &_afba); _adcd != nil {
					return _adcd
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _ggf)
				_ggf.EG_RunLevelElts = append(_ggf.EG_RunLevelElts, _aebaf)
				_aebaf.EG_RangeMarkupElements = append(_aebaf.EG_RangeMarkupElements, _cfdca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_egdf := NewEG_ContentCellContent()
				_agcdc := NewEG_RunLevelElts()
				_addd := NewEG_RangeMarkupElements()
				_addd.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _agadb := d.DecodeElement(_addd.CustomXmlMoveFromRangeEnd, &_afba); _agadb != nil {
					return _agadb
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _egdf)
				_egdf.EG_RunLevelElts = append(_egdf.EG_RunLevelElts, _agcdc)
				_agcdc.EG_RangeMarkupElements = append(_agcdc.EG_RangeMarkupElements, _addd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_dagd := NewEG_ContentCellContent()
				_aefd := NewEG_RunLevelElts()
				_dcdb := NewEG_RangeMarkupElements()
				_dcdb.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _ggca := d.DecodeElement(_dcdb.CustomXmlMoveToRangeStart, &_afba); _ggca != nil {
					return _ggca
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _dagd)
				_dagd.EG_RunLevelElts = append(_dagd.EG_RunLevelElts, _aefd)
				_aefd.EG_RangeMarkupElements = append(_aefd.EG_RangeMarkupElements, _dcdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_daab := NewEG_ContentCellContent()
				_egdc := NewEG_RunLevelElts()
				_cafaf := NewEG_RangeMarkupElements()
				_cafaf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _gefff := d.DecodeElement(_cafaf.CustomXmlMoveToRangeEnd, &_afba); _gefff != nil {
					return _gefff
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _daab)
				_daab.EG_RunLevelElts = append(_daab.EG_RunLevelElts, _egdc)
				_egdc.EG_RangeMarkupElements = append(_egdc.EG_RangeMarkupElements, _cafaf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_gfae := NewEG_ContentCellContent()
				_fgddc := NewEG_RunLevelElts()
				_ecegg := NewEG_MathContent()
				_ecegg.OMathPara = _f.NewOMathPara()
				if _fede := d.DecodeElement(_ecegg.OMathPara, &_afba); _fede != nil {
					return _fede
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _gfae)
				_gfae.EG_RunLevelElts = append(_gfae.EG_RunLevelElts, _fgddc)
				_fgddc.EG_MathContent = append(_fgddc.EG_MathContent, _ecegg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_cbccd := NewEG_ContentCellContent()
				_fcebd := NewEG_RunLevelElts()
				_bddaa := NewEG_MathContent()
				_bddaa.OMath = _f.NewOMath()
				if _adea := d.DecodeElement(_bddaa.OMath, &_afba); _adea != nil {
					return _adea
				}
				_dfggf.EG_ContentCellContent = append(_dfggf.EG_ContentCellContent, _cbccd)
				_cbccd.EG_RunLevelElts = append(_cbccd.EG_RunLevelElts, _fcebd)
				_fcebd.EG_MathContent = append(_fcebd.EG_MathContent, _bddaa)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_CustomXmlCell\u0020\u0025v", _afba.Name)
				if _ddea := d.Skip(); _ddea != nil {
					return _ddea
				}
			}
		case _d.EndElement:
			break _fggg
		case _d.CharData:
		}
	}
	return nil
}
func (_cccbfb *ST_PTabAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cbddcc, _aabbeg := d.Token()
	if _aabbeg != nil {
		return _aabbeg
	}
	if _fccagd, _gedebb := _cbddcc.(_d.EndElement); _gedebb && _fccagd.Name == start.Name {
		*_cccbfb = 1
		return nil
	}
	if _ccace, _baabff := _cbddcc.(_d.CharData); !_baabff {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cbddcc)
	} else {
		switch string(_ccace) {
		case "":
			*_cccbfb = 0
		case "left":
			*_cccbfb = 1
		case "center":
			*_cccbfb = 2
		case "right":
			*_cccbfb = 3
		}
	}
	_cbddcc, _aabbeg = d.Token()
	if _aabbeg != nil {
		return _aabbeg
	}
	if _ggagcc, _cbggge := _cbddcc.(_d.EndElement); _cbggge && _ggagcc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cbddcc)
}
func (_adead ST_DocPartGallery) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dbegc := _d.Attr{}
	_dbegc.Name = name
	switch _adead {
	case ST_DocPartGalleryUnset:
		_dbegc.Value = ""
	case ST_DocPartGalleryPlaceholder:
		_dbegc.Value = "placeholder"
	case ST_DocPartGalleryAny:
		_dbegc.Value = "any"
	case ST_DocPartGalleryDefault:
		_dbegc.Value = "default"
	case ST_DocPartGalleryDocParts:
		_dbegc.Value = "docParts"
	case ST_DocPartGalleryCoverPg:
		_dbegc.Value = "coverPg"
	case ST_DocPartGalleryEq:
		_dbegc.Value = "eq"
	case ST_DocPartGalleryFtrs:
		_dbegc.Value = "ftrs"
	case ST_DocPartGalleryHdrs:
		_dbegc.Value = "hdrs"
	case ST_DocPartGalleryPgNum:
		_dbegc.Value = "pgNum"
	case ST_DocPartGalleryTbls:
		_dbegc.Value = "tbls"
	case ST_DocPartGalleryWatermarks:
		_dbegc.Value = "watermarks"
	case ST_DocPartGalleryAutoTxt:
		_dbegc.Value = "autoTxt"
	case ST_DocPartGalleryTxtBox:
		_dbegc.Value = "txtBox"
	case ST_DocPartGalleryPgNumT:
		_dbegc.Value = "pgNumT"
	case ST_DocPartGalleryPgNumB:
		_dbegc.Value = "pgNumB"
	case ST_DocPartGalleryPgNumMargins:
		_dbegc.Value = "pgNumMargins"
	case ST_DocPartGalleryTblOfContents:
		_dbegc.Value = "tblOfContents"
	case ST_DocPartGalleryBib:
		_dbegc.Value = "bib"
	case ST_DocPartGalleryCustQuickParts:
		_dbegc.Value = "custQuickParts"
	case ST_DocPartGalleryCustCoverPg:
		_dbegc.Value = "custCoverPg"
	case ST_DocPartGalleryCustEq:
		_dbegc.Value = "custEq"
	case ST_DocPartGalleryCustFtrs:
		_dbegc.Value = "custFtrs"
	case ST_DocPartGalleryCustHdrs:
		_dbegc.Value = "custHdrs"
	case ST_DocPartGalleryCustPgNum:
		_dbegc.Value = "custPgNum"
	case ST_DocPartGalleryCustTbls:
		_dbegc.Value = "custTbls"
	case ST_DocPartGalleryCustWatermarks:
		_dbegc.Value = "custWatermarks"
	case ST_DocPartGalleryCustAutoTxt:
		_dbegc.Value = "custAutoTxt"
	case ST_DocPartGalleryCustTxtBox:
		_dbegc.Value = "custTxtBox"
	case ST_DocPartGalleryCustPgNumT:
		_dbegc.Value = "custPgNumT"
	case ST_DocPartGalleryCustPgNumB:
		_dbegc.Value = "custPgNumB"
	case ST_DocPartGalleryCustPgNumMargins:
		_dbegc.Value = "custPgNumMargins"
	case ST_DocPartGalleryCustTblOfContents:
		_dbegc.Value = "custTblOfContents"
	case ST_DocPartGalleryCustBib:
		_dbegc.Value = "custBib"
	case ST_DocPartGalleryCustom1:
		_dbegc.Value = "custom1"
	case ST_DocPartGalleryCustom2:
		_dbegc.Value = "custom2"
	case ST_DocPartGalleryCustom3:
		_dbegc.Value = "custom3"
	case ST_DocPartGalleryCustom4:
		_dbegc.Value = "custom4"
	case ST_DocPartGalleryCustom5:
		_dbegc.Value = "custom5"
	}
	return _dbegc, nil
}

// ValidateWithPath validates the CT_FFCheckBox and its children, prefixing error messages with path
func (_gebeg *CT_FFCheckBox) ValidateWithPath(path string) error {
	if _gebeg.Choice != nil {
		if _febec := _gebeg.Choice.ValidateWithPath(path + "\u002fChoice"); _febec != nil {
			return _febec
		}
	}
	if _gebeg.Default != nil {
		if _fbcec := _gebeg.Default.ValidateWithPath(path + "\u002fDefault"); _fbcec != nil {
			return _fbcec
		}
	}
	if _gebeg.Checked != nil {
		if _dgbaa := _gebeg.Checked.ValidateWithPath(path + "\u002fChecked"); _dgbaa != nil {
			return _dgbaa
		}
	}
	return nil
}

// Validate validates the CT_TopPageBorder and its children
func (_egfgae *CT_TopPageBorder) Validate() error {
	return _egfgae.ValidateWithPath("CT_TopPageBorder")
}
func (_ceffg ST_PTabAlignment) ValidateWithPath(path string) error {
	switch _ceffg {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ceffg))
	}
	return nil
}
func (_efcdc *CT_TblStylePr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_cbffd, _aaege := _efcdc.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
	if _aaege != nil {
		return _aaege
	}
	start.Attr = append(start.Attr, _cbffd)
	e.EncodeToken(start)
	if _efcdc.PPr != nil {
		_eadafe := _d.StartElement{Name: _d.Name{Local: "w:pPr"}}
		e.EncodeElement(_efcdc.PPr, _eadafe)
	}
	if _efcdc.RPr != nil {
		_dcgcd := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_efcdc.RPr, _dcgcd)
	}
	if _efcdc.TblPr != nil {
		_feaee := _d.StartElement{Name: _d.Name{Local: "w:tblPr"}}
		e.EncodeElement(_efcdc.TblPr, _feaee)
	}
	if _efcdc.TrPr != nil {
		_facea := _d.StartElement{Name: _d.Name{Local: "w:trPr"}}
		e.EncodeElement(_efcdc.TrPr, _facea)
	}
	if _efcdc.TcPr != nil {
		_aadad := _d.StartElement{Name: _d.Name{Local: "w:tcPr"}}
		e.EncodeElement(_efcdc.TcPr, _aadad)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Caption and its children
func (_cdbd *CT_Caption) Validate() error { return _cdbd.ValidateWithPath("CT_Caption") }

// ValidateWithPath validates the CT_SectPrChange and its children, prefixing error messages with path
func (_ebdadd *CT_SectPrChange) ValidateWithPath(path string) error {
	if _ebdadd.SectPr != nil {
		if _ebcad := _ebdadd.SectPr.ValidateWithPath(path + "\u002fSectPr"); _ebcad != nil {
			return _ebcad
		}
	}
	return nil
}
func (_abdcc ST_Zoom) String() string {
	switch _abdcc {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "fullPage"
	case 3:
		return "bestFit"
	case 4:
		return "textFit"
	}
	return ""
}

// ValidateWithPath validates the CT_DocumentBase and its children, prefixing error messages with path
func (_ecab *CT_DocumentBase) ValidateWithPath(path string) error {
	if _ecab.Background != nil {
		if _baadd := _ecab.Background.ValidateWithPath(path + "/Background"); _baadd != nil {
			return _baadd
		}
	}
	return nil
}
func (_dgccg ST_LineSpacingRule) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dgccg.String(), start)
}

const (
	ST_CombineBracketsUnset  ST_CombineBrackets = 0
	ST_CombineBracketsNone   ST_CombineBrackets = 1
	ST_CombineBracketsRound  ST_CombineBrackets = 2
	ST_CombineBracketsSquare ST_CombineBrackets = 3
	ST_CombineBracketsAngle  ST_CombineBrackets = 4
	ST_CombineBracketsCurly  ST_CombineBrackets = 5
)

type CT_Comment struct {
	InitialsAttr *string
	AuthorAttr   string
	DateAttr     *_c.Time

	// Annotation Identifier
	IdAttr            int64
	EG_BlockLevelElts []*EG_BlockLevelElts
}

// Validate validates the CT_SdtComboBox and its children
func (_gaeb *CT_SdtComboBox) Validate() error      { return _gaeb.ValidateWithPath("CT_SdtComboBox") }
func NewCT_FFCheckBoxChoice() *CT_FFCheckBoxChoice { _ddaf := &CT_FFCheckBoxChoice{}; return _ddaf }

// ValidateWithPath validates the CT_DocVar and its children, prefixing error messages with path
func (_cdcee *CT_DocVar) ValidateWithPath(path string) error { return nil }
func (_cfg *CT_AbstractNum) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:abstractNumId"}, Value: _b.Sprintf("\u0025v", _cfg.AbstractNumIdAttr)})
	e.EncodeToken(start)
	if _cfg.Nsid != nil {
		_afg := _d.StartElement{Name: _d.Name{Local: "w:nsid"}}
		e.EncodeElement(_cfg.Nsid, _afg)
	}
	if _cfg.MultiLevelType != nil {
		_bea := _d.StartElement{Name: _d.Name{Local: "w:multiLevelType"}}
		e.EncodeElement(_cfg.MultiLevelType, _bea)
	}
	if _cfg.Tmpl != nil {
		_cabb := _d.StartElement{Name: _d.Name{Local: "w:tmpl"}}
		e.EncodeElement(_cfg.Tmpl, _cabb)
	}
	if _cfg.Name != nil {
		_cec := _d.StartElement{Name: _d.Name{Local: "w:name"}}
		e.EncodeElement(_cfg.Name, _cec)
	}
	if _cfg.StyleLink != nil {
		_beg := _d.StartElement{Name: _d.Name{Local: "w:styleLink"}}
		e.EncodeElement(_cfg.StyleLink, _beg)
	}
	if _cfg.NumStyleLink != nil {
		_add := _d.StartElement{Name: _d.Name{Local: "w:numStyleLink"}}
		e.EncodeElement(_cfg.NumStyleLink, _add)
	}
	if _cfg.Lvl != nil {
		_dfb := _d.StartElement{Name: _d.Name{Local: "w:lvl"}}
		for _, _bbfe := range _cfg.Lvl {
			e.EncodeElement(_bbfe, _dfb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_abed *CT_Numbering) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bffag:
	for {
		_cccaf, _bebfc := d.Token()
		if _bebfc != nil {
			return _bebfc
		}
		switch _cddea := _cccaf.(type) {
		case _d.StartElement:
			switch _cddea.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numPicBullet"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numPicBullet"}:
				_gbadg := NewCT_NumPicBullet()
				if _agfda := d.DecodeElement(_gbadg, &_cddea); _agfda != nil {
					return _agfda
				}
				_abed.NumPicBullet = append(_abed.NumPicBullet, _gbadg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "abstractNum"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "abstractNum"}:
				_gdecc := NewCT_AbstractNum()
				if _dgfca := d.DecodeElement(_gdecc, &_cddea); _dgfca != nil {
					return _dgfca
				}
				_abed.AbstractNum = append(_abed.AbstractNum, _gdecc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "num"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "num"}:
				_aabgd := NewCT_Num()
				if _eaec := d.DecodeElement(_aabgd, &_cddea); _eaec != nil {
					return _eaec
				}
				_abed.Num = append(_abed.Num, _aabgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numIdMacAtCleanup"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numIdMacAtCleanup"}:
				_abed.NumIdMacAtCleanup = NewCT_DecimalNumber()
				if _cabfd := d.DecodeElement(_abed.NumIdMacAtCleanup, &_cddea); _cabfd != nil {
					return _cabfd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Numbering\u0020\u0025v", _cddea.Name)
				if _efdea := d.Skip(); _efdea != nil {
					return _efdea
				}
			}
		case _d.EndElement:
			break _bffag
		case _d.CharData:
		}
	}
	return nil
}

type WdCT_WrapNone struct{}

func (_gegbb *CT_Lock) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gegbb.ValAttr != ST_LockUnset {
		_afcg, _bbgcg := _gegbb.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _bbgcg != nil {
			return _bbgcg
		}
		start.Attr = append(start.Attr, _afcg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_DocPartType() *CT_DocPartType {
	_efgege := &CT_DocPartType{}
	_efgege.ValAttr = ST_DocPartType(1)
	return _efgege
}
func (_deace *CT_SdtDropDownList) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ddgcb := range start.Attr {
		if _ddgcb.Name.Local == "lastValue" {
			_ddddg, _eccea := _ddgcb.Value, error(nil)
			if _eccea != nil {
				return _eccea
			}
			_deace.LastValueAttr = &_ddddg
			continue
		}
	}
_bbdaa:
	for {
		_cdbbc, _eaebg := d.Token()
		if _eaebg != nil {
			return _eaebg
		}
		switch _gdgccf := _cdbbc.(type) {
		case _d.StartElement:
			switch _gdgccf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "listItem"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "listItem"}:
				_cagfe := NewCT_SdtListItem()
				if _gabgf := d.DecodeElement(_cagfe, &_gdgccf); _gabgf != nil {
					return _gabgf
				}
				_deace.ListItem = append(_deace.ListItem, _cagfe)
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020CT_SdtDropDownList\u0020\u0025v", _gdgccf.Name)
				if _afbbb := d.Skip(); _afbbb != nil {
					return _afbbb
				}
			}
		case _d.EndElement:
			break _bbdaa
		case _d.CharData:
		}
	}
	return nil
}
func (_ffacc *CT_TblGrid) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ffacc.GridCol != nil {
		_ebgca := _d.StartElement{Name: _d.Name{Local: "w:gridCol"}}
		for _, _eacf := range _ffacc.GridCol {
			e.EncodeElement(_eacf, _ebgca)
		}
	}
	if _ffacc.TblGridChange != nil {
		_bffgd := _d.StartElement{Name: _d.Name{Local: "w:tblGridChange"}}
		e.EncodeElement(_ffacc.TblGridChange, _bffgd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gddg *CT_FFCheckBox) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_abdbb:
	for {
		_fdee, _acfd := d.Token()
		if _acfd != nil {
			return _acfd
		}
		switch _dcafb := _fdee.(type) {
		case _d.StartElement:
			switch _dcafb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "size"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "size"}:
				_gddg.Choice = NewCT_FFCheckBoxChoice()
				if _cfbgc := d.DecodeElement(&_gddg.Choice.Size, &_dcafb); _cfbgc != nil {
					return _cfbgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sizeAuto"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sizeAuto"}:
				_gddg.Choice = NewCT_FFCheckBoxChoice()
				if _bfdf := d.DecodeElement(&_gddg.Choice.SizeAuto, &_dcafb); _bfdf != nil {
					return _bfdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "default"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "default"}:
				_gddg.Default = NewCT_OnOff()
				if _eafd := d.DecodeElement(_gddg.Default, &_dcafb); _eafd != nil {
					return _eafd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "checked"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "checked"}:
				_gddg.Checked = NewCT_OnOff()
				if _bedf := d.DecodeElement(_gddg.Checked, &_dcafb); _bedf != nil {
					return _bedf
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_FFCheckBox \u0025v", _dcafb.Name)
				if _bagb := d.Skip(); _bagb != nil {
					return _bagb
				}
			}
		case _d.EndElement:
			break _abdbb
		case _d.CharData:
		}
	}
	return nil
}

type CT_DecimalNumber struct {

	// Decimal Number Value
	ValAttr int64
}

func (_ffdgad *AC_ChoiceRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ddeffe:
	for {
		_gegffe, _efcgef := d.Token()
		if _efcgef != nil {
			return _efcgef
		}
		switch _fgecbgf := _gegffe.(type) {
		case _d.StartElement:
			switch _fgecbgf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "br"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "br"}:
				_ffdgad.Br = NewCT_Br()
				if _ffddae := d.DecodeElement(_ffdgad.Br, &_fgecbgf); _ffddae != nil {
					return _ffddae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "t"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "t"}:
				_ffdgad.T = NewCT_Text()
				if _abcbcg := d.DecodeElement(_ffdgad.T, &_fgecbgf); _abcbcg != nil {
					return _abcbcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "contentPart"}:
				_ffdgad.ContentPart = NewCT_Rel()
				if _gebede := d.DecodeElement(_ffdgad.ContentPart, &_fgecbgf); _gebede != nil {
					return _gebede
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "delText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "delText"}:
				_ffdgad.DelText = NewCT_Text()
				if _gbcgbf := d.DecodeElement(_ffdgad.DelText, &_fgecbgf); _gbcgbf != nil {
					return _gbcgbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "instrText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "instrText"}:
				_ffdgad.InstrText = NewCT_Text()
				if _dcbaf := d.DecodeElement(_ffdgad.InstrText, &_fgecbgf); _dcbaf != nil {
					return _dcbaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "delInstrText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "delInstrText"}:
				_ffdgad.DelInstrText = NewCT_Text()
				if _ggggee := d.DecodeElement(_ffdgad.DelInstrText, &_fgecbgf); _ggggee != nil {
					return _ggggee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noBreakHyphen"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noBreakHyphen"}:
				_ffdgad.NoBreakHyphen = NewCT_Empty()
				if _bdbec := d.DecodeElement(_ffdgad.NoBreakHyphen, &_fgecbgf); _bdbec != nil {
					return _bdbec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "softHyphen"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "softHyphen"}:
				_ffdgad.SoftHyphen = NewCT_Empty()
				if _fadbef := d.DecodeElement(_ffdgad.SoftHyphen, &_fgecbgf); _fadbef != nil {
					return _fadbef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dayShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dayShort"}:
				_ffdgad.DayShort = NewCT_Empty()
				if _gbbbac := d.DecodeElement(_ffdgad.DayShort, &_fgecbgf); _gbbbac != nil {
					return _gbbbac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "monthShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "monthShort"}:
				_ffdgad.MonthShort = NewCT_Empty()
				if _bagcag := d.DecodeElement(_ffdgad.MonthShort, &_fgecbgf); _bagcag != nil {
					return _bagcag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "yearShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "yearShort"}:
				_ffdgad.YearShort = NewCT_Empty()
				if _dccff := d.DecodeElement(_ffdgad.YearShort, &_fgecbgf); _dccff != nil {
					return _dccff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dayLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dayLong"}:
				_ffdgad.DayLong = NewCT_Empty()
				if _ffaac := d.DecodeElement(_ffdgad.DayLong, &_fgecbgf); _ffaac != nil {
					return _ffaac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "monthLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "monthLong"}:
				_ffdgad.MonthLong = NewCT_Empty()
				if _gdfbg := d.DecodeElement(_ffdgad.MonthLong, &_fgecbgf); _gdfbg != nil {
					return _gdfbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "yearLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "yearLong"}:
				_ffdgad.YearLong = NewCT_Empty()
				if _ddedg := d.DecodeElement(_ffdgad.YearLong, &_fgecbgf); _ddedg != nil {
					return _ddedg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "annotationRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "annotationRef"}:
				_ffdgad.AnnotationRef = NewCT_Empty()
				if _daceg := d.DecodeElement(_ffdgad.AnnotationRef, &_fgecbgf); _daceg != nil {
					return _daceg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnoteRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnoteRef"}:
				_ffdgad.FootnoteRef = NewCT_Empty()
				if _eaebfg := d.DecodeElement(_ffdgad.FootnoteRef, &_fgecbgf); _eaebfg != nil {
					return _eaebfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnoteRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnoteRef"}:
				_ffdgad.EndnoteRef = NewCT_Empty()
				if _befec := d.DecodeElement(_ffdgad.EndnoteRef, &_fgecbgf); _befec != nil {
					return _befec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "separator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "separator"}:
				_ffdgad.Separator = NewCT_Empty()
				if _gdgec := d.DecodeElement(_ffdgad.Separator, &_fgecbgf); _gdgec != nil {
					return _gdgec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "continuationSeparator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "continuationSeparator"}:
				_ffdgad.ContinuationSeparator = NewCT_Empty()
				if _fdffeb := d.DecodeElement(_ffdgad.ContinuationSeparator, &_fgecbgf); _fdffeb != nil {
					return _fdffeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sym"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sym"}:
				_ffdgad.Sym = NewCT_Sym()
				if _ebbgdc := d.DecodeElement(_ffdgad.Sym, &_fgecbgf); _ebbgdc != nil {
					return _ebbgdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgNum"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgNum"}:
				_ffdgad.PgNum = NewCT_Empty()
				if _becabd := d.DecodeElement(_ffdgad.PgNum, &_fgecbgf); _becabd != nil {
					return _becabd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cr"}:
				_ffdgad.Cr = NewCT_Empty()
				if _dbabfb := d.DecodeElement(_ffdgad.Cr, &_fgecbgf); _dbabfb != nil {
					return _dbabfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tab"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tab"}:
				_ffdgad.Tab = NewCT_Empty()
				if _gfcggf := d.DecodeElement(_ffdgad.Tab, &_fgecbgf); _gfcggf != nil {
					return _gfcggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "object"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "object"}:
				_ffdgad.Object = NewCT_Object()
				if _gebef := d.DecodeElement(_ffdgad.Object, &_fgecbgf); _gebef != nil {
					return _gebef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pict"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pict"}:
				_ffdgad.Pict = NewCT_Picture()
				if _fbffee := d.DecodeElement(_ffdgad.Pict, &_fgecbgf); _fbffee != nil {
					return _fbffee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldChar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldChar"}:
				_ffdgad.FldChar = NewCT_FldChar()
				if _fegffe := d.DecodeElement(_ffdgad.FldChar, &_fgecbgf); _fegffe != nil {
					return _fegffe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ruby"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ruby"}:
				_ffdgad.Ruby = NewCT_Ruby()
				if _edgaa := d.DecodeElement(_ffdgad.Ruby, &_fgecbgf); _edgaa != nil {
					return _edgaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnoteReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnoteReference"}:
				_ffdgad.FootnoteReference = NewCT_FtnEdnRef()
				if _bceeef := d.DecodeElement(_ffdgad.FootnoteReference, &_fgecbgf); _bceeef != nil {
					return _bceeef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnoteReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnoteReference"}:
				_ffdgad.EndnoteReference = NewCT_FtnEdnRef()
				if _dffdb := d.DecodeElement(_ffdgad.EndnoteReference, &_fgecbgf); _dffdb != nil {
					return _dffdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentReference"}:
				_ffdgad.CommentReference = NewCT_Markup()
				if _gfcdf := d.DecodeElement(_ffdgad.CommentReference, &_fgecbgf); _gfcdf != nil {
					return _gfcdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawing"}:
				_ffdgad.Drawing = NewCT_Drawing()
				if _gacfc := d.DecodeElement(_ffdgad.Drawing, &_fgecbgf); _gacfc != nil {
					return _gacfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ptab"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ptab"}:
				_ffdgad.Ptab = NewCT_PTab()
				if _gggeab := d.DecodeElement(_ffdgad.Ptab, &_fgecbgf); _gggeab != nil {
					return _gggeab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lastRenderedPageBreak"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lastRenderedPageBreak"}:
				_ffdgad.LastRenderedPageBreak = NewCT_Empty()
				if _gfabaf := d.DecodeElement(_ffdgad.LastRenderedPageBreak, &_fgecbgf); _gfabaf != nil {
					return _gfabaf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020AC_ChoiceRun\u0020\u0025v", _fgecbgf.Name)
				if _efaafe := d.Skip(); _efaafe != nil {
					return _efaafe
				}
			}
		case _d.EndElement:
			break _ddeffe
		case _d.CharData:
		}
	}
	return nil
}
func (_ffac *CT_Columns) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dacd := range start.Attr {
		if _dacd.Name.Local == "equalWidth" {
			_fgag, _edeg := ParseUnionST_OnOff(_dacd.Value)
			if _edeg != nil {
				return _edeg
			}
			_ffac.EqualWidthAttr = &_fgag
			continue
		}
		if _dacd.Name.Local == "space" {
			_bcaf, _bgd := ParseUnionST_TwipsMeasure(_dacd.Value)
			if _bgd != nil {
				return _bgd
			}
			_ffac.SpaceAttr = &_bcaf
			continue
		}
		if _dacd.Name.Local == "num" {
			_ebde, _gdae := _dd.ParseInt(_dacd.Value, 10, 64)
			if _gdae != nil {
				return _gdae
			}
			_ffac.NumAttr = &_ebde
			continue
		}
		if _dacd.Name.Local == "sep" {
			_gfgf, _cgag := ParseUnionST_OnOff(_dacd.Value)
			if _cgag != nil {
				return _cgag
			}
			_ffac.SepAttr = &_gfgf
			continue
		}
	}
_bcdb:
	for {
		_ccb, _bgec := d.Token()
		if _bgec != nil {
			return _bgec
		}
		switch _eafb := _ccb.(type) {
		case _d.StartElement:
			switch _eafb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "col"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "col"}:
				_edea := NewCT_Column()
				if _eafg := d.DecodeElement(_edea, &_eafb); _eafg != nil {
					return _eafg
				}
				_ffac.Col = append(_ffac.Col, _edea)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_Columns\u0020\u0025v", _eafb.Name)
				if _aacdf := d.Skip(); _aacdf != nil {
					return _aacdf
				}
			}
		case _d.EndElement:
			break _bcdb
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_FFTextType and its children
func (_bdfgc *CT_FFTextType) Validate() error { return _bdfgc.ValidateWithPath("CT_FFTextType") }

// ValidateWithPath validates the EG_RPrBase and its children, prefixing error messages with path
func (_aedea *EG_RPrBase) ValidateWithPath(path string) error {
	if _aedea.RStyle != nil {
		if _cbcfdd := _aedea.RStyle.ValidateWithPath(path + "\u002fRStyle"); _cbcfdd != nil {
			return _cbcfdd
		}
	}
	if _aedea.RFonts != nil {
		if _caeff := _aedea.RFonts.ValidateWithPath(path + "\u002fRFonts"); _caeff != nil {
			return _caeff
		}
	}
	if _aedea.B != nil {
		if _ffggdg := _aedea.B.ValidateWithPath(path + "\u002fB"); _ffggdg != nil {
			return _ffggdg
		}
	}
	if _aedea.BCs != nil {
		if _ecfb := _aedea.BCs.ValidateWithPath(path + "\u002fBCs"); _ecfb != nil {
			return _ecfb
		}
	}
	if _aedea.I != nil {
		if _ecfagg := _aedea.I.ValidateWithPath(path + "\u002fI"); _ecfagg != nil {
			return _ecfagg
		}
	}
	if _aedea.ICs != nil {
		if _dbdaf := _aedea.ICs.ValidateWithPath(path + "\u002fICs"); _dbdaf != nil {
			return _dbdaf
		}
	}
	if _aedea.Caps != nil {
		if _cdebd := _aedea.Caps.ValidateWithPath(path + "\u002fCaps"); _cdebd != nil {
			return _cdebd
		}
	}
	if _aedea.SmallCaps != nil {
		if _fgbga := _aedea.SmallCaps.ValidateWithPath(path + "\u002fSmallCaps"); _fgbga != nil {
			return _fgbga
		}
	}
	if _aedea.Strike != nil {
		if _dbadb := _aedea.Strike.ValidateWithPath(path + "\u002fStrike"); _dbadb != nil {
			return _dbadb
		}
	}
	if _aedea.Dstrike != nil {
		if _cfbgf := _aedea.Dstrike.ValidateWithPath(path + "\u002fDstrike"); _cfbgf != nil {
			return _cfbgf
		}
	}
	if _aedea.Outline != nil {
		if _abfbb := _aedea.Outline.ValidateWithPath(path + "\u002fOutline"); _abfbb != nil {
			return _abfbb
		}
	}
	if _aedea.Shadow != nil {
		if _adfeed := _aedea.Shadow.ValidateWithPath(path + "\u002fShadow"); _adfeed != nil {
			return _adfeed
		}
	}
	if _aedea.Emboss != nil {
		if _bcedaf := _aedea.Emboss.ValidateWithPath(path + "\u002fEmboss"); _bcedaf != nil {
			return _bcedaf
		}
	}
	if _aedea.Imprint != nil {
		if _cdafec := _aedea.Imprint.ValidateWithPath(path + "\u002fImprint"); _cdafec != nil {
			return _cdafec
		}
	}
	if _aedea.NoProof != nil {
		if _bdccga := _aedea.NoProof.ValidateWithPath(path + "\u002fNoProof"); _bdccga != nil {
			return _bdccga
		}
	}
	if _aedea.SnapToGrid != nil {
		if _ddccg := _aedea.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _ddccg != nil {
			return _ddccg
		}
	}
	if _aedea.Vanish != nil {
		if _cfdad := _aedea.Vanish.ValidateWithPath(path + "\u002fVanish"); _cfdad != nil {
			return _cfdad
		}
	}
	if _aedea.WebHidden != nil {
		if _bbgde := _aedea.WebHidden.ValidateWithPath(path + "\u002fWebHidden"); _bbgde != nil {
			return _bbgde
		}
	}
	if _aedea.Color != nil {
		if _egdga := _aedea.Color.ValidateWithPath(path + "\u002fColor"); _egdga != nil {
			return _egdga
		}
	}
	if _aedea.Spacing != nil {
		if _fgbaf := _aedea.Spacing.ValidateWithPath(path + "\u002fSpacing"); _fgbaf != nil {
			return _fgbaf
		}
	}
	if _aedea.W != nil {
		if _ecbc := _aedea.W.ValidateWithPath(path + "\u002fW"); _ecbc != nil {
			return _ecbc
		}
	}
	if _aedea.Kern != nil {
		if _gabdae := _aedea.Kern.ValidateWithPath(path + "\u002fKern"); _gabdae != nil {
			return _gabdae
		}
	}
	if _aedea.Position != nil {
		if _fbgbe := _aedea.Position.ValidateWithPath(path + "\u002fPosition"); _fbgbe != nil {
			return _fbgbe
		}
	}
	if _aedea.Sz != nil {
		if _beeaa := _aedea.Sz.ValidateWithPath(path + "\u002fSz"); _beeaa != nil {
			return _beeaa
		}
	}
	if _aedea.SzCs != nil {
		if _ceeaa := _aedea.SzCs.ValidateWithPath(path + "\u002fSzCs"); _ceeaa != nil {
			return _ceeaa
		}
	}
	if _aedea.Highlight != nil {
		if _fgfcd := _aedea.Highlight.ValidateWithPath(path + "\u002fHighlight"); _fgfcd != nil {
			return _fgfcd
		}
	}
	if _aedea.U != nil {
		if _fdeff := _aedea.U.ValidateWithPath(path + "\u002fU"); _fdeff != nil {
			return _fdeff
		}
	}
	if _aedea.Effect != nil {
		if _faefe := _aedea.Effect.ValidateWithPath(path + "\u002fEffect"); _faefe != nil {
			return _faefe
		}
	}
	if _aedea.Bdr != nil {
		if _ceafc := _aedea.Bdr.ValidateWithPath(path + "\u002fBdr"); _ceafc != nil {
			return _ceafc
		}
	}
	if _aedea.Shd != nil {
		if _bcgba := _aedea.Shd.ValidateWithPath(path + "\u002fShd"); _bcgba != nil {
			return _bcgba
		}
	}
	if _aedea.FitText != nil {
		if _faecf := _aedea.FitText.ValidateWithPath(path + "\u002fFitText"); _faecf != nil {
			return _faecf
		}
	}
	if _aedea.VertAlign != nil {
		if _gggaf := _aedea.VertAlign.ValidateWithPath(path + "\u002fVertAlign"); _gggaf != nil {
			return _gggaf
		}
	}
	if _aedea.Rtl != nil {
		if _abcfb := _aedea.Rtl.ValidateWithPath(path + "\u002fRtl"); _abcfb != nil {
			return _abcfb
		}
	}
	if _aedea.Cs != nil {
		if _gfgeeg := _aedea.Cs.ValidateWithPath(path + "\u002fCs"); _gfgeeg != nil {
			return _gfgeeg
		}
	}
	if _aedea.Em != nil {
		if _afdffbd := _aedea.Em.ValidateWithPath(path + "\u002fEm"); _afdffbd != nil {
			return _afdffbd
		}
	}
	if _aedea.Lang != nil {
		if _cdbbcc := _aedea.Lang.ValidateWithPath(path + "\u002fLang"); _cdbbcc != nil {
			return _cdbbcc
		}
	}
	if _aedea.EastAsianLayout != nil {
		if _gfeee := _aedea.EastAsianLayout.ValidateWithPath(path + "\u002fEastAsianLayout"); _gfeee != nil {
			return _gfeee
		}
	}
	if _aedea.SpecVanish != nil {
		if _agbdfe := _aedea.SpecVanish.ValidateWithPath(path + "/SpecVanish"); _agbdfe != nil {
			return _agbdfe
		}
	}
	if _aedea.OMath != nil {
		if _gefbdc := _aedea.OMath.ValidateWithPath(path + "\u002fOMath"); _gefbdc != nil {
			return _gefbdc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CustomXmlPr and its children, prefixing error messages with path
func (_cggcb *CT_CustomXmlPr) ValidateWithPath(path string) error {
	if _cggcb.Placeholder != nil {
		if _cddg := _cggcb.Placeholder.ValidateWithPath(path + "\u002fPlaceholder"); _cddg != nil {
			return _cddg
		}
	}
	for _bdfcc, _fgde := range _cggcb.Attr {
		if _bbebg := _fgde.ValidateWithPath(_b.Sprintf("%s\u002fAttr\u005b\u0025d\u005d", path, _bdfcc)); _bbebg != nil {
			return _bbebg
		}
	}
	return nil
}

type WdCT_EffectExtent struct {
	LAttr _eb.ST_Coordinate
	TAttr _eb.ST_Coordinate
	RAttr _eb.ST_Coordinate
	BAttr _eb.ST_Coordinate
}
type EG_CellMarkupElements struct {

	// Table Cell Insertion
	CellIns *CT_TrackChange

	// Table Cell Deletion
	CellDel *CT_TrackChange

	// Vertically Merged/Split Table Cells
	CellMerge *CT_CellMergeTrackChange
}
type CT_WritingStyle struct {

	// Writing Style Language
	LangAttr string

	// Grammatical Engine ID
	VendorIDAttr string

	// Grammatical Check Engine Version
	DllVersionAttr string

	// Natural Language Grammar Check
	NlCheckAttr *_g.ST_OnOff

	// Check Stylistic Rules With Grammar
	CheckStyleAttr _g.ST_OnOff

	// Application Name
	AppNameAttr string
}

// Validate validates the CT_SectType and its children
func (_daaea *CT_SectType) Validate() error { return _daaea.ValidateWithPath("CT_SectType") }
func (_dcgad *ST_Pitch) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dcgad = 0
	case "fixed":
		*_dcgad = 1
	case "variable":
		*_dcgad = 2
	case "default":
		*_dcgad = 3
	}
	return nil
}

type ST_FrameScrollbar byte

// ValidateWithPath validates the CT_Odso and its children, prefixing error messages with path
func (_bgefg *CT_Odso) ValidateWithPath(path string) error {
	if _bgefg.Udl != nil {
		if _dcebd := _bgefg.Udl.ValidateWithPath(path + "\u002fUdl"); _dcebd != nil {
			return _dcebd
		}
	}
	if _bgefg.Table != nil {
		if _adaff := _bgefg.Table.ValidateWithPath(path + "\u002fTable"); _adaff != nil {
			return _adaff
		}
	}
	if _bgefg.Src != nil {
		if _bbadc := _bgefg.Src.ValidateWithPath(path + "\u002fSrc"); _bbadc != nil {
			return _bbadc
		}
	}
	if _bgefg.ColDelim != nil {
		if _abcb := _bgefg.ColDelim.ValidateWithPath(path + "\u002fColDelim"); _abcb != nil {
			return _abcb
		}
	}
	if _bgefg.Type != nil {
		if _bcgdf := _bgefg.Type.ValidateWithPath(path + "\u002fType"); _bcgdf != nil {
			return _bcgdf
		}
	}
	if _bgefg.FHdr != nil {
		if _gdgef := _bgefg.FHdr.ValidateWithPath(path + "\u002fFHdr"); _gdgef != nil {
			return _gdgef
		}
	}
	for _abagc, _eaedd := range _bgefg.FieldMapData {
		if _abafe := _eaedd.ValidateWithPath(_b.Sprintf("\u0025s\u002fFieldMapData\u005b\u0025d\u005d", path, _abagc)); _abafe != nil {
			return _abafe
		}
	}
	for _eggfa, _bgbg := range _bgefg.RecipientData {
		if _bfbde := _bgbg.ValidateWithPath(_b.Sprintf("%s/RecipientData[%d\u005d", path, _eggfa)); _bfbde != nil {
			return _bfbde
		}
	}
	return nil
}

// Validate validates the WdCT_WrapTight and its children
func (_cdfcf *WdCT_WrapTight) Validate() error { return _cdfcf.ValidateWithPath("WdCT_WrapTight") }

type CT_Tbl struct {
	EG_RangeMarkupElements []*EG_RangeMarkupElements

	// Table Properties
	TblPr *CT_TblPr

	// Table Grid
	TblGrid              *CT_TblGrid
	EG_ContentRowContent []*EG_ContentRowContent
}
type CT_SdtContentCell struct {

	// Table Cell
	Tc []*CT_Tc

	// Cell-Level Custom XML Element
	CustomXml *CT_CustomXmlCell

	// Cell-Level Structured Document Tag
	Sdt             *CT_SdtCell
	EG_RunLevelElts []*EG_RunLevelElts
}

func (_ebced *EG_RPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_abaecb:
	for {
		_agafe, _acgfg := d.Token()
		if _acgfg != nil {
			return _acgfg
		}
		switch _fcfag := _agafe.(type) {
		case _d.StartElement:
			switch _fcfag.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_ebced.RPr = NewCT_RPr()
				if _bgfcef := d.DecodeElement(_ebced.RPr, &_fcfag); _bgfcef != nil {
					return _bgfcef
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_RPr\u0020\u0025v", _fcfag.Name)
				if _beceb := d.Skip(); _beceb != nil {
					return _beceb
				}
			}
		case _d.EndElement:
			break _abaecb
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the WdWsp and its children
func (_ccfab *WdWsp) Validate() error { return _ccfab.ValidateWithPath("WdWsp") }

type EG_ContentCellContent struct {

	// Table Cell
	Tc []*CT_Tc

	// Cell-Level Custom XML Element
	CustomXml *CT_CustomXmlCell

	// Cell-Level Structured Document Tag
	Sdt             *CT_SdtCell
	EG_RunLevelElts []*EG_RunLevelElts
}

// Validate validates the CT_PTab and its children
func (_adgfa *CT_PTab) Validate() error { return _adgfa.ValidateWithPath("CT_PTab") }
func (_abggef *EG_BlockLevelChunkElts) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bfaga:
	for {
		_eagga, _efcdb := d.Token()
		if _efcdb != nil {
			return _efcdb
		}
		switch _eecfda := _eagga.(type) {
		case _d.StartElement:
			switch _eecfda.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_fdcfea := NewEG_ContentBlockContent()
				_fdcfea.CustomXml = NewCT_CustomXmlBlock()
				if _ceaae := d.DecodeElement(_fdcfea.CustomXml, &_eecfda); _ceaae != nil {
					return _ceaae
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _fdcfea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_gdbecf := NewEG_ContentBlockContent()
				_gdbecf.Sdt = NewCT_SdtBlock()
				if _fegef := d.DecodeElement(_gdbecf.Sdt, &_eecfda); _fegef != nil {
					return _fegef
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _gdbecf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_fgdbee := NewEG_ContentBlockContent()
				_efedg := NewCT_P()
				if _gdffec := d.DecodeElement(_efedg, &_eecfda); _gdffec != nil {
					return _gdffec
				}
				_fgdbee.P = append(_fgdbee.P, _efedg)
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _fgdbee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_cdcfg := NewEG_ContentBlockContent()
				_decbbc := NewCT_Tbl()
				if _ccbea := d.DecodeElement(_decbbc, &_eecfda); _ccbea != nil {
					return _ccbea
				}
				_cdcfg.Tbl = append(_cdcfg.Tbl, _decbbc)
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _cdcfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_fcgga := NewEG_ContentBlockContent()
				_fdegcd := NewEG_RunLevelElts()
				_fdegcd.ProofErr = NewCT_ProofErr()
				if _geacc := d.DecodeElement(_fdegcd.ProofErr, &_eecfda); _geacc != nil {
					return _geacc
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _fcgga)
				_fcgga.EG_RunLevelElts = append(_fcgga.EG_RunLevelElts, _fdegcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_dbdggf := NewEG_ContentBlockContent()
				_bbafb := NewEG_RunLevelElts()
				_bbafb.PermStart = NewCT_PermStart()
				if _afcgcd := d.DecodeElement(_bbafb.PermStart, &_eecfda); _afcgcd != nil {
					return _afcgcd
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _dbdggf)
				_dbdggf.EG_RunLevelElts = append(_dbdggf.EG_RunLevelElts, _bbafb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_eedfb := NewEG_ContentBlockContent()
				_cefecc := NewEG_RunLevelElts()
				_cefecc.PermEnd = NewCT_Perm()
				if _daffg := d.DecodeElement(_cefecc.PermEnd, &_eecfda); _daffg != nil {
					return _daffg
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _eedfb)
				_eedfb.EG_RunLevelElts = append(_eedfb.EG_RunLevelElts, _cefecc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_gacge := NewEG_ContentBlockContent()
				_fedbbg := NewEG_RunLevelElts()
				_fedbbg.Ins = NewCT_RunTrackChange()
				if _bbcfde := d.DecodeElement(_fedbbg.Ins, &_eecfda); _bbcfde != nil {
					return _bbcfde
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _gacge)
				_gacge.EG_RunLevelElts = append(_gacge.EG_RunLevelElts, _fedbbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_dbcgd := NewEG_ContentBlockContent()
				_cbagc := NewEG_RunLevelElts()
				_cbagc.Del = NewCT_RunTrackChange()
				if _dfbab := d.DecodeElement(_cbagc.Del, &_eecfda); _dfbab != nil {
					return _dfbab
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _dbcgd)
				_dbcgd.EG_RunLevelElts = append(_dbcgd.EG_RunLevelElts, _cbagc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_adaga := NewEG_ContentBlockContent()
				_fadeg := NewEG_RunLevelElts()
				_fadeg.MoveFrom = NewCT_RunTrackChange()
				if _edbgc := d.DecodeElement(_fadeg.MoveFrom, &_eecfda); _edbgc != nil {
					return _edbgc
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _adaga)
				_adaga.EG_RunLevelElts = append(_adaga.EG_RunLevelElts, _fadeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_eacgc := NewEG_ContentBlockContent()
				_agdgd := NewEG_RunLevelElts()
				_agdgd.MoveTo = NewCT_RunTrackChange()
				if _babgc := d.DecodeElement(_agdgd.MoveTo, &_eecfda); _babgc != nil {
					return _babgc
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _eacgc)
				_eacgc.EG_RunLevelElts = append(_eacgc.EG_RunLevelElts, _agdgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_decbf := NewEG_ContentBlockContent()
				_adcdb := NewEG_RunLevelElts()
				_cedga := NewEG_RangeMarkupElements()
				_cedga.BookmarkStart = NewCT_Bookmark()
				if _cgdfg := d.DecodeElement(_cedga.BookmarkStart, &_eecfda); _cgdfg != nil {
					return _cgdfg
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _decbf)
				_decbf.EG_RunLevelElts = append(_decbf.EG_RunLevelElts, _adcdb)
				_adcdb.EG_RangeMarkupElements = append(_adcdb.EG_RangeMarkupElements, _cedga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_dbeab := NewEG_ContentBlockContent()
				_ffagc := NewEG_RunLevelElts()
				_aedcca := NewEG_RangeMarkupElements()
				_aedcca.BookmarkEnd = NewCT_MarkupRange()
				if _bcfaf := d.DecodeElement(_aedcca.BookmarkEnd, &_eecfda); _bcfaf != nil {
					return _bcfaf
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _dbeab)
				_dbeab.EG_RunLevelElts = append(_dbeab.EG_RunLevelElts, _ffagc)
				_ffagc.EG_RangeMarkupElements = append(_ffagc.EG_RangeMarkupElements, _aedcca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_efcadd := NewEG_ContentBlockContent()
				_baeag := NewEG_RunLevelElts()
				_dbdad := NewEG_RangeMarkupElements()
				_dbdad.MoveFromRangeStart = NewCT_MoveBookmark()
				if _bfdae := d.DecodeElement(_dbdad.MoveFromRangeStart, &_eecfda); _bfdae != nil {
					return _bfdae
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _efcadd)
				_efcadd.EG_RunLevelElts = append(_efcadd.EG_RunLevelElts, _baeag)
				_baeag.EG_RangeMarkupElements = append(_baeag.EG_RangeMarkupElements, _dbdad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_dedbb := NewEG_ContentBlockContent()
				_ffecbd := NewEG_RunLevelElts()
				_cfcfa := NewEG_RangeMarkupElements()
				_cfcfa.MoveFromRangeEnd = NewCT_MarkupRange()
				if _abdbd := d.DecodeElement(_cfcfa.MoveFromRangeEnd, &_eecfda); _abdbd != nil {
					return _abdbd
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _dedbb)
				_dedbb.EG_RunLevelElts = append(_dedbb.EG_RunLevelElts, _ffecbd)
				_ffecbd.EG_RangeMarkupElements = append(_ffecbd.EG_RangeMarkupElements, _cfcfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_edecga := NewEG_ContentBlockContent()
				_cbdedd := NewEG_RunLevelElts()
				_fffdg := NewEG_RangeMarkupElements()
				_fffdg.MoveToRangeStart = NewCT_MoveBookmark()
				if _bfcfg := d.DecodeElement(_fffdg.MoveToRangeStart, &_eecfda); _bfcfg != nil {
					return _bfcfg
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _edecga)
				_edecga.EG_RunLevelElts = append(_edecga.EG_RunLevelElts, _cbdedd)
				_cbdedd.EG_RangeMarkupElements = append(_cbdedd.EG_RangeMarkupElements, _fffdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_gfad := NewEG_ContentBlockContent()
				_gbagg := NewEG_RunLevelElts()
				_dfebe := NewEG_RangeMarkupElements()
				_dfebe.MoveToRangeEnd = NewCT_MarkupRange()
				if _bbfcc := d.DecodeElement(_dfebe.MoveToRangeEnd, &_eecfda); _bbfcc != nil {
					return _bbfcc
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _gfad)
				_gfad.EG_RunLevelElts = append(_gfad.EG_RunLevelElts, _gbagg)
				_gbagg.EG_RangeMarkupElements = append(_gbagg.EG_RangeMarkupElements, _dfebe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_fagef := NewEG_ContentBlockContent()
				_ecfda := NewEG_RunLevelElts()
				_ceaage := NewEG_RangeMarkupElements()
				_ceaage.CommentRangeStart = NewCT_MarkupRange()
				if _gbead := d.DecodeElement(_ceaage.CommentRangeStart, &_eecfda); _gbead != nil {
					return _gbead
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _fagef)
				_fagef.EG_RunLevelElts = append(_fagef.EG_RunLevelElts, _ecfda)
				_ecfda.EG_RangeMarkupElements = append(_ecfda.EG_RangeMarkupElements, _ceaage)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_cbdega := NewEG_ContentBlockContent()
				_aefbg := NewEG_RunLevelElts()
				_acfga := NewEG_RangeMarkupElements()
				_acfga.CommentRangeEnd = NewCT_MarkupRange()
				if _fdeda := d.DecodeElement(_acfga.CommentRangeEnd, &_eecfda); _fdeda != nil {
					return _fdeda
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _cbdega)
				_cbdega.EG_RunLevelElts = append(_cbdega.EG_RunLevelElts, _aefbg)
				_aefbg.EG_RangeMarkupElements = append(_aefbg.EG_RangeMarkupElements, _acfga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gggga := NewEG_ContentBlockContent()
				_daacg := NewEG_RunLevelElts()
				_cgdaac := NewEG_RangeMarkupElements()
				_cgdaac.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _acgec := d.DecodeElement(_cgdaac.CustomXmlInsRangeStart, &_eecfda); _acgec != nil {
					return _acgec
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _gggga)
				_gggga.EG_RunLevelElts = append(_gggga.EG_RunLevelElts, _daacg)
				_daacg.EG_RangeMarkupElements = append(_daacg.EG_RangeMarkupElements, _cgdaac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_feefae := NewEG_ContentBlockContent()
				_bcagc := NewEG_RunLevelElts()
				_ceafb := NewEG_RangeMarkupElements()
				_ceafb.CustomXmlInsRangeEnd = NewCT_Markup()
				if _eaegbg := d.DecodeElement(_ceafb.CustomXmlInsRangeEnd, &_eecfda); _eaegbg != nil {
					return _eaegbg
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _feefae)
				_feefae.EG_RunLevelElts = append(_feefae.EG_RunLevelElts, _bcagc)
				_bcagc.EG_RangeMarkupElements = append(_bcagc.EG_RangeMarkupElements, _ceafb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_gbbfae := NewEG_ContentBlockContent()
				_gdbae := NewEG_RunLevelElts()
				_bebdae := NewEG_RangeMarkupElements()
				_bebdae.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gcgcaf := d.DecodeElement(_bebdae.CustomXmlDelRangeStart, &_eecfda); _gcgcaf != nil {
					return _gcgcaf
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _gbbfae)
				_gbbfae.EG_RunLevelElts = append(_gbbfae.EG_RunLevelElts, _gdbae)
				_gdbae.EG_RangeMarkupElements = append(_gdbae.EG_RangeMarkupElements, _bebdae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_cbadd := NewEG_ContentBlockContent()
				_fefda := NewEG_RunLevelElts()
				_gbgbca := NewEG_RangeMarkupElements()
				_gbgbca.CustomXmlDelRangeEnd = NewCT_Markup()
				if _accce := d.DecodeElement(_gbgbca.CustomXmlDelRangeEnd, &_eecfda); _accce != nil {
					return _accce
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _cbadd)
				_cbadd.EG_RunLevelElts = append(_cbadd.EG_RunLevelElts, _fefda)
				_fefda.EG_RangeMarkupElements = append(_fefda.EG_RangeMarkupElements, _gbgbca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_gceaa := NewEG_ContentBlockContent()
				_aadfd := NewEG_RunLevelElts()
				_dgebb := NewEG_RangeMarkupElements()
				_dgebb.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _cbabge := d.DecodeElement(_dgebb.CustomXmlMoveFromRangeStart, &_eecfda); _cbabge != nil {
					return _cbabge
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _gceaa)
				_gceaa.EG_RunLevelElts = append(_gceaa.EG_RunLevelElts, _aadfd)
				_aadfd.EG_RangeMarkupElements = append(_aadfd.EG_RangeMarkupElements, _dgebb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_gcfbag := NewEG_ContentBlockContent()
				_febcf := NewEG_RunLevelElts()
				_bceda := NewEG_RangeMarkupElements()
				_bceda.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _cdfee := d.DecodeElement(_bceda.CustomXmlMoveFromRangeEnd, &_eecfda); _cdfee != nil {
					return _cdfee
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _gcfbag)
				_gcfbag.EG_RunLevelElts = append(_gcfbag.EG_RunLevelElts, _febcf)
				_febcf.EG_RangeMarkupElements = append(_febcf.EG_RangeMarkupElements, _bceda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_dbbfg := NewEG_ContentBlockContent()
				_abdac := NewEG_RunLevelElts()
				_gcbfg := NewEG_RangeMarkupElements()
				_gcbfg.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _cgggbgd := d.DecodeElement(_gcbfg.CustomXmlMoveToRangeStart, &_eecfda); _cgggbgd != nil {
					return _cgggbgd
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _dbbfg)
				_dbbfg.EG_RunLevelElts = append(_dbbfg.EG_RunLevelElts, _abdac)
				_abdac.EG_RangeMarkupElements = append(_abdac.EG_RangeMarkupElements, _gcbfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_aaaaa := NewEG_ContentBlockContent()
				_ccgge := NewEG_RunLevelElts()
				_gcaccc := NewEG_RangeMarkupElements()
				_gcaccc.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _cedfbf := d.DecodeElement(_gcaccc.CustomXmlMoveToRangeEnd, &_eecfda); _cedfbf != nil {
					return _cedfbf
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _aaaaa)
				_aaaaa.EG_RunLevelElts = append(_aaaaa.EG_RunLevelElts, _ccgge)
				_ccgge.EG_RangeMarkupElements = append(_ccgge.EG_RangeMarkupElements, _gcaccc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_cabcf := NewEG_ContentBlockContent()
				_edabg := NewEG_RunLevelElts()
				_gbcgcg := NewEG_MathContent()
				_gbcgcg.OMathPara = _f.NewOMathPara()
				if _cfgafc := d.DecodeElement(_gbcgcg.OMathPara, &_eecfda); _cfgafc != nil {
					return _cfgafc
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _cabcf)
				_cabcf.EG_RunLevelElts = append(_cabcf.EG_RunLevelElts, _edabg)
				_edabg.EG_MathContent = append(_edabg.EG_MathContent, _gbcgcg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_fdada := NewEG_ContentBlockContent()
				_ebdgf := NewEG_RunLevelElts()
				_cbadag := NewEG_MathContent()
				_cbadag.OMath = _f.NewOMath()
				if _fdcaa := d.DecodeElement(_cbadag.OMath, &_eecfda); _fdcaa != nil {
					return _fdcaa
				}
				_abggef.EG_ContentBlockContent = append(_abggef.EG_ContentBlockContent, _fdada)
				_fdada.EG_RunLevelElts = append(_fdada.EG_RunLevelElts, _ebdgf)
				_ebdgf.EG_MathContent = append(_ebdgf.EG_MathContent, _cbadag)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_BlockLevelChunkElts\u0020\u0025v", _eecfda.Name)
				if _eadbe := d.Skip(); _eadbe != nil {
					return _eadbe
				}
			}
		case _d.EndElement:
			break _bfaga
		case _d.CharData:
		}
	}
	return nil
}
func (_caefdd *CT_Guid) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bgeb := range start.Attr {
		if _bgeb.Name.Local == "val" {
			_agfbc, _dgcb := _bgeb.Value, error(nil)
			if _dgcb != nil {
				return _dgcb
			}
			_caefdd.ValAttr = &_agfbc
			continue
		}
	}
	for {
		_dddbc, _fabd := d.Token()
		if _fabd != nil {
			return _b.Errorf("parsing\u0020CT_Guid:\u0020\u0025s", _fabd)
		}
		if _abebd, _cdceb := _dddbc.(_d.EndElement); _cdceb && _abebd.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_AltChunkPr struct {

	// Keep Source Formatting on Import
	MatchSrc *CT_OnOff
}

func NewCT_UnsignedDecimalNumber() *CT_UnsignedDecimalNumber {
	_becbg := &CT_UnsignedDecimalNumber{}
	return _becbg
}
func (_effdc *CT_Tbl) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_effdc.TblPr = NewCT_TblPr()
	_effdc.TblGrid = NewCT_TblGrid()
_gdgcff:
	for {
		_beeca, _gfacf := d.Token()
		if _gfacf != nil {
			return _gfacf
		}
		switch _gfffgc := _beeca.(type) {
		case _d.StartElement:
			switch _gfffgc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_egaef := NewEG_RangeMarkupElements()
				_egaef.BookmarkStart = NewCT_Bookmark()
				if _ebdfe := d.DecodeElement(_egaef.BookmarkStart, &_gfffgc); _ebdfe != nil {
					return _ebdfe
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _egaef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_eaggcff := NewEG_RangeMarkupElements()
				_eaggcff.BookmarkEnd = NewCT_MarkupRange()
				if _bdaab := d.DecodeElement(_eaggcff.BookmarkEnd, &_gfffgc); _bdaab != nil {
					return _bdaab
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _eaggcff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_ebcacdg := NewEG_RangeMarkupElements()
				_ebcacdg.MoveFromRangeStart = NewCT_MoveBookmark()
				if _aggcg := d.DecodeElement(_ebcacdg.MoveFromRangeStart, &_gfffgc); _aggcg != nil {
					return _aggcg
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _ebcacdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_ebcdc := NewEG_RangeMarkupElements()
				_ebcdc.MoveFromRangeEnd = NewCT_MarkupRange()
				if _gdgcgc := d.DecodeElement(_ebcdc.MoveFromRangeEnd, &_gfffgc); _gdgcgc != nil {
					return _gdgcgc
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _ebcdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dfccc := NewEG_RangeMarkupElements()
				_dfccc.MoveToRangeStart = NewCT_MoveBookmark()
				if _bfadc := d.DecodeElement(_dfccc.MoveToRangeStart, &_gfffgc); _bfadc != nil {
					return _bfadc
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _dfccc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_aceggc := NewEG_RangeMarkupElements()
				_aceggc.MoveToRangeEnd = NewCT_MarkupRange()
				if _fdfdd := d.DecodeElement(_aceggc.MoveToRangeEnd, &_gfffgc); _fdfdd != nil {
					return _fdfdd
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _aceggc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_baadb := NewEG_RangeMarkupElements()
				_baadb.CommentRangeStart = NewCT_MarkupRange()
				if _cecdb := d.DecodeElement(_baadb.CommentRangeStart, &_gfffgc); _cecdb != nil {
					return _cecdb
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _baadb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_bdeadb := NewEG_RangeMarkupElements()
				_bdeadb.CommentRangeEnd = NewCT_MarkupRange()
				if _gbgabg := d.DecodeElement(_bdeadb.CommentRangeEnd, &_gfffgc); _gbgabg != nil {
					return _gbgabg
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _bdeadb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gcefge := NewEG_RangeMarkupElements()
				_gcefge.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _agefg := d.DecodeElement(_gcefge.CustomXmlInsRangeStart, &_gfffgc); _agefg != nil {
					return _agefg
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _gcefge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_bebfcd := NewEG_RangeMarkupElements()
				_bebfcd.CustomXmlInsRangeEnd = NewCT_Markup()
				if _faeeff := d.DecodeElement(_bebfcd.CustomXmlInsRangeEnd, &_gfffgc); _faeeff != nil {
					return _faeeff
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _bebfcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_fccaeg := NewEG_RangeMarkupElements()
				_fccaeg.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gcbfb := d.DecodeElement(_fccaeg.CustomXmlDelRangeStart, &_gfffgc); _gcbfb != nil {
					return _gcbfb
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _fccaeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_dcedeb := NewEG_RangeMarkupElements()
				_dcedeb.CustomXmlDelRangeEnd = NewCT_Markup()
				if _ecdfe := d.DecodeElement(_dcedeb.CustomXmlDelRangeEnd, &_gfffgc); _ecdfe != nil {
					return _ecdfe
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _dcedeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_eagaa := NewEG_RangeMarkupElements()
				_eagaa.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _fccaeb := d.DecodeElement(_eagaa.CustomXmlMoveFromRangeStart, &_gfffgc); _fccaeb != nil {
					return _fccaeb
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _eagaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_abaece := NewEG_RangeMarkupElements()
				_abaece.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _beade := d.DecodeElement(_abaece.CustomXmlMoveFromRangeEnd, &_gfffgc); _beade != nil {
					return _beade
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _abaece)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gdedf := NewEG_RangeMarkupElements()
				_gdedf.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _befeg := d.DecodeElement(_gdedf.CustomXmlMoveToRangeStart, &_gfffgc); _befeg != nil {
					return _befeg
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _gdedf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_fcbdc := NewEG_RangeMarkupElements()
				_fcbdc.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _fbefa := d.DecodeElement(_fcbdc.CustomXmlMoveToRangeEnd, &_gfffgc); _fbefa != nil {
					return _fbefa
				}
				_effdc.EG_RangeMarkupElements = append(_effdc.EG_RangeMarkupElements, _fcbdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPr"}:
				if _gbegc := d.DecodeElement(_effdc.TblPr, &_gfffgc); _gbegc != nil {
					return _gbegc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblGrid"}:
				if _eafac := d.DecodeElement(_effdc.TblGrid, &_gfffgc); _eafac != nil {
					return _eafac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tr"}:
				_gfggf := NewEG_ContentRowContent()
				_dccbg := NewCT_Row()
				if _gegebg := d.DecodeElement(_dccbg, &_gfffgc); _gegebg != nil {
					return _gegebg
				}
				_gfggf.Tr = append(_gfggf.Tr, _dccbg)
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _gfggf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_fbffc := NewEG_ContentRowContent()
				_fbffc.CustomXml = NewCT_CustomXmlRow()
				if _afdefb := d.DecodeElement(_fbffc.CustomXml, &_gfffgc); _afdefb != nil {
					return _afdefb
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _fbffc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_bbfce := NewEG_ContentRowContent()
				_bbfce.Sdt = NewCT_SdtRow()
				if _dggc := d.DecodeElement(_bbfce.Sdt, &_gfffgc); _dggc != nil {
					return _dggc
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _bbfce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_dcfefa := NewEG_ContentRowContent()
				_bbcee := NewEG_RunLevelElts()
				_bbcee.ProofErr = NewCT_ProofErr()
				if _dabae := d.DecodeElement(_bbcee.ProofErr, &_gfffgc); _dabae != nil {
					return _dabae
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _dcfefa)
				_dcfefa.EG_RunLevelElts = append(_dcfefa.EG_RunLevelElts, _bbcee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_eabgc := NewEG_ContentRowContent()
				_fegbg := NewEG_RunLevelElts()
				_fegbg.PermStart = NewCT_PermStart()
				if _gagbc := d.DecodeElement(_fegbg.PermStart, &_gfffgc); _gagbc != nil {
					return _gagbc
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _eabgc)
				_eabgc.EG_RunLevelElts = append(_eabgc.EG_RunLevelElts, _fegbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_bgfcbd := NewEG_ContentRowContent()
				_gcacb := NewEG_RunLevelElts()
				_gcacb.PermEnd = NewCT_Perm()
				if _efeab := d.DecodeElement(_gcacb.PermEnd, &_gfffgc); _efeab != nil {
					return _efeab
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _bgfcbd)
				_bgfcbd.EG_RunLevelElts = append(_bgfcbd.EG_RunLevelElts, _gcacb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_accge := NewEG_ContentRowContent()
				_acceg := NewEG_RunLevelElts()
				_acceg.Ins = NewCT_RunTrackChange()
				if _fggag := d.DecodeElement(_acceg.Ins, &_gfffgc); _fggag != nil {
					return _fggag
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _accge)
				_accge.EG_RunLevelElts = append(_accge.EG_RunLevelElts, _acceg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_aggab := NewEG_ContentRowContent()
				_ccad := NewEG_RunLevelElts()
				_ccad.Del = NewCT_RunTrackChange()
				if _gbaf := d.DecodeElement(_ccad.Del, &_gfffgc); _gbaf != nil {
					return _gbaf
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _aggab)
				_aggab.EG_RunLevelElts = append(_aggab.EG_RunLevelElts, _ccad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_fbccc := NewEG_ContentRowContent()
				_ffcgd := NewEG_RunLevelElts()
				_ffcgd.MoveFrom = NewCT_RunTrackChange()
				if _dfbdca := d.DecodeElement(_ffcgd.MoveFrom, &_gfffgc); _dfbdca != nil {
					return _dfbdca
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _fbccc)
				_fbccc.EG_RunLevelElts = append(_fbccc.EG_RunLevelElts, _ffcgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_ecbfg := NewEG_ContentRowContent()
				_becbdb := NewEG_RunLevelElts()
				_becbdb.MoveTo = NewCT_RunTrackChange()
				if _fbcge := d.DecodeElement(_becbdb.MoveTo, &_gfffgc); _fbcge != nil {
					return _fbcge
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _ecbfg)
				_ecbfg.EG_RunLevelElts = append(_ecbfg.EG_RunLevelElts, _becbdb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_aaffgf := NewEG_ContentRowContent()
				_bafabe := NewEG_RunLevelElts()
				_facdf := NewEG_MathContent()
				_facdf.OMathPara = _f.NewOMathPara()
				if _aedbd := d.DecodeElement(_facdf.OMathPara, &_gfffgc); _aedbd != nil {
					return _aedbd
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _aaffgf)
				_aaffgf.EG_RunLevelElts = append(_aaffgf.EG_RunLevelElts, _bafabe)
				_bafabe.EG_MathContent = append(_bafabe.EG_MathContent, _facdf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_febgd := NewEG_ContentRowContent()
				_egcfd := NewEG_RunLevelElts()
				_adadf := NewEG_MathContent()
				_adadf.OMath = _f.NewOMath()
				if _efacd := d.DecodeElement(_adadf.OMath, &_gfffgc); _efacd != nil {
					return _efacd
				}
				_effdc.EG_ContentRowContent = append(_effdc.EG_ContentRowContent, _febgd)
				_febgd.EG_RunLevelElts = append(_febgd.EG_RunLevelElts, _egcfd)
				_egcfd.EG_MathContent = append(_egcfd.EG_MathContent, _adadf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Tbl\u0020\u0025v", _gfffgc.Name)
				if _edegdc := d.Skip(); _edegdc != nil {
					return _edegdc
				}
			}
		case _d.EndElement:
			break _gdgcff
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the Ftr and its children, prefixing error messages with path
func (_cdabbc *Ftr) ValidateWithPath(path string) error {
	if _fbegd := _cdabbc.CT_HdrFtr.ValidateWithPath(path); _fbegd != nil {
		return _fbegd
	}
	return nil
}
func (_gabaec *WdCT_WrapTight) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gabaec.WrapTextAttr = WdST_WrapText(1)
	_gabaec.WrapPolygon = NewWdCT_WrapPath()
	for _, _gbdcc := range start.Attr {
		if _gbdcc.Name.Local == "wrapText" {
			_gabaec.WrapTextAttr.UnmarshalXMLAttr(_gbdcc)
			continue
		}
		if _gbdcc.Name.Local == "distL" {
			_egcgf, _cbafef := _dd.ParseUint(_gbdcc.Value, 10, 32)
			if _cbafef != nil {
				return _cbafef
			}
			_abegbb := uint32(_egcgf)
			_gabaec.DistLAttr = &_abegbb
			continue
		}
		if _gbdcc.Name.Local == "distR" {
			_aggfb, _bfcbfc := _dd.ParseUint(_gbdcc.Value, 10, 32)
			if _bfcbfc != nil {
				return _bfcbfc
			}
			_fbbggg := uint32(_aggfb)
			_gabaec.DistRAttr = &_fbbggg
			continue
		}
	}
_gfbbad:
	for {
		_dgfegg, _deceab := d.Token()
		if _deceab != nil {
			return _deceab
		}
		switch _fabbbf := _dgfegg.(type) {
		case _d.StartElement:
			switch _fabbbf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapPolygon"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapPolygon"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapPolygon"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapPolygon"}:
				if _adddc := d.DecodeElement(_gabaec.WrapPolygon, &_fabbbf); _adddc != nil {
					return _adddc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WrapTight\u0020\u0025v", _fabbbf.Name)
				if _deffe := d.Skip(); _deffe != nil {
					return _deffe
				}
			}
		case _d.EndElement:
			break _gfbbad
		case _d.CharData:
		}
	}
	return nil
}
func (_cdedg *CT_Height) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cdedg.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_cdedg.ValAttr)})
	}
	if _cdedg.HRuleAttr != ST_HeightRuleUnset {
		_febdg, _ecdg := _cdedg.HRuleAttr.MarshalXMLAttr(_d.Name{Local: "w:hRule"})
		if _ecdg != nil {
			return _ecdg
		}
		start.Attr = append(start.Attr, _febdg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type WdWgp struct{ WdCT_WordprocessingGroup }

// ValidateWithPath validates the EG_PContent and its children, prefixing error messages with path
func (_fgede *EG_PContent) ValidateWithPath(path string) error {
	for _eaddca, _fgbbdd := range _fgede.FldSimple {
		if _deaafc := _fgbbdd.ValidateWithPath(_b.Sprintf("\u0025s/FldSimple\u005b\u0025d\u005d", path, _eaddca)); _deaafc != nil {
			return _deaafc
		}
	}
	if _fgede.Hyperlink != nil {
		if _cafgaf := _fgede.Hyperlink.ValidateWithPath(path + "\u002fHyperlink"); _cafgaf != nil {
			return _cafgaf
		}
	}
	if _fgede.SubDoc != nil {
		if _fedag := _fgede.SubDoc.ValidateWithPath(path + "\u002fSubDoc"); _fedag != nil {
			return _fedag
		}
	}
	for _ecceg, _eeefg := range _fgede.EG_ContentRunContent {
		if _aadbea := _eeefg.ValidateWithPath(_b.Sprintf("%s\u002fEG_ContentRunContent[\u0025d\u005d", path, _ecceg)); _aadbea != nil {
			return _aadbea
		}
	}
	return nil
}
func (_ebfbab ST_DocPartType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ebfbab.String(), start)
}
func (_cfeeef *CT_SdtRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dcbfe:
	for {
		_aacbg, _abagb := d.Token()
		if _abagb != nil {
			return _abagb
		}
		switch _dfcfge := _aacbg.(type) {
		case _d.StartElement:
			switch _dfcfge.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtPr"}:
				_cfeeef.SdtPr = NewCT_SdtPr()
				if _gcebg := d.DecodeElement(_cfeeef.SdtPr, &_dfcfge); _gcebg != nil {
					return _gcebg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtEndPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtEndPr"}:
				_cfeeef.SdtEndPr = NewCT_SdtEndPr()
				if _gdcbf := d.DecodeElement(_cfeeef.SdtEndPr, &_dfcfge); _gdcbf != nil {
					return _gdcbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtContent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtContent"}:
				_cfeeef.SdtContent = NewCT_SdtContentRun()
				if _dbecg := d.DecodeElement(_cfeeef.SdtContent, &_dfcfge); _dbecg != nil {
					return _dbecg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_SdtRun \u0025v", _dfcfge.Name)
				if _gcafed := d.Skip(); _gcafed != nil {
					return _gcafed
				}
			}
		case _d.EndElement:
			break _dcbfe
		case _d.CharData:
		}
	}
	return nil
}
func (_dcff *CT_Base64Binary) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _dcff.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_DocPartGallery struct {

	// Gallery Value
	ValAttr ST_DocPartGallery
}

func (_beffcd ST_Hint) ValidateWithPath(path string) error {
	switch _beffcd {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_beffcd))
	}
	return nil
}
func (_begec *CT_NumPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _begec.Ilvl != nil {
		_baagf := _d.StartElement{Name: _d.Name{Local: "w:ilvl"}}
		e.EncodeElement(_begec.Ilvl, _baagf)
	}
	if _begec.NumId != nil {
		_cedcg := _d.StartElement{Name: _d.Name{Local: "w:numId"}}
		e.EncodeElement(_begec.NumId, _cedcg)
	}
	if _begec.NumberingChange != nil {
		_agde := _d.StartElement{Name: _d.Name{Local: "w:numberingChange"}}
		e.EncodeElement(_begec.NumberingChange, _agde)
	}
	if _begec.Ins != nil {
		_aceade := _d.StartElement{Name: _d.Name{Local: "w:ins"}}
		e.EncodeElement(_begec.Ins, _aceade)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bcgbfc WdST_AlignV) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bcgbfc.String(), start)
}

// Validate validates the CT_TabStop and its children
func (_dcdbb *CT_TabStop) Validate() error { return _dcdbb.ValidateWithPath("CT_TabStop") }

// ValidateWithPath validates the EG_RunInnerContent and its children, prefixing error messages with path
func (_efebdg *EG_RunInnerContent) ValidateWithPath(path string) error {
	if _efebdg.Br != nil {
		if _ccbgb := _efebdg.Br.ValidateWithPath(path + "\u002fBr"); _ccbgb != nil {
			return _ccbgb
		}
	}
	if _efebdg.T != nil {
		if _fbgccf := _efebdg.T.ValidateWithPath(path + "\u002fT"); _fbgccf != nil {
			return _fbgccf
		}
	}
	if _efebdg.ContentPart != nil {
		if _egcfb := _efebdg.ContentPart.ValidateWithPath(path + "\u002fContentPart"); _egcfb != nil {
			return _egcfb
		}
	}
	if _efebdg.DelText != nil {
		if _dbgfda := _efebdg.DelText.ValidateWithPath(path + "\u002fDelText"); _dbgfda != nil {
			return _dbgfda
		}
	}
	if _efebdg.InstrText != nil {
		if _dfccfe := _efebdg.InstrText.ValidateWithPath(path + "\u002fInstrText"); _dfccfe != nil {
			return _dfccfe
		}
	}
	if _efebdg.DelInstrText != nil {
		if _baecf := _efebdg.DelInstrText.ValidateWithPath(path + "\u002fDelInstrText"); _baecf != nil {
			return _baecf
		}
	}
	if _efebdg.NoBreakHyphen != nil {
		if _gbbdb := _efebdg.NoBreakHyphen.ValidateWithPath(path + "\u002fNoBreakHyphen"); _gbbdb != nil {
			return _gbbdb
		}
	}
	if _efebdg.SoftHyphen != nil {
		if _aggef := _efebdg.SoftHyphen.ValidateWithPath(path + "/SoftHyphen"); _aggef != nil {
			return _aggef
		}
	}
	if _efebdg.DayShort != nil {
		if _dddee := _efebdg.DayShort.ValidateWithPath(path + "\u002fDayShort"); _dddee != nil {
			return _dddee
		}
	}
	if _efebdg.MonthShort != nil {
		if _dfbged := _efebdg.MonthShort.ValidateWithPath(path + "/MonthShort"); _dfbged != nil {
			return _dfbged
		}
	}
	if _efebdg.YearShort != nil {
		if _bcaee := _efebdg.YearShort.ValidateWithPath(path + "\u002fYearShort"); _bcaee != nil {
			return _bcaee
		}
	}
	if _efebdg.DayLong != nil {
		if _gdabef := _efebdg.DayLong.ValidateWithPath(path + "\u002fDayLong"); _gdabef != nil {
			return _gdabef
		}
	}
	if _efebdg.MonthLong != nil {
		if _dedgdb := _efebdg.MonthLong.ValidateWithPath(path + "\u002fMonthLong"); _dedgdb != nil {
			return _dedgdb
		}
	}
	if _efebdg.YearLong != nil {
		if _aagaa := _efebdg.YearLong.ValidateWithPath(path + "\u002fYearLong"); _aagaa != nil {
			return _aagaa
		}
	}
	if _efebdg.AnnotationRef != nil {
		if _babfce := _efebdg.AnnotationRef.ValidateWithPath(path + "\u002fAnnotationRef"); _babfce != nil {
			return _babfce
		}
	}
	if _efebdg.FootnoteRef != nil {
		if _ddccdb := _efebdg.FootnoteRef.ValidateWithPath(path + "\u002fFootnoteRef"); _ddccdb != nil {
			return _ddccdb
		}
	}
	if _efebdg.EndnoteRef != nil {
		if _afdaf := _efebdg.EndnoteRef.ValidateWithPath(path + "/EndnoteRef"); _afdaf != nil {
			return _afdaf
		}
	}
	if _efebdg.Separator != nil {
		if _eebcgd := _efebdg.Separator.ValidateWithPath(path + "\u002fSeparator"); _eebcgd != nil {
			return _eebcgd
		}
	}
	if _efebdg.ContinuationSeparator != nil {
		if _fcagg := _efebdg.ContinuationSeparator.ValidateWithPath(path + "\u002fContinuationSeparator"); _fcagg != nil {
			return _fcagg
		}
	}
	if _efebdg.Sym != nil {
		if _gegdc := _efebdg.Sym.ValidateWithPath(path + "\u002fSym"); _gegdc != nil {
			return _gegdc
		}
	}
	if _efebdg.PgNum != nil {
		if _gagcfa := _efebdg.PgNum.ValidateWithPath(path + "\u002fPgNum"); _gagcfa != nil {
			return _gagcfa
		}
	}
	if _efebdg.Cr != nil {
		if _begfdg := _efebdg.Cr.ValidateWithPath(path + "\u002fCr"); _begfdg != nil {
			return _begfdg
		}
	}
	if _efebdg.Tab != nil {
		if _ffaea := _efebdg.Tab.ValidateWithPath(path + "\u002fTab"); _ffaea != nil {
			return _ffaea
		}
	}
	if _efebdg.Object != nil {
		if _cefffa := _efebdg.Object.ValidateWithPath(path + "\u002fObject"); _cefffa != nil {
			return _cefffa
		}
	}
	if _efebdg.Pict != nil {
		if _fcbad := _efebdg.Pict.ValidateWithPath(path + "\u002fPict"); _fcbad != nil {
			return _fcbad
		}
	}
	if _efebdg.FldChar != nil {
		if _aacac := _efebdg.FldChar.ValidateWithPath(path + "\u002fFldChar"); _aacac != nil {
			return _aacac
		}
	}
	if _efebdg.Ruby != nil {
		if _gdage := _efebdg.Ruby.ValidateWithPath(path + "\u002fRuby"); _gdage != nil {
			return _gdage
		}
	}
	if _efebdg.FootnoteReference != nil {
		if _abcfe := _efebdg.FootnoteReference.ValidateWithPath(path + "\u002fFootnoteReference"); _abcfe != nil {
			return _abcfe
		}
	}
	if _efebdg.EndnoteReference != nil {
		if _fabadf := _efebdg.EndnoteReference.ValidateWithPath(path + "\u002fEndnoteReference"); _fabadf != nil {
			return _fabadf
		}
	}
	if _efebdg.CommentReference != nil {
		if _baaba := _efebdg.CommentReference.ValidateWithPath(path + "\u002fCommentReference"); _baaba != nil {
			return _baaba
		}
	}
	if _efebdg.Drawing != nil {
		if _dacbc := _efebdg.Drawing.ValidateWithPath(path + "\u002fDrawing"); _dacbc != nil {
			return _dacbc
		}
	}
	if _efebdg.Ptab != nil {
		if _cfbaa := _efebdg.Ptab.ValidateWithPath(path + "\u002fPtab"); _cfbaa != nil {
			return _cfbaa
		}
	}
	if _efebdg.LastRenderedPageBreak != nil {
		if _cccaaa := _efebdg.LastRenderedPageBreak.ValidateWithPath(path + "\u002fLastRenderedPageBreak"); _cccaaa != nil {
			return _cccaaa
		}
	}
	return nil
}

type ST_TblWidth byte

func (_egafba ST_AnnotationVMerge) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bddab := _d.Attr{}
	_bddab.Name = name
	switch _egafba {
	case ST_AnnotationVMergeUnset:
		_bddab.Value = ""
	case ST_AnnotationVMergeCont:
		_bddab.Value = "cont"
	case ST_AnnotationVMergeRest:
		_bddab.Value = "rest"
	}
	return _bddab, nil
}
func (_efafg ST_EdnPos) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_efafg.String(), start)
}

type CT_LineNumber struct {

	// Line Number Increments to Display
	CountByAttr *int64

	// Line Numbering Starting Value
	StartAttr *int64

	// Distance Between Text and Line Numbering
	DistanceAttr *_g.ST_TwipsMeasure

	// Line Numbering Restart Setting
	RestartAttr ST_LineNumberRestart
}

func NewCT_SectPrChange() *CT_SectPrChange { _dafa := &CT_SectPrChange{}; return _dafa }

type CT_P struct {

	// Revision Identifier for Paragraph Glyph Formatting
	RsidRPrAttr *string

	// Revision Identifier for Paragraph
	RsidRAttr *string

	// Revision Identifier for Paragraph Deletion
	RsidDelAttr *string

	// Revision Identifier for Paragraph Properties
	RsidPAttr *string

	// Default Revision Identifier for Runs
	RsidRDefaultAttr *string

	// Paragraph Properties
	PPr         *CT_PPr
	EG_PContent []*EG_PContent
}

func (_egeec ST_Em) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bbagbf := _d.Attr{}
	_bbagbf.Name = name
	switch _egeec {
	case ST_EmUnset:
		_bbagbf.Value = ""
	case ST_EmNone:
		_bbagbf.Value = "none"
	case ST_EmDot:
		_bbagbf.Value = "dot"
	case ST_EmComma:
		_bbagbf.Value = "comma"
	case ST_EmCircle:
		_bbagbf.Value = "circle"
	case ST_EmUnderDot:
		_bbagbf.Value = "underDot"
	}
	return _bbagbf, nil
}
func (_eedcb *WdCT_PosHChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eedcb.Align != WdST_AlignHUnset {
		_efdca := _d.StartElement{Name: _d.Name{Local: "wp:align"}}
		e.EncodeElement(_eedcb.Align, _efdca)
	}
	if _eedcb.PosOffset != nil {
		_egbbdf := _d.StartElement{Name: _d.Name{Local: "wp:posOffset"}}
		e.EncodeElement(_eedcb.PosOffset, _egbbdf)
	}
	return nil
}

// ValidateWithPath validates the CT_SdtDate and its children, prefixing error messages with path
func (_eebec *CT_SdtDate) ValidateWithPath(path string) error {
	if _eebec.DateFormat != nil {
		if _bebfg := _eebec.DateFormat.ValidateWithPath(path + "/DateFormat"); _bebfg != nil {
			return _bebfg
		}
	}
	if _eebec.Lid != nil {
		if _deffd := _eebec.Lid.ValidateWithPath(path + "\u002fLid"); _deffd != nil {
			return _deffd
		}
	}
	if _eebec.StoreMappedDataAs != nil {
		if _gfdge := _eebec.StoreMappedDataAs.ValidateWithPath(path + "\u002fStoreMappedDataAs"); _gfdge != nil {
			return _gfdge
		}
	}
	if _eebec.Calendar != nil {
		if _cafeg := _eebec.Calendar.ValidateWithPath(path + "\u002fCalendar"); _cafeg != nil {
			return _cafeg
		}
	}
	return nil
}
func (_bbbef *EG_ContentBlockContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbbef.CustomXml != nil {
		_eaeddf := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_bbbef.CustomXml, _eaeddf)
	}
	if _bbbef.Sdt != nil {
		_efeef := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_bbbef.Sdt, _efeef)
	}
	if _bbbef.P != nil {
		_ecfacf := _d.StartElement{Name: _d.Name{Local: "w:p"}}
		for _, _gbcfd := range _bbbef.P {
			e.EncodeElement(_gbcfd, _ecfacf)
		}
	}
	if _bbbef.Tbl != nil {
		_gdbdfc := _d.StartElement{Name: _d.Name{Local: "w:tbl"}}
		for _, _ccdac := range _bbbef.Tbl {
			e.EncodeElement(_ccdac, _gdbdfc)
		}
	}
	if _bbbef.EG_RunLevelElts != nil {
		for _, _dgbde := range _bbbef.EG_RunLevelElts {
			_dgbde.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}

type ST_ThemeColor byte

func (_gcccg *ST_VAnchor) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gcccg = 0
	case "text":
		*_gcccg = 1
	case "margin":
		*_gcccg = 2
	case "page":
		*_gcccg = 3
	}
	return nil
}
func (_ebbfgd *WdCT_WrapPath) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ebbfgd.EditedAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "edited"}, Value: _b.Sprintf("\u0025d", _dagcc(*_ebbfgd.EditedAttr))})
	}
	e.EncodeToken(start)
	_fecbc := _d.StartElement{Name: _d.Name{Local: "wp:start"}}
	e.EncodeElement(_ebbfgd.Start, _fecbc)
	_dfacd := _d.StartElement{Name: _d.Name{Local: "wp:lineTo"}}
	for _, _dffgb := range _ebbfgd.LineTo {
		e.EncodeElement(_dffgb, _dfacd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_CaptionPosUnset ST_CaptionPos = 0
	ST_CaptionPosAbove ST_CaptionPos = 1
	ST_CaptionPosBelow ST_CaptionPos = 2
	ST_CaptionPosLeft  ST_CaptionPos = 3
	ST_CaptionPosRight ST_CaptionPos = 4
)

func (_gabeb *CT_Fonts) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dggb := range start.Attr {
		if _dggb.Name.Local == "hint" {
			_gabeb.HintAttr.UnmarshalXMLAttr(_dggb)
			continue
		}
		if _dggb.Name.Local == "ascii" {
			_defe, _fegaf := _dggb.Value, error(nil)
			if _fegaf != nil {
				return _fegaf
			}
			_gabeb.AsciiAttr = &_defe
			continue
		}
		if _dggb.Name.Local == "hAnsi" {
			_ffdee, _dbcga := _dggb.Value, error(nil)
			if _dbcga != nil {
				return _dbcga
			}
			_gabeb.HAnsiAttr = &_ffdee
			continue
		}
		if _dggb.Name.Local == "eastAsia" {
			_dbec, _agadg := _dggb.Value, error(nil)
			if _agadg != nil {
				return _agadg
			}
			_gabeb.EastAsiaAttr = &_dbec
			continue
		}
		if _dggb.Name.Local == "cs" {
			_bfddb, _gabfb := _dggb.Value, error(nil)
			if _gabfb != nil {
				return _gabfb
			}
			_gabeb.CsAttr = &_bfddb
			continue
		}
		if _dggb.Name.Local == "asciiTheme" {
			_gabeb.AsciiThemeAttr.UnmarshalXMLAttr(_dggb)
			continue
		}
		if _dggb.Name.Local == "hAnsiTheme" {
			_gabeb.HAnsiThemeAttr.UnmarshalXMLAttr(_dggb)
			continue
		}
		if _dggb.Name.Local == "eastAsiaTheme" {
			_gabeb.EastAsiaThemeAttr.UnmarshalXMLAttr(_dggb)
			continue
		}
		if _dggb.Name.Local == "cstheme" {
			_gabeb.CsthemeAttr.UnmarshalXMLAttr(_dggb)
			continue
		}
	}
	for {
		_cdga, _aadae := d.Token()
		if _aadae != nil {
			return _b.Errorf("parsing\u0020CT_Fonts: \u0025s", _aadae)
		}
		if _afcbe, _face := _cdga.(_d.EndElement); _face && _afcbe.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_FtnEdn byte

// Validate validates the CT_Hyperlink and its children
func (_bdcbg *CT_Hyperlink) Validate() error { return _bdcbg.ValidateWithPath("CT_Hyperlink") }
func (_dgfdc *CT_MarkupRange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dgfdc.DisplacedByCustomXmlAttr != ST_DisplacedByCustomXmlUnset {
		_fgga, _affdd := _dgfdc.DisplacedByCustomXmlAttr.MarshalXMLAttr(_d.Name{Local: "w:displacedByCustomXml"})
		if _affdd != nil {
			return _affdd
		}
		start.Attr = append(start.Attr, _fgga)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _dgfdc.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Footnotes and its children
func (_ggee *CT_Footnotes) Validate() error { return _ggee.ValidateWithPath("CT_Footnotes") }

// ValidateWithPath validates the CT_TblPrEx and its children, prefixing error messages with path
func (_dfcfc *CT_TblPrEx) ValidateWithPath(path string) error {
	if _dfcfc.TblW != nil {
		if _adeaa := _dfcfc.TblW.ValidateWithPath(path + "\u002fTblW"); _adeaa != nil {
			return _adeaa
		}
	}
	if _dfcfc.Jc != nil {
		if _fcadf := _dfcfc.Jc.ValidateWithPath(path + "\u002fJc"); _fcadf != nil {
			return _fcadf
		}
	}
	if _dfcfc.TblCellSpacing != nil {
		if _gdcgcf := _dfcfc.TblCellSpacing.ValidateWithPath(path + "\u002fTblCellSpacing"); _gdcgcf != nil {
			return _gdcgcf
		}
	}
	if _dfcfc.TblInd != nil {
		if _ffffg := _dfcfc.TblInd.ValidateWithPath(path + "\u002fTblInd"); _ffffg != nil {
			return _ffffg
		}
	}
	if _dfcfc.TblBorders != nil {
		if _dgebaa := _dfcfc.TblBorders.ValidateWithPath(path + "/TblBorders"); _dgebaa != nil {
			return _dgebaa
		}
	}
	if _dfcfc.Shd != nil {
		if _ffgdc := _dfcfc.Shd.ValidateWithPath(path + "\u002fShd"); _ffgdc != nil {
			return _ffgdc
		}
	}
	if _dfcfc.TblLayout != nil {
		if _gffffd := _dfcfc.TblLayout.ValidateWithPath(path + "\u002fTblLayout"); _gffffd != nil {
			return _gffffd
		}
	}
	if _dfcfc.TblCellMar != nil {
		if _adbfa := _dfcfc.TblCellMar.ValidateWithPath(path + "/TblCellMar"); _adbfa != nil {
			return _adbfa
		}
	}
	if _dfcfc.TblLook != nil {
		if _agfec := _dfcfc.TblLook.ValidateWithPath(path + "\u002fTblLook"); _agfec != nil {
			return _agfec
		}
	}
	if _dfcfc.TblPrExChange != nil {
		if _eafbd := _dfcfc.TblPrExChange.ValidateWithPath(path + "\u002fTblPrExChange"); _eafbd != nil {
			return _eafbd
		}
	}
	return nil
}

type CT_Caption struct {

	// Caption Type Name
	NameAttr string

	// Automatic Caption Placement
	PosAttr ST_CaptionPos

	// Include Chapter Number in Field for Caption
	ChapNumAttr *_g.ST_OnOff

	// Style for Chapter Headings
	HeadingAttr *int64

	// Do Not Include Name In Caption
	NoLabelAttr *_g.ST_OnOff

	// Caption Numbering Format
	NumFmtAttr ST_NumberFormat

	// Chapter Number/Item Index Separator
	SepAttr ST_ChapterSep
}

// ValidateWithPath validates the CT_OdsoFieldMapData and its children, prefixing error messages with path
func (_efdba *CT_OdsoFieldMapData) ValidateWithPath(path string) error {
	if _efdba.Type != nil {
		if _cdfbcf := _efdba.Type.ValidateWithPath(path + "\u002fType"); _cdfbcf != nil {
			return _cdfbcf
		}
	}
	if _efdba.Name != nil {
		if _dgebg := _efdba.Name.ValidateWithPath(path + "\u002fName"); _dgebg != nil {
			return _dgebg
		}
	}
	if _efdba.MappedName != nil {
		if _gceeb := _efdba.MappedName.ValidateWithPath(path + "/MappedName"); _gceeb != nil {
			return _gceeb
		}
	}
	if _efdba.Column != nil {
		if _cbggg := _efdba.Column.ValidateWithPath(path + "\u002fColumn"); _cbggg != nil {
			return _cbggg
		}
	}
	if _efdba.Lid != nil {
		if _fgfdd := _efdba.Lid.ValidateWithPath(path + "\u002fLid"); _fgfdd != nil {
			return _fgfdd
		}
	}
	if _efdba.DynamicAddress != nil {
		if _fffba := _efdba.DynamicAddress.ValidateWithPath(path + "\u002fDynamicAddress"); _fffba != nil {
			return _fffba
		}
	}
	return nil
}
func (_dfecfa *ST_MailMergeOdsoFMDFieldType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dfecfa = 0
	case "null":
		*_dfecfa = 1
	case "dbColumn":
		*_dfecfa = 2
	}
	return nil
}
func NewCT_TblOverlap() *CT_TblOverlap {
	_abdgf := &CT_TblOverlap{}
	_abdgf.ValAttr = ST_TblOverlap(1)
	return _abdgf
}

type CT_LvlLegacy struct {

	// Use Legacy Numbering Properties
	LegacyAttr *_g.ST_OnOff

	// Legacy Spacing
	LegacySpaceAttr *_g.ST_TwipsMeasure

	// Legacy Indent
	LegacyIndentAttr *ST_SignedTwipsMeasure
}

func (_aeeeag *WdCT_PosH) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aeeeag.RelativeFromAttr = WdST_RelFromH(1)
	_aeeeag.Choice = NewWdCT_PosHChoice()
	for _, _ababc := range start.Attr {
		if _ababc.Name.Local == "relativeFrom" {
			_aeeeag.RelativeFromAttr.UnmarshalXMLAttr(_ababc)
			continue
		}
	}
_eggegg:
	for {
		_fgeec, _ddceec := d.Token()
		if _ddceec != nil {
			return _ddceec
		}
		switch _eccebe := _fgeec.(type) {
		case _d.StartElement:
			switch _eccebe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "align"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "align"}:
				_aeeeag.Choice = NewWdCT_PosHChoice()
				if _agead := d.DecodeElement(&_aeeeag.Choice.Align, &_eccebe); _agead != nil {
					return _agead
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "posOffset"}:
				_aeeeag.Choice = NewWdCT_PosHChoice()
				if _edegg := d.DecodeElement(&_aeeeag.Choice.PosOffset, &_eccebe); _edegg != nil {
					return _edegg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on WdCT_PosH \u0025v", _eccebe.Name)
				if _bgcddg := d.Skip(); _bgcddg != nil {
					return _bgcddg
				}
			}
		case _d.EndElement:
			break _eggegg
		case _d.CharData:
		}
	}
	return nil
}

type CT_Markup struct {

	// Annotation Identifier
	IdAttr int64
}

// Validate validates the CT_TcPrInner and its children
func (_fbbee *CT_TcPrInner) Validate() error { return _fbbee.ValidateWithPath("CT_TcPrInner") }

type CT_VMerge struct {

	// Vertical Merge Type
	ValAttr ST_Merge
}

func (_cgbcd ST_Border) Validate() error { return _cgbcd.ValidateWithPath("") }
func (_cbegb *EG_RangeMarkupElements) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cbegb.BookmarkStart != nil {
		_daggg := _d.StartElement{Name: _d.Name{Local: "w:bookmarkStart"}}
		e.EncodeElement(_cbegb.BookmarkStart, _daggg)
	}
	if _cbegb.BookmarkEnd != nil {
		_cfeca := _d.StartElement{Name: _d.Name{Local: "w:bookmarkEnd"}}
		e.EncodeElement(_cbegb.BookmarkEnd, _cfeca)
	}
	if _cbegb.MoveFromRangeStart != nil {
		_dfcfe := _d.StartElement{Name: _d.Name{Local: "w:moveFromRangeStart"}}
		e.EncodeElement(_cbegb.MoveFromRangeStart, _dfcfe)
	}
	if _cbegb.MoveFromRangeEnd != nil {
		_fcagf := _d.StartElement{Name: _d.Name{Local: "w:moveFromRangeEnd"}}
		e.EncodeElement(_cbegb.MoveFromRangeEnd, _fcagf)
	}
	if _cbegb.MoveToRangeStart != nil {
		_fgbcba := _d.StartElement{Name: _d.Name{Local: "w:moveToRangeStart"}}
		e.EncodeElement(_cbegb.MoveToRangeStart, _fgbcba)
	}
	if _cbegb.MoveToRangeEnd != nil {
		_ecccc := _d.StartElement{Name: _d.Name{Local: "w:moveToRangeEnd"}}
		e.EncodeElement(_cbegb.MoveToRangeEnd, _ecccc)
	}
	if _cbegb.CommentRangeStart != nil {
		_gcgbbd := _d.StartElement{Name: _d.Name{Local: "w:commentRangeStart"}}
		e.EncodeElement(_cbegb.CommentRangeStart, _gcgbbd)
	}
	if _cbegb.CommentRangeEnd != nil {
		_geadef := _d.StartElement{Name: _d.Name{Local: "w:commentRangeEnd"}}
		e.EncodeElement(_cbegb.CommentRangeEnd, _geadef)
	}
	if _cbegb.CustomXmlInsRangeStart != nil {
		_cagcaca := _d.StartElement{Name: _d.Name{Local: "w:customXmlInsRangeStart"}}
		e.EncodeElement(_cbegb.CustomXmlInsRangeStart, _cagcaca)
	}
	if _cbegb.CustomXmlInsRangeEnd != nil {
		_bfebe := _d.StartElement{Name: _d.Name{Local: "w:customXmlInsRangeEnd"}}
		e.EncodeElement(_cbegb.CustomXmlInsRangeEnd, _bfebe)
	}
	if _cbegb.CustomXmlDelRangeStart != nil {
		_bbaga := _d.StartElement{Name: _d.Name{Local: "w:customXmlDelRangeStart"}}
		e.EncodeElement(_cbegb.CustomXmlDelRangeStart, _bbaga)
	}
	if _cbegb.CustomXmlDelRangeEnd != nil {
		_fceded := _d.StartElement{Name: _d.Name{Local: "w:customXmlDelRangeEnd"}}
		e.EncodeElement(_cbegb.CustomXmlDelRangeEnd, _fceded)
	}
	if _cbegb.CustomXmlMoveFromRangeStart != nil {
		_beffdd := _d.StartElement{Name: _d.Name{Local: "w:customXmlMoveFromRangeStart"}}
		e.EncodeElement(_cbegb.CustomXmlMoveFromRangeStart, _beffdd)
	}
	if _cbegb.CustomXmlMoveFromRangeEnd != nil {
		_eccecd := _d.StartElement{Name: _d.Name{Local: "w:customXmlMoveFromRangeEnd"}}
		e.EncodeElement(_cbegb.CustomXmlMoveFromRangeEnd, _eccecd)
	}
	if _cbegb.CustomXmlMoveToRangeStart != nil {
		_ecdgb := _d.StartElement{Name: _d.Name{Local: "w:customXmlMoveToRangeStart"}}
		e.EncodeElement(_cbegb.CustomXmlMoveToRangeStart, _ecdgb)
	}
	if _cbegb.CustomXmlMoveToRangeEnd != nil {
		_babccf := _d.StartElement{Name: _d.Name{Local: "w:customXmlMoveToRangeEnd"}}
		e.EncodeElement(_cbegb.CustomXmlMoveToRangeEnd, _babccf)
	}
	return nil
}

// Validate validates the CT_OptimizeForBrowser and its children
func (_bcdgb *CT_OptimizeForBrowser) Validate() error {
	return _bcdgb.ValidateWithPath("CT_OptimizeForBrowser")
}

// Validate validates the CT_DecimalNumberOrPrecent and its children
func (_efegd *CT_DecimalNumberOrPrecent) Validate() error {
	return _efegd.ValidateWithPath("CT_DecimalNumberOrPrecent")
}

// ValidateWithPath validates the GlossaryDocument and its children, prefixing error messages with path
func (_bbead *GlossaryDocument) ValidateWithPath(path string) error {
	if _fcdbg := _bbead.CT_GlossaryDocument.ValidateWithPath(path); _fcdbg != nil {
		return _fcdbg
	}
	return nil
}

type GlossaryDocument struct{ CT_GlossaryDocument }

// Validate validates the CT_ParaRPr and its children
func (_aacfd *CT_ParaRPr) Validate() error   { return _aacfd.ValidateWithPath("CT_ParaRPr") }
func NewCT_CompatSetting() *CT_CompatSetting { _cdbbd := &CT_CompatSetting{}; return _cdbbd }

// ValidateWithPath validates the WebSettings and its children, prefixing error messages with path
func (_edbfb *WebSettings) ValidateWithPath(path string) error {
	if _abdfdg := _edbfb.CT_WebSettings.ValidateWithPath(path); _abdfdg != nil {
		return _abdfdg
	}
	return nil
}
func NewCT_SdtPr() *CT_SdtPr { _bgdgga := &CT_SdtPr{}; return _bgdgga }

// ValidateWithPath validates the CT_DocPartType and its children, prefixing error messages with path
func (_dead *CT_DocPartType) ValidateWithPath(path string) error {
	if _dead.ValAttr == ST_DocPartTypeUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cbef := _dead.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cbef != nil {
		return _cbef
	}
	return nil
}
func (_egga *CT_MailMergeSourceType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_egga.ValAttr = ST_MailMergeSourceType(1)
	for _, _bbeea := range start.Attr {
		if _bbeea.Name.Local == "val" {
			_egga.ValAttr.UnmarshalXMLAttr(_bbeea)
			continue
		}
	}
	for {
		_bffcc, _gdcge := d.Token()
		if _gdcge != nil {
			return _b.Errorf("parsing\u0020CT_MailMergeSourceType:\u0020\u0025s", _gdcge)
		}
		if _bgdaa, _befba := _bffcc.(_d.EndElement); _befba && _bgdaa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_caff *CT_Comment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fcgf := range start.Attr {
		if _fcgf.Name.Local == "initials" {
			_cgdb, _fbab := _fcgf.Value, error(nil)
			if _fbab != nil {
				return _fbab
			}
			_caff.InitialsAttr = &_cgdb
			continue
		}
		if _fcgf.Name.Local == "author" {
			_geae, _gbdb := _fcgf.Value, error(nil)
			if _gbdb != nil {
				return _gbdb
			}
			_caff.AuthorAttr = _geae
			continue
		}
		if _fcgf.Name.Local == "date" {
			_aced, _ggg := ParseStdlibTime(_fcgf.Value)
			if _ggg != nil {
				return _ggg
			}
			_caff.DateAttr = &_aced
			continue
		}
		if _fcgf.Name.Local == "id" {
			_aeee, _ffggc := _dd.ParseInt(_fcgf.Value, 10, 64)
			if _ffggc != nil {
				return _ffggc
			}
			_caff.IdAttr = _aeee
			continue
		}
	}
_cgbc:
	for {
		_cgef, _dgcdf := d.Token()
		if _dgcdf != nil {
			return _dgcdf
		}
		switch _gafa := _cgef.(type) {
		case _d.StartElement:
			switch _gafa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_cebf := NewEG_BlockLevelElts()
				_abde := NewCT_AltChunk()
				if _agfd := d.DecodeElement(_abde, &_gafa); _agfd != nil {
					return _agfd
				}
				_cebf.AltChunk = append(_cebf.AltChunk, _abde)
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cebf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_decb := NewEG_BlockLevelElts()
				_bcbd := NewEG_ContentBlockContent()
				_bcbd.CustomXml = NewCT_CustomXmlBlock()
				if _dagae := d.DecodeElement(_bcbd.CustomXml, &_gafa); _dagae != nil {
					return _dagae
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _decb)
				_decb.EG_ContentBlockContent = append(_decb.EG_ContentBlockContent, _bcbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_afag := NewEG_BlockLevelElts()
				_cebb := NewEG_ContentBlockContent()
				_cebb.Sdt = NewCT_SdtBlock()
				if _gfda := d.DecodeElement(_cebb.Sdt, &_gafa); _gfda != nil {
					return _gfda
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _afag)
				_afag.EG_ContentBlockContent = append(_afag.EG_ContentBlockContent, _cebb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_afea := NewEG_BlockLevelElts()
				_afgg := NewEG_ContentBlockContent()
				_fbde := NewCT_P()
				if _dbaca := d.DecodeElement(_fbde, &_gafa); _dbaca != nil {
					return _dbaca
				}
				_afgg.P = append(_afgg.P, _fbde)
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _afea)
				_afea.EG_ContentBlockContent = append(_afea.EG_ContentBlockContent, _afgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_cbad := NewEG_BlockLevelElts()
				_dcfbf := NewEG_ContentBlockContent()
				_fegf := NewCT_Tbl()
				if _bgdf := d.DecodeElement(_fegf, &_gafa); _bgdf != nil {
					return _bgdf
				}
				_dcfbf.Tbl = append(_dcfbf.Tbl, _fegf)
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cbad)
				_cbad.EG_ContentBlockContent = append(_cbad.EG_ContentBlockContent, _dcfbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_eadf := NewEG_BlockLevelElts()
				_geab := NewEG_ContentBlockContent()
				_eedb := NewEG_RunLevelElts()
				_eedb.ProofErr = NewCT_ProofErr()
				if _fcga := d.DecodeElement(_eedb.ProofErr, &_gafa); _fcga != nil {
					return _fcga
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _eadf)
				_eadf.EG_ContentBlockContent = append(_eadf.EG_ContentBlockContent, _geab)
				_geab.EG_RunLevelElts = append(_geab.EG_RunLevelElts, _eedb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_dbagb := NewEG_BlockLevelElts()
				_adfee := NewEG_ContentBlockContent()
				_fdgcd := NewEG_RunLevelElts()
				_fdgcd.PermStart = NewCT_PermStart()
				if _bedeg := d.DecodeElement(_fdgcd.PermStart, &_gafa); _bedeg != nil {
					return _bedeg
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _dbagb)
				_dbagb.EG_ContentBlockContent = append(_dbagb.EG_ContentBlockContent, _adfee)
				_adfee.EG_RunLevelElts = append(_adfee.EG_RunLevelElts, _fdgcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_cee := NewEG_BlockLevelElts()
				_gecg := NewEG_ContentBlockContent()
				_dcdgd := NewEG_RunLevelElts()
				_dcdgd.PermEnd = NewCT_Perm()
				if _beegf := d.DecodeElement(_dcdgd.PermEnd, &_gafa); _beegf != nil {
					return _beegf
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cee)
				_cee.EG_ContentBlockContent = append(_cee.EG_ContentBlockContent, _gecg)
				_gecg.EG_RunLevelElts = append(_gecg.EG_RunLevelElts, _dcdgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cafg := NewEG_BlockLevelElts()
				_ccag := NewEG_ContentBlockContent()
				_bdc := NewEG_RunLevelElts()
				_bdc.Ins = NewCT_RunTrackChange()
				if _abbe := d.DecodeElement(_bdc.Ins, &_gafa); _abbe != nil {
					return _abbe
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cafg)
				_cafg.EG_ContentBlockContent = append(_cafg.EG_ContentBlockContent, _ccag)
				_ccag.EG_RunLevelElts = append(_ccag.EG_RunLevelElts, _bdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ebae := NewEG_BlockLevelElts()
				_eafbc := NewEG_ContentBlockContent()
				_fed := NewEG_RunLevelElts()
				_fed.Del = NewCT_RunTrackChange()
				if _ebbe := d.DecodeElement(_fed.Del, &_gafa); _ebbe != nil {
					return _ebbe
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _ebae)
				_ebae.EG_ContentBlockContent = append(_ebae.EG_ContentBlockContent, _eafbc)
				_eafbc.EG_RunLevelElts = append(_eafbc.EG_RunLevelElts, _fed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_ffffd := NewEG_BlockLevelElts()
				_dfdbe := NewEG_ContentBlockContent()
				_fgc := NewEG_RunLevelElts()
				_fgc.MoveFrom = NewCT_RunTrackChange()
				if _bbcd := d.DecodeElement(_fgc.MoveFrom, &_gafa); _bbcd != nil {
					return _bbcd
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _ffffd)
				_ffffd.EG_ContentBlockContent = append(_ffffd.EG_ContentBlockContent, _dfdbe)
				_dfdbe.EG_RunLevelElts = append(_dfdbe.EG_RunLevelElts, _fgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_befgc := NewEG_BlockLevelElts()
				_abdc := NewEG_ContentBlockContent()
				_adbb := NewEG_RunLevelElts()
				_adbb.MoveTo = NewCT_RunTrackChange()
				if _adbba := d.DecodeElement(_adbb.MoveTo, &_gafa); _adbba != nil {
					return _adbba
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _befgc)
				_befgc.EG_ContentBlockContent = append(_befgc.EG_ContentBlockContent, _abdc)
				_abdc.EG_RunLevelElts = append(_abdc.EG_RunLevelElts, _adbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_cefd := NewEG_BlockLevelElts()
				_dddd := NewEG_ContentBlockContent()
				_bcga := NewEG_RunLevelElts()
				_cfcbc := NewEG_RangeMarkupElements()
				_cfcbc.BookmarkStart = NewCT_Bookmark()
				if _gacb := d.DecodeElement(_cfcbc.BookmarkStart, &_gafa); _gacb != nil {
					return _gacb
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cefd)
				_cefd.EG_ContentBlockContent = append(_cefd.EG_ContentBlockContent, _dddd)
				_dddd.EG_RunLevelElts = append(_dddd.EG_RunLevelElts, _bcga)
				_bcga.EG_RangeMarkupElements = append(_bcga.EG_RangeMarkupElements, _cfcbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_afbf := NewEG_BlockLevelElts()
				_bdfd := NewEG_ContentBlockContent()
				_fface := NewEG_RunLevelElts()
				_ceff := NewEG_RangeMarkupElements()
				_ceff.BookmarkEnd = NewCT_MarkupRange()
				if _dede := d.DecodeElement(_ceff.BookmarkEnd, &_gafa); _dede != nil {
					return _dede
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _afbf)
				_afbf.EG_ContentBlockContent = append(_afbf.EG_ContentBlockContent, _bdfd)
				_bdfd.EG_RunLevelElts = append(_bdfd.EG_RunLevelElts, _fface)
				_fface.EG_RangeMarkupElements = append(_fface.EG_RangeMarkupElements, _ceff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_gfdad := NewEG_BlockLevelElts()
				_cabd := NewEG_ContentBlockContent()
				_aaec := NewEG_RunLevelElts()
				_cedf := NewEG_RangeMarkupElements()
				_cedf.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gafg := d.DecodeElement(_cedf.MoveFromRangeStart, &_gafa); _gafg != nil {
					return _gafg
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _gfdad)
				_gfdad.EG_ContentBlockContent = append(_gfdad.EG_ContentBlockContent, _cabd)
				_cabd.EG_RunLevelElts = append(_cabd.EG_RunLevelElts, _aaec)
				_aaec.EG_RangeMarkupElements = append(_aaec.EG_RangeMarkupElements, _cedf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_bdgd := NewEG_BlockLevelElts()
				_agac := NewEG_ContentBlockContent()
				_cgdf := NewEG_RunLevelElts()
				_deeg := NewEG_RangeMarkupElements()
				_deeg.MoveFromRangeEnd = NewCT_MarkupRange()
				if _faebc := d.DecodeElement(_deeg.MoveFromRangeEnd, &_gafa); _faebc != nil {
					return _faebc
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _bdgd)
				_bdgd.EG_ContentBlockContent = append(_bdgd.EG_ContentBlockContent, _agac)
				_agac.EG_RunLevelElts = append(_agac.EG_RunLevelElts, _cgdf)
				_cgdf.EG_RangeMarkupElements = append(_cgdf.EG_RangeMarkupElements, _deeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_aecef := NewEG_BlockLevelElts()
				_ccfb := NewEG_ContentBlockContent()
				_bdcg := NewEG_RunLevelElts()
				_faec := NewEG_RangeMarkupElements()
				_faec.MoveToRangeStart = NewCT_MoveBookmark()
				if _aaffd := d.DecodeElement(_faec.MoveToRangeStart, &_gafa); _aaffd != nil {
					return _aaffd
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _aecef)
				_aecef.EG_ContentBlockContent = append(_aecef.EG_ContentBlockContent, _ccfb)
				_ccfb.EG_RunLevelElts = append(_ccfb.EG_RunLevelElts, _bdcg)
				_bdcg.EG_RangeMarkupElements = append(_bdcg.EG_RangeMarkupElements, _faec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_egfga := NewEG_BlockLevelElts()
				_adfc := NewEG_ContentBlockContent()
				_eaeg := NewEG_RunLevelElts()
				_efa := NewEG_RangeMarkupElements()
				_efa.MoveToRangeEnd = NewCT_MarkupRange()
				if _agbd := d.DecodeElement(_efa.MoveToRangeEnd, &_gafa); _agbd != nil {
					return _agbd
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _egfga)
				_egfga.EG_ContentBlockContent = append(_egfga.EG_ContentBlockContent, _adfc)
				_adfc.EG_RunLevelElts = append(_adfc.EG_RunLevelElts, _eaeg)
				_eaeg.EG_RangeMarkupElements = append(_eaeg.EG_RangeMarkupElements, _efa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_bgfa := NewEG_BlockLevelElts()
				_bddf := NewEG_ContentBlockContent()
				_cfbg := NewEG_RunLevelElts()
				_dacdc := NewEG_RangeMarkupElements()
				_dacdc.CommentRangeStart = NewCT_MarkupRange()
				if _ccfe := d.DecodeElement(_dacdc.CommentRangeStart, &_gafa); _ccfe != nil {
					return _ccfe
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _bgfa)
				_bgfa.EG_ContentBlockContent = append(_bgfa.EG_ContentBlockContent, _bddf)
				_bddf.EG_RunLevelElts = append(_bddf.EG_RunLevelElts, _cfbg)
				_cfbg.EG_RangeMarkupElements = append(_cfbg.EG_RangeMarkupElements, _dacdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_fdfe := NewEG_BlockLevelElts()
				_afed := NewEG_ContentBlockContent()
				_adfcb := NewEG_RunLevelElts()
				_gcfe := NewEG_RangeMarkupElements()
				_gcfe.CommentRangeEnd = NewCT_MarkupRange()
				if _fdbg := d.DecodeElement(_gcfe.CommentRangeEnd, &_gafa); _fdbg != nil {
					return _fdbg
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _fdfe)
				_fdfe.EG_ContentBlockContent = append(_fdfe.EG_ContentBlockContent, _afed)
				_afed.EG_RunLevelElts = append(_afed.EG_RunLevelElts, _adfcb)
				_adfcb.EG_RangeMarkupElements = append(_adfcb.EG_RangeMarkupElements, _gcfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_egdag := NewEG_BlockLevelElts()
				_cgbag := NewEG_ContentBlockContent()
				_gcbc := NewEG_RunLevelElts()
				_ffae := NewEG_RangeMarkupElements()
				_ffae.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _fabf := d.DecodeElement(_ffae.CustomXmlInsRangeStart, &_gafa); _fabf != nil {
					return _fabf
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _egdag)
				_egdag.EG_ContentBlockContent = append(_egdag.EG_ContentBlockContent, _cgbag)
				_cgbag.EG_RunLevelElts = append(_cgbag.EG_RunLevelElts, _gcbc)
				_gcbc.EG_RangeMarkupElements = append(_gcbc.EG_RangeMarkupElements, _ffae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_aacde := NewEG_BlockLevelElts()
				_gdcg := NewEG_ContentBlockContent()
				_adcg := NewEG_RunLevelElts()
				_gdgb := NewEG_RangeMarkupElements()
				_gdgb.CustomXmlInsRangeEnd = NewCT_Markup()
				if _ecbd := d.DecodeElement(_gdgb.CustomXmlInsRangeEnd, &_gafa); _ecbd != nil {
					return _ecbd
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _aacde)
				_aacde.EG_ContentBlockContent = append(_aacde.EG_ContentBlockContent, _gdcg)
				_gdcg.EG_RunLevelElts = append(_gdcg.EG_RunLevelElts, _adcg)
				_adcg.EG_RangeMarkupElements = append(_adcg.EG_RangeMarkupElements, _gdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_aage := NewEG_BlockLevelElts()
				_gebg := NewEG_ContentBlockContent()
				_cbag := NewEG_RunLevelElts()
				_ebag := NewEG_RangeMarkupElements()
				_ebag.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gbbf := d.DecodeElement(_ebag.CustomXmlDelRangeStart, &_gafa); _gbbf != nil {
					return _gbbf
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _aage)
				_aage.EG_ContentBlockContent = append(_aage.EG_ContentBlockContent, _gebg)
				_gebg.EG_RunLevelElts = append(_gebg.EG_RunLevelElts, _cbag)
				_cbag.EG_RangeMarkupElements = append(_cbag.EG_RangeMarkupElements, _ebag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_caea := NewEG_BlockLevelElts()
				_agfa := NewEG_ContentBlockContent()
				_ccee := NewEG_RunLevelElts()
				_cbaa := NewEG_RangeMarkupElements()
				_cbaa.CustomXmlDelRangeEnd = NewCT_Markup()
				if _dggf := d.DecodeElement(_cbaa.CustomXmlDelRangeEnd, &_gafa); _dggf != nil {
					return _dggf
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _caea)
				_caea.EG_ContentBlockContent = append(_caea.EG_ContentBlockContent, _agfa)
				_agfa.EG_RunLevelElts = append(_agfa.EG_RunLevelElts, _ccee)
				_ccee.EG_RangeMarkupElements = append(_ccee.EG_RangeMarkupElements, _cbaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_cgaf := NewEG_BlockLevelElts()
				_eeef := NewEG_ContentBlockContent()
				_cbdf := NewEG_RunLevelElts()
				_gebe := NewEG_RangeMarkupElements()
				_gebe.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _gfcfa := d.DecodeElement(_gebe.CustomXmlMoveFromRangeStart, &_gafa); _gfcfa != nil {
					return _gfcfa
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cgaf)
				_cgaf.EG_ContentBlockContent = append(_cgaf.EG_ContentBlockContent, _eeef)
				_eeef.EG_RunLevelElts = append(_eeef.EG_RunLevelElts, _cbdf)
				_cbdf.EG_RangeMarkupElements = append(_cbdf.EG_RangeMarkupElements, _gebe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_eeed := NewEG_BlockLevelElts()
				_bedg := NewEG_ContentBlockContent()
				_cccf := NewEG_RunLevelElts()
				_cac := NewEG_RangeMarkupElements()
				_cac.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _cead := d.DecodeElement(_cac.CustomXmlMoveFromRangeEnd, &_gafa); _cead != nil {
					return _cead
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _eeed)
				_eeed.EG_ContentBlockContent = append(_eeed.EG_ContentBlockContent, _bedg)
				_bedg.EG_RunLevelElts = append(_bedg.EG_RunLevelElts, _cccf)
				_cccf.EG_RangeMarkupElements = append(_cccf.EG_RangeMarkupElements, _cac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_cede := NewEG_BlockLevelElts()
				_dgfa := NewEG_ContentBlockContent()
				_dfcgc := NewEG_RunLevelElts()
				_degde := NewEG_RangeMarkupElements()
				_degde.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bgcf := d.DecodeElement(_degde.CustomXmlMoveToRangeStart, &_gafa); _bgcf != nil {
					return _bgcf
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cede)
				_cede.EG_ContentBlockContent = append(_cede.EG_ContentBlockContent, _dgfa)
				_dgfa.EG_RunLevelElts = append(_dgfa.EG_RunLevelElts, _dfcgc)
				_dfcgc.EG_RangeMarkupElements = append(_dfcgc.EG_RangeMarkupElements, _degde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_bcbg := NewEG_BlockLevelElts()
				_gce := NewEG_ContentBlockContent()
				_cggge := NewEG_RunLevelElts()
				_dbcg := NewEG_RangeMarkupElements()
				_dbcg.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _gfed := d.DecodeElement(_dbcg.CustomXmlMoveToRangeEnd, &_gafa); _gfed != nil {
					return _gfed
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _bcbg)
				_bcbg.EG_ContentBlockContent = append(_bcbg.EG_ContentBlockContent, _gce)
				_gce.EG_RunLevelElts = append(_gce.EG_RunLevelElts, _cggge)
				_cggge.EG_RangeMarkupElements = append(_cggge.EG_RangeMarkupElements, _dbcg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_cdeg := NewEG_BlockLevelElts()
				_eadda := NewEG_ContentBlockContent()
				_bbda := NewEG_RunLevelElts()
				_efdd := NewEG_MathContent()
				_efdd.OMathPara = _f.NewOMathPara()
				if _cbbb := d.DecodeElement(_efdd.OMathPara, &_gafa); _cbbb != nil {
					return _cbbb
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _cdeg)
				_cdeg.EG_ContentBlockContent = append(_cdeg.EG_ContentBlockContent, _eadda)
				_eadda.EG_RunLevelElts = append(_eadda.EG_RunLevelElts, _bbda)
				_bbda.EG_MathContent = append(_bbda.EG_MathContent, _efdd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_abbf := NewEG_BlockLevelElts()
				_becde := NewEG_ContentBlockContent()
				_dcbg := NewEG_RunLevelElts()
				_gedc := NewEG_MathContent()
				_gedc.OMath = _f.NewOMath()
				if _gacg := d.DecodeElement(_gedc.OMath, &_gafa); _gacg != nil {
					return _gacg
				}
				_caff.EG_BlockLevelElts = append(_caff.EG_BlockLevelElts, _abbf)
				_abbf.EG_ContentBlockContent = append(_abbf.EG_ContentBlockContent, _becde)
				_becde.EG_RunLevelElts = append(_becde.EG_RunLevelElts, _dcbg)
				_dcbg.EG_MathContent = append(_dcbg.EG_MathContent, _gedc)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_Comment\u0020\u0025v", _gafa.Name)
				if _gccd := d.Skip(); _gccd != nil {
					return _gccd
				}
			}
		case _d.EndElement:
			break _cgbc
		case _d.CharData:
		}
	}
	return nil
}
func (_cbdfg *CT_CustomXmlRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gaba := range start.Attr {
		if _gaba.Name.Local == "uri" {
			_fcfd, _aadg := _gaba.Value, error(nil)
			if _aadg != nil {
				return _aadg
			}
			_cbdfg.UriAttr = &_fcfd
			continue
		}
		if _gaba.Name.Local == "element" {
			_efgeg, _ffcd := _gaba.Value, error(nil)
			if _ffcd != nil {
				return _ffcd
			}
			_cbdfg.ElementAttr = _efgeg
			continue
		}
	}
_cbda:
	for {
		_gdcgd, _efca := d.Token()
		if _efca != nil {
			return _efca
		}
		switch _ddegb := _gdcgd.(type) {
		case _d.StartElement:
			switch _ddegb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlPr"}:
				_cbdfg.CustomXmlPr = NewCT_CustomXmlPr()
				if _agdf := d.DecodeElement(_cbdfg.CustomXmlPr, &_ddegb); _agdf != nil {
					return _agdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_agdb := NewEG_PContent()
				_ccbd := NewCT_SimpleField()
				if _ffaed := d.DecodeElement(_ccbd, &_ddegb); _ffaed != nil {
					return _ffaed
				}
				_agdb.FldSimple = append(_agdb.FldSimple, _ccbd)
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _agdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_gfgc := NewEG_PContent()
				_gfgc.Hyperlink = NewCT_Hyperlink()
				if _fefc := d.DecodeElement(_gfgc.Hyperlink, &_ddegb); _fefc != nil {
					return _fefc
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _gfgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_dgbd := NewEG_PContent()
				_dgbd.SubDoc = NewCT_Rel()
				if _aaed := d.DecodeElement(_dgbd.SubDoc, &_ddegb); _aaed != nil {
					return _aaed
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _dgbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_fadf := NewEG_PContent()
				_efeb := NewEG_ContentRunContent()
				_efeb.CustomXml = NewCT_CustomXmlRun()
				if _eccg := d.DecodeElement(_efeb.CustomXml, &_ddegb); _eccg != nil {
					return _eccg
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _fadf)
				_fadf.EG_ContentRunContent = append(_fadf.EG_ContentRunContent, _efeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_fbga := NewEG_PContent()
				_edced := NewEG_ContentRunContent()
				_edced.SmartTag = NewCT_SmartTagRun()
				if _aeeea := d.DecodeElement(_edced.SmartTag, &_ddegb); _aeeea != nil {
					return _aeeea
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _fbga)
				_fbga.EG_ContentRunContent = append(_fbga.EG_ContentRunContent, _edced)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_acagge := NewEG_PContent()
				_bccc := NewEG_ContentRunContent()
				_bccc.Sdt = NewCT_SdtRun()
				if _edff := d.DecodeElement(_bccc.Sdt, &_ddegb); _edff != nil {
					return _edff
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _acagge)
				_acagge.EG_ContentRunContent = append(_acagge.EG_ContentRunContent, _bccc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_cdacd := NewEG_PContent()
				_agdg := NewEG_ContentRunContent()
				_agdg.Dir = NewCT_DirContentRun()
				if _fcda := d.DecodeElement(_agdg.Dir, &_ddegb); _fcda != nil {
					return _fcda
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _cdacd)
				_cdacd.EG_ContentRunContent = append(_cdacd.EG_ContentRunContent, _agdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_aebab := NewEG_PContent()
				_cgbd := NewEG_ContentRunContent()
				_cgbd.Bdo = NewCT_BdoContentRun()
				if _fgfcc := d.DecodeElement(_cgbd.Bdo, &_ddegb); _fgfcc != nil {
					return _fgfcc
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _aebab)
				_aebab.EG_ContentRunContent = append(_aebab.EG_ContentRunContent, _cgbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_dbed := NewEG_PContent()
				_bgbca := NewEG_ContentRunContent()
				_bgbca.R = NewCT_R()
				if _febaa := d.DecodeElement(_bgbca.R, &_ddegb); _febaa != nil {
					return _febaa
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _dbed)
				_dbed.EG_ContentRunContent = append(_dbed.EG_ContentRunContent, _bgbca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_dffeb := NewEG_PContent()
				_cddff := NewEG_ContentRunContent()
				_gbdca := NewEG_RunLevelElts()
				_gbdca.ProofErr = NewCT_ProofErr()
				if _cgdgc := d.DecodeElement(_gbdca.ProofErr, &_ddegb); _cgdgc != nil {
					return _cgdgc
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _dffeb)
				_dffeb.EG_ContentRunContent = append(_dffeb.EG_ContentRunContent, _cddff)
				_cddff.EG_RunLevelElts = append(_cddff.EG_RunLevelElts, _gbdca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_baff := NewEG_PContent()
				_edeca := NewEG_ContentRunContent()
				_gcge := NewEG_RunLevelElts()
				_gcge.PermStart = NewCT_PermStart()
				if _gead := d.DecodeElement(_gcge.PermStart, &_ddegb); _gead != nil {
					return _gead
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _baff)
				_baff.EG_ContentRunContent = append(_baff.EG_ContentRunContent, _edeca)
				_edeca.EG_RunLevelElts = append(_edeca.EG_RunLevelElts, _gcge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_dabbb := NewEG_PContent()
				_ffdd := NewEG_ContentRunContent()
				_addeb := NewEG_RunLevelElts()
				_addeb.PermEnd = NewCT_Perm()
				if _dfbe := d.DecodeElement(_addeb.PermEnd, &_ddegb); _dfbe != nil {
					return _dfbe
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _dabbb)
				_dabbb.EG_ContentRunContent = append(_dabbb.EG_ContentRunContent, _ffdd)
				_ffdd.EG_RunLevelElts = append(_ffdd.EG_RunLevelElts, _addeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_ggcga := NewEG_PContent()
				_bcfdg := NewEG_ContentRunContent()
				_fbgg := NewEG_RunLevelElts()
				_fbgg.Ins = NewCT_RunTrackChange()
				if _ddfe := d.DecodeElement(_fbgg.Ins, &_ddegb); _ddfe != nil {
					return _ddfe
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ggcga)
				_ggcga.EG_ContentRunContent = append(_ggcga.EG_ContentRunContent, _bcfdg)
				_bcfdg.EG_RunLevelElts = append(_bcfdg.EG_RunLevelElts, _fbgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_acbf := NewEG_PContent()
				_bff := NewEG_ContentRunContent()
				_cbfc := NewEG_RunLevelElts()
				_cbfc.Del = NewCT_RunTrackChange()
				if _bbabc := d.DecodeElement(_cbfc.Del, &_ddegb); _bbabc != nil {
					return _bbabc
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _acbf)
				_acbf.EG_ContentRunContent = append(_acbf.EG_ContentRunContent, _bff)
				_bff.EG_RunLevelElts = append(_bff.EG_RunLevelElts, _cbfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_gbeb := NewEG_PContent()
				_ggbfg := NewEG_ContentRunContent()
				_cfgab := NewEG_RunLevelElts()
				_cfgab.MoveFrom = NewCT_RunTrackChange()
				if _fafge := d.DecodeElement(_cfgab.MoveFrom, &_ddegb); _fafge != nil {
					return _fafge
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _gbeb)
				_gbeb.EG_ContentRunContent = append(_gbeb.EG_ContentRunContent, _ggbfg)
				_ggbfg.EG_RunLevelElts = append(_ggbfg.EG_RunLevelElts, _cfgab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_cfeb := NewEG_PContent()
				_cddcb := NewEG_ContentRunContent()
				_bdcf := NewEG_RunLevelElts()
				_bdcf.MoveTo = NewCT_RunTrackChange()
				if _ageg := d.DecodeElement(_bdcf.MoveTo, &_ddegb); _ageg != nil {
					return _ageg
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _cfeb)
				_cfeb.EG_ContentRunContent = append(_cfeb.EG_ContentRunContent, _cddcb)
				_cddcb.EG_RunLevelElts = append(_cddcb.EG_RunLevelElts, _bdcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_aaedc := NewEG_PContent()
				_dadbc := NewEG_ContentRunContent()
				_edcd := NewEG_RunLevelElts()
				_bafca := NewEG_RangeMarkupElements()
				_bafca.BookmarkStart = NewCT_Bookmark()
				if _dgae := d.DecodeElement(_bafca.BookmarkStart, &_ddegb); _dgae != nil {
					return _dgae
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _aaedc)
				_aaedc.EG_ContentRunContent = append(_aaedc.EG_ContentRunContent, _dadbc)
				_dadbc.EG_RunLevelElts = append(_dadbc.EG_RunLevelElts, _edcd)
				_edcd.EG_RangeMarkupElements = append(_edcd.EG_RangeMarkupElements, _bafca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_ceag := NewEG_PContent()
				_faadd := NewEG_ContentRunContent()
				_bdac := NewEG_RunLevelElts()
				_ccde := NewEG_RangeMarkupElements()
				_ccde.BookmarkEnd = NewCT_MarkupRange()
				if _bgag := d.DecodeElement(_ccde.BookmarkEnd, &_ddegb); _bgag != nil {
					return _bgag
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ceag)
				_ceag.EG_ContentRunContent = append(_ceag.EG_ContentRunContent, _faadd)
				_faadd.EG_RunLevelElts = append(_faadd.EG_RunLevelElts, _bdac)
				_bdac.EG_RangeMarkupElements = append(_bdac.EG_RangeMarkupElements, _ccde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fecag := NewEG_PContent()
				_bfde := NewEG_ContentRunContent()
				_gfaeg := NewEG_RunLevelElts()
				_bdabe := NewEG_RangeMarkupElements()
				_bdabe.MoveFromRangeStart = NewCT_MoveBookmark()
				if _eggbc := d.DecodeElement(_bdabe.MoveFromRangeStart, &_ddegb); _eggbc != nil {
					return _eggbc
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _fecag)
				_fecag.EG_ContentRunContent = append(_fecag.EG_ContentRunContent, _bfde)
				_bfde.EG_RunLevelElts = append(_bfde.EG_RunLevelElts, _gfaeg)
				_gfaeg.EG_RangeMarkupElements = append(_gfaeg.EG_RangeMarkupElements, _bdabe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_cdegg := NewEG_PContent()
				_ffde := NewEG_ContentRunContent()
				_adbf := NewEG_RunLevelElts()
				_ffgd := NewEG_RangeMarkupElements()
				_ffgd.MoveFromRangeEnd = NewCT_MarkupRange()
				if _cgbg := d.DecodeElement(_ffgd.MoveFromRangeEnd, &_ddegb); _cgbg != nil {
					return _cgbg
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _cdegg)
				_cdegg.EG_ContentRunContent = append(_cdegg.EG_ContentRunContent, _ffde)
				_ffde.EG_RunLevelElts = append(_ffde.EG_RunLevelElts, _adbf)
				_adbf.EG_RangeMarkupElements = append(_adbf.EG_RangeMarkupElements, _ffgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_bbed := NewEG_PContent()
				_becbd := NewEG_ContentRunContent()
				_gffa := NewEG_RunLevelElts()
				_cdbf := NewEG_RangeMarkupElements()
				_cdbf.MoveToRangeStart = NewCT_MoveBookmark()
				if _eefd := d.DecodeElement(_cdbf.MoveToRangeStart, &_ddegb); _eefd != nil {
					return _eefd
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _bbed)
				_bbed.EG_ContentRunContent = append(_bbed.EG_ContentRunContent, _becbd)
				_becbd.EG_RunLevelElts = append(_becbd.EG_RunLevelElts, _gffa)
				_gffa.EG_RangeMarkupElements = append(_gffa.EG_RangeMarkupElements, _cdbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_agdbc := NewEG_PContent()
				_dfbc := NewEG_ContentRunContent()
				_gdcd := NewEG_RunLevelElts()
				_fgdgf := NewEG_RangeMarkupElements()
				_fgdgf.MoveToRangeEnd = NewCT_MarkupRange()
				if _ggaef := d.DecodeElement(_fgdgf.MoveToRangeEnd, &_ddegb); _ggaef != nil {
					return _ggaef
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _agdbc)
				_agdbc.EG_ContentRunContent = append(_agdbc.EG_ContentRunContent, _dfbc)
				_dfbc.EG_RunLevelElts = append(_dfbc.EG_RunLevelElts, _gdcd)
				_gdcd.EG_RangeMarkupElements = append(_gdcd.EG_RangeMarkupElements, _fgdgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_cfcf := NewEG_PContent()
				_ebcd := NewEG_ContentRunContent()
				_cecc := NewEG_RunLevelElts()
				_ebdfa := NewEG_RangeMarkupElements()
				_ebdfa.CommentRangeStart = NewCT_MarkupRange()
				if _defde := d.DecodeElement(_ebdfa.CommentRangeStart, &_ddegb); _defde != nil {
					return _defde
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _cfcf)
				_cfcf.EG_ContentRunContent = append(_cfcf.EG_ContentRunContent, _ebcd)
				_ebcd.EG_RunLevelElts = append(_ebcd.EG_RunLevelElts, _cecc)
				_cecc.EG_RangeMarkupElements = append(_cecc.EG_RangeMarkupElements, _ebdfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_ecebc := NewEG_PContent()
				_bcef := NewEG_ContentRunContent()
				_cfee := NewEG_RunLevelElts()
				_dcaf := NewEG_RangeMarkupElements()
				_dcaf.CommentRangeEnd = NewCT_MarkupRange()
				if _dfec := d.DecodeElement(_dcaf.CommentRangeEnd, &_ddegb); _dfec != nil {
					return _dfec
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ecebc)
				_ecebc.EG_ContentRunContent = append(_ecebc.EG_ContentRunContent, _bcef)
				_bcef.EG_RunLevelElts = append(_bcef.EG_RunLevelElts, _cfee)
				_cfee.EG_RangeMarkupElements = append(_cfee.EG_RangeMarkupElements, _dcaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_bafba := NewEG_PContent()
				_eeegc := NewEG_ContentRunContent()
				_edgff := NewEG_RunLevelElts()
				_gdfgd := NewEG_RangeMarkupElements()
				_gdfgd.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _begfb := d.DecodeElement(_gdfgd.CustomXmlInsRangeStart, &_ddegb); _begfb != nil {
					return _begfb
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _bafba)
				_bafba.EG_ContentRunContent = append(_bafba.EG_ContentRunContent, _eeegc)
				_eeegc.EG_RunLevelElts = append(_eeegc.EG_RunLevelElts, _edgff)
				_edgff.EG_RangeMarkupElements = append(_edgff.EG_RangeMarkupElements, _gdfgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_fgbf := NewEG_PContent()
				_ddeaa := NewEG_ContentRunContent()
				_fcfe := NewEG_RunLevelElts()
				_cdfg := NewEG_RangeMarkupElements()
				_cdfg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _gdca := d.DecodeElement(_cdfg.CustomXmlInsRangeEnd, &_ddegb); _gdca != nil {
					return _gdca
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _fgbf)
				_fgbf.EG_ContentRunContent = append(_fgbf.EG_ContentRunContent, _ddeaa)
				_ddeaa.EG_RunLevelElts = append(_ddeaa.EG_RunLevelElts, _fcfe)
				_fcfe.EG_RangeMarkupElements = append(_fcfe.EG_RangeMarkupElements, _cdfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_ebab := NewEG_PContent()
				_ccbdb := NewEG_ContentRunContent()
				_caad := NewEG_RunLevelElts()
				_eddad := NewEG_RangeMarkupElements()
				_eddad.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _dbbae := d.DecodeElement(_eddad.CustomXmlDelRangeStart, &_ddegb); _dbbae != nil {
					return _dbbae
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ebab)
				_ebab.EG_ContentRunContent = append(_ebab.EG_ContentRunContent, _ccbdb)
				_ccbdb.EG_RunLevelElts = append(_ccbdb.EG_RunLevelElts, _caad)
				_caad.EG_RangeMarkupElements = append(_caad.EG_RangeMarkupElements, _eddad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_ddbe := NewEG_PContent()
				_cfcfb := NewEG_ContentRunContent()
				_fegc := NewEG_RunLevelElts()
				_gaegb := NewEG_RangeMarkupElements()
				_gaegb.CustomXmlDelRangeEnd = NewCT_Markup()
				if _acdf := d.DecodeElement(_gaegb.CustomXmlDelRangeEnd, &_ddegb); _acdf != nil {
					return _acdf
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ddbe)
				_ddbe.EG_ContentRunContent = append(_ddbe.EG_ContentRunContent, _cfcfb)
				_cfcfb.EG_RunLevelElts = append(_cfcfb.EG_RunLevelElts, _fegc)
				_fegc.EG_RangeMarkupElements = append(_fegc.EG_RangeMarkupElements, _gaegb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_faggb := NewEG_PContent()
				_ddcbg := NewEG_ContentRunContent()
				_bddd := NewEG_RunLevelElts()
				_fdcd := NewEG_RangeMarkupElements()
				_fdcd.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _gbdd := d.DecodeElement(_fdcd.CustomXmlMoveFromRangeStart, &_ddegb); _gbdd != nil {
					return _gbdd
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _faggb)
				_faggb.EG_ContentRunContent = append(_faggb.EG_ContentRunContent, _ddcbg)
				_ddcbg.EG_RunLevelElts = append(_ddcbg.EG_RunLevelElts, _bddd)
				_bddd.EG_RangeMarkupElements = append(_bddd.EG_RangeMarkupElements, _fdcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_ddcg := NewEG_PContent()
				_fafd := NewEG_ContentRunContent()
				_edfac := NewEG_RunLevelElts()
				_dacaf := NewEG_RangeMarkupElements()
				_dacaf.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _bggcg := d.DecodeElement(_dacaf.CustomXmlMoveFromRangeEnd, &_ddegb); _bggcg != nil {
					return _bggcg
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ddcg)
				_ddcg.EG_ContentRunContent = append(_ddcg.EG_ContentRunContent, _fafd)
				_fafd.EG_RunLevelElts = append(_fafd.EG_RunLevelElts, _edfac)
				_edfac.EG_RangeMarkupElements = append(_edfac.EG_RangeMarkupElements, _dacaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_fbefd := NewEG_PContent()
				_cdfa := NewEG_ContentRunContent()
				_cgda := NewEG_RunLevelElts()
				_dabfd := NewEG_RangeMarkupElements()
				_dabfd.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _ebded := d.DecodeElement(_dabfd.CustomXmlMoveToRangeStart, &_ddegb); _ebded != nil {
					return _ebded
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _fbefd)
				_fbefd.EG_ContentRunContent = append(_fbefd.EG_ContentRunContent, _cdfa)
				_cdfa.EG_RunLevelElts = append(_cdfa.EG_RunLevelElts, _cgda)
				_cgda.EG_RangeMarkupElements = append(_cgda.EG_RangeMarkupElements, _dabfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_caggf := NewEG_PContent()
				_cfgcb := NewEG_ContentRunContent()
				_eedgg := NewEG_RunLevelElts()
				_adef := NewEG_RangeMarkupElements()
				_adef.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _cccbge := d.DecodeElement(_adef.CustomXmlMoveToRangeEnd, &_ddegb); _cccbge != nil {
					return _cccbge
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _caggf)
				_caggf.EG_ContentRunContent = append(_caggf.EG_ContentRunContent, _cfgcb)
				_cfgcb.EG_RunLevelElts = append(_cfgcb.EG_RunLevelElts, _eedgg)
				_eedgg.EG_RangeMarkupElements = append(_eedgg.EG_RangeMarkupElements, _adef)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_ebcc := NewEG_PContent()
				_ffggd := NewEG_ContentRunContent()
				_afdge := NewEG_RunLevelElts()
				_ccdee := NewEG_MathContent()
				_ccdee.OMathPara = _f.NewOMathPara()
				if _gbbb := d.DecodeElement(_ccdee.OMathPara, &_ddegb); _gbbb != nil {
					return _gbbb
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ebcc)
				_ebcc.EG_ContentRunContent = append(_ebcc.EG_ContentRunContent, _ffggd)
				_ffggd.EG_RunLevelElts = append(_ffggd.EG_RunLevelElts, _afdge)
				_afdge.EG_MathContent = append(_afdge.EG_MathContent, _ccdee)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_ddba := NewEG_PContent()
				_cgcg := NewEG_ContentRunContent()
				_acfcd := NewEG_RunLevelElts()
				_bfdd := NewEG_MathContent()
				_bfdd.OMath = _f.NewOMath()
				if _adgca := d.DecodeElement(_bfdd.OMath, &_ddegb); _adgca != nil {
					return _adgca
				}
				_cbdfg.EG_PContent = append(_cbdfg.EG_PContent, _ddba)
				_ddba.EG_ContentRunContent = append(_ddba.EG_ContentRunContent, _cgcg)
				_cgcg.EG_RunLevelElts = append(_cgcg.EG_RunLevelElts, _acfcd)
				_acfcd.EG_MathContent = append(_acfcd.EG_MathContent, _bfdd)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_CustomXmlRun\u0020\u0025v", _ddegb.Name)
				if _dfadb := d.Skip(); _dfadb != nil {
					return _dfadb
				}
			}
		case _d.EndElement:
			break _cbda
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ReadingModeInkLockDown and its children, prefixing error messages with path
func (_bdagg *CT_ReadingModeInkLockDown) ValidateWithPath(path string) error {
	if _adfgd := _bdagg.ActualPgAttr.ValidateWithPath(path + "\u002fActualPgAttr"); _adfgd != nil {
		return _adfgd
	}
	if _eccac := _bdagg.FontSzAttr.ValidateWithPath(path + "/FontSzAttr"); _eccac != nil {
		return _eccac
	}
	return nil
}

// Validate validates the EG_BlockLevelElts and its children
func (_fcecd *EG_BlockLevelElts) Validate() error {
	return _fcecd.ValidateWithPath("EG_BlockLevelElts")
}
func NewCT_Body() *CT_Body { _afc := &CT_Body{}; return _afc }

// ValidateWithPath validates the CT_HpsMeasure and its children, prefixing error messages with path
func (_gabaa *CT_HpsMeasure) ValidateWithPath(path string) error {
	if _eageg := _gabaa.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _eageg != nil {
		return _eageg
	}
	return nil
}

// Validate validates the CT_Tc and its children
func (_bfcaae *CT_Tc) Validate() error { return _bfcaae.ValidateWithPath("CT_Tc") }

// ValidateWithPath validates the CT_P and its children, prefixing error messages with path
func (_gbggdc *CT_P) ValidateWithPath(path string) error {
	if _gbggdc.PPr != nil {
		if _eebf := _gbggdc.PPr.ValidateWithPath(path + "\u002fPPr"); _eebf != nil {
			return _eebf
		}
	}
	for _fcfeg, _ddbbf := range _gbggdc.EG_PContent {
		if _eabge := _ddbbf.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_PContent\u005b\u0025d\u005d", path, _fcfeg)); _eabge != nil {
			return _eabge
		}
	}
	return nil
}

type WdCT_WrapPath struct {
	EditedAttr *bool
	Start      *_eb.CT_Point2D
	LineTo     []*_eb.CT_Point2D
}

func (_bgeff *ST_TextScale) ValidateWithPath(path string) error {
	_bbddg := []string{}
	if _bgeff.ST_TextScalePercent != nil {
		_bbddg = append(_bbddg, "ST_TextScalePercent")
	}
	if _bgeff.ST_TextScaleDecimal != nil {
		_bbddg = append(_bbddg, "ST_TextScaleDecimal")
	}
	if len(_bbddg) > 1 {
		return _b.Errorf("%s\u0020too\u0020many\u0020members\u0020set:\u0020\u0025v", path, _bbddg)
	}
	return nil
}
func (_edaee *CT_DocPartBehaviors) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gffed:
	for {
		_cccfc, _gbeg := d.Token()
		if _gbeg != nil {
			return _gbeg
		}
		switch _gcecd := _cccfc.(type) {
		case _d.StartElement:
			switch _gcecd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "behavior"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "behavior"}:
				_ecgg := NewCT_DocPartBehavior()
				if _gedf := d.DecodeElement(_ecgg, &_gcecd); _gedf != nil {
					return _gedf
				}
				_edaee.Behavior = append(_edaee.Behavior, _ecgg)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DocPartBehaviors\u0020\u0025v", _gcecd.Name)
				if _cgbfb := d.Skip(); _cgbfb != nil {
					return _cgbfb
				}
			}
		case _d.EndElement:
			break _gffed
		case _d.CharData:
		}
	}
	return nil
}
func (_cafgga ST_DocGrid) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cafgga.String(), start)
}

// Validate validates the CT_Comments and its children
func (_ccba *CT_Comments) Validate() error { return _ccba.ValidateWithPath("CT_Comments") }

// Validate validates the CT_VMerge and its children
func (_bdegc *CT_VMerge) Validate() error { return _bdegc.ValidateWithPath("CT_VMerge") }
func (_cebdc ST_PTabAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gceabd := _d.Attr{}
	_gceabd.Name = name
	switch _cebdc {
	case ST_PTabAlignmentUnset:
		_gceabd.Value = ""
	case ST_PTabAlignmentLeft:
		_gceabd.Value = "left"
	case ST_PTabAlignmentCenter:
		_gceabd.Value = "center"
	case ST_PTabAlignmentRight:
		_gceabd.Value = "right"
	}
	return _gceabd, nil
}
func (_eaecd ST_ProofErr) String() string {
	switch _eaecd {
	case 0:
		return ""
	case 1:
		return "spellStart"
	case 2:
		return "spellEnd"
	case 3:
		return "gramStart"
	case 4:
		return "gramEnd"
	}
	return ""
}

type CT_PPrBase struct {

	// Referenced Paragraph Style
	PStyle *CT_String

	// Keep Paragraph With Next Paragraph
	KeepNext *CT_OnOff

	// Keep All Lines On One Page
	KeepLines *CT_OnOff

	// Start Paragraph on Next Page
	PageBreakBefore *CT_OnOff

	// Text Frame Properties
	FramePr *CT_FramePr

	// Allow First/Last Line to Display on a Separate Page
	WidowControl *CT_OnOff

	// Numbering Definition Instance Reference
	NumPr *CT_NumPr

	// Suppress Line Numbers for Paragraph
	SuppressLineNumbers *CT_OnOff

	// Paragraph Borders
	PBdr *CT_PBdr

	// Paragraph Shading
	Shd *CT_Shd

	// Set of Custom Tab Stops
	Tabs *CT_Tabs

	// Suppress Hyphenation for Paragraph
	SuppressAutoHyphens *CT_OnOff

	// Use East Asian Typography Rules for First and Last Character per Line
	Kinsoku *CT_OnOff

	// Allow Line Breaking At Character Level
	WordWrap *CT_OnOff

	// Allow Punctuation to Extend Past Text Extents
	OverflowPunct *CT_OnOff

	// Compress Punctuation at Start of a Line
	TopLinePunct *CT_OnOff

	// Automatically Adjust Spacing of Latin and East Asian Text
	AutoSpaceDE *CT_OnOff

	// Automatically Adjust Spacing of East Asian Text and Numbers
	AutoSpaceDN *CT_OnOff

	// Right to Left Paragraph Layout
	Bidi *CT_OnOff

	// Automatically Adjust Right Indent When Using Document Grid
	AdjustRightInd *CT_OnOff

	// Use Document Grid Settings for Inter-Line Paragraph Spacing
	SnapToGrid *CT_OnOff

	// Spacing Between Lines and Above/Below Paragraph
	Spacing *CT_Spacing

	// Paragraph Indentation
	Ind *CT_Ind

	// Ignore Spacing Above and Below When Using Identical Styles
	ContextualSpacing *CT_OnOff

	// Use Left/Right Indents as Inside/Outside Indents
	MirrorIndents *CT_OnOff

	// Prevent Text Frames From Overlapping
	SuppressOverlap *CT_OnOff

	// Paragraph Alignment
	Jc *CT_Jc

	// Paragraph Text Flow Direction
	TextDirection *CT_TextDirection

	// Vertical Character Alignment on Line
	TextAlignment *CT_TextAlignment

	// Allow Surrounding Paragraphs to Tight Wrap to Text Box Contents
	TextboxTightWrap *CT_TextboxTightWrap

	// Associated Outline Level
	OutlineLvl *CT_DecimalNumber

	// Associated HTML div ID
	DivId *CT_DecimalNumber

	// Paragraph Conditional Formatting
	CnfStyle *CT_Cnf
}
type WdEG_WrapTypeChoice struct {
	WrapNone         *WdCT_WrapNone
	WrapSquare       *WdCT_WrapSquare
	WrapTight        *WdCT_WrapTight
	WrapThrough      *WdCT_WrapThrough
	WrapTopAndBottom *WdCT_WrapTopBottom
}

// Validate validates the EG_ContentRowContent and its children
func (_eccdac *EG_ContentRowContent) Validate() error {
	return _eccdac.ValidateWithPath("EG_ContentRowContent")
}
func (_afdgc *WdCT_WordprocessingShapeChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bdbbeg:
	for {
		_cabcca, _fgafd := d.Token()
		if _fgafd != nil {
			return _fgafd
		}
		switch _cbcgg := _cabcca.(type) {
		case _d.StartElement:
			switch _cbcgg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvSpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvSpPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvSpPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvSpPr"}:
				_afdgc.CNvSpPr = _eb.NewCT_NonVisualDrawingShapeProps()
				if _gebaca := d.DecodeElement(_afdgc.CNvSpPr, &_cbcgg); _gebaca != nil {
					return _gebaca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvCnPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvCnPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvCnPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvCnPr"}:
				_afdgc.CNvCnPr = _eb.NewCT_NonVisualConnectorProperties()
				if _ebbbe := d.DecodeElement(_afdgc.CNvCnPr, &_cbcgg); _ebbbe != nil {
					return _ebbbe
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WordprocessingShapeChoice\u0020\u0025v", _cbcgg.Name)
				if _edabgb := d.Skip(); _edabgb != nil {
					return _edabgb
				}
			}
		case _d.EndElement:
			break _bdbbeg
		case _d.CharData:
		}
	}
	return nil
}
func (_gebcf *CT_FontFamily) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_cffdf, _fddc := _gebcf.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _fddc != nil {
		return _fddc
	}
	start.Attr = append(start.Attr, _cffdf)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gbaebb ST_RestartNumber) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gbaebb.String(), start)
}

// Validate validates the CT_RPrDefault and its children
func (_ffecb *CT_RPrDefault) Validate() error { return _ffecb.ValidateWithPath("CT_RPrDefault") }
func NewCT_TcBorders() *CT_TcBorders          { _dbbcec := &CT_TcBorders{}; return _dbbcec }
func (_acbad *ST_MailMergeDest) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_acbad = 0
	case "newDocument":
		*_acbad = 1
	case "printer":
		*_acbad = 2
	case "email":
		*_acbad = 3
	case "fax":
		*_acbad = 4
	}
	return nil
}
func NewCT_SdtDate() *CT_SdtDate { _dbecag := &CT_SdtDate{}; return _dbecag }

type CT_Fonts struct {

	// Font Content Type
	HintAttr ST_Hint

	// ASCII Font
	AsciiAttr *string

	// High ANSI Font
	HAnsiAttr *string

	// East Asian Font
	EastAsiaAttr *string

	// Complex Script Font
	CsAttr *string

	// ASCII Theme Font
	AsciiThemeAttr ST_Theme

	// High ANSI Theme Font
	HAnsiThemeAttr ST_Theme

	// East Asian Theme Font
	EastAsiaThemeAttr ST_Theme

	// Complex Script Theme Font
	CsthemeAttr ST_Theme
}

func (_bgbgd *CT_OnOff) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bgbgd.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_bgbgd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_Border byte

func (_abfef *CT_Numbering) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _abfef.NumPicBullet != nil {
		_egfbd := _d.StartElement{Name: _d.Name{Local: "w:numPicBullet"}}
		for _, _afcgc := range _abfef.NumPicBullet {
			e.EncodeElement(_afcgc, _egfbd)
		}
	}
	if _abfef.AbstractNum != nil {
		_dfaeae := _d.StartElement{Name: _d.Name{Local: "w:abstractNum"}}
		for _, _gebac := range _abfef.AbstractNum {
			e.EncodeElement(_gebac, _dfaeae)
		}
	}
	if _abfef.Num != nil {
		_fdbce := _d.StartElement{Name: _d.Name{Local: "w:num"}}
		for _, _bfdaga := range _abfef.Num {
			e.EncodeElement(_bfdaga, _fdbce)
		}
	}
	if _abfef.NumIdMacAtCleanup != nil {
		_aedfd := _d.StartElement{Name: _d.Name{Local: "w:numIdMacAtCleanup"}}
		e.EncodeElement(_abfef.NumIdMacAtCleanup, _aedfd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dfcbe *WdST_RelFromV) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dfcbe = 0
	case "margin":
		*_dfcbe = 1
	case "page":
		*_dfcbe = 2
	case "paragraph":
		*_dfcbe = 3
	case "line":
		*_dfcbe = 4
	case "topMargin":
		*_dfcbe = 5
	case "bottomMargin":
		*_dfcbe = 6
	case "insideMargin":
		*_dfcbe = 7
	case "outsideMargin":
		*_dfcbe = 8
	}
	return nil
}

// ValidateWithPath validates the CT_ObjectLink and its children, prefixing error messages with path
func (_agbdd *CT_ObjectLink) ValidateWithPath(path string) error {
	if _agbdd.UpdateModeAttr == ST_ObjectUpdateModeUnset {
		return _b.Errorf("\u0025s\u002fUpdateModeAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fecaa := _agbdd.UpdateModeAttr.ValidateWithPath(path + "\u002fUpdateModeAttr"); _fecaa != nil {
		return _fecaa
	}
	if _agbdd.LockedFieldAttr != nil {
		if _gbebc := _agbdd.LockedFieldAttr.ValidateWithPath(path + "\u002fLockedFieldAttr"); _gbebc != nil {
			return _gbebc
		}
	}
	if _fbacf := _agbdd.DrawAspectAttr.ValidateWithPath(path + "\u002fDrawAspectAttr"); _fbacf != nil {
		return _fbacf
	}
	return nil
}

// Validate validates the CT_SdtContentBlock and its children
func (_agafae *CT_SdtContentBlock) Validate() error {
	return _agafae.ValidateWithPath("CT_SdtContentBlock")
}
func (_ggge *CT_DocPartName) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bdfgb := range start.Attr {
		if _bdfgb.Name.Local == "val" {
			_ffaa, _eeba := _bdfgb.Value, error(nil)
			if _eeba != nil {
				return _eeba
			}
			_ggge.ValAttr = _ffaa
			continue
		}
		if _bdfgb.Name.Local == "decorated" {
			_dfdba, _dddda := ParseUnionST_OnOff(_bdfgb.Value)
			if _dddda != nil {
				return _dddda
			}
			_ggge.DecoratedAttr = &_dfdba
			continue
		}
	}
	for {
		_cegfc, _fbec := d.Token()
		if _fbec != nil {
			return _b.Errorf("parsing\u0020CT_DocPartName:\u0020\u0025s", _fbec)
		}
		if _feagg, _gebdd := _cegfc.(_d.EndElement); _gebdd && _feagg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gcddeg *ST_Lock) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gcddeg = 0
	case "sdtLocked":
		*_gcddeg = 1
	case "contentLocked":
		*_gcddeg = 2
	case "unlocked":
		*_gcddeg = 3
	case "sdtContentLocked":
		*_gcddeg = 4
	}
	return nil
}
func NewCT_Picture() *CT_Picture { _bfgfa := &CT_Picture{}; return _bfgfa }

// Validate validates the CT_TrackChangeNumbering and its children
func (_gedd *CT_TrackChangeNumbering) Validate() error {
	return _gedd.ValidateWithPath("CT_TrackChangeNumbering")
}
func (_febaf *CT_FtnEdnSepRef) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _febaf.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const ST_TextScalePercentPattern = "0\u002a\u0028600\u007c\u0028\u005b0\u002d5\u005d\u003f\u005b0\u002d9\u005d\u003f\u005b0\u002d9\u005d)\u0029\u0025"

// Validate validates the CT_AutoCaptions and its children
func (_fca *CT_AutoCaptions) Validate() error { return _fca.ValidateWithPath("CT_AutoCaptions") }
func (_cgbec *CT_Tbl) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cgbec.EG_RangeMarkupElements != nil {
		for _, _cdfad := range _cgbec.EG_RangeMarkupElements {
			_cdfad.MarshalXML(e, _d.StartElement{})
		}
	}
	_efgbg := _d.StartElement{Name: _d.Name{Local: "w:tblPr"}}
	e.EncodeElement(_cgbec.TblPr, _efgbg)
	_bebeb := _d.StartElement{Name: _d.Name{Local: "w:tblGrid"}}
	e.EncodeElement(_cgbec.TblGrid, _bebeb)
	if _cgbec.EG_ContentRowContent != nil {
		for _, _bbdfc := range _cgbec.EG_ContentRowContent {
			_bbdfc.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ddaba *CT_DocVar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bfbc := range start.Attr {
		if _bfbc.Name.Local == "name" {
			_eafaf, _eeag := _bfbc.Value, error(nil)
			if _eeag != nil {
				return _eeag
			}
			_ddaba.NameAttr = _eafaf
			continue
		}
		if _bfbc.Name.Local == "val" {
			_cbff, _gabf := _bfbc.Value, error(nil)
			if _gabf != nil {
				return _gabf
			}
			_ddaba.ValAttr = _cbff
			continue
		}
	}
	for {
		_efead, _aaged := d.Token()
		if _aaged != nil {
			return _b.Errorf("parsing\u0020CT_DocVar:\u0020\u0025s", _aaged)
		}
		if _dgegg, _aebdc := _efead.(_d.EndElement); _aebdc && _dgegg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewNumbering() *Numbering {
	_bcfff := &Numbering{}
	_bcfff.CT_Numbering = *NewCT_Numbering()
	return _bcfff
}
func (_baeagb *WdCT_WrapTight) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_gbaaf, _gaeedc := _baeagb.WrapTextAttr.MarshalXMLAttr(_d.Name{Local: "wrapText"})
	if _gaeedc != nil {
		return _gaeedc
	}
	start.Attr = append(start.Attr, _gbaaf)
	if _baeagb.DistLAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distL"}, Value: _b.Sprintf("\u0025v", *_baeagb.DistLAttr)})
	}
	if _baeagb.DistRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distR"}, Value: _b.Sprintf("\u0025v", *_baeagb.DistRAttr)})
	}
	e.EncodeToken(start)
	_bcfed := _d.StartElement{Name: _d.Name{Local: "wp:wrapPolygon"}}
	e.EncodeElement(_baeagb.WrapPolygon, _bcfed)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bddeb *CT_Compat) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ebbb:
	for {
		_ebgdb, _ceafg := d.Token()
		if _ceafg != nil {
			return _ceafg
		}
		switch _fbdb := _ebgdb.(type) {
		case _d.StartElement:
			switch _fbdb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useSingleBorderforContiguousCells"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useSingleBorderforContiguousCells"}:
				_bddeb.UseSingleBorderforContiguousCells = NewCT_OnOff()
				if _cgfac := d.DecodeElement(_bddeb.UseSingleBorderforContiguousCells, &_fbdb); _cgfac != nil {
					return _cgfac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wpJustification"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wpJustification"}:
				_bddeb.WpJustification = NewCT_OnOff()
				if _ddgb := d.DecodeElement(_bddeb.WpJustification, &_fbdb); _ddgb != nil {
					return _ddgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noTabHangInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noTabHangInd"}:
				_bddeb.NoTabHangInd = NewCT_OnOff()
				if _aecf := d.DecodeElement(_bddeb.NoTabHangInd, &_fbdb); _aecf != nil {
					return _aecf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noLeading"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noLeading"}:
				_bddeb.NoLeading = NewCT_OnOff()
				if _geee := d.DecodeElement(_bddeb.NoLeading, &_fbdb); _geee != nil {
					return _geee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spaceForUL"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spaceForUL"}:
				_bddeb.SpaceForUL = NewCT_OnOff()
				if _deega := d.DecodeElement(_bddeb.SpaceForUL, &_fbdb); _deega != nil {
					return _deega
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noColumnBalance"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noColumnBalance"}:
				_bddeb.NoColumnBalance = NewCT_OnOff()
				if _cggc := d.DecodeElement(_bddeb.NoColumnBalance, &_fbdb); _cggc != nil {
					return _cggc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "balanceSingleByteDoubleByteWidth"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "balanceSingleByteDoubleByteWidth"}:
				_bddeb.BalanceSingleByteDoubleByteWidth = NewCT_OnOff()
				if _fcbc := d.DecodeElement(_bddeb.BalanceSingleByteDoubleByteWidth, &_fbdb); _fcbc != nil {
					return _fcbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noExtraLineSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noExtraLineSpacing"}:
				_bddeb.NoExtraLineSpacing = NewCT_OnOff()
				if _cffe := d.DecodeElement(_bddeb.NoExtraLineSpacing, &_fbdb); _cffe != nil {
					return _cffe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotLeaveBackslashAlone"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotLeaveBackslashAlone"}:
				_bddeb.DoNotLeaveBackslashAlone = NewCT_OnOff()
				if _gbcf := d.DecodeElement(_bddeb.DoNotLeaveBackslashAlone, &_fbdb); _gbcf != nil {
					return _gbcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ulTrailSpace"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ulTrailSpace"}:
				_bddeb.UlTrailSpace = NewCT_OnOff()
				if _eebga := d.DecodeElement(_bddeb.UlTrailSpace, &_fbdb); _eebga != nil {
					return _eebga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotExpandShiftReturn"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotExpandShiftReturn"}:
				_bddeb.DoNotExpandShiftReturn = NewCT_OnOff()
				if _bafe := d.DecodeElement(_bddeb.DoNotExpandShiftReturn, &_fbdb); _bafe != nil {
					return _bafe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacingInWholePoints"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacingInWholePoints"}:
				_bddeb.SpacingInWholePoints = NewCT_OnOff()
				if _cfegc := d.DecodeElement(_bddeb.SpacingInWholePoints, &_fbdb); _cfegc != nil {
					return _cfegc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lineWrapLikeWord6"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lineWrapLikeWord6"}:
				_bddeb.LineWrapLikeWord6 = NewCT_OnOff()
				if _gdaf := d.DecodeElement(_bddeb.LineWrapLikeWord6, &_fbdb); _gdaf != nil {
					return _gdaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printBodyTextBeforeHeader"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printBodyTextBeforeHeader"}:
				_bddeb.PrintBodyTextBeforeHeader = NewCT_OnOff()
				if _egge := d.DecodeElement(_bddeb.PrintBodyTextBeforeHeader, &_fbdb); _egge != nil {
					return _egge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printColBlack"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printColBlack"}:
				_bddeb.PrintColBlack = NewCT_OnOff()
				if _caba := d.DecodeElement(_bddeb.PrintColBlack, &_fbdb); _caba != nil {
					return _caba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wpSpaceWidth"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wpSpaceWidth"}:
				_bddeb.WpSpaceWidth = NewCT_OnOff()
				if _efcc := d.DecodeElement(_bddeb.WpSpaceWidth, &_fbdb); _efcc != nil {
					return _efcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "showBreaksInFrames"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "showBreaksInFrames"}:
				_bddeb.ShowBreaksInFrames = NewCT_OnOff()
				if _edaa := d.DecodeElement(_bddeb.ShowBreaksInFrames, &_fbdb); _edaa != nil {
					return _edaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subFontBySize"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subFontBySize"}:
				_bddeb.SubFontBySize = NewCT_OnOff()
				if _bdbdg := d.DecodeElement(_bddeb.SubFontBySize, &_fbdb); _bdbdg != nil {
					return _bdbdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressBottomSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressBottomSpacing"}:
				_bddeb.SuppressBottomSpacing = NewCT_OnOff()
				if _dabb := d.DecodeElement(_bddeb.SuppressBottomSpacing, &_fbdb); _dabb != nil {
					return _dabb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressTopSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressTopSpacing"}:
				_bddeb.SuppressTopSpacing = NewCT_OnOff()
				if _caeg := d.DecodeElement(_bddeb.SuppressTopSpacing, &_fbdb); _caeg != nil {
					return _caeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressSpacingAtTopOfPage"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressSpacingAtTopOfPage"}:
				_bddeb.SuppressSpacingAtTopOfPage = NewCT_OnOff()
				if _ebec := d.DecodeElement(_bddeb.SuppressSpacingAtTopOfPage, &_fbdb); _ebec != nil {
					return _ebec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressTopSpacingWP"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressTopSpacingWP"}:
				_bddeb.SuppressTopSpacingWP = NewCT_OnOff()
				if _abebb := d.DecodeElement(_bddeb.SuppressTopSpacingWP, &_fbdb); _abebb != nil {
					return _abebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressSpBfAfterPgBrk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressSpBfAfterPgBrk"}:
				_bddeb.SuppressSpBfAfterPgBrk = NewCT_OnOff()
				if _egagd := d.DecodeElement(_bddeb.SuppressSpBfAfterPgBrk, &_fbdb); _egagd != nil {
					return _egagd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "swapBordersFacingPages"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "swapBordersFacingPages"}:
				_bddeb.SwapBordersFacingPages = NewCT_OnOff()
				if _dfce := d.DecodeElement(_bddeb.SwapBordersFacingPages, &_fbdb); _dfce != nil {
					return _dfce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "convMailMergeEsc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "convMailMergeEsc"}:
				_bddeb.ConvMailMergeEsc = NewCT_OnOff()
				if _aagg := d.DecodeElement(_bddeb.ConvMailMergeEsc, &_fbdb); _aagg != nil {
					return _aagg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "truncateFontHeightsLikeWP6"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "truncateFontHeightsLikeWP6"}:
				_bddeb.TruncateFontHeightsLikeWP6 = NewCT_OnOff()
				if _dadc := d.DecodeElement(_bddeb.TruncateFontHeightsLikeWP6, &_fbdb); _dadc != nil {
					return _dadc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mwSmallCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mwSmallCaps"}:
				_bddeb.MwSmallCaps = NewCT_OnOff()
				if _cgde := d.DecodeElement(_bddeb.MwSmallCaps, &_fbdb); _cgde != nil {
					return _cgde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "usePrinterMetrics"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "usePrinterMetrics"}:
				_bddeb.UsePrinterMetrics = NewCT_OnOff()
				if _bcde := d.DecodeElement(_bddeb.UsePrinterMetrics, &_fbdb); _bcde != nil {
					return _bcde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotSuppressParagraphBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotSuppressParagraphBorders"}:
				_bddeb.DoNotSuppressParagraphBorders = NewCT_OnOff()
				if _efeg := d.DecodeElement(_bddeb.DoNotSuppressParagraphBorders, &_fbdb); _efeg != nil {
					return _efeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTrailSpaces"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wrapTrailSpaces"}:
				_bddeb.WrapTrailSpaces = NewCT_OnOff()
				if _bbgbg := d.DecodeElement(_bddeb.WrapTrailSpaces, &_fbdb); _bbgbg != nil {
					return _bbgbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnoteLayoutLikeWW8"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnoteLayoutLikeWW8"}:
				_bddeb.FootnoteLayoutLikeWW8 = NewCT_OnOff()
				if _dfeg := d.DecodeElement(_bddeb.FootnoteLayoutLikeWW8, &_fbdb); _dfeg != nil {
					return _dfeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shapeLayoutLikeWW8"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shapeLayoutLikeWW8"}:
				_bddeb.ShapeLayoutLikeWW8 = NewCT_OnOff()
				if _ecec := d.DecodeElement(_bddeb.ShapeLayoutLikeWW8, &_fbdb); _ecec != nil {
					return _ecec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alignTablesRowByRow"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alignTablesRowByRow"}:
				_bddeb.AlignTablesRowByRow = NewCT_OnOff()
				if _febe := d.DecodeElement(_bddeb.AlignTablesRowByRow, &_fbdb); _febe != nil {
					return _febe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "forgetLastTabAlignment"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "forgetLastTabAlignment"}:
				_bddeb.ForgetLastTabAlignment = NewCT_OnOff()
				if _ebaa := d.DecodeElement(_bddeb.ForgetLastTabAlignment, &_fbdb); _ebaa != nil {
					return _ebaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "adjustLineHeightInTable"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "adjustLineHeightInTable"}:
				_bddeb.AdjustLineHeightInTable = NewCT_OnOff()
				if _dfdfe := d.DecodeElement(_bddeb.AdjustLineHeightInTable, &_fbdb); _dfdfe != nil {
					return _dfdfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoSpaceLikeWord95"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoSpaceLikeWord95"}:
				_bddeb.AutoSpaceLikeWord95 = NewCT_OnOff()
				if _dacg := d.DecodeElement(_bddeb.AutoSpaceLikeWord95, &_fbdb); _dacg != nil {
					return _dacg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noSpaceRaiseLower"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noSpaceRaiseLower"}:
				_bddeb.NoSpaceRaiseLower = NewCT_OnOff()
				if _geg := d.DecodeElement(_bddeb.NoSpaceRaiseLower, &_fbdb); _geg != nil {
					return _geg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotUseHTMLParagraphAutoSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotUseHTMLParagraphAutoSpacing"}:
				_bddeb.DoNotUseHTMLParagraphAutoSpacing = NewCT_OnOff()
				if _eace := d.DecodeElement(_bddeb.DoNotUseHTMLParagraphAutoSpacing, &_fbdb); _eace != nil {
					return _eace
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "layoutRawTableWidth"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "layoutRawTableWidth"}:
				_bddeb.LayoutRawTableWidth = NewCT_OnOff()
				if _eefaf := d.DecodeElement(_bddeb.LayoutRawTableWidth, &_fbdb); _eefaf != nil {
					return _eefaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "layoutTableRowsApart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "layoutTableRowsApart"}:
				_bddeb.LayoutTableRowsApart = NewCT_OnOff()
				if _aeceg := d.DecodeElement(_bddeb.LayoutTableRowsApart, &_fbdb); _aeceg != nil {
					return _aeceg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useWord97LineBreakRules"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useWord97LineBreakRules"}:
				_bddeb.UseWord97LineBreakRules = NewCT_OnOff()
				if _dcab := d.DecodeElement(_bddeb.UseWord97LineBreakRules, &_fbdb); _dcab != nil {
					return _dcab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotBreakWrappedTables"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotBreakWrappedTables"}:
				_bddeb.DoNotBreakWrappedTables = NewCT_OnOff()
				if _dabfc := d.DecodeElement(_bddeb.DoNotBreakWrappedTables, &_fbdb); _dabfc != nil {
					return _dabfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotSnapToGridInCell"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotSnapToGridInCell"}:
				_bddeb.DoNotSnapToGridInCell = NewCT_OnOff()
				if _gcfb := d.DecodeElement(_bddeb.DoNotSnapToGridInCell, &_fbdb); _gcfb != nil {
					return _gcfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "selectFldWithFirstOrLastChar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "selectFldWithFirstOrLastChar"}:
				_bddeb.SelectFldWithFirstOrLastChar = NewCT_OnOff()
				if _aeff := d.DecodeElement(_bddeb.SelectFldWithFirstOrLastChar, &_fbdb); _aeff != nil {
					return _aeff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "applyBreakingRules"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "applyBreakingRules"}:
				_bddeb.ApplyBreakingRules = NewCT_OnOff()
				if _ffdf := d.DecodeElement(_bddeb.ApplyBreakingRules, &_fbdb); _ffdf != nil {
					return _ffdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotWrapTextWithPunct"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotWrapTextWithPunct"}:
				_bddeb.DoNotWrapTextWithPunct = NewCT_OnOff()
				if _aebd := d.DecodeElement(_bddeb.DoNotWrapTextWithPunct, &_fbdb); _aebd != nil {
					return _aebd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotUseEastAsianBreakRules"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotUseEastAsianBreakRules"}:
				_bddeb.DoNotUseEastAsianBreakRules = NewCT_OnOff()
				if _dabfa := d.DecodeElement(_bddeb.DoNotUseEastAsianBreakRules, &_fbdb); _dabfa != nil {
					return _dabfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useWord2002TableStyleRules"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useWord2002TableStyleRules"}:
				_bddeb.UseWord2002TableStyleRules = NewCT_OnOff()
				if _edgg := d.DecodeElement(_bddeb.UseWord2002TableStyleRules, &_fbdb); _edgg != nil {
					return _edgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "growAutofit"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "growAutofit"}:
				_bddeb.GrowAutofit = NewCT_OnOff()
				if _bbdb := d.DecodeElement(_bddeb.GrowAutofit, &_fbdb); _bbdb != nil {
					return _bbdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useFELayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useFELayout"}:
				_bddeb.UseFELayout = NewCT_OnOff()
				if _ccac := d.DecodeElement(_bddeb.UseFELayout, &_fbdb); _ccac != nil {
					return _ccac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useNormalStyleForList"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useNormalStyleForList"}:
				_bddeb.UseNormalStyleForList = NewCT_OnOff()
				if _gcde := d.DecodeElement(_bddeb.UseNormalStyleForList, &_fbdb); _gcde != nil {
					return _gcde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotUseIndentAsNumberingTabStop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotUseIndentAsNumberingTabStop"}:
				_bddeb.DoNotUseIndentAsNumberingTabStop = NewCT_OnOff()
				if _ccgb := d.DecodeElement(_bddeb.DoNotUseIndentAsNumberingTabStop, &_fbdb); _ccgb != nil {
					return _ccgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useAltKinsokuLineBreakRules"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useAltKinsokuLineBreakRules"}:
				_bddeb.UseAltKinsokuLineBreakRules = NewCT_OnOff()
				if _caga := d.DecodeElement(_bddeb.UseAltKinsokuLineBreakRules, &_fbdb); _caga != nil {
					return _caga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "allowSpaceOfSameStyleInTable"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "allowSpaceOfSameStyleInTable"}:
				_bddeb.AllowSpaceOfSameStyleInTable = NewCT_OnOff()
				if _fecfab := d.DecodeElement(_bddeb.AllowSpaceOfSameStyleInTable, &_fbdb); _fecfab != nil {
					return _fecfab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotSuppressIndentation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotSuppressIndentation"}:
				_bddeb.DoNotSuppressIndentation = NewCT_OnOff()
				if _fcace := d.DecodeElement(_bddeb.DoNotSuppressIndentation, &_fbdb); _fcace != nil {
					return _fcace
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotAutofitConstrainedTables"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotAutofitConstrainedTables"}:
				_bddeb.DoNotAutofitConstrainedTables = NewCT_OnOff()
				if _caac := d.DecodeElement(_bddeb.DoNotAutofitConstrainedTables, &_fbdb); _caac != nil {
					return _caac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autofitToFirstFixedWidthCell"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autofitToFirstFixedWidthCell"}:
				_bddeb.AutofitToFirstFixedWidthCell = NewCT_OnOff()
				if _ddgcg := d.DecodeElement(_bddeb.AutofitToFirstFixedWidthCell, &_fbdb); _ddgcg != nil {
					return _ddgcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "underlineTabInNumList"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "underlineTabInNumList"}:
				_bddeb.UnderlineTabInNumList = NewCT_OnOff()
				if _gcceg := d.DecodeElement(_bddeb.UnderlineTabInNumList, &_fbdb); _gcceg != nil {
					return _gcceg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "displayHangulFixedWidth"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "displayHangulFixedWidth"}:
				_bddeb.DisplayHangulFixedWidth = NewCT_OnOff()
				if _ecgef := d.DecodeElement(_bddeb.DisplayHangulFixedWidth, &_fbdb); _ecgef != nil {
					return _ecgef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "splitPgBreakAndParaMark"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "splitPgBreakAndParaMark"}:
				_bddeb.SplitPgBreakAndParaMark = NewCT_OnOff()
				if _eagb := d.DecodeElement(_bddeb.SplitPgBreakAndParaMark, &_fbdb); _eagb != nil {
					return _eagb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotVertAlignCellWithSp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotVertAlignCellWithSp"}:
				_bddeb.DoNotVertAlignCellWithSp = NewCT_OnOff()
				if _cdegd := d.DecodeElement(_bddeb.DoNotVertAlignCellWithSp, &_fbdb); _cdegd != nil {
					return _cdegd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotBreakConstrainedForcedTable"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotBreakConstrainedForcedTable"}:
				_bddeb.DoNotBreakConstrainedForcedTable = NewCT_OnOff()
				if _bbcc := d.DecodeElement(_bddeb.DoNotBreakConstrainedForcedTable, &_fbdb); _bbcc != nil {
					return _bbcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotVertAlignInTxbx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotVertAlignInTxbx"}:
				_bddeb.DoNotVertAlignInTxbx = NewCT_OnOff()
				if _afeg := d.DecodeElement(_bddeb.DoNotVertAlignInTxbx, &_fbdb); _afeg != nil {
					return _afeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "useAnsiKerningPairs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "useAnsiKerningPairs"}:
				_bddeb.UseAnsiKerningPairs = NewCT_OnOff()
				if _gdcb := d.DecodeElement(_bddeb.UseAnsiKerningPairs, &_fbdb); _gdcb != nil {
					return _gdcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cachedColBalance"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cachedColBalance"}:
				_bddeb.CachedColBalance = NewCT_OnOff()
				if _abcg := d.DecodeElement(_bddeb.CachedColBalance, &_fbdb); _abcg != nil {
					return _abcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "compatSetting"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "compatSetting"}:
				_feaae := NewCT_CompatSetting()
				if _gdcbe := d.DecodeElement(_feaae, &_fbdb); _gdcbe != nil {
					return _gdcbe
				}
				_bddeb.CompatSetting = append(_bddeb.CompatSetting, _feaae)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_Compat \u0025v", _fbdb.Name)
				if _geeeb := d.Skip(); _geeeb != nil {
					return _geeeb
				}
			}
		case _d.EndElement:
			break _ebbb
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_DocPartName() *CT_DocPartName { _dafbe := &CT_DocPartName{}; return _dafbe }
func (_bccfcf ST_Wrap) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eegdfa := _d.Attr{}
	_eegdfa.Name = name
	switch _bccfcf {
	case ST_WrapUnset:
		_eegdfa.Value = ""
	case ST_WrapAuto:
		_eegdfa.Value = "auto"
	case ST_WrapNotBeside:
		_eegdfa.Value = "notBeside"
	case ST_WrapAround:
		_eegdfa.Value = "around"
	case ST_WrapTight:
		_eegdfa.Value = "tight"
	case ST_WrapThrough:
		_eegdfa.Value = "through"
	case ST_WrapNone:
		_eegdfa.Value = "none"
	}
	return _eegdfa, nil
}
func (_fbbd *CT_Hyperlink) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ddecd := range start.Attr {
		if _ddecd.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _ddecd.Name.Local == "id" || _ddecd.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _ddecd.Name.Local == "id" {
			_efbec, _adbef := _ddecd.Value, error(nil)
			if _adbef != nil {
				return _adbef
			}
			_fbbd.IdAttr = &_efbec
			continue
		}
		if _ddecd.Name.Local == "tgtFrame" {
			_bddebe, _egacd := _ddecd.Value, error(nil)
			if _egacd != nil {
				return _egacd
			}
			_fbbd.TgtFrameAttr = &_bddebe
			continue
		}
		if _ddecd.Name.Local == "tooltip" {
			_bgcd, _fbgbg := _ddecd.Value, error(nil)
			if _fbgbg != nil {
				return _fbgbg
			}
			_fbbd.TooltipAttr = &_bgcd
			continue
		}
		if _ddecd.Name.Local == "docLocation" {
			_gffgc, _abfceb := _ddecd.Value, error(nil)
			if _abfceb != nil {
				return _abfceb
			}
			_fbbd.DocLocationAttr = &_gffgc
			continue
		}
		if _ddecd.Name.Local == "anchor" {
			_defc, _fgge := _ddecd.Value, error(nil)
			if _fgge != nil {
				return _fgge
			}
			_fbbd.AnchorAttr = &_defc
			continue
		}
		if _ddecd.Name.Local == "history" {
			_cbgb, _ggdfe := ParseUnionST_OnOff(_ddecd.Value)
			if _ggdfe != nil {
				return _ggdfe
			}
			_fbbd.HistoryAttr = &_cbgb
			continue
		}
	}
_fcdd:
	for {
		_bfceb, _ccfda := d.Token()
		if _ccfda != nil {
			return _ccfda
		}
		switch _aeddd := _bfceb.(type) {
		case _d.StartElement:
			switch _aeddd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_bdgfb := NewCT_SimpleField()
				if _adfca := d.DecodeElement(_bdgfb, &_aeddd); _adfca != nil {
					return _adfca
				}
				_fbbd.FldSimple = append(_fbbd.FldSimple, _bdgfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_fbbd.Hyperlink = NewCT_Hyperlink()
				if _dggbf := d.DecodeElement(_fbbd.Hyperlink, &_aeddd); _dggbf != nil {
					return _dggbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_fbbd.SubDoc = NewCT_Rel()
				if _eafgf := d.DecodeElement(_fbbd.SubDoc, &_aeddd); _eafgf != nil {
					return _eafgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_ggfc := NewEG_ContentRunContent()
				_ggfc.CustomXml = NewCT_CustomXmlRun()
				if _gdeaf := d.DecodeElement(_ggfc.CustomXml, &_aeddd); _gdeaf != nil {
					return _gdeaf
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _ggfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_agbb := NewEG_ContentRunContent()
				_agbb.SmartTag = NewCT_SmartTagRun()
				if _gbed := d.DecodeElement(_agbb.SmartTag, &_aeddd); _gbed != nil {
					return _gbed
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _agbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_gceee := NewEG_ContentRunContent()
				_gceee.Sdt = NewCT_SdtRun()
				if _ddfde := d.DecodeElement(_gceee.Sdt, &_aeddd); _ddfde != nil {
					return _ddfde
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _gceee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_ecfag := NewEG_ContentRunContent()
				_ecfag.Dir = NewCT_DirContentRun()
				if _dccc := d.DecodeElement(_ecfag.Dir, &_aeddd); _dccc != nil {
					return _dccc
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _ecfag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_acaa := NewEG_ContentRunContent()
				_acaa.Bdo = NewCT_BdoContentRun()
				if _dagcg := d.DecodeElement(_acaa.Bdo, &_aeddd); _dagcg != nil {
					return _dagcg
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _acaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_dcdde := NewEG_ContentRunContent()
				_dcdde.R = NewCT_R()
				if _bege := d.DecodeElement(_dcdde.R, &_aeddd); _bege != nil {
					return _bege
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _dcdde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_gcbda := NewEG_ContentRunContent()
				_fggfb := NewEG_RunLevelElts()
				_fggfb.ProofErr = NewCT_ProofErr()
				if _fcabg := d.DecodeElement(_fggfb.ProofErr, &_aeddd); _fcabg != nil {
					return _fcabg
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _gcbda)
				_gcbda.EG_RunLevelElts = append(_gcbda.EG_RunLevelElts, _fggfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_aacf := NewEG_ContentRunContent()
				_dagbb := NewEG_RunLevelElts()
				_dagbb.PermStart = NewCT_PermStart()
				if _ddbaa := d.DecodeElement(_dagbb.PermStart, &_aeddd); _ddbaa != nil {
					return _ddbaa
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _aacf)
				_aacf.EG_RunLevelElts = append(_aacf.EG_RunLevelElts, _dagbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_ebefd := NewEG_ContentRunContent()
				_fgbca := NewEG_RunLevelElts()
				_fgbca.PermEnd = NewCT_Perm()
				if _eade := d.DecodeElement(_fgbca.PermEnd, &_aeddd); _eade != nil {
					return _eade
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _ebefd)
				_ebefd.EG_RunLevelElts = append(_ebefd.EG_RunLevelElts, _fgbca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_gfdda := NewEG_ContentRunContent()
				_cdaafc := NewEG_RunLevelElts()
				_cdaafc.Ins = NewCT_RunTrackChange()
				if _efga := d.DecodeElement(_cdaafc.Ins, &_aeddd); _efga != nil {
					return _efga
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _gfdda)
				_gfdda.EG_RunLevelElts = append(_gfdda.EG_RunLevelElts, _cdaafc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_bacfd := NewEG_ContentRunContent()
				_cefde := NewEG_RunLevelElts()
				_cefde.Del = NewCT_RunTrackChange()
				if _afebb := d.DecodeElement(_cefde.Del, &_aeddd); _afebb != nil {
					return _afebb
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _bacfd)
				_bacfd.EG_RunLevelElts = append(_bacfd.EG_RunLevelElts, _cefde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_eebe := NewEG_ContentRunContent()
				_eaag := NewEG_RunLevelElts()
				_eaag.MoveFrom = NewCT_RunTrackChange()
				if _bagce := d.DecodeElement(_eaag.MoveFrom, &_aeddd); _bagce != nil {
					return _bagce
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _eebe)
				_eebe.EG_RunLevelElts = append(_eebe.EG_RunLevelElts, _eaag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_acaaf := NewEG_ContentRunContent()
				_bfgc := NewEG_RunLevelElts()
				_bfgc.MoveTo = NewCT_RunTrackChange()
				if _gcgbf := d.DecodeElement(_bfgc.MoveTo, &_aeddd); _gcgbf != nil {
					return _gcgbf
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _acaaf)
				_acaaf.EG_RunLevelElts = append(_acaaf.EG_RunLevelElts, _bfgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_gdfbc := NewEG_ContentRunContent()
				_agda := NewEG_RunLevelElts()
				_bfga := NewEG_RangeMarkupElements()
				_bfga.BookmarkStart = NewCT_Bookmark()
				if _cgfbc := d.DecodeElement(_bfga.BookmarkStart, &_aeddd); _cgfbc != nil {
					return _cgfbc
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _gdfbc)
				_gdfbc.EG_RunLevelElts = append(_gdfbc.EG_RunLevelElts, _agda)
				_agda.EG_RangeMarkupElements = append(_agda.EG_RangeMarkupElements, _bfga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_dffcaf := NewEG_ContentRunContent()
				_acfaf := NewEG_RunLevelElts()
				_fcdcdf := NewEG_RangeMarkupElements()
				_fcdcdf.BookmarkEnd = NewCT_MarkupRange()
				if _addfd := d.DecodeElement(_fcdcdf.BookmarkEnd, &_aeddd); _addfd != nil {
					return _addfd
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _dffcaf)
				_dffcaf.EG_RunLevelElts = append(_dffcaf.EG_RunLevelElts, _acfaf)
				_acfaf.EG_RangeMarkupElements = append(_acfaf.EG_RangeMarkupElements, _fcdcdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_badad := NewEG_ContentRunContent()
				_affbe := NewEG_RunLevelElts()
				_ecgcf := NewEG_RangeMarkupElements()
				_ecgcf.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gbec := d.DecodeElement(_ecgcf.MoveFromRangeStart, &_aeddd); _gbec != nil {
					return _gbec
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _badad)
				_badad.EG_RunLevelElts = append(_badad.EG_RunLevelElts, _affbe)
				_affbe.EG_RangeMarkupElements = append(_affbe.EG_RangeMarkupElements, _ecgcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_ddfge := NewEG_ContentRunContent()
				_fadfd := NewEG_RunLevelElts()
				_ecgcg := NewEG_RangeMarkupElements()
				_ecgcg.MoveFromRangeEnd = NewCT_MarkupRange()
				if _aeae := d.DecodeElement(_ecgcg.MoveFromRangeEnd, &_aeddd); _aeae != nil {
					return _aeae
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _ddfge)
				_ddfge.EG_RunLevelElts = append(_ddfge.EG_RunLevelElts, _fadfd)
				_fadfd.EG_RangeMarkupElements = append(_fadfd.EG_RangeMarkupElements, _ecgcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_fecbb := NewEG_ContentRunContent()
				_bdgab := NewEG_RunLevelElts()
				_aagf := NewEG_RangeMarkupElements()
				_aagf.MoveToRangeStart = NewCT_MoveBookmark()
				if _fgcfa := d.DecodeElement(_aagf.MoveToRangeStart, &_aeddd); _fgcfa != nil {
					return _fgcfa
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _fecbb)
				_fecbb.EG_RunLevelElts = append(_fecbb.EG_RunLevelElts, _bdgab)
				_bdgab.EG_RangeMarkupElements = append(_bdgab.EG_RangeMarkupElements, _aagf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_dfee := NewEG_ContentRunContent()
				_egada := NewEG_RunLevelElts()
				_geagg := NewEG_RangeMarkupElements()
				_geagg.MoveToRangeEnd = NewCT_MarkupRange()
				if _fdbc := d.DecodeElement(_geagg.MoveToRangeEnd, &_aeddd); _fdbc != nil {
					return _fdbc
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _dfee)
				_dfee.EG_RunLevelElts = append(_dfee.EG_RunLevelElts, _egada)
				_egada.EG_RangeMarkupElements = append(_egada.EG_RangeMarkupElements, _geagg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_efff := NewEG_ContentRunContent()
				_bcdeb := NewEG_RunLevelElts()
				_ebbae := NewEG_RangeMarkupElements()
				_ebbae.CommentRangeStart = NewCT_MarkupRange()
				if _dfeff := d.DecodeElement(_ebbae.CommentRangeStart, &_aeddd); _dfeff != nil {
					return _dfeff
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _efff)
				_efff.EG_RunLevelElts = append(_efff.EG_RunLevelElts, _bcdeb)
				_bcdeb.EG_RangeMarkupElements = append(_bcdeb.EG_RangeMarkupElements, _ebbae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_dbedc := NewEG_ContentRunContent()
				_ggebb := NewEG_RunLevelElts()
				_fedbd := NewEG_RangeMarkupElements()
				_fedbd.CommentRangeEnd = NewCT_MarkupRange()
				if _cfeee := d.DecodeElement(_fedbd.CommentRangeEnd, &_aeddd); _cfeee != nil {
					return _cfeee
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _dbedc)
				_dbedc.EG_RunLevelElts = append(_dbedc.EG_RunLevelElts, _ggebb)
				_ggebb.EG_RangeMarkupElements = append(_ggebb.EG_RangeMarkupElements, _fedbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_fcaef := NewEG_ContentRunContent()
				_egbc := NewEG_RunLevelElts()
				_bggb := NewEG_RangeMarkupElements()
				_bggb.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _bdaca := d.DecodeElement(_bggb.CustomXmlInsRangeStart, &_aeddd); _bdaca != nil {
					return _bdaca
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _fcaef)
				_fcaef.EG_RunLevelElts = append(_fcaef.EG_RunLevelElts, _egbc)
				_egbc.EG_RangeMarkupElements = append(_egbc.EG_RangeMarkupElements, _bggb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_afgd := NewEG_ContentRunContent()
				_dcbgd := NewEG_RunLevelElts()
				_ebbg := NewEG_RangeMarkupElements()
				_ebbg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _ccge := d.DecodeElement(_ebbg.CustomXmlInsRangeEnd, &_aeddd); _ccge != nil {
					return _ccge
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _afgd)
				_afgd.EG_RunLevelElts = append(_afgd.EG_RunLevelElts, _dcbgd)
				_dcbgd.EG_RangeMarkupElements = append(_dcbgd.EG_RangeMarkupElements, _ebbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_cabbe := NewEG_ContentRunContent()
				_aefa := NewEG_RunLevelElts()
				_bafaa := NewEG_RangeMarkupElements()
				_bafaa.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _affag := d.DecodeElement(_bafaa.CustomXmlDelRangeStart, &_aeddd); _affag != nil {
					return _affag
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _cabbe)
				_cabbe.EG_RunLevelElts = append(_cabbe.EG_RunLevelElts, _aefa)
				_aefa.EG_RangeMarkupElements = append(_aefa.EG_RangeMarkupElements, _bafaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_bfbdg := NewEG_ContentRunContent()
				_bgfgd := NewEG_RunLevelElts()
				_bbccd := NewEG_RangeMarkupElements()
				_bbccd.CustomXmlDelRangeEnd = NewCT_Markup()
				if _acdb := d.DecodeElement(_bbccd.CustomXmlDelRangeEnd, &_aeddd); _acdb != nil {
					return _acdb
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _bfbdg)
				_bfbdg.EG_RunLevelElts = append(_bfbdg.EG_RunLevelElts, _bgfgd)
				_bgfgd.EG_RangeMarkupElements = append(_bgfgd.EG_RangeMarkupElements, _bbccd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_eecgb := NewEG_ContentRunContent()
				_gbgab := NewEG_RunLevelElts()
				_fcfgd := NewEG_RangeMarkupElements()
				_fcfgd.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _ggaag := d.DecodeElement(_fcfgd.CustomXmlMoveFromRangeStart, &_aeddd); _ggaag != nil {
					return _ggaag
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _eecgb)
				_eecgb.EG_RunLevelElts = append(_eecgb.EG_RunLevelElts, _gbgab)
				_gbgab.EG_RangeMarkupElements = append(_gbgab.EG_RangeMarkupElements, _fcfgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_caae := NewEG_ContentRunContent()
				_affcee := NewEG_RunLevelElts()
				_gdbec := NewEG_RangeMarkupElements()
				_gdbec.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _bdfgg := d.DecodeElement(_gdbec.CustomXmlMoveFromRangeEnd, &_aeddd); _bdfgg != nil {
					return _bdfgg
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _caae)
				_caae.EG_RunLevelElts = append(_caae.EG_RunLevelElts, _affcee)
				_affcee.EG_RangeMarkupElements = append(_affcee.EG_RangeMarkupElements, _gdbec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_accfe := NewEG_ContentRunContent()
				_aegf := NewEG_RunLevelElts()
				_ggac := NewEG_RangeMarkupElements()
				_ggac.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _egfdc := d.DecodeElement(_ggac.CustomXmlMoveToRangeStart, &_aeddd); _egfdc != nil {
					return _egfdc
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _accfe)
				_accfe.EG_RunLevelElts = append(_accfe.EG_RunLevelElts, _aegf)
				_aegf.EG_RangeMarkupElements = append(_aegf.EG_RangeMarkupElements, _ggac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_agaaa := NewEG_ContentRunContent()
				_cadee := NewEG_RunLevelElts()
				_gafd := NewEG_RangeMarkupElements()
				_gafd.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _ffcaag := d.DecodeElement(_gafd.CustomXmlMoveToRangeEnd, &_aeddd); _ffcaag != nil {
					return _ffcaag
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _agaaa)
				_agaaa.EG_RunLevelElts = append(_agaaa.EG_RunLevelElts, _cadee)
				_cadee.EG_RangeMarkupElements = append(_cadee.EG_RangeMarkupElements, _gafd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_agacec := NewEG_ContentRunContent()
				_cgbad := NewEG_RunLevelElts()
				_agcg := NewEG_MathContent()
				_agcg.OMathPara = _f.NewOMathPara()
				if _ebfcb := d.DecodeElement(_agcg.OMathPara, &_aeddd); _ebfcb != nil {
					return _ebfcb
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _agacec)
				_agacec.EG_RunLevelElts = append(_agacec.EG_RunLevelElts, _cgbad)
				_cgbad.EG_MathContent = append(_cgbad.EG_MathContent, _agcg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_dcge := NewEG_ContentRunContent()
				_cdedd := NewEG_RunLevelElts()
				_gdbgb := NewEG_MathContent()
				_gdbgb.OMath = _f.NewOMath()
				if _dggge := d.DecodeElement(_gdbgb.OMath, &_aeddd); _dggge != nil {
					return _dggge
				}
				_fbbd.EG_ContentRunContent = append(_fbbd.EG_ContentRunContent, _dcge)
				_dcge.EG_RunLevelElts = append(_dcge.EG_RunLevelElts, _cdedd)
				_cdedd.EG_MathContent = append(_cdedd.EG_MathContent, _gdbgb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Hyperlink\u0020\u0025v", _aeddd.Name)
				if _bfbcg := d.Skip(); _bfbcg != nil {
					return _bfbcg
				}
			}
		case _d.EndElement:
			break _fcdd
		case _d.CharData:
		}
	}
	return nil
}

type EG_RPrContent struct {

	// Referenced Character Style
	RStyle *CT_String

	// Run Fonts
	RFonts *CT_Fonts

	// Bold
	B *CT_OnOff

	// Complex Script Bold
	BCs *CT_OnOff

	// Italics
	I *CT_OnOff

	// Complex Script Italics
	ICs *CT_OnOff

	// Display All Characters As Capital Letters
	Caps *CT_OnOff

	// Small Caps
	SmallCaps *CT_OnOff

	// Single Strikethrough
	Strike *CT_OnOff

	// Double Strikethrough
	Dstrike *CT_OnOff

	// Display Character Outline
	Outline *CT_OnOff

	// Shadow
	Shadow *CT_OnOff

	// Embossing
	Emboss *CT_OnOff

	// Imprinting
	Imprint *CT_OnOff

	// Do Not Check Spelling or Grammar
	NoProof *CT_OnOff

	// Use Document Grid Settings For Inter-Character Spacing
	SnapToGrid *CT_OnOff

	// Hidden Text
	Vanish *CT_OnOff

	// Web Hidden Text
	WebHidden *CT_OnOff

	// Run Content Color
	Color *CT_Color

	// Character Spacing Adjustment
	Spacing *CT_SignedTwipsMeasure

	// Expanded/Compressed Text
	W *CT_TextScale

	// Font Kerning
	Kern *CT_HpsMeasure

	// Vertically Raised or Lowered Text
	Position *CT_SignedHpsMeasure

	// Non-Complex Script Font Size
	Sz *CT_HpsMeasure

	// Complex Script Font Size
	SzCs *CT_HpsMeasure

	// Text Highlighting
	Highlight *CT_Highlight

	// Underline
	U *CT_Underline

	// Animated Text Effect
	Effect *CT_TextEffect

	// Text Border
	Bdr *CT_Border

	// Run Shading
	Shd *CT_Shd

	// Manual Run Width
	FitText *CT_FitText

	// Subscript/Superscript Text
	VertAlign *CT_VerticalAlignRun

	// Right To Left Text
	Rtl *CT_OnOff

	// Use Complex Script Formatting on Run
	Cs *CT_OnOff

	// Emphasis Mark
	Em *CT_Em

	// Languages for Run Content
	Lang *CT_Language

	// East Asian Typography Settings
	EastAsianLayout *CT_EastAsianLayout

	// Paragraph Mark Is Always Hidden
	SpecVanish *CT_OnOff

	// Office Open XML Math
	OMath *CT_OnOff

	// Revision Information for Run Properties
	RPrChange *CT_RPrChange
}

func NewCT_TextDirection() *CT_TextDirection {
	_cgaec := &CT_TextDirection{}
	_cgaec.ValAttr = ST_TextDirection(1)
	return _cgaec
}
func (_cefe *CT_DivBdr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dagdd:
	for {
		_bdga, _cbfee := d.Token()
		if _cbfee != nil {
			return _cbfee
		}
		switch _bgfeg := _bdga.(type) {
		case _d.StartElement:
			switch _bgfeg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "top"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "top"}:
				_cefe.Top = NewCT_Border()
				if _afaa := d.DecodeElement(_cefe.Top, &_bgfeg); _afaa != nil {
					return _afaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "left"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "left"}:
				_cefe.Left = NewCT_Border()
				if _bbced := d.DecodeElement(_cefe.Left, &_bgfeg); _bbced != nil {
					return _bbced
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bottom"}:
				_cefe.Bottom = NewCT_Border()
				if _adad := d.DecodeElement(_cefe.Bottom, &_bgfeg); _adad != nil {
					return _adad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "right"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "right"}:
				_cefe.Right = NewCT_Border()
				if _eadb := d.DecodeElement(_cefe.Right, &_bgfeg); _eadb != nil {
					return _eadb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_DivBdr \u0025v", _bgfeg.Name)
				if _cgcd := d.Skip(); _cgcd != nil {
					return _cgcd
				}
			}
		case _d.EndElement:
			break _dagdd
		case _d.CharData:
		}
	}
	return nil
}
func (_abacdg *ST_TblWidth) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bdbgfg, _bfdcfc := d.Token()
	if _bfdcfc != nil {
		return _bfdcfc
	}
	if _defbed, _edddeb := _bdbgfg.(_d.EndElement); _edddeb && _defbed.Name == start.Name {
		*_abacdg = 1
		return nil
	}
	if _dcdfee, _agbfbb := _bdbgfg.(_d.CharData); !_agbfbb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bdbgfg)
	} else {
		switch string(_dcdfee) {
		case "":
			*_abacdg = 0
		case "nil":
			*_abacdg = 1
		case "pct":
			*_abacdg = 2
		case "dxa":
			*_abacdg = 3
		case "auto":
			*_abacdg = 4
		}
	}
	_bdbgfg, _bfdcfc = d.Token()
	if _bfdcfc != nil {
		return _bfdcfc
	}
	if _fcgee, _dfgba := _bdbgfg.(_d.EndElement); _dfgba && _fcgee.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bdbgfg)
}

// Validate validates the CT_TblPrChange and its children
func (_gegga *CT_TblPrChange) Validate() error     { return _gegga.ValidateWithPath("CT_TblPrChange") }
func NewEG_RubyContent() *EG_RubyContent           { _baegg := &EG_RubyContent{}; return _baegg }
func NewEG_HdrFtrReferences() *EG_HdrFtrReferences { _adccaa := &EG_HdrFtrReferences{}; return _adccaa }
func (_ccedfb ST_StyleType) ValidateWithPath(path string) error {
	switch _ccedfb {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ccedfb))
	}
	return nil
}
func (_eabef ST_LineNumberRestart) ValidateWithPath(path string) error {
	switch _eabef {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_eabef))
	}
	return nil
}

const (
	ST_ProofUnset ST_Proof = 0
	ST_ProofClean ST_Proof = 1
	ST_ProofDirty ST_Proof = 2
)

// Validate validates the CT_LvlLegacy and its children
func (_ffbgc *CT_LvlLegacy) Validate() error { return _ffbgc.ValidateWithPath("CT_LvlLegacy") }
func NewCT_TargetScreenSz() *CT_TargetScreenSz {
	_ecgdcg := &CT_TargetScreenSz{}
	_ecgdcg.ValAttr = ST_TargetScreenSz(1)
	return _ecgdcg
}
func (_aebbd *CT_FtnPos) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_fggfe, _eegea := _aebbd.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _eegea != nil {
		return _eegea
	}
	start.Attr = append(start.Attr, _fggfe)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_CalendarType and its children
func (_dbaf *CT_CalendarType) Validate() error { return _dbaf.ValidateWithPath("CT_CalendarType") }

// Validate validates the CT_TextDirection and its children
func (_gfcbe *CT_TextDirection) Validate() error { return _gfcbe.ValidateWithPath("CT_TextDirection") }
func NewCT_Language() *CT_Language               { _cdcdb := &CT_Language{}; return _cdcdb }
func (_adbge ST_PageBorderDisplay) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eggcc := _d.Attr{}
	_eggcc.Name = name
	switch _adbge {
	case ST_PageBorderDisplayUnset:
		_eggcc.Value = ""
	case ST_PageBorderDisplayAllPages:
		_eggcc.Value = "allPages"
	case ST_PageBorderDisplayFirstPage:
		_eggcc.Value = "firstPage"
	case ST_PageBorderDisplayNotFirstPage:
		_eggcc.Value = "notFirstPage"
	}
	return _eggcc, nil
}
func (_fffbbd *ST_ThemeColor) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fbbfdb, _cacfe := d.Token()
	if _cacfe != nil {
		return _cacfe
	}
	if _ffeba, _fdgbdb := _fbbfdb.(_d.EndElement); _fdgbdb && _ffeba.Name == start.Name {
		*_fffbbd = 1
		return nil
	}
	if _bfddbc, _aabee := _fbbfdb.(_d.CharData); !_aabee {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fbbfdb)
	} else {
		switch string(_bfddbc) {
		case "":
			*_fffbbd = 0
		case "dark1":
			*_fffbbd = 1
		case "light1":
			*_fffbbd = 2
		case "dark2":
			*_fffbbd = 3
		case "light2":
			*_fffbbd = 4
		case "accent1":
			*_fffbbd = 5
		case "accent2":
			*_fffbbd = 6
		case "accent3":
			*_fffbbd = 7
		case "accent4":
			*_fffbbd = 8
		case "accent5":
			*_fffbbd = 9
		case "accent6":
			*_fffbbd = 10
		case "hyperlink":
			*_fffbbd = 11
		case "followedHyperlink":
			*_fffbbd = 12
		case "none":
			*_fffbbd = 13
		case "background1":
			*_fffbbd = 14
		case "text1":
			*_fffbbd = 15
		case "background2":
			*_fffbbd = 16
		case "text2":
			*_fffbbd = 17
		}
	}
	_fbbfdb, _cacfe = d.Token()
	if _cacfe != nil {
		return _cacfe
	}
	if _fegbgc, _cgfef := _fbbfdb.(_d.EndElement); _cgfef && _fegbgc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fbbfdb)
}

type CT_TblPrBase struct {

	// Referenced Table Style
	TblStyle *CT_String

	// Floating Table Positioning
	TblpPr *CT_TblPPr

	// Floating Table Allows Other Tables to Overlap
	TblOverlap *CT_TblOverlap

	// Visually Right to Left Table
	BidiVisual *CT_OnOff

	// Number of Rows in Row Band
	TblStyleRowBandSize *CT_DecimalNumber

	// Number of Columns in Column Band
	TblStyleColBandSize *CT_DecimalNumber

	// Preferred Table Width
	TblW *CT_TblWidth

	// Table Alignment
	Jc *CT_JcTable

	// Table Cell Spacing Default
	TblCellSpacing *CT_TblWidth

	// Table Indent from Leading Margin
	TblInd *CT_TblWidth

	// Table Borders
	TblBorders *CT_TblBorders

	// Table Shading
	Shd *CT_Shd

	// Table Layout
	TblLayout *CT_TblLayoutType

	// Table Cell Margin Defaults
	TblCellMar *CT_TblCellMar

	// Table Style Conditional Formatting Settings
	TblLook *CT_TblLook

	// Table Caption
	TblCaption *CT_String

	// Table Description
	TblDescription *CT_String
}

func (_agagc ST_DocPartBehavior) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gbccga := _d.Attr{}
	_gbccga.Name = name
	switch _agagc {
	case ST_DocPartBehaviorUnset:
		_gbccga.Value = ""
	case ST_DocPartBehaviorContent:
		_gbccga.Value = "content"
	case ST_DocPartBehaviorP:
		_gbccga.Value = "p"
	case ST_DocPartBehaviorPg:
		_gbccga.Value = "pg"
	}
	return _gbccga, nil
}

const (
	ST_PageBorderDisplayUnset        ST_PageBorderDisplay = 0
	ST_PageBorderDisplayAllPages     ST_PageBorderDisplay = 1
	ST_PageBorderDisplayFirstPage    ST_PageBorderDisplay = 2
	ST_PageBorderDisplayNotFirstPage ST_PageBorderDisplay = 3
)

type CT_TblCellMar struct {

	// Table Cell Top Margin Default
	Top *CT_TblWidth

	// Table Cell Leading Margin Default
	Start *CT_TblWidth

	// Table Cell Leading Margin Default
	Left *CT_TblWidth

	// Table Cell Bottom Margin Default
	Bottom *CT_TblWidth

	// Table Cell Trailing Margin Default
	End *CT_TblWidth

	// Table Cell Trailing Margin Default
	Right *CT_TblWidth
}
type CT_TrackChangesView struct {

	// Display Visual Indicator Of Markup Area
	MarkupAttr *_g.ST_OnOff

	// Display Comments
	CommentsAttr *_g.ST_OnOff

	// Display Content Revisions
	InsDelAttr *_g.ST_OnOff

	// Display Formatting Revisions
	FormattingAttr *_g.ST_OnOff

	// Display Ink Annotations
	InkAnnotationsAttr *_g.ST_OnOff
}

// ValidateWithPath validates the CT_FFTextType and its children, prefixing error messages with path
func (_bdbfg *CT_FFTextType) ValidateWithPath(path string) error {
	if _bdbfg.ValAttr == ST_FFTextTypeUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fcdb := _bdbfg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fcdb != nil {
		return _fcdb
	}
	return nil
}

type CT_Proof struct {

	// Spell Checking State
	SpellingAttr ST_Proof

	// Grammatical Checking State
	GrammarAttr ST_Proof
}

func (_adade *CT_TblLayoutType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _adade.TypeAttr != ST_TblLayoutTypeUnset {
		_bbdgd, _fcaeac := _adade.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _fcaeac != nil {
			return _fcaeac
		}
		start.Attr = append(start.Attr, _bbdgd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_PageBorder struct {
	IdAttr *string

	// Border Style
	ValAttr ST_Border

	// Border Color
	ColorAttr *ST_HexColor

	// Border Theme Color
	ThemeColorAttr ST_ThemeColor

	// Border Theme Color Tint
	ThemeTintAttr *string

	// Border Theme Color Shade
	ThemeShadeAttr *string

	// Border Width
	SzAttr *uint64

	// Border Spacing Measurement
	SpaceAttr *uint64

	// Border Shadow
	ShadowAttr *_g.ST_OnOff

	// Create Frame Effect
	FrameAttr *_g.ST_OnOff
}

// Validate validates the CT_RubyContent and its children
func (_gfece *CT_RubyContent) Validate() error { return _gfece.ValidateWithPath("CT_RubyContent") }
func (_bcdfdb *Ftr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bcdfdb.CT_HdrFtr = *NewCT_HdrFtr()
_bccgaf:
	for {
		_bedeb, _gcafad := d.Token()
		if _gcafad != nil {
			return _gcafad
		}
		switch _eacbc := _bedeb.(type) {
		case _d.StartElement:
			switch _eacbc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_cgcff := NewCT_AltChunk()
				if _gdbfe := d.DecodeElement(_cgcff, &_eacbc); _gdbfe != nil {
					return _gdbfe
				}
				_bcdfdb.AltChunk = append(_bcdfdb.AltChunk, _cgcff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_acedb := NewEG_ContentBlockContent()
				_acedb.CustomXml = NewCT_CustomXmlBlock()
				if _acadc := d.DecodeElement(_acedb.CustomXml, &_eacbc); _acadc != nil {
					return _acadc
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _acedb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_bdcbba := NewEG_ContentBlockContent()
				_bdcbba.Sdt = NewCT_SdtBlock()
				if _aecbca := d.DecodeElement(_bdcbba.Sdt, &_eacbc); _aecbca != nil {
					return _aecbca
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _bdcbba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_cagfgc := NewEG_ContentBlockContent()
				_bgecag := NewCT_P()
				if _bcgag := d.DecodeElement(_bgecag, &_eacbc); _bcgag != nil {
					return _bcgag
				}
				_cagfgc.P = append(_cagfgc.P, _bgecag)
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _cagfgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_dfdda := NewEG_ContentBlockContent()
				_fgedb := NewCT_Tbl()
				if _gfdfa := d.DecodeElement(_fgedb, &_eacbc); _gfdfa != nil {
					return _gfdfa
				}
				_dfdda.Tbl = append(_dfdda.Tbl, _fgedb)
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _dfdda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_cfgbb := NewEG_ContentBlockContent()
				_faacd := NewEG_RunLevelElts()
				_faacd.ProofErr = NewCT_ProofErr()
				if _cffgf := d.DecodeElement(_faacd.ProofErr, &_eacbc); _cffgf != nil {
					return _cffgf
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _cfgbb)
				_cfgbb.EG_RunLevelElts = append(_cfgbb.EG_RunLevelElts, _faacd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_cdcead := NewEG_ContentBlockContent()
				_fcegb := NewEG_RunLevelElts()
				_fcegb.PermStart = NewCT_PermStart()
				if _gfabbf := d.DecodeElement(_fcegb.PermStart, &_eacbc); _gfabbf != nil {
					return _gfabbf
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _cdcead)
				_cdcead.EG_RunLevelElts = append(_cdcead.EG_RunLevelElts, _fcegb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_fbgba := NewEG_ContentBlockContent()
				_ggabb := NewEG_RunLevelElts()
				_ggabb.PermEnd = NewCT_Perm()
				if _bbcdaf := d.DecodeElement(_ggabb.PermEnd, &_eacbc); _bbcdaf != nil {
					return _bbcdaf
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _fbgba)
				_fbgba.EG_RunLevelElts = append(_fbgba.EG_RunLevelElts, _ggabb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_caafd := NewEG_ContentBlockContent()
				_ebdbc := NewEG_RunLevelElts()
				_ebdbc.Ins = NewCT_RunTrackChange()
				if _fdfff := d.DecodeElement(_ebdbc.Ins, &_eacbc); _fdfff != nil {
					return _fdfff
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _caafd)
				_caafd.EG_RunLevelElts = append(_caafd.EG_RunLevelElts, _ebdbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_affbed := NewEG_ContentBlockContent()
				_fdcdcd := NewEG_RunLevelElts()
				_fdcdcd.Del = NewCT_RunTrackChange()
				if _ebadb := d.DecodeElement(_fdcdcd.Del, &_eacbc); _ebadb != nil {
					return _ebadb
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _affbed)
				_affbed.EG_RunLevelElts = append(_affbed.EG_RunLevelElts, _fdcdcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_eccad := NewEG_ContentBlockContent()
				_cbdbdd := NewEG_RunLevelElts()
				_cbdbdd.MoveFrom = NewCT_RunTrackChange()
				if _bgcgbf := d.DecodeElement(_cbdbdd.MoveFrom, &_eacbc); _bgcgbf != nil {
					return _bgcgbf
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _eccad)
				_eccad.EG_RunLevelElts = append(_eccad.EG_RunLevelElts, _cbdbdd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_fcadfd := NewEG_ContentBlockContent()
				_efdgb := NewEG_RunLevelElts()
				_efdgb.MoveTo = NewCT_RunTrackChange()
				if _adeaad := d.DecodeElement(_efdgb.MoveTo, &_eacbc); _adeaad != nil {
					return _adeaad
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _fcadfd)
				_fcadfd.EG_RunLevelElts = append(_fcadfd.EG_RunLevelElts, _efdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_cdebf := NewEG_ContentBlockContent()
				_fccbfc := NewEG_RunLevelElts()
				_dcfdc := NewEG_RangeMarkupElements()
				_dcfdc.BookmarkStart = NewCT_Bookmark()
				if _geafda := d.DecodeElement(_dcfdc.BookmarkStart, &_eacbc); _geafda != nil {
					return _geafda
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _cdebf)
				_cdebf.EG_RunLevelElts = append(_cdebf.EG_RunLevelElts, _fccbfc)
				_fccbfc.EG_RangeMarkupElements = append(_fccbfc.EG_RangeMarkupElements, _dcfdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_ebegbe := NewEG_ContentBlockContent()
				_ffdfg := NewEG_RunLevelElts()
				_gebed := NewEG_RangeMarkupElements()
				_gebed.BookmarkEnd = NewCT_MarkupRange()
				if _cgbbdd := d.DecodeElement(_gebed.BookmarkEnd, &_eacbc); _cgbbdd != nil {
					return _cgbbdd
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _ebegbe)
				_ebegbe.EG_RunLevelElts = append(_ebegbe.EG_RunLevelElts, _ffdfg)
				_ffdfg.EG_RangeMarkupElements = append(_ffdfg.EG_RangeMarkupElements, _gebed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_efdgbe := NewEG_ContentBlockContent()
				_bcbgf := NewEG_RunLevelElts()
				_fegdc := NewEG_RangeMarkupElements()
				_fegdc.MoveFromRangeStart = NewCT_MoveBookmark()
				if _adeef := d.DecodeElement(_fegdc.MoveFromRangeStart, &_eacbc); _adeef != nil {
					return _adeef
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _efdgbe)
				_efdgbe.EG_RunLevelElts = append(_efdgbe.EG_RunLevelElts, _bcbgf)
				_bcbgf.EG_RangeMarkupElements = append(_bcbgf.EG_RangeMarkupElements, _fegdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_egdcg := NewEG_ContentBlockContent()
				_decfc := NewEG_RunLevelElts()
				_ccceg := NewEG_RangeMarkupElements()
				_ccceg.MoveFromRangeEnd = NewCT_MarkupRange()
				if _dacecf := d.DecodeElement(_ccceg.MoveFromRangeEnd, &_eacbc); _dacecf != nil {
					return _dacecf
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _egdcg)
				_egdcg.EG_RunLevelElts = append(_egdcg.EG_RunLevelElts, _decfc)
				_decfc.EG_RangeMarkupElements = append(_decfc.EG_RangeMarkupElements, _ccceg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_bdfef := NewEG_ContentBlockContent()
				_gfbbf := NewEG_RunLevelElts()
				_fcaba := NewEG_RangeMarkupElements()
				_fcaba.MoveToRangeStart = NewCT_MoveBookmark()
				if _ddbff := d.DecodeElement(_fcaba.MoveToRangeStart, &_eacbc); _ddbff != nil {
					return _ddbff
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _bdfef)
				_bdfef.EG_RunLevelElts = append(_bdfef.EG_RunLevelElts, _gfbbf)
				_gfbbf.EG_RangeMarkupElements = append(_gfbbf.EG_RangeMarkupElements, _fcaba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_edgfcd := NewEG_ContentBlockContent()
				_bffdfd := NewEG_RunLevelElts()
				_affffe := NewEG_RangeMarkupElements()
				_affffe.MoveToRangeEnd = NewCT_MarkupRange()
				if _afcfae := d.DecodeElement(_affffe.MoveToRangeEnd, &_eacbc); _afcfae != nil {
					return _afcfae
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _edgfcd)
				_edgfcd.EG_RunLevelElts = append(_edgfcd.EG_RunLevelElts, _bffdfd)
				_bffdfd.EG_RangeMarkupElements = append(_bffdfd.EG_RangeMarkupElements, _affffe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_dggfd := NewEG_ContentBlockContent()
				_afbad := NewEG_RunLevelElts()
				_ffcbbf := NewEG_RangeMarkupElements()
				_ffcbbf.CommentRangeStart = NewCT_MarkupRange()
				if _badag := d.DecodeElement(_ffcbbf.CommentRangeStart, &_eacbc); _badag != nil {
					return _badag
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _dggfd)
				_dggfd.EG_RunLevelElts = append(_dggfd.EG_RunLevelElts, _afbad)
				_afbad.EG_RangeMarkupElements = append(_afbad.EG_RangeMarkupElements, _ffcbbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_facbgd := NewEG_ContentBlockContent()
				_gbccffb := NewEG_RunLevelElts()
				_ggbace := NewEG_RangeMarkupElements()
				_ggbace.CommentRangeEnd = NewCT_MarkupRange()
				if _gbgdd := d.DecodeElement(_ggbace.CommentRangeEnd, &_eacbc); _gbgdd != nil {
					return _gbgdd
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _facbgd)
				_facbgd.EG_RunLevelElts = append(_facbgd.EG_RunLevelElts, _gbccffb)
				_gbccffb.EG_RangeMarkupElements = append(_gbccffb.EG_RangeMarkupElements, _ggbace)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_ggdcff := NewEG_ContentBlockContent()
				_cfacef := NewEG_RunLevelElts()
				_ffecdg := NewEG_RangeMarkupElements()
				_ffecdg.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _gcefd := d.DecodeElement(_ffecdg.CustomXmlInsRangeStart, &_eacbc); _gcefd != nil {
					return _gcefd
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _ggdcff)
				_ggdcff.EG_RunLevelElts = append(_ggdcff.EG_RunLevelElts, _cfacef)
				_cfacef.EG_RangeMarkupElements = append(_cfacef.EG_RangeMarkupElements, _ffecdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_dadggb := NewEG_ContentBlockContent()
				_ggcdf := NewEG_RunLevelElts()
				_ebeaf := NewEG_RangeMarkupElements()
				_ebeaf.CustomXmlInsRangeEnd = NewCT_Markup()
				if _fbccbg := d.DecodeElement(_ebeaf.CustomXmlInsRangeEnd, &_eacbc); _fbccbg != nil {
					return _fbccbg
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _dadggb)
				_dadggb.EG_RunLevelElts = append(_dadggb.EG_RunLevelElts, _ggcdf)
				_ggcdf.EG_RangeMarkupElements = append(_ggcdf.EG_RangeMarkupElements, _ebeaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_aegcf := NewEG_ContentBlockContent()
				_cegcfg := NewEG_RunLevelElts()
				_gdacce := NewEG_RangeMarkupElements()
				_gdacce.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _cdcfc := d.DecodeElement(_gdacce.CustomXmlDelRangeStart, &_eacbc); _cdcfc != nil {
					return _cdcfc
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _aegcf)
				_aegcf.EG_RunLevelElts = append(_aegcf.EG_RunLevelElts, _cegcfg)
				_cegcfg.EG_RangeMarkupElements = append(_cegcfg.EG_RangeMarkupElements, _gdacce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_cbdgda := NewEG_ContentBlockContent()
				_fbfddc := NewEG_RunLevelElts()
				_ccacg := NewEG_RangeMarkupElements()
				_ccacg.CustomXmlDelRangeEnd = NewCT_Markup()
				if _bdbgb := d.DecodeElement(_ccacg.CustomXmlDelRangeEnd, &_eacbc); _bdbgb != nil {
					return _bdbgb
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _cbdgda)
				_cbdgda.EG_RunLevelElts = append(_cbdgda.EG_RunLevelElts, _fbfddc)
				_fbfddc.EG_RangeMarkupElements = append(_fbfddc.EG_RangeMarkupElements, _ccacg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_gbbfaeb := NewEG_ContentBlockContent()
				_babac := NewEG_RunLevelElts()
				_gdefga := NewEG_RangeMarkupElements()
				_gdefga.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _ebaba := d.DecodeElement(_gdefga.CustomXmlMoveFromRangeStart, &_eacbc); _ebaba != nil {
					return _ebaba
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _gbbfaeb)
				_gbbfaeb.EG_RunLevelElts = append(_gbbfaeb.EG_RunLevelElts, _babac)
				_babac.EG_RangeMarkupElements = append(_babac.EG_RangeMarkupElements, _gdefga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_ffaae := NewEG_ContentBlockContent()
				_cfabe := NewEG_RunLevelElts()
				_egbbgb := NewEG_RangeMarkupElements()
				_egbbgb.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _fdbfg := d.DecodeElement(_egbbgb.CustomXmlMoveFromRangeEnd, &_eacbc); _fdbfg != nil {
					return _fdbfg
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _ffaae)
				_ffaae.EG_RunLevelElts = append(_ffaae.EG_RunLevelElts, _cfabe)
				_cfabe.EG_RangeMarkupElements = append(_cfabe.EG_RangeMarkupElements, _egbbgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_beede := NewEG_ContentBlockContent()
				_eaaac := NewEG_RunLevelElts()
				_fecabg := NewEG_RangeMarkupElements()
				_fecabg.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _cbdeegd := d.DecodeElement(_fecabg.CustomXmlMoveToRangeStart, &_eacbc); _cbdeegd != nil {
					return _cbdeegd
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _beede)
				_beede.EG_RunLevelElts = append(_beede.EG_RunLevelElts, _eaaac)
				_eaaac.EG_RangeMarkupElements = append(_eaaac.EG_RangeMarkupElements, _fecabg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_bcada := NewEG_ContentBlockContent()
				_dgggg := NewEG_RunLevelElts()
				_cegcdb := NewEG_RangeMarkupElements()
				_cegcdb.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _cdacff := d.DecodeElement(_cegcdb.CustomXmlMoveToRangeEnd, &_eacbc); _cdacff != nil {
					return _cdacff
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _bcada)
				_bcada.EG_RunLevelElts = append(_bcada.EG_RunLevelElts, _dgggg)
				_dgggg.EG_RangeMarkupElements = append(_dgggg.EG_RangeMarkupElements, _cegcdb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_cgdbdd := NewEG_ContentBlockContent()
				_baecd := NewEG_RunLevelElts()
				_aaegd := NewEG_MathContent()
				_aaegd.OMathPara = _f.NewOMathPara()
				if _ebdafe := d.DecodeElement(_aaegd.OMathPara, &_eacbc); _ebdafe != nil {
					return _ebdafe
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _cgdbdd)
				_cgdbdd.EG_RunLevelElts = append(_cgdbdd.EG_RunLevelElts, _baecd)
				_baecd.EG_MathContent = append(_baecd.EG_MathContent, _aaegd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_abccc := NewEG_ContentBlockContent()
				_edbeae := NewEG_RunLevelElts()
				_dccbf := NewEG_MathContent()
				_dccbf.OMath = _f.NewOMath()
				if _fefbg := d.DecodeElement(_dccbf.OMath, &_eacbc); _fefbg != nil {
					return _fefbg
				}
				_bcdfdb.EG_ContentBlockContent = append(_bcdfdb.EG_ContentBlockContent, _abccc)
				_abccc.EG_RunLevelElts = append(_abccc.EG_RunLevelElts, _edbeae)
				_edbeae.EG_MathContent = append(_edbeae.EG_MathContent, _dccbf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020Ftr\u0020\u0025v", _eacbc.Name)
				if _bebde := d.Skip(); _bebde != nil {
					return _bebde
				}
			}
		case _d.EndElement:
			break _bccgaf
		case _d.CharData:
		}
	}
	return nil
}
func (_ggc *AG_SectPrAttributes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ee := range start.Attr {
		if _ee.Name.Local == "rsidRPr" {
			_eec, _da := _ee.Value, error(nil)
			if _da != nil {
				return _da
			}
			_ggc.RsidRPrAttr = &_eec
			continue
		}
		if _ee.Name.Local == "rsidDel" {
			_baa, _aa := _ee.Value, error(nil)
			if _aa != nil {
				return _aa
			}
			_ggc.RsidDelAttr = &_baa
			continue
		}
		if _ee.Name.Local == "rsidR" {
			_acg, _faa := _ee.Value, error(nil)
			if _faa != nil {
				return _faa
			}
			_ggc.RsidRAttr = &_acg
			continue
		}
		if _ee.Name.Local == "rsidSect" {
			_bf, _fd := _ee.Value, error(nil)
			if _fd != nil {
				return _fd
			}
			_ggc.RsidSectAttr = &_bf
			continue
		}
	}
	for {
		_acc, _bbff := d.Token()
		if _bbff != nil {
			return _b.Errorf("parsing\u0020AG_SectPrAttributes:\u0020\u0025s", _bbff)
		}
		if _cab, _gge := _acc.(_d.EndElement); _gge && _cab.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fgcgag *ST_StyleType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fgcgag = 0
	case "paragraph":
		*_fgcgag = 1
	case "character":
		*_fgcgag = 2
	case "table":
		*_fgcgag = 3
	case "numbering":
		*_fgcgag = 4
	}
	return nil
}

// Validate validates the CT_FitText and its children
func (_feff *CT_FitText) Validate() error { return _feff.ValidateWithPath("CT_FitText") }
func (_fadga *ST_CaptionPos) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_acbfada, _dgfbdb := d.Token()
	if _dgfbdb != nil {
		return _dgfbdb
	}
	if _abdae, _ebgfd := _acbfada.(_d.EndElement); _ebgfd && _abdae.Name == start.Name {
		*_fadga = 1
		return nil
	}
	if _fccadg, _baafe := _acbfada.(_d.CharData); !_baafe {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _acbfada)
	} else {
		switch string(_fccadg) {
		case "":
			*_fadga = 0
		case "above":
			*_fadga = 1
		case "below":
			*_fadga = 2
		case "left":
			*_fadga = 3
		case "right":
			*_fadga = 4
		}
	}
	_acbfada, _dgfbdb = d.Token()
	if _dgfbdb != nil {
		return _dgfbdb
	}
	if _bdcdc, _ccegf := _acbfada.(_d.EndElement); _ccegf && _bdcdc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _acbfada)
}
func NewWdCT_WrapPath() *WdCT_WrapPath {
	_dagbae := &WdCT_WrapPath{}
	_dagbae.Start = _eb.NewCT_Point2D()
	return _dagbae
}

const (
	WdST_WrapTextUnset     WdST_WrapText = 0
	WdST_WrapTextBothSides WdST_WrapText = 1
	WdST_WrapTextLeft      WdST_WrapText = 2
	WdST_WrapTextRight     WdST_WrapText = 3
	WdST_WrapTextLargest   WdST_WrapText = 4
)

// Validate validates the CT_FFCheckBoxChoice and its children
func (_gddd *CT_FFCheckBoxChoice) Validate() error {
	return _gddd.ValidateWithPath("CT_FFCheckBoxChoice")
}

// Validate validates the CT_BookmarkRange and its children
func (_gadf *CT_BookmarkRange) Validate() error { return _gadf.ValidateWithPath("CT_BookmarkRange") }
func (_dcbd *CT_LatentStyles) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dcbd.DefLockedStateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:defLockedState"}, Value: _b.Sprintf("\u0025v", *_dcbd.DefLockedStateAttr)})
	}
	if _dcbd.DefUIPriorityAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:defUIPriority"}, Value: _b.Sprintf("\u0025v", *_dcbd.DefUIPriorityAttr)})
	}
	if _dcbd.DefSemiHiddenAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:defSemiHidden"}, Value: _b.Sprintf("\u0025v", *_dcbd.DefSemiHiddenAttr)})
	}
	if _dcbd.DefUnhideWhenUsedAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:defUnhideWhenUsed"}, Value: _b.Sprintf("\u0025v", *_dcbd.DefUnhideWhenUsedAttr)})
	}
	if _dcbd.DefQFormatAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:defQFormat"}, Value: _b.Sprintf("\u0025v", *_dcbd.DefQFormatAttr)})
	}
	if _dcbd.CountAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:count"}, Value: _b.Sprintf("\u0025v", *_dcbd.CountAttr)})
	}
	e.EncodeToken(start)
	if _dcbd.LsdException != nil {
		_aacfa := _d.StartElement{Name: _d.Name{Local: "w:lsdException"}}
		for _, _bdaf := range _dcbd.LsdException {
			e.EncodeElement(_bdaf, _aacfa)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfcc *CT_Caption) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ebed := range start.Attr {
		if _ebed.Name.Local == "name" {
			_dbgd, _ddc := _ebed.Value, error(nil)
			if _ddc != nil {
				return _ddc
			}
			_cfcc.NameAttr = _dbgd
			continue
		}
		if _ebed.Name.Local == "pos" {
			_cfcc.PosAttr.UnmarshalXMLAttr(_ebed)
			continue
		}
		if _ebed.Name.Local == "chapNum" {
			_agga, _ecea := ParseUnionST_OnOff(_ebed.Value)
			if _ecea != nil {
				return _ecea
			}
			_cfcc.ChapNumAttr = &_agga
			continue
		}
		if _ebed.Name.Local == "heading" {
			_fbaf, _acfa := _dd.ParseInt(_ebed.Value, 10, 64)
			if _acfa != nil {
				return _acfa
			}
			_cfcc.HeadingAttr = &_fbaf
			continue
		}
		if _ebed.Name.Local == "noLabel" {
			_gdb, _gabd := ParseUnionST_OnOff(_ebed.Value)
			if _gabd != nil {
				return _gabd
			}
			_cfcc.NoLabelAttr = &_gdb
			continue
		}
		if _ebed.Name.Local == "numFmt" {
			_cfcc.NumFmtAttr.UnmarshalXMLAttr(_ebed)
			continue
		}
		if _ebed.Name.Local == "sep" {
			_cfcc.SepAttr.UnmarshalXMLAttr(_ebed)
			continue
		}
	}
	for {
		_bbeff, _ffff := d.Token()
		if _ffff != nil {
			return _b.Errorf("parsing\u0020CT_Caption:\u0020%s", _ffff)
		}
		if _bdaac, _dcde := _bbeff.(_d.EndElement); _dcde && _bdaac.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ccaab *WdCT_WordprocessingContentPart) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ccaab.BwModeAttr != _eb.ST_BlackWhiteModeUnset {
		_deacdb, _ffgac := _ccaab.BwModeAttr.MarshalXMLAttr(_d.Name{Local: "a:bwMode"})
		if _ffgac != nil {
			return _ffgac
		}
		start.Attr = append(start.Attr, _deacdb)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", _ccaab.IdAttr)})
	e.EncodeToken(start)
	if _ccaab.NvContentPartPr != nil {
		_faeegf := _d.StartElement{Name: _d.Name{Local: "wp:nvContentPartPr"}}
		e.EncodeElement(_ccaab.NvContentPartPr, _faeegf)
	}
	if _ccaab.Xfrm != nil {
		_ffagbd := _d.StartElement{Name: _d.Name{Local: "wp:xfrm"}}
		e.EncodeElement(_ccaab.Xfrm, _ffagbd)
	}
	if _ccaab.ExtLst != nil {
		_ffgdge := _d.StartElement{Name: _d.Name{Local: "wp:extLst"}}
		e.EncodeElement(_ccaab.ExtLst, _ffgdge)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ccbgba ST_Jc) Validate() error { return _ccbgba.ValidateWithPath("") }
func (_cfgbe ST_VAnchor) String() string {
	switch _cfgbe {
	case 0:
		return ""
	case 1:
		return "text"
	case 2:
		return "margin"
	case 3:
		return "page"
	}
	return ""
}

// ValidateWithPath validates the CT_Row and its children, prefixing error messages with path
func (_efcge *CT_Row) ValidateWithPath(path string) error {
	if _efcge.TblPrEx != nil {
		if _daaba := _efcge.TblPrEx.ValidateWithPath(path + "\u002fTblPrEx"); _daaba != nil {
			return _daaba
		}
	}
	if _efcge.TrPr != nil {
		if _dfeec := _efcge.TrPr.ValidateWithPath(path + "\u002fTrPr"); _dfeec != nil {
			return _dfeec
		}
	}
	for _acbfb, _cggbg := range _efcge.EG_ContentCellContent {
		if _decf := _cggbg.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_ContentCellContent\u005b%d\u005d", path, _acbfb)); _decf != nil {
			return _decf
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SdtComboBox and its children, prefixing error messages with path
func (_bcebb *CT_SdtComboBox) ValidateWithPath(path string) error {
	for _gacbbe, _fdbca := range _bcebb.ListItem {
		if _dafbgc := _fdbca.ValidateWithPath(_b.Sprintf("\u0025s\u002fListItem\u005b\u0025d\u005d", path, _gacbbe)); _dafbgc != nil {
			return _dafbgc
		}
	}
	return nil
}
func NewCT_MailMergeDest() *CT_MailMergeDest {
	_abgbe := &CT_MailMergeDest{}
	_abgbe.ValAttr = ST_MailMergeDest(1)
	return _abgbe
}
func NewCT_FrameScrollbar() *CT_FrameScrollbar {
	_fefba := &CT_FrameScrollbar{}
	_fefba.ValAttr = ST_FrameScrollbar(1)
	return _fefba
}
func (_efefe ST_TextScale) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _efefe.ST_TextScalePercent != nil {
		e.EncodeToken(_d.CharData(*_efefe.ST_TextScalePercent))
	}
	if _efefe.ST_TextScaleDecimal != nil {
		e.EncodeToken(_d.CharData(_b.Sprintf("\u0025d", *_efefe.ST_TextScaleDecimal)))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}

// Validate validates the CT_TblPrBase and its children
func (_dcaff *CT_TblPrBase) Validate() error { return _dcaff.ValidateWithPath("CT_TblPrBase") }
func (_ebfg *CT_BookmarkRange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ebfg.ColFirstAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colFirst"}, Value: _b.Sprintf("\u0025v", *_ebfg.ColFirstAttr)})
	}
	if _ebfg.ColLastAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colLast"}, Value: _b.Sprintf("\u0025v", *_ebfg.ColLastAttr)})
	}
	if _ebfg.DisplacedByCustomXmlAttr != ST_DisplacedByCustomXmlUnset {
		_afbc, _efdc := _ebfg.DisplacedByCustomXmlAttr.MarshalXMLAttr(_d.Name{Local: "w:displacedByCustomXml"})
		if _efdc != nil {
			return _efdc
		}
		start.Attr = append(start.Attr, _afbc)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _ebfg.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_eddda *CT_Ind) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eddda.StartAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:start"}, Value: _b.Sprintf("\u0025v", *_eddda.StartAttr)})
	}
	if _eddda.StartCharsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:startChars"}, Value: _b.Sprintf("\u0025v", *_eddda.StartCharsAttr)})
	}
	if _eddda.EndAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:end"}, Value: _b.Sprintf("\u0025v", *_eddda.EndAttr)})
	}
	if _eddda.EndCharsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:endChars"}, Value: _b.Sprintf("\u0025v", *_eddda.EndCharsAttr)})
	}
	if _eddda.LeftAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:left"}, Value: _b.Sprintf("\u0025v", *_eddda.LeftAttr)})
	}
	if _eddda.LeftCharsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:leftChars"}, Value: _b.Sprintf("\u0025v", *_eddda.LeftCharsAttr)})
	}
	if _eddda.RightAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:right"}, Value: _b.Sprintf("\u0025v", *_eddda.RightAttr)})
	}
	if _eddda.RightCharsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rightChars"}, Value: _b.Sprintf("\u0025v", *_eddda.RightCharsAttr)})
	}
	if _eddda.HangingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hanging"}, Value: _b.Sprintf("\u0025v", *_eddda.HangingAttr)})
	}
	if _eddda.HangingCharsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hangingChars"}, Value: _b.Sprintf("\u0025v", *_eddda.HangingCharsAttr)})
	}
	if _eddda.FirstLineAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstLine"}, Value: _b.Sprintf("\u0025v", *_eddda.FirstLineAttr)})
	}
	if _eddda.FirstLineCharsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstLineChars"}, Value: _b.Sprintf("\u0025v", *_eddda.FirstLineCharsAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the WdCT_EffectExtent and its children
func (_bbbaec *WdCT_EffectExtent) Validate() error {
	return _bbbaec.ValidateWithPath("WdCT_EffectExtent")
}
func (_ggbdgg *ST_Proof) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ggbdgg = 0
	case "clean":
		*_ggbdgg = 1
	case "dirty":
		*_ggbdgg = 2
	}
	return nil
}
func (_gecag *ST_Theme) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gecag = 0
	case "majorEastAsia":
		*_gecag = 1
	case "majorBidi":
		*_gecag = 2
	case "majorAscii":
		*_gecag = 3
	case "majorHAnsi":
		*_gecag = 4
	case "minorEastAsia":
		*_gecag = 5
	case "minorBidi":
		*_gecag = 6
	case "minorAscii":
		*_gecag = 7
	case "minorHAnsi":
		*_gecag = 8
	}
	return nil
}
func (_cabcfe *EG_PContentMath) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Name.Local = "w:EG_PContentMath"
	if _cabcfe.EG_PContentBase != nil {
		for _, _aafgd := range _cabcfe.EG_PContentBase {
			_aafgd.MarshalXML(e, _d.StartElement{})
		}
	}
	if _cabcfe.EG_ContentRunContentBase != nil {
		for _, _fccbe := range _cabcfe.EG_ContentRunContentBase {
			_fccbe.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func (_cffceg ST_EdnPos) ValidateWithPath(path string) error {
	switch _cffceg {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cffceg))
	}
	return nil
}

type ST_BrClear byte

func (_cedae *ST_DisplacedByCustomXml) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cbeeef, _fbbfa := d.Token()
	if _fbbfa != nil {
		return _fbbfa
	}
	if _bfcbbe, _fccbd := _cbeeef.(_d.EndElement); _fccbd && _bfcbbe.Name == start.Name {
		*_cedae = 1
		return nil
	}
	if _cecagd, _edfde := _cbeeef.(_d.CharData); !_edfde {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cbeeef)
	} else {
		switch string(_cecagd) {
		case "":
			*_cedae = 0
		case "next":
			*_cedae = 1
		case "prev":
			*_cedae = 2
		}
	}
	_cbeeef, _fbbfa = d.Token()
	if _fbbfa != nil {
		return _fbbfa
	}
	if _ddgfg, _aeggbd := _cbeeef.(_d.EndElement); _aeggbd && _ddgfg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cbeeef)
}
func (_cbgfa *CT_MathCtrlDel) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _cbgfa.AuthorAttr)})
	if _cbgfa.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_cbgfa.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _cbgfa.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gfffca *ST_TabTlc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afcad, _cedeec := d.Token()
	if _cedeec != nil {
		return _cedeec
	}
	if _ggfdfg, _gdacaa := _afcad.(_d.EndElement); _gdacaa && _ggfdfg.Name == start.Name {
		*_gfffca = 1
		return nil
	}
	if _acccab, _cgaae := _afcad.(_d.CharData); !_cgaae {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _afcad)
	} else {
		switch string(_acccab) {
		case "":
			*_gfffca = 0
		case "none":
			*_gfffca = 1
		case "dot":
			*_gfffca = 2
		case "hyphen":
			*_gfffca = 3
		case "underscore":
			*_gfffca = 4
		case "heavy":
			*_gfffca = 5
		case "middleDot":
			*_gfffca = 6
		}
	}
	_afcad, _cedeec = d.Token()
	if _cedeec != nil {
		return _cedeec
	}
	if _gaffb, _ffbbeg := _afcad.(_d.EndElement); _ffbbeg && _gaffb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _afcad)
}

type WdEG_WrapType struct{ Choice *WdEG_WrapTypeChoice }
type WdCT_WrapTopBottom struct {
	DistTAttr    *uint32
	DistBAttr    *uint32
	EffectExtent *WdCT_EffectExtent
}
type CT_EdnDocProps struct {

	// Endnote Placement
	Pos *CT_EdnPos

	// Endnote Numbering Format
	NumFmt *CT_NumFmt

	// Footnote and Endnote Numbering Starting Value
	NumStart *CT_DecimalNumber

	// Footnote and Endnote Numbering Restart Location
	NumRestart *CT_NumRestart
	Endnote    []*CT_FtnEdnSepRef
}

func NewCT_TblLayoutType() *CT_TblLayoutType { _egdafd := &CT_TblLayoutType{}; return _egdafd }

// ValidateWithPath validates the CT_MathCtrlIns and its children, prefixing error messages with path
func (_ceegb *CT_MathCtrlIns) ValidateWithPath(path string) error { return nil }
func (_ddfce *CT_TblStylePr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ddfce.TypeAttr = ST_TblStyleOverrideType(1)
	for _, _fccbc := range start.Attr {
		if _fccbc.Name.Local == "type" {
			_ddfce.TypeAttr.UnmarshalXMLAttr(_fccbc)
			continue
		}
	}
_ccfdde:
	for {
		_dgcdc, _eaecg := d.Token()
		if _eaecg != nil {
			return _eaecg
		}
		switch _bcgdfa := _dgcdc.(type) {
		case _d.StartElement:
			switch _bcgdfa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPr"}:
				_ddfce.PPr = NewCT_PPrGeneral()
				if _efbcg := d.DecodeElement(_ddfce.PPr, &_bcgdfa); _efbcg != nil {
					return _efbcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_ddfce.RPr = NewCT_RPr()
				if _dgcfb := d.DecodeElement(_ddfce.RPr, &_bcgdfa); _dgcfb != nil {
					return _dgcfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPr"}:
				_ddfce.TblPr = NewCT_TblPrBase()
				if _bgbac := d.DecodeElement(_ddfce.TblPr, &_bcgdfa); _bgbac != nil {
					return _bgbac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "trPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "trPr"}:
				_ddfce.TrPr = NewCT_TrPr()
				if _bcdbg := d.DecodeElement(_ddfce.TrPr, &_bcgdfa); _bcdbg != nil {
					return _bcdbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcPr"}:
				_ddfce.TcPr = NewCT_TcPr()
				if _gfdfg := d.DecodeElement(_ddfce.TcPr, &_bcgdfa); _gfdfg != nil {
					return _gfdfg
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_TblStylePr \u0025v", _bcgdfa.Name)
				if _babdb := d.Skip(); _babdb != nil {
					return _babdb
				}
			}
		case _d.EndElement:
			break _ccfdde
		case _d.CharData:
		}
	}
	return nil
}
func (_fbcbf ST_WmlColorSchemeIndex) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fbcbf.String(), start)
}

const (
	ST_NumberFormatUnset                        ST_NumberFormat = 0
	ST_NumberFormatDecimal                      ST_NumberFormat = 1
	ST_NumberFormatUpperRoman                   ST_NumberFormat = 2
	ST_NumberFormatLowerRoman                   ST_NumberFormat = 3
	ST_NumberFormatUpperLetter                  ST_NumberFormat = 4
	ST_NumberFormatLowerLetter                  ST_NumberFormat = 5
	ST_NumberFormatOrdinal                      ST_NumberFormat = 6
	ST_NumberFormatCardinalText                 ST_NumberFormat = 7
	ST_NumberFormatOrdinalText                  ST_NumberFormat = 8
	ST_NumberFormatHex                          ST_NumberFormat = 9
	ST_NumberFormatChicago                      ST_NumberFormat = 10
	ST_NumberFormatIdeographDigital             ST_NumberFormat = 11
	ST_NumberFormatJapaneseCounting             ST_NumberFormat = 12
	ST_NumberFormatAiueo                        ST_NumberFormat = 13
	ST_NumberFormatIroha                        ST_NumberFormat = 14
	ST_NumberFormatDecimalFullWidth             ST_NumberFormat = 15
	ST_NumberFormatDecimalHalfWidth             ST_NumberFormat = 16
	ST_NumberFormatJapaneseLegal                ST_NumberFormat = 17
	ST_NumberFormatJapaneseDigitalTenThousand   ST_NumberFormat = 18
	ST_NumberFormatDecimalEnclosedCircle        ST_NumberFormat = 19
	ST_NumberFormatDecimalFullWidth2            ST_NumberFormat = 20
	ST_NumberFormatAiueoFullWidth               ST_NumberFormat = 21
	ST_NumberFormatIrohaFullWidth               ST_NumberFormat = 22
	ST_NumberFormatDecimalZero                  ST_NumberFormat = 23
	ST_NumberFormatBullet                       ST_NumberFormat = 24
	ST_NumberFormatGanada                       ST_NumberFormat = 25
	ST_NumberFormatChosung                      ST_NumberFormat = 26
	ST_NumberFormatDecimalEnclosedFullstop      ST_NumberFormat = 27
	ST_NumberFormatDecimalEnclosedParen         ST_NumberFormat = 28
	ST_NumberFormatDecimalEnclosedCircleChinese ST_NumberFormat = 29
	ST_NumberFormatIdeographEnclosedCircle      ST_NumberFormat = 30
	ST_NumberFormatIdeographTraditional         ST_NumberFormat = 31
	ST_NumberFormatIdeographZodiac              ST_NumberFormat = 32
	ST_NumberFormatIdeographZodiacTraditional   ST_NumberFormat = 33
	ST_NumberFormatTaiwaneseCounting            ST_NumberFormat = 34
	ST_NumberFormatIdeographLegalTraditional    ST_NumberFormat = 35
	ST_NumberFormatTaiwaneseCountingThousand    ST_NumberFormat = 36
	ST_NumberFormatTaiwaneseDigital             ST_NumberFormat = 37
	ST_NumberFormatChineseCounting              ST_NumberFormat = 38
	ST_NumberFormatChineseLegalSimplified       ST_NumberFormat = 39
	ST_NumberFormatChineseCountingThousand      ST_NumberFormat = 40
	ST_NumberFormatKoreanDigital                ST_NumberFormat = 41
	ST_NumberFormatKoreanCounting               ST_NumberFormat = 42
	ST_NumberFormatKoreanLegal                  ST_NumberFormat = 43
	ST_NumberFormatKoreanDigital2               ST_NumberFormat = 44
	ST_NumberFormatVietnameseCounting           ST_NumberFormat = 45
	ST_NumberFormatRussianLower                 ST_NumberFormat = 46
	ST_NumberFormatRussianUpper                 ST_NumberFormat = 47
	ST_NumberFormatNone                         ST_NumberFormat = 48
	ST_NumberFormatNumberInDash                 ST_NumberFormat = 49
	ST_NumberFormatHebrew1                      ST_NumberFormat = 50
	ST_NumberFormatHebrew2                      ST_NumberFormat = 51
	ST_NumberFormatArabicAlpha                  ST_NumberFormat = 52
	ST_NumberFormatArabicAbjad                  ST_NumberFormat = 53
	ST_NumberFormatHindiVowels                  ST_NumberFormat = 54
	ST_NumberFormatHindiConsonants              ST_NumberFormat = 55
	ST_NumberFormatHindiNumbers                 ST_NumberFormat = 56
	ST_NumberFormatHindiCounting                ST_NumberFormat = 57
	ST_NumberFormatThaiLetters                  ST_NumberFormat = 58
	ST_NumberFormatThaiNumbers                  ST_NumberFormat = 59
	ST_NumberFormatThaiCounting                 ST_NumberFormat = 60
	ST_NumberFormatBahtText                     ST_NumberFormat = 61
	ST_NumberFormatDollarText                   ST_NumberFormat = 62
	ST_NumberFormatCustom                       ST_NumberFormat = 63
)

type CT_Language struct {

	// Latin Language
	ValAttr *string

	// East Asian Language
	EastAsiaAttr *string

	// Complex Script Language
	BidiAttr *string
}

func NewCT_DocDefaults() *CT_DocDefaults       { _bbfa := &CT_DocDefaults{}; return _bbfa }
func NewEG_BlockLevelElts() *EG_BlockLevelElts { _faaee := &EG_BlockLevelElts{}; return _faaee }
func (_gggbd *CT_TblPrEx) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aabbf:
	for {
		_cedcaa, _fggaec := d.Token()
		if _fggaec != nil {
			return _fggaec
		}
		switch _cceda := _cedcaa.(type) {
		case _d.StartElement:
			switch _cceda.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblW"}:
				_gggbd.TblW = NewCT_TblWidth()
				if _fbaacf := d.DecodeElement(_gggbd.TblW, &_cceda); _fbaacf != nil {
					return _fbaacf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_gggbd.Jc = NewCT_JcTable()
				if _fbedg := d.DecodeElement(_gggbd.Jc, &_cceda); _fbedg != nil {
					return _fbedg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellSpacing"}:
				_gggbd.TblCellSpacing = NewCT_TblWidth()
				if _cdgb := d.DecodeElement(_gggbd.TblCellSpacing, &_cceda); _cdgb != nil {
					return _cdgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblInd"}:
				_gggbd.TblInd = NewCT_TblWidth()
				if _aagfa := d.DecodeElement(_gggbd.TblInd, &_cceda); _aagfa != nil {
					return _aagfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblBorders"}:
				_gggbd.TblBorders = NewCT_TblBorders()
				if _fbggcc := d.DecodeElement(_gggbd.TblBorders, &_cceda); _fbggcc != nil {
					return _fbggcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_gggbd.Shd = NewCT_Shd()
				if _ebefbe := d.DecodeElement(_gggbd.Shd, &_cceda); _ebefbe != nil {
					return _ebefbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLayout"}:
				_gggbd.TblLayout = NewCT_TblLayoutType()
				if _cggea := d.DecodeElement(_gggbd.TblLayout, &_cceda); _cggea != nil {
					return _cggea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellMar"}:
				_gggbd.TblCellMar = NewCT_TblCellMar()
				if _aafda := d.DecodeElement(_gggbd.TblCellMar, &_cceda); _aafda != nil {
					return _aafda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLook"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLook"}:
				_gggbd.TblLook = NewCT_TblLook()
				if _bgeecb := d.DecodeElement(_gggbd.TblLook, &_cceda); _bgeecb != nil {
					return _bgeecb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPrExChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPrExChange"}:
				_gggbd.TblPrExChange = NewCT_TblPrExChange()
				if _gdcbeg := d.DecodeElement(_gggbd.TblPrExChange, &_cceda); _gdcbeg != nil {
					return _gdcbeg
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_TblPrEx\u0020\u0025v", _cceda.Name)
				if _degae := d.Skip(); _degae != nil {
					return _degae
				}
			}
		case _d.EndElement:
			break _aabbf
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PageMar and its children, prefixing error messages with path
func (_ebdbe *CT_PageMar) ValidateWithPath(path string) error {
	if _dcded := _ebdbe.TopAttr.ValidateWithPath(path + "\u002fTopAttr"); _dcded != nil {
		return _dcded
	}
	if _facf := _ebdbe.RightAttr.ValidateWithPath(path + "\u002fRightAttr"); _facf != nil {
		return _facf
	}
	if _ffccfd := _ebdbe.BottomAttr.ValidateWithPath(path + "/BottomAttr"); _ffccfd != nil {
		return _ffccfd
	}
	if _abgge := _ebdbe.LeftAttr.ValidateWithPath(path + "\u002fLeftAttr"); _abgge != nil {
		return _abgge
	}
	if _cdbgb := _ebdbe.HeaderAttr.ValidateWithPath(path + "/HeaderAttr"); _cdbgb != nil {
		return _cdbgb
	}
	if _cadgb := _ebdbe.FooterAttr.ValidateWithPath(path + "/FooterAttr"); _cadgb != nil {
		return _cadgb
	}
	if _gedgd := _ebdbe.GutterAttr.ValidateWithPath(path + "/GutterAttr"); _gedgd != nil {
		return _gedgd
	}
	return nil
}
func (_fbegda ST_Lock) Validate() error { return _fbegda.ValidateWithPath("") }
func (_abadfb ST_BrType) String() string {
	switch _abadfb {
	case 0:
		return ""
	case 1:
		return "page"
	case 2:
		return "column"
	case 3:
		return "textWrapping"
	}
	return ""
}
func (_adgbb *EG_RPrMath) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_feeff:
	for {
		_gebcd, _bbdcb := d.Token()
		if _bbdcb != nil {
			return _bbdcb
		}
		switch _caccg := _gebcd.(type) {
		case _d.StartElement:
			switch _caccg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_adgbb.Ins = NewCT_MathCtrlIns()
				if _befaa := d.DecodeElement(_adgbb.Ins, &_caccg); _befaa != nil {
					return _befaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_adgbb.Del = NewCT_MathCtrlDel()
				if _aacbgg := d.DecodeElement(_adgbb.Del, &_caccg); _aacbgg != nil {
					return _aacbgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_adgbb.RPr = NewCT_RPr()
				if _dfeae := d.DecodeElement(_adgbb.RPr, &_caccg); _dfeae != nil {
					return _dfeae
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020EG_RPrMath\u0020\u0025v", _caccg.Name)
				if _cecea := d.Skip(); _cecea != nil {
					return _cecea
				}
			}
		case _d.EndElement:
			break _feeff
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Lvl and its children
func (_aaac *CT_Lvl) Validate() error { return _aaac.ValidateWithPath("CT_Lvl") }

// ValidateWithPath validates the CT_DocPartGallery and its children, prefixing error messages with path
func (_eaed *CT_DocPartGallery) ValidateWithPath(path string) error {
	if _eaed.ValAttr == ST_DocPartGalleryUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _bcgb := _eaed.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _bcgb != nil {
		return _bcgb
	}
	return nil
}
func (_degcg ST_FrameLayout) ValidateWithPath(path string) error {
	switch _degcg {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_degcg))
	}
	return nil
}

const (
	ST_PitchUnset    ST_Pitch = 0
	ST_PitchFixed    ST_Pitch = 1
	ST_PitchVariable ST_Pitch = 2
	ST_PitchDefault  ST_Pitch = 3
)

func (_fbbfcc *CT_Footnotes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_adgab:
	for {
		_bccbb, _agcdb := d.Token()
		if _agcdb != nil {
			return _agcdb
		}
		switch _dacee := _bccbb.(type) {
		case _d.StartElement:
			switch _dacee.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnote"}:
				_ffdgg := NewCT_FtnEdn()
				if _acffc := d.DecodeElement(_ffdgg, &_dacee); _acffc != nil {
					return _acffc
				}
				_fbbfcc.Footnote = append(_fbbfcc.Footnote, _ffdgg)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Footnotes\u0020\u0025v", _dacee.Name)
				if _gcafd := d.Skip(); _gcafd != nil {
					return _gcafd
				}
			}
		case _d.EndElement:
			break _adgab
		case _d.CharData:
		}
	}
	return nil
}
func (_fcded *CT_SectType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bagfcb := range start.Attr {
		if _bagfcb.Name.Local == "val" {
			_fcded.ValAttr.UnmarshalXMLAttr(_bagfcb)
			continue
		}
	}
	for {
		_fdcae, _dfbfa := d.Token()
		if _dfbfa != nil {
			return _b.Errorf("parsing\u0020CT_SectType:\u0020\u0025s", _dfbfa)
		}
		if _gecfb, _caaeb := _fdcae.(_d.EndElement); _caaeb && _gecfb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cggf *CT_FramesetSplitbar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cggf.W != nil {
		_dadedd := _d.StartElement{Name: _d.Name{Local: "w:w"}}
		e.EncodeElement(_cggf.W, _dadedd)
	}
	if _cggf.Color != nil {
		_fdbaa := _d.StartElement{Name: _d.Name{Local: "w:color"}}
		e.EncodeElement(_cggf.Color, _fdbaa)
	}
	if _cggf.NoBorder != nil {
		_fbbef := _d.StartElement{Name: _d.Name{Local: "w:noBorder"}}
		e.EncodeElement(_cggf.NoBorder, _fbbef)
	}
	if _cggf.FlatBorders != nil {
		_geeff := _d.StartElement{Name: _d.Name{Local: "w:flatBorders"}}
		e.EncodeElement(_cggf.FlatBorders, _geeff)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfddcf *CT_Zoom) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _aaeed := range start.Attr {
		if _aaeed.Name.Local == "val" {
			_cfddcf.ValAttr.UnmarshalXMLAttr(_aaeed)
			continue
		}
		if _aaeed.Name.Local == "percent" {
			_gffdad, _gageb := ParseUnionST_DecimalNumberOrPercent(_aaeed.Value)
			if _gageb != nil {
				return _gageb
			}
			_cfddcf.PercentAttr = _gffdad
			continue
		}
	}
	for {
		_gfdbe, _decea := d.Token()
		if _decea != nil {
			return _b.Errorf("parsing\u0020CT_Zoom:\u0020\u0025s", _decea)
		}
		if _ecccdb, _cdaeab := _gfdbe.(_d.EndElement); _cdaeab && _ecccdb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cfccfe *ST_Hint) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cfccfe = 0
	case "default":
		*_cfccfe = 1
	case "eastAsia":
		*_cfccfe = 2
	}
	return nil
}
func NewCT_PageNumber() *CT_PageNumber { _gdfd := &CT_PageNumber{}; return _gdfd }
func (_bddag *CT_Proof) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bddag.SpellingAttr != ST_ProofUnset {
		_dbgbg, _cgbcaa := _bddag.SpellingAttr.MarshalXMLAttr(_d.Name{Local: "w:spelling"})
		if _cgbcaa != nil {
			return _cgbcaa
		}
		start.Attr = append(start.Attr, _dbgbg)
	}
	if _bddag.GrammarAttr != ST_ProofUnset {
		_ceeabb, _edgdc := _bddag.GrammarAttr.MarshalXMLAttr(_d.Name{Local: "w:grammar"})
		if _edgdc != nil {
			return _edgdc
		}
		start.Attr = append(start.Attr, _ceeabb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fbfaac ST_TargetScreenSz) Validate() error { return _fbfaac.ValidateWithPath("") }

// Validate validates the CT_TblCellMar and its children
func (_egfgag *CT_TblCellMar) Validate() error { return _egfgag.ValidateWithPath("CT_TblCellMar") }

type WdCT_WordprocessingCanvasChoice struct {
	Wsp          []*WdWsp
	Pic          []*_ca.Pic
	ContentPart  []*WdCT_WordprocessingContentPart
	Wgp          []*WdWgp
	GraphicFrame []*WdCT_GraphicFrame
}
type CT_TblGridBase struct {

	// Grid Column Definition
	GridCol []*CT_TblGridCol
}

func NewCT_Tc() *CT_Tc { _dcgagc := &CT_Tc{}; return _dcgagc }

// Validate validates the CT_RubyAlign and its children
func (_dccfe *CT_RubyAlign) Validate() error { return _dccfe.ValidateWithPath("CT_RubyAlign") }

// Validate validates the CT_PPrDefault and its children
func (_cbdfe *CT_PPrDefault) Validate() error { return _cbdfe.ValidateWithPath("CT_PPrDefault") }

type CT_MacroName struct {

	// Name of Script Function
	ValAttr string
}

// Validate validates the EG_RPr and its children
func (_fecafa *EG_RPr) Validate() error { return _fecafa.ValidateWithPath("EG_RPr") }

// Validate validates the GlossaryDocument and its children
func (_dcgbd *GlossaryDocument) Validate() error { return _dcgbd.ValidateWithPath("GlossaryDocument") }
func (_efdggg *ST_SdtDateMappingType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_efdggg = 0
	case "text":
		*_efdggg = 1
	case "date":
		*_efdggg = 2
	case "dateTime":
		*_efdggg = 3
	}
	return nil
}
func (_ecebcd *CT_SdtContentCell) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_afcfa:
	for {
		_eggfg, _dbfdbg := d.Token()
		if _dbfdbg != nil {
			return _dbfdbg
		}
		switch _abdgeg := _eggfg.(type) {
		case _d.StartElement:
			switch _abdgeg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tc"}:
				_dafgd := NewCT_Tc()
				if _gbbeda := d.DecodeElement(_dafgd, &_abdgeg); _gbbeda != nil {
					return _gbbeda
				}
				_ecebcd.Tc = append(_ecebcd.Tc, _dafgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_ecebcd.CustomXml = NewCT_CustomXmlCell()
				if _ffaag := d.DecodeElement(_ecebcd.CustomXml, &_abdgeg); _ffaag != nil {
					return _ffaag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_ecebcd.Sdt = NewCT_SdtCell()
				if _ecbba := d.DecodeElement(_ecebcd.Sdt, &_abdgeg); _ecbba != nil {
					return _ecbba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_fbbca := NewEG_RunLevelElts()
				_fbbca.ProofErr = NewCT_ProofErr()
				if _fabaa := d.DecodeElement(_fbbca.ProofErr, &_abdgeg); _fabaa != nil {
					return _fabaa
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _fbbca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_geedd := NewEG_RunLevelElts()
				_geedd.PermStart = NewCT_PermStart()
				if _dbaeg := d.DecodeElement(_geedd.PermStart, &_abdgeg); _dbaeg != nil {
					return _dbaeg
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _geedd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_bggbe := NewEG_RunLevelElts()
				_bggbe.PermEnd = NewCT_Perm()
				if _gfbca := d.DecodeElement(_bggbe.PermEnd, &_abdgeg); _gfbca != nil {
					return _gfbca
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _bggbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_ddaad := NewEG_RunLevelElts()
				_ddaad.Ins = NewCT_RunTrackChange()
				if _afebc := d.DecodeElement(_ddaad.Ins, &_abdgeg); _afebc != nil {
					return _afebc
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _ddaad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_fddfa := NewEG_RunLevelElts()
				_fddfa.Del = NewCT_RunTrackChange()
				if _bagfd := d.DecodeElement(_fddfa.Del, &_abdgeg); _bagfd != nil {
					return _bagfd
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _fddfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_fdef := NewEG_RunLevelElts()
				_fdef.MoveFrom = NewCT_RunTrackChange()
				if _gbaeb := d.DecodeElement(_fdef.MoveFrom, &_abdgeg); _gbaeb != nil {
					return _gbaeb
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _fdef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_ffaga := NewEG_RunLevelElts()
				_ffaga.MoveTo = NewCT_RunTrackChange()
				if _dafgda := d.DecodeElement(_ffaga.MoveTo, &_abdgeg); _dafgda != nil {
					return _dafgda
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _ffaga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_fbced := NewEG_RunLevelElts()
				_cffec := NewEG_RangeMarkupElements()
				_cffec.BookmarkStart = NewCT_Bookmark()
				if _acaag := d.DecodeElement(_cffec.BookmarkStart, &_abdgeg); _acaag != nil {
					return _acaag
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _fbced)
				_fbced.EG_RangeMarkupElements = append(_fbced.EG_RangeMarkupElements, _cffec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_gcfgd := NewEG_RunLevelElts()
				_eaccca := NewEG_RangeMarkupElements()
				_eaccca.BookmarkEnd = NewCT_MarkupRange()
				if _cfadb := d.DecodeElement(_eaccca.BookmarkEnd, &_abdgeg); _cfadb != nil {
					return _cfadb
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _gcfgd)
				_gcfgd.EG_RangeMarkupElements = append(_gcfgd.EG_RangeMarkupElements, _eaccca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_dfcge := NewEG_RunLevelElts()
				_cdaef := NewEG_RangeMarkupElements()
				_cdaef.MoveFromRangeStart = NewCT_MoveBookmark()
				if _bgdaag := d.DecodeElement(_cdaef.MoveFromRangeStart, &_abdgeg); _bgdaag != nil {
					return _bgdaag
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _dfcge)
				_dfcge.EG_RangeMarkupElements = append(_dfcge.EG_RangeMarkupElements, _cdaef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_daffeg := NewEG_RunLevelElts()
				_dccce := NewEG_RangeMarkupElements()
				_dccce.MoveFromRangeEnd = NewCT_MarkupRange()
				if _dbcfce := d.DecodeElement(_dccce.MoveFromRangeEnd, &_abdgeg); _dbcfce != nil {
					return _dbcfce
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _daffeg)
				_daffeg.EG_RangeMarkupElements = append(_daffeg.EG_RangeMarkupElements, _dccce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_eecba := NewEG_RunLevelElts()
				_eaebc := NewEG_RangeMarkupElements()
				_eaebc.MoveToRangeStart = NewCT_MoveBookmark()
				if _gbbdf := d.DecodeElement(_eaebc.MoveToRangeStart, &_abdgeg); _gbbdf != nil {
					return _gbbdf
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _eecba)
				_eecba.EG_RangeMarkupElements = append(_eecba.EG_RangeMarkupElements, _eaebc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_cbcdd := NewEG_RunLevelElts()
				_fegec := NewEG_RangeMarkupElements()
				_fegec.MoveToRangeEnd = NewCT_MarkupRange()
				if _fbafe := d.DecodeElement(_fegec.MoveToRangeEnd, &_abdgeg); _fbafe != nil {
					return _fbafe
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _cbcdd)
				_cbcdd.EG_RangeMarkupElements = append(_cbcdd.EG_RangeMarkupElements, _fegec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_cbfge := NewEG_RunLevelElts()
				_gaeafb := NewEG_RangeMarkupElements()
				_gaeafb.CommentRangeStart = NewCT_MarkupRange()
				if _bdead := d.DecodeElement(_gaeafb.CommentRangeStart, &_abdgeg); _bdead != nil {
					return _bdead
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _cbfge)
				_cbfge.EG_RangeMarkupElements = append(_cbfge.EG_RangeMarkupElements, _gaeafb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_gabde := NewEG_RunLevelElts()
				_gfcd := NewEG_RangeMarkupElements()
				_gfcd.CommentRangeEnd = NewCT_MarkupRange()
				if _ffccgf := d.DecodeElement(_gfcd.CommentRangeEnd, &_abdgeg); _ffccgf != nil {
					return _ffccgf
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _gabde)
				_gabde.EG_RangeMarkupElements = append(_gabde.EG_RangeMarkupElements, _gfcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_bcfbb := NewEG_RunLevelElts()
				_deage := NewEG_RangeMarkupElements()
				_deage.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _cafgg := d.DecodeElement(_deage.CustomXmlInsRangeStart, &_abdgeg); _cafgg != nil {
					return _cafgg
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _bcfbb)
				_bcfbb.EG_RangeMarkupElements = append(_bcfbb.EG_RangeMarkupElements, _deage)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_gdgcfg := NewEG_RunLevelElts()
				_fbccf := NewEG_RangeMarkupElements()
				_fbccf.CustomXmlInsRangeEnd = NewCT_Markup()
				if _dgceg := d.DecodeElement(_fbccf.CustomXmlInsRangeEnd, &_abdgeg); _dgceg != nil {
					return _dgceg
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _gdgcfg)
				_gdgcfg.EG_RangeMarkupElements = append(_gdgcfg.EG_RangeMarkupElements, _fbccf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_bcbcd := NewEG_RunLevelElts()
				_afacg := NewEG_RangeMarkupElements()
				_afacg.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _fggd := d.DecodeElement(_afacg.CustomXmlDelRangeStart, &_abdgeg); _fggd != nil {
					return _fggd
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _bcbcd)
				_bcbcd.EG_RangeMarkupElements = append(_bcbcd.EG_RangeMarkupElements, _afacg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fdfaea := NewEG_RunLevelElts()
				_eeeef := NewEG_RangeMarkupElements()
				_eeeef.CustomXmlDelRangeEnd = NewCT_Markup()
				if _cecg := d.DecodeElement(_eeeef.CustomXmlDelRangeEnd, &_abdgeg); _cecg != nil {
					return _cecg
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _fdfaea)
				_fdfaea.EG_RangeMarkupElements = append(_fdfaea.EG_RangeMarkupElements, _eeeef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_ffecbb := NewEG_RunLevelElts()
				_ggfcc := NewEG_RangeMarkupElements()
				_ggfcc.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _gacga := d.DecodeElement(_ggfcc.CustomXmlMoveFromRangeStart, &_abdgeg); _gacga != nil {
					return _gacga
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _ffecbb)
				_ffecbb.EG_RangeMarkupElements = append(_ffecbb.EG_RangeMarkupElements, _ggfcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_fbgbb := NewEG_RunLevelElts()
				_ggcea := NewEG_RangeMarkupElements()
				_ggcea.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _badaf := d.DecodeElement(_ggcea.CustomXmlMoveFromRangeEnd, &_abdgeg); _badaf != nil {
					return _badaf
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _fbgbb)
				_fbgbb.EG_RangeMarkupElements = append(_fbgbb.EG_RangeMarkupElements, _ggcea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_ccgdf := NewEG_RunLevelElts()
				_ddbaf := NewEG_RangeMarkupElements()
				_ddbaf.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _cegdg := d.DecodeElement(_ddbaf.CustomXmlMoveToRangeStart, &_abdgeg); _cegdg != nil {
					return _cegdg
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _ccgdf)
				_ccgdf.EG_RangeMarkupElements = append(_ccgdf.EG_RangeMarkupElements, _ddbaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_fcfda := NewEG_RunLevelElts()
				_ecfdf := NewEG_RangeMarkupElements()
				_ecfdf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _ebgba := d.DecodeElement(_ecfdf.CustomXmlMoveToRangeEnd, &_abdgeg); _ebgba != nil {
					return _ebgba
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _fcfda)
				_fcfda.EG_RangeMarkupElements = append(_fcfda.EG_RangeMarkupElements, _ecfdf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_eebcfa := NewEG_RunLevelElts()
				_dbgfbf := NewEG_MathContent()
				_dbgfbf.OMathPara = _f.NewOMathPara()
				if _cacbg := d.DecodeElement(_dbgfbf.OMathPara, &_abdgeg); _cacbg != nil {
					return _cacbg
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _eebcfa)
				_eebcfa.EG_MathContent = append(_eebcfa.EG_MathContent, _dbgfbf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_cagcba := NewEG_RunLevelElts()
				_aggace := NewEG_MathContent()
				_aggace.OMath = _f.NewOMath()
				if _fece := d.DecodeElement(_aggace.OMath, &_abdgeg); _fece != nil {
					return _fece
				}
				_ecebcd.EG_RunLevelElts = append(_ecebcd.EG_RunLevelElts, _cagcba)
				_cagcba.EG_MathContent = append(_cagcba.EG_MathContent, _aggace)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_SdtContentCell\u0020\u0025v", _abdgeg.Name)
				if _dfaae := d.Skip(); _dfaae != nil {
					return _dfaae
				}
			}
		case _d.EndElement:
			break _afcfa
		case _d.CharData:
		}
	}
	return nil
}
func (_fg *CT_Background) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fg.ColorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:color"}, Value: _b.Sprintf("\u0025v", *_fg.ColorAttr)})
	}
	if _fg.ThemeColorAttr != ST_ThemeColorUnset {
		_aadb, _cgd := _fg.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _cgd != nil {
			return _cgd
		}
		start.Attr = append(start.Attr, _aadb)
	}
	if _fg.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_fg.ThemeTintAttr)})
	}
	if _fg.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_fg.ThemeShadeAttr)})
	}
	e.EncodeToken(start)
	if _fg.Any != nil {
		for _, _gbd := range _fg.Any {
			_gbd.MarshalXML(e, _d.StartElement{})
		}
	}
	if _fg.Drawing != nil {
		_ega := _d.StartElement{Name: _d.Name{Local: "w:drawing"}}
		e.EncodeElement(_fg.Drawing, _ega)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gabebc ST_Direction) String() string {
	switch _gabebc {
	case 0:
		return ""
	case 1:
		return "ltr"
	case 2:
		return "rtl"
	}
	return ""
}

// Validate validates the CT_TblBorders and its children
func (_cffaa *CT_TblBorders) Validate() error { return _cffaa.ValidateWithPath("CT_TblBorders") }
func (_febae *ST_DropCap) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffaafa, _eacef := d.Token()
	if _eacef != nil {
		return _eacef
	}
	if _cecfe, _dffbfc := _ffaafa.(_d.EndElement); _dffbfc && _cecfe.Name == start.Name {
		*_febae = 1
		return nil
	}
	if _caaad, _eefacd := _ffaafa.(_d.CharData); !_eefacd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ffaafa)
	} else {
		switch string(_caaad) {
		case "":
			*_febae = 0
		case "none":
			*_febae = 1
		case "drop":
			*_febae = 2
		case "margin":
			*_febae = 3
		}
	}
	_ffaafa, _eacef = d.Token()
	if _eacef != nil {
		return _eacef
	}
	if _bbaff, _ddece := _ffaafa.(_d.EndElement); _ddece && _bbaff.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ffaafa)
}
func (_affcd *ST_FldCharType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ddgdbb, _gefcc := d.Token()
	if _gefcc != nil {
		return _gefcc
	}
	if _beead, _eggaf := _ddgdbb.(_d.EndElement); _eggaf && _beead.Name == start.Name {
		*_affcd = 1
		return nil
	}
	if _edcba, _cbfca := _ddgdbb.(_d.CharData); !_cbfca {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ddgdbb)
	} else {
		switch string(_edcba) {
		case "":
			*_affcd = 0
		case "begin":
			*_affcd = 1
		case "separate":
			*_affcd = 2
		case "end":
			*_affcd = 3
		}
	}
	_ddgdbb, _gefcc = d.Token()
	if _gefcc != nil {
		return _gefcc
	}
	if _bbfcca, _bcfaad := _ddgdbb.(_d.EndElement); _bcfaad && _bbfcca.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ddgdbb)
}

// Validate validates the CT_SdtContentRun and its children
func (_efegg *CT_SdtContentRun) Validate() error { return _efegg.ValidateWithPath("CT_SdtContentRun") }

type CT_LatentStyles struct {

	// Default Style Locking Setting
	DefLockedStateAttr *_g.ST_OnOff

	// Default User Interface Priority Setting
	DefUIPriorityAttr *int64

	// Default Semi-Hidden Setting
	DefSemiHiddenAttr *_g.ST_OnOff

	// Default Hidden Until Used Setting
	DefUnhideWhenUsedAttr *_g.ST_OnOff

	// Default Primary Style Setting
	DefQFormatAttr *_g.ST_OnOff

	// Latent Style Count
	CountAttr *int64

	// Latent Style Exception
	LsdException []*CT_LsdException
}
type CT_TcPrBase struct {

	// Table Cell Conditional Formatting
	CnfStyle *CT_Cnf

	// Preferred Table Cell Width
	TcW *CT_TblWidth

	// Grid Columns Spanned by Current Table Cell
	GridSpan *CT_DecimalNumber

	// Horizontally Merged Cell
	HMerge *CT_HMerge

	// Vertically Merged Cell
	VMerge *CT_VMerge

	// Table Cell Borders
	TcBorders *CT_TcBorders

	// Table Cell Shading
	Shd *CT_Shd

	// Don't Wrap Cell Content
	NoWrap *CT_OnOff

	// Single Table Cell Margins
	TcMar *CT_TcMar

	// Table Cell Text Flow Direction
	TextDirection *CT_TextDirection

	// Fit Text Within Cell
	TcFitText *CT_OnOff

	// Table Cell Vertical Alignment
	VAlign *CT_VerticalJc

	// Ignore End Of Cell Marker In Row Height Calculation
	HideMark *CT_OnOff

	// Header Cells Associated With Table Cell
	Headers *CT_Headers
}
type CT_Charset struct {

	// Value
	ValAttr *string

	// IANA Name of Character Set
	CharacterSetAttr *string
}
type CT_NumPicBullet struct {

	// Picture Numbering Symbol ID
	NumPicBulletIdAttr int64

	// Picture Numbering Symbol Properties
	Pict    *CT_Picture
	Drawing *CT_Drawing
}

func NewWdCT_WordprocessingContentPart() *WdCT_WordprocessingContentPart {
	_gfdcc := &WdCT_WordprocessingContentPart{}
	return _gfdcc
}
func (_ggegdc *EG_RPrContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ddadd:
	for {
		_bgcfe, _dfbgc := d.Token()
		if _dfbgc != nil {
			return _dfbgc
		}
		switch _bdefa := _bgcfe.(type) {
		case _d.StartElement:
			switch _bdefa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rStyle"}:
				_ggegdc.RStyle = NewCT_String()
				if _ceadf := d.DecodeElement(_ggegdc.RStyle, &_bdefa); _ceadf != nil {
					return _ceadf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rFonts"}:
				_ggegdc.RFonts = NewCT_Fonts()
				if _fagbd := d.DecodeElement(_ggegdc.RFonts, &_bdefa); _fagbd != nil {
					return _fagbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "b"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "b"}:
				_ggegdc.B = NewCT_OnOff()
				if _ffgdaf := d.DecodeElement(_ggegdc.B, &_bdefa); _ffgdaf != nil {
					return _ffgdaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bCs"}:
				_ggegdc.BCs = NewCT_OnOff()
				if _gbfga := d.DecodeElement(_ggegdc.BCs, &_bdefa); _gbfga != nil {
					return _gbfga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "i"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "i"}:
				_ggegdc.I = NewCT_OnOff()
				if _babdee := d.DecodeElement(_ggegdc.I, &_bdefa); _babdee != nil {
					return _babdee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "iCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "iCs"}:
				_ggegdc.ICs = NewCT_OnOff()
				if _bdcfa := d.DecodeElement(_ggegdc.ICs, &_bdefa); _bdcfa != nil {
					return _bdcfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "caps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "caps"}:
				_ggegdc.Caps = NewCT_OnOff()
				if _dfgdfa := d.DecodeElement(_ggegdc.Caps, &_bdefa); _dfgdfa != nil {
					return _dfgdfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smallCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smallCaps"}:
				_ggegdc.SmallCaps = NewCT_OnOff()
				if _cggde := d.DecodeElement(_ggegdc.SmallCaps, &_bdefa); _cggde != nil {
					return _cggde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strike"}:
				_ggegdc.Strike = NewCT_OnOff()
				if _ebbda := d.DecodeElement(_ggegdc.Strike, &_bdefa); _ebbda != nil {
					return _ebbda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dstrike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dstrike"}:
				_ggegdc.Dstrike = NewCT_OnOff()
				if _cggdec := d.DecodeElement(_ggegdc.Dstrike, &_bdefa); _cggdec != nil {
					return _cggdec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outline"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outline"}:
				_ggegdc.Outline = NewCT_OnOff()
				if _fecea := d.DecodeElement(_ggegdc.Outline, &_bdefa); _fecea != nil {
					return _fecea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shadow"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shadow"}:
				_ggegdc.Shadow = NewCT_OnOff()
				if _ebcab := d.DecodeElement(_ggegdc.Shadow, &_bdefa); _ebcab != nil {
					return _ebcab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "emboss"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "emboss"}:
				_ggegdc.Emboss = NewCT_OnOff()
				if _degaba := d.DecodeElement(_ggegdc.Emboss, &_bdefa); _degaba != nil {
					return _degaba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "imprint"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "imprint"}:
				_ggegdc.Imprint = NewCT_OnOff()
				if _dfdeb := d.DecodeElement(_ggegdc.Imprint, &_bdefa); _dfdeb != nil {
					return _dfdeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noProof"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noProof"}:
				_ggegdc.NoProof = NewCT_OnOff()
				if _ebafa := d.DecodeElement(_ggegdc.NoProof, &_bdefa); _ebafa != nil {
					return _ebafa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_ggegdc.SnapToGrid = NewCT_OnOff()
				if _fgbec := d.DecodeElement(_ggegdc.SnapToGrid, &_bdefa); _fgbec != nil {
					return _fgbec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vanish"}:
				_ggegdc.Vanish = NewCT_OnOff()
				if _ccedfc := d.DecodeElement(_ggegdc.Vanish, &_bdefa); _ccedfc != nil {
					return _ccedfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "webHidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "webHidden"}:
				_ggegdc.WebHidden = NewCT_OnOff()
				if _daage := d.DecodeElement(_ggegdc.WebHidden, &_bdefa); _daage != nil {
					return _daage
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "color"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "color"}:
				_ggegdc.Color = NewCT_Color()
				if _eadcb := d.DecodeElement(_ggegdc.Color, &_bdefa); _eadcb != nil {
					return _eadcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_ggegdc.Spacing = NewCT_SignedTwipsMeasure()
				if _eebee := d.DecodeElement(_ggegdc.Spacing, &_bdefa); _eebee != nil {
					return _eebee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "w"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "w"}:
				_ggegdc.W = NewCT_TextScale()
				if _ebfafe := d.DecodeElement(_ggegdc.W, &_bdefa); _ebfafe != nil {
					return _ebfafe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kern"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kern"}:
				_ggegdc.Kern = NewCT_HpsMeasure()
				if _gaceg := d.DecodeElement(_ggegdc.Kern, &_bdefa); _gaceg != nil {
					return _gaceg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "position"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "position"}:
				_ggegdc.Position = NewCT_SignedHpsMeasure()
				if _bgfedc := d.DecodeElement(_ggegdc.Position, &_bdefa); _bgfedc != nil {
					return _bgfedc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_ggegdc.Sz = NewCT_HpsMeasure()
				if _aaece := d.DecodeElement(_ggegdc.Sz, &_bdefa); _aaece != nil {
					return _aaece
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "szCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "szCs"}:
				_ggegdc.SzCs = NewCT_HpsMeasure()
				if _bacee := d.DecodeElement(_ggegdc.SzCs, &_bdefa); _bacee != nil {
					return _bacee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "highlight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "highlight"}:
				_ggegdc.Highlight = NewCT_Highlight()
				if _beedc := d.DecodeElement(_ggegdc.Highlight, &_bdefa); _beedc != nil {
					return _beedc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "u"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "u"}:
				_ggegdc.U = NewCT_Underline()
				if _fegff := d.DecodeElement(_ggegdc.U, &_bdefa); _fegff != nil {
					return _fegff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effect"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "effect"}:
				_ggegdc.Effect = NewCT_TextEffect()
				if _aaaeda := d.DecodeElement(_ggegdc.Effect, &_bdefa); _aaaeda != nil {
					return _aaaeda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdr"}:
				_ggegdc.Bdr = NewCT_Border()
				if _dacgc := d.DecodeElement(_ggegdc.Bdr, &_bdefa); _dacgc != nil {
					return _dacgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_ggegdc.Shd = NewCT_Shd()
				if _bedece := d.DecodeElement(_ggegdc.Shd, &_bdefa); _bedece != nil {
					return _bedece
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fitText"}:
				_ggegdc.FitText = NewCT_FitText()
				if _eegdf := d.DecodeElement(_ggegdc.FitText, &_bdefa); _eegdf != nil {
					return _eegdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vertAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vertAlign"}:
				_ggegdc.VertAlign = NewCT_VerticalAlignRun()
				if _cebee := d.DecodeElement(_ggegdc.VertAlign, &_bdefa); _cebee != nil {
					return _cebee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtl"}:
				_ggegdc.Rtl = NewCT_OnOff()
				if _dfdcg := d.DecodeElement(_ggegdc.Rtl, &_bdefa); _dfdcg != nil {
					return _dfdcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cs"}:
				_ggegdc.Cs = NewCT_OnOff()
				if _aabdb := d.DecodeElement(_ggegdc.Cs, &_bdefa); _aabdb != nil {
					return _aabdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "em"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "em"}:
				_ggegdc.Em = NewCT_Em()
				if _cddac := d.DecodeElement(_ggegdc.Em, &_bdefa); _cddac != nil {
					return _cddac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lang"}:
				_ggegdc.Lang = NewCT_Language()
				if _bebbbe := d.DecodeElement(_ggegdc.Lang, &_bdefa); _bebbbe != nil {
					return _bebbbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "eastAsianLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "eastAsianLayout"}:
				_ggegdc.EastAsianLayout = NewCT_EastAsianLayout()
				if _bbgbf := d.DecodeElement(_ggegdc.EastAsianLayout, &_bdefa); _bbgbf != nil {
					return _bbgbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "specVanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "specVanish"}:
				_ggegdc.SpecVanish = NewCT_OnOff()
				if _egfbc := d.DecodeElement(_ggegdc.SpecVanish, &_bdefa); _egfbc != nil {
					return _egfbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "oMath"}:
				_ggegdc.OMath = NewCT_OnOff()
				if _faffb := d.DecodeElement(_ggegdc.OMath, &_bdefa); _faffb != nil {
					return _faffb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPrChange"}:
				_ggegdc.RPrChange = NewCT_RPrChange()
				if _gcbbed := d.DecodeElement(_ggegdc.RPrChange, &_bdefa); _gcbbed != nil {
					return _gcbbed
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020EG_RPrContent \u0025v", _bdefa.Name)
				if _abaeb := d.Skip(); _abaeb != nil {
					return _abaeb
				}
			}
		case _d.EndElement:
			break _ddadd
		case _d.CharData:
		}
	}
	return nil
}

type CT_FontRel struct {
	FontKeyAttr   string
	SubsettedAttr _g.ST_OnOff
	IdAttr        string
}
type CT_SimpleField struct {

	// Field Codes
	InstrAttr string

	// Field Should Not Be Recalculated
	FldLockAttr *_g.ST_OnOff

	// Field Result Invalidated
	DirtyAttr *_g.ST_OnOff

	// Custom Field Data
	FldData     *CT_Text
	EG_PContent []*EG_PContent
}

// Validate validates the CT_MailMergeOdsoFMDFieldType and its children
func (_gggaa *CT_MailMergeOdsoFMDFieldType) Validate() error {
	return _gggaa.ValidateWithPath("CT_MailMergeOdsoFMDFieldType")
}

type ST_SectionMark byte

func (_degeff ST_PTabLeader) Validate() error { return _degeff.ValidateWithPath("") }

type WdST_AlignH byte
type ST_TblLayoutType byte

func NewCT_HdrFtrRef() *CT_HdrFtrRef {
	_gccfb := &CT_HdrFtrRef{}
	_gccfb.TypeAttr = ST_HdrFtr(1)
	return _gccfb
}
func (_dgcg *CT_MailMergeDocType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_cbeed, _gebad := _dgcg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _gebad != nil {
		return _gebad
	}
	start.Attr = append(start.Attr, _cbeed)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_TblPPr struct {

	// Distance From Left of Table to Text
	LeftFromTextAttr *_g.ST_TwipsMeasure

	// (Distance From Right of Table to Text
	RightFromTextAttr *_g.ST_TwipsMeasure

	// Distance From Top of Table to Text
	TopFromTextAttr *_g.ST_TwipsMeasure

	// Distance From Bottom of Table to Text
	BottomFromTextAttr *_g.ST_TwipsMeasure

	// Table Vertical Anchor
	VertAnchorAttr ST_VAnchor

	// Table Horizontal Anchor
	HorzAnchorAttr ST_HAnchor

	// Relative Horizontal Alignment From Anchor
	TblpXSpecAttr _g.ST_XAlign

	// Absolute Horizontal Distance From Anchor
	TblpXAttr *ST_SignedTwipsMeasure

	// Relative Vertical Alignment from Anchor
	TblpYSpecAttr _g.ST_YAlign

	// Absolute Vertical Distance From Anchor
	TblpYAttr *ST_SignedTwipsMeasure
}

// Validate validates the WdCT_TextboxInfo and its children
func (_geegdc *WdCT_TextboxInfo) Validate() error {
	return _geegdc.ValidateWithPath("WdCT_TextboxInfo")
}
func NewCT_Captions() *CT_Captions { _edce := &CT_Captions{}; return _edce }
func (_gegggg ST_PageBorderDisplay) ValidateWithPath(path string) error {
	switch _gegggg {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_gegggg))
	}
	return nil
}

// Validate validates the CT_EastAsianLayout and its children
func (_gabeg *CT_EastAsianLayout) Validate() error {
	return _gabeg.ValidateWithPath("CT_EastAsianLayout")
}
func (_fbega ST_MailMergeDest) String() string {
	switch _fbega {
	case 0:
		return ""
	case 1:
		return "newDocument"
	case 2:
		return "printer"
	case 3:
		return "email"
	case 4:
		return "fax"
	}
	return ""
}

// Validate validates the CT_AltChunkPr and its children
func (_egb *CT_AltChunkPr) Validate() error { return _egb.ValidateWithPath("CT_AltChunkPr") }

// ValidateWithPath validates the CT_FontSig and its children, prefixing error messages with path
func (_ccbfd *CT_FontSig) ValidateWithPath(path string) error { return nil }

type EG_ContentRunContent struct {

	// Inline-Level Custom XML Element
	CustomXml *CT_CustomXmlRun

	// Inline-Level Smart Tag
	SmartTag *CT_SmartTagRun

	// Inline-Level Structured Document Tag
	Sdt *CT_SdtRun

	// Bidirectional Embedding Level
	Dir *CT_DirContentRun

	// Bidirectional Override
	Bdo *CT_BdoContentRun

	// Text Run
	R               *CT_R
	EG_RunLevelElts []*EG_RunLevelElts
}
type ST_CombineBrackets byte
type CT_FtnDocProps struct {

	// Footnote Placement
	Pos *CT_FtnPos

	// Footnote Numbering Format
	NumFmt *CT_NumFmt

	// Footnote and Endnote Numbering Starting Value
	NumStart *CT_DecimalNumber

	// Footnote and Endnote Numbering Restart Location
	NumRestart *CT_NumRestart
	Footnote   []*CT_FtnEdnSepRef
}

func (_edca *CT_Pitch) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_edca.ValAttr = ST_Pitch(1)
	for _, _gccee := range start.Attr {
		if _gccee.Name.Local == "val" {
			_edca.ValAttr.UnmarshalXMLAttr(_gccee)
			continue
		}
	}
	for {
		_bbeaec, _ccfbg := d.Token()
		if _ccfbg != nil {
			return _b.Errorf("parsing\u0020CT_Pitch: \u0025s", _ccfbg)
		}
		if _dbaecf, _bgecf := _bbeaec.(_d.EndElement); _bgecf && _dbaecf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gedeb *CT_Placeholder) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_affgc := _d.StartElement{Name: _d.Name{Local: "w:docPart"}}
	e.EncodeElement(_gedeb.DocPart, _affgc)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewWdCT_WrapTight() *WdCT_WrapTight {
	_agabbe := &WdCT_WrapTight{}
	_agabbe.WrapTextAttr = WdST_WrapText(1)
	_agabbe.WrapPolygon = NewWdCT_WrapPath()
	return _agabbe
}
func (_cbfebg *EG_ContentRunContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cbfebg.CustomXml != nil {
		_eeffgf := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_cbfebg.CustomXml, _eeffgf)
	}
	if _cbfebg.SmartTag != nil {
		_bfbgag := _d.StartElement{Name: _d.Name{Local: "w:smartTag"}}
		e.EncodeElement(_cbfebg.SmartTag, _bfbgag)
	}
	if _cbfebg.Sdt != nil {
		_gbccfa := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_cbfebg.Sdt, _gbccfa)
	}
	if _cbfebg.Dir != nil {
		_acdcgeb := _d.StartElement{Name: _d.Name{Local: "w:dir"}}
		e.EncodeElement(_cbfebg.Dir, _acdcgeb)
	}
	if _cbfebg.Bdo != nil {
		_gfeeg := _d.StartElement{Name: _d.Name{Local: "w:bdo"}}
		e.EncodeElement(_cbfebg.Bdo, _gfeeg)
	}
	if _cbfebg.R != nil {
		_cebggc := _d.StartElement{Name: _d.Name{Local: "w:r"}}
		e.EncodeElement(_cbfebg.R, _cebggc)
	}
	if _cbfebg.EG_RunLevelElts != nil {
		for _, _fgfdcd := range _cbfebg.EG_RunLevelElts {
			_fgfdcd.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func (_fcegbb *ST_FldCharType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fcegbb = 0
	case "begin":
		*_fcegbb = 1
	case "separate":
		*_fcegbb = 2
	case "end":
		*_fcegbb = 3
	}
	return nil
}

// Validate validates the CT_TrPr and its children
func (_caaag *CT_TrPr) Validate() error { return _caaag.ValidateWithPath("CT_TrPr") }
func (_ed *CT_Attr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dad := range start.Attr {
		if _dad.Name.Local == "uri" {
			_dfa, _cdc := _dad.Value, error(nil)
			if _cdc != nil {
				return _cdc
			}
			_ed.UriAttr = &_dfa
			continue
		}
		if _dad.Name.Local == "name" {
			_dcfc, _afe := _dad.Value, error(nil)
			if _afe != nil {
				return _afe
			}
			_ed.NameAttr = _dcfc
			continue
		}
		if _dad.Name.Local == "val" {
			_fce, _cea := _dad.Value, error(nil)
			if _cea != nil {
				return _cea
			}
			_ed.ValAttr = _fce
			continue
		}
	}
	for {
		_gccf, _dbb := d.Token()
		if _dbb != nil {
			return _b.Errorf("parsing\u0020CT_Attr:\u0020\u0025s", _dbb)
		}
		if _ecg, _gbc := _gccf.(_d.EndElement); _gbc && _ecg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aebgcf ST_TargetScreenSz) String() string {
	switch _aebgcf {
	case 0:
		return ""
	case 1:
		return "544x376"
	case 2:
		return "640x480"
	case 3:
		return "720x512"
	case 4:
		return "800x600"
	case 5:
		return "1024x768"
	case 6:
		return "1152x882"
	case 7:
		return "1152x900"
	case 8:
		return "1280x1024"
	case 9:
		return "1600x1200"
	case 10:
		return "1800x1440"
	case 11:
		return "1920x1200"
	}
	return ""
}
func (_bgde *CT_MultiLevelType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bgde.ValAttr = ST_MultiLevelType(1)
	for _, _adaa := range start.Attr {
		if _adaa.Name.Local == "val" {
			_bgde.ValAttr.UnmarshalXMLAttr(_adaa)
			continue
		}
	}
	for {
		_eeeb, _fdbfd := d.Token()
		if _fdbfd != nil {
			return _b.Errorf("parsing\u0020CT_MultiLevelType: \u0025s", _fdbfd)
		}
		if _ccfdd, _dedcc := _eeeb.(_d.EndElement); _dedcc && _ccfdd.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Style struct {

	// Style Type
	TypeAttr ST_StyleType

	// Style ID
	StyleIdAttr *string

	// Default Style
	DefaultAttr *_g.ST_OnOff

	// User-Defined Style
	CustomStyleAttr *_g.ST_OnOff

	// Primary Style Name
	Name *CT_String

	// Alternate Style Names
	Aliases *CT_String

	// Parent Style ID
	BasedOn *CT_String

	// Style For Next Paragraph
	Next *CT_String

	// Linked Style Reference
	Link *CT_String

	// Automatically Merge User Formatting Into Style Definition
	AutoRedefine *CT_OnOff

	// Hide Style From User Interface
	Hidden *CT_OnOff

	// Optional User Interface Sorting Order
	UiPriority *CT_DecimalNumber

	// Hide Style From Main User Interface
	SemiHidden *CT_OnOff

	// Remove Semi-Hidden Property When Style Is Used
	UnhideWhenUsed *CT_OnOff

	// Primary Style
	QFormat *CT_OnOff

	// Style Cannot Be Applied
	Locked *CT_OnOff

	// E-Mail Message Text Style
	Personal *CT_OnOff

	// E-Mail Message Composition Style
	PersonalCompose *CT_OnOff

	// E-Mail Message Reply Style
	PersonalReply *CT_OnOff

	// Revision Identifier for Style Definition
	Rsid *CT_LongHexNumber

	// Style Paragraph Properties
	PPr *CT_PPrGeneral

	// Run Properties
	RPr *CT_RPr

	// Style Table Properties
	TblPr *CT_TblPrBase

	// Style Table Row Properties
	TrPr *CT_TrPr

	// Style Table Cell Properties
	TcPr *CT_TcPr

	// Style Conditional Table Formatting Properties
	TblStylePr []*CT_TblStylePr
}

// Validate validates the CT_TblGridChange and its children
func (_bcgdfe *CT_TblGridChange) Validate() error {
	return _bcgdfe.ValidateWithPath("CT_TblGridChange")
}

const (
	WdST_RelFromVUnset         WdST_RelFromV = 0
	WdST_RelFromVMargin        WdST_RelFromV = 1
	WdST_RelFromVPage          WdST_RelFromV = 2
	WdST_RelFromVParagraph     WdST_RelFromV = 3
	WdST_RelFromVLine          WdST_RelFromV = 4
	WdST_RelFromVTopMargin     WdST_RelFromV = 5
	WdST_RelFromVBottomMargin  WdST_RelFromV = 6
	WdST_RelFromVInsideMargin  WdST_RelFromV = 7
	WdST_RelFromVOutsideMargin WdST_RelFromV = 8
)

func (_bceca ST_InfoTextType) String() string {
	switch _bceca {
	case 0:
		return ""
	case 1:
		return "text"
	case 2:
		return "autoText"
	}
	return ""
}

// ValidateWithPath validates the WdCT_WordprocessingCanvas and its children, prefixing error messages with path
func (_bfdee *WdCT_WordprocessingCanvas) ValidateWithPath(path string) error {
	if _bfdee.Bg != nil {
		if _eeebg := _bfdee.Bg.ValidateWithPath(path + "\u002fBg"); _eeebg != nil {
			return _eeebg
		}
	}
	if _bfdee.Whole != nil {
		if _gegeg := _bfdee.Whole.ValidateWithPath(path + "\u002fWhole"); _gegeg != nil {
			return _gegeg
		}
	}
	for _agcgfb, _cddcfb := range _bfdee.Choice {
		if _ffaec := _cddcfb.ValidateWithPath(_b.Sprintf("\u0025s\u002fChoice\u005b\u0025d\u005d", path, _agcgfb)); _ffaec != nil {
			return _ffaec
		}
	}
	if _bfdee.ExtLst != nil {
		if _bcaff := _bfdee.ExtLst.ValidateWithPath(path + "\u002fExtLst"); _bcaff != nil {
			return _bcaff
		}
	}
	return nil
}
func (_bddfb ST_PageBorderOffset) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fabbge := _d.Attr{}
	_fabbge.Name = name
	switch _bddfb {
	case ST_PageBorderOffsetUnset:
		_fabbge.Value = ""
	case ST_PageBorderOffsetPage:
		_fabbge.Value = "page"
	case ST_PageBorderOffsetText:
		_fabbge.Value = "text"
	}
	return _fabbge, nil
}

// ValidateWithPath validates the CT_Footnotes and its children, prefixing error messages with path
func (_abfb *CT_Footnotes) ValidateWithPath(path string) error {
	for _dcfbfc, _bffb := range _abfb.Footnote {
		if _fcfg := _bffb.ValidateWithPath(_b.Sprintf("\u0025s\u002fFootnote\u005b\u0025d\u005d", path, _dcfbfc)); _fcfg != nil {
			return _fcfg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TblGrid and its children, prefixing error messages with path
func (_daadg *CT_TblGrid) ValidateWithPath(path string) error {
	for _ecdac, _cddfc := range _daadg.GridCol {
		if _fgfcg := _cddfc.ValidateWithPath(_b.Sprintf("\u0025s\u002fGridCol\u005b\u0025d\u005d", path, _ecdac)); _fgfcg != nil {
			return _fgfcg
		}
	}
	if _daadg.TblGridChange != nil {
		if _fbfbf := _daadg.TblGridChange.ValidateWithPath(path + "\u002fTblGridChange"); _fbfbf != nil {
			return _fbfbf
		}
	}
	return nil
}
func (_fcae *CT_Border) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcae.ValAttr = ST_Border(1)
	for _, _eagc := range start.Attr {
		if _eagc.Name.Local == "val" {
			_fcae.ValAttr.UnmarshalXMLAttr(_eagc)
			continue
		}
		if _eagc.Name.Local == "color" {
			_aabf, _feba := ParseUnionST_HexColor(_eagc.Value)
			if _feba != nil {
				return _feba
			}
			_fcae.ColorAttr = &_aabf
			continue
		}
		if _eagc.Name.Local == "themeColor" {
			_fcae.ThemeColorAttr.UnmarshalXMLAttr(_eagc)
			continue
		}
		if _eagc.Name.Local == "themeTint" {
			_abb, _fbdg := _eagc.Value, error(nil)
			if _fbdg != nil {
				return _fbdg
			}
			_fcae.ThemeTintAttr = &_abb
			continue
		}
		if _eagc.Name.Local == "themeShade" {
			_dgaf, _cagc := _eagc.Value, error(nil)
			if _cagc != nil {
				return _cagc
			}
			_fcae.ThemeShadeAttr = &_dgaf
			continue
		}
		if _eagc.Name.Local == "sz" {
			_eafa, _ggbb := _dd.ParseUint(_eagc.Value, 10, 64)
			if _ggbb != nil {
				return _ggbb
			}
			_fcae.SzAttr = &_eafa
			continue
		}
		if _eagc.Name.Local == "space" {
			_babc, _fdaf := _dd.ParseUint(_eagc.Value, 10, 64)
			if _fdaf != nil {
				return _fdaf
			}
			_fcae.SpaceAttr = &_babc
			continue
		}
		if _eagc.Name.Local == "shadow" {
			_aecd, _cagg := ParseUnionST_OnOff(_eagc.Value)
			if _cagg != nil {
				return _cagg
			}
			_fcae.ShadowAttr = &_aecd
			continue
		}
		if _eagc.Name.Local == "frame" {
			_cagd, _dccd := ParseUnionST_OnOff(_eagc.Value)
			if _dccd != nil {
				return _dccd
			}
			_fcae.FrameAttr = &_cagd
			continue
		}
	}
	for {
		_dfc, _gec := d.Token()
		if _gec != nil {
			return _b.Errorf("parsing\u0020CT_Border:\u0020\u0025s", _gec)
		}
		if _cge, _baag := _dfc.(_d.EndElement); _baag && _cge.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Br and its children
func (_fgac *CT_Br) Validate() error { return _fgac.ValidateWithPath("CT_Br") }

// Validate validates the CT_TblStylePr and its children
func (_afdac *CT_TblStylePr) Validate() error { return _afdac.ValidateWithPath("CT_TblStylePr") }
func (_bcge *CT_DecimalNumberOrPrecent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _bcge.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DocType and its children, prefixing error messages with path
func (_ebbfg *CT_DocType) ValidateWithPath(path string) error { return nil }
func (_cddbc WdST_AlignV) ValidateWithPath(path string) error {
	switch _cddbc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cddbc))
	}
	return nil
}

// ValidateWithPath validates the EG_ContentRunContentBase and its children, prefixing error messages with path
func (_bccagc *EG_ContentRunContentBase) ValidateWithPath(path string) error {
	if _bccagc.SmartTag != nil {
		if _ecfdba := _bccagc.SmartTag.ValidateWithPath(path + "\u002fSmartTag"); _ecfdba != nil {
			return _ecfdba
		}
	}
	if _bccagc.Sdt != nil {
		if _gcfdc := _bccagc.Sdt.ValidateWithPath(path + "\u002fSdt"); _gcfdc != nil {
			return _gcfdc
		}
	}
	for _bcedg, _dafbc := range _bccagc.EG_RunLevelElts {
		if _aefece := _dafbc.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _bcedg)); _aefece != nil {
			return _aefece
		}
	}
	return nil
}

type CT_Row struct {

	// Revision Identifier for Table Row Glyph Formatting
	RsidRPrAttr *string

	// Revision Identifier for Table Row
	RsidRAttr *string

	// Revision Identifier for Table Row Deletion
	RsidDelAttr *string

	// Revision Identifier for Table Row Properties
	RsidTrAttr *string

	// Table-Level Property Exceptions
	TblPrEx *CT_TblPrEx

	// Table Row Properties
	TrPr                  *CT_TrPr
	EG_ContentCellContent []*EG_ContentCellContent
}
type ST_PageBorderZOrder byte

func (_babef *CT_TcPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fdggf:
	for {
		_bfcbgc, _cafab := d.Token()
		if _cafab != nil {
			return _cafab
		}
		switch _cbdaa := _bfcbgc.(type) {
		case _d.StartElement:
			switch _cbdaa.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_babef.CnfStyle = NewCT_Cnf()
				if _bfece := d.DecodeElement(_babef.CnfStyle, &_cbdaa); _bfece != nil {
					return _bfece
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcW"}:
				_babef.TcW = NewCT_TblWidth()
				if _cfddf := d.DecodeElement(_babef.TcW, &_cbdaa); _cfddf != nil {
					return _cfddf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gridSpan"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gridSpan"}:
				_babef.GridSpan = NewCT_DecimalNumber()
				if _gfdagd := d.DecodeElement(_babef.GridSpan, &_cbdaa); _gfdagd != nil {
					return _gfdagd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hMerge"}:
				_babef.HMerge = NewCT_HMerge()
				if _bcegf := d.DecodeElement(_babef.HMerge, &_cbdaa); _bcegf != nil {
					return _bcegf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vMerge"}:
				_babef.VMerge = NewCT_VMerge()
				if _efgca := d.DecodeElement(_babef.VMerge, &_cbdaa); _efgca != nil {
					return _efgca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcBorders"}:
				_babef.TcBorders = NewCT_TcBorders()
				if _ddaab := d.DecodeElement(_babef.TcBorders, &_cbdaa); _ddaab != nil {
					return _ddaab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_babef.Shd = NewCT_Shd()
				if _cedgc := d.DecodeElement(_babef.Shd, &_cbdaa); _cedgc != nil {
					return _cedgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noWrap"}:
				_babef.NoWrap = NewCT_OnOff()
				if _cfegcg := d.DecodeElement(_babef.NoWrap, &_cbdaa); _cfegcg != nil {
					return _cfegcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcMar"}:
				_babef.TcMar = NewCT_TcMar()
				if _bfbfc := d.DecodeElement(_babef.TcMar, &_cbdaa); _bfbfc != nil {
					return _bfbfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_babef.TextDirection = NewCT_TextDirection()
				if _bffdf := d.DecodeElement(_babef.TextDirection, &_cbdaa); _bffdf != nil {
					return _bffdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcFitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcFitText"}:
				_babef.TcFitText = NewCT_OnOff()
				if _cgggbg := d.DecodeElement(_babef.TcFitText, &_cbdaa); _cgggbg != nil {
					return _cgggbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vAlign"}:
				_babef.VAlign = NewCT_VerticalJc()
				if _gebf := d.DecodeElement(_babef.VAlign, &_cbdaa); _gebf != nil {
					return _gebf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hideMark"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hideMark"}:
				_babef.HideMark = NewCT_OnOff()
				if _acccd := d.DecodeElement(_babef.HideMark, &_cbdaa); _acccd != nil {
					return _acccd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "headers"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "headers"}:
				_babef.Headers = NewCT_Headers()
				if _agfdd := d.DecodeElement(_babef.Headers, &_cbdaa); _agfdd != nil {
					return _agfdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellIns"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellIns"}:
				_babef.CellIns = NewCT_TrackChange()
				if _ggabgf := d.DecodeElement(_babef.CellIns, &_cbdaa); _ggabgf != nil {
					return _ggabgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellDel"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellDel"}:
				_babef.CellDel = NewCT_TrackChange()
				if _adfdf := d.DecodeElement(_babef.CellDel, &_cbdaa); _adfdf != nil {
					return _adfdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellMerge"}:
				_babef.CellMerge = NewCT_CellMergeTrackChange()
				if _fcaeacd := d.DecodeElement(_babef.CellMerge, &_cbdaa); _fcaeacd != nil {
					return _fcaeacd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcPrChange"}:
				_babef.TcPrChange = NewCT_TcPrChange()
				if _ebfbg := d.DecodeElement(_babef.TcPrChange, &_cbdaa); _ebfbg != nil {
					return _ebfbg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TcPr\u0020\u0025v", _cbdaa.Name)
				if _dgafe := d.Skip(); _dgafe != nil {
					return _dgafe
				}
			}
		case _d.EndElement:
			break _fdggf
		case _d.CharData:
		}
	}
	return nil
}

type CT_Em struct {

	// Emphasis Mark Type
	ValAttr ST_Em
}

func (_agcgfd *WdCT_WrapTopBottom) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bedagc := range start.Attr {
		if _bedagc.Name.Local == "distT" {
			_bbabd, _cggaca := _dd.ParseUint(_bedagc.Value, 10, 32)
			if _cggaca != nil {
				return _cggaca
			}
			_bccfe := uint32(_bbabd)
			_agcgfd.DistTAttr = &_bccfe
			continue
		}
		if _bedagc.Name.Local == "distB" {
			_cbaeff, _baedf := _dd.ParseUint(_bedagc.Value, 10, 32)
			if _baedf != nil {
				return _baedf
			}
			_fgegb := uint32(_cbaeff)
			_agcgfd.DistBAttr = &_fgegb
			continue
		}
	}
_dadgd:
	for {
		_abgdf, _daeeac := d.Token()
		if _daeeac != nil {
			return _daeeac
		}
		switch _cbfeec := _abgdf.(type) {
		case _d.StartElement:
			switch _cbfeec.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effectExtent"}:
				_agcgfd.EffectExtent = NewWdCT_EffectExtent()
				if _cedbe := d.DecodeElement(_agcgfd.EffectExtent, &_cbfeec); _cedbe != nil {
					return _cedbe
				}
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020WdCT_WrapTopBottom\u0020\u0025v", _cbfeec.Name)
				if _cbbbe := d.Skip(); _cbbbe != nil {
					return _cbbbe
				}
			}
		case _d.EndElement:
			break _dadgd
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_FramePr and its children
func (_egeda *CT_FramePr) Validate() error { return _egeda.ValidateWithPath("CT_FramePr") }
func NewCT_ParaRPr() *CT_ParaRPr           { _bbefc := &CT_ParaRPr{}; return _bbefc }
func (_faaed *ST_FrameLayout) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_faaed = 0
	case "rows":
		*_faaed = 1
	case "cols":
		*_faaed = 2
	case "none":
		*_faaed = 3
	}
	return nil
}
func (_agaaac *ST_BrClear) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_agaaac = 0
	case "none":
		*_agaaac = 1
	case "left":
		*_agaaac = 2
	case "right":
		*_agaaac = 3
	case "all":
		*_agaaac = 4
	}
	return nil
}
func (_afbdcf ST_VAnchor) ValidateWithPath(path string) error {
	switch _afbdcf {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_afbdcf))
	}
	return nil
}
func (_ggdbea *CT_SdtPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_efeff:
	for {
		_dcfed, _daefd := d.Token()
		if _daefd != nil {
			return _daefd
		}
		switch _dbdb := _dcfed.(type) {
		case _d.StartElement:
			switch _dbdb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_ggdbea.RPr = NewCT_RPr()
				if _dcgfbd := d.DecodeElement(_ggdbea.RPr, &_dbdb); _dcgfbd != nil {
					return _dcgfbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "alias"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "alias"}:
				_ggdbea.Alias = NewCT_String()
				if _daadf := d.DecodeElement(_ggdbea.Alias, &_dbdb); _daadf != nil {
					return _daadf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tag"}:
				_ggdbea.Tag = NewCT_String()
				if _acabff := d.DecodeElement(_ggdbea.Tag, &_dbdb); _acabff != nil {
					return _acabff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "id"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "id"}:
				_ggdbea.Id = NewCT_DecimalNumber()
				if _cfgbf := d.DecodeElement(_ggdbea.Id, &_dbdb); _cfgbf != nil {
					return _cfgbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lock"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lock"}:
				_ggdbea.Lock = NewCT_Lock()
				if _aegce := d.DecodeElement(_ggdbea.Lock, &_dbdb); _aegce != nil {
					return _aegce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "placeholder"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "placeholder"}:
				_ggdbea.Placeholder = NewCT_Placeholder()
				if _fcdbb := d.DecodeElement(_ggdbea.Placeholder, &_dbdb); _fcdbb != nil {
					return _fcdbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "temporary"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "temporary"}:
				_ggdbea.Temporary = NewCT_OnOff()
				if _ecagaa := d.DecodeElement(_ggdbea.Temporary, &_dbdb); _ecagaa != nil {
					return _ecagaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "showingPlcHdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "showingPlcHdr"}:
				_ggdbea.ShowingPlcHdr = NewCT_OnOff()
				if _gfddd := d.DecodeElement(_ggdbea.ShowingPlcHdr, &_dbdb); _gfddd != nil {
					return _gfddd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dataBinding"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dataBinding"}:
				_ggdbea.DataBinding = NewCT_DataBinding()
				if _feegg := d.DecodeElement(_ggdbea.DataBinding, &_dbdb); _feegg != nil {
					return _feegg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "label"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "label"}:
				_ggdbea.Label = NewCT_DecimalNumber()
				if _ebbec := d.DecodeElement(_ggdbea.Label, &_dbdb); _ebbec != nil {
					return _ebbec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tabIndex"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tabIndex"}:
				_ggdbea.TabIndex = NewCT_UnsignedDecimalNumber()
				if _dfedb := d.DecodeElement(_ggdbea.TabIndex, &_dbdb); _dfedb != nil {
					return _dfedb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "equation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "equation"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _gdbgbc := d.DecodeElement(&_ggdbea.Choice.Equation, &_dbdb); _gdbgbc != nil {
					return _gdbgbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "comboBox"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "comboBox"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _cdbea := d.DecodeElement(&_ggdbea.Choice.ComboBox, &_dbdb); _cdbea != nil {
					return _cdbea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "date"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "date"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _eaagac := d.DecodeElement(&_ggdbea.Choice.Date, &_dbdb); _eaagac != nil {
					return _eaagac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartObj"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartObj"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _febfg := d.DecodeElement(&_ggdbea.Choice.DocPartObj, &_dbdb); _febfg != nil {
					return _febfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartList"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartList"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _gcfdbf := d.DecodeElement(&_ggdbea.Choice.DocPartList, &_dbdb); _gcfdbf != nil {
					return _gcfdbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dropDownList"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dropDownList"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _edaabg := d.DecodeElement(&_ggdbea.Choice.DropDownList, &_dbdb); _edaabg != nil {
					return _edaabg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "picture"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "picture"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _fgbcaf := d.DecodeElement(&_ggdbea.Choice.Picture, &_dbdb); _fgbcaf != nil {
					return _fgbcaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "richText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "richText"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _bdfag := d.DecodeElement(&_ggdbea.Choice.RichText, &_dbdb); _bdfag != nil {
					return _bdfag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "text"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "text"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _efffd := d.DecodeElement(&_ggdbea.Choice.Text, &_dbdb); _efffd != nil {
					return _efffd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "citation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "citation"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _gbbdg := d.DecodeElement(&_ggdbea.Choice.Citation, &_dbdb); _gbbdg != nil {
					return _gbbdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "group"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "group"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _gbagc := d.DecodeElement(&_ggdbea.Choice.Group, &_dbdb); _gbagc != nil {
					return _gbagc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bibliography"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bibliography"}:
				_ggdbea.Choice = NewCT_SdtPrChoice()
				if _aagce := d.DecodeElement(&_ggdbea.Choice.Bibliography, &_dbdb); _aagce != nil {
					return _aagce
				}
			default:
				_egeg := &_ga.XSDAny{}
				if _fefge := d.DecodeElement(_egeg, &_dbdb); _fefge != nil {
					return _fefge
				}
				_ggdbea.Extra = append(_ggdbea.Extra, _egeg)
			}
		case _d.EndElement:
			break _efeff
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_FFData and its children
func (_fbfe *CT_FFData) Validate() error { return _fbfe.ValidateWithPath("CT_FFData") }
func (_gefba ST_Border) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cebac := _d.Attr{}
	_cebac.Name = name
	switch _gefba {
	case ST_BorderUnset:
		_cebac.Value = ""
	case ST_BorderNil:
		_cebac.Value = "nil"
	case ST_BorderNone:
		_cebac.Value = "none"
	case ST_BorderSingle:
		_cebac.Value = "single"
	case ST_BorderThick:
		_cebac.Value = "thick"
	case ST_BorderDouble:
		_cebac.Value = "double"
	case ST_BorderDotted:
		_cebac.Value = "dotted"
	case ST_BorderDashed:
		_cebac.Value = "dashed"
	case ST_BorderDotDash:
		_cebac.Value = "dotDash"
	case ST_BorderDotDotDash:
		_cebac.Value = "dotDotDash"
	case ST_BorderTriple:
		_cebac.Value = "triple"
	case ST_BorderThinThickSmallGap:
		_cebac.Value = "thinThickSmallGap"
	case ST_BorderThickThinSmallGap:
		_cebac.Value = "thickThinSmallGap"
	case ST_BorderThinThickThinSmallGap:
		_cebac.Value = "thinThickThinSmallGap"
	case ST_BorderThinThickMediumGap:
		_cebac.Value = "thinThickMediumGap"
	case ST_BorderThickThinMediumGap:
		_cebac.Value = "thickThinMediumGap"
	case ST_BorderThinThickThinMediumGap:
		_cebac.Value = "thinThickThinMediumGap"
	case ST_BorderThinThickLargeGap:
		_cebac.Value = "thinThickLargeGap"
	case ST_BorderThickThinLargeGap:
		_cebac.Value = "thickThinLargeGap"
	case ST_BorderThinThickThinLargeGap:
		_cebac.Value = "thinThickThinLargeGap"
	case ST_BorderWave:
		_cebac.Value = "wave"
	case ST_BorderDoubleWave:
		_cebac.Value = "doubleWave"
	case ST_BorderDashSmallGap:
		_cebac.Value = "dashSmallGap"
	case ST_BorderDashDotStroked:
		_cebac.Value = "dashDotStroked"
	case ST_BorderThreeDEmboss:
		_cebac.Value = "threeDEmboss"
	case ST_BorderThreeDEngrave:
		_cebac.Value = "threeDEngrave"
	case ST_BorderOutset:
		_cebac.Value = "outset"
	case ST_BorderInset:
		_cebac.Value = "inset"
	case ST_BorderApples:
		_cebac.Value = "apples"
	case ST_BorderArchedScallops:
		_cebac.Value = "archedScallops"
	case ST_BorderBabyPacifier:
		_cebac.Value = "babyPacifier"
	case ST_BorderBabyRattle:
		_cebac.Value = "babyRattle"
	case ST_BorderBalloons3Colors:
		_cebac.Value = "balloons3Colors"
	case ST_BorderBalloonsHotAir:
		_cebac.Value = "balloonsHotAir"
	case ST_BorderBasicBlackDashes:
		_cebac.Value = "basicBlackDashes"
	case ST_BorderBasicBlackDots:
		_cebac.Value = "basicBlackDots"
	case ST_BorderBasicBlackSquares:
		_cebac.Value = "basicBlackSquares"
	case ST_BorderBasicThinLines:
		_cebac.Value = "basicThinLines"
	case ST_BorderBasicWhiteDashes:
		_cebac.Value = "basicWhiteDashes"
	case ST_BorderBasicWhiteDots:
		_cebac.Value = "basicWhiteDots"
	case ST_BorderBasicWhiteSquares:
		_cebac.Value = "basicWhiteSquares"
	case ST_BorderBasicWideInline:
		_cebac.Value = "basicWideInline"
	case ST_BorderBasicWideMidline:
		_cebac.Value = "basicWideMidline"
	case ST_BorderBasicWideOutline:
		_cebac.Value = "basicWideOutline"
	case ST_BorderBats:
		_cebac.Value = "bats"
	case ST_BorderBirds:
		_cebac.Value = "birds"
	case ST_BorderBirdsFlight:
		_cebac.Value = "birdsFlight"
	case ST_BorderCabins:
		_cebac.Value = "cabins"
	case ST_BorderCakeSlice:
		_cebac.Value = "cakeSlice"
	case ST_BorderCandyCorn:
		_cebac.Value = "candyCorn"
	case ST_BorderCelticKnotwork:
		_cebac.Value = "celticKnotwork"
	case ST_BorderCertificateBanner:
		_cebac.Value = "certificateBanner"
	case ST_BorderChainLink:
		_cebac.Value = "chainLink"
	case ST_BorderChampagneBottle:
		_cebac.Value = "champagneBottle"
	case ST_BorderCheckedBarBlack:
		_cebac.Value = "checkedBarBlack"
	case ST_BorderCheckedBarColor:
		_cebac.Value = "checkedBarColor"
	case ST_BorderCheckered:
		_cebac.Value = "checkered"
	case ST_BorderChristmasTree:
		_cebac.Value = "christmasTree"
	case ST_BorderCirclesLines:
		_cebac.Value = "circlesLines"
	case ST_BorderCirclesRectangles:
		_cebac.Value = "circlesRectangles"
	case ST_BorderClassicalWave:
		_cebac.Value = "classicalWave"
	case ST_BorderClocks:
		_cebac.Value = "clocks"
	case ST_BorderCompass:
		_cebac.Value = "compass"
	case ST_BorderConfetti:
		_cebac.Value = "confetti"
	case ST_BorderConfettiGrays:
		_cebac.Value = "confettiGrays"
	case ST_BorderConfettiOutline:
		_cebac.Value = "confettiOutline"
	case ST_BorderConfettiStreamers:
		_cebac.Value = "confettiStreamers"
	case ST_BorderConfettiWhite:
		_cebac.Value = "confettiWhite"
	case ST_BorderCornerTriangles:
		_cebac.Value = "cornerTriangles"
	case ST_BorderCouponCutoutDashes:
		_cebac.Value = "couponCutoutDashes"
	case ST_BorderCouponCutoutDots:
		_cebac.Value = "couponCutoutDots"
	case ST_BorderCrazyMaze:
		_cebac.Value = "crazyMaze"
	case ST_BorderCreaturesButterfly:
		_cebac.Value = "creaturesButterfly"
	case ST_BorderCreaturesFish:
		_cebac.Value = "creaturesFish"
	case ST_BorderCreaturesInsects:
		_cebac.Value = "creaturesInsects"
	case ST_BorderCreaturesLadyBug:
		_cebac.Value = "creaturesLadyBug"
	case ST_BorderCrossStitch:
		_cebac.Value = "crossStitch"
	case ST_BorderCup:
		_cebac.Value = "cup"
	case ST_BorderDecoArch:
		_cebac.Value = "decoArch"
	case ST_BorderDecoArchColor:
		_cebac.Value = "decoArchColor"
	case ST_BorderDecoBlocks:
		_cebac.Value = "decoBlocks"
	case ST_BorderDiamondsGray:
		_cebac.Value = "diamondsGray"
	case ST_BorderDoubleD:
		_cebac.Value = "doubleD"
	case ST_BorderDoubleDiamonds:
		_cebac.Value = "doubleDiamonds"
	case ST_BorderEarth1:
		_cebac.Value = "earth1"
	case ST_BorderEarth2:
		_cebac.Value = "earth2"
	case ST_BorderEarth3:
		_cebac.Value = "earth3"
	case ST_BorderEclipsingSquares1:
		_cebac.Value = "eclipsingSquares1"
	case ST_BorderEclipsingSquares2:
		_cebac.Value = "eclipsingSquares2"
	case ST_BorderEggsBlack:
		_cebac.Value = "eggsBlack"
	case ST_BorderFans:
		_cebac.Value = "fans"
	case ST_BorderFilm:
		_cebac.Value = "film"
	case ST_BorderFirecrackers:
		_cebac.Value = "firecrackers"
	case ST_BorderFlowersBlockPrint:
		_cebac.Value = "flowersBlockPrint"
	case ST_BorderFlowersDaisies:
		_cebac.Value = "flowersDaisies"
	case ST_BorderFlowersModern1:
		_cebac.Value = "flowersModern1"
	case ST_BorderFlowersModern2:
		_cebac.Value = "flowersModern2"
	case ST_BorderFlowersPansy:
		_cebac.Value = "flowersPansy"
	case ST_BorderFlowersRedRose:
		_cebac.Value = "flowersRedRose"
	case ST_BorderFlowersRoses:
		_cebac.Value = "flowersRoses"
	case ST_BorderFlowersTeacup:
		_cebac.Value = "flowersTeacup"
	case ST_BorderFlowersTiny:
		_cebac.Value = "flowersTiny"
	case ST_BorderGems:
		_cebac.Value = "gems"
	case ST_BorderGingerbreadMan:
		_cebac.Value = "gingerbreadMan"
	case ST_BorderGradient:
		_cebac.Value = "gradient"
	case ST_BorderHandmade1:
		_cebac.Value = "handmade1"
	case ST_BorderHandmade2:
		_cebac.Value = "handmade2"
	case ST_BorderHeartBalloon:
		_cebac.Value = "heartBalloon"
	case ST_BorderHeartGray:
		_cebac.Value = "heartGray"
	case ST_BorderHearts:
		_cebac.Value = "hearts"
	case ST_BorderHeebieJeebies:
		_cebac.Value = "heebieJeebies"
	case ST_BorderHolly:
		_cebac.Value = "holly"
	case ST_BorderHouseFunky:
		_cebac.Value = "houseFunky"
	case ST_BorderHypnotic:
		_cebac.Value = "hypnotic"
	case ST_BorderIceCreamCones:
		_cebac.Value = "iceCreamCones"
	case ST_BorderLightBulb:
		_cebac.Value = "lightBulb"
	case ST_BorderLightning1:
		_cebac.Value = "lightning1"
	case ST_BorderLightning2:
		_cebac.Value = "lightning2"
	case ST_BorderMapPins:
		_cebac.Value = "mapPins"
	case ST_BorderMapleLeaf:
		_cebac.Value = "mapleLeaf"
	case ST_BorderMapleMuffins:
		_cebac.Value = "mapleMuffins"
	case ST_BorderMarquee:
		_cebac.Value = "marquee"
	case ST_BorderMarqueeToothed:
		_cebac.Value = "marqueeToothed"
	case ST_BorderMoons:
		_cebac.Value = "moons"
	case ST_BorderMosaic:
		_cebac.Value = "mosaic"
	case ST_BorderMusicNotes:
		_cebac.Value = "musicNotes"
	case ST_BorderNorthwest:
		_cebac.Value = "northwest"
	case ST_BorderOvals:
		_cebac.Value = "ovals"
	case ST_BorderPackages:
		_cebac.Value = "packages"
	case ST_BorderPalmsBlack:
		_cebac.Value = "palmsBlack"
	case ST_BorderPalmsColor:
		_cebac.Value = "palmsColor"
	case ST_BorderPaperClips:
		_cebac.Value = "paperClips"
	case ST_BorderPapyrus:
		_cebac.Value = "papyrus"
	case ST_BorderPartyFavor:
		_cebac.Value = "partyFavor"
	case ST_BorderPartyGlass:
		_cebac.Value = "partyGlass"
	case ST_BorderPencils:
		_cebac.Value = "pencils"
	case ST_BorderPeople:
		_cebac.Value = "people"
	case ST_BorderPeopleWaving:
		_cebac.Value = "peopleWaving"
	case ST_BorderPeopleHats:
		_cebac.Value = "peopleHats"
	case ST_BorderPoinsettias:
		_cebac.Value = "poinsettias"
	case ST_BorderPostageStamp:
		_cebac.Value = "postageStamp"
	case ST_BorderPumpkin1:
		_cebac.Value = "pumpkin1"
	case ST_BorderPushPinNote2:
		_cebac.Value = "pushPinNote2"
	case ST_BorderPushPinNote1:
		_cebac.Value = "pushPinNote1"
	case ST_BorderPyramids:
		_cebac.Value = "pyramids"
	case ST_BorderPyramidsAbove:
		_cebac.Value = "pyramidsAbove"
	case ST_BorderQuadrants:
		_cebac.Value = "quadrants"
	case ST_BorderRings:
		_cebac.Value = "rings"
	case ST_BorderSafari:
		_cebac.Value = "safari"
	case ST_BorderSawtooth:
		_cebac.Value = "sawtooth"
	case ST_BorderSawtoothGray:
		_cebac.Value = "sawtoothGray"
	case ST_BorderScaredCat:
		_cebac.Value = "scaredCat"
	case ST_BorderSeattle:
		_cebac.Value = "seattle"
	case ST_BorderShadowedSquares:
		_cebac.Value = "shadowedSquares"
	case ST_BorderSharksTeeth:
		_cebac.Value = "sharksTeeth"
	case ST_BorderShorebirdTracks:
		_cebac.Value = "shorebirdTracks"
	case ST_BorderSkyrocket:
		_cebac.Value = "skyrocket"
	case ST_BorderSnowflakeFancy:
		_cebac.Value = "snowflakeFancy"
	case ST_BorderSnowflakes:
		_cebac.Value = "snowflakes"
	case ST_BorderSombrero:
		_cebac.Value = "sombrero"
	case ST_BorderSouthwest:
		_cebac.Value = "southwest"
	case ST_BorderStars:
		_cebac.Value = "stars"
	case ST_BorderStarsTop:
		_cebac.Value = "starsTop"
	case ST_BorderStars3d:
		_cebac.Value = "stars3d"
	case ST_BorderStarsBlack:
		_cebac.Value = "starsBlack"
	case ST_BorderStarsShadowed:
		_cebac.Value = "starsShadowed"
	case ST_BorderSun:
		_cebac.Value = "sun"
	case ST_BorderSwirligig:
		_cebac.Value = "swirligig"
	case ST_BorderTornPaper:
		_cebac.Value = "tornPaper"
	case ST_BorderTornPaperBlack:
		_cebac.Value = "tornPaperBlack"
	case ST_BorderTrees:
		_cebac.Value = "trees"
	case ST_BorderTriangleParty:
		_cebac.Value = "triangleParty"
	case ST_BorderTriangles:
		_cebac.Value = "triangles"
	case ST_BorderTriangle1:
		_cebac.Value = "triangle1"
	case ST_BorderTriangle2:
		_cebac.Value = "triangle2"
	case ST_BorderTriangleCircle1:
		_cebac.Value = "triangleCircle1"
	case ST_BorderTriangleCircle2:
		_cebac.Value = "triangleCircle2"
	case ST_BorderShapes1:
		_cebac.Value = "shapes1"
	case ST_BorderShapes2:
		_cebac.Value = "shapes2"
	case ST_BorderTwistedLines1:
		_cebac.Value = "twistedLines1"
	case ST_BorderTwistedLines2:
		_cebac.Value = "twistedLines2"
	case ST_BorderVine:
		_cebac.Value = "vine"
	case ST_BorderWaveline:
		_cebac.Value = "waveline"
	case ST_BorderWeavingAngles:
		_cebac.Value = "weavingAngles"
	case ST_BorderWeavingBraid:
		_cebac.Value = "weavingBraid"
	case ST_BorderWeavingRibbon:
		_cebac.Value = "weavingRibbon"
	case ST_BorderWeavingStrips:
		_cebac.Value = "weavingStrips"
	case ST_BorderWhiteFlowers:
		_cebac.Value = "whiteFlowers"
	case ST_BorderWoodwork:
		_cebac.Value = "woodwork"
	case ST_BorderXIllusions:
		_cebac.Value = "xIllusions"
	case ST_BorderZanyTriangles:
		_cebac.Value = "zanyTriangles"
	case ST_BorderZigZag:
		_cebac.Value = "zigZag"
	case ST_BorderZigZagStitch:
		_cebac.Value = "zigZagStitch"
	case ST_BorderCustom:
		_cebac.Value = "custom"
	}
	return _cebac, nil
}

const (
	ST_MergeUnset    ST_Merge = 0
	ST_MergeContinue ST_Merge = 1
	ST_MergeRestart  ST_Merge = 2
)

// ValidateWithPath validates the CT_RPrOriginal and its children, prefixing error messages with path
func (_eaedg *CT_RPrOriginal) ValidateWithPath(path string) error {
	if _eaedg.RStyle != nil {
		if _ecadgg := _eaedg.RStyle.ValidateWithPath(path + "\u002fRStyle"); _ecadgg != nil {
			return _ecadgg
		}
	}
	if _eaedg.RFonts != nil {
		if _efeca := _eaedg.RFonts.ValidateWithPath(path + "\u002fRFonts"); _efeca != nil {
			return _efeca
		}
	}
	if _eaedg.B != nil {
		if _ecbec := _eaedg.B.ValidateWithPath(path + "\u002fB"); _ecbec != nil {
			return _ecbec
		}
	}
	if _eaedg.BCs != nil {
		if _ffcgea := _eaedg.BCs.ValidateWithPath(path + "\u002fBCs"); _ffcgea != nil {
			return _ffcgea
		}
	}
	if _eaedg.I != nil {
		if _ebea := _eaedg.I.ValidateWithPath(path + "\u002fI"); _ebea != nil {
			return _ebea
		}
	}
	if _eaedg.ICs != nil {
		if _febbb := _eaedg.ICs.ValidateWithPath(path + "\u002fICs"); _febbb != nil {
			return _febbb
		}
	}
	if _eaedg.Caps != nil {
		if _edddb := _eaedg.Caps.ValidateWithPath(path + "\u002fCaps"); _edddb != nil {
			return _edddb
		}
	}
	if _eaedg.SmallCaps != nil {
		if _bggec := _eaedg.SmallCaps.ValidateWithPath(path + "\u002fSmallCaps"); _bggec != nil {
			return _bggec
		}
	}
	if _eaedg.Strike != nil {
		if _dedbef := _eaedg.Strike.ValidateWithPath(path + "\u002fStrike"); _dedbef != nil {
			return _dedbef
		}
	}
	if _eaedg.Dstrike != nil {
		if _fbebc := _eaedg.Dstrike.ValidateWithPath(path + "\u002fDstrike"); _fbebc != nil {
			return _fbebc
		}
	}
	if _eaedg.Outline != nil {
		if _aegdc := _eaedg.Outline.ValidateWithPath(path + "\u002fOutline"); _aegdc != nil {
			return _aegdc
		}
	}
	if _eaedg.Shadow != nil {
		if _ffafda := _eaedg.Shadow.ValidateWithPath(path + "\u002fShadow"); _ffafda != nil {
			return _ffafda
		}
	}
	if _eaedg.Emboss != nil {
		if _fdeb := _eaedg.Emboss.ValidateWithPath(path + "\u002fEmboss"); _fdeb != nil {
			return _fdeb
		}
	}
	if _eaedg.Imprint != nil {
		if _beafd := _eaedg.Imprint.ValidateWithPath(path + "\u002fImprint"); _beafd != nil {
			return _beafd
		}
	}
	if _eaedg.NoProof != nil {
		if _faac := _eaedg.NoProof.ValidateWithPath(path + "\u002fNoProof"); _faac != nil {
			return _faac
		}
	}
	if _eaedg.SnapToGrid != nil {
		if _cgggd := _eaedg.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _cgggd != nil {
			return _cgggd
		}
	}
	if _eaedg.Vanish != nil {
		if _egcacg := _eaedg.Vanish.ValidateWithPath(path + "\u002fVanish"); _egcacg != nil {
			return _egcacg
		}
	}
	if _eaedg.WebHidden != nil {
		if _cedeg := _eaedg.WebHidden.ValidateWithPath(path + "\u002fWebHidden"); _cedeg != nil {
			return _cedeg
		}
	}
	if _eaedg.Color != nil {
		if _eegbg := _eaedg.Color.ValidateWithPath(path + "\u002fColor"); _eegbg != nil {
			return _eegbg
		}
	}
	if _eaedg.Spacing != nil {
		if _ddcbde := _eaedg.Spacing.ValidateWithPath(path + "\u002fSpacing"); _ddcbde != nil {
			return _ddcbde
		}
	}
	if _eaedg.W != nil {
		if _bbdf := _eaedg.W.ValidateWithPath(path + "\u002fW"); _bbdf != nil {
			return _bbdf
		}
	}
	if _eaedg.Kern != nil {
		if _eaaff := _eaedg.Kern.ValidateWithPath(path + "\u002fKern"); _eaaff != nil {
			return _eaaff
		}
	}
	if _eaedg.Position != nil {
		if _bgaae := _eaedg.Position.ValidateWithPath(path + "\u002fPosition"); _bgaae != nil {
			return _bgaae
		}
	}
	if _eaedg.Sz != nil {
		if _ceagg := _eaedg.Sz.ValidateWithPath(path + "\u002fSz"); _ceagg != nil {
			return _ceagg
		}
	}
	if _eaedg.SzCs != nil {
		if _dcagdb := _eaedg.SzCs.ValidateWithPath(path + "\u002fSzCs"); _dcagdb != nil {
			return _dcagdb
		}
	}
	if _eaedg.Highlight != nil {
		if _gagca := _eaedg.Highlight.ValidateWithPath(path + "\u002fHighlight"); _gagca != nil {
			return _gagca
		}
	}
	if _eaedg.U != nil {
		if _cfce := _eaedg.U.ValidateWithPath(path + "\u002fU"); _cfce != nil {
			return _cfce
		}
	}
	if _eaedg.Effect != nil {
		if _gcfc := _eaedg.Effect.ValidateWithPath(path + "\u002fEffect"); _gcfc != nil {
			return _gcfc
		}
	}
	if _eaedg.Bdr != nil {
		if _dccf := _eaedg.Bdr.ValidateWithPath(path + "\u002fBdr"); _dccf != nil {
			return _dccf
		}
	}
	if _eaedg.Shd != nil {
		if _ggda := _eaedg.Shd.ValidateWithPath(path + "\u002fShd"); _ggda != nil {
			return _ggda
		}
	}
	if _eaedg.FitText != nil {
		if _dabbed := _eaedg.FitText.ValidateWithPath(path + "\u002fFitText"); _dabbed != nil {
			return _dabbed
		}
	}
	if _eaedg.VertAlign != nil {
		if _ccfbbb := _eaedg.VertAlign.ValidateWithPath(path + "\u002fVertAlign"); _ccfbbb != nil {
			return _ccfbbb
		}
	}
	if _eaedg.Rtl != nil {
		if _gbgdbd := _eaedg.Rtl.ValidateWithPath(path + "\u002fRtl"); _gbgdbd != nil {
			return _gbgdbd
		}
	}
	if _eaedg.Cs != nil {
		if _gcadf := _eaedg.Cs.ValidateWithPath(path + "\u002fCs"); _gcadf != nil {
			return _gcadf
		}
	}
	if _eaedg.Em != nil {
		if _cfaae := _eaedg.Em.ValidateWithPath(path + "\u002fEm"); _cfaae != nil {
			return _cfaae
		}
	}
	if _eaedg.Lang != nil {
		if _ceefd := _eaedg.Lang.ValidateWithPath(path + "\u002fLang"); _ceefd != nil {
			return _ceefd
		}
	}
	if _eaedg.EastAsianLayout != nil {
		if _gaggc := _eaedg.EastAsianLayout.ValidateWithPath(path + "\u002fEastAsianLayout"); _gaggc != nil {
			return _gaggc
		}
	}
	if _eaedg.SpecVanish != nil {
		if _aadfb := _eaedg.SpecVanish.ValidateWithPath(path + "/SpecVanish"); _aadfb != nil {
			return _aadfb
		}
	}
	if _eaedg.OMath != nil {
		if _dcfg := _eaedg.OMath.ValidateWithPath(path + "\u002fOMath"); _dcfg != nil {
			return _dcfg
		}
	}
	return nil
}
func (_fgedec ST_HighlightColor) String() string {
	switch _fgedec {
	case 0:
		return ""
	case 1:
		return "black"
	case 2:
		return "blue"
	case 3:
		return "cyan"
	case 4:
		return "green"
	case 5:
		return "magenta"
	case 6:
		return "red"
	case 7:
		return "yellow"
	case 8:
		return "white"
	case 9:
		return "darkBlue"
	case 10:
		return "darkCyan"
	case 11:
		return "darkGreen"
	case 12:
		return "darkMagenta"
	case 13:
		return "darkRed"
	case 14:
		return "darkYellow"
	case 15:
		return "darkGray"
	case 16:
		return "lightGray"
	case 17:
		return "none"
	}
	return ""
}
func (_fddbe ST_WmlColorSchemeIndex) ValidateWithPath(path string) error {
	switch _fddbe {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fddbe))
	}
	return nil
}

// Validate validates the CT_SdtText and its children
func (_gfebd *CT_SdtText) Validate() error { return _gfebd.ValidateWithPath("CT_SdtText") }

type CT_TblWidth struct {

	// Table Width Value
	WAttr *ST_MeasurementOrPercent

	// Table Width Type
	TypeAttr ST_TblWidth
}

func (_bedfd *CT_Object) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bedfd.DxaOrigAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:dxaOrig"}, Value: _b.Sprintf("\u0025v", *_bedfd.DxaOrigAttr)})
	}
	if _bedfd.DyaOrigAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:dyaOrig"}, Value: _b.Sprintf("\u0025v", *_bedfd.DyaOrigAttr)})
	}
	e.EncodeToken(start)
	if _bedfd.Any != nil {
		for _, _bgaf := range _bedfd.Any {
			_bgaf.MarshalXML(e, _d.StartElement{})
		}
	}
	if _bedfd.Drawing != nil {
		_gbbac := _d.StartElement{Name: _d.Name{Local: "w:drawing"}}
		e.EncodeElement(_bedfd.Drawing, _gbbac)
	}
	if _bedfd.Choice != nil {
		_bedfd.Choice.MarshalXML(e, _d.StartElement{})
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type Ftr struct{ CT_HdrFtr }

// ValidateWithPath validates the CT_WriteProtection and its children, prefixing error messages with path
func (_adbaag *CT_WriteProtection) ValidateWithPath(path string) error {
	if _adbaag.RecommendedAttr != nil {
		if _fcgef := _adbaag.RecommendedAttr.ValidateWithPath(path + "\u002fRecommendedAttr"); _fcgef != nil {
			return _fcgef
		}
	}
	if _fabcg := _adbaag.CryptProviderTypeAttr.ValidateWithPath(path + "\u002fCryptProviderTypeAttr"); _fabcg != nil {
		return _fabcg
	}
	if _ddgcbg := _adbaag.CryptAlgorithmClassAttr.ValidateWithPath(path + "\u002fCryptAlgorithmClassAttr"); _ddgcbg != nil {
		return _ddgcbg
	}
	if _degee := _adbaag.CryptAlgorithmTypeAttr.ValidateWithPath(path + "\u002fCryptAlgorithmTypeAttr"); _degee != nil {
		return _degee
	}
	return nil
}

// ValidateWithPath validates the CT_EastAsianLayout and its children, prefixing error messages with path
func (_bdce *CT_EastAsianLayout) ValidateWithPath(path string) error {
	if _bdce.CombineAttr != nil {
		if _daef := _bdce.CombineAttr.ValidateWithPath(path + "\u002fCombineAttr"); _daef != nil {
			return _daef
		}
	}
	if _fbgga := _bdce.CombineBracketsAttr.ValidateWithPath(path + "/CombineBracketsAttr"); _fbgga != nil {
		return _fbgga
	}
	if _bdce.VertAttr != nil {
		if _afcc := _bdce.VertAttr.ValidateWithPath(path + "\u002fVertAttr"); _afcc != nil {
			return _afcc
		}
	}
	if _bdce.VertCompressAttr != nil {
		if _efedc := _bdce.VertCompressAttr.ValidateWithPath(path + "\u002fVertCompressAttr"); _efedc != nil {
			return _efedc
		}
	}
	return nil
}

type ST_View byte

func (_gaee *CT_Br) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ccfc := range start.Attr {
		if _ccfc.Name.Local == "type" {
			_gaee.TypeAttr.UnmarshalXMLAttr(_ccfc)
			continue
		}
		if _ccfc.Name.Local == "clear" {
			_gaee.ClearAttr.UnmarshalXMLAttr(_ccfc)
			continue
		}
	}
	for {
		_faf, _bfgbe := d.Token()
		if _bfgbe != nil {
			return _b.Errorf("parsing\u0020CT_Br:\u0020\u0025s", _bfgbe)
		}
		if _ggeb, _bgac := _faf.(_d.EndElement); _bgac && _ggeb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_edgeedf ST_TextboxTightWrap) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_edgeedf.String(), start)
}
func NewCT_Tbl() *CT_Tbl {
	_cbfab := &CT_Tbl{}
	_cbfab.TblPr = NewCT_TblPr()
	_cbfab.TblGrid = NewCT_TblGrid()
	return _cbfab
}

type ST_StyleType byte

// ValidateWithPath validates the CT_SignedTwipsMeasure and its children, prefixing error messages with path
func (_dgfbg *CT_SignedTwipsMeasure) ValidateWithPath(path string) error {
	if _acdab := _dgfbg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _acdab != nil {
		return _acdab
	}
	return nil
}

type CT_Body struct {
	EG_BlockLevelElts []*EG_BlockLevelElts

	// Document Final Section Properties
	SectPr *CT_SectPr
}

// ValidateWithPath validates the CT_FramesetChoice and its children, prefixing error messages with path
func (_bedec *CT_FramesetChoice) ValidateWithPath(path string) error {
	for _acdad, _abfcec := range _bedec.Frameset {
		if _fgfca := _abfcec.ValidateWithPath(_b.Sprintf("\u0025s\u002fFrameset\u005b\u0025d\u005d", path, _acdad)); _fgfca != nil {
			return _fgfca
		}
	}
	for _fdage, _aedeg := range _bedec.Frame {
		if _fdafg := _aedeg.ValidateWithPath(_b.Sprintf("\u0025s\u002fFrame\u005b\u0025d\u005d", path, _fdage)); _fdafg != nil {
			return _fdafg
		}
	}
	return nil
}
func (_bbgebe ST_PageOrientation) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_edfebg := _d.Attr{}
	_edfebg.Name = name
	switch _bbgebe {
	case ST_PageOrientationUnset:
		_edfebg.Value = ""
	case ST_PageOrientationPortrait:
		_edfebg.Value = "portrait"
	case ST_PageOrientationLandscape:
		_edfebg.Value = "landscape"
	}
	return _edfebg, nil
}

// ValidateWithPath validates the CT_FtnEdn and its children, prefixing error messages with path
func (_baegf *CT_FtnEdn) ValidateWithPath(path string) error {
	if _efgc := _baegf.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _efgc != nil {
		return _efgc
	}
	for _gcecc, _ddceg := range _baegf.EG_BlockLevelElts {
		if _bcbde := _ddceg.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_BlockLevelElts\u005b\u0025d\u005d", path, _gcecc)); _bcbde != nil {
			return _bcbde
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CustomXmlRow and its children, prefixing error messages with path
func (_edec *CT_CustomXmlRow) ValidateWithPath(path string) error {
	if _edec.CustomXmlPr != nil {
		if _bgecea := _edec.CustomXmlPr.ValidateWithPath(path + "\u002fCustomXmlPr"); _bgecea != nil {
			return _bgecea
		}
	}
	for _gbeae, _eedbf := range _edec.EG_ContentRowContent {
		if _aaaa := _eedbf.ValidateWithPath(_b.Sprintf("%s\u002fEG_ContentRowContent[\u0025d\u005d", path, _gbeae)); _aaaa != nil {
			return _aaaa
		}
	}
	return nil
}
func (_fbbefaf *CT_TblPrExBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_edgda:
	for {
		_dfggg, _aebeec := d.Token()
		if _aebeec != nil {
			return _aebeec
		}
		switch _gefgcg := _dfggg.(type) {
		case _d.StartElement:
			switch _gefgcg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblW"}:
				_fbbefaf.TblW = NewCT_TblWidth()
				if _dbgdd := d.DecodeElement(_fbbefaf.TblW, &_gefgcg); _dbgdd != nil {
					return _dbgdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_fbbefaf.Jc = NewCT_JcTable()
				if _gbfbf := d.DecodeElement(_fbbefaf.Jc, &_gefgcg); _gbfbf != nil {
					return _gbfbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellSpacing"}:
				_fbbefaf.TblCellSpacing = NewCT_TblWidth()
				if _afacde := d.DecodeElement(_fbbefaf.TblCellSpacing, &_gefgcg); _afacde != nil {
					return _afacde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblInd"}:
				_fbbefaf.TblInd = NewCT_TblWidth()
				if _gdgdf := d.DecodeElement(_fbbefaf.TblInd, &_gefgcg); _gdgdf != nil {
					return _gdgdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblBorders"}:
				_fbbefaf.TblBorders = NewCT_TblBorders()
				if _bfbaf := d.DecodeElement(_fbbefaf.TblBorders, &_gefgcg); _bfbaf != nil {
					return _bfbaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_fbbefaf.Shd = NewCT_Shd()
				if _aadeb := d.DecodeElement(_fbbefaf.Shd, &_gefgcg); _aadeb != nil {
					return _aadeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLayout"}:
				_fbbefaf.TblLayout = NewCT_TblLayoutType()
				if _dfcgef := d.DecodeElement(_fbbefaf.TblLayout, &_gefgcg); _dfcgef != nil {
					return _dfcgef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellMar"}:
				_fbbefaf.TblCellMar = NewCT_TblCellMar()
				if _gffcb := d.DecodeElement(_fbbefaf.TblCellMar, &_gefgcg); _gffcb != nil {
					return _gffcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLook"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLook"}:
				_fbbefaf.TblLook = NewCT_TblLook()
				if _beag := d.DecodeElement(_fbbefaf.TblLook, &_gefgcg); _beag != nil {
					return _beag
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TblPrExBase\u0020\u0025v", _gefgcg.Name)
				if _debcde := d.Skip(); _debcde != nil {
					return _debcde
				}
			}
		case _d.EndElement:
			break _edgda
		case _d.CharData:
		}
	}
	return nil
}
func (_fdfadg ST_TabTlc) ValidateWithPath(path string) error {
	switch _fdfadg {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fdfadg))
	}
	return nil
}
func (_dagbbf ST_ObjectDrawAspect) Validate() error { return _dagbbf.ValidateWithPath("") }
func (_edeea ST_PageBorderOffset) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_edeea.String(), start)
}
func (_ecbaa ST_FtnEdn) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fagaee := _d.Attr{}
	_fagaee.Name = name
	switch _ecbaa {
	case ST_FtnEdnUnset:
		_fagaee.Value = ""
	case ST_FtnEdnNormal:
		_fagaee.Value = "normal"
	case ST_FtnEdnSeparator:
		_fagaee.Value = "separator"
	case ST_FtnEdnContinuationSeparator:
		_fagaee.Value = "continuationSeparator"
	case ST_FtnEdnContinuationNotice:
		_fagaee.Value = "continuationNotice"
	}
	return _fagaee, nil
}

type CT_PermStart struct {
	EdGrpAttr    ST_EdGrp
	EdAttr       *string
	ColFirstAttr *int64
	ColLastAttr  *int64

	// Annotation ID
	IdAttr string

	// Annotation Displaced By Custom XML Markup
	DisplacedByCustomXmlAttr ST_DisplacedByCustomXml
}

func (_fdfgg *CT_OnOff) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ecgba := range start.Attr {
		if _ecgba.Name.Local == "val" {
			_gedbb, _deef := ParseUnionST_OnOff(_ecgba.Value)
			if _deef != nil {
				return _deef
			}
			_fdfgg.ValAttr = &_gedbb
			continue
		}
	}
	for {
		_dafd, _gbdag := d.Token()
		if _gbdag != nil {
			return _b.Errorf("parsing\u0020CT_OnOff: \u0025s", _gbdag)
		}
		if _dcgea, _gdfbb := _dafd.(_d.EndElement); _gdfbb && _dcgea.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gaaef ST_Theme) ValidateWithPath(path string) error {
	switch _gaaef {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_gaaef))
	}
	return nil
}
func (_gbebe ST_ChapterSep) String() string {
	switch _gbebe {
	case 0:
		return ""
	case 1:
		return "hyphen"
	case 2:
		return "period"
	case 3:
		return "colon"
	case 4:
		return "emDash"
	case 5:
		return "enDash"
	}
	return ""
}

// Validate validates the EG_CellMarkupElements and its children
func (_fgddg *EG_CellMarkupElements) Validate() error {
	return _fgddg.ValidateWithPath("EG_CellMarkupElements")
}

// Validate validates the CT_NumFmt and its children
func (_eacbb *CT_NumFmt) Validate() error { return _eacbb.ValidateWithPath("CT_NumFmt") }
func (_dcbcb *EG_ContentRowContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fefcf:
	for {
		_eggeegg, _fegfbd := d.Token()
		if _fegfbd != nil {
			return _fegfbd
		}
		switch _afdfc := _eggeegg.(type) {
		case _d.StartElement:
			switch _afdfc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tr"}:
				_eacab := NewCT_Row()
				if _egegf := d.DecodeElement(_eacab, &_afdfc); _egegf != nil {
					return _egegf
				}
				_dcbcb.Tr = append(_dcbcb.Tr, _eacab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_dcbcb.CustomXml = NewCT_CustomXmlRow()
				if _cbaab := d.DecodeElement(_dcbcb.CustomXml, &_afdfc); _cbaab != nil {
					return _cbaab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_dcbcb.Sdt = NewCT_SdtRow()
				if _fdedg := d.DecodeElement(_dcbcb.Sdt, &_afdfc); _fdedg != nil {
					return _fdedg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_aefad := NewEG_RunLevelElts()
				_aefad.ProofErr = NewCT_ProofErr()
				if _cdffef := d.DecodeElement(_aefad.ProofErr, &_afdfc); _cdffef != nil {
					return _cdffef
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _aefad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ggfda := NewEG_RunLevelElts()
				_ggfda.PermStart = NewCT_PermStart()
				if _gdcgca := d.DecodeElement(_ggfda.PermStart, &_afdfc); _gdcgca != nil {
					return _gdcgca
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _ggfda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_cedecc := NewEG_RunLevelElts()
				_cedecc.PermEnd = NewCT_Perm()
				if _dgccd := d.DecodeElement(_cedecc.PermEnd, &_afdfc); _dgccd != nil {
					return _dgccd
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _cedecc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_efcba := NewEG_RunLevelElts()
				_efcba.Ins = NewCT_RunTrackChange()
				if _fbdbd := d.DecodeElement(_efcba.Ins, &_afdfc); _fbdbd != nil {
					return _fbdbd
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _efcba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ggbgeb := NewEG_RunLevelElts()
				_ggbgeb.Del = NewCT_RunTrackChange()
				if _adbbbf := d.DecodeElement(_ggbgeb.Del, &_afdfc); _adbbbf != nil {
					return _adbbbf
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _ggbgeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_fcfabd := NewEG_RunLevelElts()
				_fcfabd.MoveFrom = NewCT_RunTrackChange()
				if _gdebd := d.DecodeElement(_fcfabd.MoveFrom, &_afdfc); _gdebd != nil {
					return _gdebd
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _fcfabd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_ccgcg := NewEG_RunLevelElts()
				_ccgcg.MoveTo = NewCT_RunTrackChange()
				if _acdfff := d.DecodeElement(_ccgcg.MoveTo, &_afdfc); _acdfff != nil {
					return _acdfff
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _ccgcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_fedaa := NewEG_RunLevelElts()
				_cdgaa := NewEG_RangeMarkupElements()
				_cdgaa.BookmarkStart = NewCT_Bookmark()
				if _gbdbb := d.DecodeElement(_cdgaa.BookmarkStart, &_afdfc); _gbdbb != nil {
					return _gbdbb
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _fedaa)
				_fedaa.EG_RangeMarkupElements = append(_fedaa.EG_RangeMarkupElements, _cdgaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_defab := NewEG_RunLevelElts()
				_cfegfb := NewEG_RangeMarkupElements()
				_cfegfb.BookmarkEnd = NewCT_MarkupRange()
				if _dgaca := d.DecodeElement(_cfegfb.BookmarkEnd, &_afdfc); _dgaca != nil {
					return _dgaca
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _defab)
				_defab.EG_RangeMarkupElements = append(_defab.EG_RangeMarkupElements, _cfegfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_acbebd := NewEG_RunLevelElts()
				_dedfff := NewEG_RangeMarkupElements()
				_dedfff.MoveFromRangeStart = NewCT_MoveBookmark()
				if _edgee := d.DecodeElement(_dedfff.MoveFromRangeStart, &_afdfc); _edgee != nil {
					return _edgee
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _acbebd)
				_acbebd.EG_RangeMarkupElements = append(_acbebd.EG_RangeMarkupElements, _dedfff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_gcbbfa := NewEG_RunLevelElts()
				_dadgfe := NewEG_RangeMarkupElements()
				_dadgfe.MoveFromRangeEnd = NewCT_MarkupRange()
				if _bbceg := d.DecodeElement(_dadgfe.MoveFromRangeEnd, &_afdfc); _bbceg != nil {
					return _bbceg
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _gcbbfa)
				_gcbbfa.EG_RangeMarkupElements = append(_gcbbfa.EG_RangeMarkupElements, _dadgfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_gafbfg := NewEG_RunLevelElts()
				_ebfcbg := NewEG_RangeMarkupElements()
				_ebfcbg.MoveToRangeStart = NewCT_MoveBookmark()
				if _bbebgc := d.DecodeElement(_ebfcbg.MoveToRangeStart, &_afdfc); _bbebgc != nil {
					return _bbebgc
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _gafbfg)
				_gafbfg.EG_RangeMarkupElements = append(_gafbfg.EG_RangeMarkupElements, _ebfcbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_cgfga := NewEG_RunLevelElts()
				_dcedeae := NewEG_RangeMarkupElements()
				_dcedeae.MoveToRangeEnd = NewCT_MarkupRange()
				if _efgd := d.DecodeElement(_dcedeae.MoveToRangeEnd, &_afdfc); _efgd != nil {
					return _efgd
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _cgfga)
				_cgfga.EG_RangeMarkupElements = append(_cgfga.EG_RangeMarkupElements, _dcedeae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_bbcad := NewEG_RunLevelElts()
				_gdbeag := NewEG_RangeMarkupElements()
				_gdbeag.CommentRangeStart = NewCT_MarkupRange()
				if _egbbef := d.DecodeElement(_gdbeag.CommentRangeStart, &_afdfc); _egbbef != nil {
					return _egbbef
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _bbcad)
				_bbcad.EG_RangeMarkupElements = append(_bbcad.EG_RangeMarkupElements, _gdbeag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_fgade := NewEG_RunLevelElts()
				_gccgg := NewEG_RangeMarkupElements()
				_gccgg.CommentRangeEnd = NewCT_MarkupRange()
				if _baecc := d.DecodeElement(_gccgg.CommentRangeEnd, &_afdfc); _baecc != nil {
					return _baecc
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _fgade)
				_fgade.EG_RangeMarkupElements = append(_fgade.EG_RangeMarkupElements, _gccgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_ccebfc := NewEG_RunLevelElts()
				_bgdabf := NewEG_RangeMarkupElements()
				_bgdabf.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _bbadae := d.DecodeElement(_bgdabf.CustomXmlInsRangeStart, &_afdfc); _bbadae != nil {
					return _bbadae
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _ccebfc)
				_ccebfc.EG_RangeMarkupElements = append(_ccebfc.EG_RangeMarkupElements, _bgdabf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_fadbac := NewEG_RunLevelElts()
				_cdgcc := NewEG_RangeMarkupElements()
				_cdgcc.CustomXmlInsRangeEnd = NewCT_Markup()
				if _ddggaa := d.DecodeElement(_cdgcc.CustomXmlInsRangeEnd, &_afdfc); _ddggaa != nil {
					return _ddggaa
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _fadbac)
				_fadbac.EG_RangeMarkupElements = append(_fadbac.EG_RangeMarkupElements, _cdgcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_gabgd := NewEG_RunLevelElts()
				_deegd := NewEG_RangeMarkupElements()
				_deegd.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gcegfg := d.DecodeElement(_deegd.CustomXmlDelRangeStart, &_afdfc); _gcegfg != nil {
					return _gcegfg
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _gabgd)
				_gabgd.EG_RangeMarkupElements = append(_gabgd.EG_RangeMarkupElements, _deegd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_egfcg := NewEG_RunLevelElts()
				_ddcaf := NewEG_RangeMarkupElements()
				_ddcaf.CustomXmlDelRangeEnd = NewCT_Markup()
				if _fdbed := d.DecodeElement(_ddcaf.CustomXmlDelRangeEnd, &_afdfc); _fdbed != nil {
					return _fdbed
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _egfcg)
				_egfcg.EG_RangeMarkupElements = append(_egfcg.EG_RangeMarkupElements, _ddcaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_ddgdd := NewEG_RunLevelElts()
				_fceeg := NewEG_RangeMarkupElements()
				_fceeg.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _fffdeg := d.DecodeElement(_fceeg.CustomXmlMoveFromRangeStart, &_afdfc); _fffdeg != nil {
					return _fffdeg
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _ddgdd)
				_ddgdd.EG_RangeMarkupElements = append(_ddgdd.EG_RangeMarkupElements, _fceeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_acgfc := NewEG_RunLevelElts()
				_adcfab := NewEG_RangeMarkupElements()
				_adcfab.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _dgaba := d.DecodeElement(_adcfab.CustomXmlMoveFromRangeEnd, &_afdfc); _dgaba != nil {
					return _dgaba
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _acgfc)
				_acgfc.EG_RangeMarkupElements = append(_acgfc.EG_RangeMarkupElements, _adcfab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gaefggb := NewEG_RunLevelElts()
				_gfaad := NewEG_RangeMarkupElements()
				_gfaad.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _abcfa := d.DecodeElement(_gfaad.CustomXmlMoveToRangeStart, &_afdfc); _abcfa != nil {
					return _abcfa
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _gaefggb)
				_gaefggb.EG_RangeMarkupElements = append(_gaefggb.EG_RangeMarkupElements, _gfaad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_cdbee := NewEG_RunLevelElts()
				_bgfgc := NewEG_RangeMarkupElements()
				_bgfgc.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _ffdcgd := d.DecodeElement(_bgfgc.CustomXmlMoveToRangeEnd, &_afdfc); _ffdcgd != nil {
					return _ffdcgd
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _cdbee)
				_cdbee.EG_RangeMarkupElements = append(_cdbee.EG_RangeMarkupElements, _bgfgc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_gfgccb := NewEG_RunLevelElts()
				_cdcaae := NewEG_MathContent()
				_cdcaae.OMathPara = _f.NewOMathPara()
				if _gbdac := d.DecodeElement(_cdcaae.OMathPara, &_afdfc); _gbdac != nil {
					return _gbdac
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _gfgccb)
				_gfgccb.EG_MathContent = append(_gfgccb.EG_MathContent, _cdcaae)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_ddbdf := NewEG_RunLevelElts()
				_abddf := NewEG_MathContent()
				_abddf.OMath = _f.NewOMath()
				if _dbefa := d.DecodeElement(_abddf.OMath, &_afdfc); _dbefa != nil {
					return _dbefa
				}
				_dcbcb.EG_RunLevelElts = append(_dcbcb.EG_RunLevelElts, _ddbdf)
				_ddbdf.EG_MathContent = append(_ddbdf.EG_MathContent, _abddf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on\u0020EG_ContentRowContent\u0020\u0025v", _afdfc.Name)
				if _fcgfg := d.Skip(); _fcgfg != nil {
					return _fcgfg
				}
			}
		case _d.EndElement:
			break _fefcf
		case _d.CharData:
		}
	}
	return nil
}
func (_cafcfd *EG_RPrContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cafcfd.RStyle != nil {
		_cabdab := _d.StartElement{Name: _d.Name{Local: "w:rStyle"}}
		e.EncodeElement(_cafcfd.RStyle, _cabdab)
	}
	if _cafcfd.RFonts != nil {
		_agbfc := _d.StartElement{Name: _d.Name{Local: "w:rFonts"}}
		e.EncodeElement(_cafcfd.RFonts, _agbfc)
	}
	if _cafcfd.B != nil {
		_bffgg := _d.StartElement{Name: _d.Name{Local: "w:b"}}
		e.EncodeElement(_cafcfd.B, _bffgg)
	}
	if _cafcfd.BCs != nil {
		_cdfffg := _d.StartElement{Name: _d.Name{Local: "w:bCs"}}
		e.EncodeElement(_cafcfd.BCs, _cdfffg)
	}
	if _cafcfd.I != nil {
		_beefa := _d.StartElement{Name: _d.Name{Local: "w:i"}}
		e.EncodeElement(_cafcfd.I, _beefa)
	}
	if _cafcfd.ICs != nil {
		_efeffe := _d.StartElement{Name: _d.Name{Local: "w:iCs"}}
		e.EncodeElement(_cafcfd.ICs, _efeffe)
	}
	if _cafcfd.Caps != nil {
		_adcaf := _d.StartElement{Name: _d.Name{Local: "w:caps"}}
		e.EncodeElement(_cafcfd.Caps, _adcaf)
	}
	if _cafcfd.SmallCaps != nil {
		_fedcab := _d.StartElement{Name: _d.Name{Local: "w:smallCaps"}}
		e.EncodeElement(_cafcfd.SmallCaps, _fedcab)
	}
	if _cafcfd.Strike != nil {
		_cggcag := _d.StartElement{Name: _d.Name{Local: "w:strike"}}
		e.EncodeElement(_cafcfd.Strike, _cggcag)
	}
	if _cafcfd.Dstrike != nil {
		_fdegd := _d.StartElement{Name: _d.Name{Local: "w:dstrike"}}
		e.EncodeElement(_cafcfd.Dstrike, _fdegd)
	}
	if _cafcfd.Outline != nil {
		_ccdca := _d.StartElement{Name: _d.Name{Local: "w:outline"}}
		e.EncodeElement(_cafcfd.Outline, _ccdca)
	}
	if _cafcfd.Shadow != nil {
		_bggbce := _d.StartElement{Name: _d.Name{Local: "w:shadow"}}
		e.EncodeElement(_cafcfd.Shadow, _bggbce)
	}
	if _cafcfd.Emboss != nil {
		_fbaag := _d.StartElement{Name: _d.Name{Local: "w:emboss"}}
		e.EncodeElement(_cafcfd.Emboss, _fbaag)
	}
	if _cafcfd.Imprint != nil {
		_ecfgcf := _d.StartElement{Name: _d.Name{Local: "w:imprint"}}
		e.EncodeElement(_cafcfd.Imprint, _ecfgcf)
	}
	if _cafcfd.NoProof != nil {
		_daace := _d.StartElement{Name: _d.Name{Local: "w:noProof"}}
		e.EncodeElement(_cafcfd.NoProof, _daace)
	}
	if _cafcfd.SnapToGrid != nil {
		_dgccec := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_cafcfd.SnapToGrid, _dgccec)
	}
	if _cafcfd.Vanish != nil {
		_cggbab := _d.StartElement{Name: _d.Name{Local: "w:vanish"}}
		e.EncodeElement(_cafcfd.Vanish, _cggbab)
	}
	if _cafcfd.WebHidden != nil {
		_gddgc := _d.StartElement{Name: _d.Name{Local: "w:webHidden"}}
		e.EncodeElement(_cafcfd.WebHidden, _gddgc)
	}
	if _cafcfd.Color != nil {
		_ccbed := _d.StartElement{Name: _d.Name{Local: "w:color"}}
		e.EncodeElement(_cafcfd.Color, _ccbed)
	}
	if _cafcfd.Spacing != nil {
		_cebcec := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_cafcfd.Spacing, _cebcec)
	}
	if _cafcfd.W != nil {
		_gbeab := _d.StartElement{Name: _d.Name{Local: "w:w"}}
		e.EncodeElement(_cafcfd.W, _gbeab)
	}
	if _cafcfd.Kern != nil {
		_bbfccb := _d.StartElement{Name: _d.Name{Local: "w:kern"}}
		e.EncodeElement(_cafcfd.Kern, _bbfccb)
	}
	if _cafcfd.Position != nil {
		_eddbe := _d.StartElement{Name: _d.Name{Local: "w:position"}}
		e.EncodeElement(_cafcfd.Position, _eddbe)
	}
	if _cafcfd.Sz != nil {
		_fafbgd := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_cafcfd.Sz, _fafbgd)
	}
	if _cafcfd.SzCs != nil {
		_dbaad := _d.StartElement{Name: _d.Name{Local: "w:szCs"}}
		e.EncodeElement(_cafcfd.SzCs, _dbaad)
	}
	if _cafcfd.Highlight != nil {
		_afgdc := _d.StartElement{Name: _d.Name{Local: "w:highlight"}}
		e.EncodeElement(_cafcfd.Highlight, _afgdc)
	}
	if _cafcfd.U != nil {
		_cdgac := _d.StartElement{Name: _d.Name{Local: "w:u"}}
		e.EncodeElement(_cafcfd.U, _cdgac)
	}
	if _cafcfd.Effect != nil {
		_edafa := _d.StartElement{Name: _d.Name{Local: "w:effect"}}
		e.EncodeElement(_cafcfd.Effect, _edafa)
	}
	if _cafcfd.Bdr != nil {
		_ebccd := _d.StartElement{Name: _d.Name{Local: "w:bdr"}}
		e.EncodeElement(_cafcfd.Bdr, _ebccd)
	}
	if _cafcfd.Shd != nil {
		_gfcgg := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_cafcfd.Shd, _gfcgg)
	}
	if _cafcfd.FitText != nil {
		_fdbdb := _d.StartElement{Name: _d.Name{Local: "w:fitText"}}
		e.EncodeElement(_cafcfd.FitText, _fdbdb)
	}
	if _cafcfd.VertAlign != nil {
		_egbgfg := _d.StartElement{Name: _d.Name{Local: "w:vertAlign"}}
		e.EncodeElement(_cafcfd.VertAlign, _egbgfg)
	}
	if _cafcfd.Rtl != nil {
		_gbcea := _d.StartElement{Name: _d.Name{Local: "w:rtl"}}
		e.EncodeElement(_cafcfd.Rtl, _gbcea)
	}
	if _cafcfd.Cs != nil {
		_cbfdc := _d.StartElement{Name: _d.Name{Local: "w:cs"}}
		e.EncodeElement(_cafcfd.Cs, _cbfdc)
	}
	if _cafcfd.Em != nil {
		_aggda := _d.StartElement{Name: _d.Name{Local: "w:em"}}
		e.EncodeElement(_cafcfd.Em, _aggda)
	}
	if _cafcfd.Lang != nil {
		_geabe := _d.StartElement{Name: _d.Name{Local: "w:lang"}}
		e.EncodeElement(_cafcfd.Lang, _geabe)
	}
	if _cafcfd.EastAsianLayout != nil {
		_edbege := _d.StartElement{Name: _d.Name{Local: "w:eastAsianLayout"}}
		e.EncodeElement(_cafcfd.EastAsianLayout, _edbege)
	}
	if _cafcfd.SpecVanish != nil {
		_bebcd := _d.StartElement{Name: _d.Name{Local: "w:specVanish"}}
		e.EncodeElement(_cafcfd.SpecVanish, _bebcd)
	}
	if _cafcfd.OMath != nil {
		_gbefc := _d.StartElement{Name: _d.Name{Local: "w:oMath"}}
		e.EncodeElement(_cafcfd.OMath, _gbefc)
	}
	if _cafcfd.RPrChange != nil {
		_cfcef := _d.StartElement{Name: _d.Name{Local: "w:rPrChange"}}
		e.EncodeElement(_cafcfd.RPrChange, _cfcef)
	}
	return nil
}

// ValidateWithPath validates the CT_TblPrExChange and its children, prefixing error messages with path
func (_gaddaf *CT_TblPrExChange) ValidateWithPath(path string) error {
	if _fecab := _gaddaf.TblPrEx.ValidateWithPath(path + "\u002fTblPrEx"); _fecab != nil {
		return _fecab
	}
	return nil
}

const (
	ST_BorderUnset                  ST_Border = 0
	ST_BorderNil                    ST_Border = 1
	ST_BorderNone                   ST_Border = 2
	ST_BorderSingle                 ST_Border = 3
	ST_BorderThick                  ST_Border = 4
	ST_BorderDouble                 ST_Border = 5
	ST_BorderDotted                 ST_Border = 6
	ST_BorderDashed                 ST_Border = 7
	ST_BorderDotDash                ST_Border = 8
	ST_BorderDotDotDash             ST_Border = 9
	ST_BorderTriple                 ST_Border = 10
	ST_BorderThinThickSmallGap      ST_Border = 11
	ST_BorderThickThinSmallGap      ST_Border = 12
	ST_BorderThinThickThinSmallGap  ST_Border = 13
	ST_BorderThinThickMediumGap     ST_Border = 14
	ST_BorderThickThinMediumGap     ST_Border = 15
	ST_BorderThinThickThinMediumGap ST_Border = 16
	ST_BorderThinThickLargeGap      ST_Border = 17
	ST_BorderThickThinLargeGap      ST_Border = 18
	ST_BorderThinThickThinLargeGap  ST_Border = 19
	ST_BorderWave                   ST_Border = 20
	ST_BorderDoubleWave             ST_Border = 21
	ST_BorderDashSmallGap           ST_Border = 22
	ST_BorderDashDotStroked         ST_Border = 23
	ST_BorderThreeDEmboss           ST_Border = 24
	ST_BorderThreeDEngrave          ST_Border = 25
	ST_BorderOutset                 ST_Border = 26
	ST_BorderInset                  ST_Border = 27
	ST_BorderApples                 ST_Border = 28
	ST_BorderArchedScallops         ST_Border = 29
	ST_BorderBabyPacifier           ST_Border = 30
	ST_BorderBabyRattle             ST_Border = 31
	ST_BorderBalloons3Colors        ST_Border = 32
	ST_BorderBalloonsHotAir         ST_Border = 33
	ST_BorderBasicBlackDashes       ST_Border = 34
	ST_BorderBasicBlackDots         ST_Border = 35
	ST_BorderBasicBlackSquares      ST_Border = 36
	ST_BorderBasicThinLines         ST_Border = 37
	ST_BorderBasicWhiteDashes       ST_Border = 38
	ST_BorderBasicWhiteDots         ST_Border = 39
	ST_BorderBasicWhiteSquares      ST_Border = 40
	ST_BorderBasicWideInline        ST_Border = 41
	ST_BorderBasicWideMidline       ST_Border = 42
	ST_BorderBasicWideOutline       ST_Border = 43
	ST_BorderBats                   ST_Border = 44
	ST_BorderBirds                  ST_Border = 45
	ST_BorderBirdsFlight            ST_Border = 46
	ST_BorderCabins                 ST_Border = 47
	ST_BorderCakeSlice              ST_Border = 48
	ST_BorderCandyCorn              ST_Border = 49
	ST_BorderCelticKnotwork         ST_Border = 50
	ST_BorderCertificateBanner      ST_Border = 51
	ST_BorderChainLink              ST_Border = 52
	ST_BorderChampagneBottle        ST_Border = 53
	ST_BorderCheckedBarBlack        ST_Border = 54
	ST_BorderCheckedBarColor        ST_Border = 55
	ST_BorderCheckered              ST_Border = 56
	ST_BorderChristmasTree          ST_Border = 57
	ST_BorderCirclesLines           ST_Border = 58
	ST_BorderCirclesRectangles      ST_Border = 59
	ST_BorderClassicalWave          ST_Border = 60
	ST_BorderClocks                 ST_Border = 61
	ST_BorderCompass                ST_Border = 62
	ST_BorderConfetti               ST_Border = 63
	ST_BorderConfettiGrays          ST_Border = 64
	ST_BorderConfettiOutline        ST_Border = 65
	ST_BorderConfettiStreamers      ST_Border = 66
	ST_BorderConfettiWhite          ST_Border = 67
	ST_BorderCornerTriangles        ST_Border = 68
	ST_BorderCouponCutoutDashes     ST_Border = 69
	ST_BorderCouponCutoutDots       ST_Border = 70
	ST_BorderCrazyMaze              ST_Border = 71
	ST_BorderCreaturesButterfly     ST_Border = 72
	ST_BorderCreaturesFish          ST_Border = 73
	ST_BorderCreaturesInsects       ST_Border = 74
	ST_BorderCreaturesLadyBug       ST_Border = 75
	ST_BorderCrossStitch            ST_Border = 76
	ST_BorderCup                    ST_Border = 77
	ST_BorderDecoArch               ST_Border = 78
	ST_BorderDecoArchColor          ST_Border = 79
	ST_BorderDecoBlocks             ST_Border = 80
	ST_BorderDiamondsGray           ST_Border = 81
	ST_BorderDoubleD                ST_Border = 82
	ST_BorderDoubleDiamonds         ST_Border = 83
	ST_BorderEarth1                 ST_Border = 84
	ST_BorderEarth2                 ST_Border = 85
	ST_BorderEarth3                 ST_Border = 86
	ST_BorderEclipsingSquares1      ST_Border = 87
	ST_BorderEclipsingSquares2      ST_Border = 88
	ST_BorderEggsBlack              ST_Border = 89
	ST_BorderFans                   ST_Border = 90
	ST_BorderFilm                   ST_Border = 91
	ST_BorderFirecrackers           ST_Border = 92
	ST_BorderFlowersBlockPrint      ST_Border = 93
	ST_BorderFlowersDaisies         ST_Border = 94
	ST_BorderFlowersModern1         ST_Border = 95
	ST_BorderFlowersModern2         ST_Border = 96
	ST_BorderFlowersPansy           ST_Border = 97
	ST_BorderFlowersRedRose         ST_Border = 98
	ST_BorderFlowersRoses           ST_Border = 99
	ST_BorderFlowersTeacup          ST_Border = 100
	ST_BorderFlowersTiny            ST_Border = 101
	ST_BorderGems                   ST_Border = 102
	ST_BorderGingerbreadMan         ST_Border = 103
	ST_BorderGradient               ST_Border = 104
	ST_BorderHandmade1              ST_Border = 105
	ST_BorderHandmade2              ST_Border = 106
	ST_BorderHeartBalloon           ST_Border = 107
	ST_BorderHeartGray              ST_Border = 108
	ST_BorderHearts                 ST_Border = 109
	ST_BorderHeebieJeebies          ST_Border = 110
	ST_BorderHolly                  ST_Border = 111
	ST_BorderHouseFunky             ST_Border = 112
	ST_BorderHypnotic               ST_Border = 113
	ST_BorderIceCreamCones          ST_Border = 114
	ST_BorderLightBulb              ST_Border = 115
	ST_BorderLightning1             ST_Border = 116
	ST_BorderLightning2             ST_Border = 117
	ST_BorderMapPins                ST_Border = 118
	ST_BorderMapleLeaf              ST_Border = 119
	ST_BorderMapleMuffins           ST_Border = 120
	ST_BorderMarquee                ST_Border = 121
	ST_BorderMarqueeToothed         ST_Border = 122
	ST_BorderMoons                  ST_Border = 123
	ST_BorderMosaic                 ST_Border = 124
	ST_BorderMusicNotes             ST_Border = 125
	ST_BorderNorthwest              ST_Border = 126
	ST_BorderOvals                  ST_Border = 127
	ST_BorderPackages               ST_Border = 128
	ST_BorderPalmsBlack             ST_Border = 129
	ST_BorderPalmsColor             ST_Border = 130
	ST_BorderPaperClips             ST_Border = 131
	ST_BorderPapyrus                ST_Border = 132
	ST_BorderPartyFavor             ST_Border = 133
	ST_BorderPartyGlass             ST_Border = 134
	ST_BorderPencils                ST_Border = 135
	ST_BorderPeople                 ST_Border = 136
	ST_BorderPeopleWaving           ST_Border = 137
	ST_BorderPeopleHats             ST_Border = 138
	ST_BorderPoinsettias            ST_Border = 139
	ST_BorderPostageStamp           ST_Border = 140
	ST_BorderPumpkin1               ST_Border = 141
	ST_BorderPushPinNote2           ST_Border = 142
	ST_BorderPushPinNote1           ST_Border = 143
	ST_BorderPyramids               ST_Border = 144
	ST_BorderPyramidsAbove          ST_Border = 145
	ST_BorderQuadrants              ST_Border = 146
	ST_BorderRings                  ST_Border = 147
	ST_BorderSafari                 ST_Border = 148
	ST_BorderSawtooth               ST_Border = 149
	ST_BorderSawtoothGray           ST_Border = 150
	ST_BorderScaredCat              ST_Border = 151
	ST_BorderSeattle                ST_Border = 152
	ST_BorderShadowedSquares        ST_Border = 153
	ST_BorderSharksTeeth            ST_Border = 154
	ST_BorderShorebirdTracks        ST_Border = 155
	ST_BorderSkyrocket              ST_Border = 156
	ST_BorderSnowflakeFancy         ST_Border = 157
	ST_BorderSnowflakes             ST_Border = 158
	ST_BorderSombrero               ST_Border = 159
	ST_BorderSouthwest              ST_Border = 160
	ST_BorderStars                  ST_Border = 161
	ST_BorderStarsTop               ST_Border = 162
	ST_BorderStars3d                ST_Border = 163
	ST_BorderStarsBlack             ST_Border = 164
	ST_BorderStarsShadowed          ST_Border = 165
	ST_BorderSun                    ST_Border = 166
	ST_BorderSwirligig              ST_Border = 167
	ST_BorderTornPaper              ST_Border = 168
	ST_BorderTornPaperBlack         ST_Border = 169
	ST_BorderTrees                  ST_Border = 170
	ST_BorderTriangleParty          ST_Border = 171
	ST_BorderTriangles              ST_Border = 172
	ST_BorderTriangle1              ST_Border = 173
	ST_BorderTriangle2              ST_Border = 174
	ST_BorderTriangleCircle1        ST_Border = 175
	ST_BorderTriangleCircle2        ST_Border = 176
	ST_BorderShapes1                ST_Border = 177
	ST_BorderShapes2                ST_Border = 178
	ST_BorderTwistedLines1          ST_Border = 179
	ST_BorderTwistedLines2          ST_Border = 180
	ST_BorderVine                   ST_Border = 181
	ST_BorderWaveline               ST_Border = 182
	ST_BorderWeavingAngles          ST_Border = 183
	ST_BorderWeavingBraid           ST_Border = 184
	ST_BorderWeavingRibbon          ST_Border = 185
	ST_BorderWeavingStrips          ST_Border = 186
	ST_BorderWhiteFlowers           ST_Border = 187
	ST_BorderWoodwork               ST_Border = 188
	ST_BorderXIllusions             ST_Border = 189
	ST_BorderZanyTriangles          ST_Border = 190
	ST_BorderZigZag                 ST_Border = 191
	ST_BorderZigZagStitch           ST_Border = 192
	ST_BorderCustom                 ST_Border = 193
)

func NewEG_PContent() *EG_PContent { _adegf := &EG_PContent{}; return _adegf }
func (_fbbc *CT_ObjectChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fbbc.Control != nil {
		_gcgggc := _d.StartElement{Name: _d.Name{Local: "w:control"}}
		e.EncodeElement(_fbbc.Control, _gcgggc)
	}
	if _fbbc.ObjectLink != nil {
		_geggg := _d.StartElement{Name: _d.Name{Local: "w:objectLink"}}
		e.EncodeElement(_fbbc.ObjectLink, _geggg)
	}
	if _fbbc.ObjectEmbed != nil {
		_bbfb := _d.StartElement{Name: _d.Name{Local: "w:objectEmbed"}}
		e.EncodeElement(_fbbc.ObjectEmbed, _bbfb)
	}
	if _fbbc.Movie != nil {
		_geaggf := _d.StartElement{Name: _d.Name{Local: "w:movie"}}
		e.EncodeElement(_fbbc.Movie, _geaggf)
	}
	return nil
}
func (_cdeag ST_HexColorAuto) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cdeag.String(), start)
}
func (_cbaeda ST_TblLayoutType) String() string {
	switch _cbaeda {
	case 0:
		return ""
	case 1:
		return "fixed"
	case 2:
		return "autofit"
	}
	return ""
}
func (_feffg *CT_TcMar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _feffg.Top != nil {
		_abdeb := _d.StartElement{Name: _d.Name{Local: "w:top"}}
		e.EncodeElement(_feffg.Top, _abdeb)
	}
	if _feffg.Start != nil {
		_deefe := _d.StartElement{Name: _d.Name{Local: "w:start"}}
		e.EncodeElement(_feffg.Start, _deefe)
	}
	if _feffg.Left != nil {
		_ggcce := _d.StartElement{Name: _d.Name{Local: "w:left"}}
		e.EncodeElement(_feffg.Left, _ggcce)
	}
	if _feffg.Bottom != nil {
		_ebfad := _d.StartElement{Name: _d.Name{Local: "w:bottom"}}
		e.EncodeElement(_feffg.Bottom, _ebfad)
	}
	if _feffg.End != nil {
		_gffec := _d.StartElement{Name: _d.Name{Local: "w:end"}}
		e.EncodeElement(_feffg.End, _gffec)
	}
	if _feffg.Right != nil {
		_bdegf := _d.StartElement{Name: _d.Name{Local: "w:right"}}
		e.EncodeElement(_feffg.Right, _bdegf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dbeda *EG_SectPrContents) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dbeda.FootnotePr != nil {
		_gggfbe := _d.StartElement{Name: _d.Name{Local: "w:footnotePr"}}
		e.EncodeElement(_dbeda.FootnotePr, _gggfbe)
	}
	if _dbeda.EndnotePr != nil {
		_fbafa := _d.StartElement{Name: _d.Name{Local: "w:endnotePr"}}
		e.EncodeElement(_dbeda.EndnotePr, _fbafa)
	}
	if _dbeda.Type != nil {
		_eagdc := _d.StartElement{Name: _d.Name{Local: "w:type"}}
		e.EncodeElement(_dbeda.Type, _eagdc)
	}
	if _dbeda.PgSz != nil {
		_agdagd := _d.StartElement{Name: _d.Name{Local: "w:pgSz"}}
		e.EncodeElement(_dbeda.PgSz, _agdagd)
	}
	if _dbeda.PgMar != nil {
		_adecdf := _d.StartElement{Name: _d.Name{Local: "w:pgMar"}}
		e.EncodeElement(_dbeda.PgMar, _adecdf)
	}
	if _dbeda.PaperSrc != nil {
		_babcfe := _d.StartElement{Name: _d.Name{Local: "w:paperSrc"}}
		e.EncodeElement(_dbeda.PaperSrc, _babcfe)
	}
	if _dbeda.PgBorders != nil {
		_gdedge := _d.StartElement{Name: _d.Name{Local: "w:pgBorders"}}
		e.EncodeElement(_dbeda.PgBorders, _gdedge)
	}
	if _dbeda.LnNumType != nil {
		_fbbgg := _d.StartElement{Name: _d.Name{Local: "w:lnNumType"}}
		e.EncodeElement(_dbeda.LnNumType, _fbbgg)
	}
	if _dbeda.PgNumType != nil {
		_agfcd := _d.StartElement{Name: _d.Name{Local: "w:pgNumType"}}
		e.EncodeElement(_dbeda.PgNumType, _agfcd)
	}
	if _dbeda.Cols != nil {
		_agfgda := _d.StartElement{Name: _d.Name{Local: "w:cols"}}
		e.EncodeElement(_dbeda.Cols, _agfgda)
	}
	if _dbeda.FormProt != nil {
		_bgbgb := _d.StartElement{Name: _d.Name{Local: "w:formProt"}}
		e.EncodeElement(_dbeda.FormProt, _bgbgb)
	}
	if _dbeda.VAlign != nil {
		_dfeadg := _d.StartElement{Name: _d.Name{Local: "w:vAlign"}}
		e.EncodeElement(_dbeda.VAlign, _dfeadg)
	}
	if _dbeda.NoEndnote != nil {
		_cfecc := _d.StartElement{Name: _d.Name{Local: "w:noEndnote"}}
		e.EncodeElement(_dbeda.NoEndnote, _cfecc)
	}
	if _dbeda.TitlePg != nil {
		_aaabcc := _d.StartElement{Name: _d.Name{Local: "w:titlePg"}}
		e.EncodeElement(_dbeda.TitlePg, _aaabcc)
	}
	if _dbeda.TextDirection != nil {
		_ffaef := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_dbeda.TextDirection, _ffaef)
	}
	if _dbeda.Bidi != nil {
		_cgfaa := _d.StartElement{Name: _d.Name{Local: "w:bidi"}}
		e.EncodeElement(_dbeda.Bidi, _cgfaa)
	}
	if _dbeda.RtlGutter != nil {
		_fbcfee := _d.StartElement{Name: _d.Name{Local: "w:rtlGutter"}}
		e.EncodeElement(_dbeda.RtlGutter, _fbcfee)
	}
	if _dbeda.DocGrid != nil {
		_agacg := _d.StartElement{Name: _d.Name{Local: "w:docGrid"}}
		e.EncodeElement(_dbeda.DocGrid, _agacg)
	}
	if _dbeda.PrinterSettings != nil {
		_gbfgb := _d.StartElement{Name: _d.Name{Local: "w:printerSettings"}}
		e.EncodeElement(_dbeda.PrinterSettings, _gbfgb)
	}
	return nil
}
func NewEG_ContentBlockContent() *EG_ContentBlockContent {
	_ggeaf := &EG_ContentBlockContent{}
	return _ggeaf
}
func NewCT_Control() *CT_Control { _gaeed := &CT_Control{}; return _gaeed }
func (_dcdgdfa *CT_FontSig) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ddgd := range start.Attr {
		if _ddgd.Name.Local == "usb0" {
			_edbad, _bbcgg := _ddgd.Value, error(nil)
			if _bbcgg != nil {
				return _bbcgg
			}
			_dcdgdfa.Usb0Attr = _edbad
			continue
		}
		if _ddgd.Name.Local == "usb1" {
			_ceddg, _edcgg := _ddgd.Value, error(nil)
			if _edcgg != nil {
				return _edcgg
			}
			_dcdgdfa.Usb1Attr = _ceddg
			continue
		}
		if _ddgd.Name.Local == "usb2" {
			_eddff, _gbfe := _ddgd.Value, error(nil)
			if _gbfe != nil {
				return _gbfe
			}
			_dcdgdfa.Usb2Attr = _eddff
			continue
		}
		if _ddgd.Name.Local == "usb3" {
			_ceege, _efaaf := _ddgd.Value, error(nil)
			if _efaaf != nil {
				return _efaaf
			}
			_dcdgdfa.Usb3Attr = _ceege
			continue
		}
		if _ddgd.Name.Local == "csb0" {
			_cgddc, _ggeg := _ddgd.Value, error(nil)
			if _ggeg != nil {
				return _ggeg
			}
			_dcdgdfa.Csb0Attr = _cgddc
			continue
		}
		if _ddgd.Name.Local == "csb1" {
			_ggcbd, _gggc := _ddgd.Value, error(nil)
			if _gggc != nil {
				return _gggc
			}
			_dcdgdfa.Csb1Attr = _ggcbd
			continue
		}
	}
	for {
		_baaed, _cgad := d.Token()
		if _cgad != nil {
			return _b.Errorf("parsing\u0020CT_FontSig:\u0020%s", _cgad)
		}
		if _ebbfd, _dfbb := _baaed.(_d.EndElement); _dfbb && _ebbfd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ffadgd ST_MultiLevelType) Validate() error { return _ffadgd.ValidateWithPath("") }

// ValidateWithPath validates the EG_CellMarkupElements and its children, prefixing error messages with path
func (_edfbb *EG_CellMarkupElements) ValidateWithPath(path string) error {
	if _edfbb.CellIns != nil {
		if _ebfgef := _edfbb.CellIns.ValidateWithPath(path + "\u002fCellIns"); _ebfgef != nil {
			return _ebfgef
		}
	}
	if _edfbb.CellDel != nil {
		if _cbeef := _edfbb.CellDel.ValidateWithPath(path + "\u002fCellDel"); _cbeef != nil {
			return _cbeef
		}
	}
	if _edfbb.CellMerge != nil {
		if _gedcc := _edfbb.CellMerge.ValidateWithPath(path + "\u002fCellMerge"); _gedcc != nil {
			return _gedcc
		}
	}
	return nil
}
func (_gdaeeg ST_DocGrid) String() string {
	switch _gdaeeg {
	case 0:
		return ""
	case 1:
		return "default"
	case 2:
		return "lines"
	case 3:
		return "linesAndChars"
	case 4:
		return "snapToChars"
	}
	return ""
}

// ValidateWithPath validates the CT_NumPicBullet and its children, prefixing error messages with path
func (_gbcac *CT_NumPicBullet) ValidateWithPath(path string) error {
	if _gbcac.Pict != nil {
		if _ebgbc := _gbcac.Pict.ValidateWithPath(path + "\u002fPict"); _ebgbc != nil {
			return _ebgbc
		}
	}
	if _gbcac.Drawing != nil {
		if _degbc := _gbcac.Drawing.ValidateWithPath(path + "\u002fDrawing"); _degbc != nil {
			return _degbc
		}
	}
	return nil
}

type CT_TextScale struct {

	// Text Expansion/Compression Value
	ValAttr *ST_TextScale
}

func (_fbbefb *WdEG_WrapTypeChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bagefb:
	for {
		_gdgbb, _egfcfd := d.Token()
		if _egfcfd != nil {
			return _egfcfd
		}
		switch _cabbg := _gdgbb.(type) {
		case _d.StartElement:
			switch _cabbg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapNone"}:
				_fbbefb.WrapNone = NewWdCT_WrapNone()
				if _ecdbg := d.DecodeElement(_fbbefb.WrapNone, &_cabbg); _ecdbg != nil {
					return _ecdbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapSquare"}:
				_fbbefb.WrapSquare = NewWdCT_WrapSquare()
				if _cdfbcb := d.DecodeElement(_fbbefb.WrapSquare, &_cabbg); _cdfbcb != nil {
					return _cdfbcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTight"}:
				_fbbefb.WrapTight = NewWdCT_WrapTight()
				if _dfccca := d.DecodeElement(_fbbefb.WrapTight, &_cabbg); _dfccca != nil {
					return _dfccca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapThrough"}:
				_fbbefb.WrapThrough = NewWdCT_WrapThrough()
				if _gaacc := d.DecodeElement(_fbbefb.WrapThrough, &_cabbg); _gaacc != nil {
					return _gaacc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTopAndBottom"}:
				_fbbefb.WrapTopAndBottom = NewWdCT_WrapTopBottom()
				if _aecdfc := d.DecodeElement(_fbbefb.WrapTopAndBottom, &_cabbg); _aecdfc != nil {
					return _aecdfc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdEG_WrapTypeChoice\u0020\u0025v", _cabbg.Name)
				if _gedfeg := d.Skip(); _gedfeg != nil {
					return _gedfeg
				}
			}
		case _d.EndElement:
			break _bagefb
		case _d.CharData:
		}
	}
	return nil
}

type CT_DecimalNumberOrPrecent struct {

	// Value in Percent
	ValAttr ST_DecimalNumberOrPercent
}

func (_fedfa ST_CaptionPos) String() string {
	switch _fedfa {
	case 0:
		return ""
	case 1:
		return "above"
	case 2:
		return "below"
	case 3:
		return "left"
	case 4:
		return "right"
	}
	return ""
}
func (_ccfbgb *WdEG_WrapType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_agfab:
	for {
		_dffefa, _ababga := d.Token()
		if _ababga != nil {
			return _ababga
		}
		switch _bfedb := _dffefa.(type) {
		case _d.StartElement:
			switch _bfedb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapNone"}:
				_ccfbgb.Choice = NewWdEG_WrapTypeChoice()
				if _fffaa := d.DecodeElement(&_ccfbgb.Choice.WrapNone, &_bfedb); _fffaa != nil {
					return _fffaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapSquare"}:
				_ccfbgb.Choice = NewWdEG_WrapTypeChoice()
				if _gaabf := d.DecodeElement(&_ccfbgb.Choice.WrapSquare, &_bfedb); _gaabf != nil {
					return _gaabf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTight"}:
				_ccfbgb.Choice = NewWdEG_WrapTypeChoice()
				if _cgbdgc := d.DecodeElement(&_ccfbgb.Choice.WrapTight, &_bfedb); _cgbdgc != nil {
					return _cgbdgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapThrough"}:
				_ccfbgb.Choice = NewWdEG_WrapTypeChoice()
				if _cdgeab := d.DecodeElement(&_ccfbgb.Choice.WrapThrough, &_bfedb); _cdgeab != nil {
					return _cdgeab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTopAndBottom"}:
				_ccfbgb.Choice = NewWdEG_WrapTypeChoice()
				if _ebeaga := d.DecodeElement(&_ccfbgb.Choice.WrapTopAndBottom, &_bfedb); _ebeaga != nil {
					return _ebeaga
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020WdEG_WrapType \u0025v", _bfedb.Name)
				if _cdbfed := d.Skip(); _cdbfed != nil {
					return _cdbfed
				}
			}
		case _d.EndElement:
			break _agfab
		case _d.CharData:
		}
	}
	return nil
}
func (_dfbfaaf ST_PTabAlignment) String() string {
	switch _dfbfaaf {
	case 0:
		return ""
	case 1:
		return "left"
	case 2:
		return "center"
	case 3:
		return "right"
	}
	return ""
}

// ValidateWithPath validates the CT_SdtContentBlock and its children, prefixing error messages with path
func (_dbbfe *CT_SdtContentBlock) ValidateWithPath(path string) error {
	if _dbbfe.CustomXml != nil {
		if _bageg := _dbbfe.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _bageg != nil {
			return _bageg
		}
	}
	if _dbbfe.Sdt != nil {
		if _fdgff := _dbbfe.Sdt.ValidateWithPath(path + "\u002fSdt"); _fdgff != nil {
			return _fdgff
		}
	}
	for _afeea, _aagcc := range _dbbfe.P {
		if _dcbb := _aagcc.ValidateWithPath(_b.Sprintf("\u0025s\u002fP\u005b\u0025d\u005d", path, _afeea)); _dcbb != nil {
			return _dcbb
		}
	}
	for _aagfd, _fceff := range _dbbfe.Tbl {
		if _ebdad := _fceff.ValidateWithPath(_b.Sprintf("\u0025s\u002fTbl\u005b\u0025d\u005d", path, _aagfd)); _ebdad != nil {
			return _ebdad
		}
	}
	for _dbcdf, _egggd := range _dbbfe.EG_RunLevelElts {
		if _gbeda := _egggd.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _dbcdf)); _gbeda != nil {
			return _gbeda
		}
	}
	return nil
}
func (_gdfea *CT_FtnEdnRef) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fgaf := range start.Attr {
		if _fgaf.Name.Local == "customMarkFollows" {
			_gaeea, _dbef := ParseUnionST_OnOff(_fgaf.Value)
			if _dbef != nil {
				return _dbef
			}
			_gdfea.CustomMarkFollowsAttr = &_gaeea
			continue
		}
		if _fgaf.Name.Local == "id" {
			_agcf, _gcbac := _dd.ParseInt(_fgaf.Value, 10, 64)
			if _gcbac != nil {
				return _gcbac
			}
			_gdfea.IdAttr = _agcf
			continue
		}
	}
	for {
		_dedd, _ebfdc := d.Token()
		if _ebfdc != nil {
			return _b.Errorf("parsing\u0020CT_FtnEdnRef:\u0020\u0025s", _ebfdc)
		}
		if _eddeb, _aggcb := _dedd.(_d.EndElement); _aggcb && _eddeb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewWdCT_WordprocessingShape() *WdCT_WordprocessingShape {
	_cfdeee := &WdCT_WordprocessingShape{}
	_cfdeee.Choice = NewWdCT_WordprocessingShapeChoice()
	_cfdeee.SpPr = _eb.NewCT_ShapeProperties()
	_cfdeee.BodyPr = _eb.NewCT_TextBodyProperties()
	return _cfdeee
}

// ValidateWithPath validates the CT_Lvl and its children, prefixing error messages with path
func (_bdfcb *CT_Lvl) ValidateWithPath(path string) error {
	if _bdfcb.TentativeAttr != nil {
		if _fgbdg := _bdfcb.TentativeAttr.ValidateWithPath(path + "\u002fTentativeAttr"); _fgbdg != nil {
			return _fgbdg
		}
	}
	if _bdfcb.Start != nil {
		if _cdfbc := _bdfcb.Start.ValidateWithPath(path + "\u002fStart"); _cdfbc != nil {
			return _cdfbc
		}
	}
	if _bdfcb.NumFmt != nil {
		if _dedbd := _bdfcb.NumFmt.ValidateWithPath(path + "\u002fNumFmt"); _dedbd != nil {
			return _dedbd
		}
	}
	if _bdfcb.LvlRestart != nil {
		if _ecdf := _bdfcb.LvlRestart.ValidateWithPath(path + "/LvlRestart"); _ecdf != nil {
			return _ecdf
		}
	}
	if _bdfcb.PStyle != nil {
		if _fefbc := _bdfcb.PStyle.ValidateWithPath(path + "\u002fPStyle"); _fefbc != nil {
			return _fefbc
		}
	}
	if _bdfcb.IsLgl != nil {
		if _fbfda := _bdfcb.IsLgl.ValidateWithPath(path + "\u002fIsLgl"); _fbfda != nil {
			return _fbfda
		}
	}
	if _bdfcb.Suff != nil {
		if _dffbc := _bdfcb.Suff.ValidateWithPath(path + "\u002fSuff"); _dffbc != nil {
			return _dffbc
		}
	}
	if _bdfcb.LvlText != nil {
		if _dfde := _bdfcb.LvlText.ValidateWithPath(path + "\u002fLvlText"); _dfde != nil {
			return _dfde
		}
	}
	if _bdfcb.LvlPicBulletId != nil {
		if _ceccc := _bdfcb.LvlPicBulletId.ValidateWithPath(path + "\u002fLvlPicBulletId"); _ceccc != nil {
			return _ceccc
		}
	}
	if _bdfcb.Legacy != nil {
		if _becc := _bdfcb.Legacy.ValidateWithPath(path + "\u002fLegacy"); _becc != nil {
			return _becc
		}
	}
	if _bdfcb.LvlJc != nil {
		if _gfefd := _bdfcb.LvlJc.ValidateWithPath(path + "\u002fLvlJc"); _gfefd != nil {
			return _gfefd
		}
	}
	if _bdfcb.PPr != nil {
		if _ffcab := _bdfcb.PPr.ValidateWithPath(path + "\u002fPPr"); _ffcab != nil {
			return _ffcab
		}
	}
	if _bdfcb.RPr != nil {
		if _cefc := _bdfcb.RPr.ValidateWithPath(path + "\u002fRPr"); _cefc != nil {
			return _cefc
		}
	}
	return nil
}
func NewCT_TabStop() *CT_TabStop {
	_caebbb := &CT_TabStop{}
	_caebbb.ValAttr = ST_TabJc(1)
	return _caebbb
}

// ValidateWithPath validates the CT_FFCheckBoxChoice and its children, prefixing error messages with path
func (_gfedg *CT_FFCheckBoxChoice) ValidateWithPath(path string) error {
	if _gfedg.Size != nil {
		if _gbdcf := _gfedg.Size.ValidateWithPath(path + "\u002fSize"); _gbdcf != nil {
			return _gbdcf
		}
	}
	if _gfedg.SizeAuto != nil {
		if _dgbg := _gfedg.SizeAuto.ValidateWithPath(path + "\u002fSizeAuto"); _dgbg != nil {
			return _dgbg
		}
	}
	return nil
}
func (_addefd ST_TblOverlap) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_becccf := _d.Attr{}
	_becccf.Name = name
	switch _addefd {
	case ST_TblOverlapUnset:
		_becccf.Value = ""
	case ST_TblOverlapNever:
		_becccf.Value = "never"
	case ST_TblOverlapOverlap:
		_becccf.Value = "overlap"
	}
	return _becccf, nil
}

type WdInline struct{ WdCT_Inline }

func (_fcgafg *CT_TargetScreenSz) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcgafg.ValAttr = ST_TargetScreenSz(1)
	for _, _aefcb := range start.Attr {
		if _aefcb.Name.Local == "val" {
			_fcgafg.ValAttr.UnmarshalXMLAttr(_aefcb)
			continue
		}
	}
	for {
		_egcde, _cbbga := d.Token()
		if _cbbga != nil {
			return _b.Errorf("parsing\u0020CT_TargetScreenSz: \u0025s", _cbbga)
		}
		if _cfafe, _ggggd := _egcde.(_d.EndElement); _ggggd && _cfafe.Name == start.Name {
			break
		}
	}
	return nil
}
func (_afdfa *CT_FtnPos) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afdfa.ValAttr = ST_FtnPos(1)
	for _, _egbbe := range start.Attr {
		if _egbbe.Name.Local == "val" {
			_afdfa.ValAttr.UnmarshalXMLAttr(_egbbe)
			continue
		}
	}
	for {
		_aceb, _dfafg := d.Token()
		if _dfafg != nil {
			return _b.Errorf("parsing\u0020CT_FtnPos:\u0020\u0025s", _dfafg)
		}
		if _bfgec, _ebfdg := _aceb.(_d.EndElement); _ebfdg && _bfgec.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ObjectLink and its children
func (_bccad *CT_ObjectLink) Validate() error { return _bccad.ValidateWithPath("CT_ObjectLink") }
func (_ffccfb ST_Merge) ValidateWithPath(path string) error {
	switch _ffccfb {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ffccfb))
	}
	return nil
}

// Validate validates the WdCT_GraphicFrame and its children
func (_dbfcg *WdCT_GraphicFrame) Validate() error {
	return _dbfcg.ValidateWithPath("WdCT_GraphicFrame")
}
func (_beeag ST_FontFamily) ValidateWithPath(path string) error {
	switch _beeag {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_beeag))
	}
	return nil
}
func (_egacfd *CT_PaperSource) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _egacfd.FirstAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:first"}, Value: _b.Sprintf("\u0025v", *_egacfd.FirstAttr)})
	}
	if _egacfd.OtherAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:other"}, Value: _b.Sprintf("\u0025v", *_egacfd.OtherAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bcdacf *CT_Recipients) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ggfbe:
	for {
		_fffgc, _cdeef := d.Token()
		if _cdeef != nil {
			return _cdeef
		}
		switch _ffbea := _fffgc.(type) {
		case _d.StartElement:
			switch _ffbea.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "recipientData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "recipientData"}:
				_babad := NewCT_RecipientData()
				if _daegb := d.DecodeElement(_babad, &_ffbea); _daegb != nil {
					return _daegb
				}
				_bcdacf.RecipientData = append(_bcdacf.RecipientData, _babad)
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_Recipients \u0025v", _ffbea.Name)
				if _deagbc := d.Skip(); _deagbc != nil {
					return _deagbc
				}
			}
		case _d.EndElement:
			break _ggfbe
		case _d.CharData:
		}
	}
	return nil
}
func (_edcdgd ST_Shd) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dbabd := _d.Attr{}
	_dbabd.Name = name
	switch _edcdgd {
	case ST_ShdUnset:
		_dbabd.Value = ""
	case ST_ShdNil:
		_dbabd.Value = "nil"
	case ST_ShdClear:
		_dbabd.Value = "clear"
	case ST_ShdSolid:
		_dbabd.Value = "solid"
	case ST_ShdHorzStripe:
		_dbabd.Value = "horzStripe"
	case ST_ShdVertStripe:
		_dbabd.Value = "vertStripe"
	case ST_ShdReverseDiagStripe:
		_dbabd.Value = "reverseDiagStripe"
	case ST_ShdDiagStripe:
		_dbabd.Value = "diagStripe"
	case ST_ShdHorzCross:
		_dbabd.Value = "horzCross"
	case ST_ShdDiagCross:
		_dbabd.Value = "diagCross"
	case ST_ShdThinHorzStripe:
		_dbabd.Value = "thinHorzStripe"
	case ST_ShdThinVertStripe:
		_dbabd.Value = "thinVertStripe"
	case ST_ShdThinReverseDiagStripe:
		_dbabd.Value = "thinReverseDiagStripe"
	case ST_ShdThinDiagStripe:
		_dbabd.Value = "thinDiagStripe"
	case ST_ShdThinHorzCross:
		_dbabd.Value = "thinHorzCross"
	case ST_ShdThinDiagCross:
		_dbabd.Value = "thinDiagCross"
	case ST_ShdPct5:
		_dbabd.Value = "pct5"
	case ST_ShdPct10:
		_dbabd.Value = "pct10"
	case ST_ShdPct12:
		_dbabd.Value = "pct12"
	case ST_ShdPct15:
		_dbabd.Value = "pct15"
	case ST_ShdPct20:
		_dbabd.Value = "pct20"
	case ST_ShdPct25:
		_dbabd.Value = "pct25"
	case ST_ShdPct30:
		_dbabd.Value = "pct30"
	case ST_ShdPct35:
		_dbabd.Value = "pct35"
	case ST_ShdPct37:
		_dbabd.Value = "pct37"
	case ST_ShdPct40:
		_dbabd.Value = "pct40"
	case ST_ShdPct45:
		_dbabd.Value = "pct45"
	case ST_ShdPct50:
		_dbabd.Value = "pct50"
	case ST_ShdPct55:
		_dbabd.Value = "pct55"
	case ST_ShdPct60:
		_dbabd.Value = "pct60"
	case ST_ShdPct62:
		_dbabd.Value = "pct62"
	case ST_ShdPct65:
		_dbabd.Value = "pct65"
	case ST_ShdPct70:
		_dbabd.Value = "pct70"
	case ST_ShdPct75:
		_dbabd.Value = "pct75"
	case ST_ShdPct80:
		_dbabd.Value = "pct80"
	case ST_ShdPct85:
		_dbabd.Value = "pct85"
	case ST_ShdPct87:
		_dbabd.Value = "pct87"
	case ST_ShdPct90:
		_dbabd.Value = "pct90"
	case ST_ShdPct95:
		_dbabd.Value = "pct95"
	}
	return _dbabd, nil
}
func (_bcfcca *ST_DocPartType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bcfcca = 0
	case "none":
		*_bcfcca = 1
	case "normal":
		*_bcfcca = 2
	case "autoExp":
		*_bcfcca = 3
	case "toolbar":
		*_bcfcca = 4
	case "speller":
		*_bcfcca = 5
	case "formFld":
		*_bcfcca = 6
	case "bbPlcHdr":
		*_bcfcca = 7
	}
	return nil
}
func (_aeced *CT_TcBorders) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _aeced.Top != nil {
		_cagage := _d.StartElement{Name: _d.Name{Local: "w:top"}}
		e.EncodeElement(_aeced.Top, _cagage)
	}
	if _aeced.Start != nil {
		_cfbeg := _d.StartElement{Name: _d.Name{Local: "w:start"}}
		e.EncodeElement(_aeced.Start, _cfbeg)
	}
	if _aeced.Left != nil {
		_ceacc := _d.StartElement{Name: _d.Name{Local: "w:left"}}
		e.EncodeElement(_aeced.Left, _ceacc)
	}
	if _aeced.Bottom != nil {
		_gcbdac := _d.StartElement{Name: _d.Name{Local: "w:bottom"}}
		e.EncodeElement(_aeced.Bottom, _gcbdac)
	}
	if _aeced.End != nil {
		_aabfcd := _d.StartElement{Name: _d.Name{Local: "w:end"}}
		e.EncodeElement(_aeced.End, _aabfcd)
	}
	if _aeced.Right != nil {
		_addda := _d.StartElement{Name: _d.Name{Local: "w:right"}}
		e.EncodeElement(_aeced.Right, _addda)
	}
	if _aeced.InsideH != nil {
		_dacbe := _d.StartElement{Name: _d.Name{Local: "w:insideH"}}
		e.EncodeElement(_aeced.InsideH, _dacbe)
	}
	if _aeced.InsideV != nil {
		_eafag := _d.StartElement{Name: _d.Name{Local: "w:insideV"}}
		e.EncodeElement(_aeced.InsideV, _eafag)
	}
	if _aeced.Tl2br != nil {
		_eccba := _d.StartElement{Name: _d.Name{Local: "w:tl2br"}}
		e.EncodeElement(_aeced.Tl2br, _eccba)
	}
	if _aeced.Tr2bl != nil {
		_ffaddb := _d.StartElement{Name: _d.Name{Local: "w:tr2bl"}}
		e.EncodeElement(_aeced.Tr2bl, _ffaddb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_DirContentRun struct {

	// Direction of Embedding
	ValAttr ST_Direction

	// Simple Field
	FldSimple []*CT_SimpleField

	// Hyperlink
	Hyperlink *CT_Hyperlink

	// Anchor for Subdocument Location
	SubDoc               *CT_Rel
	EG_ContentRunContent []*EG_ContentRunContent
}
type CT_FFTextType struct {

	// Text Box Form Field Type Values
	ValAttr ST_FFTextType
}

func (_ffbgf *CT_Highlight) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_adaf, _eadcc := _ffbgf.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _eadcc != nil {
		return _eadcc
	}
	start.Attr = append(start.Attr, _adaf)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewWdCT_WordprocessingCanvas() *WdCT_WordprocessingCanvas {
	_fdbaf := &WdCT_WordprocessingCanvas{}
	return _fdbaf
}

type CT_Captions struct {

	// Single Caption Type Definition
	Caption []*CT_Caption

	// Automatic Captioning Settings
	AutoCaptions *CT_AutoCaptions
}

func (_bdgge ST_DocProtect) Validate() error { return _bdgge.ValidateWithPath("") }
func (_edgac *ST_HexColor) Validate() error  { return _edgac.ValidateWithPath("") }
func (_ababge *CT_SdtRow) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ababge.SdtPr != nil {
		_eaggcf := _d.StartElement{Name: _d.Name{Local: "w:sdtPr"}}
		e.EncodeElement(_ababge.SdtPr, _eaggcf)
	}
	if _ababge.SdtEndPr != nil {
		_abgfd := _d.StartElement{Name: _d.Name{Local: "w:sdtEndPr"}}
		e.EncodeElement(_ababge.SdtEndPr, _abgfd)
	}
	if _ababge.SdtContent != nil {
		_eddc := _d.StartElement{Name: _d.Name{Local: "w:sdtContent"}}
		e.EncodeElement(_ababge.SdtContent, _eddc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_CharacterSpacing struct {

	// Value
	ValAttr ST_CharacterSpacing
}

func (_bffgda *ST_DocPartGallery) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bffgda = 0
	case "placeholder":
		*_bffgda = 1
	case "any":
		*_bffgda = 2
	case "default":
		*_bffgda = 3
	case "docParts":
		*_bffgda = 4
	case "coverPg":
		*_bffgda = 5
	case "eq":
		*_bffgda = 6
	case "ftrs":
		*_bffgda = 7
	case "hdrs":
		*_bffgda = 8
	case "pgNum":
		*_bffgda = 9
	case "tbls":
		*_bffgda = 10
	case "watermarks":
		*_bffgda = 11
	case "autoTxt":
		*_bffgda = 12
	case "txtBox":
		*_bffgda = 13
	case "pgNumT":
		*_bffgda = 14
	case "pgNumB":
		*_bffgda = 15
	case "pgNumMargins":
		*_bffgda = 16
	case "tblOfContents":
		*_bffgda = 17
	case "bib":
		*_bffgda = 18
	case "custQuickParts":
		*_bffgda = 19
	case "custCoverPg":
		*_bffgda = 20
	case "custEq":
		*_bffgda = 21
	case "custFtrs":
		*_bffgda = 22
	case "custHdrs":
		*_bffgda = 23
	case "custPgNum":
		*_bffgda = 24
	case "custTbls":
		*_bffgda = 25
	case "custWatermarks":
		*_bffgda = 26
	case "custAutoTxt":
		*_bffgda = 27
	case "custTxtBox":
		*_bffgda = 28
	case "custPgNumT":
		*_bffgda = 29
	case "custPgNumB":
		*_bffgda = 30
	case "custPgNumMargins":
		*_bffgda = 31
	case "custTblOfContents":
		*_bffgda = 32
	case "custBib":
		*_bffgda = 33
	case "custom1":
		*_bffgda = 34
	case "custom2":
		*_bffgda = 35
	case "custom3":
		*_bffgda = 36
	case "custom4":
		*_bffgda = 37
	case "custom5":
		*_bffgda = 38
	}
	return nil
}

type CT_EdnProps struct {

	// Endnote Placement
	Pos *CT_EdnPos

	// Endnote Numbering Format
	NumFmt *CT_NumFmt

	// Footnote and Endnote Numbering Starting Value
	NumStart *CT_DecimalNumber

	// Footnote and Endnote Numbering Restart Location
	NumRestart *CT_NumRestart
}

func (_deeag *CT_TrackChangeNumbering) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _deeag.OriginalAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:original"}, Value: _b.Sprintf("\u0025v", *_deeag.OriginalAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _deeag.AuthorAttr)})
	if _deeag.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_deeag.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _deeag.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fffga *CT_Recipients) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_agfag := _d.StartElement{Name: _d.Name{Local: "w:recipientData"}}
	for _, _gcgee := range _fffga.RecipientData {
		e.EncodeElement(_gcgee, _agfag)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fgbgd ST_TabJc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fgbgd.String(), start)
}
func (_fcfgf *CT_Picture) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fcfgf.Any != nil {
		for _, _bcfcb := range _fcfgf.Any {
			_bcfcb.MarshalXML(e, _d.StartElement{})
		}
	}
	if _fcfgf.Movie != nil {
		_cgfca := _d.StartElement{Name: _d.Name{Local: "w:movie"}}
		e.EncodeElement(_fcfgf.Movie, _cgfca)
	}
	if _fcfgf.Control != nil {
		_cdaec := _d.StartElement{Name: _d.Name{Local: "w:control"}}
		e.EncodeElement(_fcfgf.Control, _cdaec)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_MeasurementOrPercent(s string) (ST_MeasurementOrPercent, error) {
	_cagcbac := ST_MeasurementOrPercent{}
	if _g.ST_UniversalMeasurePatternRe.MatchString(s) {
		_cagcbac.ST_UniversalMeasure = &s
	} else {
		_cagcbac.ST_DecimalNumberOrPercent = &ST_DecimalNumberOrPercent{}
		if _g.ST_PercentagePatternRe.MatchString(s) {
			_cagcbac.ST_DecimalNumberOrPercent.ST_Percentage = &s
		} else {
			_dbffce, _faccfa := _dd.ParseFloat(s, 64)
			if _faccfa != nil {
				return _cagcbac, _b.Errorf("parsing\u0020%s\u0020as\u0020int:\u0020\u0025s", s, _faccfa)
			}
			_cagcbac.ST_DecimalNumberOrPercent.ST_UnqualifiedPercentage = _ga.Int64(int64(_dbffce))
		}
	}
	return _cagcbac, nil
}

// ValidateWithPath validates the CT_RubyContent and its children, prefixing error messages with path
func (_gaagf *CT_RubyContent) ValidateWithPath(path string) error {
	if _gaagf.R != nil {
		if _dcgc := _gaagf.R.ValidateWithPath(path + "\u002fR"); _dcgc != nil {
			return _dcgc
		}
	}
	for _gbgef, _dgfg := range _gaagf.EG_RunLevelElts {
		if _aggdf := _dgfg.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _gbgef)); _aggdf != nil {
			return _aggdf
		}
	}
	return nil
}

type CT_UnsignedDecimalNumber struct {

	// Positive Decimal Number Value
	ValAttr uint64
}

// Validate validates the CT_TrPrChange and its children
func (_ggbcc *CT_TrPrChange) Validate() error { return _ggbcc.ValidateWithPath("CT_TrPrChange") }
func (_fffcf *Styles) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:styles"
	return _fffcf.CT_Styles.MarshalXML(e, start)
}

type CT_ParaRPrOriginal struct {

	// Inserted Paragraph
	Ins *CT_TrackChange

	// Deleted Paragraph
	Del *CT_TrackChange

	// Move Source Paragraph
	MoveFrom *CT_TrackChange

	// Move Destination Paragraph
	MoveTo *CT_TrackChange

	// Referenced Character Style
	RStyle *CT_String

	// Run Fonts
	RFonts *CT_Fonts

	// Bold
	B *CT_OnOff

	// Complex Script Bold
	BCs *CT_OnOff

	// Italics
	I *CT_OnOff

	// Complex Script Italics
	ICs *CT_OnOff

	// Display All Characters As Capital Letters
	Caps *CT_OnOff

	// Small Caps
	SmallCaps *CT_OnOff

	// Single Strikethrough
	Strike *CT_OnOff

	// Double Strikethrough
	Dstrike *CT_OnOff

	// Display Character Outline
	Outline *CT_OnOff

	// Shadow
	Shadow *CT_OnOff

	// Embossing
	Emboss *CT_OnOff

	// Imprinting
	Imprint *CT_OnOff

	// Do Not Check Spelling or Grammar
	NoProof *CT_OnOff

	// Use Document Grid Settings For Inter-Character Spacing
	SnapToGrid *CT_OnOff

	// Hidden Text
	Vanish *CT_OnOff

	// Web Hidden Text
	WebHidden *CT_OnOff

	// Run Content Color
	Color *CT_Color

	// Character Spacing Adjustment
	Spacing *CT_SignedTwipsMeasure

	// Expanded/Compressed Text
	W *CT_TextScale

	// Font Kerning
	Kern *CT_HpsMeasure

	// Vertically Raised or Lowered Text
	Position *CT_SignedHpsMeasure

	// Non-Complex Script Font Size
	Sz *CT_HpsMeasure

	// Complex Script Font Size
	SzCs *CT_HpsMeasure

	// Text Highlighting
	Highlight *CT_Highlight

	// Underline
	U *CT_Underline

	// Animated Text Effect
	Effect *CT_TextEffect

	// Text Border
	Bdr *CT_Border

	// Run Shading
	Shd *CT_Shd

	// Manual Run Width
	FitText *CT_FitText

	// Subscript/Superscript Text
	VertAlign *CT_VerticalAlignRun

	// Right To Left Text
	Rtl *CT_OnOff

	// Use Complex Script Formatting on Run
	Cs *CT_OnOff

	// Emphasis Mark
	Em *CT_Em

	// Languages for Run Content
	Lang *CT_Language

	// East Asian Typography Settings
	EastAsianLayout *CT_EastAsianLayout

	// Paragraph Mark Is Always Hidden
	SpecVanish *CT_OnOff

	// Office Open XML Math
	OMath *CT_OnOff
}
type EG_RangeMarkupElements struct {

	// Bookmark Start
	BookmarkStart *CT_Bookmark

	// Bookmark End
	BookmarkEnd *CT_MarkupRange

	// Move Source Location Container - Start
	MoveFromRangeStart *CT_MoveBookmark

	// Move Source Location Container - End
	MoveFromRangeEnd *CT_MarkupRange

	// Move Destination Location Container - Start
	MoveToRangeStart *CT_MoveBookmark

	// Move Destination Location Container - End
	MoveToRangeEnd *CT_MarkupRange

	// Comment Anchor Range Start
	CommentRangeStart *CT_MarkupRange

	// Comment Anchor Range End
	CommentRangeEnd *CT_MarkupRange

	// Custom XML Markup Insertion Start
	CustomXmlInsRangeStart *CT_TrackChange

	// Custom XML Markup Insertion End
	CustomXmlInsRangeEnd *CT_Markup

	// Custom XML Markup Deletion Start
	CustomXmlDelRangeStart *CT_TrackChange

	// Custom XML Markup Deletion End
	CustomXmlDelRangeEnd *CT_Markup

	// Custom XML Markup Move Source Start
	CustomXmlMoveFromRangeStart *CT_TrackChange

	// Custom XML Markup Move Source End
	CustomXmlMoveFromRangeEnd *CT_Markup

	// Custom XML Markup Move Destination Location Start
	CustomXmlMoveToRangeStart *CT_TrackChange

	// Custom XML Markup Move Destination Location End
	CustomXmlMoveToRangeEnd *CT_Markup
}

// Validate validates the WdCT_WordprocessingCanvasChoice and its children
func (_eddfg *WdCT_WordprocessingCanvasChoice) Validate() error {
	return _eddfg.ValidateWithPath("WdCT_WordprocessingCanvasChoice")
}
func (_acffaa *ST_SdtDateMappingType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fbdgdd, _ggddfg := d.Token()
	if _ggddfg != nil {
		return _ggddfg
	}
	if _bdeae, _cbeeaa := _fbdgdd.(_d.EndElement); _cbeeaa && _bdeae.Name == start.Name {
		*_acffaa = 1
		return nil
	}
	if _fccbee, _cdeage := _fbdgdd.(_d.CharData); !_cdeage {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fbdgdd)
	} else {
		switch string(_fccbee) {
		case "":
			*_acffaa = 0
		case "text":
			*_acffaa = 1
		case "date":
			*_acffaa = 2
		case "dateTime":
			*_acffaa = 3
		}
	}
	_fbdgdd, _ggddfg = d.Token()
	if _ggddfg != nil {
		return _ggddfg
	}
	if _dffce, _deafa := _fbdgdd.(_d.EndElement); _deafa && _dffce.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fbdgdd)
}
func (_eaabd ST_FrameScrollbar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_eaabd.String(), start)
}

// ST_SignedTwipsMeasure is a union type
type ST_SignedTwipsMeasure struct {
	Int64               *int64
	ST_UniversalMeasure *string
}

func (_eeefea *ST_TabJc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cbefb, _ebaed := d.Token()
	if _ebaed != nil {
		return _ebaed
	}
	if _abecf, _egfbf := _cbefb.(_d.EndElement); _egfbf && _abecf.Name == start.Name {
		*_eeefea = 1
		return nil
	}
	if _cgdfe, _cdcbf := _cbefb.(_d.CharData); !_cdcbf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cbefb)
	} else {
		switch string(_cgdfe) {
		case "":
			*_eeefea = 0
		case "clear":
			*_eeefea = 1
		case "start":
			*_eeefea = 2
		case "center":
			*_eeefea = 3
		case "end":
			*_eeefea = 4
		case "decimal":
			*_eeefea = 5
		case "bar":
			*_eeefea = 6
		case "num":
			*_eeefea = 7
		case "left":
			*_eeefea = 8
		case "right":
			*_eeefea = 9
		}
	}
	_cbefb, _ebaed = d.Token()
	if _ebaed != nil {
		return _ebaed
	}
	if _fbfge, _bcbac := _cbefb.(_d.EndElement); _bcbac && _fbfge.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cbefb)
}
func (_cbfbce ST_Hint) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cbfbce.String(), start)
}
func (_abdaa *ST_TextboxTightWrap) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_abdaa = 0
	case "none":
		*_abdaa = 1
	case "allLines":
		*_abdaa = 2
	case "firstAndLastLine":
		*_abdaa = 3
	case "firstLineOnly":
		*_abdaa = 4
	case "lastLineOnly":
		*_abdaa = 5
	}
	return nil
}
func (_begaa ST_FrameScrollbar) Validate() error { return _begaa.ValidateWithPath("") }
func (_ebebc *CT_SmartTagType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ebebc.NamespaceuriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:namespaceuri"}, Value: _b.Sprintf("\u0025v", *_ebebc.NamespaceuriAttr)})
	}
	if _ebebc.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", *_ebebc.NameAttr)})
	}
	if _ebebc.UrlAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:url"}, Value: _b.Sprintf("\u0025v", *_ebebc.UrlAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_PBdr struct {

	// Paragraph Border Above Identical Paragraphs
	Top *CT_Border

	// Left Paragraph Border
	Left *CT_Border

	// Paragraph Border Below Identical Paragraphs
	Bottom *CT_Border

	// Right Paragraph Border
	Right *CT_Border

	// Paragraph Border Between Identical Paragraphs
	Between *CT_Border

	// Paragraph Border Between Facing Pages
	Bar *CT_Border
}

func (_edcdec *EG_BlockLevelElts) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cgead:
	for {
		_deade, _fdaagg := d.Token()
		if _fdaagg != nil {
			return _fdaagg
		}
		switch _fcbec := _deade.(type) {
		case _d.StartElement:
			switch _fcbec.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_aebafa := NewCT_AltChunk()
				if _ccafdd := d.DecodeElement(_aebafa, &_fcbec); _ccafdd != nil {
					return _ccafdd
				}
				_edcdec.AltChunk = append(_edcdec.AltChunk, _aebafa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_agdbgg := NewEG_ContentBlockContent()
				_agdbgg.CustomXml = NewCT_CustomXmlBlock()
				if _acdadg := d.DecodeElement(_agdbgg.CustomXml, &_fcbec); _acdadg != nil {
					return _acdadg
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _agdbgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_ddfceg := NewEG_ContentBlockContent()
				_ddfceg.Sdt = NewCT_SdtBlock()
				if _bgggc := d.DecodeElement(_ddfceg.Sdt, &_fcbec); _bgggc != nil {
					return _bgggc
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _ddfceg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_dfafc := NewEG_ContentBlockContent()
				_dgfbb := NewCT_P()
				if _agfdfe := d.DecodeElement(_dgfbb, &_fcbec); _agfdfe != nil {
					return _agfdfe
				}
				_dfafc.P = append(_dfafc.P, _dgfbb)
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _dfafc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_dbdda := NewEG_ContentBlockContent()
				_fgdad := NewCT_Tbl()
				if _ebefaee := d.DecodeElement(_fgdad, &_fcbec); _ebefaee != nil {
					return _ebefaee
				}
				_dbdda.Tbl = append(_dbdda.Tbl, _fgdad)
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _dbdda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_cbdadd := NewEG_ContentBlockContent()
				_fdgegb := NewEG_RunLevelElts()
				_fdgegb.ProofErr = NewCT_ProofErr()
				if _afgdb := d.DecodeElement(_fdgegb.ProofErr, &_fcbec); _afgdb != nil {
					return _afgdb
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _cbdadd)
				_cbdadd.EG_RunLevelElts = append(_cbdadd.EG_RunLevelElts, _fdgegb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_gcgfd := NewEG_ContentBlockContent()
				_abfced := NewEG_RunLevelElts()
				_abfced.PermStart = NewCT_PermStart()
				if _dccdb := d.DecodeElement(_abfced.PermStart, &_fcbec); _dccdb != nil {
					return _dccdb
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _gcgfd)
				_gcgfd.EG_RunLevelElts = append(_gcgfd.EG_RunLevelElts, _abfced)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_gfcbc := NewEG_ContentBlockContent()
				_dgfac := NewEG_RunLevelElts()
				_dgfac.PermEnd = NewCT_Perm()
				if _gccbd := d.DecodeElement(_dgfac.PermEnd, &_fcbec); _gccbd != nil {
					return _gccbd
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _gfcbc)
				_gfcbc.EG_RunLevelElts = append(_gfcbc.EG_RunLevelElts, _dgfac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cceff := NewEG_ContentBlockContent()
				_degdd := NewEG_RunLevelElts()
				_degdd.Ins = NewCT_RunTrackChange()
				if _adffb := d.DecodeElement(_degdd.Ins, &_fcbec); _adffb != nil {
					return _adffb
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _cceff)
				_cceff.EG_RunLevelElts = append(_cceff.EG_RunLevelElts, _degdd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_addcd := NewEG_ContentBlockContent()
				_eeebd := NewEG_RunLevelElts()
				_eeebd.Del = NewCT_RunTrackChange()
				if _bfggg := d.DecodeElement(_eeebd.Del, &_fcbec); _bfggg != nil {
					return _bfggg
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _addcd)
				_addcd.EG_RunLevelElts = append(_addcd.EG_RunLevelElts, _eeebd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_cbbcd := NewEG_ContentBlockContent()
				_eccbd := NewEG_RunLevelElts()
				_eccbd.MoveFrom = NewCT_RunTrackChange()
				if _dbcdg := d.DecodeElement(_eccbd.MoveFrom, &_fcbec); _dbcdg != nil {
					return _dbcdg
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _cbbcd)
				_cbbcd.EG_RunLevelElts = append(_cbbcd.EG_RunLevelElts, _eccbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_bdgfd := NewEG_ContentBlockContent()
				_ffgfdg := NewEG_RunLevelElts()
				_ffgfdg.MoveTo = NewCT_RunTrackChange()
				if _cfbae := d.DecodeElement(_ffgfdg.MoveTo, &_fcbec); _cfbae != nil {
					return _cfbae
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _bdgfd)
				_bdgfd.EG_RunLevelElts = append(_bdgfd.EG_RunLevelElts, _ffgfdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_degbe := NewEG_ContentBlockContent()
				_caegec := NewEG_RunLevelElts()
				_effgf := NewEG_RangeMarkupElements()
				_effgf.BookmarkStart = NewCT_Bookmark()
				if _eggeeg := d.DecodeElement(_effgf.BookmarkStart, &_fcbec); _eggeeg != nil {
					return _eggeeg
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _degbe)
				_degbe.EG_RunLevelElts = append(_degbe.EG_RunLevelElts, _caegec)
				_caegec.EG_RangeMarkupElements = append(_caegec.EG_RangeMarkupElements, _effgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_ccedf := NewEG_ContentBlockContent()
				_cagdd := NewEG_RunLevelElts()
				_ebeac := NewEG_RangeMarkupElements()
				_ebeac.BookmarkEnd = NewCT_MarkupRange()
				if _aadag := d.DecodeElement(_ebeac.BookmarkEnd, &_fcbec); _aadag != nil {
					return _aadag
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _ccedf)
				_ccedf.EG_RunLevelElts = append(_ccedf.EG_RunLevelElts, _cagdd)
				_cagdd.EG_RangeMarkupElements = append(_cagdd.EG_RangeMarkupElements, _ebeac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_ggaaeda := NewEG_ContentBlockContent()
				_fbefbb := NewEG_RunLevelElts()
				_dfeed := NewEG_RangeMarkupElements()
				_dfeed.MoveFromRangeStart = NewCT_MoveBookmark()
				if _bbffc := d.DecodeElement(_dfeed.MoveFromRangeStart, &_fcbec); _bbffc != nil {
					return _bbffc
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _ggaaeda)
				_ggaaeda.EG_RunLevelElts = append(_ggaaeda.EG_RunLevelElts, _fbefbb)
				_fbefbb.EG_RangeMarkupElements = append(_fbefbb.EG_RangeMarkupElements, _dfeed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_fbcaad := NewEG_ContentBlockContent()
				_dggcb := NewEG_RunLevelElts()
				_ecegbg := NewEG_RangeMarkupElements()
				_ecegbg.MoveFromRangeEnd = NewCT_MarkupRange()
				if _geefg := d.DecodeElement(_ecegbg.MoveFromRangeEnd, &_fcbec); _geefg != nil {
					return _geefg
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _fbcaad)
				_fbcaad.EG_RunLevelElts = append(_fbcaad.EG_RunLevelElts, _dggcb)
				_dggcb.EG_RangeMarkupElements = append(_dggcb.EG_RangeMarkupElements, _ecegbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_gffdd := NewEG_ContentBlockContent()
				_bffdc := NewEG_RunLevelElts()
				_dcfdb := NewEG_RangeMarkupElements()
				_dcfdb.MoveToRangeStart = NewCT_MoveBookmark()
				if _aadgc := d.DecodeElement(_dcfdb.MoveToRangeStart, &_fcbec); _aadgc != nil {
					return _aadgc
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _gffdd)
				_gffdd.EG_RunLevelElts = append(_gffdd.EG_RunLevelElts, _bffdc)
				_bffdc.EG_RangeMarkupElements = append(_bffdc.EG_RangeMarkupElements, _dcfdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_badcc := NewEG_ContentBlockContent()
				_ddcgdf := NewEG_RunLevelElts()
				_cgcegd := NewEG_RangeMarkupElements()
				_cgcegd.MoveToRangeEnd = NewCT_MarkupRange()
				if _cbabdd := d.DecodeElement(_cgcegd.MoveToRangeEnd, &_fcbec); _cbabdd != nil {
					return _cbabdd
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _badcc)
				_badcc.EG_RunLevelElts = append(_badcc.EG_RunLevelElts, _ddcgdf)
				_ddcgdf.EG_RangeMarkupElements = append(_ddcgdf.EG_RangeMarkupElements, _cgcegd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_adaffa := NewEG_ContentBlockContent()
				_bbdgff := NewEG_RunLevelElts()
				_eafgdc := NewEG_RangeMarkupElements()
				_eafgdc.CommentRangeStart = NewCT_MarkupRange()
				if _bffge := d.DecodeElement(_eafgdc.CommentRangeStart, &_fcbec); _bffge != nil {
					return _bffge
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _adaffa)
				_adaffa.EG_RunLevelElts = append(_adaffa.EG_RunLevelElts, _bbdgff)
				_bbdgff.EG_RangeMarkupElements = append(_bbdgff.EG_RangeMarkupElements, _eafgdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_bafgcb := NewEG_ContentBlockContent()
				_cfafd := NewEG_RunLevelElts()
				_cdabe := NewEG_RangeMarkupElements()
				_cdabe.CommentRangeEnd = NewCT_MarkupRange()
				if _bcedd := d.DecodeElement(_cdabe.CommentRangeEnd, &_fcbec); _bcedd != nil {
					return _bcedd
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _bafgcb)
				_bafgcb.EG_RunLevelElts = append(_bafgcb.EG_RunLevelElts, _cfafd)
				_cfafd.EG_RangeMarkupElements = append(_cfafd.EG_RangeMarkupElements, _cdabe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_daddbb := NewEG_ContentBlockContent()
				_eggcf := NewEG_RunLevelElts()
				_bdcefc := NewEG_RangeMarkupElements()
				_bdcefc.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _eebbac := d.DecodeElement(_bdcefc.CustomXmlInsRangeStart, &_fcbec); _eebbac != nil {
					return _eebbac
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _daddbb)
				_daddbb.EG_RunLevelElts = append(_daddbb.EG_RunLevelElts, _eggcf)
				_eggcf.EG_RangeMarkupElements = append(_eggcf.EG_RangeMarkupElements, _bdcefc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_becbdf := NewEG_ContentBlockContent()
				_ddbegb := NewEG_RunLevelElts()
				_ageaf := NewEG_RangeMarkupElements()
				_ageaf.CustomXmlInsRangeEnd = NewCT_Markup()
				if _accffa := d.DecodeElement(_ageaf.CustomXmlInsRangeEnd, &_fcbec); _accffa != nil {
					return _accffa
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _becbdf)
				_becbdf.EG_RunLevelElts = append(_becbdf.EG_RunLevelElts, _ddbegb)
				_ddbegb.EG_RangeMarkupElements = append(_ddbegb.EG_RangeMarkupElements, _ageaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_cccdd := NewEG_ContentBlockContent()
				_edgeb := NewEG_RunLevelElts()
				_babea := NewEG_RangeMarkupElements()
				_babea.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gddaa := d.DecodeElement(_babea.CustomXmlDelRangeStart, &_fcbec); _gddaa != nil {
					return _gddaa
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _cccdd)
				_cccdd.EG_RunLevelElts = append(_cccdd.EG_RunLevelElts, _edgeb)
				_edgeb.EG_RangeMarkupElements = append(_edgeb.EG_RangeMarkupElements, _babea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_abgff := NewEG_ContentBlockContent()
				_efedaf := NewEG_RunLevelElts()
				_ecfdd := NewEG_RangeMarkupElements()
				_ecfdd.CustomXmlDelRangeEnd = NewCT_Markup()
				if _dedce := d.DecodeElement(_ecfdd.CustomXmlDelRangeEnd, &_fcbec); _dedce != nil {
					return _dedce
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _abgff)
				_abgff.EG_RunLevelElts = append(_abgff.EG_RunLevelElts, _efedaf)
				_efedaf.EG_RangeMarkupElements = append(_efedaf.EG_RangeMarkupElements, _ecfdd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_fefgeb := NewEG_ContentBlockContent()
				_acfba := NewEG_RunLevelElts()
				_effff := NewEG_RangeMarkupElements()
				_effff.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _badeaa := d.DecodeElement(_effff.CustomXmlMoveFromRangeStart, &_fcbec); _badeaa != nil {
					return _badeaa
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _fefgeb)
				_fefgeb.EG_RunLevelElts = append(_fefgeb.EG_RunLevelElts, _acfba)
				_acfba.EG_RangeMarkupElements = append(_acfba.EG_RangeMarkupElements, _effff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_fabgfg := NewEG_ContentBlockContent()
				_cgfdf := NewEG_RunLevelElts()
				_cafcf := NewEG_RangeMarkupElements()
				_cafcf.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _dbacaf := d.DecodeElement(_cafcf.CustomXmlMoveFromRangeEnd, &_fcbec); _dbacaf != nil {
					return _dbacaf
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _fabgfg)
				_fabgfg.EG_RunLevelElts = append(_fabgfg.EG_RunLevelElts, _cgfdf)
				_cgfdf.EG_RangeMarkupElements = append(_cgfdf.EG_RangeMarkupElements, _cafcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_cebfb := NewEG_ContentBlockContent()
				_dbaefb := NewEG_RunLevelElts()
				_gfaaa := NewEG_RangeMarkupElements()
				_gfaaa.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _dgde := d.DecodeElement(_gfaaa.CustomXmlMoveToRangeStart, &_fcbec); _dgde != nil {
					return _dgde
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _cebfb)
				_cebfb.EG_RunLevelElts = append(_cebfb.EG_RunLevelElts, _dbaefb)
				_dbaefb.EG_RangeMarkupElements = append(_dbaefb.EG_RangeMarkupElements, _gfaaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_gagagf := NewEG_ContentBlockContent()
				_dbdgaf := NewEG_RunLevelElts()
				_fdfdbf := NewEG_RangeMarkupElements()
				_fdfdbf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _cbdbe := d.DecodeElement(_fdfdbf.CustomXmlMoveToRangeEnd, &_fcbec); _cbdbe != nil {
					return _cbdbe
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _gagagf)
				_gagagf.EG_RunLevelElts = append(_gagagf.EG_RunLevelElts, _dbdgaf)
				_dbdgaf.EG_RangeMarkupElements = append(_dbdgaf.EG_RangeMarkupElements, _fdfdbf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_dggga := NewEG_ContentBlockContent()
				_gfbbd := NewEG_RunLevelElts()
				_aecdd := NewEG_MathContent()
				_aecdd.OMathPara = _f.NewOMathPara()
				if _cgacf := d.DecodeElement(_aecdd.OMathPara, &_fcbec); _cgacf != nil {
					return _cgacf
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _dggga)
				_dggga.EG_RunLevelElts = append(_dggga.EG_RunLevelElts, _gfbbd)
				_gfbbd.EG_MathContent = append(_gfbbd.EG_MathContent, _aecdd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_dagagg := NewEG_ContentBlockContent()
				_bfaad := NewEG_RunLevelElts()
				_gagebe := NewEG_MathContent()
				_gagebe.OMath = _f.NewOMath()
				if _gbccae := d.DecodeElement(_gagebe.OMath, &_fcbec); _gbccae != nil {
					return _gbccae
				}
				_edcdec.EG_ContentBlockContent = append(_edcdec.EG_ContentBlockContent, _dagagg)
				_dagagg.EG_RunLevelElts = append(_dagagg.EG_RunLevelElts, _bfaad)
				_bfaad.EG_MathContent = append(_bfaad.EG_MathContent, _gagebe)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020EG_BlockLevelElts\u0020\u0025v", _fcbec.Name)
				if _cdagg := d.Skip(); _cdagg != nil {
					return _cdagg
				}
			}
		case _d.EndElement:
			break _cgead
		case _d.CharData:
		}
	}
	return nil
}
func (_gagdb *CT_LsdException) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gadfc := range start.Attr {
		if _gadfc.Name.Local == "name" {
			_geggc, _ebggg := _gadfc.Value, error(nil)
			if _ebggg != nil {
				return _ebggg
			}
			_gagdb.NameAttr = _geggc
			continue
		}
		if _gadfc.Name.Local == "locked" {
			_bcbad, _cacec := ParseUnionST_OnOff(_gadfc.Value)
			if _cacec != nil {
				return _cacec
			}
			_gagdb.LockedAttr = &_bcbad
			continue
		}
		if _gadfc.Name.Local == "uiPriority" {
			_eggfc, _aaecg := _dd.ParseInt(_gadfc.Value, 10, 64)
			if _aaecg != nil {
				return _aaecg
			}
			_gagdb.UiPriorityAttr = &_eggfc
			continue
		}
		if _gadfc.Name.Local == "semiHidden" {
			_bdeaa, _dfaaa := ParseUnionST_OnOff(_gadfc.Value)
			if _dfaaa != nil {
				return _dfaaa
			}
			_gagdb.SemiHiddenAttr = &_bdeaa
			continue
		}
		if _gadfc.Name.Local == "unhideWhenUsed" {
			_gebea, _aadbc := ParseUnionST_OnOff(_gadfc.Value)
			if _aadbc != nil {
				return _aadbc
			}
			_gagdb.UnhideWhenUsedAttr = &_gebea
			continue
		}
		if _gadfc.Name.Local == "qFormat" {
			_ccbee, _fbfee := ParseUnionST_OnOff(_gadfc.Value)
			if _fbfee != nil {
				return _fbfee
			}
			_gagdb.QFormatAttr = &_ccbee
			continue
		}
	}
	for {
		_edcc, _afbaf := d.Token()
		if _afbaf != nil {
			return _b.Errorf("parsing CT_LsdException:\u0020\u0025s", _afbaf)
		}
		if _ddbc, _ggce := _edcc.(_d.EndElement); _ggce && _ddbc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_afccb *WdCT_WrapPath) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afccb.Start = _eb.NewCT_Point2D()
	for _, _fgfda := range start.Attr {
		if _fgfda.Name.Local == "edited" {
			_afggfb, _ebgga := _dd.ParseBool(_fgfda.Value)
			if _ebgga != nil {
				return _ebgga
			}
			_afccb.EditedAttr = &_afggfb
			continue
		}
	}
_adaef:
	for {
		_cffbc, _aggce := d.Token()
		if _aggce != nil {
			return _aggce
		}
		switch _ecagg := _cffbc.(type) {
		case _d.StartElement:
			switch _ecagg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "start"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "start"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "start"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "start"}:
				if _bbdae := d.DecodeElement(_afccb.Start, &_ecagg); _bbdae != nil {
					return _bbdae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "lineTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "lineTo"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "lineTo"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lineTo"}:
				_cbffcc := _eb.NewCT_Point2D()
				if _fbabbd := d.DecodeElement(_cbffcc, &_ecagg); _fbabbd != nil {
					return _fbabbd
				}
				_afccb.LineTo = append(_afccb.LineTo, _cbffcc)
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020WdCT_WrapPath \u0025v", _ecagg.Name)
				if _ffaeb := d.Skip(); _ffaeb != nil {
					return _ffaeb
				}
			}
		case _d.EndElement:
			break _adaef
		case _d.CharData:
		}
	}
	return nil
}
func (_edbab ST_TabJc) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bgbfb := _d.Attr{}
	_bgbfb.Name = name
	switch _edbab {
	case ST_TabJcUnset:
		_bgbfb.Value = ""
	case ST_TabJcClear:
		_bgbfb.Value = "clear"
	case ST_TabJcStart:
		_bgbfb.Value = "start"
	case ST_TabJcCenter:
		_bgbfb.Value = "center"
	case ST_TabJcEnd:
		_bgbfb.Value = "end"
	case ST_TabJcDecimal:
		_bgbfb.Value = "decimal"
	case ST_TabJcBar:
		_bgbfb.Value = "bar"
	case ST_TabJcNum:
		_bgbfb.Value = "num"
	case ST_TabJcLeft:
		_bgbfb.Value = "left"
	case ST_TabJcRight:
		_bgbfb.Value = "right"
	}
	return _bgbfb, nil
}
func (_bdd *CT_Body) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dga:
	for {
		_feaa, _bgf := d.Token()
		if _bgf != nil {
			return _bgf
		}
		switch _eaff := _feaa.(type) {
		case _d.StartElement:
			switch _eaff.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_bage := NewEG_BlockLevelElts()
				_cggg := NewCT_AltChunk()
				if _egce := d.DecodeElement(_cggg, &_eaff); _egce != nil {
					return _egce
				}
				_bage.AltChunk = append(_bage.AltChunk, _cggg)
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _bage)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_fda := NewEG_BlockLevelElts()
				_egg := NewEG_ContentBlockContent()
				_egg.CustomXml = NewCT_CustomXmlBlock()
				if _cga := d.DecodeElement(_egg.CustomXml, &_eaff); _cga != nil {
					return _cga
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _fda)
				_fda.EG_ContentBlockContent = append(_fda.EG_ContentBlockContent, _egg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_cce := NewEG_BlockLevelElts()
				_bbgb := NewEG_ContentBlockContent()
				_bbgb.Sdt = NewCT_SdtBlock()
				if _cbc := d.DecodeElement(_bbgb.Sdt, &_eaff); _cbc != nil {
					return _cbc
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _cce)
				_cce.EG_ContentBlockContent = append(_cce.EG_ContentBlockContent, _bbgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_acde := NewEG_BlockLevelElts()
				_bdad := NewEG_ContentBlockContent()
				_addg := NewCT_P()
				if _faba := d.DecodeElement(_addg, &_eaff); _faba != nil {
					return _faba
				}
				_bdad.P = append(_bdad.P, _addg)
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _acde)
				_acde.EG_ContentBlockContent = append(_acde.EG_ContentBlockContent, _bdad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_fabea := NewEG_BlockLevelElts()
				_fffa := NewEG_ContentBlockContent()
				_eee := NewCT_Tbl()
				if _dacf := d.DecodeElement(_eee, &_eaff); _dacf != nil {
					return _dacf
				}
				_fffa.Tbl = append(_fffa.Tbl, _eee)
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _fabea)
				_fabea.EG_ContentBlockContent = append(_fabea.EG_ContentBlockContent, _fffa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_dbga := NewEG_BlockLevelElts()
				_eca := NewEG_ContentBlockContent()
				_aae := NewEG_RunLevelElts()
				_aae.ProofErr = NewCT_ProofErr()
				if _cege := d.DecodeElement(_aae.ProofErr, &_eaff); _cege != nil {
					return _cege
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _dbga)
				_dbga.EG_ContentBlockContent = append(_dbga.EG_ContentBlockContent, _eca)
				_eca.EG_RunLevelElts = append(_eca.EG_RunLevelElts, _aae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ffc := NewEG_BlockLevelElts()
				_becd := NewEG_ContentBlockContent()
				_bbbe := NewEG_RunLevelElts()
				_bbbe.PermStart = NewCT_PermStart()
				if _dbgg := d.DecodeElement(_bbbe.PermStart, &_eaff); _dbgg != nil {
					return _dbgg
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _ffc)
				_ffc.EG_ContentBlockContent = append(_ffc.EG_ContentBlockContent, _becd)
				_becd.EG_RunLevelElts = append(_becd.EG_RunLevelElts, _bbbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_age := NewEG_BlockLevelElts()
				_daec := NewEG_ContentBlockContent()
				_cece := NewEG_RunLevelElts()
				_cece.PermEnd = NewCT_Perm()
				if _bbbg := d.DecodeElement(_cece.PermEnd, &_eaff); _bbbg != nil {
					return _bbbg
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _age)
				_age.EG_ContentBlockContent = append(_age.EG_ContentBlockContent, _daec)
				_daec.EG_RunLevelElts = append(_daec.EG_RunLevelElts, _cece)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_gdc := NewEG_BlockLevelElts()
				_afdd := NewEG_ContentBlockContent()
				_egef := NewEG_RunLevelElts()
				_egef.Ins = NewCT_RunTrackChange()
				if _cebe := d.DecodeElement(_egef.Ins, &_eaff); _cebe != nil {
					return _cebe
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _gdc)
				_gdc.EG_ContentBlockContent = append(_gdc.EG_ContentBlockContent, _afdd)
				_afdd.EG_RunLevelElts = append(_afdd.EG_RunLevelElts, _egef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ebbf := NewEG_BlockLevelElts()
				_bfb := NewEG_ContentBlockContent()
				_bbcg := NewEG_RunLevelElts()
				_bbcg.Del = NewCT_RunTrackChange()
				if _bce := d.DecodeElement(_bbcg.Del, &_eaff); _bce != nil {
					return _bce
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _ebbf)
				_ebbf.EG_ContentBlockContent = append(_ebbf.EG_ContentBlockContent, _bfb)
				_bfb.EG_RunLevelElts = append(_bfb.EG_RunLevelElts, _bbcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_ecf := NewEG_BlockLevelElts()
				_ffbc := NewEG_ContentBlockContent()
				_gfb := NewEG_RunLevelElts()
				_gfb.MoveFrom = NewCT_RunTrackChange()
				if _cffa := d.DecodeElement(_gfb.MoveFrom, &_eaff); _cffa != nil {
					return _cffa
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _ecf)
				_ecf.EG_ContentBlockContent = append(_ecf.EG_ContentBlockContent, _ffbc)
				_ffbc.EG_RunLevelElts = append(_ffbc.EG_RunLevelElts, _gfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_acb := NewEG_BlockLevelElts()
				_daga := NewEG_ContentBlockContent()
				_fceb := NewEG_RunLevelElts()
				_fceb.MoveTo = NewCT_RunTrackChange()
				if _abgd := d.DecodeElement(_fceb.MoveTo, &_eaff); _abgd != nil {
					return _abgd
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _acb)
				_acb.EG_ContentBlockContent = append(_acb.EG_ContentBlockContent, _daga)
				_daga.EG_RunLevelElts = append(_daga.EG_RunLevelElts, _fceb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_eegf := NewEG_BlockLevelElts()
				_gbb := NewEG_ContentBlockContent()
				_dbc := NewEG_RunLevelElts()
				_aaab := NewEG_RangeMarkupElements()
				_aaab.BookmarkStart = NewCT_Bookmark()
				if _beca := d.DecodeElement(_aaab.BookmarkStart, &_eaff); _beca != nil {
					return _beca
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _eegf)
				_eegf.EG_ContentBlockContent = append(_eegf.EG_ContentBlockContent, _gbb)
				_gbb.EG_RunLevelElts = append(_gbb.EG_RunLevelElts, _dbc)
				_dbc.EG_RangeMarkupElements = append(_dbc.EG_RangeMarkupElements, _aaab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_ggb := NewEG_BlockLevelElts()
				_agfb := NewEG_ContentBlockContent()
				_dcd := NewEG_RunLevelElts()
				_affb := NewEG_RangeMarkupElements()
				_affb.BookmarkEnd = NewCT_MarkupRange()
				if _cdbe := d.DecodeElement(_affb.BookmarkEnd, &_eaff); _cdbe != nil {
					return _cdbe
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _ggb)
				_ggb.EG_ContentBlockContent = append(_ggb.EG_ContentBlockContent, _agfb)
				_agfb.EG_RunLevelElts = append(_agfb.EG_RunLevelElts, _dcd)
				_dcd.EG_RangeMarkupElements = append(_dcd.EG_RangeMarkupElements, _affb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_gdgf := NewEG_BlockLevelElts()
				_dcdf := NewEG_ContentBlockContent()
				_ffeg := NewEG_RunLevelElts()
				_dgb := NewEG_RangeMarkupElements()
				_dgb.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gac := d.DecodeElement(_dgb.MoveFromRangeStart, &_eaff); _gac != nil {
					return _gac
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _gdgf)
				_gdgf.EG_ContentBlockContent = append(_gdgf.EG_ContentBlockContent, _dcdf)
				_dcdf.EG_RunLevelElts = append(_dcdf.EG_RunLevelElts, _ffeg)
				_ffeg.EG_RangeMarkupElements = append(_ffeg.EG_RangeMarkupElements, _dgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_bga := NewEG_BlockLevelElts()
				_ged := NewEG_ContentBlockContent()
				_dfag := NewEG_RunLevelElts()
				_begd := NewEG_RangeMarkupElements()
				_begd.MoveFromRangeEnd = NewCT_MarkupRange()
				if _baae := d.DecodeElement(_begd.MoveFromRangeEnd, &_eaff); _baae != nil {
					return _baae
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _bga)
				_bga.EG_ContentBlockContent = append(_bga.EG_ContentBlockContent, _ged)
				_ged.EG_RunLevelElts = append(_ged.EG_RunLevelElts, _dfag)
				_dfag.EG_RangeMarkupElements = append(_dfag.EG_RangeMarkupElements, _begd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_daf := NewEG_BlockLevelElts()
				_abe := NewEG_ContentBlockContent()
				_afcb := NewEG_RunLevelElts()
				_abd := NewEG_RangeMarkupElements()
				_abd.MoveToRangeStart = NewCT_MoveBookmark()
				if _bbbf := d.DecodeElement(_abd.MoveToRangeStart, &_eaff); _bbbf != nil {
					return _bbbf
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _daf)
				_daf.EG_ContentBlockContent = append(_daf.EG_ContentBlockContent, _abe)
				_abe.EG_RunLevelElts = append(_abe.EG_RunLevelElts, _afcb)
				_afcb.EG_RangeMarkupElements = append(_afcb.EG_RangeMarkupElements, _abd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_adb := NewEG_BlockLevelElts()
				_gffdc := NewEG_ContentBlockContent()
				_ffbe := NewEG_RunLevelElts()
				_deab := NewEG_RangeMarkupElements()
				_deab.MoveToRangeEnd = NewCT_MarkupRange()
				if _gab := d.DecodeElement(_deab.MoveToRangeEnd, &_eaff); _gab != nil {
					return _gab
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _adb)
				_adb.EG_ContentBlockContent = append(_adb.EG_ContentBlockContent, _gffdc)
				_gffdc.EG_RunLevelElts = append(_gffdc.EG_RunLevelElts, _ffbe)
				_ffbe.EG_RangeMarkupElements = append(_ffbe.EG_RangeMarkupElements, _deab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_eecc := NewEG_BlockLevelElts()
				_daea := NewEG_ContentBlockContent()
				_babe := NewEG_RunLevelElts()
				_gfd := NewEG_RangeMarkupElements()
				_gfd.CommentRangeStart = NewCT_MarkupRange()
				if _cgdg := d.DecodeElement(_gfd.CommentRangeStart, &_eaff); _cgdg != nil {
					return _cgdg
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _eecc)
				_eecc.EG_ContentBlockContent = append(_eecc.EG_ContentBlockContent, _daea)
				_daea.EG_RunLevelElts = append(_daea.EG_RunLevelElts, _babe)
				_babe.EG_RangeMarkupElements = append(_babe.EG_RangeMarkupElements, _gfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_aeaa := NewEG_BlockLevelElts()
				_dafb := NewEG_ContentBlockContent()
				_cfb := NewEG_RunLevelElts()
				_cbde := NewEG_RangeMarkupElements()
				_cbde.CommentRangeEnd = NewCT_MarkupRange()
				if _egba := d.DecodeElement(_cbde.CommentRangeEnd, &_eaff); _egba != nil {
					return _egba
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _aeaa)
				_aeaa.EG_ContentBlockContent = append(_aeaa.EG_ContentBlockContent, _dafb)
				_dafb.EG_RunLevelElts = append(_dafb.EG_RunLevelElts, _cfb)
				_cfb.EG_RangeMarkupElements = append(_cfb.EG_RangeMarkupElements, _cbde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gfbc := NewEG_BlockLevelElts()
				_feb := NewEG_ContentBlockContent()
				_bcg := NewEG_RunLevelElts()
				_gefe := NewEG_RangeMarkupElements()
				_gefe.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _eeee := d.DecodeElement(_gefe.CustomXmlInsRangeStart, &_eaff); _eeee != nil {
					return _eeee
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _gfbc)
				_gfbc.EG_ContentBlockContent = append(_gfbc.EG_ContentBlockContent, _feb)
				_feb.EG_RunLevelElts = append(_feb.EG_RunLevelElts, _bcg)
				_bcg.EG_RangeMarkupElements = append(_bcg.EG_RangeMarkupElements, _gefe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_ffd := NewEG_BlockLevelElts()
				_bbge := NewEG_ContentBlockContent()
				_gcdc := NewEG_RunLevelElts()
				_gbcg := NewEG_RangeMarkupElements()
				_gbcg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _gba := d.DecodeElement(_gbcg.CustomXmlInsRangeEnd, &_eaff); _gba != nil {
					return _gba
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _ffd)
				_ffd.EG_ContentBlockContent = append(_ffd.EG_ContentBlockContent, _bbge)
				_bbge.EG_RunLevelElts = append(_bbge.EG_RunLevelElts, _gcdc)
				_gcdc.EG_RangeMarkupElements = append(_gcdc.EG_RangeMarkupElements, _gbcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_gee := NewEG_BlockLevelElts()
				_cfffe := NewEG_ContentBlockContent()
				_eadc := NewEG_RunLevelElts()
				_cage := NewEG_RangeMarkupElements()
				_cage.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _cdbb := d.DecodeElement(_cage.CustomXmlDelRangeStart, &_eaff); _cdbb != nil {
					return _cdbb
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _gee)
				_gee.EG_ContentBlockContent = append(_gee.EG_ContentBlockContent, _cfffe)
				_cfffe.EG_RunLevelElts = append(_cfffe.EG_RunLevelElts, _eadc)
				_eadc.EG_RangeMarkupElements = append(_eadc.EG_RangeMarkupElements, _cage)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_dabd := NewEG_BlockLevelElts()
				_geffg := NewEG_ContentBlockContent()
				_bfdbd := NewEG_RunLevelElts()
				_dbcc := NewEG_RangeMarkupElements()
				_dbcc.CustomXmlDelRangeEnd = NewCT_Markup()
				if _gefg := d.DecodeElement(_dbcc.CustomXmlDelRangeEnd, &_eaff); _gefg != nil {
					return _gefg
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _dabd)
				_dabd.EG_ContentBlockContent = append(_dabd.EG_ContentBlockContent, _geffg)
				_geffg.EG_RunLevelElts = append(_geffg.EG_RunLevelElts, _bfdbd)
				_bfdbd.EG_RangeMarkupElements = append(_bfdbd.EG_RangeMarkupElements, _dbcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_ffggg := NewEG_BlockLevelElts()
				_dgeab := NewEG_ContentBlockContent()
				_eaca := NewEG_RunLevelElts()
				_fcebc := NewEG_RangeMarkupElements()
				_fcebc.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _ceaf := d.DecodeElement(_fcebc.CustomXmlMoveFromRangeStart, &_eaff); _ceaf != nil {
					return _ceaf
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _ffggg)
				_ffggg.EG_ContentBlockContent = append(_ffggg.EG_ContentBlockContent, _dgeab)
				_dgeab.EG_RunLevelElts = append(_dgeab.EG_RunLevelElts, _eaca)
				_eaca.EG_RangeMarkupElements = append(_eaca.EG_RangeMarkupElements, _fcebc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_daac := NewEG_BlockLevelElts()
				_fbac := NewEG_ContentBlockContent()
				_cbgg := NewEG_RunLevelElts()
				_geb := NewEG_RangeMarkupElements()
				_geb.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _befb := d.DecodeElement(_geb.CustomXmlMoveFromRangeEnd, &_eaff); _befb != nil {
					return _befb
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _daac)
				_daac.EG_ContentBlockContent = append(_daac.EG_ContentBlockContent, _fbac)
				_fbac.EG_RunLevelElts = append(_fbac.EG_RunLevelElts, _cbgg)
				_cbgg.EG_RangeMarkupElements = append(_cbgg.EG_RangeMarkupElements, _geb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gbgg := NewEG_BlockLevelElts()
				_effd := NewEG_ContentBlockContent()
				_caa := NewEG_RunLevelElts()
				_afddc := NewEG_RangeMarkupElements()
				_afddc.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _gdde := d.DecodeElement(_afddc.CustomXmlMoveToRangeStart, &_eaff); _gdde != nil {
					return _gdde
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _gbgg)
				_gbgg.EG_ContentBlockContent = append(_gbgg.EG_ContentBlockContent, _effd)
				_effd.EG_RunLevelElts = append(_effd.EG_RunLevelElts, _caa)
				_caa.EG_RangeMarkupElements = append(_caa.EG_RangeMarkupElements, _afddc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_bbdd := NewEG_BlockLevelElts()
				_cef := NewEG_ContentBlockContent()
				_gea := NewEG_RunLevelElts()
				_agb := NewEG_RangeMarkupElements()
				_agb.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _gbca := d.DecodeElement(_agb.CustomXmlMoveToRangeEnd, &_eaff); _gbca != nil {
					return _gbca
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _bbdd)
				_bbdd.EG_ContentBlockContent = append(_bbdd.EG_ContentBlockContent, _cef)
				_cef.EG_RunLevelElts = append(_cef.EG_RunLevelElts, _gea)
				_gea.EG_RangeMarkupElements = append(_gea.EG_RangeMarkupElements, _agb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_cfef := NewEG_BlockLevelElts()
				_dfbd := NewEG_ContentBlockContent()
				_gbaa := NewEG_RunLevelElts()
				_bcb := NewEG_MathContent()
				_bcb.OMathPara = _f.NewOMathPara()
				if _bbde := d.DecodeElement(_bcb.OMathPara, &_eaff); _bbde != nil {
					return _bbde
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _cfef)
				_cfef.EG_ContentBlockContent = append(_cfef.EG_ContentBlockContent, _dfbd)
				_dfbd.EG_RunLevelElts = append(_dfbd.EG_RunLevelElts, _gbaa)
				_gbaa.EG_MathContent = append(_gbaa.EG_MathContent, _bcb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_fga := NewEG_BlockLevelElts()
				_efb := NewEG_ContentBlockContent()
				_egaf := NewEG_RunLevelElts()
				_cfc := NewEG_MathContent()
				_cfc.OMath = _f.NewOMath()
				if _fgg := d.DecodeElement(_cfc.OMath, &_eaff); _fgg != nil {
					return _fgg
				}
				_bdd.EG_BlockLevelElts = append(_bdd.EG_BlockLevelElts, _fga)
				_fga.EG_ContentBlockContent = append(_fga.EG_ContentBlockContent, _efb)
				_efb.EG_RunLevelElts = append(_efb.EG_RunLevelElts, _egaf)
				_egaf.EG_MathContent = append(_egaf.EG_MathContent, _cfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sectPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sectPr"}:
				_bdd.SectPr = NewCT_SectPr()
				if _fcb := d.DecodeElement(_bdd.SectPr, &_eaff); _fcb != nil {
					return _fcb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Body\u0020\u0025v", _eaff.Name)
				if _ede := d.Skip(); _ede != nil {
					return _ede
				}
			}
		case _d.EndElement:
			break _dga
		case _d.CharData:
		}
	}
	return nil
}
func (_eddg *CT_Jc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eddg.ValAttr = ST_Jc(1)
	for _, _dabbe := range start.Attr {
		if _dabbe.Name.Local == "val" {
			_eddg.ValAttr.UnmarshalXMLAttr(_dabbe)
			continue
		}
	}
	for {
		_cbgf, _ffge := d.Token()
		if _ffge != nil {
			return _b.Errorf("parsing\u0020CT_Jc:\u0020\u0025s", _ffge)
		}
		if _cbged, _bccff := _cbgf.(_d.EndElement); _bccff && _cbged.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_PageNumber struct {

	// Page Number Format
	FmtAttr ST_NumberFormat

	// Starting Page Number
	StartAttr *int64

	// Chapter Heading Style
	ChapStyleAttr *int64

	// Chapter Separator Character
	ChapSepAttr ST_ChapterSep
}

func (_gaaab ST_HpsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gaaab.ST_UnsignedDecimalNumber != nil {
		e.EncodeToken(_d.CharData(_b.Sprintf("\u0025d", *_gaaab.ST_UnsignedDecimalNumber)))
	}
	if _gaaab.ST_PositiveUniversalMeasure != nil {
		e.EncodeToken(_d.CharData(*_gaaab.ST_PositiveUniversalMeasure))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}
func NewCT_PTab() *CT_PTab {
	_ebdca := &CT_PTab{}
	_ebdca.AlignmentAttr = ST_PTabAlignment(1)
	_ebdca.RelativeToAttr = ST_PTabRelativeTo(1)
	_ebdca.LeaderAttr = ST_PTabLeader(1)
	return _ebdca
}
func NewCT_MailMerge() *CT_MailMerge {
	_gecbf := &CT_MailMerge{}
	_gecbf.MainDocumentType = NewCT_MailMergeDocType()
	_gecbf.DataType = NewCT_MailMergeDataType()
	return _gecbf
}
func (_addfa *ST_LineNumberRestart) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_addfa = 0
	case "newPage":
		*_addfa = 1
	case "newSection":
		*_addfa = 2
	case "continuous":
		*_addfa = 3
	}
	return nil
}

type EG_ContentRowContent struct {

	// Table Row
	Tr []*CT_Row

	// Row-Level Custom XML Element
	CustomXml *CT_CustomXmlRow

	// Row-Level Structured Document Tag
	Sdt             *CT_SdtRow
	EG_RunLevelElts []*EG_RunLevelElts
}
type ST_Merge byte

func (_efdbg *CT_LongHexNumber) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _efdbg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_DocVar() *CT_DocVar { _fedbe := &CT_DocVar{}; return _fedbe }
func (_gbeff ST_RestartNumber) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_adggdg := _d.Attr{}
	_adggdg.Name = name
	switch _gbeff {
	case ST_RestartNumberUnset:
		_adggdg.Value = ""
	case ST_RestartNumberContinuous:
		_adggdg.Value = "continuous"
	case ST_RestartNumberEachSect:
		_adggdg.Value = "eachSect"
	case ST_RestartNumberEachPage:
		_adggdg.Value = "eachPage"
	}
	return _adggdg, nil
}

// Validate validates the CT_Comment and its children
func (_aeg *CT_Comment) Validate() error { return _aeg.ValidateWithPath("CT_Comment") }

type CT_Hyperlink struct {

	// Hyperlink Target Frame
	TgtFrameAttr *string

	// Associated String
	TooltipAttr *string

	// Location in Target Document
	DocLocationAttr *string

	// Add To Viewed Hyperlinks
	HistoryAttr *_g.ST_OnOff

	// Hyperlink Anchor
	AnchorAttr *string
	IdAttr     *string

	// Simple Field
	FldSimple []*CT_SimpleField

	// Hyperlink
	Hyperlink *CT_Hyperlink

	// Anchor for Subdocument Location
	SubDoc               *CT_Rel
	EG_ContentRunContent []*EG_ContentRunContent
}

// ValidateWithPath validates the CT_ParaRPrOriginal and its children, prefixing error messages with path
func (_dgfba *CT_ParaRPrOriginal) ValidateWithPath(path string) error {
	if _dgfba.Ins != nil {
		if _caccc := _dgfba.Ins.ValidateWithPath(path + "\u002fIns"); _caccc != nil {
			return _caccc
		}
	}
	if _dgfba.Del != nil {
		if _cgedb := _dgfba.Del.ValidateWithPath(path + "\u002fDel"); _cgedb != nil {
			return _cgedb
		}
	}
	if _dgfba.MoveFrom != nil {
		if _cfbfa := _dgfba.MoveFrom.ValidateWithPath(path + "\u002fMoveFrom"); _cfbfa != nil {
			return _cfbfa
		}
	}
	if _dgfba.MoveTo != nil {
		if _ecefa := _dgfba.MoveTo.ValidateWithPath(path + "\u002fMoveTo"); _ecefa != nil {
			return _ecefa
		}
	}
	if _dgfba.RStyle != nil {
		if _gdfdb := _dgfba.RStyle.ValidateWithPath(path + "\u002fRStyle"); _gdfdb != nil {
			return _gdfdb
		}
	}
	if _dgfba.RFonts != nil {
		if _cedebe := _dgfba.RFonts.ValidateWithPath(path + "\u002fRFonts"); _cedebe != nil {
			return _cedebe
		}
	}
	if _dgfba.B != nil {
		if _edccc := _dgfba.B.ValidateWithPath(path + "\u002fB"); _edccc != nil {
			return _edccc
		}
	}
	if _dgfba.BCs != nil {
		if _facafd := _dgfba.BCs.ValidateWithPath(path + "\u002fBCs"); _facafd != nil {
			return _facafd
		}
	}
	if _dgfba.I != nil {
		if _fcfab := _dgfba.I.ValidateWithPath(path + "\u002fI"); _fcfab != nil {
			return _fcfab
		}
	}
	if _dgfba.ICs != nil {
		if _gedfe := _dgfba.ICs.ValidateWithPath(path + "\u002fICs"); _gedfe != nil {
			return _gedfe
		}
	}
	if _dgfba.Caps != nil {
		if _dgegdb := _dgfba.Caps.ValidateWithPath(path + "\u002fCaps"); _dgegdb != nil {
			return _dgegdb
		}
	}
	if _dgfba.SmallCaps != nil {
		if _ffbdd := _dgfba.SmallCaps.ValidateWithPath(path + "\u002fSmallCaps"); _ffbdd != nil {
			return _ffbdd
		}
	}
	if _dgfba.Strike != nil {
		if _fbdf := _dgfba.Strike.ValidateWithPath(path + "\u002fStrike"); _fbdf != nil {
			return _fbdf
		}
	}
	if _dgfba.Dstrike != nil {
		if _gbbfd := _dgfba.Dstrike.ValidateWithPath(path + "\u002fDstrike"); _gbbfd != nil {
			return _gbbfd
		}
	}
	if _dgfba.Outline != nil {
		if _fgefd := _dgfba.Outline.ValidateWithPath(path + "\u002fOutline"); _fgefd != nil {
			return _fgefd
		}
	}
	if _dgfba.Shadow != nil {
		if _egcace := _dgfba.Shadow.ValidateWithPath(path + "\u002fShadow"); _egcace != nil {
			return _egcace
		}
	}
	if _dgfba.Emboss != nil {
		if _daffe := _dgfba.Emboss.ValidateWithPath(path + "\u002fEmboss"); _daffe != nil {
			return _daffe
		}
	}
	if _dgfba.Imprint != nil {
		if _cfffbc := _dgfba.Imprint.ValidateWithPath(path + "\u002fImprint"); _cfffbc != nil {
			return _cfffbc
		}
	}
	if _dgfba.NoProof != nil {
		if _dadcb := _dgfba.NoProof.ValidateWithPath(path + "\u002fNoProof"); _dadcb != nil {
			return _dadcb
		}
	}
	if _dgfba.SnapToGrid != nil {
		if _fffgb := _dgfba.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _fffgb != nil {
			return _fffgb
		}
	}
	if _dgfba.Vanish != nil {
		if _bfcc := _dgfba.Vanish.ValidateWithPath(path + "\u002fVanish"); _bfcc != nil {
			return _bfcc
		}
	}
	if _dgfba.WebHidden != nil {
		if _efgae := _dgfba.WebHidden.ValidateWithPath(path + "\u002fWebHidden"); _efgae != nil {
			return _efgae
		}
	}
	if _dgfba.Color != nil {
		if _accde := _dgfba.Color.ValidateWithPath(path + "\u002fColor"); _accde != nil {
			return _accde
		}
	}
	if _dgfba.Spacing != nil {
		if _ffcaf := _dgfba.Spacing.ValidateWithPath(path + "\u002fSpacing"); _ffcaf != nil {
			return _ffcaf
		}
	}
	if _dgfba.W != nil {
		if _ageba := _dgfba.W.ValidateWithPath(path + "\u002fW"); _ageba != nil {
			return _ageba
		}
	}
	if _dgfba.Kern != nil {
		if _egeeb := _dgfba.Kern.ValidateWithPath(path + "\u002fKern"); _egeeb != nil {
			return _egeeb
		}
	}
	if _dgfba.Position != nil {
		if _agdee := _dgfba.Position.ValidateWithPath(path + "\u002fPosition"); _agdee != nil {
			return _agdee
		}
	}
	if _dgfba.Sz != nil {
		if _cegaa := _dgfba.Sz.ValidateWithPath(path + "\u002fSz"); _cegaa != nil {
			return _cegaa
		}
	}
	if _dgfba.SzCs != nil {
		if _ccddf := _dgfba.SzCs.ValidateWithPath(path + "\u002fSzCs"); _ccddf != nil {
			return _ccddf
		}
	}
	if _dgfba.Highlight != nil {
		if _gdgddd := _dgfba.Highlight.ValidateWithPath(path + "\u002fHighlight"); _gdgddd != nil {
			return _gdgddd
		}
	}
	if _dgfba.U != nil {
		if _eaadg := _dgfba.U.ValidateWithPath(path + "\u002fU"); _eaadg != nil {
			return _eaadg
		}
	}
	if _dgfba.Effect != nil {
		if _bcbfcf := _dgfba.Effect.ValidateWithPath(path + "\u002fEffect"); _bcbfcf != nil {
			return _bcbfcf
		}
	}
	if _dgfba.Bdr != nil {
		if _bdgef := _dgfba.Bdr.ValidateWithPath(path + "\u002fBdr"); _bdgef != nil {
			return _bdgef
		}
	}
	if _dgfba.Shd != nil {
		if _bgfdga := _dgfba.Shd.ValidateWithPath(path + "\u002fShd"); _bgfdga != nil {
			return _bgfdga
		}
	}
	if _dgfba.FitText != nil {
		if _dffddb := _dgfba.FitText.ValidateWithPath(path + "\u002fFitText"); _dffddb != nil {
			return _dffddb
		}
	}
	if _dgfba.VertAlign != nil {
		if _aaeab := _dgfba.VertAlign.ValidateWithPath(path + "\u002fVertAlign"); _aaeab != nil {
			return _aaeab
		}
	}
	if _dgfba.Rtl != nil {
		if _gfeabb := _dgfba.Rtl.ValidateWithPath(path + "\u002fRtl"); _gfeabb != nil {
			return _gfeabb
		}
	}
	if _dgfba.Cs != nil {
		if _fdbbb := _dgfba.Cs.ValidateWithPath(path + "\u002fCs"); _fdbbb != nil {
			return _fdbbb
		}
	}
	if _dgfba.Em != nil {
		if _dbffd := _dgfba.Em.ValidateWithPath(path + "\u002fEm"); _dbffd != nil {
			return _dbffd
		}
	}
	if _dgfba.Lang != nil {
		if _fabdfc := _dgfba.Lang.ValidateWithPath(path + "\u002fLang"); _fabdfc != nil {
			return _fabdfc
		}
	}
	if _dgfba.EastAsianLayout != nil {
		if _cbfeg := _dgfba.EastAsianLayout.ValidateWithPath(path + "\u002fEastAsianLayout"); _cbfeg != nil {
			return _cbfeg
		}
	}
	if _dgfba.SpecVanish != nil {
		if _aaabc := _dgfba.SpecVanish.ValidateWithPath(path + "/SpecVanish"); _aaabc != nil {
			return _aaabc
		}
	}
	if _dgfba.OMath != nil {
		if _dbcfe := _dgfba.OMath.ValidateWithPath(path + "\u002fOMath"); _dbcfe != nil {
			return _dbcfe
		}
	}
	return nil
}
func (_deceg ST_ThemeColor) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_acede := _d.Attr{}
	_acede.Name = name
	switch _deceg {
	case ST_ThemeColorUnset:
		_acede.Value = ""
	case ST_ThemeColorDark1:
		_acede.Value = "dark1"
	case ST_ThemeColorLight1:
		_acede.Value = "light1"
	case ST_ThemeColorDark2:
		_acede.Value = "dark2"
	case ST_ThemeColorLight2:
		_acede.Value = "light2"
	case ST_ThemeColorAccent1:
		_acede.Value = "accent1"
	case ST_ThemeColorAccent2:
		_acede.Value = "accent2"
	case ST_ThemeColorAccent3:
		_acede.Value = "accent3"
	case ST_ThemeColorAccent4:
		_acede.Value = "accent4"
	case ST_ThemeColorAccent5:
		_acede.Value = "accent5"
	case ST_ThemeColorAccent6:
		_acede.Value = "accent6"
	case ST_ThemeColorHyperlink:
		_acede.Value = "hyperlink"
	case ST_ThemeColorFollowedHyperlink:
		_acede.Value = "followedHyperlink"
	case ST_ThemeColorNone:
		_acede.Value = "none"
	case ST_ThemeColorBackground1:
		_acede.Value = "background1"
	case ST_ThemeColorText1:
		_acede.Value = "text1"
	case ST_ThemeColorBackground2:
		_acede.Value = "background2"
	case ST_ThemeColorText2:
		_acede.Value = "text2"
	}
	return _acede, nil
}

// ValidateWithPath validates the CT_CharacterSpacing and its children, prefixing error messages with path
func (_cbf *CT_CharacterSpacing) ValidateWithPath(path string) error {
	if _cbf.ValAttr == ST_CharacterSpacingUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _dfea := _cbf.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _dfea != nil {
		return _dfea
	}
	return nil
}
func (_ceead ST_MailMergeDest) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fggbf := _d.Attr{}
	_fggbf.Name = name
	switch _ceead {
	case ST_MailMergeDestUnset:
		_fggbf.Value = ""
	case ST_MailMergeDestNewDocument:
		_fggbf.Value = "newDocument"
	case ST_MailMergeDestPrinter:
		_fggbf.Value = "printer"
	case ST_MailMergeDestEmail:
		_fggbf.Value = "email"
	case ST_MailMergeDestFax:
		_fggbf.Value = "fax"
	}
	return _fggbf, nil
}
func (_gbbe *CT_Bookmark) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fgf := range start.Attr {
		if _fgf.Name.Local == "name" {
			_dfdf, _bdf := _fgf.Value, error(nil)
			if _bdf != nil {
				return _bdf
			}
			_gbbe.NameAttr = _dfdf
			continue
		}
		if _fgf.Name.Local == "colFirst" {
			_dgf, _cfa := _dd.ParseInt(_fgf.Value, 10, 64)
			if _cfa != nil {
				return _cfa
			}
			_gbbe.ColFirstAttr = &_dgf
			continue
		}
		if _fgf.Name.Local == "colLast" {
			_eafc, _bgg := _dd.ParseInt(_fgf.Value, 10, 64)
			if _bgg != nil {
				return _bgg
			}
			_gbbe.ColLastAttr = &_eafc
			continue
		}
		if _fgf.Name.Local == "displacedByCustomXml" {
			_gbbe.DisplacedByCustomXmlAttr.UnmarshalXMLAttr(_fgf)
			continue
		}
		if _fgf.Name.Local == "id" {
			_bcgc, _ffdc := _dd.ParseInt(_fgf.Value, 10, 64)
			if _ffdc != nil {
				return _ffdc
			}
			_gbbe.IdAttr = _bcgc
			continue
		}
	}
	for {
		_ddg, _ebe := d.Token()
		if _ebe != nil {
			return _b.Errorf("parsing\u0020CT_Bookmark:\u0020\u0025s", _ebe)
		}
		if _fdgc, _ebef := _ddg.(_d.EndElement); _ebef && _fdgc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adbca *EG_ParaRPrTrackChanges) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cgbabd:
	for {
		_gbbcf, _befbaa := d.Token()
		if _befbaa != nil {
			return _befbaa
		}
		switch _gbdgfb := _gbbcf.(type) {
		case _d.StartElement:
			switch _gbdgfb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_adbca.Ins = NewCT_TrackChange()
				if _fadgc := d.DecodeElement(_adbca.Ins, &_gbdgfb); _fadgc != nil {
					return _fadgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_adbca.Del = NewCT_TrackChange()
				if _ffabe := d.DecodeElement(_adbca.Del, &_gbdgfb); _ffabe != nil {
					return _ffabe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_adbca.MoveFrom = NewCT_TrackChange()
				if _fbbaf := d.DecodeElement(_adbca.MoveFrom, &_gbdgfb); _fbbaf != nil {
					return _fbbaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_adbca.MoveTo = NewCT_TrackChange()
				if _gbaag := d.DecodeElement(_adbca.MoveTo, &_gbdgfb); _gbaag != nil {
					return _gbaag
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_ParaRPrTrackChanges\u0020\u0025v", _gbdgfb.Name)
				if _bcggd := d.Skip(); _bcggd != nil {
					return _bcggd
				}
			}
		case _d.EndElement:
			break _cgbabd
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AltChunk and its children, prefixing error messages with path
func (_ec *CT_AltChunk) ValidateWithPath(path string) error {
	if _ec.AltChunkPr != nil {
		if _fdgf := _ec.AltChunkPr.ValidateWithPath(path + "/AltChunkPr"); _fdgf != nil {
			return _fdgf
		}
	}
	return nil
}
func (_fdbcg ST_FrameScrollbar) ValidateWithPath(path string) error {
	switch _fdbcg {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fdbcg))
	}
	return nil
}
func (_aagcfd ST_MailMergeOdsoFMDFieldType) String() string {
	switch _aagcfd {
	case 0:
		return ""
	case 1:
		return "null"
	case 2:
		return "dbColumn"
	}
	return ""
}
func (_ccagd *CT_PPrBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dabag:
	for {
		_cfgd, _deddb := d.Token()
		if _deddb != nil {
			return _deddb
		}
		switch _bebd := _cfgd.(type) {
		case _d.StartElement:
			switch _bebd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pStyle"}:
				_ccagd.PStyle = NewCT_String()
				if _fgccb := d.DecodeElement(_ccagd.PStyle, &_bebd); _fgccb != nil {
					return _fgccb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "keepNext"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "keepNext"}:
				_ccagd.KeepNext = NewCT_OnOff()
				if _ebfge := d.DecodeElement(_ccagd.KeepNext, &_bebd); _ebfge != nil {
					return _ebfge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "keepLines"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "keepLines"}:
				_ccagd.KeepLines = NewCT_OnOff()
				if _acfedf := d.DecodeElement(_ccagd.KeepLines, &_bebd); _acfedf != nil {
					return _acfedf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pageBreakBefore"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pageBreakBefore"}:
				_ccagd.PageBreakBefore = NewCT_OnOff()
				if _dedad := d.DecodeElement(_ccagd.PageBreakBefore, &_bebd); _dedad != nil {
					return _dedad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "framePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "framePr"}:
				_ccagd.FramePr = NewCT_FramePr()
				if _cedfe := d.DecodeElement(_ccagd.FramePr, &_bebd); _cedfe != nil {
					return _cedfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "widowControl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "widowControl"}:
				_ccagd.WidowControl = NewCT_OnOff()
				if _eeecfc := d.DecodeElement(_ccagd.WidowControl, &_bebd); _eeecfc != nil {
					return _eeecfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numPr"}:
				_ccagd.NumPr = NewCT_NumPr()
				if _ggfae := d.DecodeElement(_ccagd.NumPr, &_bebd); _ggfae != nil {
					return _ggfae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressLineNumbers"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressLineNumbers"}:
				_ccagd.SuppressLineNumbers = NewCT_OnOff()
				if _ceccf := d.DecodeElement(_ccagd.SuppressLineNumbers, &_bebd); _ceccf != nil {
					return _ceccf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pBdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pBdr"}:
				_ccagd.PBdr = NewCT_PBdr()
				if _fafdg := d.DecodeElement(_ccagd.PBdr, &_bebd); _fafdg != nil {
					return _fafdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_ccagd.Shd = NewCT_Shd()
				if _caebb := d.DecodeElement(_ccagd.Shd, &_bebd); _caebb != nil {
					return _caebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tabs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tabs"}:
				_ccagd.Tabs = NewCT_Tabs()
				if _faef := d.DecodeElement(_ccagd.Tabs, &_bebd); _faef != nil {
					return _faef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressAutoHyphens"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressAutoHyphens"}:
				_ccagd.SuppressAutoHyphens = NewCT_OnOff()
				if _gfbgge := d.DecodeElement(_ccagd.SuppressAutoHyphens, &_bebd); _gfbgge != nil {
					return _gfbgge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kinsoku"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kinsoku"}:
				_ccagd.Kinsoku = NewCT_OnOff()
				if _gfabd := d.DecodeElement(_ccagd.Kinsoku, &_bebd); _gfabd != nil {
					return _gfabd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wordWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "wordWrap"}:
				_ccagd.WordWrap = NewCT_OnOff()
				if _edaca := d.DecodeElement(_ccagd.WordWrap, &_bebd); _edaca != nil {
					return _edaca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "overflowPunct"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "overflowPunct"}:
				_ccagd.OverflowPunct = NewCT_OnOff()
				if _cageb := d.DecodeElement(_ccagd.OverflowPunct, &_bebd); _cageb != nil {
					return _cageb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "topLinePunct"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "topLinePunct"}:
				_ccagd.TopLinePunct = NewCT_OnOff()
				if _gbebg := d.DecodeElement(_ccagd.TopLinePunct, &_bebd); _gbebg != nil {
					return _gbebg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoSpaceDE"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoSpaceDE"}:
				_ccagd.AutoSpaceDE = NewCT_OnOff()
				if _ddde := d.DecodeElement(_ccagd.AutoSpaceDE, &_bebd); _ddde != nil {
					return _ddde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoSpaceDN"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoSpaceDN"}:
				_ccagd.AutoSpaceDN = NewCT_OnOff()
				if _dgffa := d.DecodeElement(_ccagd.AutoSpaceDN, &_bebd); _dgffa != nil {
					return _dgffa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidi"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidi"}:
				_ccagd.Bidi = NewCT_OnOff()
				if _fcbac := d.DecodeElement(_ccagd.Bidi, &_bebd); _fcbac != nil {
					return _fcbac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "adjustRightInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "adjustRightInd"}:
				_ccagd.AdjustRightInd = NewCT_OnOff()
				if _caagc := d.DecodeElement(_ccagd.AdjustRightInd, &_bebd); _caagc != nil {
					return _caagc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_ccagd.SnapToGrid = NewCT_OnOff()
				if _cgeffg := d.DecodeElement(_ccagd.SnapToGrid, &_bebd); _cgeffg != nil {
					return _cgeffg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_ccagd.Spacing = NewCT_Spacing()
				if _bgace := d.DecodeElement(_ccagd.Spacing, &_bebd); _bgace != nil {
					return _bgace
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ind"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ind"}:
				_ccagd.Ind = NewCT_Ind()
				if _gfaf := d.DecodeElement(_ccagd.Ind, &_bebd); _gfaf != nil {
					return _gfaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contextualSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "contextualSpacing"}:
				_ccagd.ContextualSpacing = NewCT_OnOff()
				if _agebg := d.DecodeElement(_ccagd.ContextualSpacing, &_bebd); _agebg != nil {
					return _agebg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mirrorIndents"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mirrorIndents"}:
				_ccagd.MirrorIndents = NewCT_OnOff()
				if _gfbfe := d.DecodeElement(_ccagd.MirrorIndents, &_bebd); _gfbfe != nil {
					return _gfbfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "suppressOverlap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "suppressOverlap"}:
				_ccagd.SuppressOverlap = NewCT_OnOff()
				if _caca := d.DecodeElement(_ccagd.SuppressOverlap, &_bebd); _caca != nil {
					return _caca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_ccagd.Jc = NewCT_Jc()
				if _bdddc := d.DecodeElement(_ccagd.Jc, &_bebd); _bdddc != nil {
					return _bdddc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_ccagd.TextDirection = NewCT_TextDirection()
				if _degfa := d.DecodeElement(_ccagd.TextDirection, &_bebd); _degfa != nil {
					return _degfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textAlignment"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textAlignment"}:
				_ccagd.TextAlignment = NewCT_TextAlignment()
				if _afdec := d.DecodeElement(_ccagd.TextAlignment, &_bebd); _afdec != nil {
					return _afdec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textboxTightWrap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textboxTightWrap"}:
				_ccagd.TextboxTightWrap = NewCT_TextboxTightWrap()
				if _gdaea := d.DecodeElement(_ccagd.TextboxTightWrap, &_bebd); _gdaea != nil {
					return _gdaea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outlineLvl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outlineLvl"}:
				_ccagd.OutlineLvl = NewCT_DecimalNumber()
				if _gegec := d.DecodeElement(_ccagd.OutlineLvl, &_bebd); _gegec != nil {
					return _gegec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divId"}:
				_ccagd.DivId = NewCT_DecimalNumber()
				if _eeaeb := d.DecodeElement(_ccagd.DivId, &_bebd); _eeaeb != nil {
					return _eeaeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cnfStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cnfStyle"}:
				_ccagd.CnfStyle = NewCT_Cnf()
				if _aecad := d.DecodeElement(_ccagd.CnfStyle, &_bebd); _aecad != nil {
					return _aecad
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_PPrBase\u0020\u0025v", _bebd.Name)
				if _bdbea := d.Skip(); _bdbea != nil {
					return _bdbea
				}
			}
		case _d.EndElement:
			break _dabag
		case _d.CharData:
		}
	}
	return nil
}
func (_ddb *CT_BottomPageBorder) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ddb.BottomLeftAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:bottomLeft"}, Value: _b.Sprintf("\u0025v", *_ddb.BottomLeftAttr)})
	}
	if _ddb.BottomRightAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:bottomRight"}, Value: _b.Sprintf("\u0025v", *_ddb.BottomRightAttr)})
	}
	if _ddb.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", *_ddb.IdAttr)})
	}
	_edb, _efbf := _ddb.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _efbf != nil {
		return _efbf
	}
	start.Attr = append(start.Attr, _edb)
	if _ddb.ColorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:color"}, Value: _b.Sprintf("\u0025v", *_ddb.ColorAttr)})
	}
	if _ddb.ThemeColorAttr != ST_ThemeColorUnset {
		_ccdb, _fbdd := _ddb.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _fbdd != nil {
			return _fbdd
		}
		start.Attr = append(start.Attr, _ccdb)
	}
	if _ddb.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_ddb.ThemeTintAttr)})
	}
	if _ddb.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_ddb.ThemeShadeAttr)})
	}
	if _ddb.SzAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:sz"}, Value: _b.Sprintf("\u0025v", *_ddb.SzAttr)})
	}
	if _ddb.SpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:space"}, Value: _b.Sprintf("\u0025v", *_ddb.SpaceAttr)})
	}
	if _ddb.ShadowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:shadow"}, Value: _b.Sprintf("\u0025v", *_ddb.ShadowAttr)})
	}
	if _ddb.FrameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:frame"}, Value: _b.Sprintf("\u0025v", *_ddb.FrameAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_JcTable and its children
func (_bgaca *CT_JcTable) Validate() error { return _bgaca.ValidateWithPath("CT_JcTable") }

const (
	ST_DisplacedByCustomXmlUnset ST_DisplacedByCustomXml = 0
	ST_DisplacedByCustomXmlNext  ST_DisplacedByCustomXml = 1
	ST_DisplacedByCustomXmlPrev  ST_DisplacedByCustomXml = 2
)

func (_ffdeag *CT_VMerge) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _deagc := range start.Attr {
		if _deagc.Name.Local == "val" {
			_ffdeag.ValAttr.UnmarshalXMLAttr(_deagc)
			continue
		}
	}
	for {
		_feeba, _daeaf := d.Token()
		if _daeaf != nil {
			return _b.Errorf("parsing\u0020CT_VMerge:\u0020\u0025s", _daeaf)
		}
		if _caadg, _deefg := _feeba.(_d.EndElement); _deefg && _caadg.Name == start.Name {
			break
		}
	}
	return nil
}

type AG_SectPrAttributes struct {
	RsidRPrAttr  *string
	RsidDelAttr  *string
	RsidRAttr    *string
	RsidSectAttr *string
}

// Validate validates the WdCT_LinkedTextboxInformation and its children
func (_eggfd *WdCT_LinkedTextboxInformation) Validate() error {
	return _eggfd.ValidateWithPath("WdCT_LinkedTextboxInformation")
}

// Validate validates the CT_TblWidth and its children
func (_cdcb *CT_TblWidth) Validate() error { return _cdcb.ValidateWithPath("CT_TblWidth") }
func (_bbae *CT_FldChar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbae.FldCharTypeAttr = ST_FldCharType(1)
	for _, _aecefe := range start.Attr {
		if _aecefe.Name.Local == "fldCharType" {
			_bbae.FldCharTypeAttr.UnmarshalXMLAttr(_aecefe)
			continue
		}
		if _aecefe.Name.Local == "fldLock" {
			_agdgg, _ddecgg := ParseUnionST_OnOff(_aecefe.Value)
			if _ddecgg != nil {
				return _ddecgg
			}
			_bbae.FldLockAttr = &_agdgg
			continue
		}
		if _aecefe.Name.Local == "dirty" {
			_edac, _dgecc := ParseUnionST_OnOff(_aecefe.Value)
			if _dgecc != nil {
				return _dgecc
			}
			_bbae.DirtyAttr = &_edac
			continue
		}
	}
_gadga:
	for {
		_dfgbc, _bfgg := d.Token()
		if _bfgg != nil {
			return _bfgg
		}
		switch _ebged := _dfgbc.(type) {
		case _d.StartElement:
			switch _ebged.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldData"}:
				_bbae.FldData = NewCT_Text()
				if _egdac := d.DecodeElement(_bbae.FldData, &_ebged); _egdac != nil {
					return _egdac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ffData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ffData"}:
				_bbae.FfData = NewCT_FFData()
				if _bfge := d.DecodeElement(_bbae.FfData, &_ebged); _bfge != nil {
					return _bfge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numberingChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numberingChange"}:
				_bbae.NumberingChange = NewCT_TrackChangeNumbering()
				if _egacf := d.DecodeElement(_bbae.NumberingChange, &_ebged); _egacf != nil {
					return _egacf
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_FldChar\u0020\u0025v", _ebged.Name)
				if _gecbe := d.Skip(); _gecbe != nil {
					return _gecbe
				}
			}
		case _d.EndElement:
			break _gadga
		case _d.CharData:
		}
	}
	return nil
}
func (_fagag *CT_RPrChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fagag.RPr = NewCT_RPrOriginal()
	for _, _dccag := range start.Attr {
		if _dccag.Name.Local == "author" {
			_eebgb, _gdcccc := _dccag.Value, error(nil)
			if _gdcccc != nil {
				return _gdcccc
			}
			_fagag.AuthorAttr = _eebgb
			continue
		}
		if _dccag.Name.Local == "date" {
			_cccgf, _baccf := ParseStdlibTime(_dccag.Value)
			if _baccf != nil {
				return _baccf
			}
			_fagag.DateAttr = &_cccgf
			continue
		}
		if _dccag.Name.Local == "id" {
			_gafbf, _adcaa := _dd.ParseInt(_dccag.Value, 10, 64)
			if _adcaa != nil {
				return _adcaa
			}
			_fagag.IdAttr = _gafbf
			continue
		}
	}
_bfddcf:
	for {
		_bfgga, _dbfc := d.Token()
		if _dbfc != nil {
			return _dbfc
		}
		switch _cgdec := _bfgga.(type) {
		case _d.StartElement:
			switch _cgdec.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				if _dfcfg := d.DecodeElement(_fagag.RPr, &_cgdec); _dfcfg != nil {
					return _dfcfg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_RPrChange\u0020\u0025v", _cgdec.Name)
				if _dcgff := d.Skip(); _dcgff != nil {
					return _dcgff
				}
			}
		case _d.EndElement:
			break _bfddcf
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_DocPartTypes() *CT_DocPartTypes { _fdfaf := &CT_DocPartTypes{}; return _fdfaf }
func (_aafe *CT_NumRestart) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aafe.ValAttr = ST_RestartNumber(1)
	for _, _fgcge := range start.Attr {
		if _fgcge.Name.Local == "val" {
			_aafe.ValAttr.UnmarshalXMLAttr(_fgcge)
			continue
		}
	}
	for {
		_gcbbd, _gbdbf := d.Token()
		if _gbdbf != nil {
			return _b.Errorf("parsing\u0020CT_NumRestart:\u0020\u0025s", _gbdbf)
		}
		if _cggdb, _dcffdg := _gcbbd.(_d.EndElement); _dcffdg && _cggdb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bccefg ST_RubyAlign) String() string {
	switch _bccefg {
	case 0:
		return ""
	case 1:
		return "center"
	case 2:
		return "distributeLetter"
	case 3:
		return "distributeSpace"
	case 4:
		return "left"
	case 5:
		return "right"
	case 6:
		return "rightVertical"
	}
	return ""
}

// Validate validates the CT_NumPicBullet and its children
func (_adbda *CT_NumPicBullet) Validate() error { return _adbda.ValidateWithPath("CT_NumPicBullet") }
func (_bfgabd *CT_TrPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bfgabd.CnfStyle != nil {
		_afcbfb := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		for _, _dbbac := range _bfgabd.CnfStyle {
			e.EncodeElement(_dbbac, _afcbfb)
		}
	}
	if _bfgabd.DivId != nil {
		_fddbge := _d.StartElement{Name: _d.Name{Local: "w:divId"}}
		for _, _fgbac := range _bfgabd.DivId {
			e.EncodeElement(_fgbac, _fddbge)
		}
	}
	if _bfgabd.GridBefore != nil {
		_fdbgb := _d.StartElement{Name: _d.Name{Local: "w:gridBefore"}}
		for _, _adaeb := range _bfgabd.GridBefore {
			e.EncodeElement(_adaeb, _fdbgb)
		}
	}
	if _bfgabd.GridAfter != nil {
		_dbcef := _d.StartElement{Name: _d.Name{Local: "w:gridAfter"}}
		for _, _fcbbc := range _bfgabd.GridAfter {
			e.EncodeElement(_fcbbc, _dbcef)
		}
	}
	if _bfgabd.WBefore != nil {
		_gfgfda := _d.StartElement{Name: _d.Name{Local: "w:wBefore"}}
		for _, _efbecg := range _bfgabd.WBefore {
			e.EncodeElement(_efbecg, _gfgfda)
		}
	}
	if _bfgabd.WAfter != nil {
		_efefa := _d.StartElement{Name: _d.Name{Local: "w:wAfter"}}
		for _, _febgce := range _bfgabd.WAfter {
			e.EncodeElement(_febgce, _efefa)
		}
	}
	if _bfgabd.CantSplit != nil {
		_bggcc := _d.StartElement{Name: _d.Name{Local: "w:cantSplit"}}
		for _, _befef := range _bfgabd.CantSplit {
			e.EncodeElement(_befef, _bggcc)
		}
	}
	if _bfgabd.TrHeight != nil {
		_edcb := _d.StartElement{Name: _d.Name{Local: "w:trHeight"}}
		for _, _cbfef := range _bfgabd.TrHeight {
			e.EncodeElement(_cbfef, _edcb)
		}
	}
	if _bfgabd.TblHeader != nil {
		_fddege := _d.StartElement{Name: _d.Name{Local: "w:tblHeader"}}
		for _, _aebcag := range _bfgabd.TblHeader {
			e.EncodeElement(_aebcag, _fddege)
		}
	}
	if _bfgabd.TblCellSpacing != nil {
		_gdgcd := _d.StartElement{Name: _d.Name{Local: "w:tblCellSpacing"}}
		for _, _adecg := range _bfgabd.TblCellSpacing {
			e.EncodeElement(_adecg, _gdgcd)
		}
	}
	if _bfgabd.Jc != nil {
		_aaaf := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		for _, _gbcab := range _bfgabd.Jc {
			e.EncodeElement(_gbcab, _aaaf)
		}
	}
	if _bfgabd.Hidden != nil {
		_cgdgd := _d.StartElement{Name: _d.Name{Local: "w:hidden"}}
		for _, _ggfeg := range _bfgabd.Hidden {
			e.EncodeElement(_ggfeg, _cgdgd)
		}
	}
	if _bfgabd.Ins != nil {
		_gggad := _d.StartElement{Name: _d.Name{Local: "w:ins"}}
		e.EncodeElement(_bfgabd.Ins, _gggad)
	}
	if _bfgabd.Del != nil {
		_deecbc := _d.StartElement{Name: _d.Name{Local: "w:del"}}
		e.EncodeElement(_bfgabd.Del, _deecbc)
	}
	if _bfgabd.TrPrChange != nil {
		_gdccg := _d.StartElement{Name: _d.Name{Local: "w:trPrChange"}}
		e.EncodeElement(_bfgabd.TrPrChange, _gdccg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the Styles and its children
func (_ffagea *Styles) Validate() error { return _ffagea.ValidateWithPath("Styles") }

const (
	ST_LineNumberRestartUnset      ST_LineNumberRestart = 0
	ST_LineNumberRestartNewPage    ST_LineNumberRestart = 1
	ST_LineNumberRestartNewSection ST_LineNumberRestart = 2
	ST_LineNumberRestartContinuous ST_LineNumberRestart = 3
)

// ValidateWithPath validates the CT_Caption and its children, prefixing error messages with path
func (_ebbd *CT_Caption) ValidateWithPath(path string) error {
	if _dgec := _ebbd.PosAttr.ValidateWithPath(path + "\u002fPosAttr"); _dgec != nil {
		return _dgec
	}
	if _ebbd.ChapNumAttr != nil {
		if _ffcc := _ebbd.ChapNumAttr.ValidateWithPath(path + "\u002fChapNumAttr"); _ffcc != nil {
			return _ffcc
		}
	}
	if _ebbd.NoLabelAttr != nil {
		if _febb := _ebbd.NoLabelAttr.ValidateWithPath(path + "\u002fNoLabelAttr"); _febb != nil {
			return _febb
		}
	}
	if _agd := _ebbd.NumFmtAttr.ValidateWithPath(path + "/NumFmtAttr"); _agd != nil {
		return _agd
	}
	if _daacc := _ebbd.SepAttr.ValidateWithPath(path + "\u002fSepAttr"); _daacc != nil {
		return _daacc
	}
	return nil
}

type ST_ObjectUpdateMode byte

func (_cggaf *EG_RunInnerContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cggaf.Br != nil {
		_afgca := _d.StartElement{Name: _d.Name{Local: "w:br"}}
		e.EncodeElement(_cggaf.Br, _afgca)
	}
	if _cggaf.T != nil {
		_caggee := _d.StartElement{Name: _d.Name{Local: "w:t"}}
		e.EncodeElement(_cggaf.T, _caggee)
	}
	if _cggaf.ContentPart != nil {
		_bccee := _d.StartElement{Name: _d.Name{Local: "w:contentPart"}}
		e.EncodeElement(_cggaf.ContentPart, _bccee)
	}
	if _cggaf.DelText != nil {
		_dcbge := _d.StartElement{Name: _d.Name{Local: "w:delText"}}
		e.EncodeElement(_cggaf.DelText, _dcbge)
	}
	if _cggaf.InstrText != nil {
		_ccgfg := _d.StartElement{Name: _d.Name{Local: "w:instrText"}}
		e.EncodeElement(_cggaf.InstrText, _ccgfg)
	}
	if _cggaf.DelInstrText != nil {
		_gaefdd := _d.StartElement{Name: _d.Name{Local: "w:delInstrText"}}
		e.EncodeElement(_cggaf.DelInstrText, _gaefdd)
	}
	if _cggaf.NoBreakHyphen != nil {
		_aadgf := _d.StartElement{Name: _d.Name{Local: "w:noBreakHyphen"}}
		e.EncodeElement(_cggaf.NoBreakHyphen, _aadgf)
	}
	if _cggaf.SoftHyphen != nil {
		_fdfedc := _d.StartElement{Name: _d.Name{Local: "w:softHyphen"}}
		e.EncodeElement(_cggaf.SoftHyphen, _fdfedc)
	}
	if _cggaf.DayShort != nil {
		_aafdgb := _d.StartElement{Name: _d.Name{Local: "w:dayShort"}}
		e.EncodeElement(_cggaf.DayShort, _aafdgb)
	}
	if _cggaf.MonthShort != nil {
		_cfaaga := _d.StartElement{Name: _d.Name{Local: "w:monthShort"}}
		e.EncodeElement(_cggaf.MonthShort, _cfaaga)
	}
	if _cggaf.YearShort != nil {
		_dcfcd := _d.StartElement{Name: _d.Name{Local: "w:yearShort"}}
		e.EncodeElement(_cggaf.YearShort, _dcfcd)
	}
	if _cggaf.DayLong != nil {
		_accac := _d.StartElement{Name: _d.Name{Local: "w:dayLong"}}
		e.EncodeElement(_cggaf.DayLong, _accac)
	}
	if _cggaf.MonthLong != nil {
		_ddgfc := _d.StartElement{Name: _d.Name{Local: "w:monthLong"}}
		e.EncodeElement(_cggaf.MonthLong, _ddgfc)
	}
	if _cggaf.YearLong != nil {
		_becga := _d.StartElement{Name: _d.Name{Local: "w:yearLong"}}
		e.EncodeElement(_cggaf.YearLong, _becga)
	}
	if _cggaf.AnnotationRef != nil {
		_gdcedc := _d.StartElement{Name: _d.Name{Local: "w:annotationRef"}}
		e.EncodeElement(_cggaf.AnnotationRef, _gdcedc)
	}
	if _cggaf.FootnoteRef != nil {
		_fdcabg := _d.StartElement{Name: _d.Name{Local: "w:footnoteRef"}}
		e.EncodeElement(_cggaf.FootnoteRef, _fdcabg)
	}
	if _cggaf.EndnoteRef != nil {
		_cbfccg := _d.StartElement{Name: _d.Name{Local: "w:endnoteRef"}}
		e.EncodeElement(_cggaf.EndnoteRef, _cbfccg)
	}
	if _cggaf.Separator != nil {
		_ecgfce := _d.StartElement{Name: _d.Name{Local: "w:separator"}}
		e.EncodeElement(_cggaf.Separator, _ecgfce)
	}
	if _cggaf.ContinuationSeparator != nil {
		_bfcfcb := _d.StartElement{Name: _d.Name{Local: "w:continuationSeparator"}}
		e.EncodeElement(_cggaf.ContinuationSeparator, _bfcfcb)
	}
	if _cggaf.Sym != nil {
		_bccdf := _d.StartElement{Name: _d.Name{Local: "w:sym"}}
		e.EncodeElement(_cggaf.Sym, _bccdf)
	}
	if _cggaf.PgNum != nil {
		_ddcbb := _d.StartElement{Name: _d.Name{Local: "w:pgNum"}}
		e.EncodeElement(_cggaf.PgNum, _ddcbb)
	}
	if _cggaf.Cr != nil {
		_bddedd := _d.StartElement{Name: _d.Name{Local: "w:cr"}}
		e.EncodeElement(_cggaf.Cr, _bddedd)
	}
	if _cggaf.Tab != nil {
		_eggfe := _d.StartElement{Name: _d.Name{Local: "w:tab"}}
		e.EncodeElement(_cggaf.Tab, _eggfe)
	}
	if _cggaf.Object != nil {
		_edabgf := _d.StartElement{Name: _d.Name{Local: "w:object"}}
		e.EncodeElement(_cggaf.Object, _edabgf)
	}
	if _cggaf.Pict != nil {
		_dgcgbb := _d.StartElement{Name: _d.Name{Local: "w:pict"}}
		e.EncodeElement(_cggaf.Pict, _dgcgbb)
	}
	if _cggaf.FldChar != nil {
		_egcec := _d.StartElement{Name: _d.Name{Local: "w:fldChar"}}
		e.EncodeElement(_cggaf.FldChar, _egcec)
	}
	if _cggaf.Ruby != nil {
		_afcfag := _d.StartElement{Name: _d.Name{Local: "w:ruby"}}
		e.EncodeElement(_cggaf.Ruby, _afcfag)
	}
	if _cggaf.FootnoteReference != nil {
		_egaagb := _d.StartElement{Name: _d.Name{Local: "w:footnoteReference"}}
		e.EncodeElement(_cggaf.FootnoteReference, _egaagb)
	}
	if _cggaf.EndnoteReference != nil {
		_cggbdg := _d.StartElement{Name: _d.Name{Local: "w:endnoteReference"}}
		e.EncodeElement(_cggaf.EndnoteReference, _cggbdg)
	}
	if _cggaf.CommentReference != nil {
		_cdffaf := _d.StartElement{Name: _d.Name{Local: "w:commentReference"}}
		e.EncodeElement(_cggaf.CommentReference, _cdffaf)
	}
	if _cggaf.Drawing != nil {
		_ddege := _d.StartElement{Name: _d.Name{Local: "w:drawing"}}
		e.EncodeElement(_cggaf.Drawing, _ddege)
	}
	if _cggaf.Ptab != nil {
		_fafab := _d.StartElement{Name: _d.Name{Local: "w:ptab"}}
		e.EncodeElement(_cggaf.Ptab, _fafab)
	}
	if _cggaf.LastRenderedPageBreak != nil {
		_adcfe := _d.StartElement{Name: _d.Name{Local: "w:lastRenderedPageBreak"}}
		e.EncodeElement(_cggaf.LastRenderedPageBreak, _adcfe)
	}
	return nil
}

const (
	ST_FtnEdnUnset                 ST_FtnEdn = 0
	ST_FtnEdnNormal                ST_FtnEdn = 1
	ST_FtnEdnSeparator             ST_FtnEdn = 2
	ST_FtnEdnContinuationSeparator ST_FtnEdn = 3
	ST_FtnEdnContinuationNotice    ST_FtnEdn = 4
)

type WdCT_WrapSquare struct {
	WrapTextAttr WdST_WrapText
	DistTAttr    *uint32
	DistBAttr    *uint32
	DistLAttr    *uint32
	DistRAttr    *uint32
	EffectExtent *WdCT_EffectExtent
}

func (_gabbg ST_Lock) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gabbg.String(), start)
}

const (
	ST_ShdUnset                 ST_Shd = 0
	ST_ShdNil                   ST_Shd = 1
	ST_ShdClear                 ST_Shd = 2
	ST_ShdSolid                 ST_Shd = 3
	ST_ShdHorzStripe            ST_Shd = 4
	ST_ShdVertStripe            ST_Shd = 5
	ST_ShdReverseDiagStripe     ST_Shd = 6
	ST_ShdDiagStripe            ST_Shd = 7
	ST_ShdHorzCross             ST_Shd = 8
	ST_ShdDiagCross             ST_Shd = 9
	ST_ShdThinHorzStripe        ST_Shd = 10
	ST_ShdThinVertStripe        ST_Shd = 11
	ST_ShdThinReverseDiagStripe ST_Shd = 12
	ST_ShdThinDiagStripe        ST_Shd = 13
	ST_ShdThinHorzCross         ST_Shd = 14
	ST_ShdThinDiagCross         ST_Shd = 15
	ST_ShdPct5                  ST_Shd = 16
	ST_ShdPct10                 ST_Shd = 17
	ST_ShdPct12                 ST_Shd = 18
	ST_ShdPct15                 ST_Shd = 19
	ST_ShdPct20                 ST_Shd = 20
	ST_ShdPct25                 ST_Shd = 21
	ST_ShdPct30                 ST_Shd = 22
	ST_ShdPct35                 ST_Shd = 23
	ST_ShdPct37                 ST_Shd = 24
	ST_ShdPct40                 ST_Shd = 25
	ST_ShdPct45                 ST_Shd = 26
	ST_ShdPct50                 ST_Shd = 27
	ST_ShdPct55                 ST_Shd = 28
	ST_ShdPct60                 ST_Shd = 29
	ST_ShdPct62                 ST_Shd = 30
	ST_ShdPct65                 ST_Shd = 31
	ST_ShdPct70                 ST_Shd = 32
	ST_ShdPct75                 ST_Shd = 33
	ST_ShdPct80                 ST_Shd = 34
	ST_ShdPct85                 ST_Shd = 35
	ST_ShdPct87                 ST_Shd = 36
	ST_ShdPct90                 ST_Shd = 37
	ST_ShdPct95                 ST_Shd = 38
)

func NewCT_Lang() *CT_Lang { _ggeff := &CT_Lang{}; return _ggeff }
func (_gbfgd *CT_SdtContentRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gbfgd.FldSimple != nil {
		_feefa := _d.StartElement{Name: _d.Name{Local: "w:fldSimple"}}
		for _, _fdfgef := range _gbfgd.FldSimple {
			e.EncodeElement(_fdfgef, _feefa)
		}
	}
	if _gbfgd.Hyperlink != nil {
		_fecafe := _d.StartElement{Name: _d.Name{Local: "w:hyperlink"}}
		e.EncodeElement(_gbfgd.Hyperlink, _fecafe)
	}
	if _gbfgd.SubDoc != nil {
		_acbea := _d.StartElement{Name: _d.Name{Local: "w:subDoc"}}
		e.EncodeElement(_gbfgd.SubDoc, _acbea)
	}
	if _gbfgd.EG_ContentRunContent != nil {
		for _, _agaca := range _gbfgd.EG_ContentRunContent {
			_agaca.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TargetScreenSz and its children, prefixing error messages with path
func (_dbdea *CT_TargetScreenSz) ValidateWithPath(path string) error {
	if _dbdea.ValAttr == ST_TargetScreenSzUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fcgeg := _dbdea.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fcgeg != nil {
		return _fcgeg
	}
	return nil
}

// ValidateWithPath validates the EG_RPrMath and its children, prefixing error messages with path
func (_aacad *EG_RPrMath) ValidateWithPath(path string) error {
	if _aacad.Ins != nil {
		if _gagebee := _aacad.Ins.ValidateWithPath(path + "\u002fIns"); _gagebee != nil {
			return _gagebee
		}
	}
	if _aacad.Del != nil {
		if _gdabcf := _aacad.Del.ValidateWithPath(path + "\u002fDel"); _gdabcf != nil {
			return _gdabcf
		}
	}
	if _aacad.RPr != nil {
		if _dcdff := _aacad.RPr.ValidateWithPath(path + "\u002fRPr"); _dcdff != nil {
			return _dcdff
		}
	}
	return nil
}

// ValidateWithPath validates the EG_ContentRunContent and its children, prefixing error messages with path
func (_fddgg *EG_ContentRunContent) ValidateWithPath(path string) error {
	if _fddgg.CustomXml != nil {
		if _eaadc := _fddgg.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _eaadc != nil {
			return _eaadc
		}
	}
	if _fddgg.SmartTag != nil {
		if _adeg := _fddgg.SmartTag.ValidateWithPath(path + "\u002fSmartTag"); _adeg != nil {
			return _adeg
		}
	}
	if _fddgg.Sdt != nil {
		if _bgeced := _fddgg.Sdt.ValidateWithPath(path + "\u002fSdt"); _bgeced != nil {
			return _bgeced
		}
	}
	if _fddgg.Dir != nil {
		if _aadbg := _fddgg.Dir.ValidateWithPath(path + "\u002fDir"); _aadbg != nil {
			return _aadbg
		}
	}
	if _fddgg.Bdo != nil {
		if _dgcafd := _fddgg.Bdo.ValidateWithPath(path + "\u002fBdo"); _dgcafd != nil {
			return _dgcafd
		}
	}
	if _fddgg.R != nil {
		if _dgefc := _fddgg.R.ValidateWithPath(path + "\u002fR"); _dgefc != nil {
			return _dgefc
		}
	}
	for _cffdgd, _cafgd := range _fddgg.EG_RunLevelElts {
		if _ceaed := _cafgd.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _cffdgd)); _ceaed != nil {
			return _ceaed
		}
	}
	return nil
}

type CT_DocPartType struct {

	// Type Value
	ValAttr ST_DocPartType
}

func (_edbade *CT_ReadingModeInkLockDown) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _agegg := range start.Attr {
		if _agegg.Name.Local == "actualPg" {
			_eeadb, _ecedfa := ParseUnionST_OnOff(_agegg.Value)
			if _ecedfa != nil {
				return _ecedfa
			}
			_edbade.ActualPgAttr = _eeadb
			continue
		}
		if _agegg.Name.Local == "w" {
			_agdggg, _fedg := _dd.ParseUint(_agegg.Value, 10, 64)
			if _fedg != nil {
				return _fedg
			}
			_edbade.WAttr = _agdggg
			continue
		}
		if _agegg.Name.Local == "h" {
			_babbb, _bceg := _dd.ParseUint(_agegg.Value, 10, 64)
			if _bceg != nil {
				return _bceg
			}
			_edbade.HAttr = _babbb
			continue
		}
		if _agegg.Name.Local == "fontSz" {
			_dbgce, _ecebf := ParseUnionST_DecimalNumberOrPercent(_agegg.Value)
			if _ecebf != nil {
				return _ecebf
			}
			_edbade.FontSzAttr = _dbgce
			continue
		}
	}
	for {
		_ggbac, _edfecf := d.Token()
		if _edfecf != nil {
			return _b.Errorf("parsing CT_ReadingModeInkLockDown:\u0020\u0025s", _edfecf)
		}
		if _fegfc, _ecabd := _ggbac.(_d.EndElement); _ecabd && _fegfc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumFmt and its children, prefixing error messages with path
func (_decg *CT_NumFmt) ValidateWithPath(path string) error {
	if _decg.ValAttr == ST_NumberFormatUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cgcea := _decg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cgcea != nil {
		return _cgcea
	}
	return nil
}

// ValidateWithPath validates the CT_Charset and its children, prefixing error messages with path
func (_fbg *CT_Charset) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_Markup and its children, prefixing error messages with path
func (_bedbf *CT_Markup) ValidateWithPath(path string) error { return nil }
func ParseUnionST_HpsMeasure(s string) (ST_HpsMeasure, error) {
	_eefdg := ST_HpsMeasure{}
	if _g.ST_PositiveUniversalMeasurePatternRe.MatchString(s) {
		_eefdg.ST_PositiveUniversalMeasure = &s
	} else {
		_dadba, _bbacbe := _dd.ParseFloat(s, 64)
		if _bbacbe != nil {
			return _eefdg, _b.Errorf("parsing\u0020\u0025s\u0020as\u0020uint:\u0020%s", s, _bbacbe)
		}
		_eefdg.ST_UnsignedDecimalNumber = _ga.Uint64(uint64(_dadba))
	}
	return _eefdg, nil
}

const (
	ST_PTabLeaderUnset      ST_PTabLeader = 0
	ST_PTabLeaderNone       ST_PTabLeader = 1
	ST_PTabLeaderDot        ST_PTabLeader = 2
	ST_PTabLeaderHyphen     ST_PTabLeader = 3
	ST_PTabLeaderUnderscore ST_PTabLeader = 4
	ST_PTabLeaderMiddleDot  ST_PTabLeader = 5
)

func (_bdbccd ST_MultiLevelType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bdbccd.String(), start)
}
func (_afbaa *CT_SdtText) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dgfbf := range start.Attr {
		if _dgfbf.Name.Local == "multiLine" {
			_eegad, _gecdg := ParseUnionST_OnOff(_dgfbf.Value)
			if _gecdg != nil {
				return _gecdg
			}
			_afbaa.MultiLineAttr = &_eegad
			continue
		}
	}
	for {
		_fffgcc, _ebfee := d.Token()
		if _ebfee != nil {
			return _b.Errorf("parsing\u0020CT_SdtText:\u0020%s", _ebfee)
		}
		if _egeeg, _defdec := _fffgcc.(_d.EndElement); _defdec && _egeeg.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_SectPrChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
	SectPr *CT_SectPrBase
}
type EG_RubyContent struct {

	// Phonetic Guide Text Run
	R               *CT_R
	EG_RunLevelElts []*EG_RunLevelElts
}

func (_cdfded *EG_RubyContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cdfded.R != nil {
		_agggc := _d.StartElement{Name: _d.Name{Local: "w:r"}}
		e.EncodeElement(_cdfded.R, _agggc)
	}
	if _cdfded.EG_RunLevelElts != nil {
		for _, _beged := range _cdfded.EG_RunLevelElts {
			_beged.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func (_afdegd *ST_DocPartType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eeagag, _gbegce := d.Token()
	if _gbegce != nil {
		return _gbegce
	}
	if _ecfgga, _ccbeee := _eeagag.(_d.EndElement); _ccbeee && _ecfgga.Name == start.Name {
		*_afdegd = 1
		return nil
	}
	if _cbdge, _cfbgce := _eeagag.(_d.CharData); !_cfbgce {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _eeagag)
	} else {
		switch string(_cbdge) {
		case "":
			*_afdegd = 0
		case "none":
			*_afdegd = 1
		case "normal":
			*_afdegd = 2
		case "autoExp":
			*_afdegd = 3
		case "toolbar":
			*_afdegd = 4
		case "speller":
			*_afdegd = 5
		case "formFld":
			*_afdegd = 6
		case "bbPlcHdr":
			*_afdegd = 7
		}
	}
	_eeagag, _gbegce = d.Token()
	if _gbegce != nil {
		return _gbegce
	}
	if _gdacde, _gefcbd := _eeagag.(_d.EndElement); _gefcbd && _gdacde.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _eeagag)
}
func (_afdgb *CT_DataBinding) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _afdgb.PrefixMappingsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:prefixMappings"}, Value: _b.Sprintf("\u0025v", *_afdgb.PrefixMappingsAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:xpath"}, Value: _b.Sprintf("\u0025v", _afdgb.XpathAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:storeItemID"}, Value: _b.Sprintf("\u0025v", _afdgb.StoreItemIDAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fbgge *CT_TrackChangeRange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ebccbb := range start.Attr {
		if _ebccbb.Name.Local == "displacedByCustomXml" {
			_fbgge.DisplacedByCustomXmlAttr.UnmarshalXMLAttr(_ebccbb)
			continue
		}
		if _ebccbb.Name.Local == "author" {
			_ebbfbg, _cffffc := _ebccbb.Value, error(nil)
			if _cffffc != nil {
				return _cffffc
			}
			_fbgge.AuthorAttr = _ebbfbg
			continue
		}
		if _ebccbb.Name.Local == "date" {
			_fbbedf, _fcfeee := ParseStdlibTime(_ebccbb.Value)
			if _fcfeee != nil {
				return _fcfeee
			}
			_fbgge.DateAttr = &_fbbedf
			continue
		}
		if _ebccbb.Name.Local == "id" {
			_fcccc, _dbbcf := _dd.ParseInt(_ebccbb.Value, 10, 64)
			if _dbbcf != nil {
				return _dbbcf
			}
			_fbgge.IdAttr = _fcccc
			continue
		}
	}
	for {
		_fcedb, _ebedeg := d.Token()
		if _ebedeg != nil {
			return _b.Errorf("parsing\u0020CT_TrackChangeRange:\u0020\u0025s", _ebedeg)
		}
		if _fagecg, _bccbg := _fcedb.(_d.EndElement); _bccbg && _fagecg.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_FontRel and its children
func (_gfacc *CT_FontRel) Validate() error { return _gfacc.ValidateWithPath("CT_FontRel") }
func (_acgba *CT_PPrDefault) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _acgba.PPr != nil {
		_ageffa := _d.StartElement{Name: _d.Name{Local: "w:pPr"}}
		e.EncodeElement(_acgba.PPr, _ageffa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ecegc *ST_StyleSort) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ecegc = 0
	case "name":
		*_ecegc = 1
	case "priority":
		*_ecegc = 2
	case "default":
		*_ecegc = 3
	case "font":
		*_ecegc = 4
	case "basedOn":
		*_ecegc = 5
	case "type":
		*_ecegc = 6
	case "0000":
		*_ecegc = 7
	case "0001":
		*_ecegc = 8
	case "0002":
		*_ecegc = 9
	case "0003":
		*_ecegc = 10
	case "0004":
		*_ecegc = 11
	case "0005":
		*_ecegc = 12
	}
	return nil
}
func (_ebgdff *CT_NumRestart) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dgece, _bedga := _ebgdff.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _bedga != nil {
		return _bedga
	}
	start.Attr = append(start.Attr, _dgece)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fgfgb ST_LineSpacingRule) ValidateWithPath(path string) error {
	switch _fgfgb {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fgfgb))
	}
	return nil
}
func (_cbacd ST_DropCap) Validate() error { return _cbacd.ValidateWithPath("") }

const (
	ST_TextEffectUnset           ST_TextEffect = 0
	ST_TextEffectBlinkBackground ST_TextEffect = 1
	ST_TextEffectLights          ST_TextEffect = 2
	ST_TextEffectAntsBlack       ST_TextEffect = 3
	ST_TextEffectAntsRed         ST_TextEffect = 4
	ST_TextEffectShimmer         ST_TextEffect = 5
	ST_TextEffectSparkle         ST_TextEffect = 6
	ST_TextEffectNone            ST_TextEffect = 7
)

func (_cfff *CT_AltChunkPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cfff.MatchSrc != nil {
		_dbg := _d.StartElement{Name: _d.Name{Local: "w:matchSrc"}}
		e.EncodeElement(_cfff.MatchSrc, _dbg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PPr and its children, prefixing error messages with path
func (_feead *CT_PPr) ValidateWithPath(path string) error {
	if _feead.PStyle != nil {
		if _aefdbg := _feead.PStyle.ValidateWithPath(path + "\u002fPStyle"); _aefdbg != nil {
			return _aefdbg
		}
	}
	if _feead.KeepNext != nil {
		if _edacd := _feead.KeepNext.ValidateWithPath(path + "\u002fKeepNext"); _edacd != nil {
			return _edacd
		}
	}
	if _feead.KeepLines != nil {
		if _fgdbb := _feead.KeepLines.ValidateWithPath(path + "\u002fKeepLines"); _fgdbb != nil {
			return _fgdbb
		}
	}
	if _feead.PageBreakBefore != nil {
		if _eeegcf := _feead.PageBreakBefore.ValidateWithPath(path + "\u002fPageBreakBefore"); _eeegcf != nil {
			return _eeegcf
		}
	}
	if _feead.FramePr != nil {
		if _ccceea := _feead.FramePr.ValidateWithPath(path + "\u002fFramePr"); _ccceea != nil {
			return _ccceea
		}
	}
	if _feead.WidowControl != nil {
		if _bbdbf := _feead.WidowControl.ValidateWithPath(path + "\u002fWidowControl"); _bbdbf != nil {
			return _bbdbf
		}
	}
	if _feead.NumPr != nil {
		if _fcdf := _feead.NumPr.ValidateWithPath(path + "\u002fNumPr"); _fcdf != nil {
			return _fcdf
		}
	}
	if _feead.SuppressLineNumbers != nil {
		if _bfbbb := _feead.SuppressLineNumbers.ValidateWithPath(path + "/SuppressLineNumbers"); _bfbbb != nil {
			return _bfbbb
		}
	}
	if _feead.PBdr != nil {
		if _gffff := _feead.PBdr.ValidateWithPath(path + "\u002fPBdr"); _gffff != nil {
			return _gffff
		}
	}
	if _feead.Shd != nil {
		if _gbddda := _feead.Shd.ValidateWithPath(path + "\u002fShd"); _gbddda != nil {
			return _gbddda
		}
	}
	if _feead.Tabs != nil {
		if _cgaeeb := _feead.Tabs.ValidateWithPath(path + "\u002fTabs"); _cgaeeb != nil {
			return _cgaeeb
		}
	}
	if _feead.SuppressAutoHyphens != nil {
		if _ecedf := _feead.SuppressAutoHyphens.ValidateWithPath(path + "/SuppressAutoHyphens"); _ecedf != nil {
			return _ecedf
		}
	}
	if _feead.Kinsoku != nil {
		if _beaa := _feead.Kinsoku.ValidateWithPath(path + "\u002fKinsoku"); _beaa != nil {
			return _beaa
		}
	}
	if _feead.WordWrap != nil {
		if _ccecb := _feead.WordWrap.ValidateWithPath(path + "\u002fWordWrap"); _ccecb != nil {
			return _ccecb
		}
	}
	if _feead.OverflowPunct != nil {
		if _fabcf := _feead.OverflowPunct.ValidateWithPath(path + "\u002fOverflowPunct"); _fabcf != nil {
			return _fabcf
		}
	}
	if _feead.TopLinePunct != nil {
		if _gbdfd := _feead.TopLinePunct.ValidateWithPath(path + "\u002fTopLinePunct"); _gbdfd != nil {
			return _gbdfd
		}
	}
	if _feead.AutoSpaceDE != nil {
		if _eecea := _feead.AutoSpaceDE.ValidateWithPath(path + "\u002fAutoSpaceDE"); _eecea != nil {
			return _eecea
		}
	}
	if _feead.AutoSpaceDN != nil {
		if _cfdbf := _feead.AutoSpaceDN.ValidateWithPath(path + "\u002fAutoSpaceDN"); _cfdbf != nil {
			return _cfdbf
		}
	}
	if _feead.Bidi != nil {
		if _gcgfe := _feead.Bidi.ValidateWithPath(path + "\u002fBidi"); _gcgfe != nil {
			return _gcgfe
		}
	}
	if _feead.AdjustRightInd != nil {
		if _fabec := _feead.AdjustRightInd.ValidateWithPath(path + "\u002fAdjustRightInd"); _fabec != nil {
			return _fabec
		}
	}
	if _feead.SnapToGrid != nil {
		if _bedef := _feead.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _bedef != nil {
			return _bedef
		}
	}
	if _feead.Spacing != nil {
		if _fgcff := _feead.Spacing.ValidateWithPath(path + "\u002fSpacing"); _fgcff != nil {
			return _fgcff
		}
	}
	if _feead.Ind != nil {
		if _bfcaa := _feead.Ind.ValidateWithPath(path + "\u002fInd"); _bfcaa != nil {
			return _bfcaa
		}
	}
	if _feead.ContextualSpacing != nil {
		if _fagedg := _feead.ContextualSpacing.ValidateWithPath(path + "\u002fContextualSpacing"); _fagedg != nil {
			return _fagedg
		}
	}
	if _feead.MirrorIndents != nil {
		if _abacbc := _feead.MirrorIndents.ValidateWithPath(path + "\u002fMirrorIndents"); _abacbc != nil {
			return _abacbc
		}
	}
	if _feead.SuppressOverlap != nil {
		if _gfdgf := _feead.SuppressOverlap.ValidateWithPath(path + "\u002fSuppressOverlap"); _gfdgf != nil {
			return _gfdgf
		}
	}
	if _feead.Jc != nil {
		if _bffed := _feead.Jc.ValidateWithPath(path + "\u002fJc"); _bffed != nil {
			return _bffed
		}
	}
	if _feead.TextDirection != nil {
		if _fgada := _feead.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _fgada != nil {
			return _fgada
		}
	}
	if _feead.TextAlignment != nil {
		if _ccbdaf := _feead.TextAlignment.ValidateWithPath(path + "\u002fTextAlignment"); _ccbdaf != nil {
			return _ccbdaf
		}
	}
	if _feead.TextboxTightWrap != nil {
		if _edfdf := _feead.TextboxTightWrap.ValidateWithPath(path + "\u002fTextboxTightWrap"); _edfdf != nil {
			return _edfdf
		}
	}
	if _feead.OutlineLvl != nil {
		if _ffbdf := _feead.OutlineLvl.ValidateWithPath(path + "/OutlineLvl"); _ffbdf != nil {
			return _ffbdf
		}
	}
	if _feead.DivId != nil {
		if _gfffgg := _feead.DivId.ValidateWithPath(path + "\u002fDivId"); _gfffgg != nil {
			return _gfffgg
		}
	}
	if _feead.CnfStyle != nil {
		if _ddgcc := _feead.CnfStyle.ValidateWithPath(path + "\u002fCnfStyle"); _ddgcc != nil {
			return _ddgcc
		}
	}
	if _feead.RPr != nil {
		if _bbgbd := _feead.RPr.ValidateWithPath(path + "\u002fRPr"); _bbgbd != nil {
			return _bbgbd
		}
	}
	if _feead.SectPr != nil {
		if _babeb := _feead.SectPr.ValidateWithPath(path + "\u002fSectPr"); _babeb != nil {
			return _babeb
		}
	}
	if _feead.PPrChange != nil {
		if _cgfbd := _feead.PPrChange.ValidateWithPath(path + "\u002fPPrChange"); _cgfbd != nil {
			return _cgfbd
		}
	}
	return nil
}
func (_bbcedd ST_FldCharType) Validate() error { return _bbcedd.ValidateWithPath("") }

// Validate validates the EG_RPrContent and its children
func (_fbagcb *EG_RPrContent) Validate() error { return _fbagcb.ValidateWithPath("EG_RPrContent") }

// ValidateWithPath validates the CT_View and its children, prefixing error messages with path
func (_edcabc *CT_View) ValidateWithPath(path string) error {
	if _edcabc.ValAttr == ST_ViewUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ffdcba := _edcabc.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _ffdcba != nil {
		return _ffdcba
	}
	return nil
}

// Validate validates the EG_SectPrContents and its children
func (_acddg *EG_SectPrContents) Validate() error {
	return _acddg.ValidateWithPath("EG_SectPrContents")
}

type CT_JcTable struct {

	// Alignment Type
	ValAttr ST_JcTable
}

func NewCT_EastAsianLayout() *CT_EastAsianLayout { _cfcad := &CT_EastAsianLayout{}; return _cfcad }
func (_bgecd *CT_MathCtrlDel) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _aaadb := range start.Attr {
		if _aaadb.Name.Local == "author" {
			_cddde, _fdfg := _aaadb.Value, error(nil)
			if _fdfg != nil {
				return _fdfg
			}
			_bgecd.AuthorAttr = _cddde
			continue
		}
		if _aaadb.Name.Local == "date" {
			_fadaf, _gcgda := ParseStdlibTime(_aaadb.Value)
			if _gcgda != nil {
				return _gcgda
			}
			_bgecd.DateAttr = &_fadaf
			continue
		}
		if _aaadb.Name.Local == "id" {
			_eabc, _daba := _dd.ParseInt(_aaadb.Value, 10, 64)
			if _daba != nil {
				return _daba
			}
			_bgecd.IdAttr = _eabc
			continue
		}
	}
	for {
		_babcfg, _cdebc := d.Token()
		if _cdebc != nil {
			return _b.Errorf("parsing\u0020CT_MathCtrlDel:\u0020\u0025s", _cdebc)
		}
		if _ffdac, _cbfea := _babcfg.(_d.EndElement); _cbfea && _ffdac.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ffaedd ST_FrameLayout) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ffaedd.String(), start)
}
func (_acbafd *CT_SdtPrChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _acbafd.Equation != nil {
		_eebda := _d.StartElement{Name: _d.Name{Local: "w:equation"}}
		e.EncodeElement(_acbafd.Equation, _eebda)
	}
	if _acbafd.ComboBox != nil {
		_becgfa := _d.StartElement{Name: _d.Name{Local: "w:comboBox"}}
		e.EncodeElement(_acbafd.ComboBox, _becgfa)
	}
	if _acbafd.Date != nil {
		_adgef := _d.StartElement{Name: _d.Name{Local: "w:date"}}
		e.EncodeElement(_acbafd.Date, _adgef)
	}
	if _acbafd.DocPartObj != nil {
		_ffgbc := _d.StartElement{Name: _d.Name{Local: "w:docPartObj"}}
		e.EncodeElement(_acbafd.DocPartObj, _ffgbc)
	}
	if _acbafd.DocPartList != nil {
		_cbefd := _d.StartElement{Name: _d.Name{Local: "w:docPartList"}}
		e.EncodeElement(_acbafd.DocPartList, _cbefd)
	}
	if _acbafd.DropDownList != nil {
		_cdbec := _d.StartElement{Name: _d.Name{Local: "w:dropDownList"}}
		e.EncodeElement(_acbafd.DropDownList, _cdbec)
	}
	if _acbafd.Picture != nil {
		_caabb := _d.StartElement{Name: _d.Name{Local: "w:picture"}}
		e.EncodeElement(_acbafd.Picture, _caabb)
	}
	if _acbafd.RichText != nil {
		_acgff := _d.StartElement{Name: _d.Name{Local: "w:richText"}}
		e.EncodeElement(_acbafd.RichText, _acgff)
	}
	if _acbafd.Text != nil {
		_bbecd := _d.StartElement{Name: _d.Name{Local: "w:text"}}
		e.EncodeElement(_acbafd.Text, _bbecd)
	}
	if _acbafd.Citation != nil {
		_gaaec := _d.StartElement{Name: _d.Name{Local: "w:citation"}}
		e.EncodeElement(_acbafd.Citation, _gaaec)
	}
	if _acbafd.Group != nil {
		_edbdc := _d.StartElement{Name: _d.Name{Local: "w:group"}}
		e.EncodeElement(_acbafd.Group, _edbdc)
	}
	if _acbafd.Bibliography != nil {
		_cddfff := _d.StartElement{Name: _d.Name{Local: "w:bibliography"}}
		e.EncodeElement(_acbafd.Bibliography, _cddfff)
	}
	return nil
}

type ST_AnnotationVMerge byte

// ValidateWithPath validates the CT_VerticalAlignRun and its children, prefixing error messages with path
func (_egbdfd *CT_VerticalAlignRun) ValidateWithPath(path string) error {
	if _egbdfd.ValAttr == _g.ST_VerticalAlignRunUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _gafae := _egbdfd.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _gafae != nil {
		return _gafae
	}
	return nil
}
func (_cbccg *CT_SdtContentCell) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cbccg.Tc != nil {
		_efgfg := _d.StartElement{Name: _d.Name{Local: "w:tc"}}
		for _, _abcdf := range _cbccg.Tc {
			e.EncodeElement(_abcdf, _efgfg)
		}
	}
	if _cbccg.CustomXml != nil {
		_cddab := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_cbccg.CustomXml, _cddab)
	}
	if _cbccg.Sdt != nil {
		_fbged := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_cbccg.Sdt, _fbged)
	}
	if _cbccg.EG_RunLevelElts != nil {
		for _, _dcfab := range _cbccg.EG_RunLevelElts {
			_dcfab.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ecebe *CT_RPrChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _ecebe.AuthorAttr)})
	if _ecebe.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_ecebe.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _ecebe.IdAttr)})
	e.EncodeToken(start)
	_gbffb := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
	e.EncodeElement(_ecebe.RPr, _gbffb)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_TcPrBase() *CT_TcPrBase { _degac := &CT_TcPrBase{}; return _degac }

type CT_VerticalAlignRun struct {

	// Subscript/Superscript Value
	ValAttr _g.ST_VerticalAlignRun
}

func (_dfbgcc ST_TblOverlap) String() string {
	switch _dfbgcc {
	case 0:
		return ""
	case 1:
		return "never"
	case 2:
		return "overlap"
	}
	return ""
}
func (_fecd ST_CharacterSpacing) String() string {
	switch _fecd {
	case 0:
		return ""
	case 1:
		return "doNotCompress"
	case 2:
		return "compressPunctuation"
	case 3:
		return "compressPunctuationAndJapaneseKana"
	}
	return ""
}

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_cfbff *CT_Style) ValidateWithPath(path string) error {
	if _gcbdd := _cfbff.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _gcbdd != nil {
		return _gcbdd
	}
	if _cfbff.DefaultAttr != nil {
		if _gfbcf := _cfbff.DefaultAttr.ValidateWithPath(path + "\u002fDefaultAttr"); _gfbcf != nil {
			return _gfbcf
		}
	}
	if _cfbff.CustomStyleAttr != nil {
		if _afcag := _cfbff.CustomStyleAttr.ValidateWithPath(path + "\u002fCustomStyleAttr"); _afcag != nil {
			return _afcag
		}
	}
	if _cfbff.Name != nil {
		if _ccccc := _cfbff.Name.ValidateWithPath(path + "\u002fName"); _ccccc != nil {
			return _ccccc
		}
	}
	if _cfbff.Aliases != nil {
		if _geggb := _cfbff.Aliases.ValidateWithPath(path + "\u002fAliases"); _geggb != nil {
			return _geggb
		}
	}
	if _cfbff.BasedOn != nil {
		if _fggacd := _cfbff.BasedOn.ValidateWithPath(path + "\u002fBasedOn"); _fggacd != nil {
			return _fggacd
		}
	}
	if _cfbff.Next != nil {
		if _bafbc := _cfbff.Next.ValidateWithPath(path + "\u002fNext"); _bafbc != nil {
			return _bafbc
		}
	}
	if _cfbff.Link != nil {
		if _ebgee := _cfbff.Link.ValidateWithPath(path + "\u002fLink"); _ebgee != nil {
			return _ebgee
		}
	}
	if _cfbff.AutoRedefine != nil {
		if _gfccd := _cfbff.AutoRedefine.ValidateWithPath(path + "\u002fAutoRedefine"); _gfccd != nil {
			return _gfccd
		}
	}
	if _cfbff.Hidden != nil {
		if _faecacc := _cfbff.Hidden.ValidateWithPath(path + "\u002fHidden"); _faecacc != nil {
			return _faecacc
		}
	}
	if _cfbff.UiPriority != nil {
		if _gcdaa := _cfbff.UiPriority.ValidateWithPath(path + "/UiPriority"); _gcdaa != nil {
			return _gcdaa
		}
	}
	if _cfbff.SemiHidden != nil {
		if _ccgeb := _cfbff.SemiHidden.ValidateWithPath(path + "/SemiHidden"); _ccgeb != nil {
			return _ccgeb
		}
	}
	if _cfbff.UnhideWhenUsed != nil {
		if _cafbb := _cfbff.UnhideWhenUsed.ValidateWithPath(path + "\u002fUnhideWhenUsed"); _cafbb != nil {
			return _cafbb
		}
	}
	if _cfbff.QFormat != nil {
		if _fgdbe := _cfbff.QFormat.ValidateWithPath(path + "\u002fQFormat"); _fgdbe != nil {
			return _fgdbe
		}
	}
	if _cfbff.Locked != nil {
		if _ccfdc := _cfbff.Locked.ValidateWithPath(path + "\u002fLocked"); _ccfdc != nil {
			return _ccfdc
		}
	}
	if _cfbff.Personal != nil {
		if _aefdfc := _cfbff.Personal.ValidateWithPath(path + "\u002fPersonal"); _aefdfc != nil {
			return _aefdfc
		}
	}
	if _cfbff.PersonalCompose != nil {
		if _ddgedd := _cfbff.PersonalCompose.ValidateWithPath(path + "\u002fPersonalCompose"); _ddgedd != nil {
			return _ddgedd
		}
	}
	if _cfbff.PersonalReply != nil {
		if _fafdgd := _cfbff.PersonalReply.ValidateWithPath(path + "\u002fPersonalReply"); _fafdgd != nil {
			return _fafdgd
		}
	}
	if _cfbff.Rsid != nil {
		if _ggdge := _cfbff.Rsid.ValidateWithPath(path + "\u002fRsid"); _ggdge != nil {
			return _ggdge
		}
	}
	if _cfbff.PPr != nil {
		if _bccfc := _cfbff.PPr.ValidateWithPath(path + "\u002fPPr"); _bccfc != nil {
			return _bccfc
		}
	}
	if _cfbff.RPr != nil {
		if _dfgdd := _cfbff.RPr.ValidateWithPath(path + "\u002fRPr"); _dfgdd != nil {
			return _dfgdd
		}
	}
	if _cfbff.TblPr != nil {
		if _efcabe := _cfbff.TblPr.ValidateWithPath(path + "\u002fTblPr"); _efcabe != nil {
			return _efcabe
		}
	}
	if _cfbff.TrPr != nil {
		if _bceba := _cfbff.TrPr.ValidateWithPath(path + "\u002fTrPr"); _bceba != nil {
			return _bceba
		}
	}
	if _cfbff.TcPr != nil {
		if _acaee := _cfbff.TcPr.ValidateWithPath(path + "\u002fTcPr"); _acaee != nil {
			return _acaee
		}
	}
	for _bfgcb, _cggbac := range _cfbff.TblStylePr {
		if _fcdac := _cggbac.ValidateWithPath(_b.Sprintf("\u0025s\u002fTblStylePr\u005b\u0025d\u005d", path, _bfgcb)); _fcdac != nil {
			return _fcdac
		}
	}
	return nil
}
func (_dbfcda ST_FFTextType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dbfcda.String(), start)
}

// Validate validates the CT_Text and its children
func (_fcgea *CT_Text) Validate() error { return _fcgea.ValidateWithPath("CT_Text") }

const (
	ST_ObjectDrawAspectUnset   ST_ObjectDrawAspect = 0
	ST_ObjectDrawAspectContent ST_ObjectDrawAspect = 1
	ST_ObjectDrawAspectIcon    ST_ObjectDrawAspect = 2
)

// ValidateWithPath validates the CT_DecimalNumber and its children, prefixing error messages with path
func (_ggad *CT_DecimalNumber) ValidateWithPath(path string) error { return nil }
func (_bcfead ST_CaptionPos) Validate() error                      { return _bcfead.ValidateWithPath("") }

const (
	ST_FldCharTypeUnset    ST_FldCharType = 0
	ST_FldCharTypeBegin    ST_FldCharType = 1
	ST_FldCharTypeSeparate ST_FldCharType = 2
	ST_FldCharTypeEnd      ST_FldCharType = 3
)

// ValidateWithPath validates the CT_AutoCaption and its children, prefixing error messages with path
func (_gdd *CT_AutoCaption) ValidateWithPath(path string) error { return nil }
func NewCT_DocVars() *CT_DocVars                                { _bfbec := &CT_DocVars{}; return _bfbec }
func (_cacdb *CT_TxbxContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cacdb.AltChunk != nil {
		_aedgg := _d.StartElement{Name: _d.Name{Local: "w:altChunk"}}
		for _, _fgdbdf := range _cacdb.AltChunk {
			e.EncodeElement(_fgdbdf, _aedgg)
		}
	}
	if _cacdb.EG_ContentBlockContent != nil {
		for _, _eebad := range _cacdb.EG_ContentBlockContent {
			_eebad.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_defgb ST_VerticalJc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_defgb.String(), start)
}
func NewCT_TblCellMar() *CT_TblCellMar     { _baeba := &CT_TblCellMar{}; return _baeba }
func NewCT_WritingStyle() *CT_WritingStyle { _ddbgb := &CT_WritingStyle{}; return _ddbgb }

// Validate validates the CT_ParaRPrOriginal and its children
func (_aaage *CT_ParaRPrOriginal) Validate() error {
	return _aaage.ValidateWithPath("CT_ParaRPrOriginal")
}
func (_gaaa *CT_DocPartType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_bdeb, _gdcee := _gaaa.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _gdcee != nil {
		return _gdcee
	}
	start.Attr = append(start.Attr, _bdeb)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Zoom and its children
func (_eddcc *CT_Zoom) Validate() error { return _eddcc.ValidateWithPath("CT_Zoom") }
func (_dcedf *CT_OdsoFieldMapData) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_acfae:
	for {
		_ebdeb, _cfgec := d.Token()
		if _cfgec != nil {
			return _cfgec
		}
		switch _gbgdb := _ebdeb.(type) {
		case _d.StartElement:
			switch _gbgdb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "type"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "type"}:
				_dcedf.Type = NewCT_MailMergeOdsoFMDFieldType()
				if _cbeba := d.DecodeElement(_dcedf.Type, &_gbgdb); _cbeba != nil {
					return _cbeba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "name"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "name"}:
				_dcedf.Name = NewCT_String()
				if _dgff := d.DecodeElement(_dcedf.Name, &_gbgdb); _dgff != nil {
					return _dgff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mappedName"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mappedName"}:
				_dcedf.MappedName = NewCT_String()
				if _cegaee := d.DecodeElement(_dcedf.MappedName, &_gbgdb); _cegaee != nil {
					return _cegaee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "column"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "column"}:
				_dcedf.Column = NewCT_DecimalNumber()
				if _efbce := d.DecodeElement(_dcedf.Column, &_gbgdb); _efbce != nil {
					return _efbce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lid"}:
				_dcedf.Lid = NewCT_Lang()
				if _cffdb := d.DecodeElement(_dcedf.Lid, &_gbgdb); _cffdb != nil {
					return _cffdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dynamicAddress"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dynamicAddress"}:
				_dcedf.DynamicAddress = NewCT_OnOff()
				if _debfc := d.DecodeElement(_dcedf.DynamicAddress, &_gbgdb); _debfc != nil {
					return _debfc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_OdsoFieldMapData\u0020\u0025v", _gbgdb.Name)
				if _fdfcf := d.Skip(); _fdfcf != nil {
					return _fdfcf
				}
			}
		case _d.EndElement:
			break _acfae
		case _d.CharData:
		}
	}
	return nil
}
func NewAG_TransitionalPassword() *AG_TransitionalPassword {
	_gc := &AG_TransitionalPassword{}
	return _gc
}
func (_fdede *CT_Jc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_ebefa, _eecfe := _fdede.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _eecfe != nil {
		return _eecfe
	}
	start.Attr = append(start.Attr, _ebefa)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Shd and its children, prefixing error messages with path
func (_aded *CT_Shd) ValidateWithPath(path string) error {
	if _aded.ValAttr == ST_ShdUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _aeeae := _aded.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _aeeae != nil {
		return _aeeae
	}
	if _aded.ColorAttr != nil {
		if _geedg := _aded.ColorAttr.ValidateWithPath(path + "\u002fColorAttr"); _geedg != nil {
			return _geedg
		}
	}
	if _gfgad := _aded.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _gfgad != nil {
		return _gfgad
	}
	if _aded.FillAttr != nil {
		if _aefbd := _aded.FillAttr.ValidateWithPath(path + "\u002fFillAttr"); _aefbd != nil {
			return _aefbd
		}
	}
	if _gabdc := _aded.ThemeFillAttr.ValidateWithPath(path + "\u002fThemeFillAttr"); _gabdc != nil {
		return _gabdc
	}
	return nil
}
func (_fadcf ST_TabTlc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fadcf.String(), start)
}
func (_fdedf WdST_RelFromH) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bfgeae := _d.Attr{}
	_bfgeae.Name = name
	switch _fdedf {
	case WdST_RelFromHUnset:
		_bfgeae.Value = ""
	case WdST_RelFromHMargin:
		_bfgeae.Value = "margin"
	case WdST_RelFromHPage:
		_bfgeae.Value = "page"
	case WdST_RelFromHColumn:
		_bfgeae.Value = "column"
	case WdST_RelFromHCharacter:
		_bfgeae.Value = "character"
	case WdST_RelFromHLeftMargin:
		_bfgeae.Value = "leftMargin"
	case WdST_RelFromHRightMargin:
		_bfgeae.Value = "rightMargin"
	case WdST_RelFromHInsideMargin:
		_bfgeae.Value = "insideMargin"
	case WdST_RelFromHOutsideMargin:
		_bfgeae.Value = "outsideMargin"
	}
	return _bfgeae, nil
}
func (_ggfef *ST_InfoTextType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ggfef = 0
	case "text":
		*_ggfef = 1
	case "autoText":
		*_ggfef = 2
	}
	return nil
}

type CT_Jc struct {

	// Alignment Type
	ValAttr ST_Jc
}

func (_gbff *CT_Guid) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gbff.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_gbff.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_TextAlignment struct {

	// Vertical Character Alignment Position
	ValAttr ST_TextAlignment
}

func (_dcbeb *ST_DocGrid) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_abgcaf, _bdbae := d.Token()
	if _bdbae != nil {
		return _bdbae
	}
	if _caefgc, _cgddeg := _abgcaf.(_d.EndElement); _cgddeg && _caefgc.Name == start.Name {
		*_dcbeb = 1
		return nil
	}
	if _fbccfb, _ceacb := _abgcaf.(_d.CharData); !_ceacb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _abgcaf)
	} else {
		switch string(_fbccfb) {
		case "":
			*_dcbeb = 0
		case "default":
			*_dcbeb = 1
		case "lines":
			*_dcbeb = 2
		case "linesAndChars":
			*_dcbeb = 3
		case "snapToChars":
			*_dcbeb = 4
		}
	}
	_abgcaf, _bdbae = d.Token()
	if _bdbae != nil {
		return _bdbae
	}
	if _fefce, _efagaa := _abgcaf.(_d.EndElement); _efagaa && _fefce.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _abgcaf)
}
func (_gdbde ST_ObjectUpdateMode) String() string {
	switch _gdbde {
	case 0:
		return ""
	case 1:
		return "always"
	case 2:
		return "onCall"
	}
	return ""
}
func (_caeabb ST_Pitch) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_aeaffb := _d.Attr{}
	_aeaffb.Name = name
	switch _caeabb {
	case ST_PitchUnset:
		_aeaffb.Value = ""
	case ST_PitchFixed:
		_aeaffb.Value = "fixed"
	case ST_PitchVariable:
		_aeaffb.Value = "variable"
	case ST_PitchDefault:
		_aeaffb.Value = "default"
	}
	return _aeaffb, nil
}
func (_cgaga ST_SignedTwipsMeasure) String() string {
	if _cgaga.Int64 != nil {
		return _b.Sprintf("\u0025v", *_cgaga.Int64)
	}
	if _cgaga.ST_UniversalMeasure != nil {
		return _b.Sprintf("\u0025v", *_cgaga.ST_UniversalMeasure)
	}
	return ""
}
func (_cbce *CT_Control) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cbce.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", *_cbce.NameAttr)})
	}
	if _cbce.ShapeidAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:shapeid"}, Value: _b.Sprintf("\u0025v", *_cbce.ShapeidAttr)})
	}
	if _cbce.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", *_cbce.IdAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_VerticalJc struct {

	// Vertical Alignment Setting
	ValAttr ST_VerticalJc
}

func (_aceadc *CT_SaveThroughXslt) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ccdae := range start.Attr {
		if _ccdae.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _ccdae.Name.Local == "id" || _ccdae.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _ccdae.Name.Local == "id" {
			_geadg, _bfbgb := _ccdae.Value, error(nil)
			if _bfbgb != nil {
				return _bfbgb
			}
			_aceadc.IdAttr = &_geadg
			continue
		}
		if _ccdae.Name.Local == "solutionID" {
			_acbba, _eaaee := _ccdae.Value, error(nil)
			if _eaaee != nil {
				return _eaaee
			}
			_aceadc.SolutionIDAttr = &_acbba
			continue
		}
	}
	for {
		_dgfaba, _aacfdd := d.Token()
		if _aacfdd != nil {
			return _b.Errorf("parsing\u0020CT_SaveThroughXslt:\u0020\u0025s", _aacfdd)
		}
		if _dcaaf, _gaeccf := _dgfaba.(_d.EndElement); _gaeccf && _dcaaf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_facec *CT_GlossaryDocument) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _facec.Background != nil {
		_aabac := _d.StartElement{Name: _d.Name{Local: "w:background"}}
		e.EncodeElement(_facec.Background, _aabac)
	}
	if _facec.DocParts != nil {
		_dggfaf := _d.StartElement{Name: _d.Name{Local: "w:docParts"}}
		e.EncodeElement(_facec.DocParts, _dggfaf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type EG_BlockLevelChunkElts struct{ EG_ContentBlockContent []*EG_ContentBlockContent }

// ValidateWithPath validates the CT_Font and its children, prefixing error messages with path
func (_gecfg *CT_Font) ValidateWithPath(path string) error {
	if _gecfg.AltName != nil {
		if _bcfef := _gecfg.AltName.ValidateWithPath(path + "\u002fAltName"); _bcfef != nil {
			return _bcfef
		}
	}
	if _gecfg.Panose1 != nil {
		if _bdbad := _gecfg.Panose1.ValidateWithPath(path + "\u002fPanose1"); _bdbad != nil {
			return _bdbad
		}
	}
	if _gecfg.Charset != nil {
		if _aabeg := _gecfg.Charset.ValidateWithPath(path + "\u002fCharset"); _aabeg != nil {
			return _aabeg
		}
	}
	if _gecfg.Family != nil {
		if _cfad := _gecfg.Family.ValidateWithPath(path + "\u002fFamily"); _cfad != nil {
			return _cfad
		}
	}
	if _gecfg.NotTrueType != nil {
		if _fceca := _gecfg.NotTrueType.ValidateWithPath(path + "\u002fNotTrueType"); _fceca != nil {
			return _fceca
		}
	}
	if _gecfg.Pitch != nil {
		if _cdacc := _gecfg.Pitch.ValidateWithPath(path + "\u002fPitch"); _cdacc != nil {
			return _cdacc
		}
	}
	if _gecfg.Sig != nil {
		if _gabag := _gecfg.Sig.ValidateWithPath(path + "\u002fSig"); _gabag != nil {
			return _gabag
		}
	}
	if _gecfg.EmbedRegular != nil {
		if _abcgf := _gecfg.EmbedRegular.ValidateWithPath(path + "\u002fEmbedRegular"); _abcgf != nil {
			return _abcgf
		}
	}
	if _gecfg.EmbedBold != nil {
		if _fcbeb := _gecfg.EmbedBold.ValidateWithPath(path + "\u002fEmbedBold"); _fcbeb != nil {
			return _fcbeb
		}
	}
	if _gecfg.EmbedItalic != nil {
		if _ggdb := _gecfg.EmbedItalic.ValidateWithPath(path + "\u002fEmbedItalic"); _ggdb != nil {
			return _ggdb
		}
	}
	if _gecfg.EmbedBoldItalic != nil {
		if _gfbbe := _gecfg.EmbedBoldItalic.ValidateWithPath(path + "\u002fEmbedBoldItalic"); _gfbbe != nil {
			return _gfbbe
		}
	}
	return nil
}
func (_cafebf ST_Proof) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cafebf.String(), start)
}
func (_ggffdf *CT_Text) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ggffdf.SpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xml:space"}, Value: _b.Sprintf("\u0025v", *_ggffdf.SpaceAttr)})
	}
	e.EncodeElement(_ggffdf.Content, start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ObjectEmbed and its children
func (_eggeg *CT_ObjectEmbed) Validate() error { return _eggeg.ValidateWithPath("CT_ObjectEmbed") }
func (_gdafa *WdInline) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "wp:inline"
	return _gdafa.WdCT_Inline.MarshalXML(e, start)
}
func (_efbdee *ST_SignedHpsMeasure) Validate() error { return _efbdee.ValidateWithPath("") }
func NewCT_SignedTwipsMeasure() *CT_SignedTwipsMeasure {
	_dedff := &CT_SignedTwipsMeasure{}
	return _dedff
}

// Validate validates the CT_Styles and its children
func (_gfgag *CT_Styles) Validate() error { return _gfgag.ValidateWithPath("CT_Styles") }
func (_fafgga *WebSettings) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:webSettings"
	return _fafgga.CT_WebSettings.MarshalXML(e, start)
}
func (_gbacf *CT_Highlight) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gbacf.ValAttr = ST_HighlightColor(1)
	for _, _edggd := range start.Attr {
		if _edggd.Name.Local == "val" {
			_gbacf.ValAttr.UnmarshalXMLAttr(_edggd)
			continue
		}
	}
	for {
		_cdgg, _agbfb := d.Token()
		if _agbfb != nil {
			return _b.Errorf("parsing\u0020CT_Highlight:\u0020\u0025s", _agbfb)
		}
		if _dcfac, _ffdcd := _cdgg.(_d.EndElement); _ffdcd && _dcfac.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Font and its children
func (_bfcf *CT_Font) Validate() error { return _bfcf.ValidateWithPath("CT_Font") }
func (_gcfca ST_SdtDateMappingType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eeeddc := _d.Attr{}
	_eeeddc.Name = name
	switch _gcfca {
	case ST_SdtDateMappingTypeUnset:
		_eeeddc.Value = ""
	case ST_SdtDateMappingTypeText:
		_eeeddc.Value = "text"
	case ST_SdtDateMappingTypeDate:
		_eeeddc.Value = "date"
	case ST_SdtDateMappingTypeDateTime:
		_eeeddc.Value = "dateTime"
	}
	return _eeeddc, nil
}
func (_bgggce ST_DocPartType) Validate() error { return _bgggce.ValidateWithPath("") }

type EG_PContentMath struct {
	EG_PContentBase          []*EG_PContentBase
	EG_ContentRunContentBase []*EG_ContentRunContentBase
}

func (_eafgd *CT_Odso) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dbffb:
	for {
		_ffage, _acec := d.Token()
		if _acec != nil {
			return _acec
		}
		switch _abgdg := _ffage.(type) {
		case _d.StartElement:
			switch _abgdg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "udl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "udl"}:
				_eafgd.Udl = NewCT_String()
				if _eded := d.DecodeElement(_eafgd.Udl, &_abgdg); _eded != nil {
					return _eded
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "table"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "table"}:
				_eafgd.Table = NewCT_String()
				if _dcaggf := d.DecodeElement(_eafgd.Table, &_abgdg); _dcaggf != nil {
					return _dcaggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "src"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "src"}:
				_eafgd.Src = NewCT_Rel()
				if _debbc := d.DecodeElement(_eafgd.Src, &_abgdg); _debbc != nil {
					return _debbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "colDelim"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "colDelim"}:
				_eafgd.ColDelim = NewCT_DecimalNumber()
				if _egbea := d.DecodeElement(_eafgd.ColDelim, &_abgdg); _egbea != nil {
					return _egbea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "type"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "type"}:
				_eafgd.Type = NewCT_MailMergeSourceType()
				if _aecga := d.DecodeElement(_eafgd.Type, &_abgdg); _aecga != nil {
					return _aecga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fHdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fHdr"}:
				_eafgd.FHdr = NewCT_OnOff()
				if _dffcg := d.DecodeElement(_eafgd.FHdr, &_abgdg); _dffcg != nil {
					return _dffcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fieldMapData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fieldMapData"}:
				_gfab := NewCT_OdsoFieldMapData()
				if _bcgbf := d.DecodeElement(_gfab, &_abgdg); _bcgbf != nil {
					return _bcgbf
				}
				_eafgd.FieldMapData = append(_eafgd.FieldMapData, _gfab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "recipientData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "recipientData"}:
				_daeeb := NewCT_Rel()
				if _gefbg := d.DecodeElement(_daeeb, &_abgdg); _gefbg != nil {
					return _gefbg
				}
				_eafgd.RecipientData = append(_eafgd.RecipientData, _daeeb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Odso\u0020\u0025v", _abgdg.Name)
				if _ggbg := d.Skip(); _ggbg != nil {
					return _ggbg
				}
			}
		case _d.EndElement:
			break _dbffb
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_TblPPr() *CT_TblPPr { _bffab := &CT_TblPPr{}; return _bffab }

// Validate validates the CT_TblPr and its children
func (_fdga *CT_TblPr) Validate() error { return _fdga.ValidateWithPath("CT_TblPr") }

type ST_Theme byte

func NewWdCT_PosH() *WdCT_PosH {
	_egegd := &WdCT_PosH{}
	_egegd.RelativeFromAttr = WdST_RelFromH(1)
	_egegd.Choice = NewWdCT_PosHChoice()
	return _egegd
}

// Validate validates the CT_FFHelpText and its children
func (_cacb *CT_FFHelpText) Validate() error { return _cacb.ValidateWithPath("CT_FFHelpText") }
func (_aeefc *CT_FFName) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aeefc.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_aeefc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dgdf *CT_CompatSetting) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bgcc := range start.Attr {
		if _bgcc.Name.Local == "name" {
			_eceea, _ffbg := _bgcc.Value, error(nil)
			if _ffbg != nil {
				return _ffbg
			}
			_dgdf.NameAttr = &_eceea
			continue
		}
		if _bgcc.Name.Local == "uri" {
			_gaea, _bdfc := _bgcc.Value, error(nil)
			if _bdfc != nil {
				return _bdfc
			}
			_dgdf.UriAttr = &_gaea
			continue
		}
		if _bgcc.Name.Local == "val" {
			_daeg, _dbdc := _bgcc.Value, error(nil)
			if _dbdc != nil {
				return _dbdc
			}
			_dgdf.ValAttr = &_daeg
			continue
		}
	}
	for {
		_ddda, _cdee := d.Token()
		if _cdee != nil {
			return _b.Errorf("parsing\u0020CT_CompatSetting: \u0025s", _cdee)
		}
		if _eedg, _beb := _ddda.(_d.EndElement); _beb && _eedg.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_TblPrExBase struct {

	// Preferred Table Width Exception
	TblW *CT_TblWidth

	// Table Alignment Exception
	Jc *CT_JcTable

	// Table Cell Spacing Exception
	TblCellSpacing *CT_TblWidth

	// Table Indent from Leading Margin Exception
	TblInd *CT_TblWidth

	// Table Borders Exceptions
	TblBorders *CT_TblBorders

	// Table Shading Exception
	Shd *CT_Shd

	// Table Layout Exception
	TblLayout *CT_TblLayoutType

	// Table Cell Margin Exceptions
	TblCellMar *CT_TblCellMar

	// Table Style Conditional Formatting Settings Exception
	TblLook *CT_TblLook
}

func (_abbdb *CT_SdtContentBlock) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_efgfa:
	for {
		_dgbfc, _dffdc := d.Token()
		if _dffdc != nil {
			return _dffdc
		}
		switch _aeacd := _dgbfc.(type) {
		case _d.StartElement:
			switch _aeacd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_abbdb.CustomXml = NewCT_CustomXmlBlock()
				if _acbaad := d.DecodeElement(_abbdb.CustomXml, &_aeacd); _acbaad != nil {
					return _acbaad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_abbdb.Sdt = NewCT_SdtBlock()
				if _bfgbaf := d.DecodeElement(_abbdb.Sdt, &_aeacd); _bfgbaf != nil {
					return _bfgbaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_gdefb := NewCT_P()
				if _egefec := d.DecodeElement(_gdefb, &_aeacd); _egefec != nil {
					return _egefec
				}
				_abbdb.P = append(_abbdb.P, _gdefb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_fdafdb := NewCT_Tbl()
				if _afafa := d.DecodeElement(_fdafdb, &_aeacd); _afafa != nil {
					return _afafa
				}
				_abbdb.Tbl = append(_abbdb.Tbl, _fdafdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_dcafbd := NewEG_RunLevelElts()
				_dcafbd.ProofErr = NewCT_ProofErr()
				if _fedff := d.DecodeElement(_dcafbd.ProofErr, &_aeacd); _fedff != nil {
					return _fedff
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _dcafbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ffead := NewEG_RunLevelElts()
				_ffead.PermStart = NewCT_PermStart()
				if _acddc := d.DecodeElement(_ffead.PermStart, &_aeacd); _acddc != nil {
					return _acddc
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _ffead)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_ddfaa := NewEG_RunLevelElts()
				_ddfaa.PermEnd = NewCT_Perm()
				if _acece := d.DecodeElement(_ddfaa.PermEnd, &_aeacd); _acece != nil {
					return _acece
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _ddfaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_efaga := NewEG_RunLevelElts()
				_efaga.Ins = NewCT_RunTrackChange()
				if _gaegbg := d.DecodeElement(_efaga.Ins, &_aeacd); _gaegbg != nil {
					return _gaegbg
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _efaga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_bffgf := NewEG_RunLevelElts()
				_bffgf.Del = NewCT_RunTrackChange()
				if _ageeb := d.DecodeElement(_bffgf.Del, &_aeacd); _ageeb != nil {
					return _ageeb
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _bffgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_bdaad := NewEG_RunLevelElts()
				_bdaad.MoveFrom = NewCT_RunTrackChange()
				if _bcggef := d.DecodeElement(_bdaad.MoveFrom, &_aeacd); _bcggef != nil {
					return _bcggef
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _bdaad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_beaca := NewEG_RunLevelElts()
				_beaca.MoveTo = NewCT_RunTrackChange()
				if _ddbbd := d.DecodeElement(_beaca.MoveTo, &_aeacd); _ddbbd != nil {
					return _ddbbd
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _beaca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_aeabd := NewEG_RunLevelElts()
				_gfcee := NewEG_RangeMarkupElements()
				_gfcee.BookmarkStart = NewCT_Bookmark()
				if _faacg := d.DecodeElement(_gfcee.BookmarkStart, &_aeacd); _faacg != nil {
					return _faacg
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _aeabd)
				_aeabd.EG_RangeMarkupElements = append(_aeabd.EG_RangeMarkupElements, _gfcee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_ddgbg := NewEG_RunLevelElts()
				_dfbea := NewEG_RangeMarkupElements()
				_dfbea.BookmarkEnd = NewCT_MarkupRange()
				if _bafbd := d.DecodeElement(_dfbea.BookmarkEnd, &_aeacd); _bafbd != nil {
					return _bafbd
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _ddgbg)
				_ddgbg.EG_RangeMarkupElements = append(_ddgbg.EG_RangeMarkupElements, _dfbea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_dgbeff := NewEG_RunLevelElts()
				_afcff := NewEG_RangeMarkupElements()
				_afcff.MoveFromRangeStart = NewCT_MoveBookmark()
				if _bgaac := d.DecodeElement(_afcff.MoveFromRangeStart, &_aeacd); _bgaac != nil {
					return _bgaac
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _dgbeff)
				_dgbeff.EG_RangeMarkupElements = append(_dgbeff.EG_RangeMarkupElements, _afcff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_dgaegg := NewEG_RunLevelElts()
				_dcdgb := NewEG_RangeMarkupElements()
				_dcdgb.MoveFromRangeEnd = NewCT_MarkupRange()
				if _ggfbc := d.DecodeElement(_dcdgb.MoveFromRangeEnd, &_aeacd); _ggfbc != nil {
					return _ggfbc
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _dgaegg)
				_dgaegg.EG_RangeMarkupElements = append(_dgaegg.EG_RangeMarkupElements, _dcdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dcdgg := NewEG_RunLevelElts()
				_agbea := NewEG_RangeMarkupElements()
				_agbea.MoveToRangeStart = NewCT_MoveBookmark()
				if _gfage := d.DecodeElement(_agbea.MoveToRangeStart, &_aeacd); _gfage != nil {
					return _gfage
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _dcdgg)
				_dcdgg.EG_RangeMarkupElements = append(_dcdgg.EG_RangeMarkupElements, _agbea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_aecfd := NewEG_RunLevelElts()
				_bdaea := NewEG_RangeMarkupElements()
				_bdaea.MoveToRangeEnd = NewCT_MarkupRange()
				if _bcec := d.DecodeElement(_bdaea.MoveToRangeEnd, &_aeacd); _bcec != nil {
					return _bcec
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _aecfd)
				_aecfd.EG_RangeMarkupElements = append(_aecfd.EG_RangeMarkupElements, _bdaea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_faee := NewEG_RunLevelElts()
				_fdgdf := NewEG_RangeMarkupElements()
				_fdgdf.CommentRangeStart = NewCT_MarkupRange()
				if _gaabb := d.DecodeElement(_fdgdf.CommentRangeStart, &_aeacd); _gaabb != nil {
					return _gaabb
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _faee)
				_faee.EG_RangeMarkupElements = append(_faee.EG_RangeMarkupElements, _fdgdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_dbgdf := NewEG_RunLevelElts()
				_aagcb := NewEG_RangeMarkupElements()
				_aagcb.CommentRangeEnd = NewCT_MarkupRange()
				if _bfdca := d.DecodeElement(_aagcb.CommentRangeEnd, &_aeacd); _bfdca != nil {
					return _bfdca
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _dbgdf)
				_dbgdf.EG_RangeMarkupElements = append(_dbgdf.EG_RangeMarkupElements, _aagcb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_ffbaa := NewEG_RunLevelElts()
				_dbgfg := NewEG_RangeMarkupElements()
				_dbgfg.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _eebcg := d.DecodeElement(_dbgfg.CustomXmlInsRangeStart, &_aeacd); _eebcg != nil {
					return _eebcg
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _ffbaa)
				_ffbaa.EG_RangeMarkupElements = append(_ffbaa.EG_RangeMarkupElements, _dbgfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_gbffd := NewEG_RunLevelElts()
				_cgceg := NewEG_RangeMarkupElements()
				_cgceg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _gdbbbe := d.DecodeElement(_cgceg.CustomXmlInsRangeEnd, &_aeacd); _gdbbbe != nil {
					return _gdbbbe
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _gbffd)
				_gbffd.EG_RangeMarkupElements = append(_gbffd.EG_RangeMarkupElements, _cgceg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_adcdd := NewEG_RunLevelElts()
				_bbga := NewEG_RangeMarkupElements()
				_bbga.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _cbeg := d.DecodeElement(_bbga.CustomXmlDelRangeStart, &_aeacd); _cbeg != nil {
					return _cbeg
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _adcdd)
				_adcdd.EG_RangeMarkupElements = append(_adcdd.EG_RangeMarkupElements, _bbga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_ccgcb := NewEG_RunLevelElts()
				_accgf := NewEG_RangeMarkupElements()
				_accgf.CustomXmlDelRangeEnd = NewCT_Markup()
				if _cbaea := d.DecodeElement(_accgf.CustomXmlDelRangeEnd, &_aeacd); _cbaea != nil {
					return _cbaea
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _ccgcb)
				_ccgcb.EG_RangeMarkupElements = append(_ccgcb.EG_RangeMarkupElements, _accgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_bdedf := NewEG_RunLevelElts()
				_ccgeag := NewEG_RangeMarkupElements()
				_ccgeag.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _beebc := d.DecodeElement(_ccgeag.CustomXmlMoveFromRangeStart, &_aeacd); _beebc != nil {
					return _beebc
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _bdedf)
				_bdedf.EG_RangeMarkupElements = append(_bdedf.EG_RangeMarkupElements, _ccgeag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_cgeac := NewEG_RunLevelElts()
				_aadge := NewEG_RangeMarkupElements()
				_aadge.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _gffcd := d.DecodeElement(_aadge.CustomXmlMoveFromRangeEnd, &_aeacd); _gffcd != nil {
					return _gffcd
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _cgeac)
				_cgeac.EG_RangeMarkupElements = append(_cgeac.EG_RangeMarkupElements, _aadge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_afcaea := NewEG_RunLevelElts()
				_fceea := NewEG_RangeMarkupElements()
				_fceea.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bface := d.DecodeElement(_fceea.CustomXmlMoveToRangeStart, &_aeacd); _bface != nil {
					return _bface
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _afcaea)
				_afcaea.EG_RangeMarkupElements = append(_afcaea.EG_RangeMarkupElements, _fceea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_dcgeaf := NewEG_RunLevelElts()
				_ddff := NewEG_RangeMarkupElements()
				_ddff.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _fdegc := d.DecodeElement(_ddff.CustomXmlMoveToRangeEnd, &_aeacd); _fdegc != nil {
					return _fdegc
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _dcgeaf)
				_dcgeaf.EG_RangeMarkupElements = append(_dcgeaf.EG_RangeMarkupElements, _ddff)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_bgbab := NewEG_RunLevelElts()
				_cbca := NewEG_MathContent()
				_cbca.OMathPara = _f.NewOMathPara()
				if _gddge := d.DecodeElement(_cbca.OMathPara, &_aeacd); _gddge != nil {
					return _gddge
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _bgbab)
				_bgbab.EG_MathContent = append(_bgbab.EG_MathContent, _cbca)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_dcgag := NewEG_RunLevelElts()
				_afbba := NewEG_MathContent()
				_afbba.OMath = _f.NewOMath()
				if _fgcbae := d.DecodeElement(_afbba.OMath, &_aeacd); _fgcbae != nil {
					return _fgcbae
				}
				_abbdb.EG_RunLevelElts = append(_abbdb.EG_RunLevelElts, _dcgag)
				_dcgag.EG_MathContent = append(_dcgag.EG_MathContent, _afbba)
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020CT_SdtContentBlock\u0020\u0025v", _aeacd.Name)
				if _dabga := d.Skip(); _dabga != nil {
					return _dabga
				}
			}
		case _d.EndElement:
			break _efgfa
		case _d.CharData:
		}
	}
	return nil
}
func (_dagac ST_DocProtect) String() string {
	switch _dagac {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "readOnly"
	case 3:
		return "comments"
	case 4:
		return "trackedChanges"
	case 5:
		return "forms"
	}
	return ""
}

type CT_TrPrBase struct {

	// Table Row Conditional Formatting
	CnfStyle []*CT_Cnf

	// Associated HTML div ID
	DivId []*CT_DecimalNumber

	// Grid Columns Before First Cell
	GridBefore []*CT_DecimalNumber

	// Grid Columns After Last Cell
	GridAfter []*CT_DecimalNumber

	// Preferred Width Before Table Row
	WBefore []*CT_TblWidth

	// Preferred Width After Table Row
	WAfter []*CT_TblWidth

	// Table Row Cannot Break Across Pages
	CantSplit []*CT_OnOff

	// Table Row Height
	TrHeight []*CT_Height

	// Repeat Table Row on Every New Page
	TblHeader []*CT_OnOff

	// Table Row Cell Spacing
	TblCellSpacing []*CT_TblWidth

	// Table Row Alignment
	Jc []*CT_JcTable

	// Hidden Table Row Marker
	Hidden []*CT_OnOff
}

// ValidateWithPath validates the CT_SectType and its children, prefixing error messages with path
func (_gdcf *CT_SectType) ValidateWithPath(path string) error {
	if _dfefff := _gdcf.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _dfefff != nil {
		return _dfefff
	}
	return nil
}
func NewTxbxContent() *TxbxContent {
	_bgadc := &TxbxContent{}
	_bgadc.CT_TxbxContent = *NewCT_TxbxContent()
	return _bgadc
}
func (_eddcf *EG_PContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eddcf.FldSimple != nil {
		_cddfcd := _d.StartElement{Name: _d.Name{Local: "w:fldSimple"}}
		for _, _afffba := range _eddcf.FldSimple {
			e.EncodeElement(_afffba, _cddfcd)
		}
	}
	if _eddcf.Hyperlink != nil {
		_beegb := _d.StartElement{Name: _d.Name{Local: "w:hyperlink"}}
		e.EncodeElement(_eddcf.Hyperlink, _beegb)
	}
	if _eddcf.SubDoc != nil {
		_aceab := _d.StartElement{Name: _d.Name{Local: "w:subDoc"}}
		e.EncodeElement(_eddcf.SubDoc, _aceab)
	}
	if _eddcf.EG_ContentRunContent != nil {
		for _, _fbcece := range _eddcf.EG_ContentRunContent {
			_fbcece.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func (_dgbef *CT_EdnPos) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dgbef.ValAttr = ST_EdnPos(1)
	for _, _bdgaf := range start.Attr {
		if _bdgaf.Name.Local == "val" {
			_dgbef.ValAttr.UnmarshalXMLAttr(_bdgaf)
			continue
		}
	}
	for {
		_dcegg, _febc := d.Token()
		if _febc != nil {
			return _b.Errorf("parsing\u0020CT_EdnPos:\u0020\u0025s", _febc)
		}
		if _dfbeg, _ddeb := _dcegg.(_d.EndElement); _ddeb && _dfbeg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gdeea WdST_RelFromV) String() string {
	switch _gdeea {
	case 0:
		return ""
	case 1:
		return "margin"
	case 2:
		return "page"
	case 3:
		return "paragraph"
	case 4:
		return "line"
	case 5:
		return "topMargin"
	case 6:
		return "bottomMargin"
	case 7:
		return "insideMargin"
	case 8:
		return "outsideMargin"
	}
	return ""
}
func NewEG_BlockLevelChunkElts() *EG_BlockLevelChunkElts {
	_gaabgd := &EG_BlockLevelChunkElts{}
	return _gaabgd
}
func (_efegf *CT_ParaRPrChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _efegf.AuthorAttr)})
	if _efegf.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_efegf.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _efegf.IdAttr)})
	e.EncodeToken(start)
	_dgcgc := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
	e.EncodeElement(_efegf.RPr, _dgcgc)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cegde ST_FFTextType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_aedge := _d.Attr{}
	_aedge.Name = name
	switch _cegde {
	case ST_FFTextTypeUnset:
		_aedge.Value = ""
	case ST_FFTextTypeRegular:
		_aedge.Value = "regular"
	case ST_FFTextTypeNumber:
		_aedge.Value = "number"
	case ST_FFTextTypeDate:
		_aedge.Value = "date"
	case ST_FFTextTypeCurrentTime:
		_aedge.Value = "currentTime"
	case ST_FFTextTypeCurrentDate:
		_aedge.Value = "currentDate"
	case ST_FFTextTypeCalculated:
		_aedge.Value = "calculated"
	}
	return _aedge, nil
}

// Validate validates the CT_RubyPr and its children
func (_ffgag *CT_RubyPr) Validate() error { return _ffgag.ValidateWithPath("CT_RubyPr") }

// Validate validates the EG_ParaRPrTrackChanges and its children
func (_dfabe *EG_ParaRPrTrackChanges) Validate() error {
	return _dfabe.ValidateWithPath("EG_ParaRPrTrackChanges")
}
func NewCT_NumLvl() *CT_NumLvl { _dbfaa := &CT_NumLvl{}; return _dbfaa }
func (_ggfbcb *ST_HighlightColor) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ggfbcb = 0
	case "black":
		*_ggfbcb = 1
	case "blue":
		*_ggfbcb = 2
	case "cyan":
		*_ggfbcb = 3
	case "green":
		*_ggfbcb = 4
	case "magenta":
		*_ggfbcb = 5
	case "red":
		*_ggfbcb = 6
	case "yellow":
		*_ggfbcb = 7
	case "white":
		*_ggfbcb = 8
	case "darkBlue":
		*_ggfbcb = 9
	case "darkCyan":
		*_ggfbcb = 10
	case "darkGreen":
		*_ggfbcb = 11
	case "darkMagenta":
		*_ggfbcb = 12
	case "darkRed":
		*_ggfbcb = 13
	case "darkYellow":
		*_ggfbcb = 14
	case "darkGray":
		*_ggfbcb = 15
	case "lightGray":
		*_ggfbcb = 16
	case "none":
		*_ggfbcb = 17
	}
	return nil
}

const (
	ST_CharacterSpacingUnset                              ST_CharacterSpacing = 0
	ST_CharacterSpacingDoNotCompress                      ST_CharacterSpacing = 1
	ST_CharacterSpacingCompressPunctuation                ST_CharacterSpacing = 2
	ST_CharacterSpacingCompressPunctuationAndJapaneseKana ST_CharacterSpacing = 3
)

type CT_DocParts struct {

	// Glossary Document Entry
	DocPart []*CT_DocPart
}

func (_gbcee *CT_Document) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gbcee.ConformanceAttr = _g.ST_ConformanceClass(1)
	for _, _deaa := range start.Attr {
		if _deaa.Name.Local == "conformance" {
			_gbcee.ConformanceAttr.UnmarshalXMLAttr(_deaa)
			continue
		}
	}
_cdbgd:
	for {
		_addcg, _eafee := d.Token()
		if _eafee != nil {
			return _eafee
		}
		switch _beba := _addcg.(type) {
		case _d.StartElement:
			switch _beba.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "background"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "background"}:
				_gbcee.Background = NewCT_Background()
				if _abeg := d.DecodeElement(_gbcee.Background, &_beba); _abeg != nil {
					return _abeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "body"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "body"}:
				_gbcee.Body = NewCT_Body()
				if _bcbab := d.DecodeElement(_gbcee.Body, &_beba); _bcbab != nil {
					return _bcbab
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Document\u0020\u0025v", _beba.Name)
				if _eceeb := d.Skip(); _eceeb != nil {
					return _eceeb
				}
			}
		case _d.EndElement:
			break _cdbgd
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Recipients and its children, prefixing error messages with path
func (_abafd *CT_Recipients) ValidateWithPath(path string) error {
	for _fgdfc, _ecaea := range _abafd.RecipientData {
		if _dddcb := _ecaea.ValidateWithPath(_b.Sprintf("%s/RecipientData[%d\u005d", path, _fgdfc)); _dddcb != nil {
			return _dddcb
		}
	}
	return nil
}
func (_gffbdf *ST_HexColor) ValidateWithPath(path string) error {
	_cdega := []string{}
	if _gffbdf.ST_HexColorAuto != ST_HexColorAutoUnset {
		_cdega = append(_cdega, "ST_HexColorAuto")
	}
	if _gffbdf.ST_HexColorRGB != nil {
		_cdega = append(_cdega, "ST_HexColorRGB")
	}
	if len(_cdega) > 1 {
		return _b.Errorf("%s\u0020too\u0020many\u0020members\u0020set:\u0020\u0025v", path, _cdega)
	}
	return nil
}
func (_affcce ST_DocProtect) ValidateWithPath(path string) error {
	switch _affcce {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_affcce))
	}
	return nil
}
func (_bdefc *WdCT_WrapNone) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TabTlcUnset      ST_TabTlc = 0
	ST_TabTlcNone       ST_TabTlc = 1
	ST_TabTlcDot        ST_TabTlc = 2
	ST_TabTlcHyphen     ST_TabTlc = 3
	ST_TabTlcUnderscore ST_TabTlc = 4
	ST_TabTlcHeavy      ST_TabTlc = 5
	ST_TabTlcMiddleDot  ST_TabTlc = 6
)

var ST_TextScalePercentPatternRe = _a.MustCompile(ST_TextScalePercentPattern)

func (_abagbb ST_TblStyleOverrideType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gcbbdb := _d.Attr{}
	_gcbbdb.Name = name
	switch _abagbb {
	case ST_TblStyleOverrideTypeUnset:
		_gcbbdb.Value = ""
	case ST_TblStyleOverrideTypeWholeTable:
		_gcbbdb.Value = "wholeTable"
	case ST_TblStyleOverrideTypeFirstRow:
		_gcbbdb.Value = "firstRow"
	case ST_TblStyleOverrideTypeLastRow:
		_gcbbdb.Value = "lastRow"
	case ST_TblStyleOverrideTypeFirstCol:
		_gcbbdb.Value = "firstCol"
	case ST_TblStyleOverrideTypeLastCol:
		_gcbbdb.Value = "lastCol"
	case ST_TblStyleOverrideTypeBand1Vert:
		_gcbbdb.Value = "band1Vert"
	case ST_TblStyleOverrideTypeBand2Vert:
		_gcbbdb.Value = "band2Vert"
	case ST_TblStyleOverrideTypeBand1Horz:
		_gcbbdb.Value = "band1Horz"
	case ST_TblStyleOverrideTypeBand2Horz:
		_gcbbdb.Value = "band2Horz"
	case ST_TblStyleOverrideTypeNeCell:
		_gcbbdb.Value = "neCell"
	case ST_TblStyleOverrideTypeNwCell:
		_gcbbdb.Value = "nwCell"
	case ST_TblStyleOverrideTypeSeCell:
		_gcbbdb.Value = "seCell"
	case ST_TblStyleOverrideTypeSwCell:
		_gcbbdb.Value = "swCell"
	}
	return _gcbbdb, nil
}

// ValidateWithPath validates the CT_Endnotes and its children, prefixing error messages with path
func (_efddf *CT_Endnotes) ValidateWithPath(path string) error {
	for _eccfb, _addad := range _efddf.Endnote {
		if _adee := _addad.ValidateWithPath(_b.Sprintf("\u0025s\u002fEndnote\u005b\u0025d\u005d", path, _eccfb)); _adee != nil {
			return _adee
		}
	}
	return nil
}
func NewCT_AutoCaption() *CT_AutoCaption { _efg := &CT_AutoCaption{}; return _efg }
func NewCT_VerticalAlignRun() *CT_VerticalAlignRun {
	_adffa := &CT_VerticalAlignRun{}
	_adffa.ValAttr = _g.ST_VerticalAlignRun(1)
	return _adffa
}

// Validate validates the WdCT_WordprocessingGroup and its children
func (_ecfgea *WdCT_WordprocessingGroup) Validate() error {
	return _ecfgea.ValidateWithPath("WdCT_WordprocessingGroup")
}

// Validate validates the CT_Shd and its children
func (_eggba *CT_Shd) Validate() error { return _eggba.ValidateWithPath("CT_Shd") }
func (_egafe *ST_NumberFormat) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cegfcgg, _aeegdd := d.Token()
	if _aeegdd != nil {
		return _aeegdd
	}
	if _faggeg, _feadda := _cegfcgg.(_d.EndElement); _feadda && _faggeg.Name == start.Name {
		*_egafe = 1
		return nil
	}
	if _fefaf, _dafedc := _cegfcgg.(_d.CharData); !_dafedc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cegfcgg)
	} else {
		switch string(_fefaf) {
		case "":
			*_egafe = 0
		case "decimal":
			*_egafe = 1
		case "upperRoman":
			*_egafe = 2
		case "lowerRoman":
			*_egafe = 3
		case "upperLetter":
			*_egafe = 4
		case "lowerLetter":
			*_egafe = 5
		case "ordinal":
			*_egafe = 6
		case "cardinalText":
			*_egafe = 7
		case "ordinalText":
			*_egafe = 8
		case "hex":
			*_egafe = 9
		case "chicago":
			*_egafe = 10
		case "ideographDigital":
			*_egafe = 11
		case "japaneseCounting":
			*_egafe = 12
		case "aiueo":
			*_egafe = 13
		case "iroha":
			*_egafe = 14
		case "decimalFullWidth":
			*_egafe = 15
		case "decimalHalfWidth":
			*_egafe = 16
		case "japaneseLegal":
			*_egafe = 17
		case "japaneseDigitalTenThousand":
			*_egafe = 18
		case "decimalEnclosedCircle":
			*_egafe = 19
		case "decimalFullWidth2":
			*_egafe = 20
		case "aiueoFullWidth":
			*_egafe = 21
		case "irohaFullWidth":
			*_egafe = 22
		case "decimalZero":
			*_egafe = 23
		case "bullet":
			*_egafe = 24
		case "ganada":
			*_egafe = 25
		case "chosung":
			*_egafe = 26
		case "decimalEnclosedFullstop":
			*_egafe = 27
		case "decimalEnclosedParen":
			*_egafe = 28
		case "decimalEnclosedCircleChinese":
			*_egafe = 29
		case "ideographEnclosedCircle":
			*_egafe = 30
		case "ideographTraditional":
			*_egafe = 31
		case "ideographZodiac":
			*_egafe = 32
		case "ideographZodiacTraditional":
			*_egafe = 33
		case "taiwaneseCounting":
			*_egafe = 34
		case "ideographLegalTraditional":
			*_egafe = 35
		case "taiwaneseCountingThousand":
			*_egafe = 36
		case "taiwaneseDigital":
			*_egafe = 37
		case "chineseCounting":
			*_egafe = 38
		case "chineseLegalSimplified":
			*_egafe = 39
		case "chineseCountingThousand":
			*_egafe = 40
		case "koreanDigital":
			*_egafe = 41
		case "koreanCounting":
			*_egafe = 42
		case "koreanLegal":
			*_egafe = 43
		case "koreanDigital2":
			*_egafe = 44
		case "vietnameseCounting":
			*_egafe = 45
		case "russianLower":
			*_egafe = 46
		case "russianUpper":
			*_egafe = 47
		case "none":
			*_egafe = 48
		case "numberInDash":
			*_egafe = 49
		case "hebrew1":
			*_egafe = 50
		case "hebrew2":
			*_egafe = 51
		case "arabicAlpha":
			*_egafe = 52
		case "arabicAbjad":
			*_egafe = 53
		case "hindiVowels":
			*_egafe = 54
		case "hindiConsonants":
			*_egafe = 55
		case "hindiNumbers":
			*_egafe = 56
		case "hindiCounting":
			*_egafe = 57
		case "thaiLetters":
			*_egafe = 58
		case "thaiNumbers":
			*_egafe = 59
		case "thaiCounting":
			*_egafe = 60
		case "bahtText":
			*_egafe = 61
		case "dollarText":
			*_egafe = 62
		case "custom":
			*_egafe = 63
		}
	}
	_cegfcgg, _aeegdd = d.Token()
	if _aeegdd != nil {
		return _aeegdd
	}
	if _adfeab, _ffbaga := _cegfcgg.(_d.EndElement); _ffbaga && _adfeab.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cegfcgg)
}
func NewEG_ContentRowContent() *EG_ContentRowContent {
	_baadaed := &EG_ContentRowContent{}
	return _baadaed
}
func (_eccbf ST_MailMergeDest) ValidateWithPath(path string) error {
	switch _eccbf {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_eccbf))
	}
	return nil
}
func (_cdbagd *ST_View) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cdbagd = 0
	case "none":
		*_cdbagd = 1
	case "print":
		*_cdbagd = 2
	case "outline":
		*_cdbagd = 3
	case "masterPages":
		*_cdbagd = 4
	case "normal":
		*_cdbagd = 5
	case "web":
		*_cdbagd = 6
	}
	return nil
}

// ValidateWithPath validates the CT_DocRsids and its children, prefixing error messages with path
func (_gffdg *CT_DocRsids) ValidateWithPath(path string) error {
	if _gffdg.RsidRoot != nil {
		if _efea := _gffdg.RsidRoot.ValidateWithPath(path + "\u002fRsidRoot"); _efea != nil {
			return _efea
		}
	}
	for _bdge, _faecd := range _gffdg.Rsid {
		if _gdaa := _faecd.ValidateWithPath(_b.Sprintf("%s\u002fRsid\u005b\u0025d\u005d", path, _bdge)); _gdaa != nil {
			return _gdaa
		}
	}
	return nil
}

// ValidateWithPath validates the CT_WebSettings and its children, prefixing error messages with path
func (_acbcb *CT_WebSettings) ValidateWithPath(path string) error {
	if _acbcb.Frameset != nil {
		if _dgdbe := _acbcb.Frameset.ValidateWithPath(path + "\u002fFrameset"); _dgdbe != nil {
			return _dgdbe
		}
	}
	if _acbcb.Divs != nil {
		if _deabcd := _acbcb.Divs.ValidateWithPath(path + "\u002fDivs"); _deabcd != nil {
			return _deabcd
		}
	}
	if _acbcb.Encoding != nil {
		if _beaaa := _acbcb.Encoding.ValidateWithPath(path + "\u002fEncoding"); _beaaa != nil {
			return _beaaa
		}
	}
	if _acbcb.OptimizeForBrowser != nil {
		if _ddccd := _acbcb.OptimizeForBrowser.ValidateWithPath(path + "\u002fOptimizeForBrowser"); _ddccd != nil {
			return _ddccd
		}
	}
	if _acbcb.RelyOnVML != nil {
		if _fbaga := _acbcb.RelyOnVML.ValidateWithPath(path + "\u002fRelyOnVML"); _fbaga != nil {
			return _fbaga
		}
	}
	if _acbcb.AllowPNG != nil {
		if _gegea := _acbcb.AllowPNG.ValidateWithPath(path + "\u002fAllowPNG"); _gegea != nil {
			return _gegea
		}
	}
	if _acbcb.DoNotRelyOnCSS != nil {
		if _bdcddf := _acbcb.DoNotRelyOnCSS.ValidateWithPath(path + "\u002fDoNotRelyOnCSS"); _bdcddf != nil {
			return _bdcddf
		}
	}
	if _acbcb.DoNotSaveAsSingleFile != nil {
		if _abbedf := _acbcb.DoNotSaveAsSingleFile.ValidateWithPath(path + "\u002fDoNotSaveAsSingleFile"); _abbedf != nil {
			return _abbedf
		}
	}
	if _acbcb.DoNotOrganizeInFolder != nil {
		if _edddbd := _acbcb.DoNotOrganizeInFolder.ValidateWithPath(path + "\u002fDoNotOrganizeInFolder"); _edddbd != nil {
			return _edddbd
		}
	}
	if _acbcb.DoNotUseLongFileNames != nil {
		if _egagdg := _acbcb.DoNotUseLongFileNames.ValidateWithPath(path + "\u002fDoNotUseLongFileNames"); _egagdg != nil {
			return _egagdg
		}
	}
	if _acbcb.PixelsPerInch != nil {
		if _feebg := _acbcb.PixelsPerInch.ValidateWithPath(path + "\u002fPixelsPerInch"); _feebg != nil {
			return _feebg
		}
	}
	if _acbcb.TargetScreenSz != nil {
		if _dgabda := _acbcb.TargetScreenSz.ValidateWithPath(path + "\u002fTargetScreenSz"); _dgabda != nil {
			return _dgabda
		}
	}
	if _acbcb.SaveSmartTagsAsXml != nil {
		if _cffcce := _acbcb.SaveSmartTagsAsXml.ValidateWithPath(path + "\u002fSaveSmartTagsAsXml"); _cffcce != nil {
			return _cffcce
		}
	}
	return nil
}
func (_adabf *CT_TextEffect) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_adabf.ValAttr = ST_TextEffect(1)
	for _, _acdag := range start.Attr {
		if _acdag.Name.Local == "val" {
			_adabf.ValAttr.UnmarshalXMLAttr(_acdag)
			continue
		}
	}
	for {
		_eddca, _afdcd := d.Token()
		if _afdcd != nil {
			return _b.Errorf("parsing\u0020CT_TextEffect:\u0020\u0025s", _afdcd)
		}
		if _fddgda, _eabba := _eddca.(_d.EndElement); _eabba && _fddgda.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cccga ST_TextEffect) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dbgdgd := _d.Attr{}
	_dbgdgd.Name = name
	switch _cccga {
	case ST_TextEffectUnset:
		_dbgdgd.Value = ""
	case ST_TextEffectBlinkBackground:
		_dbgdgd.Value = "blinkBackground"
	case ST_TextEffectLights:
		_dbgdgd.Value = "lights"
	case ST_TextEffectAntsBlack:
		_dbgdgd.Value = "antsBlack"
	case ST_TextEffectAntsRed:
		_dbgdgd.Value = "antsRed"
	case ST_TextEffectShimmer:
		_dbgdgd.Value = "shimmer"
	case ST_TextEffectSparkle:
		_dbgdgd.Value = "sparkle"
	case ST_TextEffectNone:
		_dbgdgd.Value = "none"
	}
	return _dbgdgd, nil
}

// Validate validates the CT_MailMergeDocType and its children
func (_bgddc *CT_MailMergeDocType) Validate() error {
	return _bgddc.ValidateWithPath("CT_MailMergeDocType")
}

type CT_LevelText struct {

	// Level Text
	ValAttr *string

	// Level Text Is Null Character
	NullAttr *_g.ST_OnOff
}

func (_fbded *CT_PixelsMeasure) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ggefg := range start.Attr {
		if _ggefg.Name.Local == "val" {
			_ecafc, _cbdag := _dd.ParseUint(_ggefg.Value, 10, 64)
			if _cbdag != nil {
				return _cbdag
			}
			_fbded.ValAttr = _ecafc
			continue
		}
	}
	for {
		_aaccfg, _bbdafe := d.Token()
		if _bbdafe != nil {
			return _b.Errorf("parsing\u0020CT_PixelsMeasure: \u0025s", _bbdafe)
		}
		if _caeeg, _cecbcc := _aaccfg.(_d.EndElement); _cecbcc && _caeeg.Name == start.Name {
			break
		}
	}
	return nil
}

var ST_CnfPatternRe = _a.MustCompile(ST_CnfPattern)

func (_afgcab *WdST_AlignH) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_afgcab = 0
	case "left":
		*_afgcab = 1
	case "right":
		*_afgcab = 2
	case "center":
		*_afgcab = 3
	case "inside":
		*_afgcab = 4
	case "outside":
		*_afgcab = 5
	}
	return nil
}
func (_cdadfe *WdCT_WordprocessingGroupChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cdadfe.Wsp != nil {
		_aafea := _d.StartElement{Name: _d.Name{Local: "wp:wsp"}}
		for _, _deeaga := range _cdadfe.Wsp {
			e.EncodeElement(_deeaga, _aafea)
		}
	}
	if _cdadfe.GrpSp != nil {
		_cdceg := _d.StartElement{Name: _d.Name{Local: "wp:grpSp"}}
		for _, _bccbf := range _cdadfe.GrpSp {
			e.EncodeElement(_bccbf, _cdceg)
		}
	}
	if _cdadfe.GraphicFrame != nil {
		_efgcg := _d.StartElement{Name: _d.Name{Local: "wp:graphicFrame"}}
		for _, _eccef := range _cdadfe.GraphicFrame {
			e.EncodeElement(_eccef, _efgcg)
		}
	}
	if _cdadfe.Pic != nil {
		_gafgfd := _d.StartElement{Name: _d.Name{Local: "pic:pic"}}
		for _, _cagcbc := range _cdadfe.Pic {
			e.EncodeElement(_cagcbc, _gafgfd)
		}
	}
	if _cdadfe.ContentPart != nil {
		_decee := _d.StartElement{Name: _d.Name{Local: "wp:contentPart"}}
		for _, _geebf := range _cdadfe.ContentPart {
			e.EncodeElement(_geebf, _decee)
		}
	}
	return nil
}
func (_bbfac *CT_TcPrBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bbfac.CnfStyle != nil {
		_dfbcb := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		e.EncodeElement(_bbfac.CnfStyle, _dfbcb)
	}
	if _bbfac.TcW != nil {
		_cgggc := _d.StartElement{Name: _d.Name{Local: "w:tcW"}}
		e.EncodeElement(_bbfac.TcW, _cgggc)
	}
	if _bbfac.GridSpan != nil {
		_bgdfg := _d.StartElement{Name: _d.Name{Local: "w:gridSpan"}}
		e.EncodeElement(_bbfac.GridSpan, _bgdfg)
	}
	if _bbfac.HMerge != nil {
		_egfage := _d.StartElement{Name: _d.Name{Local: "w:hMerge"}}
		e.EncodeElement(_bbfac.HMerge, _egfage)
	}
	if _bbfac.VMerge != nil {
		_cddeb := _d.StartElement{Name: _d.Name{Local: "w:vMerge"}}
		e.EncodeElement(_bbfac.VMerge, _cddeb)
	}
	if _bbfac.TcBorders != nil {
		_dgcad := _d.StartElement{Name: _d.Name{Local: "w:tcBorders"}}
		e.EncodeElement(_bbfac.TcBorders, _dgcad)
	}
	if _bbfac.Shd != nil {
		_ebdgc := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_bbfac.Shd, _ebdgc)
	}
	if _bbfac.NoWrap != nil {
		_agbdc := _d.StartElement{Name: _d.Name{Local: "w:noWrap"}}
		e.EncodeElement(_bbfac.NoWrap, _agbdc)
	}
	if _bbfac.TcMar != nil {
		_ccaaa := _d.StartElement{Name: _d.Name{Local: "w:tcMar"}}
		e.EncodeElement(_bbfac.TcMar, _ccaaa)
	}
	if _bbfac.TextDirection != nil {
		_fafeab := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_bbfac.TextDirection, _fafeab)
	}
	if _bbfac.TcFitText != nil {
		_bcgbg := _d.StartElement{Name: _d.Name{Local: "w:tcFitText"}}
		e.EncodeElement(_bbfac.TcFitText, _bcgbg)
	}
	if _bbfac.VAlign != nil {
		_fbbbc := _d.StartElement{Name: _d.Name{Local: "w:vAlign"}}
		e.EncodeElement(_bbfac.VAlign, _fbbbc)
	}
	if _bbfac.HideMark != nil {
		_fafdcf := _d.StartElement{Name: _d.Name{Local: "w:hideMark"}}
		e.EncodeElement(_bbfac.HideMark, _fafdcf)
	}
	if _bbfac.Headers != nil {
		_bbdab := _d.StartElement{Name: _d.Name{Local: "w:headers"}}
		e.EncodeElement(_bbfac.Headers, _bbdab)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gegdd ST_TextboxTightWrap) Validate() error { return _gegdd.ValidateWithPath("") }
func (_edfdb *CT_MoveBookmark) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _edfdb.AuthorAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", _edfdb.DateAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _edfdb.NameAttr)})
	if _edfdb.ColFirstAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colFirst"}, Value: _b.Sprintf("\u0025v", *_edfdb.ColFirstAttr)})
	}
	if _edfdb.ColLastAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:colLast"}, Value: _b.Sprintf("\u0025v", *_edfdb.ColLastAttr)})
	}
	if _edfdb.DisplacedByCustomXmlAttr != ST_DisplacedByCustomXmlUnset {
		_bacce, _ggebf := _edfdb.DisplacedByCustomXmlAttr.MarshalXMLAttr(_d.Name{Local: "w:displacedByCustomXml"})
		if _ggebf != nil {
			return _ggebf
		}
		start.Attr = append(start.Attr, _bacce)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _edfdb.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_TblWidth() *CT_TblWidth { _aebbb := &CT_TblWidth{}; return _aebbb }
func NewCT_TcMar() *CT_TcMar       { _aaagc := &CT_TcMar{}; return _aaagc }
func (_dfbcbd *CT_WriteProtection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _eccce := range start.Attr {
		if _eccce.Name.Local == "cryptAlgorithmSid" {
			_acbge, _dedggc := _dd.ParseInt(_eccce.Value, 10, 64)
			if _dedggc != nil {
				return _dedggc
			}
			_dfbcbd.CryptAlgorithmSidAttr = &_acbge
			continue
		}
		if _eccce.Name.Local == "cryptSpinCount" {
			_edecdg, _bdeeg := _dd.ParseInt(_eccce.Value, 10, 64)
			if _bdeeg != nil {
				return _bdeeg
			}
			_dfbcbd.CryptSpinCountAttr = &_edecdg
			continue
		}
		if _eccce.Name.Local == "algorithmName" {
			_cggfag, _dagfd := _eccce.Value, error(nil)
			if _dagfd != nil {
				return _dagfd
			}
			_dfbcbd.AlgorithmNameAttr = &_cggfag
			continue
		}
		if _eccce.Name.Local == "cryptProvider" {
			_faeaf, _gbagb := _eccce.Value, error(nil)
			if _gbagb != nil {
				return _gbagb
			}
			_dfbcbd.CryptProviderAttr = &_faeaf
			continue
		}
		if _eccce.Name.Local == "saltValue" {
			_gfbbc, _eacgba := _eccce.Value, error(nil)
			if _eacgba != nil {
				return _eacgba
			}
			_dfbcbd.SaltValueAttr = &_gfbbc
			continue
		}
		if _eccce.Name.Local == "cryptProviderType" {
			_dfbcbd.CryptProviderTypeAttr.UnmarshalXMLAttr(_eccce)
			continue
		}
		if _eccce.Name.Local == "cryptAlgorithmClass" {
			_dfbcbd.CryptAlgorithmClassAttr.UnmarshalXMLAttr(_eccce)
			continue
		}
		if _eccce.Name.Local == "cryptAlgorithmType" {
			_dfbcbd.CryptAlgorithmTypeAttr.UnmarshalXMLAttr(_eccce)
			continue
		}
		if _eccce.Name.Local == "recommended" {
			_deafb, _dacgb := ParseUnionST_OnOff(_eccce.Value)
			if _dacgb != nil {
				return _dacgb
			}
			_dfbcbd.RecommendedAttr = &_deafb
			continue
		}
		if _eccce.Name.Local == "hashValue" {
			_dcfaeg, _effabf := _eccce.Value, error(nil)
			if _effabf != nil {
				return _effabf
			}
			_dfbcbd.HashValueAttr = &_dcfaeg
			continue
		}
		if _eccce.Name.Local == "spinCount" {
			_bddccb, _aaafc := _dd.ParseInt(_eccce.Value, 10, 64)
			if _aaafc != nil {
				return _aaafc
			}
			_dfbcbd.SpinCountAttr = &_bddccb
			continue
		}
		if _eccce.Name.Local == "algIdExt" {
			_eacdgc, _dgdcf := _eccce.Value, error(nil)
			if _dgdcf != nil {
				return _dgdcf
			}
			_dfbcbd.AlgIdExtAttr = &_eacdgc
			continue
		}
		if _eccce.Name.Local == "algIdExtSource" {
			_cbfgdg, _gacgc := _eccce.Value, error(nil)
			if _gacgc != nil {
				return _gacgc
			}
			_dfbcbd.AlgIdExtSourceAttr = &_cbfgdg
			continue
		}
		if _eccce.Name.Local == "cryptProviderTypeExt" {
			_afgab, _aecgg := _eccce.Value, error(nil)
			if _aecgg != nil {
				return _aecgg
			}
			_dfbcbd.CryptProviderTypeExtAttr = &_afgab
			continue
		}
		if _eccce.Name.Local == "cryptProviderTypeExtSource" {
			_caggd, _adcga := _eccce.Value, error(nil)
			if _adcga != nil {
				return _adcga
			}
			_dfbcbd.CryptProviderTypeExtSourceAttr = &_caggd
			continue
		}
		if _eccce.Name.Local == "hash" {
			_gace, _aaffc := _eccce.Value, error(nil)
			if _aaffc != nil {
				return _aaffc
			}
			_dfbcbd.HashAttr = &_gace
			continue
		}
		if _eccce.Name.Local == "salt" {
			_bdcgf, _cdefdg := _eccce.Value, error(nil)
			if _cdefdg != nil {
				return _cdefdg
			}
			_dfbcbd.SaltAttr = &_bdcgf
			continue
		}
	}
	for {
		_bfgdb, _ecfcc := d.Token()
		if _ecfcc != nil {
			return _b.Errorf("parsing\u0020CT_WriteProtection:\u0020\u0025s", _ecfcc)
		}
		if _agcbb, _bddfa := _bfgdb.(_d.EndElement); _bddfa && _agcbb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eeecfb ST_FldCharType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bbgeg := _d.Attr{}
	_bbgeg.Name = name
	switch _eeecfb {
	case ST_FldCharTypeUnset:
		_bbgeg.Value = ""
	case ST_FldCharTypeBegin:
		_bbgeg.Value = "begin"
	case ST_FldCharTypeSeparate:
		_bbgeg.Value = "separate"
	case ST_FldCharTypeEnd:
		_bbgeg.Value = "end"
	}
	return _bbgeg, nil
}
func (_bdgdg ST_DocProtect) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bdgdg.String(), start)
}

type CT_RPrOriginal struct {

	// Referenced Character Style
	RStyle *CT_String

	// Run Fonts
	RFonts *CT_Fonts

	// Bold
	B *CT_OnOff

	// Complex Script Bold
	BCs *CT_OnOff

	// Italics
	I *CT_OnOff

	// Complex Script Italics
	ICs *CT_OnOff

	// Display All Characters As Capital Letters
	Caps *CT_OnOff

	// Small Caps
	SmallCaps *CT_OnOff

	// Single Strikethrough
	Strike *CT_OnOff

	// Double Strikethrough
	Dstrike *CT_OnOff

	// Display Character Outline
	Outline *CT_OnOff

	// Shadow
	Shadow *CT_OnOff

	// Embossing
	Emboss *CT_OnOff

	// Imprinting
	Imprint *CT_OnOff

	// Do Not Check Spelling or Grammar
	NoProof *CT_OnOff

	// Use Document Grid Settings For Inter-Character Spacing
	SnapToGrid *CT_OnOff

	// Hidden Text
	Vanish *CT_OnOff

	// Web Hidden Text
	WebHidden *CT_OnOff

	// Run Content Color
	Color *CT_Color

	// Character Spacing Adjustment
	Spacing *CT_SignedTwipsMeasure

	// Expanded/Compressed Text
	W *CT_TextScale

	// Font Kerning
	Kern *CT_HpsMeasure

	// Vertically Raised or Lowered Text
	Position *CT_SignedHpsMeasure

	// Non-Complex Script Font Size
	Sz *CT_HpsMeasure

	// Complex Script Font Size
	SzCs *CT_HpsMeasure

	// Text Highlighting
	Highlight *CT_Highlight

	// Underline
	U *CT_Underline

	// Animated Text Effect
	Effect *CT_TextEffect

	// Text Border
	Bdr *CT_Border

	// Run Shading
	Shd *CT_Shd

	// Manual Run Width
	FitText *CT_FitText

	// Subscript/Superscript Text
	VertAlign *CT_VerticalAlignRun

	// Right To Left Text
	Rtl *CT_OnOff

	// Use Complex Script Formatting on Run
	Cs *CT_OnOff

	// Emphasis Mark
	Em *CT_Em

	// Languages for Run Content
	Lang *CT_Language

	// East Asian Typography Settings
	EastAsianLayout *CT_EastAsianLayout

	// Paragraph Mark Is Always Hidden
	SpecVanish *CT_OnOff

	// Office Open XML Math
	OMath *CT_OnOff
}

func (_ecgdd *ST_PTabLeader) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ecgdd = 0
	case "none":
		*_ecgdd = 1
	case "dot":
		*_ecgdd = 2
	case "hyphen":
		*_ecgdd = 3
	case "underscore":
		*_ecgdd = 4
	case "middleDot":
		*_ecgdd = 5
	}
	return nil
}
func (_cfae *CT_FitText) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _cfae.ValAttr)})
	if _cfae.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", *_cfae.IdAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_BlockLevelChunkElts and its children
func (_ffadfb *EG_BlockLevelChunkElts) Validate() error {
	return _ffadfb.ValidateWithPath("EG_BlockLevelChunkElts")
}

// Validate validates the CT_Markup and its children
func (_eaeb *CT_Markup) Validate() error { return _eaeb.ValidateWithPath("CT_Markup") }
func NewCT_Frameset() *CT_Frameset       { _ccdaf := &CT_Frameset{}; return _ccdaf }

type CT_FramesetChoice struct {
	Frameset []*CT_Frameset
	Frame    []*CT_Frame
}

func (_dbdgf *WdAnchor) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "wp:anchor"
	return _dbdgf.WdCT_Anchor.MarshalXML(e, start)
}
func NewWdCT_PosV() *WdCT_PosV {
	_ebbaa := &WdCT_PosV{}
	_ebbaa.RelativeFromAttr = WdST_RelFromV(1)
	_ebbaa.Choice = NewWdCT_PosVChoice()
	return _ebbaa
}
func (_gdcadg ST_ObjectUpdateMode) ValidateWithPath(path string) error {
	switch _gdcadg {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_gdcadg))
	}
	return nil
}

// ValidateWithPath validates the CT_TextScale and its children, prefixing error messages with path
func (_fbadcad *CT_TextScale) ValidateWithPath(path string) error {
	if _fbadcad.ValAttr != nil {
		if _cfdfb := _fbadcad.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cfdfb != nil {
			return _cfdfb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Object and its children, prefixing error messages with path
func (_eeeed *CT_Object) ValidateWithPath(path string) error {
	if _eeeed.DxaOrigAttr != nil {
		if _cddga := _eeeed.DxaOrigAttr.ValidateWithPath(path + "\u002fDxaOrigAttr"); _cddga != nil {
			return _cddga
		}
	}
	if _eeeed.DyaOrigAttr != nil {
		if _gdadg := _eeeed.DyaOrigAttr.ValidateWithPath(path + "\u002fDyaOrigAttr"); _gdadg != nil {
			return _gdadg
		}
	}
	if _eeeed.Drawing != nil {
		if _bfgfg := _eeeed.Drawing.ValidateWithPath(path + "\u002fDrawing"); _bfgfg != nil {
			return _bfgfg
		}
	}
	if _eeeed.Choice != nil {
		if _adag := _eeeed.Choice.ValidateWithPath(path + "\u002fChoice"); _adag != nil {
			return _adag
		}
	}
	return nil
}

// Validate validates the Recipients and its children
func (_fabgga *Recipients) Validate() error { return _fabgga.ValidateWithPath("Recipients") }

type CT_FontFamily struct {

	// Font Family Value
	ValAttr ST_FontFamily
}

func (_gbagbe ST_FldCharType) String() string {
	switch _gbagbe {
	case 0:
		return ""
	case 1:
		return "begin"
	case 2:
		return "separate"
	case 3:
		return "end"
	}
	return ""
}

// Validate validates the WdCT_WordprocessingContentPartNonVisual and its children
func (_gcfbe *WdCT_WordprocessingContentPartNonVisual) Validate() error {
	return _gcfbe.ValidateWithPath("WdCT_WordprocessingContentPartNonVisual")
}
func (_edebdg *ST_EdGrp) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_edebdg = 0
	case "none":
		*_edebdg = 1
	case "everyone":
		*_edebdg = 2
	case "administrators":
		*_edebdg = 3
	case "contributors":
		*_edebdg = 4
	case "editors":
		*_edebdg = 5
	case "owners":
		*_edebdg = 6
	case "current":
		*_edebdg = 7
	}
	return nil
}

// ValidateWithPath validates the CT_DocDefaults and its children, prefixing error messages with path
func (_gbfb *CT_DocDefaults) ValidateWithPath(path string) error {
	if _gbfb.RPrDefault != nil {
		if _bfdc := _gbfb.RPrDefault.ValidateWithPath(path + "/RPrDefault"); _bfdc != nil {
			return _bfdc
		}
	}
	if _gbfb.PPrDefault != nil {
		if _eebce := _gbfb.PPrDefault.ValidateWithPath(path + "/PPrDefault"); _eebce != nil {
			return _eebce
		}
	}
	return nil
}
func NewCT_LongHexNumber() *CT_LongHexNumber { _aface := &CT_LongHexNumber{}; return _aface }

type CT_RPrDefault struct {

	// Run Properties
	RPr *CT_RPr
}

// Validate validates the CT_Captions and its children
func (_acce *CT_Captions) Validate() error { return _acce.ValidateWithPath("CT_Captions") }

// ValidateWithPath validates the WdCT_WordprocessingCanvasChoice and its children, prefixing error messages with path
func (_fcgfeb *WdCT_WordprocessingCanvasChoice) ValidateWithPath(path string) error {
	for _gdcdc, _dddad := range _fcgfeb.Wsp {
		if _gecbef := _dddad.ValidateWithPath(_b.Sprintf("\u0025s\u002fWsp\u005b\u0025d\u005d", path, _gdcdc)); _gecbef != nil {
			return _gecbef
		}
	}
	for _bedea, _egeaa := range _fcgfeb.Pic {
		if _afafe := _egeaa.ValidateWithPath(_b.Sprintf("\u0025s\u002fPic\u005b\u0025d\u005d", path, _bedea)); _afafe != nil {
			return _afafe
		}
	}
	for _eedggb, _bgedd := range _fcgfeb.ContentPart {
		if _faggea := _bgedd.ValidateWithPath(_b.Sprintf("\u0025s\u002fContentPart\u005b\u0025d\u005d", path, _eedggb)); _faggea != nil {
			return _faggea
		}
	}
	for _ebgaaf, _abgad := range _fcgfeb.Wgp {
		if _gaccc := _abgad.ValidateWithPath(_b.Sprintf("\u0025s\u002fWgp\u005b\u0025d\u005d", path, _ebgaaf)); _gaccc != nil {
			return _gaccc
		}
	}
	for _gcddef, _afcdbf := range _fcgfeb.GraphicFrame {
		if _bbcaf := _afcdbf.ValidateWithPath(_b.Sprintf("\u0025s\u002fGraphicFrame\u005b\u0025d\u005d", path, _gcddef)); _bbcaf != nil {
			return _bbcaf
		}
	}
	return nil
}
func (_cdcacg *CT_TblLook) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _aafad := range start.Attr {
		if _aafad.Name.Local == "firstRow" {
			_acgeb, _cedca := ParseUnionST_OnOff(_aafad.Value)
			if _cedca != nil {
				return _cedca
			}
			_cdcacg.FirstRowAttr = &_acgeb
			continue
		}
		if _aafad.Name.Local == "lastRow" {
			_fcfbd, _ddcagd := ParseUnionST_OnOff(_aafad.Value)
			if _ddcagd != nil {
				return _ddcagd
			}
			_cdcacg.LastRowAttr = &_fcfbd
			continue
		}
		if _aafad.Name.Local == "firstColumn" {
			_facddb, _caegeg := ParseUnionST_OnOff(_aafad.Value)
			if _caegeg != nil {
				return _caegeg
			}
			_cdcacg.FirstColumnAttr = &_facddb
			continue
		}
		if _aafad.Name.Local == "lastColumn" {
			_cggcaf, _afccd := ParseUnionST_OnOff(_aafad.Value)
			if _afccd != nil {
				return _afccd
			}
			_cdcacg.LastColumnAttr = &_cggcaf
			continue
		}
		if _aafad.Name.Local == "noHBand" {
			_edefb, _dddded := ParseUnionST_OnOff(_aafad.Value)
			if _dddded != nil {
				return _dddded
			}
			_cdcacg.NoHBandAttr = &_edefb
			continue
		}
		if _aafad.Name.Local == "noVBand" {
			_afceg, _bgbdd := ParseUnionST_OnOff(_aafad.Value)
			if _bgbdd != nil {
				return _bgbdd
			}
			_cdcacg.NoVBandAttr = &_afceg
			continue
		}
		if _aafad.Name.Local == "val" {
			_bfccg, _cgacbb := _aafad.Value, error(nil)
			if _cgacbb != nil {
				return _cgacbb
			}
			_cdcacg.ValAttr = &_bfccg
			continue
		}
	}
	for {
		_ebdce, _dbedca := d.Token()
		if _dbedca != nil {
			return _b.Errorf("parsing\u0020CT_TblLook:\u0020%s", _dbedca)
		}
		if _gdcfa, _ggfga := _ebdce.(_d.EndElement); _ggfga && _gdcfa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fdfcd *CT_DocPartPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_fbbbfg := _d.StartElement{Name: _d.Name{Local: "w:name"}}
	e.EncodeElement(_fdfcd.Name, _fbbbfg)
	if _fdfcd.Style != nil {
		_ecbe := _d.StartElement{Name: _d.Name{Local: "w:style"}}
		e.EncodeElement(_fdfcd.Style, _ecbe)
	}
	if _fdfcd.Category != nil {
		_cbgc := _d.StartElement{Name: _d.Name{Local: "w:category"}}
		e.EncodeElement(_fdfcd.Category, _cbgc)
	}
	if _fdfcd.Types != nil {
		_fbcdc := _d.StartElement{Name: _d.Name{Local: "w:types"}}
		e.EncodeElement(_fdfcd.Types, _fbcdc)
	}
	if _fdfcd.Behaviors != nil {
		_abdge := _d.StartElement{Name: _d.Name{Local: "w:behaviors"}}
		e.EncodeElement(_fdfcd.Behaviors, _abdge)
	}
	if _fdfcd.Description != nil {
		_dcfa := _d.StartElement{Name: _d.Name{Local: "w:description"}}
		e.EncodeElement(_fdfcd.Description, _dcfa)
	}
	if _fdfcd.Guid != nil {
		_egagc := _d.StartElement{Name: _d.Name{Local: "w:guid"}}
		e.EncodeElement(_fdfcd.Guid, _egagc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_afbcaa *ST_MailMergeDest) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cefdge, _bdbbc := d.Token()
	if _bdbbc != nil {
		return _bdbbc
	}
	if _dfgggf, _afgbga := _cefdge.(_d.EndElement); _afgbga && _dfgggf.Name == start.Name {
		*_afbcaa = 1
		return nil
	}
	if _ggecfa, _bdcea := _cefdge.(_d.CharData); !_bdcea {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cefdge)
	} else {
		switch string(_ggecfa) {
		case "":
			*_afbcaa = 0
		case "newDocument":
			*_afbcaa = 1
		case "printer":
			*_afbcaa = 2
		case "email":
			*_afbcaa = 3
		case "fax":
			*_afbcaa = 4
		}
	}
	_cefdge, _bdbbc = d.Token()
	if _bdbbc != nil {
		return _bdbbc
	}
	if _bcbfg, _gaced := _cefdge.(_d.EndElement); _gaced && _bcbfg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cefdge)
}
func (_ccecba *CT_PTab) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ccecba.AlignmentAttr = ST_PTabAlignment(1)
	_ccecba.RelativeToAttr = ST_PTabRelativeTo(1)
	_ccecba.LeaderAttr = ST_PTabLeader(1)
	for _, _cdeggg := range start.Attr {
		if _cdeggg.Name.Local == "alignment" {
			_ccecba.AlignmentAttr.UnmarshalXMLAttr(_cdeggg)
			continue
		}
		if _cdeggg.Name.Local == "relativeTo" {
			_ccecba.RelativeToAttr.UnmarshalXMLAttr(_cdeggg)
			continue
		}
		if _cdeggg.Name.Local == "leader" {
			_ccecba.LeaderAttr.UnmarshalXMLAttr(_cdeggg)
			continue
		}
	}
	for {
		_cceeca, _cgeca := d.Token()
		if _cgeca != nil {
			return _b.Errorf("parsing\u0020CT_PTab:\u0020\u0025s", _cgeca)
		}
		if _gcgbgg, _dgcaba := _cceeca.(_d.EndElement); _dgcaba && _gcgbgg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_agcbgc *CT_TargetScreenSz) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_beeea, _ceeaf := _agcbgc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _ceeaf != nil {
		return _ceeaf
	}
	start.Attr = append(start.Attr, _beeea)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_SdtRun struct {

	// Structured Document Tag Properties
	SdtPr *CT_SdtPr

	// Structured Document Tag End Character Properties
	SdtEndPr *CT_SdtEndPr

	// Inline-Level Structured Document Tag Content
	SdtContent *CT_SdtContentRun
}
type CT_Endnotes struct {

	// Endnote Content
	Endnote []*CT_FtnEdn
}

// Validate validates the CT_DocVars and its children
func (_cbfa *CT_DocVars) Validate() error { return _cbfa.ValidateWithPath("CT_DocVars") }
func (_adbdaa *WdST_RelFromH) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_adbdaa = 0
	case "margin":
		*_adbdaa = 1
	case "page":
		*_adbdaa = 2
	case "column":
		*_adbdaa = 3
	case "character":
		*_adbdaa = 4
	case "leftMargin":
		*_adbdaa = 5
	case "rightMargin":
		*_adbdaa = 6
	case "insideMargin":
		*_adbdaa = 7
	case "outsideMargin":
		*_adbdaa = 8
	}
	return nil
}
func (_eefeg *CT_TrackChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ecbff := range start.Attr {
		if _ecbff.Name.Local == "author" {
			_daaebe, _cbdbg := _ecbff.Value, error(nil)
			if _cbdbg != nil {
				return _cbdbg
			}
			_eefeg.AuthorAttr = _daaebe
			continue
		}
		if _ecbff.Name.Local == "date" {
			_fceab, _ffccd := ParseStdlibTime(_ecbff.Value)
			if _ffccd != nil {
				return _ffccd
			}
			_eefeg.DateAttr = &_fceab
			continue
		}
		if _ecbff.Name.Local == "id" {
			_ebceb, _cfdgf := _dd.ParseInt(_ecbff.Value, 10, 64)
			if _cfdgf != nil {
				return _cfdgf
			}
			_eefeg.IdAttr = _ebceb
			continue
		}
	}
	for {
		_gggea, _abaff := d.Token()
		if _abaff != nil {
			return _b.Errorf("parsing\u0020CT_TrackChange:\u0020\u0025s", _abaff)
		}
		if _ceeda, _bcdedc := _gggea.(_d.EndElement); _bcdedc && _ceeda.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_FramesetChoice and its children
func (_bfca *CT_FramesetChoice) Validate() error { return _bfca.ValidateWithPath("CT_FramesetChoice") }
func (_dfcfcc *ST_TextAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dfcfcc = 0
	case "top":
		*_dfcfcc = 1
	case "center":
		*_dfcfcc = 2
	case "baseline":
		*_dfcfcc = 3
	case "bottom":
		*_dfcfcc = 4
	case "auto":
		*_dfcfcc = 5
	}
	return nil
}

type ST_HdrFtr byte

func (_eecdbd *ST_DocGrid) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_eecdbd = 0
	case "default":
		*_eecdbd = 1
	case "lines":
		*_eecdbd = 2
	case "linesAndChars":
		*_eecdbd = 3
	case "snapToChars":
		*_eecdbd = 4
	}
	return nil
}

type CT_Empty struct{}
type WdCT_WordprocessingGroup struct {
	CNvPr      *_eb.CT_NonVisualDrawingProps
	CNvGrpSpPr *_eb.CT_NonVisualGroupDrawingShapeProps
	GrpSpPr    *_eb.CT_GroupShapeProperties
	Choice     []*WdCT_WordprocessingGroupChoice
	ExtLst     *_eb.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_LatentStyles and its children, prefixing error messages with path
func (_edbef *CT_LatentStyles) ValidateWithPath(path string) error {
	if _edbef.DefLockedStateAttr != nil {
		if _fbcac := _edbef.DefLockedStateAttr.ValidateWithPath(path + "\u002fDefLockedStateAttr"); _fbcac != nil {
			return _fbcac
		}
	}
	if _edbef.DefSemiHiddenAttr != nil {
		if _dgabd := _edbef.DefSemiHiddenAttr.ValidateWithPath(path + "\u002fDefSemiHiddenAttr"); _dgabd != nil {
			return _dgabd
		}
	}
	if _edbef.DefUnhideWhenUsedAttr != nil {
		if _bbcab := _edbef.DefUnhideWhenUsedAttr.ValidateWithPath(path + "\u002fDefUnhideWhenUsedAttr"); _bbcab != nil {
			return _bbcab
		}
	}
	if _edbef.DefQFormatAttr != nil {
		if _gedb := _edbef.DefQFormatAttr.ValidateWithPath(path + "\u002fDefQFormatAttr"); _gedb != nil {
			return _gedb
		}
	}
	for _bdfbf, _aadecd := range _edbef.LsdException {
		if _bcdad := _aadecd.ValidateWithPath(_b.Sprintf("\u0025s\u002fLsdException\u005b\u0025d\u005d", path, _bdfbf)); _bcdad != nil {
			return _bcdad
		}
	}
	return nil
}
func (_fggdd ST_FontFamily) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fggdd.String(), start)
}
func (_beegc ST_Proof) ValidateWithPath(path string) error {
	switch _beegc {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_beegc))
	}
	return nil
}
func (_dcdfea *CT_PageMar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:top"}, Value: _b.Sprintf("\u0025v", _dcdfea.TopAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:right"}, Value: _b.Sprintf("\u0025v", _dcdfea.RightAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:bottom"}, Value: _b.Sprintf("\u0025v", _dcdfea.BottomAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:left"}, Value: _b.Sprintf("\u0025v", _dcdfea.LeftAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:header"}, Value: _b.Sprintf("\u0025v", _dcdfea.HeaderAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:footer"}, Value: _b.Sprintf("\u0025v", _dcdfea.FooterAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:gutter"}, Value: _b.Sprintf("\u0025v", _dcdfea.GutterAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_Fonts() *CT_Fonts { _bdgdd := &CT_Fonts{}; return _bdgdd }
func (_cbcda ST_CombineBrackets) ValidateWithPath(path string) error {
	switch _cbcda {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cbcda))
	}
	return nil
}
func NewCT_R() *CT_R                         { _aagag := &CT_R{}; return _aagag }
func (_dafdc WdST_WrapText) Validate() error { return _dafdc.ValidateWithPath("") }
func (_fgddcc *ST_TextDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_acbgea, _dcccg := d.Token()
	if _dcccg != nil {
		return _dcccg
	}
	if _beecfg, _gcead := _acbgea.(_d.EndElement); _gcead && _beecfg.Name == start.Name {
		*_fgddcc = 1
		return nil
	}
	if _adgcad, _degbdd := _acbgea.(_d.CharData); !_degbdd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _acbgea)
	} else {
		switch string(_adgcad) {
		case "":
			*_fgddcc = 0
		case "tb":
			*_fgddcc = 1
		case "rl":
			*_fgddcc = 2
		case "lr":
			*_fgddcc = 3
		case "tbV":
			*_fgddcc = 4
		case "rlV":
			*_fgddcc = 5
		case "lrV":
			*_fgddcc = 6
		case "btLr":
			*_fgddcc = 7
		case "lrTb":
			*_fgddcc = 8
		case "lrTbV":
			*_fgddcc = 9
		case "tbLrV":
			*_fgddcc = 10
		case "tbRl":
			*_fgddcc = 11
		case "tbRlV":
			*_fgddcc = 12
		}
	}
	_acbgea, _dcccg = d.Token()
	if _dcccg != nil {
		return _dcccg
	}
	if _dbdbd, _faaec := _acbgea.(_d.EndElement); _faaec && _dbdbd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _acbgea)
}

// ValidateWithPath validates the CT_OptimizeForBrowser and its children, prefixing error messages with path
func (_fgaff *CT_OptimizeForBrowser) ValidateWithPath(path string) error {
	if _fgaff.ValAttr != nil {
		if _gbadc := _fgaff.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _gbadc != nil {
			return _gbadc
		}
	}
	return nil
}
func (_bbb *CT_Base64Binary) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dgga := range start.Attr {
		if _dgga.Name.Local == "val" {
			_efe, _ffe := _dgga.Value, error(nil)
			if _ffe != nil {
				return _ffe
			}
			_bbb.ValAttr = _efe
			continue
		}
	}
	for {
		_acdd, _gdee := d.Token()
		if _gdee != nil {
			return _b.Errorf("parsing CT_Base64Binary:\u0020\u0025s", _gdee)
		}
		if _dfd, _eag := _acdd.(_d.EndElement); _eag && _dfd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_LvlLegacy() *CT_LvlLegacy { _gaec := &CT_LvlLegacy{}; return _gaec }
func (_bfcefe *TxbxContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:txbxContent"
	return _bfcefe.CT_TxbxContent.MarshalXML(e, start)
}
func (_edbagb ST_HeightRule) Validate() error { return _edbagb.ValidateWithPath("") }

// Validate validates the CT_Attr and its children
func (_ffgg *CT_Attr) Validate() error { return _ffgg.ValidateWithPath("CT_Attr") }

// Validate validates the CT_Background and its children
func (_ebb *CT_Background) Validate() error { return _ebb.ValidateWithPath("CT_Background") }

// ValidateWithPath validates the CT_Kinsoku and its children, prefixing error messages with path
func (_deaga *CT_Kinsoku) ValidateWithPath(path string) error { return nil }
func (_fcaee *CT_DocType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cecb := range start.Attr {
		if _cecb.Name.Local == "val" {
			_aeeb, _gbggf := _cecb.Value, error(nil)
			if _gbggf != nil {
				return _gbggf
			}
			_fcaee.ValAttr = _aeeb
			continue
		}
	}
	for {
		_egbdd, _eacd := d.Token()
		if _eacd != nil {
			return _b.Errorf("parsing\u0020CT_DocType:\u0020%s", _eacd)
		}
		if _aeeeb, _ccda := _egbdd.(_d.EndElement); _ccda && _aeeeb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_debdaa *ST_Wrap) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eaefec, _gffaa := d.Token()
	if _gffaa != nil {
		return _gffaa
	}
	if _edegaf, _fefgac := _eaefec.(_d.EndElement); _fefgac && _edegaf.Name == start.Name {
		*_debdaa = 1
		return nil
	}
	if _ggefdc, _fgaegc := _eaefec.(_d.CharData); !_fgaegc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _eaefec)
	} else {
		switch string(_ggefdc) {
		case "":
			*_debdaa = 0
		case "auto":
			*_debdaa = 1
		case "notBeside":
			*_debdaa = 2
		case "around":
			*_debdaa = 3
		case "tight":
			*_debdaa = 4
		case "through":
			*_debdaa = 5
		case "none":
			*_debdaa = 6
		}
	}
	_eaefec, _gffaa = d.Token()
	if _gffaa != nil {
		return _gffaa
	}
	if _cabbf, _adeebg := _eaefec.(_d.EndElement); _adeebg && _cabbf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _eaefec)
}
func (_fbgfd *CT_ObjectEmbed) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _debag := range start.Attr {
		if _debag.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _debag.Name.Local == "id" || _debag.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _debag.Name.Local == "id" {
			_dcfce, _cdaf := _debag.Value, error(nil)
			if _cdaf != nil {
				return _cdaf
			}
			_fbgfd.IdAttr = _dcfce
			continue
		}
		if _debag.Name.Local == "drawAspect" {
			_fbgfd.DrawAspectAttr.UnmarshalXMLAttr(_debag)
			continue
		}
		if _debag.Name.Local == "progId" {
			_dbegg, _egabe := _debag.Value, error(nil)
			if _egabe != nil {
				return _egabe
			}
			_fbgfd.ProgIdAttr = &_dbegg
			continue
		}
		if _debag.Name.Local == "shapeId" {
			_ebfba, _acedd := _debag.Value, error(nil)
			if _acedd != nil {
				return _acedd
			}
			_fbgfd.ShapeIdAttr = &_ebfba
			continue
		}
		if _debag.Name.Local == "fieldCodes" {
			_eeebe, _dggfafb := _debag.Value, error(nil)
			if _dggfafb != nil {
				return _dggfafb
			}
			_fbgfd.FieldCodesAttr = &_eeebe
			continue
		}
	}
	for {
		_fefcd, _cdfab := d.Token()
		if _cdfab != nil {
			return _b.Errorf("parsing\u0020CT_ObjectEmbed:\u0020\u0025s", _cdfab)
		}
		if _bddcd, _cgafge := _fefcd.(_d.EndElement); _cgafge && _bddcd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eccgec *ST_TblStyleOverrideType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_eccgec = 0
	case "wholeTable":
		*_eccgec = 1
	case "firstRow":
		*_eccgec = 2
	case "lastRow":
		*_eccgec = 3
	case "firstCol":
		*_eccgec = 4
	case "lastCol":
		*_eccgec = 5
	case "band1Vert":
		*_eccgec = 6
	case "band2Vert":
		*_eccgec = 7
	case "band1Horz":
		*_eccgec = 8
	case "band2Horz":
		*_eccgec = 9
	case "neCell":
		*_eccgec = 10
	case "nwCell":
		*_eccgec = 11
	case "seCell":
		*_eccgec = 12
	case "swCell":
		*_eccgec = 13
	}
	return nil
}
func (_cfcfba ST_DocGrid) ValidateWithPath(path string) error {
	switch _cfcfba {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cfcfba))
	}
	return nil
}
func (_gdafc *CT_StylePaneFilter) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cgbbe := range start.Attr {
		if _cgbbe.Name.Local == "directFormattingOnParagraphs" {
			_aceba, _ggade := ParseUnionST_OnOff(_cgbbe.Value)
			if _ggade != nil {
				return _ggade
			}
			_gdafc.DirectFormattingOnParagraphsAttr = &_aceba
			continue
		}
		if _cgbbe.Name.Local == "allStyles" {
			_caceca, _eacdb := ParseUnionST_OnOff(_cgbbe.Value)
			if _eacdb != nil {
				return _eacdb
			}
			_gdafc.AllStylesAttr = &_caceca
			continue
		}
		if _cgbbe.Name.Local == "directFormattingOnNumbering" {
			_edcee, _ggdgae := ParseUnionST_OnOff(_cgbbe.Value)
			if _ggdgae != nil {
				return _ggdgae
			}
			_gdafc.DirectFormattingOnNumberingAttr = &_edcee
			continue
		}
		if _cgbbe.Name.Local == "latentStyles" {
			_aacdgg, _ebeeb := ParseUnionST_OnOff(_cgbbe.Value)
			if _ebeeb != nil {
				return _ebeeb
			}
			_gdafc.LatentStylesAttr = &_aacdgg
			continue
		}
		if _cgbbe.Name.Local == "headingStyles" {
			_dbabf, _cbbgc := ParseUnionST_OnOff(_cgbbe.Value)
			if _cbbgc != nil {
				return _cbbgc
			}
			_gdafc.HeadingStylesAttr = &_dbabf
			continue
		}
		if _cgbbe.Name.Local == "numberingStyles" {
			_bafbg, _ffdca := ParseUnionST_OnOff(_cgbbe.Value)
			if _ffdca != nil {
				return _ffdca
			}
			_gdafc.NumberingStylesAttr = &_bafbg
			continue
		}
		if _cgbbe.Name.Local == "tableStyles" {
			_baecb, _ffeab := ParseUnionST_OnOff(_cgbbe.Value)
			if _ffeab != nil {
				return _ffeab
			}
			_gdafc.TableStylesAttr = &_baecb
			continue
		}
		if _cgbbe.Name.Local == "directFormattingOnRuns" {
			_effed, _cgccd := ParseUnionST_OnOff(_cgbbe.Value)
			if _cgccd != nil {
				return _cgccd
			}
			_gdafc.DirectFormattingOnRunsAttr = &_effed
			continue
		}
		if _cgbbe.Name.Local == "customStyles" {
			_adaaf, _ggcfcb := ParseUnionST_OnOff(_cgbbe.Value)
			if _ggcfcb != nil {
				return _ggcfcb
			}
			_gdafc.CustomStylesAttr = &_adaaf
			continue
		}
		if _cgbbe.Name.Local == "stylesInUse" {
			_afbec, _aegbf := ParseUnionST_OnOff(_cgbbe.Value)
			if _aegbf != nil {
				return _aegbf
			}
			_gdafc.StylesInUseAttr = &_afbec
			continue
		}
		if _cgbbe.Name.Local == "directFormattingOnTables" {
			_facggc, _afceb := ParseUnionST_OnOff(_cgbbe.Value)
			if _afceb != nil {
				return _afceb
			}
			_gdafc.DirectFormattingOnTablesAttr = &_facggc
			continue
		}
		if _cgbbe.Name.Local == "clearFormatting" {
			_aecae, _gbdegc := ParseUnionST_OnOff(_cgbbe.Value)
			if _gbdegc != nil {
				return _gbdegc
			}
			_gdafc.ClearFormattingAttr = &_aecae
			continue
		}
		if _cgbbe.Name.Local == "top3HeadingStyles" {
			_geabb, _ddcfg := ParseUnionST_OnOff(_cgbbe.Value)
			if _ddcfg != nil {
				return _ddcfg
			}
			_gdafc.Top3HeadingStylesAttr = &_geabb
			continue
		}
		if _cgbbe.Name.Local == "visibleStyles" {
			_fabbb, _efceg := ParseUnionST_OnOff(_cgbbe.Value)
			if _efceg != nil {
				return _efceg
			}
			_gdafc.VisibleStylesAttr = &_fabbb
			continue
		}
		if _cgbbe.Name.Local == "alternateStyleNames" {
			_ceedf, _adfeb := ParseUnionST_OnOff(_cgbbe.Value)
			if _adfeb != nil {
				return _adfeb
			}
			_gdafc.AlternateStyleNamesAttr = &_ceedf
			continue
		}
		if _cgbbe.Name.Local == "val" {
			_ecaddf, _bdbaf := _cgbbe.Value, error(nil)
			if _bdbaf != nil {
				return _bdbaf
			}
			_gdafc.ValAttr = &_ecaddf
			continue
		}
	}
	for {
		_fddegg, _aeegb := d.Token()
		if _aeegb != nil {
			return _b.Errorf("parsing\u0020CT_StylePaneFilter:\u0020\u0025s", _aeegb)
		}
		if _decfb, _cceecag := _fddegg.(_d.EndElement); _cceecag && _decfb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ffaece *ST_MultiLevelType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_abeec, _bggcgb := d.Token()
	if _bggcgb != nil {
		return _bggcgb
	}
	if _cdafce, _gcdef := _abeec.(_d.EndElement); _gcdef && _cdafce.Name == start.Name {
		*_ffaece = 1
		return nil
	}
	if _caage, _cbaafcf := _abeec.(_d.CharData); !_cbaafcf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _abeec)
	} else {
		switch string(_caage) {
		case "":
			*_ffaece = 0
		case "singleLevel":
			*_ffaece = 1
		case "multilevel":
			*_ffaece = 2
		case "hybridMultilevel":
			*_ffaece = 3
		}
	}
	_abeec, _bggcgb = d.Token()
	if _bggcgb != nil {
		return _bggcgb
	}
	if _cfcbe, _aefaf := _abeec.(_d.EndElement); _aefaf && _cfcbe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _abeec)
}

// ValidateWithPath validates the CT_SdtRun and its children, prefixing error messages with path
func (_cagcce *CT_SdtRun) ValidateWithPath(path string) error {
	if _cagcce.SdtPr != nil {
		if _bdcaf := _cagcce.SdtPr.ValidateWithPath(path + "\u002fSdtPr"); _bdcaf != nil {
			return _bdcaf
		}
	}
	if _cagcce.SdtEndPr != nil {
		if _dgdce := _cagcce.SdtEndPr.ValidateWithPath(path + "\u002fSdtEndPr"); _dgdce != nil {
			return _dgdce
		}
	}
	if _cagcce.SdtContent != nil {
		if _efbfd := _cagcce.SdtContent.ValidateWithPath(path + "/SdtContent"); _efbfd != nil {
			return _efbfd
		}
	}
	return nil
}
func (_fegcc *CT_SdtPrChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gbbffa:
	for {
		_gcfefc, _cdacca := d.Token()
		if _cdacca != nil {
			return _cdacca
		}
		switch _fegea := _gcfefc.(type) {
		case _d.StartElement:
			switch _fegea.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "equation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "equation"}:
				_fegcc.Equation = NewCT_Empty()
				if _eafae := d.DecodeElement(_fegcc.Equation, &_fegea); _eafae != nil {
					return _eafae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "comboBox"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "comboBox"}:
				_fegcc.ComboBox = NewCT_SdtComboBox()
				if _fagdd := d.DecodeElement(_fegcc.ComboBox, &_fegea); _fagdd != nil {
					return _fagdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "date"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "date"}:
				_fegcc.Date = NewCT_SdtDate()
				if _agbef := d.DecodeElement(_fegcc.Date, &_fegea); _agbef != nil {
					return _agbef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartObj"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartObj"}:
				_fegcc.DocPartObj = NewCT_SdtDocPart()
				if _dbffbf := d.DecodeElement(_fegcc.DocPartObj, &_fegea); _dbffbf != nil {
					return _dbffbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPartList"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPartList"}:
				_fegcc.DocPartList = NewCT_SdtDocPart()
				if _gfecg := d.DecodeElement(_fegcc.DocPartList, &_fegea); _gfecg != nil {
					return _gfecg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dropDownList"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dropDownList"}:
				_fegcc.DropDownList = NewCT_SdtDropDownList()
				if _eceda := d.DecodeElement(_fegcc.DropDownList, &_fegea); _eceda != nil {
					return _eceda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "picture"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "picture"}:
				_fegcc.Picture = NewCT_Empty()
				if _edcab := d.DecodeElement(_fegcc.Picture, &_fegea); _edcab != nil {
					return _edcab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "richText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "richText"}:
				_fegcc.RichText = NewCT_Empty()
				if _cdgaeg := d.DecodeElement(_fegcc.RichText, &_fegea); _cdgaeg != nil {
					return _cdgaeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "text"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "text"}:
				_fegcc.Text = NewCT_SdtText()
				if _cebggf := d.DecodeElement(_fegcc.Text, &_fegea); _cebggf != nil {
					return _cebggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "citation"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "citation"}:
				_fegcc.Citation = NewCT_Empty()
				if _acgcg := d.DecodeElement(_fegcc.Citation, &_fegea); _acgcg != nil {
					return _acgcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "group"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "group"}:
				_fegcc.Group = NewCT_Empty()
				if _addgd := d.DecodeElement(_fegcc.Group, &_fegea); _addgd != nil {
					return _addgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bibliography"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bibliography"}:
				_fegcc.Bibliography = NewCT_Empty()
				if _ecff := d.DecodeElement(_fegcc.Bibliography, &_fegea); _ecff != nil {
					return _ecff
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SdtPrChoice\u0020\u0025v", _fegea.Name)
				if _gegab := d.Skip(); _gegab != nil {
					return _gegab
				}
			}
		case _d.EndElement:
			break _gbbffa
		case _d.CharData:
		}
	}
	return nil
}
func (_agfaeg WdST_WrapText) ValidateWithPath(path string) error {
	switch _agfaeg {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_agfaeg))
	}
	return nil
}
func (_dgfcg *ST_Merge) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dgfcg = 0
	case "continue":
		*_dgfcg = 1
	case "restart":
		*_dgfcg = 2
	}
	return nil
}

type CT_TabStop struct {

	// Tab Stop Type
	ValAttr ST_TabJc

	// Tab Leader Character
	LeaderAttr ST_TabTlc

	// Tab Stop Position
	PosAttr ST_SignedTwipsMeasure
}

func (_fgegbf *ST_HexColorAuto) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_babgf, _fcgafc := d.Token()
	if _fcgafc != nil {
		return _fcgafc
	}
	if _edgebf, _bgeebb := _babgf.(_d.EndElement); _bgeebb && _edgebf.Name == start.Name {
		*_fgegbf = 1
		return nil
	}
	if _ecedg, _fcadb := _babgf.(_d.CharData); !_fcadb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _babgf)
	} else {
		switch string(_ecedg) {
		case "":
			*_fgegbf = 0
		case "auto":
			*_fgegbf = 1
		}
	}
	_babgf, _fcgafc = d.Token()
	if _fcgafc != nil {
		return _fcgafc
	}
	if _cdcbc, _gcbgbb := _babgf.(_d.EndElement); _gcbgbb && _cdcbc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _babgf)
}
func (_baacab *ST_FtnEdn) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_baacab = 0
	case "normal":
		*_baacab = 1
	case "separator":
		*_baacab = 2
	case "continuationSeparator":
		*_baacab = 3
	case "continuationNotice":
		*_baacab = 4
	}
	return nil
}

type CT_TblGridChange struct {

	// Annotation Identifier
	IdAttr  int64
	TblGrid *CT_TblGridBase
}

// ValidateWithPath validates the WdCT_WordprocessingGroup and its children, prefixing error messages with path
func (_badbae *WdCT_WordprocessingGroup) ValidateWithPath(path string) error {
	if _badbae.CNvPr != nil {
		if _eafebd := _badbae.CNvPr.ValidateWithPath(path + "\u002fCNvPr"); _eafebd != nil {
			return _eafebd
		}
	}
	if _eegdc := _badbae.CNvGrpSpPr.ValidateWithPath(path + "/CNvGrpSpPr"); _eegdc != nil {
		return _eegdc
	}
	if _beagd := _badbae.GrpSpPr.ValidateWithPath(path + "\u002fGrpSpPr"); _beagd != nil {
		return _beagd
	}
	for _bgeefe, _cfbge := range _badbae.Choice {
		if _cbcedc := _cfbge.ValidateWithPath(_b.Sprintf("\u0025s\u002fChoice\u005b\u0025d\u005d", path, _bgeefe)); _cbcedc != nil {
			return _cbcedc
		}
	}
	if _badbae.ExtLst != nil {
		if _feeacg := _badbae.ExtLst.ValidateWithPath(path + "\u002fExtLst"); _feeacg != nil {
			return _feeacg
		}
	}
	return nil
}

// ValidateWithPath validates the WdCT_WrapTopBottom and its children, prefixing error messages with path
func (_dfddb *WdCT_WrapTopBottom) ValidateWithPath(path string) error {
	if _dfddb.EffectExtent != nil {
		if _bffccc := _dfddb.EffectExtent.ValidateWithPath(path + "\u002fEffectExtent"); _bffccc != nil {
			return _bffccc
		}
	}
	return nil
}

// Validate validates the WdCT_WordprocessingGroupChoice and its children
func (_aaffcb *WdCT_WordprocessingGroupChoice) Validate() error {
	return _aaffcb.ValidateWithPath("WdCT_WordprocessingGroupChoice")
}

// Validate validates the CT_Frame and its children
func (_dedcb *CT_Frame) Validate() error      { return _dedcb.ValidateWithPath("CT_Frame") }
func (_bacddb *ST_TextScale) Validate() error { return _bacddb.ValidateWithPath("") }
func (_fgedda ST_VerticalJc) Validate() error { return _fgedda.ValidateWithPath("") }
func (_bgdage ST_Hint) String() string {
	switch _bgdage {
	case 0:
		return ""
	case 1:
		return "default"
	case 2:
		return "eastAsia"
	}
	return ""
}
func NewCT_Row() *CT_Row { _gbccg := &CT_Row{}; return _gbccg }
func (_degca *CT_FtnEdn) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _degca.TypeAttr != ST_FtnEdnUnset {
		_deegag, _eaad := _degca.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _eaad != nil {
			return _eaad
		}
		start.Attr = append(start.Attr, _deegag)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _degca.IdAttr)})
	e.EncodeToken(start)
	for _, _ffefg := range _degca.EG_BlockLevelElts {
		_ffefg.MarshalXML(e, _d.StartElement{})
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_FtnEdnRef struct {

	// Suppress Footnote/Endnote Reference Mark
	CustomMarkFollowsAttr *_g.ST_OnOff

	// Footnote/Endnote ID Reference
	IdAttr int64
}

// ValidateWithPath validates the CT_FtnProps and its children, prefixing error messages with path
func (_abgbg *CT_FtnProps) ValidateWithPath(path string) error {
	if _abgbg.Pos != nil {
		if _cgadf := _abgbg.Pos.ValidateWithPath(path + "\u002fPos"); _cgadf != nil {
			return _cgadf
		}
	}
	if _abgbg.NumFmt != nil {
		if _dbeb := _abgbg.NumFmt.ValidateWithPath(path + "\u002fNumFmt"); _dbeb != nil {
			return _dbeb
		}
	}
	if _abgbg.NumStart != nil {
		if _ffcaa := _abgbg.NumStart.ValidateWithPath(path + "\u002fNumStart"); _ffcaa != nil {
			return _ffcaa
		}
	}
	if _abgbg.NumRestart != nil {
		if _gdgcf := _abgbg.NumRestart.ValidateWithPath(path + "/NumRestart"); _gdgcf != nil {
			return _gdgcf
		}
	}
	return nil
}
func (_egaefd *ST_LevelSuffix) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_edcbb, _caggbc := d.Token()
	if _caggbc != nil {
		return _caggbc
	}
	if _efcce, _ebcbec := _edcbb.(_d.EndElement); _ebcbec && _efcce.Name == start.Name {
		*_egaefd = 1
		return nil
	}
	if _baceb, _gcecde := _edcbb.(_d.CharData); !_gcecde {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _edcbb)
	} else {
		switch string(_baceb) {
		case "":
			*_egaefd = 0
		case "tab":
			*_egaefd = 1
		case "space":
			*_egaefd = 2
		case "nothing":
			*_egaefd = 3
		}
	}
	_edcbb, _caggbc = d.Token()
	if _caggbc != nil {
		return _caggbc
	}
	if _deegga, _abbcee := _edcbb.(_d.EndElement); _abbcee && _deegga.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _edcbb)
}
func (_ffceg *CT_NumFmt) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffceg.ValAttr = ST_NumberFormat(1)
	for _, _cebbga := range start.Attr {
		if _cebbga.Name.Local == "val" {
			_ffceg.ValAttr.UnmarshalXMLAttr(_cebbga)
			continue
		}
		if _cebbga.Name.Local == "format" {
			_aafab, _gbecc := _cebbga.Value, error(nil)
			if _gbecc != nil {
				return _gbecc
			}
			_ffceg.FormatAttr = &_aafab
			continue
		}
	}
	for {
		_aafce, _gbgd := d.Token()
		if _gbgd != nil {
			return _b.Errorf("parsing\u0020CT_NumFmt:\u0020\u0025s", _gbgd)
		}
		if _gfcbdb, _dcdfe := _aafce.(_d.EndElement); _dcdfe && _gfcbdb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gegbd *CT_MacroName) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _eegbc := range start.Attr {
		if _eegbc.Name.Local == "val" {
			_cadbg, _eeea := _eegbc.Value, error(nil)
			if _eeea != nil {
				return _eeea
			}
			_gegbd.ValAttr = _cadbg
			continue
		}
	}
	for {
		_cedbg, _abdbf := d.Token()
		if _abdbf != nil {
			return _b.Errorf("parsing\u0020CT_MacroName:\u0020\u0025s", _abdbf)
		}
		if _ggabg, _cfddb := _cedbg.(_d.EndElement); _cfddb && _ggabg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_abfeee *ST_StyleSort) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ebbfc, _befdbe := d.Token()
	if _befdbe != nil {
		return _befdbe
	}
	if _aeaafcb, _fffcfb := _ebbfc.(_d.EndElement); _fffcfb && _aeaafcb.Name == start.Name {
		*_abfeee = 1
		return nil
	}
	if _aafgc, _ceaabe := _ebbfc.(_d.CharData); !_ceaabe {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ebbfc)
	} else {
		switch string(_aafgc) {
		case "":
			*_abfeee = 0
		case "name":
			*_abfeee = 1
		case "priority":
			*_abfeee = 2
		case "default":
			*_abfeee = 3
		case "font":
			*_abfeee = 4
		case "basedOn":
			*_abfeee = 5
		case "type":
			*_abfeee = 6
		case "0000":
			*_abfeee = 7
		case "0001":
			*_abfeee = 8
		case "0002":
			*_abfeee = 9
		case "0003":
			*_abfeee = 10
		case "0004":
			*_abfeee = 11
		case "0005":
			*_abfeee = 12
		}
	}
	_ebbfc, _befdbe = d.Token()
	if _befdbe != nil {
		return _befdbe
	}
	if _geeeaa, _dgdgfd := _ebbfc.(_d.EndElement); _dgdgfd && _geeeaa.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ebbfc)
}
func (_bbbgf ST_DocPartGallery) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bbbgf.String(), start)
}
func (_eced *CT_CalendarType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eced.ValAttr != _g.ST_CalendarTypeUnset {
		_bge, _adfea := _eced.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _adfea != nil {
			return _adfea
		}
		start.Attr = append(start.Attr, _bge)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PixelsMeasure and its children, prefixing error messages with path
func (_dbaef *CT_PixelsMeasure) ValidateWithPath(path string) error { return nil }
func (_ebccc ST_HexColorAuto) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gbede := _d.Attr{}
	_gbede.Name = name
	switch _ebccc {
	case ST_HexColorAutoUnset:
		_gbede.Value = ""
	case ST_HexColorAutoAuto:
		_gbede.Value = "auto"
	}
	return _gbede, nil
}

// Validate validates the CT_TblGridCol and its children
func (_bggacb *CT_TblGridCol) Validate() error { return _bggacb.ValidateWithPath("CT_TblGridCol") }

type CT_SdtDropDownList struct {

	// Drop-down List Last Saved Value
	LastValueAttr *string

	// Drop-Down List Item
	ListItem []*CT_SdtListItem
}

func (_dafbb ST_PageBorderOffset) ValidateWithPath(path string) error {
	switch _dafbb {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dafbb))
	}
	return nil
}

// Validate validates the CT_MoveBookmark and its children
func (_bffaf *CT_MoveBookmark) Validate() error { return _bffaf.ValidateWithPath("CT_MoveBookmark") }
func (_cacecb ST_CombineBrackets) String() string {
	switch _cacecb {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "round"
	case 3:
		return "square"
	case 4:
		return "angle"
	case 5:
		return "curly"
	}
	return ""
}
func (_bbfbff ST_HexColor) String() string {
	if _bbfbff.ST_HexColorAuto != ST_HexColorAutoUnset {
		return _bbfbff.ST_HexColorAuto.String()
	}
	if _bbfbff.ST_HexColorRGB != nil {
		return _b.Sprintf("\u0025v", *_bbfbff.ST_HexColorRGB)
	}
	return ""
}

// Validate validates the CT_PPrChange and its children
func (_gcafc *CT_PPrChange) Validate() error { return _gcafc.ValidateWithPath("CT_PPrChange") }

type CT_SdtRow struct {

	// Structured Document Tag Properties
	SdtPr *CT_SdtPr

	// Structured Document Tag End Character Properties
	SdtEndPr *CT_SdtEndPr

	// Row-Level Structured Document Tag Content
	SdtContent *CT_SdtContentRow
}

func (_fdge *CT_Attr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fdge.UriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uri"}, Value: _b.Sprintf("\u0025v", *_fdge.UriAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _fdge.NameAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _fdge.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bbad *CT_FramePr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbad.DropCapAttr != ST_DropCapUnset {
		_eacgd, _edbdg := _bbad.DropCapAttr.MarshalXMLAttr(_d.Name{Local: "w:dropCap"})
		if _edbdg != nil {
			return _edbdg
		}
		start.Attr = append(start.Attr, _eacgd)
	}
	if _bbad.LinesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lines"}, Value: _b.Sprintf("\u0025v", *_bbad.LinesAttr)})
	}
	if _bbad.WAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:w"}, Value: _b.Sprintf("\u0025v", *_bbad.WAttr)})
	}
	if _bbad.HAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:h"}, Value: _b.Sprintf("\u0025v", *_bbad.HAttr)})
	}
	if _bbad.VSpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:vSpace"}, Value: _b.Sprintf("\u0025v", *_bbad.VSpaceAttr)})
	}
	if _bbad.HSpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hSpace"}, Value: _b.Sprintf("\u0025v", *_bbad.HSpaceAttr)})
	}
	if _bbad.WrapAttr != ST_WrapUnset {
		_afdbf, _gafgg := _bbad.WrapAttr.MarshalXMLAttr(_d.Name{Local: "w:wrap"})
		if _gafgg != nil {
			return _gafgg
		}
		start.Attr = append(start.Attr, _afdbf)
	}
	if _bbad.HAnchorAttr != ST_HAnchorUnset {
		_egcfg, _dbcfc := _bbad.HAnchorAttr.MarshalXMLAttr(_d.Name{Local: "w:hAnchor"})
		if _dbcfc != nil {
			return _dbcfc
		}
		start.Attr = append(start.Attr, _egcfg)
	}
	if _bbad.VAnchorAttr != ST_VAnchorUnset {
		_bfbcaf, _bfbgg := _bbad.VAnchorAttr.MarshalXMLAttr(_d.Name{Local: "w:vAnchor"})
		if _bfbgg != nil {
			return _bfbgg
		}
		start.Attr = append(start.Attr, _bfbcaf)
	}
	if _bbad.XAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:x"}, Value: _b.Sprintf("\u0025v", *_bbad.XAttr)})
	}
	if _bbad.XAlignAttr != _g.ST_XAlignUnset {
		_aacdfa, _addef := _bbad.XAlignAttr.MarshalXMLAttr(_d.Name{Local: "w:xAlign"})
		if _addef != nil {
			return _addef
		}
		start.Attr = append(start.Attr, _aacdfa)
	}
	if _bbad.YAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:y"}, Value: _b.Sprintf("\u0025v", *_bbad.YAttr)})
	}
	if _bbad.YAlignAttr != _g.ST_YAlignUnset {
		_gfcgd, _gcad := _bbad.YAlignAttr.MarshalXMLAttr(_d.Name{Local: "w:yAlign"})
		if _gcad != nil {
			return _gcad
		}
		start.Attr = append(start.Attr, _gfcgd)
	}
	if _bbad.HRuleAttr != ST_HeightRuleUnset {
		_bdbc, _egcd := _bbad.HRuleAttr.MarshalXMLAttr(_d.Name{Local: "w:hRule"})
		if _egcd != nil {
			return _egcd
		}
		start.Attr = append(start.Attr, _bdbc)
	}
	if _bbad.AnchorLockAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:anchorLock"}, Value: _b.Sprintf("\u0025v", *_bbad.AnchorLockAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ffgdg *CT_PPrBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ffgdg.PStyle != nil {
		_dgadf := _d.StartElement{Name: _d.Name{Local: "w:pStyle"}}
		e.EncodeElement(_ffgdg.PStyle, _dgadf)
	}
	if _ffgdg.KeepNext != nil {
		_fbgdg := _d.StartElement{Name: _d.Name{Local: "w:keepNext"}}
		e.EncodeElement(_ffgdg.KeepNext, _fbgdg)
	}
	if _ffgdg.KeepLines != nil {
		_cbfgf := _d.StartElement{Name: _d.Name{Local: "w:keepLines"}}
		e.EncodeElement(_ffgdg.KeepLines, _cbfgf)
	}
	if _ffgdg.PageBreakBefore != nil {
		_caeaf := _d.StartElement{Name: _d.Name{Local: "w:pageBreakBefore"}}
		e.EncodeElement(_ffgdg.PageBreakBefore, _caeaf)
	}
	if _ffgdg.FramePr != nil {
		_gebcc := _d.StartElement{Name: _d.Name{Local: "w:framePr"}}
		e.EncodeElement(_ffgdg.FramePr, _gebcc)
	}
	if _ffgdg.WidowControl != nil {
		_eegeaa := _d.StartElement{Name: _d.Name{Local: "w:widowControl"}}
		e.EncodeElement(_ffgdg.WidowControl, _eegeaa)
	}
	if _ffgdg.NumPr != nil {
		_aacdd := _d.StartElement{Name: _d.Name{Local: "w:numPr"}}
		e.EncodeElement(_ffgdg.NumPr, _aacdd)
	}
	if _ffgdg.SuppressLineNumbers != nil {
		_fafdc := _d.StartElement{Name: _d.Name{Local: "w:suppressLineNumbers"}}
		e.EncodeElement(_ffgdg.SuppressLineNumbers, _fafdc)
	}
	if _ffgdg.PBdr != nil {
		_ccbeg := _d.StartElement{Name: _d.Name{Local: "w:pBdr"}}
		e.EncodeElement(_ffgdg.PBdr, _ccbeg)
	}
	if _ffgdg.Shd != nil {
		_affcf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_ffgdg.Shd, _affcf)
	}
	if _ffgdg.Tabs != nil {
		_beaaf := _d.StartElement{Name: _d.Name{Local: "w:tabs"}}
		e.EncodeElement(_ffgdg.Tabs, _beaaf)
	}
	if _ffgdg.SuppressAutoHyphens != nil {
		_gdbbe := _d.StartElement{Name: _d.Name{Local: "w:suppressAutoHyphens"}}
		e.EncodeElement(_ffgdg.SuppressAutoHyphens, _gdbbe)
	}
	if _ffgdg.Kinsoku != nil {
		_cagcc := _d.StartElement{Name: _d.Name{Local: "w:kinsoku"}}
		e.EncodeElement(_ffgdg.Kinsoku, _cagcc)
	}
	if _ffgdg.WordWrap != nil {
		_bdfdgb := _d.StartElement{Name: _d.Name{Local: "w:wordWrap"}}
		e.EncodeElement(_ffgdg.WordWrap, _bdfdgb)
	}
	if _ffgdg.OverflowPunct != nil {
		_acegg := _d.StartElement{Name: _d.Name{Local: "w:overflowPunct"}}
		e.EncodeElement(_ffgdg.OverflowPunct, _acegg)
	}
	if _ffgdg.TopLinePunct != nil {
		_ebebd := _d.StartElement{Name: _d.Name{Local: "w:topLinePunct"}}
		e.EncodeElement(_ffgdg.TopLinePunct, _ebebd)
	}
	if _ffgdg.AutoSpaceDE != nil {
		_efagc := _d.StartElement{Name: _d.Name{Local: "w:autoSpaceDE"}}
		e.EncodeElement(_ffgdg.AutoSpaceDE, _efagc)
	}
	if _ffgdg.AutoSpaceDN != nil {
		_bfbee := _d.StartElement{Name: _d.Name{Local: "w:autoSpaceDN"}}
		e.EncodeElement(_ffgdg.AutoSpaceDN, _bfbee)
	}
	if _ffgdg.Bidi != nil {
		_gdddf := _d.StartElement{Name: _d.Name{Local: "w:bidi"}}
		e.EncodeElement(_ffgdg.Bidi, _gdddf)
	}
	if _ffgdg.AdjustRightInd != nil {
		_acccg := _d.StartElement{Name: _d.Name{Local: "w:adjustRightInd"}}
		e.EncodeElement(_ffgdg.AdjustRightInd, _acccg)
	}
	if _ffgdg.SnapToGrid != nil {
		_cfdae := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_ffgdg.SnapToGrid, _cfdae)
	}
	if _ffgdg.Spacing != nil {
		_dgbdg := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_ffgdg.Spacing, _dgbdg)
	}
	if _ffgdg.Ind != nil {
		_agagb := _d.StartElement{Name: _d.Name{Local: "w:ind"}}
		e.EncodeElement(_ffgdg.Ind, _agagb)
	}
	if _ffgdg.ContextualSpacing != nil {
		_cbgea := _d.StartElement{Name: _d.Name{Local: "w:contextualSpacing"}}
		e.EncodeElement(_ffgdg.ContextualSpacing, _cbgea)
	}
	if _ffgdg.MirrorIndents != nil {
		_aeebg := _d.StartElement{Name: _d.Name{Local: "w:mirrorIndents"}}
		e.EncodeElement(_ffgdg.MirrorIndents, _aeebg)
	}
	if _ffgdg.SuppressOverlap != nil {
		_ebgcc := _d.StartElement{Name: _d.Name{Local: "w:suppressOverlap"}}
		e.EncodeElement(_ffgdg.SuppressOverlap, _ebgcc)
	}
	if _ffgdg.Jc != nil {
		_cdgde := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		e.EncodeElement(_ffgdg.Jc, _cdgde)
	}
	if _ffgdg.TextDirection != nil {
		_aebbg := _d.StartElement{Name: _d.Name{Local: "w:textDirection"}}
		e.EncodeElement(_ffgdg.TextDirection, _aebbg)
	}
	if _ffgdg.TextAlignment != nil {
		_cggab := _d.StartElement{Name: _d.Name{Local: "w:textAlignment"}}
		e.EncodeElement(_ffgdg.TextAlignment, _cggab)
	}
	if _ffgdg.TextboxTightWrap != nil {
		_aecdg := _d.StartElement{Name: _d.Name{Local: "w:textboxTightWrap"}}
		e.EncodeElement(_ffgdg.TextboxTightWrap, _aecdg)
	}
	if _ffgdg.OutlineLvl != nil {
		_eefga := _d.StartElement{Name: _d.Name{Local: "w:outlineLvl"}}
		e.EncodeElement(_ffgdg.OutlineLvl, _eefga)
	}
	if _ffgdg.DivId != nil {
		_bbebd := _d.StartElement{Name: _d.Name{Local: "w:divId"}}
		e.EncodeElement(_ffgdg.DivId, _bbebd)
	}
	if _ffgdg.CnfStyle != nil {
		_ccfdfg := _d.StartElement{Name: _d.Name{Local: "w:cnfStyle"}}
		e.EncodeElement(_ffgdg.CnfStyle, _ccfdfg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_Color struct {

	// Run Content Color
	ValAttr ST_HexColor

	// Run Content Theme Color
	ThemeColorAttr ST_ThemeColor

	// Run Content Theme Color Tint
	ThemeTintAttr *string

	// Run Content Theme Color Shade
	ThemeShadeAttr *string
}

const (
	ST_UnderlineUnset           ST_Underline = 0
	ST_UnderlineSingle          ST_Underline = 1
	ST_UnderlineWords           ST_Underline = 2
	ST_UnderlineDouble          ST_Underline = 3
	ST_UnderlineThick           ST_Underline = 4
	ST_UnderlineDotted          ST_Underline = 5
	ST_UnderlineDottedHeavy     ST_Underline = 6
	ST_UnderlineDash            ST_Underline = 7
	ST_UnderlineDashedHeavy     ST_Underline = 8
	ST_UnderlineDashLong        ST_Underline = 9
	ST_UnderlineDashLongHeavy   ST_Underline = 10
	ST_UnderlineDotDash         ST_Underline = 11
	ST_UnderlineDashDotHeavy    ST_Underline = 12
	ST_UnderlineDotDotDash      ST_Underline = 13
	ST_UnderlineDashDotDotHeavy ST_Underline = 14
	ST_UnderlineWave            ST_Underline = 15
	ST_UnderlineWavyHeavy       ST_Underline = 16
	ST_UnderlineWavyDouble      ST_Underline = 17
	ST_UnderlineNone            ST_Underline = 18
)

func (_effbgf *CT_ShapeDefaults) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cagabd:
	for {
		_aabbe, _gdgfa := d.Token()
		if _gdgfa != nil {
			return _gdgfa
		}
		switch _bbeeb := _aabbe.(type) {
		case _d.StartElement:
			switch _bbeeb.Name {
			default:
				if _bbdba, _cdffac := _ga.CreateElement(_bbeeb); _cdffac != nil {
					return _cdffac
				} else {
					if _aabfa := d.DecodeElement(_bbdba, &_bbeeb); _aabfa != nil {
						return _aabfa
					}
					_effbgf.Any = append(_effbgf.Any, _bbdba)
				}
			}
		case _d.EndElement:
			break _cagabd
		case _d.CharData:
		}
	}
	return nil
}
func (_fdad *CT_Document) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_egff, _dcfcc := _fdad.ConformanceAttr.MarshalXMLAttr(_d.Name{Local: "w:conformance"})
	if _dcfcc != nil {
		return _dcfcc
	}
	start.Attr = append(start.Attr, _egff)
	e.EncodeToken(start)
	if _fdad.Background != nil {
		_decc := _d.StartElement{Name: _d.Name{Local: "w:background"}}
		e.EncodeElement(_fdad.Background, _decc)
	}
	if _fdad.Body != nil {
		_bccag := _d.StartElement{Name: _d.Name{Local: "w:body"}}
		e.EncodeElement(_fdad.Body, _bccag)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_MailMergeDocType byte

func (_adfd *CT_BottomPageBorder) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_adfd.ValAttr = ST_Border(1)
	for _, _acga := range start.Attr {
		if _acga.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _acga.Name.Local == "bottomLeft" || _acga.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _acga.Name.Local == "bottomLeft" {
			_dacfa, _fcec := _acga.Value, error(nil)
			if _fcec != nil {
				return _fcec
			}
			_adfd.BottomLeftAttr = &_dacfa
			continue
		}
		if _acga.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _acga.Name.Local == "bottomRight" || _acga.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _acga.Name.Local == "bottomRight" {
			_ggcb, _ecad := _acga.Value, error(nil)
			if _ecad != nil {
				return _ecad
			}
			_adfd.BottomRightAttr = &_ggcb
			continue
		}
		if _acga.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _acga.Name.Local == "id" || _acga.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _acga.Name.Local == "id" {
			_bafa, _bfcgc := _acga.Value, error(nil)
			if _bfcgc != nil {
				return _bfcgc
			}
			_adfd.IdAttr = &_bafa
			continue
		}
		if _acga.Name.Local == "val" {
			_adfd.ValAttr.UnmarshalXMLAttr(_acga)
			continue
		}
		if _acga.Name.Local == "color" {
			_fgaa, _gaab := ParseUnionST_HexColor(_acga.Value)
			if _gaab != nil {
				return _gaab
			}
			_adfd.ColorAttr = &_fgaa
			continue
		}
		if _acga.Name.Local == "themeColor" {
			_adfd.ThemeColorAttr.UnmarshalXMLAttr(_acga)
			continue
		}
		if _acga.Name.Local == "themeTint" {
			_aafc, _bbfg := _acga.Value, error(nil)
			if _bbfg != nil {
				return _bbfg
			}
			_adfd.ThemeTintAttr = &_aafc
			continue
		}
		if _acga.Name.Local == "themeShade" {
			_cdg, _gcca := _acga.Value, error(nil)
			if _gcca != nil {
				return _gcca
			}
			_adfd.ThemeShadeAttr = &_cdg
			continue
		}
		if _acga.Name.Local == "sz" {
			_dbcd, _gacd := _dd.ParseUint(_acga.Value, 10, 64)
			if _gacd != nil {
				return _gacd
			}
			_adfd.SzAttr = &_dbcd
			continue
		}
		if _acga.Name.Local == "space" {
			_dabg, _baaff := _dd.ParseUint(_acga.Value, 10, 64)
			if _baaff != nil {
				return _baaff
			}
			_adfd.SpaceAttr = &_dabg
			continue
		}
		if _acga.Name.Local == "shadow" {
			_fcbf, _gfcb := ParseUnionST_OnOff(_acga.Value)
			if _gfcb != nil {
				return _gfcb
			}
			_adfd.ShadowAttr = &_fcbf
			continue
		}
		if _acga.Name.Local == "frame" {
			_eggb, _dcaa := ParseUnionST_OnOff(_acga.Value)
			if _dcaa != nil {
				return _dcaa
			}
			_adfd.FrameAttr = &_eggb
			continue
		}
	}
	for {
		_aba, _gadd := d.Token()
		if _gadd != nil {
			return _b.Errorf("parsing\u0020CT_BottomPageBorder:\u0020\u0025s", _gadd)
		}
		if _efbfb, _bfcgf := _aba.(_d.EndElement); _bfcgf && _efbfb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_FtnPos and its children, prefixing error messages with path
func (_cbccf *CT_FtnPos) ValidateWithPath(path string) error {
	if _cbccf.ValAttr == ST_FtnPosUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fgcaf := _cbccf.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fgcaf != nil {
		return _fgcaf
	}
	return nil
}
func (_aggd *CT_DocPartType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aggd.ValAttr = ST_DocPartType(1)
	for _, _fedc := range start.Attr {
		if _fedc.Name.Local == "val" {
			_aggd.ValAttr.UnmarshalXMLAttr(_fedc)
			continue
		}
	}
	for {
		_efec, _cgcga := d.Token()
		if _cgcga != nil {
			return _b.Errorf("parsing\u0020CT_DocPartType:\u0020\u0025s", _cgcga)
		}
		if _baaa, _cebgga := _efec.(_d.EndElement); _cebgga && _baaa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggfba *EG_SectPrContents) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_eaegf:
	for {
		_ddgagg, _ebcgf := d.Token()
		if _ebcgf != nil {
			return _ebcgf
		}
		switch _aaebag := _ddgagg.(type) {
		case _d.StartElement:
			switch _aaebag.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnotePr"}:
				_ggfba.FootnotePr = NewCT_FtnProps()
				if _acffa := d.DecodeElement(_ggfba.FootnotePr, &_aaebag); _acffa != nil {
					return _acffa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnotePr"}:
				_ggfba.EndnotePr = NewCT_EdnProps()
				if _dcaag := d.DecodeElement(_ggfba.EndnotePr, &_aaebag); _dcaag != nil {
					return _dcaag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "type"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "type"}:
				_ggfba.Type = NewCT_SectType()
				if _fdabb := d.DecodeElement(_ggfba.Type, &_aaebag); _fdabb != nil {
					return _fdabb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgSz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgSz"}:
				_ggfba.PgSz = NewCT_PageSz()
				if _bdcaa := d.DecodeElement(_ggfba.PgSz, &_aaebag); _bdcaa != nil {
					return _bdcaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgMar"}:
				_ggfba.PgMar = NewCT_PageMar()
				if _gbdbc := d.DecodeElement(_ggfba.PgMar, &_aaebag); _gbdbc != nil {
					return _gbdbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "paperSrc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "paperSrc"}:
				_ggfba.PaperSrc = NewCT_PaperSource()
				if _ceccfg := d.DecodeElement(_ggfba.PaperSrc, &_aaebag); _ceccfg != nil {
					return _ceccfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgBorders"}:
				_ggfba.PgBorders = NewCT_PageBorders()
				if _fdcbc := d.DecodeElement(_ggfba.PgBorders, &_aaebag); _fdcbc != nil {
					return _fdcbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lnNumType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lnNumType"}:
				_ggfba.LnNumType = NewCT_LineNumber()
				if _dadae := d.DecodeElement(_ggfba.LnNumType, &_aaebag); _dadae != nil {
					return _dadae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgNumType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgNumType"}:
				_ggfba.PgNumType = NewCT_PageNumber()
				if _eagab := d.DecodeElement(_ggfba.PgNumType, &_aaebag); _eagab != nil {
					return _eagab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cols"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cols"}:
				_ggfba.Cols = NewCT_Columns()
				if _ggcda := d.DecodeElement(_ggfba.Cols, &_aaebag); _ggcda != nil {
					return _ggcda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "formProt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "formProt"}:
				_ggfba.FormProt = NewCT_OnOff()
				if _ecafaf := d.DecodeElement(_ggfba.FormProt, &_aaebag); _ecafaf != nil {
					return _ecafaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vAlign"}:
				_ggfba.VAlign = NewCT_VerticalJc()
				if _geaeda := d.DecodeElement(_ggfba.VAlign, &_aaebag); _geaeda != nil {
					return _geaeda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noEndnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noEndnote"}:
				_ggfba.NoEndnote = NewCT_OnOff()
				if _fagggf := d.DecodeElement(_ggfba.NoEndnote, &_aaebag); _fagggf != nil {
					return _fagggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "titlePg"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "titlePg"}:
				_ggfba.TitlePg = NewCT_OnOff()
				if _faedc := d.DecodeElement(_ggfba.TitlePg, &_aaebag); _faedc != nil {
					return _faedc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_ggfba.TextDirection = NewCT_TextDirection()
				if _dgee := d.DecodeElement(_ggfba.TextDirection, &_aaebag); _dgee != nil {
					return _dgee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidi"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidi"}:
				_ggfba.Bidi = NewCT_OnOff()
				if _agfaf := d.DecodeElement(_ggfba.Bidi, &_aaebag); _agfaf != nil {
					return _agfaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtlGutter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtlGutter"}:
				_ggfba.RtlGutter = NewCT_OnOff()
				if _cfadg := d.DecodeElement(_ggfba.RtlGutter, &_aaebag); _cfadg != nil {
					return _cfadg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docGrid"}:
				_ggfba.DocGrid = NewCT_DocGrid()
				if _egagb := d.DecodeElement(_ggfba.DocGrid, &_aaebag); _egagb != nil {
					return _egagb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printerSettings"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printerSettings"}:
				_ggfba.PrinterSettings = NewCT_Rel()
				if _ccgba := d.DecodeElement(_ggfba.PrinterSettings, &_aaebag); _ccgba != nil {
					return _ccgba
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020EG_SectPrContents\u0020\u0025v", _aaebag.Name)
				if _becee := d.Skip(); _becee != nil {
					return _becee
				}
			}
		case _d.EndElement:
			break _eaegf
		case _d.CharData:
		}
	}
	return nil
}

type CT_TargetScreenSz struct {

	// Target Screen Size Value
	ValAttr ST_TargetScreenSz
}

func (_gfgcc *CT_TblWidth) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gfgcc.WAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:w"}, Value: _b.Sprintf("\u0025v", *_gfgcc.WAttr)})
	}
	if _gfgcc.TypeAttr != ST_TblWidthUnset {
		_baeab, _bfeag := _gfgcc.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _bfeag != nil {
			return _bfeag
		}
		start.Attr = append(start.Attr, _baeab)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_SectPrChange and its children
func (_afefac *CT_SectPrChange) Validate() error { return _afefac.ValidateWithPath("CT_SectPrChange") }
func (_ffggab ST_ProofErr) Validate() error      { return _ffggab.ValidateWithPath("") }

type EG_BlockLevelElts struct {

	// Anchor for Imported External Content
	AltChunk               []*CT_AltChunk
	EG_ContentBlockContent []*EG_ContentBlockContent
}

func (_ccffde *CT_ShapeDefaults) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ccffde.Any != nil {
		for _, _dffef := range _ccffde.Any {
			_dffef.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_MailMergeDest byte

func NewCT_RubyPr() *CT_RubyPr {
	_efbbg := &CT_RubyPr{}
	_efbbg.RubyAlign = NewCT_RubyAlign()
	_efbbg.Hps = NewCT_HpsMeasure()
	_efbbg.HpsRaise = NewCT_HpsMeasure()
	_efbbg.HpsBaseText = NewCT_HpsMeasure()
	_efbbg.Lid = NewCT_Lang()
	return _efbbg
}
func (_aabc *CT_CustomXmlPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gcafe:
	for {
		_efad, _fedf := d.Token()
		if _fedf != nil {
			return _fedf
		}
		switch _adbe := _efad.(type) {
		case _d.StartElement:
			switch _adbe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "placeholder"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "placeholder"}:
				_aabc.Placeholder = NewCT_String()
				if _ebac := d.DecodeElement(_aabc.Placeholder, &_adbe); _ebac != nil {
					return _ebac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "attr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "attr"}:
				_fdca := NewCT_Attr()
				if _gagd := d.DecodeElement(_fdca, &_adbe); _gagd != nil {
					return _gagd
				}
				_aabc.Attr = append(_aabc.Attr, _fdca)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_CustomXmlPr\u0020\u0025v", _adbe.Name)
				if _gdbg := d.Skip(); _gdbg != nil {
					return _gdbg
				}
			}
		case _d.EndElement:
			break _gcafe
		case _d.CharData:
		}
	}
	return nil
}
func (_gcaced ST_BrClear) Validate() error { return _gcaced.ValidateWithPath("") }
func (_edaea *CT_TrPrChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _edaea.AuthorAttr)})
	if _edaea.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_edaea.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _edaea.IdAttr)})
	e.EncodeToken(start)
	_accgg := _d.StartElement{Name: _d.Name{Local: "w:trPr"}}
	e.EncodeElement(_edaea.TrPr, _accgg)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewWebSettings() *WebSettings {
	_gbcgaf := &WebSettings{}
	_gbcgaf.CT_WebSettings = *NewCT_WebSettings()
	return _gbcgaf
}

// ValidateWithPath validates the CT_Tbl and its children, prefixing error messages with path
func (_dfgbb *CT_Tbl) ValidateWithPath(path string) error {
	for _acaea, _cfbac := range _dfgbb.EG_RangeMarkupElements {
		if _ccgfa := _cfbac.ValidateWithPath(_b.Sprintf("\u0025s/EG_RangeMarkupElements[%d\u005d", path, _acaea)); _ccgfa != nil {
			return _ccgfa
		}
	}
	if _fbaff := _dfgbb.TblPr.ValidateWithPath(path + "\u002fTblPr"); _fbaff != nil {
		return _fbaff
	}
	if _bgfegd := _dfgbb.TblGrid.ValidateWithPath(path + "\u002fTblGrid"); _bgfegd != nil {
		return _bgfegd
	}
	for _caggfac, _gcfde := range _dfgbb.EG_ContentRowContent {
		if _fbabc := _gcfde.ValidateWithPath(_b.Sprintf("%s\u002fEG_ContentRowContent[\u0025d\u005d", path, _caggfac)); _fbabc != nil {
			return _fbabc
		}
	}
	return nil
}
func (_dface ST_HdrFtr) String() string {
	switch _dface {
	case 0:
		return ""
	case 1:
		return "even"
	case 2:
		return "default"
	case 3:
		return "first"
	}
	return ""
}

type CT_Tabs struct {

	// Custom Tab Stop
	Tab []*CT_TabStop
}

func (_cafbc *ST_Wrap) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cafbc = 0
	case "auto":
		*_cafbc = 1
	case "notBeside":
		*_cafbc = 2
	case "around":
		*_cafbc = 3
	case "tight":
		*_cafbc = 4
	case "through":
		*_cafbc = 5
	case "none":
		*_cafbc = 6
	}
	return nil
}

// ValidateWithPath validates the CT_R and its children, prefixing error messages with path
func (_cefed *CT_R) ValidateWithPath(path string) error {
	if _cefed.RPr != nil {
		if _daggfd := _cefed.RPr.ValidateWithPath(path + "\u002fRPr"); _daggfd != nil {
			return _daggfd
		}
	}
	for _cfbbd, _bacad := range _cefed.EG_RunInnerContent {
		if _egeea := _bacad.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunInnerContent\u005b\u0025d]", path, _cfbbd)); _egeea != nil {
			return _egeea
		}
	}
	return nil
}
func (_dgffbc ST_HeightRule) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dgffbc.String(), start)
}

// Validate validates the CT_TblOverlap and its children
func (_gbbfc *CT_TblOverlap) Validate() error { return _gbbfc.ValidateWithPath("CT_TblOverlap") }

type CT_MailMergeOdsoFMDFieldType struct {

	// Merge Field Mapping Type
	ValAttr ST_MailMergeOdsoFMDFieldType
}

func (_geeee *CT_PPrChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_geeee.PPr = NewCT_PPrBase()
	for _, _daddbd := range start.Attr {
		if _daddbd.Name.Local == "author" {
			_edaeef, _afeda := _daddbd.Value, error(nil)
			if _afeda != nil {
				return _afeda
			}
			_geeee.AuthorAttr = _edaeef
			continue
		}
		if _daddbd.Name.Local == "date" {
			_ggfag, _dafee := ParseStdlibTime(_daddbd.Value)
			if _dafee != nil {
				return _dafee
			}
			_geeee.DateAttr = &_ggfag
			continue
		}
		if _daddbd.Name.Local == "id" {
			_eebbf, _aeacg := _dd.ParseInt(_daddbd.Value, 10, 64)
			if _aeacg != nil {
				return _aeacg
			}
			_geeee.IdAttr = _eebbf
			continue
		}
	}
_ddcee:
	for {
		_ccfce, _aeabg := d.Token()
		if _aeabg != nil {
			return _aeabg
		}
		switch _bgfda := _ccfce.(type) {
		case _d.StartElement:
			switch _bgfda.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPr"}:
				if _dffcc := d.DecodeElement(_geeee.PPr, &_bgfda); _dffcc != nil {
					return _dffcc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_PPrChange\u0020\u0025v", _bgfda.Name)
				if _efgad := d.Skip(); _efgad != nil {
					return _efgad
				}
			}
		case _d.EndElement:
			break _ddcee
		case _d.CharData:
		}
	}
	return nil
}
func (_dgedf *CT_TblPrBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aaaecd:
	for {
		_bgfgg, _eeeeb := d.Token()
		if _eeeeb != nil {
			return _eeeeb
		}
		switch _eceebdb := _bgfgg.(type) {
		case _d.StartElement:
			switch _eceebdb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblStyle"}:
				_dgedf.TblStyle = NewCT_String()
				if _fggcb := d.DecodeElement(_dgedf.TblStyle, &_eceebdb); _fggcb != nil {
					return _fggcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblpPr"}:
				_dgedf.TblpPr = NewCT_TblPPr()
				if _bfcee := d.DecodeElement(_dgedf.TblpPr, &_eceebdb); _bfcee != nil {
					return _bfcee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblOverlap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblOverlap"}:
				_dgedf.TblOverlap = NewCT_TblOverlap()
				if _ceeafe := d.DecodeElement(_dgedf.TblOverlap, &_eceebdb); _ceeafe != nil {
					return _ceeafe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidiVisual"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidiVisual"}:
				_dgedf.BidiVisual = NewCT_OnOff()
				if _cgcdf := d.DecodeElement(_dgedf.BidiVisual, &_eceebdb); _cgcdf != nil {
					return _cgcdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblStyleRowBandSize"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblStyleRowBandSize"}:
				_dgedf.TblStyleRowBandSize = NewCT_DecimalNumber()
				if _gdafe := d.DecodeElement(_dgedf.TblStyleRowBandSize, &_eceebdb); _gdafe != nil {
					return _gdafe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblStyleColBandSize"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblStyleColBandSize"}:
				_dgedf.TblStyleColBandSize = NewCT_DecimalNumber()
				if _eeead := d.DecodeElement(_dgedf.TblStyleColBandSize, &_eceebdb); _eeead != nil {
					return _eeead
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblW"}:
				_dgedf.TblW = NewCT_TblWidth()
				if _bfabdfg := d.DecodeElement(_dgedf.TblW, &_eceebdb); _bfabdfg != nil {
					return _bfabdfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_dgedf.Jc = NewCT_JcTable()
				if _dgfff := d.DecodeElement(_dgedf.Jc, &_eceebdb); _dgfff != nil {
					return _dgfff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellSpacing"}:
				_dgedf.TblCellSpacing = NewCT_TblWidth()
				if _gddgb := d.DecodeElement(_dgedf.TblCellSpacing, &_eceebdb); _gddgb != nil {
					return _gddgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblInd"}:
				_dgedf.TblInd = NewCT_TblWidth()
				if _aggcbf := d.DecodeElement(_dgedf.TblInd, &_eceebdb); _aggcbf != nil {
					return _aggcbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblBorders"}:
				_dgedf.TblBorders = NewCT_TblBorders()
				if _bcbaag := d.DecodeElement(_dgedf.TblBorders, &_eceebdb); _bcbaag != nil {
					return _bcbaag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_dgedf.Shd = NewCT_Shd()
				if _cefee := d.DecodeElement(_dgedf.Shd, &_eceebdb); _cefee != nil {
					return _cefee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLayout"}:
				_dgedf.TblLayout = NewCT_TblLayoutType()
				if _gcfcge := d.DecodeElement(_dgedf.TblLayout, &_eceebdb); _gcfcge != nil {
					return _gcfcge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellMar"}:
				_dgedf.TblCellMar = NewCT_TblCellMar()
				if _bdbbb := d.DecodeElement(_dgedf.TblCellMar, &_eceebdb); _bdbbb != nil {
					return _bdbbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLook"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLook"}:
				_dgedf.TblLook = NewCT_TblLook()
				if _afcbbb := d.DecodeElement(_dgedf.TblLook, &_eceebdb); _afcbbb != nil {
					return _afcbbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCaption"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCaption"}:
				_dgedf.TblCaption = NewCT_String()
				if _bdaabe := d.DecodeElement(_dgedf.TblCaption, &_eceebdb); _bdaabe != nil {
					return _bdaabe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblDescription"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblDescription"}:
				_dgedf.TblDescription = NewCT_String()
				if _abefga := d.DecodeElement(_dgedf.TblDescription, &_eceebdb); _abefga != nil {
					return _abefga
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TblPrBase\u0020\u0025v", _eceebdb.Name)
				if _egfdaf := d.Skip(); _egfdaf != nil {
					return _egfdaf
				}
			}
		case _d.EndElement:
			break _aaaecd
		case _d.CharData:
		}
	}
	return nil
}
func (_aacbae *WdCT_Anchor) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aacbae.DistTAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distT"}, Value: _b.Sprintf("\u0025v", *_aacbae.DistTAttr)})
	}
	if _aacbae.DistBAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distB"}, Value: _b.Sprintf("\u0025v", *_aacbae.DistBAttr)})
	}
	if _aacbae.DistLAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distL"}, Value: _b.Sprintf("\u0025v", *_aacbae.DistLAttr)})
	}
	if _aacbae.DistRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distR"}, Value: _b.Sprintf("\u0025v", *_aacbae.DistRAttr)})
	}
	if _aacbae.SimplePosAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "simplePos"}, Value: _b.Sprintf("\u0025d", _dagcc(*_aacbae.SimplePosAttr))})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "relativeHeight"}, Value: _b.Sprintf("\u0025v", _aacbae.RelativeHeightAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "behindDoc"}, Value: _b.Sprintf("\u0025d", _dagcc(_aacbae.BehindDocAttr))})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "locked"}, Value: _b.Sprintf("\u0025d", _dagcc(_aacbae.LockedAttr))})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "layoutInCell"}, Value: _b.Sprintf("\u0025d", _dagcc(_aacbae.LayoutInCellAttr))})
	if _aacbae.HiddenAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "hidden"}, Value: _b.Sprintf("\u0025d", _dagcc(*_aacbae.HiddenAttr))})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "allowOverlap"}, Value: _b.Sprintf("\u0025d", _dagcc(_aacbae.AllowOverlapAttr))})
	e.EncodeToken(start)
	_cddeac := _d.StartElement{Name: _d.Name{Local: "wp:simplePos"}}
	e.EncodeElement(_aacbae.SimplePos, _cddeac)
	_bgdgf := _d.StartElement{Name: _d.Name{Local: "wp:positionH"}}
	e.EncodeElement(_aacbae.PositionH, _bgdgf)
	_cbbbg := _d.StartElement{Name: _d.Name{Local: "wp:positionV"}}
	e.EncodeElement(_aacbae.PositionV, _cbbbg)
	_gfbfd := _d.StartElement{Name: _d.Name{Local: "wp:extent"}}
	e.EncodeElement(_aacbae.Extent, _gfbfd)
	if _aacbae.EffectExtent != nil {
		_daecf := _d.StartElement{Name: _d.Name{Local: "wp:effectExtent"}}
		e.EncodeElement(_aacbae.EffectExtent, _daecf)
	}
	if _aacbae.Choice != nil {
		_aacbae.Choice.MarshalXML(e, _d.StartElement{})
	}
	_bdbbbf := _d.StartElement{Name: _d.Name{Local: "wp:docPr"}}
	e.EncodeElement(_aacbae.DocPr, _bdbbbf)
	if _aacbae.CNvGraphicFramePr != nil {
		_afdgf := _d.StartElement{Name: _d.Name{Local: "wp:cNvGraphicFramePr"}}
		e.EncodeElement(_aacbae.CNvGraphicFramePr, _afdgf)
	}
	_cgabcd := _d.StartElement{Name: _d.Name{Local: "a:graphic"}}
	_cgabcd.Attr = append(_cgabcd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	e.EncodeElement(_aacbae.Graphic, _cgabcd)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_CharacterSpacing() *CT_CharacterSpacing {
	_fbbf := &CT_CharacterSpacing{}
	_fbbf.ValAttr = ST_CharacterSpacing(1)
	return _fbbf
}

// ValidateWithPath validates the CT_DocPartPr and its children, prefixing error messages with path
func (_befe *CT_DocPartPr) ValidateWithPath(path string) error {
	if _bddac := _befe.Name.ValidateWithPath(path + "\u002fName"); _bddac != nil {
		return _bddac
	}
	if _befe.Style != nil {
		if _ffbb := _befe.Style.ValidateWithPath(path + "\u002fStyle"); _ffbb != nil {
			return _ffbb
		}
	}
	if _befe.Category != nil {
		if _eabbf := _befe.Category.ValidateWithPath(path + "\u002fCategory"); _eabbf != nil {
			return _eabbf
		}
	}
	if _befe.Types != nil {
		if _cdaea := _befe.Types.ValidateWithPath(path + "\u002fTypes"); _cdaea != nil {
			return _cdaea
		}
	}
	if _befe.Behaviors != nil {
		if _cbdgf := _befe.Behaviors.ValidateWithPath(path + "\u002fBehaviors"); _cbdgf != nil {
			return _cbdgf
		}
	}
	if _befe.Description != nil {
		if _dgebf := _befe.Description.ValidateWithPath(path + "\u002fDescription"); _dgebf != nil {
			return _dgebf
		}
	}
	if _befe.Guid != nil {
		if _bcdac := _befe.Guid.ValidateWithPath(path + "\u002fGuid"); _bcdac != nil {
			return _bcdac
		}
	}
	return nil
}
func NewCT_FFName() *CT_FFName { _baage := &CT_FFName{}; return _baage }

type ST_BrType byte
type ST_Jc byte

// ValidateWithPath validates the CT_FrameScrollbar and its children, prefixing error messages with path
func (_ggbe *CT_FrameScrollbar) ValidateWithPath(path string) error {
	if _ggbe.ValAttr == ST_FrameScrollbarUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ecfe := _ggbe.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _ecfe != nil {
		return _ecfe
	}
	return nil
}
func (_geceb *CT_Pitch) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dffecd, _cbbff := _geceb.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _cbbff != nil {
		return _cbbff
	}
	start.Attr = append(start.Attr, _dffecd)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_HexColor(s string) (ST_HexColor, error) {
	_bgega := ST_HexColor{}
	if s == "auto" {
		_bgega.ST_HexColorAuto = ST_HexColorAutoAuto
	} else {
		_bgega.ST_HexColorRGB = &s
	}
	return _bgega, nil
}

type CT_MailMerge struct {

	// Source Document Type
	MainDocumentType *CT_MailMergeDocType

	// Query Contains Link to External Query File
	LinkToQuery *CT_OnOff

	// Data Source Type
	DataType *CT_MailMergeDataType

	// Data Source Connection String
	ConnectString *CT_String

	// Query For Data Source Records To Merge
	Query *CT_String

	// Data Source File Path
	DataSource *CT_Rel

	// Header Definition File Path
	HeaderSource *CT_Rel

	// Remove Blank Lines from Merged Documents
	DoNotSuppressBlankLines *CT_OnOff

	// Merged Document Destination
	Destination *CT_MailMergeDest

	// Column Containing E-mail Address
	AddressFieldName *CT_String

	// Merged E-mail or Fax Subject Line
	MailSubject *CT_String

	// Merged Document To E-Mail Attachment
	MailAsAttachment *CT_OnOff

	// View Merged Data Within Document
	ViewMergedData *CT_OnOff

	// Record Currently Displayed In Merged Document
	ActiveRecord *CT_DecimalNumber

	// Mail Merge Error Reporting Setting
	CheckErrors *CT_DecimalNumber

	// Office Data Source Object Settings
	Odso *CT_Odso
}

func (_cgecf *WebSettings) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cgecf.CT_WebSettings = *NewCT_WebSettings()
_gffdge:
	for {
		_afbee, _cebcg := d.Token()
		if _cebcg != nil {
			return _cebcg
		}
		switch _bgcgc := _afbee.(type) {
		case _d.StartElement:
			switch _bgcgc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "frameset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "frameset"}:
				_cgecf.Frameset = NewCT_Frameset()
				if _ffgcbb := d.DecodeElement(_cgecf.Frameset, &_bgcgc); _ffgcbb != nil {
					return _ffgcbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divs"}:
				_cgecf.Divs = NewCT_Divs()
				if _bdbeba := d.DecodeElement(_cgecf.Divs, &_bgcgc); _bdbeba != nil {
					return _bdbeba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "encoding"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "encoding"}:
				_cgecf.Encoding = NewCT_String()
				if _badga := d.DecodeElement(_cgecf.Encoding, &_bgcgc); _badga != nil {
					return _badga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "optimizeForBrowser"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "optimizeForBrowser"}:
				_cgecf.OptimizeForBrowser = NewCT_OptimizeForBrowser()
				if _edbgb := d.DecodeElement(_cgecf.OptimizeForBrowser, &_bgcgc); _edbgb != nil {
					return _edbgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "relyOnVML"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "relyOnVML"}:
				_cgecf.RelyOnVML = NewCT_OnOff()
				if _afedgc := d.DecodeElement(_cgecf.RelyOnVML, &_bgcgc); _afedgc != nil {
					return _afedgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "allowPNG"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "allowPNG"}:
				_cgecf.AllowPNG = NewCT_OnOff()
				if _daecff := d.DecodeElement(_cgecf.AllowPNG, &_bgcgc); _daecff != nil {
					return _daecff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotRelyOnCSS"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotRelyOnCSS"}:
				_cgecf.DoNotRelyOnCSS = NewCT_OnOff()
				if _eggda := d.DecodeElement(_cgecf.DoNotRelyOnCSS, &_bgcgc); _eggda != nil {
					return _eggda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotSaveAsSingleFile"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotSaveAsSingleFile"}:
				_cgecf.DoNotSaveAsSingleFile = NewCT_OnOff()
				if _ebdfaga := d.DecodeElement(_cgecf.DoNotSaveAsSingleFile, &_bgcgc); _ebdfaga != nil {
					return _ebdfaga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotOrganizeInFolder"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotOrganizeInFolder"}:
				_cgecf.DoNotOrganizeInFolder = NewCT_OnOff()
				if _bcefe := d.DecodeElement(_cgecf.DoNotOrganizeInFolder, &_bgcgc); _bcefe != nil {
					return _bcefe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotUseLongFileNames"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotUseLongFileNames"}:
				_cgecf.DoNotUseLongFileNames = NewCT_OnOff()
				if _adeega := d.DecodeElement(_cgecf.DoNotUseLongFileNames, &_bgcgc); _adeega != nil {
					return _adeega
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pixelsPerInch"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pixelsPerInch"}:
				_cgecf.PixelsPerInch = NewCT_DecimalNumber()
				if _ffdec := d.DecodeElement(_cgecf.PixelsPerInch, &_bgcgc); _ffdec != nil {
					return _ffdec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "targetScreenSz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "targetScreenSz"}:
				_cgecf.TargetScreenSz = NewCT_TargetScreenSz()
				if _dgdgab := d.DecodeElement(_cgecf.TargetScreenSz, &_bgcgc); _dgdgab != nil {
					return _dgdgab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveSmartTagsAsXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveSmartTagsAsXml"}:
				_cgecf.SaveSmartTagsAsXml = NewCT_OnOff()
				if _aabfcf := d.DecodeElement(_cgecf.SaveSmartTagsAsXml, &_bgcgc); _aabfcf != nil {
					return _aabfcf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WebSettings\u0020\u0025v", _bgcgc.Name)
				if _adgcge := d.Skip(); _adgcge != nil {
					return _adgcge
				}
			}
		case _d.EndElement:
			break _gffdge
		case _d.CharData:
		}
	}
	return nil
}

type CT_Settings struct {

	// Write Protection
	WriteProtection *CT_WriteProtection

	// Document View Setting
	View *CT_View

	// Magnification Setting
	Zoom *CT_Zoom

	// Remove Personal Information from Document Properties
	RemovePersonalInformation *CT_OnOff

	// Remove Date and Time from Annotations
	RemoveDateAndTime *CT_OnOff

	// Do Not Display Visual Boundary For Header/Footer or Between Pages
	DoNotDisplayPageBoundaries *CT_OnOff

	// Display Background Objects When Displaying Document
	DisplayBackgroundShape *CT_OnOff

	// Print PostScript Codes With Document Text
	PrintPostScriptOverText *CT_OnOff

	// Print Fractional Character Widths
	PrintFractionalCharacterWidth *CT_OnOff

	// Only Print Form Field Content
	PrintFormsData *CT_OnOff

	// Embed TrueType Fonts
	EmbedTrueTypeFonts *CT_OnOff

	// Embed Common System Fonts
	EmbedSystemFonts *CT_OnOff

	// Subset Fonts When Embedding
	SaveSubsetFonts *CT_OnOff

	// Only Save Form Field Content
	SaveFormsData *CT_OnOff

	// Mirror Page Margins
	MirrorMargins *CT_OnOff

	// Align Paragraph and Table Borders with Page Border
	AlignBordersAndEdges *CT_OnOff

	// Page Border Excludes Header
	BordersDoNotSurroundHeader *CT_OnOff

	// Page Border Excludes Footer
	BordersDoNotSurroundFooter *CT_OnOff

	// Position Gutter At Top of Page
	GutterAtTop *CT_OnOff

	// Do Not Display Visual Indication of Spelling Errors
	HideSpellingErrors *CT_OnOff

	// Do Not Display Visual Indication of Grammatical Errors
	HideGrammaticalErrors *CT_OnOff

	// Grammar Checking Settings
	ActiveWritingStyle []*CT_WritingStyle

	// Spelling and Grammatical Checking State
	ProofState *CT_Proof

	// Structured Document Tag Placeholder Text Should be Resaved
	FormsDesign *CT_OnOff

	// Attached Document Template
	AttachedTemplate *CT_Rel

	// Automatically Update Styles From Document Template
	LinkStyles *CT_OnOff

	// Suggested Filtering for List of Document Styles
	StylePaneFormatFilter *CT_StylePaneFilter

	// Suggested Sorting for List of Document Styles
	StylePaneSortMethod *CT_StyleSort

	// Document Classification
	DocumentType *CT_DocType

	// Mail Merge Settings
	MailMerge *CT_MailMerge

	// Visibility of Annotation Types
	RevisionView *CT_TrackChangesView

	// Track Revisions to Document
	TrackRevisions *CT_OnOff

	// Do Not Use Move Syntax When Tracking Revisions
	DoNotTrackMoves *CT_OnOff

	// Do Not Track Formatting Revisions When Tracking Revisions
	DoNotTrackFormatting *CT_OnOff

	// Document Editing Restrictions
	DocumentProtection *CT_DocProtect

	// Allow Automatic Formatting to Override Formatting Protection Settings
	AutoFormatOverride *CT_OnOff

	// Prevent Modification of Themes Part
	StyleLockTheme *CT_OnOff

	// Prevent Replacement of Styles Part
	StyleLockQFSet *CT_OnOff

	// Distance Between Automatic Tab Stops
	DefaultTabStop *CT_TwipsMeasure

	// Automatically Hyphenate Document Contents When Displayed
	AutoHyphenation *CT_OnOff

	// Maximum Number of Consecutively Hyphenated Lines
	ConsecutiveHyphenLimit *CT_DecimalNumber

	// Hyphenation Zone
	HyphenationZone *CT_TwipsMeasure

	// Do Not Hyphenate Words in ALL CAPITAL LETTERS
	DoNotHyphenateCaps *CT_OnOff

	// Show E-Mail Message Header
	ShowEnvelope *CT_OnOff

	// Percentage of Document to Use When Generating Summary
	SummaryLength *CT_DecimalNumberOrPrecent

	// Paragraph Style Applied to Automatically Generated Paragraphs
	ClickAndTypeStyle *CT_String

	// Default Table Style for Newly Inserted Tables
	DefaultTableStyle *CT_String

	// Different Even/Odd Page Headers and Footers
	EvenAndOddHeaders *CT_OnOff

	// Reverse Book Fold Printing
	BookFoldRevPrinting *CT_OnOff

	// Book Fold Printing
	BookFoldPrinting *CT_OnOff

	// Number of Pages Per Booklet
	BookFoldPrintingSheets *CT_DecimalNumber

	// Drawing Grid Horizontal Grid Unit Size
	DrawingGridHorizontalSpacing *CT_TwipsMeasure

	// Drawing Grid Vertical Grid Unit Size
	DrawingGridVerticalSpacing *CT_TwipsMeasure

	// Distance between Horizontal Gridlines
	DisplayHorizontalDrawingGridEvery *CT_DecimalNumber

	// Distance between Vertical Gridlines
	DisplayVerticalDrawingGridEvery *CT_DecimalNumber

	// Do Not Use Margins for Drawing Grid Origin
	DoNotUseMarginsForDrawingGridOrigin *CT_OnOff

	// Drawing Grid Horizontal Origin Point
	DrawingGridHorizontalOrigin *CT_TwipsMeasure

	// Drawing Grid Vertical Origin Point
	DrawingGridVerticalOrigin *CT_TwipsMeasure

	// Do Not Show Visual Indicator For Form Fields
	DoNotShadeFormData *CT_OnOff

	// Never Kern Punctuation Characters
	NoPunctuationKerning *CT_OnOff

	// Character-Level Whitespace Compression
	CharacterSpacingControl *CT_CharacterSpacing

	// Print Two Pages Per Sheet
	PrintTwoOnOne *CT_OnOff

	// Use Strict Kinsoku Rules for Japanese Text
	StrictFirstAndLastChars *CT_OnOff

	// Custom Set of Characters Which Cannot End a Line
	NoLineBreaksAfter *CT_Kinsoku

	// Custom Set Of Characters Which Cannot Begin A Line
	NoLineBreaksBefore *CT_Kinsoku

	// Generate Thumbnail For Document On Save
	SavePreviewPicture *CT_OnOff

	// Do Not Validate Custom XML Markup Against Schemas
	DoNotValidateAgainstSchema *CT_OnOff

	// Allow Saving Document As XML File When Custom XML Markup Is Invalid
	SaveInvalidXml *CT_OnOff

	// Ignore Mixed Content When Validating Custom XML Markup
	IgnoreMixedContent *CT_OnOff

	// Use Custom XML Element Names as Default Placeholder Text
	AlwaysShowPlaceholderText *CT_OnOff

	// Do Not Show Visual Indicator For Invalid Custom XML Markup
	DoNotDemarcateInvalidXml *CT_OnOff

	// Only Save Custom XML Markup
	SaveXmlDataOnly *CT_OnOff

	// Save Document as XML File through Custom XSL Transform
	UseXSLTWhenSaving *CT_OnOff

	// Custom XSL Transform To Use When Saving As XML File
	SaveThroughXslt *CT_SaveThroughXslt

	// Show Visual Indicators for Custom XML Markup Start/End Locations
	ShowXMLTags *CT_OnOff

	// Do Not Mark Custom XML Elements With No Namespace As Invalid
	AlwaysMergeEmptyNamespace *CT_OnOff

	// Automatically Recalculate Fields on Open
	UpdateFields *CT_OnOff

	// Default Properties for VML Objects in Header and Footer
	HdrShapeDefaults *CT_ShapeDefaults

	// Document-Wide Footnote Properties
	FootnotePr *CT_FtnDocProps

	// Document-Wide Endnote Properties
	EndnotePr *CT_EdnDocProps

	// Compatibility Settings
	Compat *CT_Compat

	// Document Variables
	DocVars *CT_DocVars

	// Listing of All Revision Save ID Values
	Rsids  *CT_DocRsids
	MathPr *_f.MathPr

	// Attached Custom XML Schema
	AttachedSchema []*CT_String

	// Theme Font Languages
	ThemeFontLang *CT_Language

	// Theme Color Mappings
	ClrSchemeMapping *CT_ColorSchemeMapping

	// Do Not Include Content in Text Boxes, Footnotes, and Endnotes in Document Statistics
	DoNotIncludeSubdocsInStats *CT_OnOff

	// Do Not Automatically Compress Images
	DoNotAutoCompressPictures *CT_OnOff

	// Upgrade Document on Open
	ForceUpgrade *CT_Empty

	// Caption Settings
	Captions *CT_Captions

	// Freeze Document Layout
	ReadModeInkLockDown *CT_ReadingModeInkLockDown

	// Supplementary Smart Tag Information
	SmartTagType  []*CT_SmartTagType
	SchemaLibrary *_gg.SchemaLibrary

	// Default Properties for VML Objects in Main Document
	ShapeDefaults *CT_ShapeDefaults

	// Remove Smart Tags When Saving
	DoNotEmbedSmartTags *CT_OnOff

	// Radix Point for Field Code Evaluation
	DecimalSymbol *CT_String

	// List Separator for Field Code Evaluation
	ListSeparator *CT_String
	Extra         []_ga.Any
}

// ValidateWithPath validates the WdCT_WordprocessingGroupChoice and its children, prefixing error messages with path
func (_eggae *WdCT_WordprocessingGroupChoice) ValidateWithPath(path string) error {
	for _fgfag, _ffdacg := range _eggae.Wsp {
		if _cacac := _ffdacg.ValidateWithPath(_b.Sprintf("\u0025s\u002fWsp\u005b\u0025d\u005d", path, _fgfag)); _cacac != nil {
			return _cacac
		}
	}
	for _aeaafc, _fbaaf := range _eggae.GrpSp {
		if _cegfg := _fbaaf.ValidateWithPath(_b.Sprintf("\u0025s\u002fGrpSp\u005b\u0025d\u005d", path, _aeaafc)); _cegfg != nil {
			return _cegfg
		}
	}
	for _afaede, _fcbggf := range _eggae.GraphicFrame {
		if _fdbee := _fcbggf.ValidateWithPath(_b.Sprintf("\u0025s\u002fGraphicFrame\u005b\u0025d\u005d", path, _afaede)); _fdbee != nil {
			return _fdbee
		}
	}
	for _abcce, _gffdbg := range _eggae.Pic {
		if _gbbabg := _gffdbg.ValidateWithPath(_b.Sprintf("\u0025s\u002fPic\u005b\u0025d\u005d", path, _abcce)); _gbbabg != nil {
			return _gbbabg
		}
	}
	for _dafdbd, _gcaddg := range _eggae.ContentPart {
		if _ggcgd := _gcaddg.ValidateWithPath(_b.Sprintf("\u0025s\u002fContentPart\u005b\u0025d\u005d", path, _dafdbd)); _ggcgd != nil {
			return _ggcgd
		}
	}
	return nil
}

type ST_FldCharType byte

func NewCT_TrackChangesView() *CT_TrackChangesView { _ebgec := &CT_TrackChangesView{}; return _ebgec }

// Validate validates the CT_DocPartCategory and its children
func (_dfacg *CT_DocPartCategory) Validate() error {
	return _dfacg.ValidateWithPath("CT_DocPartCategory")
}
func (_fcegda ST_MeasurementOrPercent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fcegda.ST_DecimalNumberOrPercent != nil {
		e.Encode(_fcegda.ST_DecimalNumberOrPercent)
	}
	if _fcegda.ST_UniversalMeasure != nil {
		e.EncodeToken(_d.CharData(*_fcegda.ST_UniversalMeasure))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}

// ValidateWithPath validates the WdCT_PosH and its children, prefixing error messages with path
func (_cbbaba *WdCT_PosH) ValidateWithPath(path string) error {
	if _cbbaba.RelativeFromAttr == WdST_RelFromHUnset {
		return _b.Errorf("%s\u002fRelativeFromAttr is\u0020a\u0020mandatory\u0020field", path)
	}
	if _eccga := _cbbaba.RelativeFromAttr.ValidateWithPath(path + "\u002fRelativeFromAttr"); _eccga != nil {
		return _eccga
	}
	if _dbccf := _cbbaba.Choice.ValidateWithPath(path + "\u002fChoice"); _dbccf != nil {
		return _dbccf
	}
	return nil
}
func NewCT_Base64Binary() *CT_Base64Binary { _egag := &CT_Base64Binary{}; return _egag }
func (_fggaa ST_MeasurementOrPercent) String() string {
	if _fggaa.ST_DecimalNumberOrPercent != nil {
		return _fggaa.ST_DecimalNumberOrPercent.String()
	}
	if _fggaa.ST_UniversalMeasure != nil {
		return _b.Sprintf("\u0025v", *_fggaa.ST_UniversalMeasure)
	}
	return ""
}

type CT_PageBorders struct {

	// Z-Ordering of Page Border
	ZOrderAttr ST_PageBorderZOrder

	// Pages to Display Page Borders
	DisplayAttr ST_PageBorderDisplay

	// Page Border Positioning
	OffsetFromAttr ST_PageBorderOffset

	// Top Border
	Top *CT_TopPageBorder

	// Left Border
	Left *CT_PageBorder

	// Bottom Border
	Bottom *CT_BottomPageBorder

	// Right Border
	Right *CT_PageBorder
}

// ValidateWithPath validates the CT_DocPartBehavior and its children, prefixing error messages with path
func (_egbde *CT_DocPartBehavior) ValidateWithPath(path string) error {
	if _egbde.ValAttr == ST_DocPartBehaviorUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ddcc := _egbde.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _ddcc != nil {
		return _ddcc
	}
	return nil
}
func (_bdbbega *ST_PageBorderZOrder) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aeefg, _bbfbe := d.Token()
	if _bbfbe != nil {
		return _bbfbe
	}
	if _cgfbbf, _dfebd := _aeefg.(_d.EndElement); _dfebd && _cgfbbf.Name == start.Name {
		*_bdbbega = 1
		return nil
	}
	if _dgeea, _bggae := _aeefg.(_d.CharData); !_bggae {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _aeefg)
	} else {
		switch string(_dgeea) {
		case "":
			*_bdbbega = 0
		case "front":
			*_bdbbega = 1
		case "back":
			*_bdbbega = 2
		}
	}
	_aeefg, _bbfbe = d.Token()
	if _bbfbe != nil {
		return _bbfbe
	}
	if _eeaecc, _gbffge := _aeefg.(_d.EndElement); _gbffge && _eeaecc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _aeefg)
}

type WdCT_WordprocessingCanvas struct {
	Bg     *_eb.CT_BackgroundFormatting
	Whole  *_eb.CT_WholeE2oFormatting
	Choice []*WdCT_WordprocessingCanvasChoice
	ExtLst *_eb.CT_OfficeArtExtensionList
}

// Validate validates the CT_Height and its children
func (_dadcgf *CT_Height) Validate() error { return _dadcgf.ValidateWithPath("CT_Height") }
func (_caecf ST_Jc) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_abaad := _d.Attr{}
	_abaad.Name = name
	switch _caecf {
	case ST_JcUnset:
		_abaad.Value = ""
	case ST_JcStart:
		_abaad.Value = "start"
	case ST_JcCenter:
		_abaad.Value = "center"
	case ST_JcEnd:
		_abaad.Value = "end"
	case ST_JcBoth:
		_abaad.Value = "both"
	case ST_JcMediumKashida:
		_abaad.Value = "mediumKashida"
	case ST_JcDistribute:
		_abaad.Value = "distribute"
	case ST_JcNumTab:
		_abaad.Value = "numTab"
	case ST_JcHighKashida:
		_abaad.Value = "highKashida"
	case ST_JcLowKashida:
		_abaad.Value = "lowKashida"
	case ST_JcThaiDistribute:
		_abaad.Value = "thaiDistribute"
	case ST_JcLeft:
		_abaad.Value = "left"
	case ST_JcRight:
		_abaad.Value = "right"
	}
	return _abaad, nil
}

// Validate validates the CT_SdtDate and its children
func (_dgcda *CT_SdtDate) Validate() error       { return _dgcda.ValidateWithPath("CT_SdtDate") }
func NewWdCT_WrapTopBottom() *WdCT_WrapTopBottom { _fcgdg := &WdCT_WrapTopBottom{}; return _fcgdg }

// Validate validates the CT_Spacing and its children
func (_ccacbg *CT_Spacing) Validate() error { return _ccacbg.ValidateWithPath("CT_Spacing") }
func (_ebdcc ST_SectionMark) String() string {
	switch _ebdcc {
	case 0:
		return ""
	case 1:
		return "nextPage"
	case 2:
		return "nextColumn"
	case 3:
		return "continuous"
	case 4:
		return "evenPage"
	case 5:
		return "oddPage"
	}
	return ""
}
func (_gbdgg *CT_MailMerge) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_efgff := _d.StartElement{Name: _d.Name{Local: "w:mainDocumentType"}}
	e.EncodeElement(_gbdgg.MainDocumentType, _efgff)
	if _gbdgg.LinkToQuery != nil {
		_fffg := _d.StartElement{Name: _d.Name{Local: "w:linkToQuery"}}
		e.EncodeElement(_gbdgg.LinkToQuery, _fffg)
	}
	_feecbe := _d.StartElement{Name: _d.Name{Local: "w:dataType"}}
	e.EncodeElement(_gbdgg.DataType, _feecbe)
	if _gbdgg.ConnectString != nil {
		_gdec := _d.StartElement{Name: _d.Name{Local: "w:connectString"}}
		e.EncodeElement(_gbdgg.ConnectString, _gdec)
	}
	if _gbdgg.Query != nil {
		_aaadg := _d.StartElement{Name: _d.Name{Local: "w:query"}}
		e.EncodeElement(_gbdgg.Query, _aaadg)
	}
	if _gbdgg.DataSource != nil {
		_bbgec := _d.StartElement{Name: _d.Name{Local: "w:dataSource"}}
		e.EncodeElement(_gbdgg.DataSource, _bbgec)
	}
	if _gbdgg.HeaderSource != nil {
		_aebcc := _d.StartElement{Name: _d.Name{Local: "w:headerSource"}}
		e.EncodeElement(_gbdgg.HeaderSource, _aebcc)
	}
	if _gbdgg.DoNotSuppressBlankLines != nil {
		_adaec := _d.StartElement{Name: _d.Name{Local: "w:doNotSuppressBlankLines"}}
		e.EncodeElement(_gbdgg.DoNotSuppressBlankLines, _adaec)
	}
	if _gbdgg.Destination != nil {
		_gggdg := _d.StartElement{Name: _d.Name{Local: "w:destination"}}
		e.EncodeElement(_gbdgg.Destination, _gggdg)
	}
	if _gbdgg.AddressFieldName != nil {
		_fgeg := _d.StartElement{Name: _d.Name{Local: "w:addressFieldName"}}
		e.EncodeElement(_gbdgg.AddressFieldName, _fgeg)
	}
	if _gbdgg.MailSubject != nil {
		_fbcbe := _d.StartElement{Name: _d.Name{Local: "w:mailSubject"}}
		e.EncodeElement(_gbdgg.MailSubject, _fbcbe)
	}
	if _gbdgg.MailAsAttachment != nil {
		_cdcedb := _d.StartElement{Name: _d.Name{Local: "w:mailAsAttachment"}}
		e.EncodeElement(_gbdgg.MailAsAttachment, _cdcedb)
	}
	if _gbdgg.ViewMergedData != nil {
		_gdaee := _d.StartElement{Name: _d.Name{Local: "w:viewMergedData"}}
		e.EncodeElement(_gbdgg.ViewMergedData, _gdaee)
	}
	if _gbdgg.ActiveRecord != nil {
		_cefbe := _d.StartElement{Name: _d.Name{Local: "w:activeRecord"}}
		e.EncodeElement(_gbdgg.ActiveRecord, _cefbe)
	}
	if _gbdgg.CheckErrors != nil {
		_dcdbg := _d.StartElement{Name: _d.Name{Local: "w:checkErrors"}}
		e.EncodeElement(_gbdgg.CheckErrors, _dcdbg)
	}
	if _gbdgg.Odso != nil {
		_bgcdb := _d.StartElement{Name: _d.Name{Local: "w:odso"}}
		e.EncodeElement(_gbdgg.Odso, _bgcdb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_FrameScrollbar and its children
func (_ffgdd *CT_FrameScrollbar) Validate() error {
	return _ffgdd.ValidateWithPath("CT_FrameScrollbar")
}
func (_ccfdfc *ST_HpsMeasure) ValidateWithPath(path string) error {
	_bcdbcd := []string{}
	if _ccfdfc.ST_UnsignedDecimalNumber != nil {
		_bcdbcd = append(_bcdbcd, "ST_UnsignedDecimalNumber")
	}
	if _ccfdfc.ST_PositiveUniversalMeasure != nil {
		_bcdbcd = append(_bcdbcd, "ST_PositiveUniversalMeasure")
	}
	if len(_bcdbcd) > 1 {
		return _b.Errorf("%s\u0020too\u0020many\u0020members\u0020set:\u0020\u0025v", path, _bcdbcd)
	}
	return nil
}

type CT_Perm struct {

	// Annotation ID
	IdAttr string

	// Annotation Displaced By Custom XML Markup
	DisplacedByCustomXmlAttr ST_DisplacedByCustomXml
}
type CT_FtnEdnSepRef struct {

	// Footnote/Endnote ID
	IdAttr int64
}

func (_dacdbb *CT_SectPrBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gddag := range start.Attr {
		if _gddag.Name.Local == "rsidDel" {
			_aagced, _cdaed := _gddag.Value, error(nil)
			if _cdaed != nil {
				return _cdaed
			}
			_dacdbb.RsidDelAttr = &_aagced
			continue
		}
		if _gddag.Name.Local == "rsidSect" {
			_dcbe, _bcegg := _gddag.Value, error(nil)
			if _bcegg != nil {
				return _bcegg
			}
			_dacdbb.RsidSectAttr = &_dcbe
			continue
		}
		if _gddag.Name.Local == "rsidRPr" {
			_deeab, _afge := _gddag.Value, error(nil)
			if _afge != nil {
				return _afge
			}
			_dacdbb.RsidRPrAttr = &_deeab
			continue
		}
		if _gddag.Name.Local == "rsidR" {
			_eeefb, _afbce := _gddag.Value, error(nil)
			if _afbce != nil {
				return _afbce
			}
			_dacdbb.RsidRAttr = &_eeefb
			continue
		}
	}
_cacgc:
	for {
		_cdagc, _fgcbaa := d.Token()
		if _fgcbaa != nil {
			return _fgcbaa
		}
		switch _bggegg := _cdagc.(type) {
		case _d.StartElement:
			switch _bggegg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnotePr"}:
				_dacdbb.FootnotePr = NewCT_FtnProps()
				if _fbeba := d.DecodeElement(_dacdbb.FootnotePr, &_bggegg); _fbeba != nil {
					return _fbeba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnotePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnotePr"}:
				_dacdbb.EndnotePr = NewCT_EdnProps()
				if _bbaef := d.DecodeElement(_dacdbb.EndnotePr, &_bggegg); _bbaef != nil {
					return _bbaef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "type"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "type"}:
				_dacdbb.Type = NewCT_SectType()
				if _edaddg := d.DecodeElement(_dacdbb.Type, &_bggegg); _edaddg != nil {
					return _edaddg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgSz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgSz"}:
				_dacdbb.PgSz = NewCT_PageSz()
				if _dcaaff := d.DecodeElement(_dacdbb.PgSz, &_bggegg); _dcaaff != nil {
					return _dcaaff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgMar"}:
				_dacdbb.PgMar = NewCT_PageMar()
				if _aggbc := d.DecodeElement(_dacdbb.PgMar, &_bggegg); _aggbc != nil {
					return _aggbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "paperSrc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "paperSrc"}:
				_dacdbb.PaperSrc = NewCT_PaperSource()
				if _bagda := d.DecodeElement(_dacdbb.PaperSrc, &_bggegg); _bagda != nil {
					return _bagda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgBorders"}:
				_dacdbb.PgBorders = NewCT_PageBorders()
				if _dffea := d.DecodeElement(_dacdbb.PgBorders, &_bggegg); _dffea != nil {
					return _dffea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lnNumType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lnNumType"}:
				_dacdbb.LnNumType = NewCT_LineNumber()
				if _dffbe := d.DecodeElement(_dacdbb.LnNumType, &_bggegg); _dffbe != nil {
					return _dffbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgNumType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgNumType"}:
				_dacdbb.PgNumType = NewCT_PageNumber()
				if _fgdfad := d.DecodeElement(_dacdbb.PgNumType, &_bggegg); _fgdfad != nil {
					return _fgdfad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cols"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cols"}:
				_dacdbb.Cols = NewCT_Columns()
				if _ffddc := d.DecodeElement(_dacdbb.Cols, &_bggegg); _ffddc != nil {
					return _ffddc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "formProt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "formProt"}:
				_dacdbb.FormProt = NewCT_OnOff()
				if _efffa := d.DecodeElement(_dacdbb.FormProt, &_bggegg); _efffa != nil {
					return _efffa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vAlign"}:
				_dacdbb.VAlign = NewCT_VerticalJc()
				if _cgdcba := d.DecodeElement(_dacdbb.VAlign, &_bggegg); _cgdcba != nil {
					return _cgdcba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noEndnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noEndnote"}:
				_dacdbb.NoEndnote = NewCT_OnOff()
				if _ccfcg := d.DecodeElement(_dacdbb.NoEndnote, &_bggegg); _ccfcg != nil {
					return _ccfcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "titlePg"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "titlePg"}:
				_dacdbb.TitlePg = NewCT_OnOff()
				if _deeged := d.DecodeElement(_dacdbb.TitlePg, &_bggegg); _deeged != nil {
					return _deeged
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "textDirection"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "textDirection"}:
				_dacdbb.TextDirection = NewCT_TextDirection()
				if _edcaa := d.DecodeElement(_dacdbb.TextDirection, &_bggegg); _edcaa != nil {
					return _edcaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidi"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidi"}:
				_dacdbb.Bidi = NewCT_OnOff()
				if _abddg := d.DecodeElement(_dacdbb.Bidi, &_bggegg); _abddg != nil {
					return _abddg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtlGutter"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtlGutter"}:
				_dacdbb.RtlGutter = NewCT_OnOff()
				if _bfaeg := d.DecodeElement(_dacdbb.RtlGutter, &_bggegg); _bfaeg != nil {
					return _bfaeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docGrid"}:
				_dacdbb.DocGrid = NewCT_DocGrid()
				if _ebfcg := d.DecodeElement(_dacdbb.DocGrid, &_bggegg); _ebfcg != nil {
					return _ebfcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "printerSettings"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "printerSettings"}:
				_dacdbb.PrinterSettings = NewCT_Rel()
				if _fcgc := d.DecodeElement(_dacdbb.PrinterSettings, &_bggegg); _fcgc != nil {
					return _fcgc
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_SectPrBase \u0025v", _bggegg.Name)
				if _eefge := d.Skip(); _eefge != nil {
					return _eefge
				}
			}
		case _d.EndElement:
			break _cacgc
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_FontFamily() *CT_FontFamily {
	_geegf := &CT_FontFamily{}
	_geegf.ValAttr = ST_FontFamily(1)
	return _geegf
}

// ValidateWithPath validates the CT_Lang and its children, prefixing error messages with path
func (_gaga *CT_Lang) ValidateWithPath(path string) error { return nil }
func (_ef *AG_TransitionalPassword) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ef.CryptProviderTypeAttr != _g.ST_CryptProvUnset {
		_eebg, _df := _ef.CryptProviderTypeAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptProviderType"})
		if _df != nil {
			return _df
		}
		start.Attr = append(start.Attr, _eebg)
	}
	if _ef.CryptAlgorithmClassAttr != _g.ST_AlgClassUnset {
		_af, _bd := _ef.CryptAlgorithmClassAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptAlgorithmClass"})
		if _bd != nil {
			return _bd
		}
		start.Attr = append(start.Attr, _af)
	}
	if _ef.CryptAlgorithmTypeAttr != _g.ST_AlgTypeUnset {
		_dac, _fae := _ef.CryptAlgorithmTypeAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptAlgorithmType"})
		if _fae != nil {
			return _fae
		}
		start.Attr = append(start.Attr, _dac)
	}
	if _ef.CryptAlgorithmSidAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptAlgorithmSid"}, Value: _b.Sprintf("\u0025v", *_ef.CryptAlgorithmSidAttr)})
	}
	if _ef.CryptSpinCountAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptSpinCount"}, Value: _b.Sprintf("\u0025v", *_ef.CryptSpinCountAttr)})
	}
	if _ef.CryptProviderAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProvider"}, Value: _b.Sprintf("\u0025v", *_ef.CryptProviderAttr)})
	}
	if _ef.AlgIdExtAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algIdExt"}, Value: _b.Sprintf("\u0025v", *_ef.AlgIdExtAttr)})
	}
	if _ef.AlgIdExtSourceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algIdExtSource"}, Value: _b.Sprintf("\u0025v", *_ef.AlgIdExtSourceAttr)})
	}
	if _ef.CryptProviderTypeExtAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProviderTypeExt"}, Value: _b.Sprintf("\u0025v", *_ef.CryptProviderTypeExtAttr)})
	}
	if _ef.CryptProviderTypeExtSourceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProviderTypeExtSource"}, Value: _b.Sprintf("\u0025v", *_ef.CryptProviderTypeExtSourceAttr)})
	}
	if _ef.HashAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hash"}, Value: _b.Sprintf("\u0025v", *_ef.HashAttr)})
	}
	if _ef.SaltAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:salt"}, Value: _b.Sprintf("\u0025v", *_ef.SaltAttr)})
	}
	return nil
}

// Validate validates the CT_Perm and its children
func (_egdfg *CT_Perm) Validate() error { return _egdfg.ValidateWithPath("CT_Perm") }

type CT_HpsMeasure struct {

	// Half Point Measurement
	ValAttr ST_HpsMeasure
}

// Validate validates the CT_Lock and its children
func (_fcag *CT_Lock) Validate() error { return _fcag.ValidateWithPath("CT_Lock") }

// ValidateWithPath validates the CT_SdtContentRow and its children, prefixing error messages with path
func (_cbgegb *CT_SdtContentRow) ValidateWithPath(path string) error {
	for _edfaf, _ebcacc := range _cbgegb.Tr {
		if _acabc := _ebcacc.ValidateWithPath(_b.Sprintf("\u0025s\u002fTr\u005b\u0025d]", path, _edfaf)); _acabc != nil {
			return _acabc
		}
	}
	if _cbgegb.CustomXml != nil {
		if _bacacf := _cbgegb.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _bacacf != nil {
			return _bacacf
		}
	}
	if _cbgegb.Sdt != nil {
		if _abeaeg := _cbgegb.Sdt.ValidateWithPath(path + "\u002fSdt"); _abeaeg != nil {
			return _abeaeg
		}
	}
	for _fegdfe, _afadd := range _cbgegb.EG_RunLevelElts {
		if _gcfegg := _afadd.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _fegdfe)); _gcfegg != nil {
			return _gcfegg
		}
	}
	return nil
}
func NewWdCT_WordprocessingCanvasChoice() *WdCT_WordprocessingCanvasChoice {
	_feaea := &WdCT_WordprocessingCanvasChoice{}
	return _feaea
}
func (_dgdg *CT_DocPartName) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _dgdg.ValAttr)})
	if _dgdg.DecoratedAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:decorated"}, Value: _b.Sprintf("\u0025v", *_dgdg.DecoratedAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_aeedd *ST_HeightRule) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_aeedd = 0
	case "auto":
		*_aeedd = 1
	case "exact":
		*_aeedd = 2
	case "atLeast":
		*_aeedd = 3
	}
	return nil
}
func NewCT_StyleSort() *CT_StyleSort {
	_aadcaf := &CT_StyleSort{}
	_aadcaf.ValAttr = ST_StyleSort(1)
	return _aadcaf
}
func (_fffgg *ST_Underline) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_begbec, _gfbbda := d.Token()
	if _gfbbda != nil {
		return _gfbbda
	}
	if _gegba, _dbcea := _begbec.(_d.EndElement); _dbcea && _gegba.Name == start.Name {
		*_fffgg = 1
		return nil
	}
	if _dadfe, _febfd := _begbec.(_d.CharData); !_febfd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _begbec)
	} else {
		switch string(_dadfe) {
		case "":
			*_fffgg = 0
		case "single":
			*_fffgg = 1
		case "words":
			*_fffgg = 2
		case "double":
			*_fffgg = 3
		case "thick":
			*_fffgg = 4
		case "dotted":
			*_fffgg = 5
		case "dottedHeavy":
			*_fffgg = 6
		case "dash":
			*_fffgg = 7
		case "dashedHeavy":
			*_fffgg = 8
		case "dashLong":
			*_fffgg = 9
		case "dashLongHeavy":
			*_fffgg = 10
		case "dotDash":
			*_fffgg = 11
		case "dashDotHeavy":
			*_fffgg = 12
		case "dotDotDash":
			*_fffgg = 13
		case "dashDotDotHeavy":
			*_fffgg = 14
		case "wave":
			*_fffgg = 15
		case "wavyHeavy":
			*_fffgg = 16
		case "wavyDouble":
			*_fffgg = 17
		case "none":
			*_fffgg = 18
		}
	}
	_begbec, _gfbbda = d.Token()
	if _gfbbda != nil {
		return _gfbbda
	}
	if _ebfbf, _aafadc := _begbec.(_d.EndElement); _aafadc && _ebfbf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _begbec)
}

// Validate validates the CT_Bookmark and its children
func (_gdda *CT_Bookmark) Validate() error { return _gdda.ValidateWithPath("CT_Bookmark") }
func (_eefef ST_EdGrp) ValidateWithPath(path string) error {
	switch _eefef {
	case 0, 1, 2, 3, 4, 5, 6, 7:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_eefef))
	}
	return nil
}

// Validate validates the Ftr and its children
func (_cgecce *Ftr) Validate() error { return _cgecce.ValidateWithPath("Ftr") }

type CT_MultiLevelType struct {

	// Abstract Numbering Definition Type
	ValAttr ST_MultiLevelType
}

func (_dgagd ST_MailMergeDocType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dgagd.String(), start)
}

type WdCT_PosV struct {
	RelativeFromAttr WdST_RelFromV
	Choice           *WdCT_PosVChoice
}

func (_fbfabc ST_Underline) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fbfabc.String(), start)
}

// Validate validates the CT_Endnotes and its children
func (_beadd *CT_Endnotes) Validate() error { return _beadd.ValidateWithPath("CT_Endnotes") }

type CT_DocumentBase struct {

	// Document Background
	Background *CT_Background
}

func NewCT_RubyContent() *CT_RubyContent { _bedae := &CT_RubyContent{}; return _bedae }
func (_acdbbg ST_LevelSuffix) String() string {
	switch _acdbbg {
	case 0:
		return ""
	case 1:
		return "tab"
	case 2:
		return "space"
	case 3:
		return "nothing"
	}
	return ""
}
func (_fagfd *EG_CellMarkupElements) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ddgded:
	for {
		_bcfdc, _ebdagc := d.Token()
		if _ebdagc != nil {
			return _ebdagc
		}
		switch _agaabg := _bcfdc.(type) {
		case _d.StartElement:
			switch _agaabg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellIns"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellIns"}:
				_fagfd.CellIns = NewCT_TrackChange()
				if _aadfg := d.DecodeElement(_fagfd.CellIns, &_agaabg); _aadfg != nil {
					return _aadfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellDel"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellDel"}:
				_fagfd.CellDel = NewCT_TrackChange()
				if _gcace := d.DecodeElement(_fagfd.CellDel, &_agaabg); _gcace != nil {
					return _gcace
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cellMerge"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cellMerge"}:
				_fagfd.CellMerge = NewCT_CellMergeTrackChange()
				if _dgedce := d.DecodeElement(_fagfd.CellMerge, &_agaabg); _dgedce != nil {
					return _dgedce
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on EG_CellMarkupElements\u0020\u0025v", _agaabg.Name)
				if _dbeabd := d.Skip(); _dbeabd != nil {
					return _dbeabd
				}
			}
		case _d.EndElement:
			break _ddgded
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Compat and its children, prefixing error messages with path
func (_bdab *CT_Compat) ValidateWithPath(path string) error {
	if _bdab.UseSingleBorderforContiguousCells != nil {
		if _cgdd := _bdab.UseSingleBorderforContiguousCells.ValidateWithPath(path + "\u002fUseSingleBorderforContiguousCells"); _cgdd != nil {
			return _cgdd
		}
	}
	if _bdab.WpJustification != nil {
		if _adfb := _bdab.WpJustification.ValidateWithPath(path + "\u002fWpJustification"); _adfb != nil {
			return _adfb
		}
	}
	if _bdab.NoTabHangInd != nil {
		if _aegg := _bdab.NoTabHangInd.ValidateWithPath(path + "\u002fNoTabHangInd"); _aegg != nil {
			return _aegg
		}
	}
	if _bdab.NoLeading != nil {
		if _eada := _bdab.NoLeading.ValidateWithPath(path + "\u002fNoLeading"); _eada != nil {
			return _eada
		}
	}
	if _bdab.SpaceForUL != nil {
		if _cfagd := _bdab.SpaceForUL.ValidateWithPath(path + "/SpaceForUL"); _cfagd != nil {
			return _cfagd
		}
	}
	if _bdab.NoColumnBalance != nil {
		if _abgfe := _bdab.NoColumnBalance.ValidateWithPath(path + "\u002fNoColumnBalance"); _abgfe != nil {
			return _abgfe
		}
	}
	if _bdab.BalanceSingleByteDoubleByteWidth != nil {
		if _cfdb := _bdab.BalanceSingleByteDoubleByteWidth.ValidateWithPath(path + "\u002fBalanceSingleByteDoubleByteWidth"); _cfdb != nil {
			return _cfdb
		}
	}
	if _bdab.NoExtraLineSpacing != nil {
		if _bbfc := _bdab.NoExtraLineSpacing.ValidateWithPath(path + "\u002fNoExtraLineSpacing"); _bbfc != nil {
			return _bbfc
		}
	}
	if _bdab.DoNotLeaveBackslashAlone != nil {
		if _fabb := _bdab.DoNotLeaveBackslashAlone.ValidateWithPath(path + "\u002fDoNotLeaveBackslashAlone"); _fabb != nil {
			return _fabb
		}
	}
	if _bdab.UlTrailSpace != nil {
		if _cddd := _bdab.UlTrailSpace.ValidateWithPath(path + "\u002fUlTrailSpace"); _cddd != nil {
			return _cddd
		}
	}
	if _bdab.DoNotExpandShiftReturn != nil {
		if _dgeb := _bdab.DoNotExpandShiftReturn.ValidateWithPath(path + "\u002fDoNotExpandShiftReturn"); _dgeb != nil {
			return _dgeb
		}
	}
	if _bdab.SpacingInWholePoints != nil {
		if _eecd := _bdab.SpacingInWholePoints.ValidateWithPath(path + "/SpacingInWholePoints"); _eecd != nil {
			return _eecd
		}
	}
	if _bdab.LineWrapLikeWord6 != nil {
		if _dfeag := _bdab.LineWrapLikeWord6.ValidateWithPath(path + "\u002fLineWrapLikeWord6"); _dfeag != nil {
			return _dfeag
		}
	}
	if _bdab.PrintBodyTextBeforeHeader != nil {
		if _aecbb := _bdab.PrintBodyTextBeforeHeader.ValidateWithPath(path + "\u002fPrintBodyTextBeforeHeader"); _aecbb != nil {
			return _aecbb
		}
	}
	if _bdab.PrintColBlack != nil {
		if _acea := _bdab.PrintColBlack.ValidateWithPath(path + "\u002fPrintColBlack"); _acea != nil {
			return _acea
		}
	}
	if _bdab.WpSpaceWidth != nil {
		if _abcd := _bdab.WpSpaceWidth.ValidateWithPath(path + "\u002fWpSpaceWidth"); _abcd != nil {
			return _abcd
		}
	}
	if _bdab.ShowBreaksInFrames != nil {
		if _bbac := _bdab.ShowBreaksInFrames.ValidateWithPath(path + "\u002fShowBreaksInFrames"); _bbac != nil {
			return _bbac
		}
	}
	if _bdab.SubFontBySize != nil {
		if _ebce := _bdab.SubFontBySize.ValidateWithPath(path + "\u002fSubFontBySize"); _ebce != nil {
			return _ebce
		}
	}
	if _bdab.SuppressBottomSpacing != nil {
		if _cadd := _bdab.SuppressBottomSpacing.ValidateWithPath(path + "\u002fSuppressBottomSpacing"); _cadd != nil {
			return _cadd
		}
	}
	if _bdab.SuppressTopSpacing != nil {
		if _fggce := _bdab.SuppressTopSpacing.ValidateWithPath(path + "\u002fSuppressTopSpacing"); _fggce != nil {
			return _fggce
		}
	}
	if _bdab.SuppressSpacingAtTopOfPage != nil {
		if _abbed := _bdab.SuppressSpacingAtTopOfPage.ValidateWithPath(path + "/SuppressSpacingAtTopOfPage"); _abbed != nil {
			return _abbed
		}
	}
	if _bdab.SuppressTopSpacingWP != nil {
		if _afefa := _bdab.SuppressTopSpacingWP.ValidateWithPath(path + "/SuppressTopSpacingWP"); _afefa != nil {
			return _afefa
		}
	}
	if _bdab.SuppressSpBfAfterPgBrk != nil {
		if _aged := _bdab.SuppressSpBfAfterPgBrk.ValidateWithPath(path + "\u002fSuppressSpBfAfterPgBrk"); _aged != nil {
			return _aged
		}
	}
	if _bdab.SwapBordersFacingPages != nil {
		if _dbbb := _bdab.SwapBordersFacingPages.ValidateWithPath(path + "\u002fSwapBordersFacingPages"); _dbbb != nil {
			return _dbbb
		}
	}
	if _bdab.ConvMailMergeEsc != nil {
		if _eafef := _bdab.ConvMailMergeEsc.ValidateWithPath(path + "\u002fConvMailMergeEsc"); _eafef != nil {
			return _eafef
		}
	}
	if _bdab.TruncateFontHeightsLikeWP6 != nil {
		if _cfbgd := _bdab.TruncateFontHeightsLikeWP6.ValidateWithPath(path + "/TruncateFontHeightsLikeWP6"); _cfbgd != nil {
			return _cfbgd
		}
	}
	if _bdab.MwSmallCaps != nil {
		if _cbagg := _bdab.MwSmallCaps.ValidateWithPath(path + "\u002fMwSmallCaps"); _cbagg != nil {
			return _cbagg
		}
	}
	if _bdab.UsePrinterMetrics != nil {
		if _cbfg := _bdab.UsePrinterMetrics.ValidateWithPath(path + "\u002fUsePrinterMetrics"); _cbfg != nil {
			return _cbfg
		}
	}
	if _bdab.DoNotSuppressParagraphBorders != nil {
		if _dadg := _bdab.DoNotSuppressParagraphBorders.ValidateWithPath(path + "\u002fDoNotSuppressParagraphBorders"); _dadg != nil {
			return _dadg
		}
	}
	if _bdab.WrapTrailSpaces != nil {
		if _ageb := _bdab.WrapTrailSpaces.ValidateWithPath(path + "\u002fWrapTrailSpaces"); _ageb != nil {
			return _ageb
		}
	}
	if _bdab.FootnoteLayoutLikeWW8 != nil {
		if _gagb := _bdab.FootnoteLayoutLikeWW8.ValidateWithPath(path + "\u002fFootnoteLayoutLikeWW8"); _gagb != nil {
			return _gagb
		}
	}
	if _bdab.ShapeLayoutLikeWW8 != nil {
		if _ggdg := _bdab.ShapeLayoutLikeWW8.ValidateWithPath(path + "\u002fShapeLayoutLikeWW8"); _ggdg != nil {
			return _ggdg
		}
	}
	if _bdab.AlignTablesRowByRow != nil {
		if _fag := _bdab.AlignTablesRowByRow.ValidateWithPath(path + "/AlignTablesRowByRow"); _fag != nil {
			return _fag
		}
	}
	if _bdab.ForgetLastTabAlignment != nil {
		if _dadd := _bdab.ForgetLastTabAlignment.ValidateWithPath(path + "\u002fForgetLastTabAlignment"); _dadd != nil {
			return _dadd
		}
	}
	if _bdab.AdjustLineHeightInTable != nil {
		if _afbb := _bdab.AdjustLineHeightInTable.ValidateWithPath(path + "\u002fAdjustLineHeightInTable"); _afbb != nil {
			return _afbb
		}
	}
	if _bdab.AutoSpaceLikeWord95 != nil {
		if _cded := _bdab.AutoSpaceLikeWord95.ValidateWithPath(path + "/AutoSpaceLikeWord95"); _cded != nil {
			return _cded
		}
	}
	if _bdab.NoSpaceRaiseLower != nil {
		if _adda := _bdab.NoSpaceRaiseLower.ValidateWithPath(path + "\u002fNoSpaceRaiseLower"); _adda != nil {
			return _adda
		}
	}
	if _bdab.DoNotUseHTMLParagraphAutoSpacing != nil {
		if _adde := _bdab.DoNotUseHTMLParagraphAutoSpacing.ValidateWithPath(path + "\u002fDoNotUseHTMLParagraphAutoSpacing"); _adde != nil {
			return _adde
		}
	}
	if _bdab.LayoutRawTableWidth != nil {
		if _fgbe := _bdab.LayoutRawTableWidth.ValidateWithPath(path + "/LayoutRawTableWidth"); _fgbe != nil {
			return _fgbe
		}
	}
	if _bdab.LayoutTableRowsApart != nil {
		if _fdafb := _bdab.LayoutTableRowsApart.ValidateWithPath(path + "/LayoutTableRowsApart"); _fdafb != nil {
			return _fdafb
		}
	}
	if _bdab.UseWord97LineBreakRules != nil {
		if _fdbf := _bdab.UseWord97LineBreakRules.ValidateWithPath(path + "\u002fUseWord97LineBreakRules"); _fdbf != nil {
			return _fdbf
		}
	}
	if _bdab.DoNotBreakWrappedTables != nil {
		if _cedc := _bdab.DoNotBreakWrappedTables.ValidateWithPath(path + "\u002fDoNotBreakWrappedTables"); _cedc != nil {
			return _cedc
		}
	}
	if _bdab.DoNotSnapToGridInCell != nil {
		if _fage := _bdab.DoNotSnapToGridInCell.ValidateWithPath(path + "\u002fDoNotSnapToGridInCell"); _fage != nil {
			return _fage
		}
	}
	if _bdab.SelectFldWithFirstOrLastChar != nil {
		if _cgggf := _bdab.SelectFldWithFirstOrLastChar.ValidateWithPath(path + "\u002fSelectFldWithFirstOrLastChar"); _cgggf != nil {
			return _cgggf
		}
	}
	if _bdab.ApplyBreakingRules != nil {
		if _abcdb := _bdab.ApplyBreakingRules.ValidateWithPath(path + "\u002fApplyBreakingRules"); _abcdb != nil {
			return _abcdb
		}
	}
	if _bdab.DoNotWrapTextWithPunct != nil {
		if _dccac := _bdab.DoNotWrapTextWithPunct.ValidateWithPath(path + "\u002fDoNotWrapTextWithPunct"); _dccac != nil {
			return _dccac
		}
	}
	if _bdab.DoNotUseEastAsianBreakRules != nil {
		if _afeb := _bdab.DoNotUseEastAsianBreakRules.ValidateWithPath(path + "\u002fDoNotUseEastAsianBreakRules"); _afeb != nil {
			return _afeb
		}
	}
	if _bdab.UseWord2002TableStyleRules != nil {
		if _dbf := _bdab.UseWord2002TableStyleRules.ValidateWithPath(path + "/UseWord2002TableStyleRules"); _dbf != nil {
			return _dbf
		}
	}
	if _bdab.GrowAutofit != nil {
		if _edfa := _bdab.GrowAutofit.ValidateWithPath(path + "\u002fGrowAutofit"); _edfa != nil {
			return _edfa
		}
	}
	if _bdab.UseFELayout != nil {
		if _gdfg := _bdab.UseFELayout.ValidateWithPath(path + "\u002fUseFELayout"); _gdfg != nil {
			return _gdfg
		}
	}
	if _bdab.UseNormalStyleForList != nil {
		if _cbddg := _bdab.UseNormalStyleForList.ValidateWithPath(path + "\u002fUseNormalStyleForList"); _cbddg != nil {
			return _cbddg
		}
	}
	if _bdab.DoNotUseIndentAsNumberingTabStop != nil {
		if _efed := _bdab.DoNotUseIndentAsNumberingTabStop.ValidateWithPath(path + "\u002fDoNotUseIndentAsNumberingTabStop"); _efed != nil {
			return _efed
		}
	}
	if _bdab.UseAltKinsokuLineBreakRules != nil {
		if _cggdc := _bdab.UseAltKinsokuLineBreakRules.ValidateWithPath(path + "\u002fUseAltKinsokuLineBreakRules"); _cggdc != nil {
			return _cggdc
		}
	}
	if _bdab.AllowSpaceOfSameStyleInTable != nil {
		if _gfbf := _bdab.AllowSpaceOfSameStyleInTable.ValidateWithPath(path + "\u002fAllowSpaceOfSameStyleInTable"); _gfbf != nil {
			return _gfbf
		}
	}
	if _bdab.DoNotSuppressIndentation != nil {
		if _fgba := _bdab.DoNotSuppressIndentation.ValidateWithPath(path + "\u002fDoNotSuppressIndentation"); _fgba != nil {
			return _fgba
		}
	}
	if _bdab.DoNotAutofitConstrainedTables != nil {
		if _gega := _bdab.DoNotAutofitConstrainedTables.ValidateWithPath(path + "\u002fDoNotAutofitConstrainedTables"); _gega != nil {
			return _gega
		}
	}
	if _bdab.AutofitToFirstFixedWidthCell != nil {
		if _aebea := _bdab.AutofitToFirstFixedWidthCell.ValidateWithPath(path + "\u002fAutofitToFirstFixedWidthCell"); _aebea != nil {
			return _aebea
		}
	}
	if _bdab.UnderlineTabInNumList != nil {
		if _abbd := _bdab.UnderlineTabInNumList.ValidateWithPath(path + "\u002fUnderlineTabInNumList"); _abbd != nil {
			return _abbd
		}
	}
	if _bdab.DisplayHangulFixedWidth != nil {
		if _aadd := _bdab.DisplayHangulFixedWidth.ValidateWithPath(path + "\u002fDisplayHangulFixedWidth"); _aadd != nil {
			return _aadd
		}
	}
	if _bdab.SplitPgBreakAndParaMark != nil {
		if _ddec := _bdab.SplitPgBreakAndParaMark.ValidateWithPath(path + "\u002fSplitPgBreakAndParaMark"); _ddec != nil {
			return _ddec
		}
	}
	if _bdab.DoNotVertAlignCellWithSp != nil {
		if _dabc := _bdab.DoNotVertAlignCellWithSp.ValidateWithPath(path + "\u002fDoNotVertAlignCellWithSp"); _dabc != nil {
			return _dabc
		}
	}
	if _bdab.DoNotBreakConstrainedForcedTable != nil {
		if _agca := _bdab.DoNotBreakConstrainedForcedTable.ValidateWithPath(path + "\u002fDoNotBreakConstrainedForcedTable"); _agca != nil {
			return _agca
		}
	}
	if _bdab.DoNotVertAlignInTxbx != nil {
		if _degc := _bdab.DoNotVertAlignInTxbx.ValidateWithPath(path + "/DoNotVertAlignInTxbx"); _degc != nil {
			return _degc
		}
	}
	if _bdab.UseAnsiKerningPairs != nil {
		if _fecb := _bdab.UseAnsiKerningPairs.ValidateWithPath(path + "/UseAnsiKerningPairs"); _fecb != nil {
			return _fecb
		}
	}
	if _bdab.CachedColBalance != nil {
		if _dbee := _bdab.CachedColBalance.ValidateWithPath(path + "\u002fCachedColBalance"); _dbee != nil {
			return _dbee
		}
	}
	for _bdfbd, _fcfb := range _bdab.CompatSetting {
		if _cfdc := _fcfb.ValidateWithPath(_b.Sprintf("%s/CompatSetting[%d\u005d", path, _bdfbd)); _cfdc != nil {
			return _cfdc
		}
	}
	return nil
}
func NewCT_FFStatusText() *CT_FFStatusText { _eedbg := &CT_FFStatusText{}; return _eedbg }
func (_baaedc ST_MailMergeDocType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_aaaacb := _d.Attr{}
	_aaaacb.Name = name
	switch _baaedc {
	case ST_MailMergeDocTypeUnset:
		_aaaacb.Value = ""
	case ST_MailMergeDocTypeCatalog:
		_aaaacb.Value = "catalog"
	case ST_MailMergeDocTypeEnvelopes:
		_aaaacb.Value = "envelopes"
	case ST_MailMergeDocTypeMailingLabels:
		_aaaacb.Value = "mailingLabels"
	case ST_MailMergeDocTypeFormLetters:
		_aaaacb.Value = "formLetters"
	case ST_MailMergeDocTypeEmail:
		_aaaacb.Value = "email"
	case ST_MailMergeDocTypeFax:
		_aaaacb.Value = "fax"
	}
	return _aaaacb, nil
}
func (_fbfdbc *CT_TextboxTightWrap) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_fcdcdfe, _fdgdd := _fbfdbc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _fdgdd != nil {
		return _fdgdd
	}
	start.Attr = append(start.Attr, _fcdcdfe)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_HintUnset    ST_Hint = 0
	ST_HintDefault  ST_Hint = 1
	ST_HintEastAsia ST_Hint = 2
)

func (_edcfb ST_FFTextType) String() string {
	switch _edcfb {
	case 0:
		return ""
	case 1:
		return "regular"
	case 2:
		return "number"
	case 3:
		return "date"
	case 4:
		return "currentTime"
	case 5:
		return "currentDate"
	case 6:
		return "calculated"
	}
	return ""
}
func (_fcf *CT_Body) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fcf.EG_BlockLevelElts != nil {
		for _, _eegge := range _fcf.EG_BlockLevelElts {
			_eegge.MarshalXML(e, _d.StartElement{})
		}
	}
	if _fcf.SectPr != nil {
		_bcdc := _d.StartElement{Name: _d.Name{Local: "w:sectPr"}}
		e.EncodeElement(_fcf.SectPr, _bcdc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_EdGrp byte

func (_gf *AG_SectPrAttributes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gf.RsidRPrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidRPr"}, Value: _b.Sprintf("\u0025v", *_gf.RsidRPrAttr)})
	}
	if _gf.RsidDelAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidDel"}, Value: _b.Sprintf("\u0025v", *_gf.RsidDelAttr)})
	}
	if _gf.RsidRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidR"}, Value: _b.Sprintf("\u0025v", *_gf.RsidRAttr)})
	}
	if _gf.RsidSectAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:rsidSect"}, Value: _b.Sprintf("\u0025v", *_gf.RsidSectAttr)})
	}
	return nil
}
func (_fdbgd *CT_Hyperlink) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fdbgd.TgtFrameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:tgtFrame"}, Value: _b.Sprintf("\u0025v", *_fdbgd.TgtFrameAttr)})
	}
	if _fdbgd.TooltipAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:tooltip"}, Value: _b.Sprintf("\u0025v", *_fdbgd.TooltipAttr)})
	}
	if _fdbgd.DocLocationAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:docLocation"}, Value: _b.Sprintf("\u0025v", *_fdbgd.DocLocationAttr)})
	}
	if _fdbgd.HistoryAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:history"}, Value: _b.Sprintf("\u0025v", *_fdbgd.HistoryAttr)})
	}
	if _fdbgd.AnchorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:anchor"}, Value: _b.Sprintf("\u0025v", *_fdbgd.AnchorAttr)})
	}
	if _fdbgd.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", *_fdbgd.IdAttr)})
	}
	e.EncodeToken(start)
	if _fdbgd.FldSimple != nil {
		_edbea := _d.StartElement{Name: _d.Name{Local: "w:fldSimple"}}
		for _, _acccc := range _fdbgd.FldSimple {
			e.EncodeElement(_acccc, _edbea)
		}
	}
	if _fdbgd.Hyperlink != nil {
		_gbcaf := _d.StartElement{Name: _d.Name{Local: "w:hyperlink"}}
		e.EncodeElement(_fdbgd.Hyperlink, _gbcaf)
	}
	if _fdbgd.SubDoc != nil {
		_eabac := _d.StartElement{Name: _d.Name{Local: "w:subDoc"}}
		e.EncodeElement(_fdbgd.SubDoc, _eabac)
	}
	if _fdbgd.EG_ContentRunContent != nil {
		for _, _gabgc := range _fdbgd.EG_ContentRunContent {
			_gabgc.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Headers and its children
func (_gdbgc *CT_Headers) Validate() error { return _gdbgc.ValidateWithPath("CT_Headers") }
func (_ddbfb *CT_TopPageBorder) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ddbfb.TopLeftAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:topLeft"}, Value: _b.Sprintf("\u0025v", *_ddbfb.TopLeftAttr)})
	}
	if _ddbfb.TopRightAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:topRight"}, Value: _b.Sprintf("\u0025v", *_ddbfb.TopRightAttr)})
	}
	if _ddbfb.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "r:id"}, Value: _b.Sprintf("\u0025v", *_ddbfb.IdAttr)})
	}
	_gaacd, _ebfaf := _ddbfb.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _ebfaf != nil {
		return _ebfaf
	}
	start.Attr = append(start.Attr, _gaacd)
	if _ddbfb.ColorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:color"}, Value: _b.Sprintf("\u0025v", *_ddbfb.ColorAttr)})
	}
	if _ddbfb.ThemeColorAttr != ST_ThemeColorUnset {
		_cadabf, _cdfadd := _ddbfb.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _cdfadd != nil {
			return _cdfadd
		}
		start.Attr = append(start.Attr, _cadabf)
	}
	if _ddbfb.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_ddbfb.ThemeTintAttr)})
	}
	if _ddbfb.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_ddbfb.ThemeShadeAttr)})
	}
	if _ddbfb.SzAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:sz"}, Value: _b.Sprintf("\u0025v", *_ddbfb.SzAttr)})
	}
	if _ddbfb.SpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:space"}, Value: _b.Sprintf("\u0025v", *_ddbfb.SpaceAttr)})
	}
	if _ddbfb.ShadowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:shadow"}, Value: _b.Sprintf("\u0025v", *_ddbfb.ShadowAttr)})
	}
	if _ddbfb.FrameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:frame"}, Value: _b.Sprintf("\u0025v", *_ddbfb.FrameAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_eaaeg *CT_MailMergeDataType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _aecaf := range start.Attr {
		if _aecaf.Name.Local == "val" {
			_fbadf, _dfcb := _aecaf.Value, error(nil)
			if _dfcb != nil {
				return _dfcb
			}
			_eaaeg.ValAttr = _fbadf
			continue
		}
	}
	for {
		_gecfa, _cgafg := d.Token()
		if _cgafg != nil {
			return _b.Errorf("parsing\u0020CT_MailMergeDataType:\u0020\u0025s", _cgafg)
		}
		if _agfgd, _gfbgb := _gecfa.(_d.EndElement); _gfbgb && _agfgd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_defbf *CT_FFCheckBoxChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gafge:
	for {
		_abea, _ccgg := d.Token()
		if _ccgg != nil {
			return _ccgg
		}
		switch _fbfgbc := _abea.(type) {
		case _d.StartElement:
			switch _fbfgbc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "size"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "size"}:
				_defbf.Size = NewCT_HpsMeasure()
				if _bccg := d.DecodeElement(_defbf.Size, &_fbfgbc); _bccg != nil {
					return _bccg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sizeAuto"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sizeAuto"}:
				_defbf.SizeAuto = NewCT_OnOff()
				if _dcggd := d.DecodeElement(_defbf.SizeAuto, &_fbfgbc); _dcggd != nil {
					return _dcggd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_FFCheckBoxChoice\u0020\u0025v", _fbfgbc.Name)
				if _cedbd := d.Skip(); _cedbd != nil {
					return _cedbd
				}
			}
		case _d.EndElement:
			break _gafge
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the WebSettings and its children
func (_ebefdc *WebSettings) Validate() error { return _ebefdc.ValidateWithPath("WebSettings") }

type ST_RubyAlign byte
type EG_RPrBase struct {

	// Referenced Character Style
	RStyle *CT_String

	// Run Fonts
	RFonts *CT_Fonts

	// Bold
	B *CT_OnOff

	// Complex Script Bold
	BCs *CT_OnOff

	// Italics
	I *CT_OnOff

	// Complex Script Italics
	ICs *CT_OnOff

	// Display All Characters As Capital Letters
	Caps *CT_OnOff

	// Small Caps
	SmallCaps *CT_OnOff

	// Single Strikethrough
	Strike *CT_OnOff

	// Double Strikethrough
	Dstrike *CT_OnOff

	// Display Character Outline
	Outline *CT_OnOff

	// Shadow
	Shadow *CT_OnOff

	// Embossing
	Emboss *CT_OnOff

	// Imprinting
	Imprint *CT_OnOff

	// Do Not Check Spelling or Grammar
	NoProof *CT_OnOff

	// Use Document Grid Settings For Inter-Character Spacing
	SnapToGrid *CT_OnOff

	// Hidden Text
	Vanish *CT_OnOff

	// Web Hidden Text
	WebHidden *CT_OnOff

	// Run Content Color
	Color *CT_Color

	// Character Spacing Adjustment
	Spacing *CT_SignedTwipsMeasure

	// Expanded/Compressed Text
	W *CT_TextScale

	// Font Kerning
	Kern *CT_HpsMeasure

	// Vertically Raised or Lowered Text
	Position *CT_SignedHpsMeasure

	// Non-Complex Script Font Size
	Sz *CT_HpsMeasure

	// Complex Script Font Size
	SzCs *CT_HpsMeasure

	// Text Highlighting
	Highlight *CT_Highlight

	// Underline
	U *CT_Underline

	// Animated Text Effect
	Effect *CT_TextEffect

	// Text Border
	Bdr *CT_Border

	// Run Shading
	Shd *CT_Shd

	// Manual Run Width
	FitText *CT_FitText

	// Subscript/Superscript Text
	VertAlign *CT_VerticalAlignRun

	// Right To Left Text
	Rtl *CT_OnOff

	// Use Complex Script Formatting on Run
	Cs *CT_OnOff

	// Emphasis Mark
	Em *CT_Em

	// Languages for Run Content
	Lang *CT_Language

	// East Asian Typography Settings
	EastAsianLayout *CT_EastAsianLayout

	// Paragraph Mark Is Always Hidden
	SpecVanish *CT_OnOff

	// Office Open XML Math
	OMath *CT_OnOff
}

func NewCT_DocPartCategory() *CT_DocPartCategory {
	_agcbg := &CT_DocPartCategory{}
	_agcbg.Name = NewCT_String()
	_agcbg.Gallery = NewCT_DocPartGallery()
	return _agcbg
}
func (_ecadf *CT_PermStart) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dbfae := range start.Attr {
		if _dbfae.Name.Local == "edGrp" {
			_ecadf.EdGrpAttr.UnmarshalXMLAttr(_dbfae)
			continue
		}
		if _dbfae.Name.Local == "ed" {
			_fbbfbf, _ebdea := _dbfae.Value, error(nil)
			if _ebdea != nil {
				return _ebdea
			}
			_ecadf.EdAttr = &_fbbfbf
			continue
		}
		if _dbfae.Name.Local == "colFirst" {
			_edfc, _bffffb := _dd.ParseInt(_dbfae.Value, 10, 64)
			if _bffffb != nil {
				return _bffffb
			}
			_ecadf.ColFirstAttr = &_edfc
			continue
		}
		if _dbfae.Name.Local == "colLast" {
			_dfba, _bbcge := _dd.ParseInt(_dbfae.Value, 10, 64)
			if _bbcge != nil {
				return _bbcge
			}
			_ecadf.ColLastAttr = &_dfba
			continue
		}
		if _dbfae.Name.Local == "id" {
			_gbfdb, _fccgfb := _dbfae.Value, error(nil)
			if _fccgfb != nil {
				return _fccgfb
			}
			_ecadf.IdAttr = _gbfdb
			continue
		}
		if _dbfae.Name.Local == "displacedByCustomXml" {
			_ecadf.DisplacedByCustomXmlAttr.UnmarshalXMLAttr(_dbfae)
			continue
		}
	}
	for {
		_gffebb, _ecacbc := d.Token()
		if _ecacbc != nil {
			return _b.Errorf("parsing\u0020CT_PermStart:\u0020\u0025s", _ecacbc)
		}
		if _dege, _efbfa := _gffebb.(_d.EndElement); _efbfa && _dege.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PermStart and its children
func (_ccfddd *CT_PermStart) Validate() error { return _ccfddd.ValidateWithPath("CT_PermStart") }
func (_bedecf ST_PTabRelativeTo) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cgabd := _d.Attr{}
	_cgabd.Name = name
	switch _bedecf {
	case ST_PTabRelativeToUnset:
		_cgabd.Value = ""
	case ST_PTabRelativeToMargin:
		_cgabd.Value = "margin"
	case ST_PTabRelativeToIndent:
		_cgabd.Value = "indent"
	}
	return _cgabd, nil
}

// Validate validates the CT_BdoContentRun and its children
func (_bbeg *CT_BdoContentRun) Validate() error { return _bbeg.ValidateWithPath("CT_BdoContentRun") }

type CT_Frameset struct {

	// Nested Frameset Size
	Sz *CT_String

	// Frameset Splitter Properties
	FramesetSplitbar *CT_FramesetSplitbar

	// Frameset Layout
	FrameLayout *CT_FrameLayout
	Title       *CT_String
	Choice      []*CT_FramesetChoice
}

func (_dgbbfd ST_HighlightColor) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dgbbfd.String(), start)
}

// Validate validates the CT_SdtRow and its children
func (_bbgeb *CT_SdtRow) Validate() error { return _bbgeb.ValidateWithPath("CT_SdtRow") }

type ST_HAnchor byte
type CT_CustomXmlRun struct {

	// Custom XML Markup Namespace
	UriAttr *string

	// Element name
	ElementAttr string

	// Custom XML Element Properties
	CustomXmlPr *CT_CustomXmlPr
	EG_PContent []*EG_PContent
}

func NewCT_AltChunkPr() *CT_AltChunkPr { _fff := &CT_AltChunkPr{}; return _fff }
func (_gecgeg ST_TargetScreenSz) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_ebcadd := _d.Attr{}
	_ebcadd.Name = name
	switch _gecgeg {
	case ST_TargetScreenSzUnset:
		_ebcadd.Value = ""
	case ST_TargetScreenSz544x376:
		_ebcadd.Value = "544x376"
	case ST_TargetScreenSz640x480:
		_ebcadd.Value = "640x480"
	case ST_TargetScreenSz720x512:
		_ebcadd.Value = "720x512"
	case ST_TargetScreenSz800x600:
		_ebcadd.Value = "800x600"
	case ST_TargetScreenSz1024x768:
		_ebcadd.Value = "1024x768"
	case ST_TargetScreenSz1152x882:
		_ebcadd.Value = "1152x882"
	case ST_TargetScreenSz1152x900:
		_ebcadd.Value = "1152x900"
	case ST_TargetScreenSz1280x1024:
		_ebcadd.Value = "1280x1024"
	case ST_TargetScreenSz1600x1200:
		_ebcadd.Value = "1600x1200"
	case ST_TargetScreenSz1800x1440:
		_ebcadd.Value = "1800x1440"
	case ST_TargetScreenSz1920x1200:
		_ebcadd.Value = "1920x1200"
	}
	return _ebcadd, nil
}
func (_adbfcc ST_VAnchor) Validate() error { return _adbfcc.ValidateWithPath("") }

// ValidateWithPath validates the CT_TblGridCol and its children, prefixing error messages with path
func (_gfgbe *CT_TblGridCol) ValidateWithPath(path string) error {
	if _gfgbe.WAttr != nil {
		if _afgaa := _gfgbe.WAttr.ValidateWithPath(path + "\u002fWAttr"); _afgaa != nil {
			return _afgaa
		}
	}
	return nil
}

// Validate validates the CT_AltChunk and its children
func (_cdaa *CT_AltChunk) Validate() error { return _cdaa.ValidateWithPath("CT_AltChunk") }
func (_dcebg *EG_RunInnerContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gedef:
	for {
		_cadgga, _cbegbg := d.Token()
		if _cbegbg != nil {
			return _cbegbg
		}
		switch _fedbfd := _cadgga.(type) {
		case _d.StartElement:
			switch _fedbfd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "br"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "br"}:
				_dcebg.Br = NewCT_Br()
				if _cedad := d.DecodeElement(_dcebg.Br, &_fedbfd); _cedad != nil {
					return _cedad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "t"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "t"}:
				_dcebg.T = NewCT_Text()
				if _cfdac := d.DecodeElement(_dcebg.T, &_fedbfd); _cfdac != nil {
					return _cfdac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "contentPart"}:
				_dcebg.ContentPart = NewCT_Rel()
				if _geeddd := d.DecodeElement(_dcebg.ContentPart, &_fedbfd); _geeddd != nil {
					return _geeddd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "delText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "delText"}:
				_dcebg.DelText = NewCT_Text()
				if _cbgabb := d.DecodeElement(_dcebg.DelText, &_fedbfd); _cbgabb != nil {
					return _cbgabb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "instrText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "instrText"}:
				_dcebg.InstrText = NewCT_Text()
				if _ddgca := d.DecodeElement(_dcebg.InstrText, &_fedbfd); _ddgca != nil {
					return _ddgca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "delInstrText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "delInstrText"}:
				_dcebg.DelInstrText = NewCT_Text()
				if _ecccgc := d.DecodeElement(_dcebg.DelInstrText, &_fedbfd); _ecccgc != nil {
					return _ecccgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noBreakHyphen"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noBreakHyphen"}:
				_dcebg.NoBreakHyphen = NewCT_Empty()
				if _gabcd := d.DecodeElement(_dcebg.NoBreakHyphen, &_fedbfd); _gabcd != nil {
					return _gabcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "softHyphen"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "softHyphen"}:
				_dcebg.SoftHyphen = NewCT_Empty()
				if _gaaca := d.DecodeElement(_dcebg.SoftHyphen, &_fedbfd); _gaaca != nil {
					return _gaaca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dayShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dayShort"}:
				_dcebg.DayShort = NewCT_Empty()
				if _bbfab := d.DecodeElement(_dcebg.DayShort, &_fedbfd); _bbfab != nil {
					return _bbfab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "monthShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "monthShort"}:
				_dcebg.MonthShort = NewCT_Empty()
				if _deaagg := d.DecodeElement(_dcebg.MonthShort, &_fedbfd); _deaagg != nil {
					return _deaagg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "yearShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "yearShort"}:
				_dcebg.YearShort = NewCT_Empty()
				if _fffgd := d.DecodeElement(_dcebg.YearShort, &_fedbfd); _fffgd != nil {
					return _fffgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dayLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dayLong"}:
				_dcebg.DayLong = NewCT_Empty()
				if _ggfgcb := d.DecodeElement(_dcebg.DayLong, &_fedbfd); _ggfgcb != nil {
					return _ggfgcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "monthLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "monthLong"}:
				_dcebg.MonthLong = NewCT_Empty()
				if _ecdec := d.DecodeElement(_dcebg.MonthLong, &_fedbfd); _ecdec != nil {
					return _ecdec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "yearLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "yearLong"}:
				_dcebg.YearLong = NewCT_Empty()
				if _afdecd := d.DecodeElement(_dcebg.YearLong, &_fedbfd); _afdecd != nil {
					return _afdecd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "annotationRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "annotationRef"}:
				_dcebg.AnnotationRef = NewCT_Empty()
				if _ggdbf := d.DecodeElement(_dcebg.AnnotationRef, &_fedbfd); _ggdbf != nil {
					return _ggdbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnoteRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnoteRef"}:
				_dcebg.FootnoteRef = NewCT_Empty()
				if _ccddfg := d.DecodeElement(_dcebg.FootnoteRef, &_fedbfd); _ccddfg != nil {
					return _ccddfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnoteRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnoteRef"}:
				_dcebg.EndnoteRef = NewCT_Empty()
				if _cecec := d.DecodeElement(_dcebg.EndnoteRef, &_fedbfd); _cecec != nil {
					return _cecec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "separator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "separator"}:
				_dcebg.Separator = NewCT_Empty()
				if _fdbcc := d.DecodeElement(_dcebg.Separator, &_fedbfd); _fdbcc != nil {
					return _fdbcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "continuationSeparator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "continuationSeparator"}:
				_dcebg.ContinuationSeparator = NewCT_Empty()
				if _cffffa := d.DecodeElement(_dcebg.ContinuationSeparator, &_fedbfd); _cffffa != nil {
					return _cffffa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sym"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sym"}:
				_dcebg.Sym = NewCT_Sym()
				if _gebbfd := d.DecodeElement(_dcebg.Sym, &_fedbfd); _gebbfd != nil {
					return _gebbfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgNum"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgNum"}:
				_dcebg.PgNum = NewCT_Empty()
				if _bfdfa := d.DecodeElement(_dcebg.PgNum, &_fedbfd); _bfdfa != nil {
					return _bfdfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cr"}:
				_dcebg.Cr = NewCT_Empty()
				if _gagfd := d.DecodeElement(_dcebg.Cr, &_fedbfd); _gagfd != nil {
					return _gagfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tab"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tab"}:
				_dcebg.Tab = NewCT_Empty()
				if _dgdgfb := d.DecodeElement(_dcebg.Tab, &_fedbfd); _dgdgfb != nil {
					return _dgdgfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "object"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "object"}:
				_dcebg.Object = NewCT_Object()
				if _efbfda := d.DecodeElement(_dcebg.Object, &_fedbfd); _efbfda != nil {
					return _efbfda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pict"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pict"}:
				_dcebg.Pict = NewCT_Picture()
				if _eaaegg := d.DecodeElement(_dcebg.Pict, &_fedbfd); _eaaegg != nil {
					return _eaaegg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldChar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldChar"}:
				_dcebg.FldChar = NewCT_FldChar()
				if _dbccee := d.DecodeElement(_dcebg.FldChar, &_fedbfd); _dbccee != nil {
					return _dbccee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ruby"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ruby"}:
				_dcebg.Ruby = NewCT_Ruby()
				if _gfeefc := d.DecodeElement(_dcebg.Ruby, &_fedbfd); _gfeefc != nil {
					return _gfeefc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnoteReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnoteReference"}:
				_dcebg.FootnoteReference = NewCT_FtnEdnRef()
				if _dddcc := d.DecodeElement(_dcebg.FootnoteReference, &_fedbfd); _dddcc != nil {
					return _dddcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnoteReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnoteReference"}:
				_dcebg.EndnoteReference = NewCT_FtnEdnRef()
				if _bdadfb := d.DecodeElement(_dcebg.EndnoteReference, &_fedbfd); _bdadfb != nil {
					return _bdadfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentReference"}:
				_dcebg.CommentReference = NewCT_Markup()
				if _gdcdb := d.DecodeElement(_dcebg.CommentReference, &_fedbfd); _gdcdb != nil {
					return _gdcdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawing"}:
				_dcebg.Drawing = NewCT_Drawing()
				if _ccgec := d.DecodeElement(_dcebg.Drawing, &_fedbfd); _ccgec != nil {
					return _ccgec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ptab"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ptab"}:
				_dcebg.Ptab = NewCT_PTab()
				if _gbfgca := d.DecodeElement(_dcebg.Ptab, &_fedbfd); _gbfgca != nil {
					return _gbfgca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lastRenderedPageBreak"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lastRenderedPageBreak"}:
				_dcebg.LastRenderedPageBreak = NewCT_Empty()
				if _aacaf := d.DecodeElement(_dcebg.LastRenderedPageBreak, &_fedbfd); _aacaf != nil {
					return _aacaf
				}
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020EG_RunInnerContent\u0020\u0025v", _fedbfd.Name)
				if _ffdfd := d.Skip(); _ffdfd != nil {
					return _ffdfd
				}
			}
		case _d.EndElement:
			break _gedef
		case _d.CharData:
		}
	}
	return nil
}
func (_dfgac ST_StyleType) String() string {
	switch _dfgac {
	case 0:
		return ""
	case 1:
		return "paragraph"
	case 2:
		return "character"
	case 3:
		return "table"
	case 4:
		return "numbering"
	}
	return ""
}
func NewCT_DecimalNumberOrPrecent() *CT_DecimalNumberOrPrecent {
	_fecaf := &CT_DecimalNumberOrPrecent{}
	return _fecaf
}

// ValidateWithPath validates the CT_SmartTagType and its children, prefixing error messages with path
func (_dagbe *CT_SmartTagType) ValidateWithPath(path string) error { return nil }
func (_eddfgg ST_SectionMark) ValidateWithPath(path string) error {
	switch _eddfgg {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_eddfgg))
	}
	return nil
}

// ValidateWithPath validates the WdCT_WordprocessingShapeChoice and its children, prefixing error messages with path
func (_bdgbe *WdCT_WordprocessingShapeChoice) ValidateWithPath(path string) error {
	if _bdgbe.CNvSpPr != nil {
		if _cfccc := _bdgbe.CNvSpPr.ValidateWithPath(path + "\u002fCNvSpPr"); _cfccc != nil {
			return _cfccc
		}
	}
	if _bdgbe.CNvCnPr != nil {
		if _edbeaf := _bdgbe.CNvCnPr.ValidateWithPath(path + "\u002fCNvCnPr"); _edbeaf != nil {
			return _edbeaf
		}
	}
	return nil
}
func (_dcbbbd *WdCT_WordprocessingCanvas) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ebfadg:
	for {
		_fddca, _ffegge := d.Token()
		if _ffegge != nil {
			return _ffegge
		}
		switch _acdeg := _fddca.(type) {
		case _d.StartElement:
			switch _acdeg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "bg"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "bg"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "bg"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bg"}:
				_dcbbbd.Bg = _eb.NewCT_BackgroundFormatting()
				if _dcgfc := d.DecodeElement(_dcbbbd.Bg, &_acdeg); _dcgfc != nil {
					return _dcgfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "whole"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "whole"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "whole"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "whole"}:
				_dcbbbd.Whole = _eb.NewCT_WholeE2oFormatting()
				if _gfbba := d.DecodeElement(_dcbbbd.Whole, &_acdeg); _gfbba != nil {
					return _gfbba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wsp"}:
				_baafdd := NewWdCT_WordprocessingCanvasChoice()
				if _bffdg := d.DecodeElement(&_baafdd.Wsp, &_acdeg); _bffdg != nil {
					return _bffdg
				}
				_dcbbbd.Choice = append(_dcbbbd.Choice, _baafdd)
			case _d.Name{Space: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture", Local: "pic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fpicture", Local: "pic"}:
				_fceecc := NewWdCT_WordprocessingCanvasChoice()
				if _gddbg := d.DecodeElement(&_fceecc.Pic, &_acdeg); _gddbg != nil {
					return _gddbg
				}
				_dcbbbd.Choice = append(_dcbbbd.Choice, _fceecc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}:
				_bgcecc := NewWdCT_WordprocessingCanvasChoice()
				if _eaffgb := d.DecodeElement(&_bgcecc.ContentPart, &_acdeg); _eaffgb != nil {
					return _eaffgb
				}
				_dcbbbd.Choice = append(_dcbbbd.Choice, _bgcecc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wgp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wgp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wgp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wgp"}:
				_bccgf := NewWdCT_WordprocessingCanvasChoice()
				if _bdaadf := d.DecodeElement(&_bccgf.Wgp, &_acdeg); _bdaadf != nil {
					return _bdaadf
				}
				_dcbbbd.Choice = append(_dcbbbd.Choice, _bccgf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "graphicFrame"}:
				_beefg := NewWdCT_WordprocessingCanvasChoice()
				if _befcb := d.DecodeElement(&_beefg.GraphicFrame, &_acdeg); _befcb != nil {
					return _befcb
				}
				_dcbbbd.Choice = append(_dcbbbd.Choice, _beefg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_dcbbbd.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _ccfee := d.DecodeElement(_dcbbbd.ExtLst, &_acdeg); _ccfee != nil {
					return _ccfee
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WordprocessingCanvas\u0020\u0025v", _acdeg.Name)
				if _aebadg := d.Skip(); _aebadg != nil {
					return _aebadg
				}
			}
		case _d.EndElement:
			break _ebfadg
		case _d.CharData:
		}
	}
	return nil
}
func (_gdgbf *CT_Div) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gdgbf.MarLeft = NewCT_SignedTwipsMeasure()
	_gdgbf.MarRight = NewCT_SignedTwipsMeasure()
	_gdgbf.MarTop = NewCT_SignedTwipsMeasure()
	_gdgbf.MarBottom = NewCT_SignedTwipsMeasure()
	for _, _dbae := range start.Attr {
		if _dbae.Name.Local == "id" {
			_afgb, _ffbd := _dd.ParseInt(_dbae.Value, 10, 64)
			if _ffbd != nil {
				return _ffbd
			}
			_gdgbf.IdAttr = _afgb
			continue
		}
	}
_befc:
	for {
		_dgbe, _cefb := d.Token()
		if _cefb != nil {
			return _cefb
		}
		switch _bcgd := _dgbe.(type) {
		case _d.StartElement:
			switch _bcgd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "blockQuote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "blockQuote"}:
				_gdgbf.BlockQuote = NewCT_OnOff()
				if _acabg := d.DecodeElement(_gdgbf.BlockQuote, &_bcgd); _acabg != nil {
					return _acabg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bodyDiv"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bodyDiv"}:
				_gdgbf.BodyDiv = NewCT_OnOff()
				if _bcbag := d.DecodeElement(_gdgbf.BodyDiv, &_bcgd); _bcbag != nil {
					return _bcbag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "marLeft"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "marLeft"}:
				if _agba := d.DecodeElement(_gdgbf.MarLeft, &_bcgd); _agba != nil {
					return _agba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "marRight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "marRight"}:
				if _eeab := d.DecodeElement(_gdgbf.MarRight, &_bcgd); _eeab != nil {
					return _eeab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "marTop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "marTop"}:
				if _gacdd := d.DecodeElement(_gdgbf.MarTop, &_bcgd); _gacdd != nil {
					return _gacdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "marBottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "marBottom"}:
				if _fbcc := d.DecodeElement(_gdgbf.MarBottom, &_bcgd); _fbcc != nil {
					return _fbcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divBdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divBdr"}:
				_gdgbf.DivBdr = NewCT_DivBdr()
				if _ffddb := d.DecodeElement(_gdgbf.DivBdr, &_bcgd); _ffddb != nil {
					return _ffddb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divsChild"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divsChild"}:
				_fbgae := NewCT_Divs()
				if _beee := d.DecodeElement(_fbgae, &_bcgd); _beee != nil {
					return _beee
				}
				_gdgbf.DivsChild = append(_gdgbf.DivsChild, _fbgae)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Div\u0020\u0025v", _bcgd.Name)
				if _cade := d.Skip(); _cade != nil {
					return _cade
				}
			}
		case _d.EndElement:
			break _befc
		case _d.CharData:
		}
	}
	return nil
}

type CT_MarkupRange struct {
	DisplacedByCustomXmlAttr ST_DisplacedByCustomXml

	// Annotation Identifier
	IdAttr int64
}

func NewCT_LatentStyles() *CT_LatentStyles { _bdfdg := &CT_LatentStyles{}; return _bdfdg }
func (_aefbc *CT_Shd) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_edaacg, _bcag := _aefbc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _bcag != nil {
		return _bcag
	}
	start.Attr = append(start.Attr, _edaacg)
	if _aefbc.ColorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:color"}, Value: _b.Sprintf("\u0025v", *_aefbc.ColorAttr)})
	}
	if _aefbc.ThemeColorAttr != ST_ThemeColorUnset {
		_egfag, _cdggf := _aefbc.ThemeColorAttr.MarshalXMLAttr(_d.Name{Local: "w:themeColor"})
		if _cdggf != nil {
			return _cdggf
		}
		start.Attr = append(start.Attr, _egfag)
	}
	if _aefbc.ThemeTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeTint"}, Value: _b.Sprintf("\u0025v", *_aefbc.ThemeTintAttr)})
	}
	if _aefbc.ThemeShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeShade"}, Value: _b.Sprintf("\u0025v", *_aefbc.ThemeShadeAttr)})
	}
	if _aefbc.FillAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fill"}, Value: _b.Sprintf("\u0025v", *_aefbc.FillAttr)})
	}
	if _aefbc.ThemeFillAttr != ST_ThemeColorUnset {
		_gdcgeg, _gefbf := _aefbc.ThemeFillAttr.MarshalXMLAttr(_d.Name{Local: "w:themeFill"})
		if _gefbf != nil {
			return _gefbf
		}
		start.Attr = append(start.Attr, _gdcgeg)
	}
	if _aefbc.ThemeFillTintAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeFillTint"}, Value: _b.Sprintf("\u0025v", *_aefbc.ThemeFillTintAttr)})
	}
	if _aefbc.ThemeFillShadeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:themeFillShade"}, Value: _b.Sprintf("\u0025v", *_aefbc.ThemeFillShadeAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bgfeb *CT_DivBdr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bgfeb.Top != nil {
		_ecbag := _d.StartElement{Name: _d.Name{Local: "w:top"}}
		e.EncodeElement(_bgfeb.Top, _ecbag)
	}
	if _bgfeb.Left != nil {
		_cfdg := _d.StartElement{Name: _d.Name{Local: "w:left"}}
		e.EncodeElement(_bgfeb.Left, _cfdg)
	}
	if _bgfeb.Bottom != nil {
		_ffag := _d.StartElement{Name: _d.Name{Local: "w:bottom"}}
		e.EncodeElement(_bgfeb.Bottom, _ffag)
	}
	if _bgfeb.Right != nil {
		_dbde := _d.StartElement{Name: _d.Name{Local: "w:right"}}
		e.EncodeElement(_bgfeb.Right, _dbde)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the WdWsp and its children, prefixing error messages with path
func (_gebcff *WdWsp) ValidateWithPath(path string) error {
	if _efegbg := _gebcff.WdCT_WordprocessingShape.ValidateWithPath(path); _efegbg != nil {
		return _efegbg
	}
	return nil
}
func (_ccggb ST_MailMergeDest) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ccggb.String(), start)
}

type ST_WmlColorSchemeIndex byte

func (_aaaccb *CT_TwipsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _aaaccb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ebefef *ST_Shd) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ebefef = 0
	case "nil":
		*_ebefef = 1
	case "clear":
		*_ebefef = 2
	case "solid":
		*_ebefef = 3
	case "horzStripe":
		*_ebefef = 4
	case "vertStripe":
		*_ebefef = 5
	case "reverseDiagStripe":
		*_ebefef = 6
	case "diagStripe":
		*_ebefef = 7
	case "horzCross":
		*_ebefef = 8
	case "diagCross":
		*_ebefef = 9
	case "thinHorzStripe":
		*_ebefef = 10
	case "thinVertStripe":
		*_ebefef = 11
	case "thinReverseDiagStripe":
		*_ebefef = 12
	case "thinDiagStripe":
		*_ebefef = 13
	case "thinHorzCross":
		*_ebefef = 14
	case "thinDiagCross":
		*_ebefef = 15
	case "pct5":
		*_ebefef = 16
	case "pct10":
		*_ebefef = 17
	case "pct12":
		*_ebefef = 18
	case "pct15":
		*_ebefef = 19
	case "pct20":
		*_ebefef = 20
	case "pct25":
		*_ebefef = 21
	case "pct30":
		*_ebefef = 22
	case "pct35":
		*_ebefef = 23
	case "pct37":
		*_ebefef = 24
	case "pct40":
		*_ebefef = 25
	case "pct45":
		*_ebefef = 26
	case "pct50":
		*_ebefef = 27
	case "pct55":
		*_ebefef = 28
	case "pct60":
		*_ebefef = 29
	case "pct62":
		*_ebefef = 30
	case "pct65":
		*_ebefef = 31
	case "pct70":
		*_ebefef = 32
	case "pct75":
		*_ebefef = 33
	case "pct80":
		*_ebefef = 34
	case "pct85":
		*_ebefef = 35
	case "pct87":
		*_ebefef = 36
	case "pct90":
		*_ebefef = 37
	case "pct95":
		*_ebefef = 38
	}
	return nil
}

// Validate validates the CT_DocPartBehavior and its children
func (_fgecad *CT_DocPartBehavior) Validate() error {
	return _fgecad.ValidateWithPath("CT_DocPartBehavior")
}

// ValidateWithPath validates the CT_TwipsMeasure and its children, prefixing error messages with path
func (_cfffdf *CT_TwipsMeasure) ValidateWithPath(path string) error {
	if _bgbce := _cfffdf.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _bgbce != nil {
		return _bgbce
	}
	return nil
}
func (_ddceb *CT_MailMerge) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ddceb.MainDocumentType = NewCT_MailMergeDocType()
	_ddceb.DataType = NewCT_MailMergeDataType()
_cefcb:
	for {
		_cfeeea, _bbecf := d.Token()
		if _bbecf != nil {
			return _bbecf
		}
		switch _abdcd := _cfeeea.(type) {
		case _d.StartElement:
			switch _abdcd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mainDocumentType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mainDocumentType"}:
				if _cdge := d.DecodeElement(_ddceb.MainDocumentType, &_abdcd); _cdge != nil {
					return _cdge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "linkToQuery"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "linkToQuery"}:
				_ddceb.LinkToQuery = NewCT_OnOff()
				if _dffaa := d.DecodeElement(_ddceb.LinkToQuery, &_abdcd); _dffaa != nil {
					return _dffaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dataType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dataType"}:
				if _gfbgg := d.DecodeElement(_ddceb.DataType, &_abdcd); _gfbgg != nil {
					return _gfbgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "connectString"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "connectString"}:
				_ddceb.ConnectString = NewCT_String()
				if _agdff := d.DecodeElement(_ddceb.ConnectString, &_abdcd); _agdff != nil {
					return _agdff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "query"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "query"}:
				_ddceb.Query = NewCT_String()
				if _agbgaa := d.DecodeElement(_ddceb.Query, &_abdcd); _agbgaa != nil {
					return _agbgaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dataSource"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dataSource"}:
				_ddceb.DataSource = NewCT_Rel()
				if _bebb := d.DecodeElement(_ddceb.DataSource, &_abdcd); _bebb != nil {
					return _bebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "headerSource"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "headerSource"}:
				_ddceb.HeaderSource = NewCT_Rel()
				if _deccd := d.DecodeElement(_ddceb.HeaderSource, &_abdcd); _deccd != nil {
					return _deccd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotSuppressBlankLines"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotSuppressBlankLines"}:
				_ddceb.DoNotSuppressBlankLines = NewCT_OnOff()
				if _efage := d.DecodeElement(_ddceb.DoNotSuppressBlankLines, &_abdcd); _efage != nil {
					return _efage
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "destination"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "destination"}:
				_ddceb.Destination = NewCT_MailMergeDest()
				if _dacdb := d.DecodeElement(_ddceb.Destination, &_abdcd); _dacdb != nil {
					return _dacdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "addressFieldName"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "addressFieldName"}:
				_ddceb.AddressFieldName = NewCT_String()
				if _afbcag := d.DecodeElement(_ddceb.AddressFieldName, &_abdcd); _afbcag != nil {
					return _afbcag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mailSubject"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mailSubject"}:
				_ddceb.MailSubject = NewCT_String()
				if _gffbd := d.DecodeElement(_ddceb.MailSubject, &_abdcd); _gffbd != nil {
					return _gffbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "mailAsAttachment"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "mailAsAttachment"}:
				_ddceb.MailAsAttachment = NewCT_OnOff()
				if _dbagf := d.DecodeElement(_ddceb.MailAsAttachment, &_abdcd); _dbagf != nil {
					return _dbagf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "viewMergedData"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "viewMergedData"}:
				_ddceb.ViewMergedData = NewCT_OnOff()
				if _gece := d.DecodeElement(_ddceb.ViewMergedData, &_abdcd); _gece != nil {
					return _gece
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "activeRecord"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "activeRecord"}:
				_ddceb.ActiveRecord = NewCT_DecimalNumber()
				if _fgcc := d.DecodeElement(_ddceb.ActiveRecord, &_abdcd); _fgcc != nil {
					return _fgcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "checkErrors"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "checkErrors"}:
				_ddceb.CheckErrors = NewCT_DecimalNumber()
				if _beggbf := d.DecodeElement(_ddceb.CheckErrors, &_abdcd); _beggbf != nil {
					return _beggbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "odso"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "odso"}:
				_ddceb.Odso = NewCT_Odso()
				if _adgdg := d.DecodeElement(_ddceb.Odso, &_abdcd); _adgdg != nil {
					return _adgdg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_MailMerge\u0020\u0025v", _abdcd.Name)
				if _ccgdb := d.Skip(); _ccgdb != nil {
					return _ccgdb
				}
			}
		case _d.EndElement:
			break _cefcb
		case _d.CharData:
		}
	}
	return nil
}
func (_caggfag ST_FrameScrollbar) String() string {
	switch _caggfag {
	case 0:
		return ""
	case 1:
		return "on"
	case 2:
		return "off"
	case 3:
		return "auto"
	}
	return ""
}
func (_aacdbd *ST_ObjectUpdateMode) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_aacdbd = 0
	case "always":
		*_aacdbd = 1
	case "onCall":
		*_aacdbd = 2
	}
	return nil
}
func (_ceebg ST_PTabAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ceebg.String(), start)
}

// Validate validates the CT_TargetScreenSz and its children
func (_dcecg *CT_TargetScreenSz) Validate() error {
	return _dcecg.ValidateWithPath("CT_TargetScreenSz")
}
func (_baga *CT_DocPartBehaviors) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _baga.Behavior != nil {
		_aeaag := _d.StartElement{Name: _d.Name{Local: "w:behavior"}}
		for _, _bgca := range _baga.Behavior {
			e.EncodeElement(_bgca, _aeaag)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fcffd *CT_TblOverlap) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcffd.ValAttr = ST_TblOverlap(1)
	for _, _dgbbe := range start.Attr {
		if _dgbbe.Name.Local == "val" {
			_fcffd.ValAttr.UnmarshalXMLAttr(_dgbbe)
			continue
		}
	}
	for {
		_ccbfdc, _dbbcbf := d.Token()
		if _dbbcbf != nil {
			return _b.Errorf("parsing\u0020CT_TblOverlap:\u0020\u0025s", _dbbcbf)
		}
		if _ebcec, _fdeef := _ccbfdc.(_d.EndElement); _fdeef && _ebcec.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ebcae ST_Theme) String() string {
	switch _ebcae {
	case 0:
		return ""
	case 1:
		return "majorEastAsia"
	case 2:
		return "majorBidi"
	case 3:
		return "majorAscii"
	case 4:
		return "majorHAnsi"
	case 5:
		return "minorEastAsia"
	case 6:
		return "minorBidi"
	case 7:
		return "minorAscii"
	case 8:
		return "minorHAnsi"
	}
	return ""
}
func (_afgec ST_TextboxTightWrap) String() string {
	switch _afgec {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "allLines"
	case 3:
		return "firstAndLastLine"
	case 4:
		return "firstLineOnly"
	case 5:
		return "lastLineOnly"
	}
	return ""
}

// ValidateWithPath validates the WdWpc and its children, prefixing error messages with path
func (_cdfac *WdWpc) ValidateWithPath(path string) error {
	if _fadad := _cdfac.WdCT_WordprocessingCanvas.ValidateWithPath(path); _fadad != nil {
		return _fadad
	}
	return nil
}

// Validate validates the CT_Pitch and its children
func (_fdec *CT_Pitch) Validate() error { return _fdec.ValidateWithPath("CT_Pitch") }

// ValidateWithPath validates the CT_Panose and its children, prefixing error messages with path
func (_cgagg *CT_Panose) ValidateWithPath(path string) error { return nil }
func (_afbfec ST_MultiLevelType) ValidateWithPath(path string) error {
	switch _afbfec {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_afbfec))
	}
	return nil
}

type CT_SectType struct {

	// Section Type Setting
	ValAttr ST_SectionMark
}

func NewCT_Empty() *CT_Empty { _dace := &CT_Empty{}; return _dace }

// MarshalXML implements the xml.Marshaler interface.
func (_ecfcd *AlternateContentRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_bbdccd := _d.StartElement{Name: start.Name}
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wpg"}, Value: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingGroup"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:mc"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fmarkup\u002dcompatibility\u002f2006"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp14"}, Value: "http:\u002f/schemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingDrawing"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wps"}, Value: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:v"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:vml"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w14"}, Value: "http:\u002f\u002fschemas.microsoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordml"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:o"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:office:office"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w10"}, Value: "urn:schemas\u002dmicrosoft\u002dcom:office:word"})
	_bbdccd.Attr = append(_bbdccd.Attr, _d.Attr{Name: _d.Name{Local: "mc:Ignorable"}, Value: "wp14\u0020w14\u0020w10"})
	e.EncodeToken(_bbdccd)
	if _ecfcd.Choice != nil {
		_bdaabf := _d.StartElement{Name: _d.Name{Local: "mc:Choice"}}
		_bdaabf.Attr = append(_bdaabf.Attr, _d.Attr{Name: _d.Name{Local: "Requires"}, Value: _ecfcd.Choice._dafeee})
		e.EncodeToken(_bdaabf)
		e.EncodeElement(_ecfcd.Choice, _bdaabf)
		e.EncodeToken(_d.EndElement{Name: _bdaabf.Name})
	}
	if _ecfcd.Fallback != nil {
		if _aebcaa := _ecfcd.Fallback.MarshalXML(e, _d.StartElement{}); _aebcaa != nil {
			return _aebcaa
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ccbfa ST_ProofErr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ccbfa.String(), start)
}
func (_dgabce ST_TblWidth) Validate() error { return _dgabce.ValidateWithPath("") }
func (_cbaddd ST_SignedTwipsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cbaddd.Int64 != nil {
		e.EncodeToken(_d.CharData(_b.Sprintf("\u0025d", *_cbaddd.Int64)))
	}
	if _cbaddd.ST_UniversalMeasure != nil {
		e.EncodeToken(_d.CharData(*_cbaddd.ST_UniversalMeasure))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}
func (_bacefd ST_HexColorAuto) String() string {
	switch _bacefd {
	case 0:
		return ""
	case 1:
		return "auto"
	}
	return ""
}
func (_bfadb *CT_CellMergeTrackChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fgda := range start.Attr {
		if _fgda.Name.Local == "vMerge" {
			_bfadb.VMergeAttr.UnmarshalXMLAttr(_fgda)
			continue
		}
		if _fgda.Name.Local == "vMergeOrig" {
			_bfadb.VMergeOrigAttr.UnmarshalXMLAttr(_fgda)
			continue
		}
		if _fgda.Name.Local == "author" {
			_babcd, _dcef := _fgda.Value, error(nil)
			if _dcef != nil {
				return _dcef
			}
			_bfadb.AuthorAttr = _babcd
			continue
		}
		if _fgda.Name.Local == "date" {
			_ecee, _gbac := ParseStdlibTime(_fgda.Value)
			if _gbac != nil {
				return _gbac
			}
			_bfadb.DateAttr = &_ecee
			continue
		}
		if _fgda.Name.Local == "id" {
			_acfgf, _ceac := _dd.ParseInt(_fgda.Value, 10, 64)
			if _ceac != nil {
				return _ceac
			}
			_bfadb.IdAttr = _acfgf
			continue
		}
	}
	for {
		_gacf, _gebd := d.Token()
		if _gebd != nil {
			return _b.Errorf("parsing CT_CellMergeTrackChange:\u0020%s", _gebd)
		}
		if _bbgc, _ebg := _gacf.(_d.EndElement); _ebg && _bbgc.Name == start.Name {
			break
		}
	}
	return nil
}
func ParseStdlibTime(s string) (_c.Time, error) { return _c.Time{}, nil }
func (_dfgcbb ST_EdnPos) Validate() error       { return _dfgcbb.ValidateWithPath("") }
func (_ffdege ST_PageOrientation) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ffdege.String(), start)
}

// Validate validates the CT_StyleSort and its children
func (_gabb *CT_StyleSort) Validate() error { return _gabb.ValidateWithPath("CT_StyleSort") }

// ValidateWithPath validates the CT_Captions and its children, prefixing error messages with path
func (_ebd *CT_Captions) ValidateWithPath(path string) error {
	for _aadbb, _gfgd := range _ebd.Caption {
		if _dgfef := _gfgd.ValidateWithPath(_b.Sprintf("\u0025s\u002fCaption\u005b\u0025d\u005d", path, _aadbb)); _dgfef != nil {
			return _dgfef
		}
	}
	if _ebd.AutoCaptions != nil {
		if _abaa := _ebd.AutoCaptions.ValidateWithPath(path + "\u002fAutoCaptions"); _abaa != nil {
			return _abaa
		}
	}
	return nil
}
func (_ffbbg ST_FtnPos) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ffbbg.String(), start)
}

const (
	ST_SectionMarkUnset      ST_SectionMark = 0
	ST_SectionMarkNextPage   ST_SectionMark = 1
	ST_SectionMarkNextColumn ST_SectionMark = 2
	ST_SectionMarkContinuous ST_SectionMark = 3
	ST_SectionMarkEvenPage   ST_SectionMark = 4
	ST_SectionMarkOddPage    ST_SectionMark = 5
)

func (_baccd *CT_OptimizeForBrowser) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ffgce := range start.Attr {
		if _ffgce.Name.Local == "target" {
			_dcfaea, _dbded := _ffgce.Value, error(nil)
			if _dbded != nil {
				return _dbded
			}
			_baccd.TargetAttr = &_dcfaea
			continue
		}
		if _ffgce.Name.Local == "val" {
			_ebacb, _cdgea := ParseUnionST_OnOff(_ffgce.Value)
			if _cdgea != nil {
				return _cdgea
			}
			_baccd.ValAttr = &_ebacb
			continue
		}
	}
	for {
		_beadg, _dafe := d.Token()
		if _dafe != nil {
			return _b.Errorf("parsing\u0020CT_OptimizeForBrowser:\u0020\u0025s", _dafe)
		}
		if _ceca, _cbecb := _beadg.(_d.EndElement); _cbecb && _ceca.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bffc *CT_DocParts) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_efddb:
	for {
		_abfcb, _faeac := d.Token()
		if _faeac != nil {
			return _faeac
		}
		switch _daacd := _abfcb.(type) {
		case _d.StartElement:
			switch _daacd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docPart"}:
				_caabg := NewCT_DocPart()
				if _adfgf := d.DecodeElement(_caabg, &_daacd); _adfgf != nil {
					return _adfgf
				}
				_bffc.DocPart = append(_bffc.DocPart, _caabg)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DocParts\u0020\u0025v", _daacd.Name)
				if _cfdcg := d.Skip(); _cfdcg != nil {
					return _cfdcg
				}
			}
		case _d.EndElement:
			break _efddb
		case _d.CharData:
		}
	}
	return nil
}
func (_bgdgdg ST_Proof) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dffcgd := _d.Attr{}
	_dffcgd.Name = name
	switch _bgdgdg {
	case ST_ProofUnset:
		_dffcgd.Value = ""
	case ST_ProofClean:
		_dffcgd.Value = "clean"
	case ST_ProofDirty:
		_dffcgd.Value = "dirty"
	}
	return _dffcgd, nil
}

// Validate validates the CT_PageMar and its children
func (_fccb *CT_PageMar) Validate() error { return _fccb.ValidateWithPath("CT_PageMar") }

// ValidateWithPath validates the CT_Background and its children, prefixing error messages with path
func (_cag *CT_Background) ValidateWithPath(path string) error {
	if _cag.ColorAttr != nil {
		if _dbac := _cag.ColorAttr.ValidateWithPath(path + "\u002fColorAttr"); _dbac != nil {
			return _dbac
		}
	}
	if _degf := _cag.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _degf != nil {
		return _degf
	}
	if _cag.Drawing != nil {
		if _fba := _cag.Drawing.ValidateWithPath(path + "\u002fDrawing"); _fba != nil {
			return _fba
		}
	}
	return nil
}
func (_ageeg *CT_FramesetSplitbar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bfgge:
	for {
		_aaca, _gfgbf := d.Token()
		if _gfgbf != nil {
			return _gfgbf
		}
		switch _cfgaf := _aaca.(type) {
		case _d.StartElement:
			switch _cfgaf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "w"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "w"}:
				_ageeg.W = NewCT_TwipsMeasure()
				if _aaaec := d.DecodeElement(_ageeg.W, &_cfgaf); _aaaec != nil {
					return _aaaec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "color"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "color"}:
				_ageeg.Color = NewCT_Color()
				if _bddc := d.DecodeElement(_ageeg.Color, &_cfgaf); _bddc != nil {
					return _bddc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noBorder"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noBorder"}:
				_ageeg.NoBorder = NewCT_OnOff()
				if _gage := d.DecodeElement(_ageeg.NoBorder, &_cfgaf); _gage != nil {
					return _gage
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "flatBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "flatBorders"}:
				_ageeg.FlatBorders = NewCT_OnOff()
				if _bcefg := d.DecodeElement(_ageeg.FlatBorders, &_cfgaf); _bcefg != nil {
					return _bcefg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_FramesetSplitbar\u0020\u0025v", _cfgaf.Name)
				if _geccc := d.Skip(); _geccc != nil {
					return _geccc
				}
			}
		case _d.EndElement:
			break _bfgge
		case _d.CharData:
		}
	}
	return nil
}
func (_cgdbd *EG_PContentBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cgdbd.CustomXml != nil {
		_agggf := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_cgdbd.CustomXml, _agggf)
	}
	if _cgdbd.FldSimple != nil {
		_ffcca := _d.StartElement{Name: _d.Name{Local: "w:fldSimple"}}
		for _, _debce := range _cgdbd.FldSimple {
			e.EncodeElement(_debce, _ffcca)
		}
	}
	if _cgdbd.Hyperlink != nil {
		_gegda := _d.StartElement{Name: _d.Name{Local: "w:hyperlink"}}
		e.EncodeElement(_cgdbd.Hyperlink, _gegda)
	}
	return nil
}
func (_eebbe *CT_LevelSuffix) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eebbe.ValAttr = ST_LevelSuffix(1)
	for _, _bfcegc := range start.Attr {
		if _bfcegc.Name.Local == "val" {
			_eebbe.ValAttr.UnmarshalXMLAttr(_bfcegc)
			continue
		}
	}
	for {
		_gcdaf, _dfefa := d.Token()
		if _dfefa != nil {
			return _b.Errorf("parsing\u0020CT_LevelSuffix:\u0020\u0025s", _dfefa)
		}
		if _ffdea, _dfcfd := _gcdaf.(_d.EndElement); _dfcfd && _ffdea.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Frameset and its children
func (_eagfd *CT_Frameset) Validate() error { return _eagfd.ValidateWithPath("CT_Frameset") }

// ValidateWithPath validates the Document and its children, prefixing error messages with path
func (_egdba *Document) ValidateWithPath(path string) error {
	if _dcebdg := _egdba.CT_Document.ValidateWithPath(path); _dcebdg != nil {
		return _dcebdg
	}
	return nil
}
func (_egdaa ST_BrClear) String() string {
	switch _egdaa {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "left"
	case 3:
		return "right"
	case 4:
		return "all"
	}
	return ""
}
func ParseUnionST_SignedTwipsMeasure(s string) (ST_SignedTwipsMeasure, error) {
	_ecbdc := ST_SignedTwipsMeasure{}
	if _g.ST_UniversalMeasurePatternRe.MatchString(s) {
		_ecbdc.ST_UniversalMeasure = &s
	} else {
		_gfbda, _gdbfbe := _dd.ParseFloat(s, 64)
		if _gdbfbe != nil {
			return _ecbdc, _b.Errorf("parsing\u0020%s\u0020as\u0020int:\u0020\u0025s", s, _gdbfbe)
		}
		_ecbdc.Int64 = _ga.Int64(int64(_gfbda))
	}
	return _ecbdc, nil
}

// ValidateWithPath validates the CT_FFName and its children, prefixing error messages with path
func (_cgcc *CT_FFName) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_EdnPos and its children, prefixing error messages with path
func (_cbfce *CT_EdnPos) ValidateWithPath(path string) error {
	if _cbfce.ValAttr == ST_EdnPosUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cdeb := _cbfce.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cdeb != nil {
		return _cdeb
	}
	return nil
}
func ParseUnionST_SignedHpsMeasure(s string) (ST_SignedHpsMeasure, error) {
	_gegdef := ST_SignedHpsMeasure{}
	if _g.ST_UniversalMeasurePatternRe.MatchString(s) {
		_gegdef.ST_UniversalMeasure = &s
	} else {
		_gbbcg, _edgbg := _dd.ParseFloat(s, 64)
		if _edgbg != nil {
			return _gegdef, _b.Errorf("parsing\u0020%s\u0020as\u0020int:\u0020\u0025s", s, _edgbg)
		}
		_gegdef.Int64 = _ga.Int64(int64(_gbbcg))
	}
	return _gegdef, nil
}
func (_cgbaa ST_Pitch) Validate() error { return _cgbaa.ValidateWithPath("") }
func (_bfgef ST_ThemeColor) String() string {
	switch _bfgef {
	case 0:
		return ""
	case 1:
		return "dark1"
	case 2:
		return "light1"
	case 3:
		return "dark2"
	case 4:
		return "light2"
	case 5:
		return "accent1"
	case 6:
		return "accent2"
	case 7:
		return "accent3"
	case 8:
		return "accent4"
	case 9:
		return "accent5"
	case 10:
		return "accent6"
	case 11:
		return "hyperlink"
	case 12:
		return "followedHyperlink"
	case 13:
		return "none"
	case 14:
		return "background1"
	case 15:
		return "text1"
	case 16:
		return "background2"
	case 17:
		return "text2"
	}
	return ""
}

// ValidateWithPath validates the WdCT_WrapThrough and its children, prefixing error messages with path
func (_aaaac *WdCT_WrapThrough) ValidateWithPath(path string) error {
	if _aaaac.WrapTextAttr == WdST_WrapTextUnset {
		return _b.Errorf("\u0025s/WrapTextAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _egdaeb := _aaaac.WrapTextAttr.ValidateWithPath(path + "\u002fWrapTextAttr"); _egdaeb != nil {
		return _egdaeb
	}
	if _cgcgf := _aaaac.WrapPolygon.ValidateWithPath(path + "\u002fWrapPolygon"); _cgcgf != nil {
		return _cgcgf
	}
	return nil
}

// Validate validates the CT_TextEffect and its children
func (_fddceg *CT_TextEffect) Validate() error { return _fddceg.ValidateWithPath("CT_TextEffect") }
func (_ddddc *ST_MailMergeDocType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gfccg, _eegag := d.Token()
	if _eegag != nil {
		return _eegag
	}
	if _cedacd, _fdged := _gfccg.(_d.EndElement); _fdged && _cedacd.Name == start.Name {
		*_ddddc = 1
		return nil
	}
	if _adbfe, _gafcfa := _gfccg.(_d.CharData); !_gafcfa {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _gfccg)
	} else {
		switch string(_adbfe) {
		case "":
			*_ddddc = 0
		case "catalog":
			*_ddddc = 1
		case "envelopes":
			*_ddddc = 2
		case "mailingLabels":
			*_ddddc = 3
		case "formLetters":
			*_ddddc = 4
		case "email":
			*_ddddc = 5
		case "fax":
			*_ddddc = 6
		}
	}
	_gfccg, _eegag = d.Token()
	if _eegag != nil {
		return _eegag
	}
	if _dcgbg, _acabdf := _gfccg.(_d.EndElement); _acabdf && _dcgbg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _gfccg)
}

type ST_ChapterSep byte

// Validate validates the CT_Cnf and its children
func (_aadbe *CT_Cnf) Validate() error   { return _aadbe.ValidateWithPath("CT_Cnf") }
func (_bccafe ST_Proof) Validate() error { return _bccafe.ValidateWithPath("") }

type ST_Wrap byte

// ValidateWithPath validates the EG_BlockLevelElts and its children, prefixing error messages with path
func (_bcdfcc *EG_BlockLevelElts) ValidateWithPath(path string) error {
	for _dbebg, _eaacb := range _bcdfcc.AltChunk {
		if _bcbfa := _eaacb.ValidateWithPath(_b.Sprintf("\u0025s\u002fAltChunk\u005b\u0025d\u005d", path, _dbebg)); _bcbfa != nil {
			return _bcbfa
		}
	}
	for _effad, _cdcce := range _bcdfcc.EG_ContentBlockContent {
		if _edeed := _cdcce.ValidateWithPath(_b.Sprintf("\u0025s/EG_ContentBlockContent[%d\u005d", path, _effad)); _edeed != nil {
			return _edeed
		}
	}
	return nil
}

// Validate validates the CT_Lang and its children
func (_gcdac *CT_Lang) Validate() error { return _gcdac.ValidateWithPath("CT_Lang") }

const (
	ST_ZoomUnset    ST_Zoom = 0
	ST_ZoomNone     ST_Zoom = 1
	ST_ZoomFullPage ST_Zoom = 2
	ST_ZoomBestFit  ST_Zoom = 3
	ST_ZoomTextFit  ST_Zoom = 4
)

func (_gcbba *ST_Underline) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gcbba = 0
	case "single":
		*_gcbba = 1
	case "words":
		*_gcbba = 2
	case "double":
		*_gcbba = 3
	case "thick":
		*_gcbba = 4
	case "dotted":
		*_gcbba = 5
	case "dottedHeavy":
		*_gcbba = 6
	case "dash":
		*_gcbba = 7
	case "dashedHeavy":
		*_gcbba = 8
	case "dashLong":
		*_gcbba = 9
	case "dashLongHeavy":
		*_gcbba = 10
	case "dotDash":
		*_gcbba = 11
	case "dashDotHeavy":
		*_gcbba = 12
	case "dotDotDash":
		*_gcbba = 13
	case "dashDotDotHeavy":
		*_gcbba = 14
	case "wave":
		*_gcbba = 15
	case "wavyHeavy":
		*_gcbba = 16
	case "wavyDouble":
		*_gcbba = 17
	case "none":
		*_gcbba = 18
	}
	return nil
}
func (_bebag *CT_FontsList) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bggff:
	for {
		_afbcg, _cgab := d.Token()
		if _cgab != nil {
			return _cgab
		}
		switch _cbaee := _afbcg.(type) {
		case _d.StartElement:
			switch _cbaee.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "font"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "font"}:
				_aaccf := NewCT_Font()
				if _beddb := d.DecodeElement(_aaccf, &_cbaee); _beddb != nil {
					return _beddb
				}
				_bebag.Font = append(_bebag.Font, _aaccf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_FontsList\u0020\u0025v", _cbaee.Name)
				if _gdac := d.Skip(); _gdac != nil {
					return _gdac
				}
			}
		case _d.EndElement:
			break _bggff
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_Color() *CT_Color { _degdf := &CT_Color{}; return _degdf }

// ValidateWithPath validates the CT_TblLayoutType and its children, prefixing error messages with path
func (_bbedd *CT_TblLayoutType) ValidateWithPath(path string) error {
	if _dgddgf := _bbedd.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _dgddgf != nil {
		return _dgddgf
	}
	return nil
}

// ValidateWithPath validates the CT_TcPrInner and its children, prefixing error messages with path
func (_dagcb *CT_TcPrInner) ValidateWithPath(path string) error {
	if _dagcb.CnfStyle != nil {
		if _gcbbb := _dagcb.CnfStyle.ValidateWithPath(path + "\u002fCnfStyle"); _gcbbb != nil {
			return _gcbbb
		}
	}
	if _dagcb.TcW != nil {
		if _egedf := _dagcb.TcW.ValidateWithPath(path + "\u002fTcW"); _egedf != nil {
			return _egedf
		}
	}
	if _dagcb.GridSpan != nil {
		if _dcabd := _dagcb.GridSpan.ValidateWithPath(path + "\u002fGridSpan"); _dcabd != nil {
			return _dcabd
		}
	}
	if _dagcb.HMerge != nil {
		if _cagef := _dagcb.HMerge.ValidateWithPath(path + "\u002fHMerge"); _cagef != nil {
			return _cagef
		}
	}
	if _dagcb.VMerge != nil {
		if _cgeeaeb := _dagcb.VMerge.ValidateWithPath(path + "\u002fVMerge"); _cgeeaeb != nil {
			return _cgeeaeb
		}
	}
	if _dagcb.TcBorders != nil {
		if _eefdaa := _dagcb.TcBorders.ValidateWithPath(path + "\u002fTcBorders"); _eefdaa != nil {
			return _eefdaa
		}
	}
	if _dagcb.Shd != nil {
		if _aedgb := _dagcb.Shd.ValidateWithPath(path + "\u002fShd"); _aedgb != nil {
			return _aedgb
		}
	}
	if _dagcb.NoWrap != nil {
		if _ddgefb := _dagcb.NoWrap.ValidateWithPath(path + "\u002fNoWrap"); _ddgefb != nil {
			return _ddgefb
		}
	}
	if _dagcb.TcMar != nil {
		if _efbff := _dagcb.TcMar.ValidateWithPath(path + "\u002fTcMar"); _efbff != nil {
			return _efbff
		}
	}
	if _dagcb.TextDirection != nil {
		if _fbgfdb := _dagcb.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _fbgfdb != nil {
			return _fbgfdb
		}
	}
	if _dagcb.TcFitText != nil {
		if _bbaed := _dagcb.TcFitText.ValidateWithPath(path + "\u002fTcFitText"); _bbaed != nil {
			return _bbaed
		}
	}
	if _dagcb.VAlign != nil {
		if _cbaeaa := _dagcb.VAlign.ValidateWithPath(path + "\u002fVAlign"); _cbaeaa != nil {
			return _cbaeaa
		}
	}
	if _dagcb.HideMark != nil {
		if _cdgda := _dagcb.HideMark.ValidateWithPath(path + "\u002fHideMark"); _cdgda != nil {
			return _cdgda
		}
	}
	if _dagcb.Headers != nil {
		if _gbded := _dagcb.Headers.ValidateWithPath(path + "\u002fHeaders"); _gbded != nil {
			return _gbded
		}
	}
	if _dagcb.CellIns != nil {
		if _bgggfd := _dagcb.CellIns.ValidateWithPath(path + "\u002fCellIns"); _bgggfd != nil {
			return _bgggfd
		}
	}
	if _dagcb.CellDel != nil {
		if _bdded := _dagcb.CellDel.ValidateWithPath(path + "\u002fCellDel"); _bdded != nil {
			return _bdded
		}
	}
	if _dagcb.CellMerge != nil {
		if _ffdag := _dagcb.CellMerge.ValidateWithPath(path + "\u002fCellMerge"); _ffdag != nil {
			return _ffdag
		}
	}
	return nil
}

// ValidateWithPath validates the WdCT_WrapNone and its children, prefixing error messages with path
func (_aaddg *WdCT_WrapNone) ValidateWithPath(path string) error { return nil }
func NewWdCT_WordprocessingShapeChoice1() *WdCT_WordprocessingShapeChoice1 {
	_abfee := &WdCT_WordprocessingShapeChoice1{}
	return _abfee
}

// ValidateWithPath validates the CT_TcMar and its children, prefixing error messages with path
func (_efcfd *CT_TcMar) ValidateWithPath(path string) error {
	if _efcfd.Top != nil {
		if _gdecd := _efcfd.Top.ValidateWithPath(path + "\u002fTop"); _gdecd != nil {
			return _gdecd
		}
	}
	if _efcfd.Start != nil {
		if _ffcgef := _efcfd.Start.ValidateWithPath(path + "\u002fStart"); _ffcgef != nil {
			return _ffcgef
		}
	}
	if _efcfd.Left != nil {
		if _bgcad := _efcfd.Left.ValidateWithPath(path + "\u002fLeft"); _bgcad != nil {
			return _bgcad
		}
	}
	if _efcfd.Bottom != nil {
		if _fcbeeg := _efcfd.Bottom.ValidateWithPath(path + "\u002fBottom"); _fcbeeg != nil {
			return _fcbeeg
		}
	}
	if _efcfd.End != nil {
		if _dccbc := _efcfd.End.ValidateWithPath(path + "\u002fEnd"); _dccbc != nil {
			return _dccbc
		}
	}
	if _efcfd.Right != nil {
		if _eacce := _efcfd.Right.ValidateWithPath(path + "\u002fRight"); _eacce != nil {
			return _eacce
		}
	}
	return nil
}

const (
	ST_TargetScreenSzUnset     ST_TargetScreenSz = 0
	ST_TargetScreenSz544x376   ST_TargetScreenSz = 1
	ST_TargetScreenSz640x480   ST_TargetScreenSz = 2
	ST_TargetScreenSz720x512   ST_TargetScreenSz = 3
	ST_TargetScreenSz800x600   ST_TargetScreenSz = 4
	ST_TargetScreenSz1024x768  ST_TargetScreenSz = 5
	ST_TargetScreenSz1152x882  ST_TargetScreenSz = 6
	ST_TargetScreenSz1152x900  ST_TargetScreenSz = 7
	ST_TargetScreenSz1280x1024 ST_TargetScreenSz = 8
	ST_TargetScreenSz1600x1200 ST_TargetScreenSz = 9
	ST_TargetScreenSz1800x1440 ST_TargetScreenSz = 10
	ST_TargetScreenSz1920x1200 ST_TargetScreenSz = 11
)

func NewCT_Compat() *CT_Compat { _bdgb := &CT_Compat{}; return _bdgb }
func (_beece *CT_Odso) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _beece.Udl != nil {
		_abbcd := _d.StartElement{Name: _d.Name{Local: "w:udl"}}
		e.EncodeElement(_beece.Udl, _abbcd)
	}
	if _beece.Table != nil {
		_fgafb := _d.StartElement{Name: _d.Name{Local: "w:table"}}
		e.EncodeElement(_beece.Table, _fgafb)
	}
	if _beece.Src != nil {
		_ccffb := _d.StartElement{Name: _d.Name{Local: "w:src"}}
		e.EncodeElement(_beece.Src, _ccffb)
	}
	if _beece.ColDelim != nil {
		_dfbdgf := _d.StartElement{Name: _d.Name{Local: "w:colDelim"}}
		e.EncodeElement(_beece.ColDelim, _dfbdgf)
	}
	if _beece.Type != nil {
		_fgfgf := _d.StartElement{Name: _d.Name{Local: "w:type"}}
		e.EncodeElement(_beece.Type, _fgfgf)
	}
	if _beece.FHdr != nil {
		_fcdea := _d.StartElement{Name: _d.Name{Local: "w:fHdr"}}
		e.EncodeElement(_beece.FHdr, _fcdea)
	}
	if _beece.FieldMapData != nil {
		_ecbb := _d.StartElement{Name: _d.Name{Local: "w:fieldMapData"}}
		for _, _cbaggg := range _beece.FieldMapData {
			e.EncodeElement(_cbaggg, _ecbb)
		}
	}
	if _beece.RecipientData != nil {
		_adgda := _d.StartElement{Name: _d.Name{Local: "w:recipientData"}}
		for _, _ddgef := range _beece.RecipientData {
			e.EncodeElement(_ddgef, _adgda)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gcdbg *ST_TabJc) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gcdbg = 0
	case "clear":
		*_gcdbg = 1
	case "start":
		*_gcdbg = 2
	case "center":
		*_gcdbg = 3
	case "end":
		*_gcdbg = 4
	case "decimal":
		*_gcdbg = 5
	case "bar":
		*_gcdbg = 6
	case "num":
		*_gcdbg = 7
	case "left":
		*_gcdbg = 8
	case "right":
		*_gcdbg = 9
	}
	return nil
}
func (_dbacd *CT_MacroName) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _dbacd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ObjectChoice and its children
func (_fgfeg *CT_ObjectChoice) Validate() error { return _fgfeg.ValidateWithPath("CT_ObjectChoice") }

const (
	ST_HexColorAutoUnset ST_HexColorAuto = 0
	ST_HexColorAutoAuto  ST_HexColorAuto = 1
)

type CT_BottomPageBorder struct {
	BottomLeftAttr  *string
	BottomRightAttr *string
	IdAttr          *string

	// Border Style
	ValAttr ST_Border

	// Border Color
	ColorAttr *ST_HexColor

	// Border Theme Color
	ThemeColorAttr ST_ThemeColor

	// Border Theme Color Tint
	ThemeTintAttr *string

	// Border Theme Color Shade
	ThemeShadeAttr *string

	// Border Width
	SzAttr *uint64

	// Border Spacing Measurement
	SpaceAttr *uint64

	// Border Shadow
	ShadowAttr *_g.ST_OnOff

	// Create Frame Effect
	FrameAttr *_g.ST_OnOff
}

func (_adgccc *CT_Ruby) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_adgccc.RubyPr = NewCT_RubyPr()
	_adgccc.Rt = NewCT_RubyContent()
	_adgccc.RubyBase = NewCT_RubyContent()
_dgdgf:
	for {
		_acafe, _abfcc := d.Token()
		if _abfcc != nil {
			return _abfcc
		}
		switch _ebcbbb := _acafe.(type) {
		case _d.StartElement:
			switch _ebcbbb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rubyPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rubyPr"}:
				if _ggbeaf := d.DecodeElement(_adgccc.RubyPr, &_ebcbbb); _ggbeaf != nil {
					return _ggbeaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rt"}:
				if _ceagdb := d.DecodeElement(_adgccc.Rt, &_ebcbbb); _ceagdb != nil {
					return _ceagdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rubyBase"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rubyBase"}:
				if _egcaba := d.DecodeElement(_adgccc.RubyBase, &_ebcbbb); _egcaba != nil {
					return _egcaba
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Ruby\u0020\u0025v", _ebcbbb.Name)
				if _eafdb := d.Skip(); _eafdb != nil {
					return _eafdb
				}
			}
		case _d.EndElement:
			break _dgdgf
		case _d.CharData:
		}
	}
	return nil
}
func (_fdgddb *ST_JcTable) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fdgddb = 0
	case "center":
		*_fdgddb = 1
	case "end":
		*_fdgddb = 2
	case "left":
		*_fdgddb = 3
	case "right":
		*_fdgddb = 4
	case "start":
		*_fdgddb = 5
	}
	return nil
}

// Validate validates the CT_EdnDocProps and its children
func (_bdbaa *CT_EdnDocProps) Validate() error { return _bdbaa.ValidateWithPath("CT_EdnDocProps") }

// Validate validates the WdEG_WrapType and its children
func (_fdceb *WdEG_WrapType) Validate() error { return _fdceb.ValidateWithPath("WdEG_WrapType") }

// Validate validates the CT_PageBorders and its children
func (_faagb *CT_PageBorders) Validate() error { return _faagb.ValidateWithPath("CT_PageBorders") }

// ValidateWithPath validates the CT_FtnEdnSepRef and its children, prefixing error messages with path
func (_faged *CT_FtnEdnSepRef) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_Text and its children, prefixing error messages with path
func (_faddaa *CT_Text) ValidateWithPath(path string) error { return nil }
func NewCT_PPrBase() *CT_PPrBase                            { _cdfe := &CT_PPrBase{}; return _cdfe }
func NewWdCT_WrapNone() *WdCT_WrapNone                      { _bebcce := &WdCT_WrapNone{}; return _bebcce }

type ST_DocPartBehavior byte
type CT_FFTextInput struct {

	// Text Box Form Field Type
	Type *CT_FFTextType

	// Default Text Box Form Field String
	Default *CT_String

	// Text Box Form Field Maximum Length
	MaxLength *CT_DecimalNumber

	// Text Box Form Field Formatting
	Format *CT_String
}

func (_gaedd *CT_Lock) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bggcf := range start.Attr {
		if _bggcf.Name.Local == "val" {
			_gaedd.ValAttr.UnmarshalXMLAttr(_bggcf)
			continue
		}
	}
	for {
		_fdgdb, _bffd := d.Token()
		if _bffd != nil {
			return _b.Errorf("parsing\u0020CT_Lock:\u0020\u0025s", _bffd)
		}
		if _fddd, _acbac := _fdgdb.(_d.EndElement); _acbac && _fddd.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SdtEndPr and its children, prefixing error messages with path
func (_cfacd *CT_SdtEndPr) ValidateWithPath(path string) error {
	for _ebfbb, _aedae := range _cfacd.RPr {
		if _eedeg := _aedae.ValidateWithPath(_b.Sprintf("\u0025s\u002fRPr\u005b\u0025d\u005d", path, _ebfbb)); _eedeg != nil {
			return _eedeg
		}
	}
	return nil
}
func (_edaeae *WdST_AlignV) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_edaeae = 0
	case "top":
		*_edaeae = 1
	case "bottom":
		*_edaeae = 2
	case "center":
		*_edaeae = 3
	case "inside":
		*_edaeae = 4
	case "outside":
		*_edaeae = 5
	}
	return nil
}
func NewCT_Br() *CT_Br { _dgcd := &CT_Br{}; return _dgcd }
func (_gfebc *CT_Sym) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _acdae := range start.Attr {
		if _acdae.Name.Local == "font" {
			_gfdfbb, _baafdb := _acdae.Value, error(nil)
			if _baafdb != nil {
				return _baafdb
			}
			_gfebc.FontAttr = &_gfdfbb
			continue
		}
		if _acdae.Name.Local == "char" {
			_gcfcg, _ddfbbg := _acdae.Value, error(nil)
			if _ddfbbg != nil {
				return _ddfbbg
			}
			_gfebc.CharAttr = &_gcfcg
			continue
		}
	}
	for {
		_dgafa, _afaec := d.Token()
		if _afaec != nil {
			return _b.Errorf("parsing\u0020CT_Sym:\u0020\u0025s", _afaec)
		}
		if _cebba, _cbeffe := _dgafa.(_d.EndElement); _cbeffe && _cebba.Name == start.Name {
			break
		}
	}
	return nil
}

// AlternateContentRun is used to marshal/unmarshal mc:AlternateContent types inside or CT_R Extra in the OOXML schema.
type AlternateContentRun struct {
	Choice   *AC_ChoiceRun
	Fallback _ga.Any
}

// ValidateWithPath validates the CT_Tc and its children, prefixing error messages with path
func (_bbebf *CT_Tc) ValidateWithPath(path string) error {
	if _bbebf.TcPr != nil {
		if _dgfgd := _bbebf.TcPr.ValidateWithPath(path + "\u002fTcPr"); _dgfgd != nil {
			return _dgfgd
		}
	}
	for _fegag, _ebbdb := range _bbebf.EG_BlockLevelElts {
		if _ffebc := _ebbdb.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_BlockLevelElts\u005b\u0025d\u005d", path, _fegag)); _ffebc != nil {
			return _ffebc
		}
	}
	return nil
}
func (_ffaeceg *ST_FontFamily) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgdbbb, _eadeg := d.Token()
	if _eadeg != nil {
		return _eadeg
	}
	if _fbfac, _eefde := _fgdbbb.(_d.EndElement); _eefde && _fbfac.Name == start.Name {
		*_ffaeceg = 1
		return nil
	}
	if _gcedg, _ecbcf := _fgdbbb.(_d.CharData); !_ecbcf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fgdbbb)
	} else {
		switch string(_gcedg) {
		case "":
			*_ffaeceg = 0
		case "decorative":
			*_ffaeceg = 1
		case "modern":
			*_ffaeceg = 2
		case "roman":
			*_ffaeceg = 3
		case "script":
			*_ffaeceg = 4
		case "swiss":
			*_ffaeceg = 5
		case "auto":
			*_ffaeceg = 6
		}
	}
	_fgdbbb, _eadeg = d.Token()
	if _eadeg != nil {
		return _eadeg
	}
	if _agdcae, _fbbfcce := _fgdbbb.(_d.EndElement); _fbbfcce && _agdcae.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fgdbbb)
}

// ValidateWithPath validates the CT_FontRel and its children, prefixing error messages with path
func (_eaccc *CT_FontRel) ValidateWithPath(path string) error {
	if !_g.ST_GuidPatternRe.MatchString(_eaccc.FontKeyAttr) {
		return _b.Errorf("\u0025s\u002fm\u002eFontKeyAttr\u0020must\u0020match\u0020\u0027\u0025s\u0027\u0020(have\u0020\u0025v\u0029", path, _g.ST_GuidPatternRe, _eaccc.FontKeyAttr)
	}
	if _bccd := _eaccc.SubsettedAttr.ValidateWithPath(path + "\u002fSubsettedAttr"); _bccd != nil {
		return _bccd
	}
	return nil
}

type CT_FFCheckBoxChoice struct {
	Size     *CT_HpsMeasure
	SizeAuto *CT_OnOff
}

const (
	WdST_RelFromHUnset         WdST_RelFromH = 0
	WdST_RelFromHMargin        WdST_RelFromH = 1
	WdST_RelFromHPage          WdST_RelFromH = 2
	WdST_RelFromHColumn        WdST_RelFromH = 3
	WdST_RelFromHCharacter     WdST_RelFromH = 4
	WdST_RelFromHLeftMargin    WdST_RelFromH = 5
	WdST_RelFromHRightMargin   WdST_RelFromH = 6
	WdST_RelFromHInsideMargin  WdST_RelFromH = 7
	WdST_RelFromHOutsideMargin WdST_RelFromH = 8
)

func NewCT_MultiLevelType() *CT_MultiLevelType {
	_acdff := &CT_MultiLevelType{}
	_acdff.ValAttr = ST_MultiLevelType(1)
	return _acdff
}

type CT_SdtContentRun struct {

	// Simple Field
	FldSimple []*CT_SimpleField

	// Hyperlink
	Hyperlink *CT_Hyperlink

	// Anchor for Subdocument Location
	SubDoc               *CT_Rel
	EG_ContentRunContent []*EG_ContentRunContent
}

func NewWdWsp() *WdWsp {
	_egegg := &WdWsp{}
	_egegg.WdCT_WordprocessingShape = *NewWdCT_WordprocessingShape()
	return _egegg
}

type CT_CustomXmlCell struct {

	// Custom XML Element Namespace
	UriAttr *string

	// Custom XML Element Name
	ElementAttr string

	// Custom XML Element Properties
	CustomXmlPr           *CT_CustomXmlPr
	EG_ContentCellContent []*EG_ContentCellContent
}

func (_cbeda ST_PTabLeader) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cbeda.String(), start)
}
func (_effcdd *ST_FtnPos) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_baccfgd, _bebbc := d.Token()
	if _bebbc != nil {
		return _bebbc
	}
	if _cebbff, _eggfgc := _baccfgd.(_d.EndElement); _eggfgc && _cebbff.Name == start.Name {
		*_effcdd = 1
		return nil
	}
	if _dcabfg, _dagbd := _baccfgd.(_d.CharData); !_dagbd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _baccfgd)
	} else {
		switch string(_dcabfg) {
		case "":
			*_effcdd = 0
		case "pageBottom":
			*_effcdd = 1
		case "beneathText":
			*_effcdd = 2
		case "sectEnd":
			*_effcdd = 3
		case "docEnd":
			*_effcdd = 4
		}
	}
	_baccfgd, _bebbc = d.Token()
	if _bebbc != nil {
		return _bebbc
	}
	if _cafcc, _fcdfe := _baccfgd.(_d.EndElement); _fcdfe && _cafcc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _baccfgd)
}

type CT_SignedHpsMeasure struct {

	// Signed Half-Point Measurement
	ValAttr ST_SignedHpsMeasure
}

func (_gccgf ST_PageBorderZOrder) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gccgf.String(), start)
}
func (_ggffg ST_DisplacedByCustomXml) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ggffg.String(), start)
}
func (_fbfgdd *CT_R) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ffgec := range start.Attr {
		if _ffgec.Name.Local == "rsidRPr" {
			_cbfgg, _cbbgf := _ffgec.Value, error(nil)
			if _cbbgf != nil {
				return _cbbgf
			}
			_fbfgdd.RsidRPrAttr = &_cbfgg
			continue
		}
		if _ffgec.Name.Local == "rsidDel" {
			_agddf, _efffc := _ffgec.Value, error(nil)
			if _efffc != nil {
				return _efffc
			}
			_fbfgdd.RsidDelAttr = &_agddf
			continue
		}
		if _ffgec.Name.Local == "rsidR" {
			_dbgda, _faecac := _ffgec.Value, error(nil)
			if _faecac != nil {
				return _faecac
			}
			_fbfgdd.RsidRAttr = &_dbgda
			continue
		}
	}
_gfebb:
	for {
		_fggac, _gecac := d.Token()
		if _gecac != nil {
			return _gecac
		}
		switch _ggecg := _fggac.(type) {
		case _d.StartElement:
			switch _ggecg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPr"}:
				_fbfgdd.RPr = NewCT_RPr()
				if _gcbcg := d.DecodeElement(_fbfgdd.RPr, &_ggecg); _gcbcg != nil {
					return _gcbcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "br"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "br"}:
				_beecgf := NewEG_RunInnerContent()
				_beecgf.Br = NewCT_Br()
				if _gecfc := d.DecodeElement(_beecgf.Br, &_ggecg); _gecfc != nil {
					return _gecfc
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _beecgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "t"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "t"}:
				_eecfgd := NewEG_RunInnerContent()
				_eecfgd.T = NewCT_Text()
				if _abafg := d.DecodeElement(_eecfgd.T, &_ggecg); _abafg != nil {
					return _abafg
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _eecfgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "contentPart"}:
				_cadab := NewEG_RunInnerContent()
				_cadab.ContentPart = NewCT_Rel()
				if _acge := d.DecodeElement(_cadab.ContentPart, &_ggecg); _acge != nil {
					return _acge
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _cadab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "delText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "delText"}:
				_edbg := NewEG_RunInnerContent()
				_edbg.DelText = NewCT_Text()
				if _ffcbb := d.DecodeElement(_edbg.DelText, &_ggecg); _ffcbb != nil {
					return _ffcbb
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _edbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "instrText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "instrText"}:
				_ececf := NewEG_RunInnerContent()
				_ececf.InstrText = NewCT_Text()
				if _gbae := d.DecodeElement(_ececf.InstrText, &_ggecg); _gbae != nil {
					return _gbae
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _ececf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "delInstrText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "delInstrText"}:
				_eeda := NewEG_RunInnerContent()
				_eeda.DelInstrText = NewCT_Text()
				if _egdfd := d.DecodeElement(_eeda.DelInstrText, &_ggecg); _egdfd != nil {
					return _egdfd
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _eeda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noBreakHyphen"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noBreakHyphen"}:
				_agfaec := NewEG_RunInnerContent()
				_agfaec.NoBreakHyphen = NewCT_Empty()
				if _cdafff := d.DecodeElement(_agfaec.NoBreakHyphen, &_ggecg); _cdafff != nil {
					return _cdafff
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _agfaec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "softHyphen"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "softHyphen"}:
				_ebcdb := NewEG_RunInnerContent()
				_ebcdb.SoftHyphen = NewCT_Empty()
				if _gacac := d.DecodeElement(_ebcdb.SoftHyphen, &_ggecg); _gacac != nil {
					return _gacac
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _ebcdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dayShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dayShort"}:
				_aedbac := NewEG_RunInnerContent()
				_aedbac.DayShort = NewCT_Empty()
				if _ffcbae := d.DecodeElement(_aedbac.DayShort, &_ggecg); _ffcbae != nil {
					return _ffcbae
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _aedbac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "monthShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "monthShort"}:
				_dgaeg := NewEG_RunInnerContent()
				_dgaeg.MonthShort = NewCT_Empty()
				if _dabbee := d.DecodeElement(_dgaeg.MonthShort, &_ggecg); _dabbee != nil {
					return _dabbee
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _dgaeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "yearShort"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "yearShort"}:
				_cfaab := NewEG_RunInnerContent()
				_cfaab.YearShort = NewCT_Empty()
				if _bceag := d.DecodeElement(_cfaab.YearShort, &_ggecg); _bceag != nil {
					return _bceag
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _cfaab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dayLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dayLong"}:
				_bcbcf := NewEG_RunInnerContent()
				_bcbcf.DayLong = NewCT_Empty()
				if _cdba := d.DecodeElement(_bcbcf.DayLong, &_ggecg); _cdba != nil {
					return _cdba
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _bcbcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "monthLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "monthLong"}:
				_ccgca := NewEG_RunInnerContent()
				_ccgca.MonthLong = NewCT_Empty()
				if _bffcd := d.DecodeElement(_ccgca.MonthLong, &_ggecg); _bffcd != nil {
					return _bffcd
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _ccgca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "yearLong"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "yearLong"}:
				_bcdcd := NewEG_RunInnerContent()
				_bcdcd.YearLong = NewCT_Empty()
				if _bcfgc := d.DecodeElement(_bcdcd.YearLong, &_ggecg); _bcfgc != nil {
					return _bcfgc
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _bcdcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "annotationRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "annotationRef"}:
				_abdcb := NewEG_RunInnerContent()
				_abdcb.AnnotationRef = NewCT_Empty()
				if _accca := d.DecodeElement(_abdcb.AnnotationRef, &_ggecg); _accca != nil {
					return _accca
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _abdcb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnoteRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnoteRef"}:
				_bgffe := NewEG_RunInnerContent()
				_bgffe.FootnoteRef = NewCT_Empty()
				if _dcfbff := d.DecodeElement(_bgffe.FootnoteRef, &_ggecg); _dcfbff != nil {
					return _dcfbff
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _bgffe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnoteRef"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnoteRef"}:
				_eabaf := NewEG_RunInnerContent()
				_eabaf.EndnoteRef = NewCT_Empty()
				if _bcbdc := d.DecodeElement(_eabaf.EndnoteRef, &_ggecg); _bcbdc != nil {
					return _bcbdc
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _eabaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "separator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "separator"}:
				_acace := NewEG_RunInnerContent()
				_acace.Separator = NewCT_Empty()
				if _bgeee := d.DecodeElement(_acace.Separator, &_ggecg); _bgeee != nil {
					return _bgeee
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _acace)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "continuationSeparator"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "continuationSeparator"}:
				_bfef := NewEG_RunInnerContent()
				_bfef.ContinuationSeparator = NewCT_Empty()
				if _adgfag := d.DecodeElement(_bfef.ContinuationSeparator, &_ggecg); _adgfag != nil {
					return _adgfag
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _bfef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sym"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sym"}:
				_degff := NewEG_RunInnerContent()
				_degff.Sym = NewCT_Sym()
				if _ddbdb := d.DecodeElement(_degff.Sym, &_ggecg); _ddbdb != nil {
					return _ddbdb
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _degff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pgNum"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pgNum"}:
				_gfdgc := NewEG_RunInnerContent()
				_gfdgc.PgNum = NewCT_Empty()
				if _acabe := d.DecodeElement(_gfdgc.PgNum, &_ggecg); _acabe != nil {
					return _acabe
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _gfdgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cr"}:
				_bggg := NewEG_RunInnerContent()
				_bggg.Cr = NewCT_Empty()
				if _bggeb := d.DecodeElement(_bggg.Cr, &_ggecg); _bggeb != nil {
					return _bggeb
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _bggg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tab"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tab"}:
				_ffaafe := NewEG_RunInnerContent()
				_ffaafe.Tab = NewCT_Empty()
				if _fafff := d.DecodeElement(_ffaafe.Tab, &_ggecg); _fafff != nil {
					return _fafff
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _ffaafe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "object"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "object"}:
				_cceeg := NewEG_RunInnerContent()
				_cceeg.Object = NewCT_Object()
				if _dagda := d.DecodeElement(_cceeg.Object, &_ggecg); _dagda != nil {
					return _dagda
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _cceeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pict"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pict"}:
				_fgfae := NewEG_RunInnerContent()
				_fgfae.Pict = NewCT_Picture()
				if _geagc := d.DecodeElement(_fgfae.Pict, &_ggecg); _geagc != nil {
					return _geagc
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _fgfae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldChar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldChar"}:
				_fefg := NewEG_RunInnerContent()
				_fefg.FldChar = NewCT_FldChar()
				if _abbb := d.DecodeElement(_fefg.FldChar, &_ggecg); _abbb != nil {
					return _abbb
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _fefg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ruby"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ruby"}:
				_fffe := NewEG_RunInnerContent()
				_fffe.Ruby = NewCT_Ruby()
				if _fdbbbg := d.DecodeElement(_fffe.Ruby, &_ggecg); _fdbbbg != nil {
					return _fdbbbg
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _fffe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "footnoteReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "footnoteReference"}:
				_dgddb := NewEG_RunInnerContent()
				_dgddb.FootnoteReference = NewCT_FtnEdnRef()
				if _edcdgf := d.DecodeElement(_dgddb.FootnoteReference, &_ggecg); _edcdgf != nil {
					return _edcdgf
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _dgddb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnoteReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnoteReference"}:
				_gdgea := NewEG_RunInnerContent()
				_gdgea.EndnoteReference = NewCT_FtnEdnRef()
				if _daggd := d.DecodeElement(_gdgea.EndnoteReference, &_ggecg); _daggd != nil {
					return _daggd
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _gdgea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentReference"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentReference"}:
				_aaccc := NewEG_RunInnerContent()
				_aaccc.CommentReference = NewCT_Markup()
				if _daefg := d.DecodeElement(_aaccc.CommentReference, &_ggecg); _daefg != nil {
					return _daefg
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _aaccc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawing"}:
				_bcgge := NewEG_RunInnerContent()
				_bcgge.Drawing = NewCT_Drawing()
				if _cfdff := d.DecodeElement(_bcgge.Drawing, &_ggecg); _cfdff != nil {
					return _cfdff
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _bcgge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ptab"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ptab"}:
				_ccdde := NewEG_RunInnerContent()
				_ccdde.Ptab = NewCT_PTab()
				if _dfaef := d.DecodeElement(_ccdde.Ptab, &_ggecg); _dfaef != nil {
					return _dfaef
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _ccdde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lastRenderedPageBreak"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lastRenderedPageBreak"}:
				_cefeg := NewEG_RunInnerContent()
				_cefeg.LastRenderedPageBreak = NewCT_Empty()
				if _eagfa := d.DecodeElement(_cefeg.LastRenderedPageBreak, &_ggecg); _eagfa != nil {
					return _eagfa
				}
				_fbfgdd.EG_RunInnerContent = append(_fbfgdd.EG_RunInnerContent, _cefeg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fmarkup\u002dcompatibility\u002f2006", Local: "AlternateContent"}:
				_gebcef := &AlternateContentRun{}
				if _dfbac := d.DecodeElement(_gebcef, &_ggecg); _dfbac != nil {
					return _dfbac
				}
				_fbfgdd.Extra = append(_fbfgdd.Extra, _gebcef)
			default:
				_edbbf := &_ga.XSDAny{}
				if _edfcc := d.DecodeElement(_edbbf, &_ggecg); _edfcc != nil {
					return _edfcc
				}
				_fbfgdd.Extra = append(_fbfgdd.Extra, _edbbf)
			}
		case _d.EndElement:
			break _gfebb
		case _d.CharData:
		}
	}
	return nil
}
func (_cagaga ST_MailMergeOdsoFMDFieldType) Validate() error { return _cagaga.ValidateWithPath("") }
func (_egded *ST_Jc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffgeb, _aadabe := d.Token()
	if _aadabe != nil {
		return _aadabe
	}
	if _cddfa, _gdfadd := _ffgeb.(_d.EndElement); _gdfadd && _cddfa.Name == start.Name {
		*_egded = 1
		return nil
	}
	if _gggfg, _dgffcg := _ffgeb.(_d.CharData); !_dgffcg {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ffgeb)
	} else {
		switch string(_gggfg) {
		case "":
			*_egded = 0
		case "start":
			*_egded = 1
		case "center":
			*_egded = 2
		case "end":
			*_egded = 3
		case "both":
			*_egded = 4
		case "mediumKashida":
			*_egded = 5
		case "distribute":
			*_egded = 6
		case "numTab":
			*_egded = 7
		case "highKashida":
			*_egded = 8
		case "lowKashida":
			*_egded = 9
		case "thaiDistribute":
			*_egded = 10
		case "left":
			*_egded = 11
		case "right":
			*_egded = 12
		}
	}
	_ffgeb, _aadabe = d.Token()
	if _aadabe != nil {
		return _aadabe
	}
	if _agffe, _abbcca := _ffgeb.(_d.EndElement); _abbcca && _agffe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ffgeb)
}
func (_abcde ST_Em) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_abcde.String(), start)
}

// Validate validates the CT_LevelSuffix and its children
func (_egfb *CT_LevelSuffix) Validate() error { return _egfb.ValidateWithPath("CT_LevelSuffix") }
func NewCT_Placeholder() *CT_Placeholder {
	_bgff := &CT_Placeholder{}
	_bgff.DocPart = NewCT_String()
	return _bgff
}
func (_bccddd *ST_ObjectDrawAspect) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eeeaca, _aebbc := d.Token()
	if _aebbc != nil {
		return _aebbc
	}
	if _cggeb, _dbcdgb := _eeeaca.(_d.EndElement); _dbcdgb && _cggeb.Name == start.Name {
		*_bccddd = 1
		return nil
	}
	if _bddcb, _aeafcc := _eeeaca.(_d.CharData); !_aeafcc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _eeeaca)
	} else {
		switch string(_bddcb) {
		case "":
			*_bccddd = 0
		case "content":
			*_bccddd = 1
		case "icon":
			*_bccddd = 2
		}
	}
	_eeeaca, _aebbc = d.Token()
	if _aebbc != nil {
		return _aebbc
	}
	if _fgccf, _adcada := _eeeaca.(_d.EndElement); _adcada && _fgccf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _eeeaca)
}

// ValidateWithPath validates the WdCT_PosHChoice and its children, prefixing error messages with path
func (_ccdbg *WdCT_PosHChoice) ValidateWithPath(path string) error {
	if _dbefbf := _ccdbg.Align.ValidateWithPath(path + "\u002fAlign"); _dbefbf != nil {
		return _dbefbf
	}
	return nil
}

// ValidateWithPath validates the WdCT_TextboxInfo and its children, prefixing error messages with path
func (_fccfd *WdCT_TextboxInfo) ValidateWithPath(path string) error {
	if _cbbdbe := _fccfd.TxbxContent.ValidateWithPath(path + "\u002fTxbxContent"); _cbbdbe != nil {
		return _cbbdbe
	}
	if _fccfd.ExtLst != nil {
		if _beffde := _fccfd.ExtLst.ValidateWithPath(path + "\u002fExtLst"); _beffde != nil {
			return _beffde
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TblCellMar and its children, prefixing error messages with path
func (_deeeb *CT_TblCellMar) ValidateWithPath(path string) error {
	if _deeeb.Top != nil {
		if _cbdac := _deeeb.Top.ValidateWithPath(path + "\u002fTop"); _cbdac != nil {
			return _cbdac
		}
	}
	if _deeeb.Start != nil {
		if _gcaga := _deeeb.Start.ValidateWithPath(path + "\u002fStart"); _gcaga != nil {
			return _gcaga
		}
	}
	if _deeeb.Left != nil {
		if _fgaffa := _deeeb.Left.ValidateWithPath(path + "\u002fLeft"); _fgaffa != nil {
			return _fgaffa
		}
	}
	if _deeeb.Bottom != nil {
		if _cceeb := _deeeb.Bottom.ValidateWithPath(path + "\u002fBottom"); _cceeb != nil {
			return _cceeb
		}
	}
	if _deeeb.End != nil {
		if _adcbd := _deeeb.End.ValidateWithPath(path + "\u002fEnd"); _adcbd != nil {
			return _adcbd
		}
	}
	if _deeeb.Right != nil {
		if _eeaeba := _deeeb.Right.ValidateWithPath(path + "\u002fRight"); _eeaeba != nil {
			return _eeaeba
		}
	}
	return nil
}

// Validate validates the CT_MailMergeDataType and its children
func (_fcba *CT_MailMergeDataType) Validate() error {
	return _fcba.ValidateWithPath("CT_MailMergeDataType")
}

// Validate validates the CT_DecimalNumber and its children
func (_ggef *CT_DecimalNumber) Validate() error { return _ggef.ValidateWithPath("CT_DecimalNumber") }

// ValidateWithPath validates the CT_HdrFtrRef and its children, prefixing error messages with path
func (_gbbd *CT_HdrFtrRef) ValidateWithPath(path string) error {
	if _gbbd.TypeAttr == ST_HdrFtrUnset {
		return _b.Errorf("\u0025s\u002fTypeAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _acae := _gbbd.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _acae != nil {
		return _acae
	}
	return nil
}
func (_dffbd *CT_CustomXmlRow) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cdgc := range start.Attr {
		if _cdgc.Name.Local == "uri" {
			_eaffg, _gefad := _cdgc.Value, error(nil)
			if _gefad != nil {
				return _gefad
			}
			_dffbd.UriAttr = &_eaffg
			continue
		}
		if _cdgc.Name.Local == "element" {
			_bfbe, _fgcg := _cdgc.Value, error(nil)
			if _fgcg != nil {
				return _fgcg
			}
			_dffbd.ElementAttr = _bfbe
			continue
		}
	}
_cace:
	for {
		_caeb, _bdcce := d.Token()
		if _bdcce != nil {
			return _bdcce
		}
		switch _dgbad := _caeb.(type) {
		case _d.StartElement:
			switch _dgbad.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlPr"}:
				_dffbd.CustomXmlPr = NewCT_CustomXmlPr()
				if _adgc := d.DecodeElement(_dffbd.CustomXmlPr, &_dgbad); _adgc != nil {
					return _adgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tr"}:
				_aggb := NewEG_ContentRowContent()
				_cagcb := NewCT_Row()
				if _cebbg := d.DecodeElement(_cagcb, &_dgbad); _cebbg != nil {
					return _cebbg
				}
				_aggb.Tr = append(_aggb.Tr, _cagcb)
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _aggb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_gbfc := NewEG_ContentRowContent()
				_gbfc.CustomXml = NewCT_CustomXmlRow()
				if _acff := d.DecodeElement(_gbfc.CustomXml, &_dgbad); _acff != nil {
					return _acff
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _gbfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_edfea := NewEG_ContentRowContent()
				_edfea.Sdt = NewCT_SdtRow()
				if _egcge := d.DecodeElement(_edfea.Sdt, &_dgbad); _egcge != nil {
					return _egcge
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _edfea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_fdfc := NewEG_ContentRowContent()
				_dfff := NewEG_RunLevelElts()
				_dfff.ProofErr = NewCT_ProofErr()
				if _gcfd := d.DecodeElement(_dfff.ProofErr, &_dgbad); _gcfd != nil {
					return _gcfd
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _fdfc)
				_fdfc.EG_RunLevelElts = append(_fdfc.EG_RunLevelElts, _dfff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_eeeg := NewEG_ContentRowContent()
				_cdaaf := NewEG_RunLevelElts()
				_cdaaf.PermStart = NewCT_PermStart()
				if _dadbd := d.DecodeElement(_cdaaf.PermStart, &_dgbad); _dadbd != nil {
					return _dadbd
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _eeeg)
				_eeeg.EG_RunLevelElts = append(_eeeg.EG_RunLevelElts, _cdaaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_dffca := NewEG_ContentRowContent()
				_edbc := NewEG_RunLevelElts()
				_edbc.PermEnd = NewCT_Perm()
				if _bdbf := d.DecodeElement(_edbc.PermEnd, &_dgbad); _bdbf != nil {
					return _bdbf
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _dffca)
				_dffca.EG_RunLevelElts = append(_dffca.EG_RunLevelElts, _edbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_fgfg := NewEG_ContentRowContent()
				_cfbe := NewEG_RunLevelElts()
				_cfbe.Ins = NewCT_RunTrackChange()
				if _faea := d.DecodeElement(_cfbe.Ins, &_dgbad); _faea != nil {
					return _faea
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _fgfg)
				_fgfg.EG_RunLevelElts = append(_fgfg.EG_RunLevelElts, _cfbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_gbda := NewEG_ContentRowContent()
				_efce := NewEG_RunLevelElts()
				_efce.Del = NewCT_RunTrackChange()
				if _abfc := d.DecodeElement(_efce.Del, &_dgbad); _abfc != nil {
					return _abfc
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _gbda)
				_gbda.EG_RunLevelElts = append(_gbda.EG_RunLevelElts, _efce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_cdac := NewEG_ContentRowContent()
				_bfcec := NewEG_RunLevelElts()
				_bfcec.MoveFrom = NewCT_RunTrackChange()
				if _eccc := d.DecodeElement(_bfcec.MoveFrom, &_dgbad); _eccc != nil {
					return _eccc
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _cdac)
				_cdac.EG_RunLevelElts = append(_cdac.EG_RunLevelElts, _bfcec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_dacdfc := NewEG_ContentRowContent()
				_agfdc := NewEG_RunLevelElts()
				_agfdc.MoveTo = NewCT_RunTrackChange()
				if _bedee := d.DecodeElement(_agfdc.MoveTo, &_dgbad); _bedee != nil {
					return _bedee
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _dacdfc)
				_dacdfc.EG_RunLevelElts = append(_dacdfc.EG_RunLevelElts, _agfdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_dfdbd := NewEG_ContentRowContent()
				_agcca := NewEG_RunLevelElts()
				_bdaga := NewEG_RangeMarkupElements()
				_bdaga.BookmarkStart = NewCT_Bookmark()
				if _egcaa := d.DecodeElement(_bdaga.BookmarkStart, &_dgbad); _egcaa != nil {
					return _egcaa
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _dfdbd)
				_dfdbd.EG_RunLevelElts = append(_dfdbd.EG_RunLevelElts, _agcca)
				_agcca.EG_RangeMarkupElements = append(_agcca.EG_RangeMarkupElements, _bdaga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_ddfd := NewEG_ContentRowContent()
				_cedcb := NewEG_RunLevelElts()
				_acagg := NewEG_RangeMarkupElements()
				_acagg.BookmarkEnd = NewCT_MarkupRange()
				if _ffega := d.DecodeElement(_acagg.BookmarkEnd, &_dgbad); _ffega != nil {
					return _ffega
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _ddfd)
				_ddfd.EG_RunLevelElts = append(_ddfd.EG_RunLevelElts, _cedcb)
				_cedcb.EG_RangeMarkupElements = append(_cedcb.EG_RangeMarkupElements, _acagg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_ccfg := NewEG_ContentRowContent()
				_babf := NewEG_RunLevelElts()
				_fdcg := NewEG_RangeMarkupElements()
				_fdcg.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gafbg := d.DecodeElement(_fdcg.MoveFromRangeStart, &_dgbad); _gafbg != nil {
					return _gafbg
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _ccfg)
				_ccfg.EG_RunLevelElts = append(_ccfg.EG_RunLevelElts, _babf)
				_babf.EG_RangeMarkupElements = append(_babf.EG_RangeMarkupElements, _fdcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_fafc := NewEG_ContentRowContent()
				_dfcc := NewEG_RunLevelElts()
				_afdeg := NewEG_RangeMarkupElements()
				_afdeg.MoveFromRangeEnd = NewCT_MarkupRange()
				if _gfff := d.DecodeElement(_afdeg.MoveFromRangeEnd, &_dgbad); _gfff != nil {
					return _gfff
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _fafc)
				_fafc.EG_RunLevelElts = append(_fafc.EG_RunLevelElts, _dfcc)
				_dfcc.EG_RangeMarkupElements = append(_dfcc.EG_RangeMarkupElements, _afdeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dfae := NewEG_ContentRowContent()
				_dade := NewEG_RunLevelElts()
				_fbed := NewEG_RangeMarkupElements()
				_fbed.MoveToRangeStart = NewCT_MoveBookmark()
				if _fgdb := d.DecodeElement(_fbed.MoveToRangeStart, &_dgbad); _fgdb != nil {
					return _fgdb
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _dfae)
				_dfae.EG_RunLevelElts = append(_dfae.EG_RunLevelElts, _dade)
				_dade.EG_RangeMarkupElements = append(_dade.EG_RangeMarkupElements, _fbed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_becad := NewEG_ContentRowContent()
				_fdcfe := NewEG_RunLevelElts()
				_efgfd := NewEG_RangeMarkupElements()
				_efgfd.MoveToRangeEnd = NewCT_MarkupRange()
				if _gebdb := d.DecodeElement(_efgfd.MoveToRangeEnd, &_dgbad); _gebdb != nil {
					return _gebdb
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _becad)
				_becad.EG_RunLevelElts = append(_becad.EG_RunLevelElts, _fdcfe)
				_fdcfe.EG_RangeMarkupElements = append(_fdcfe.EG_RangeMarkupElements, _efgfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_dgced := NewEG_ContentRowContent()
				_gbgb := NewEG_RunLevelElts()
				_dgdfa := NewEG_RangeMarkupElements()
				_dgdfa.CommentRangeStart = NewCT_MarkupRange()
				if _dgfc := d.DecodeElement(_dgdfa.CommentRangeStart, &_dgbad); _dgfc != nil {
					return _dgfc
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _dgced)
				_dgced.EG_RunLevelElts = append(_dgced.EG_RunLevelElts, _gbgb)
				_gbgb.EG_RangeMarkupElements = append(_gbgb.EG_RangeMarkupElements, _dgdfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_aabb := NewEG_ContentRowContent()
				_dfac := NewEG_RunLevelElts()
				_eeff := NewEG_RangeMarkupElements()
				_eeff.CommentRangeEnd = NewCT_MarkupRange()
				if _feda := d.DecodeElement(_eeff.CommentRangeEnd, &_dgbad); _feda != nil {
					return _feda
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _aabb)
				_aabb.EG_RunLevelElts = append(_aabb.EG_RunLevelElts, _dfac)
				_dfac.EG_RangeMarkupElements = append(_dfac.EG_RangeMarkupElements, _eeff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_aeea := NewEG_ContentRowContent()
				_dfad := NewEG_RunLevelElts()
				_bedde := NewEG_RangeMarkupElements()
				_bedde.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _egcf := d.DecodeElement(_bedde.CustomXmlInsRangeStart, &_dgbad); _egcf != nil {
					return _egcf
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _aeea)
				_aeea.EG_RunLevelElts = append(_aeea.EG_RunLevelElts, _dfad)
				_dfad.EG_RangeMarkupElements = append(_dfad.EG_RangeMarkupElements, _bedde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_afac := NewEG_ContentRowContent()
				_becded := NewEG_RunLevelElts()
				_cebgg := NewEG_RangeMarkupElements()
				_cebgg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _abfd := d.DecodeElement(_cebgg.CustomXmlInsRangeEnd, &_dgbad); _abfd != nil {
					return _abfd
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _afac)
				_afac.EG_RunLevelElts = append(_afac.EG_RunLevelElts, _becded)
				_becded.EG_RangeMarkupElements = append(_becded.EG_RangeMarkupElements, _cebgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_fcgfd := NewEG_ContentRowContent()
				_bgdc := NewEG_RunLevelElts()
				_bfea := NewEG_RangeMarkupElements()
				_bfea.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _ddad := d.DecodeElement(_bfea.CustomXmlDelRangeStart, &_dgbad); _ddad != nil {
					return _ddad
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _fcgfd)
				_fcgfd.EG_RunLevelElts = append(_fcgfd.EG_RunLevelElts, _bgdc)
				_bgdc.EG_RangeMarkupElements = append(_bgdc.EG_RangeMarkupElements, _bfea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_cdcg := NewEG_ContentRowContent()
				_egfe := NewEG_RunLevelElts()
				_ddcef := NewEG_RangeMarkupElements()
				_ddcef.CustomXmlDelRangeEnd = NewCT_Markup()
				if _bgada := d.DecodeElement(_ddcef.CustomXmlDelRangeEnd, &_dgbad); _bgada != nil {
					return _bgada
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _cdcg)
				_cdcg.EG_RunLevelElts = append(_cdcg.EG_RunLevelElts, _egfe)
				_egfe.EG_RangeMarkupElements = append(_egfe.EG_RangeMarkupElements, _ddcef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_egbbg := NewEG_ContentRowContent()
				_cgded := NewEG_RunLevelElts()
				_feecb := NewEG_RangeMarkupElements()
				_feecb.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _cgcba := d.DecodeElement(_feecb.CustomXmlMoveFromRangeStart, &_dgbad); _cgcba != nil {
					return _cgcba
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _egbbg)
				_egbbg.EG_RunLevelElts = append(_egbbg.EG_RunLevelElts, _cgded)
				_cgded.EG_RangeMarkupElements = append(_cgded.EG_RangeMarkupElements, _feecb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_ddcb := NewEG_ContentRowContent()
				_degdc := NewEG_RunLevelElts()
				_gfef := NewEG_RangeMarkupElements()
				_gfef.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _ggdgc := d.DecodeElement(_gfef.CustomXmlMoveFromRangeEnd, &_dgbad); _ggdgc != nil {
					return _ggdgc
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _ddcb)
				_ddcb.EG_RunLevelElts = append(_ddcb.EG_RunLevelElts, _degdc)
				_degdc.EG_RangeMarkupElements = append(_degdc.EG_RangeMarkupElements, _gfef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gcga := NewEG_ContentRowContent()
				_fbfg := NewEG_RunLevelElts()
				_dbgad := NewEG_RangeMarkupElements()
				_dbgad.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _ffgb := d.DecodeElement(_dbgad.CustomXmlMoveToRangeStart, &_dgbad); _ffgb != nil {
					return _ffgb
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _gcga)
				_gcga.EG_RunLevelElts = append(_gcga.EG_RunLevelElts, _fbfg)
				_fbfg.EG_RangeMarkupElements = append(_fbfg.EG_RangeMarkupElements, _dbgad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_bgfc := NewEG_ContentRowContent()
				_fafcf := NewEG_RunLevelElts()
				_gcec := NewEG_RangeMarkupElements()
				_gcec.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _ecgefb := d.DecodeElement(_gcec.CustomXmlMoveToRangeEnd, &_dgbad); _ecgefb != nil {
					return _ecgefb
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _bgfc)
				_bgfc.EG_RunLevelElts = append(_bgfc.EG_RunLevelElts, _fafcf)
				_fafcf.EG_RangeMarkupElements = append(_fafcf.EG_RangeMarkupElements, _gcec)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_dcfbe := NewEG_ContentRowContent()
				_eadaf := NewEG_RunLevelElts()
				_dbeg := NewEG_MathContent()
				_dbeg.OMathPara = _f.NewOMathPara()
				if _agce := d.DecodeElement(_dbeg.OMathPara, &_dgbad); _agce != nil {
					return _agce
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _dcfbe)
				_dcfbe.EG_RunLevelElts = append(_dcfbe.EG_RunLevelElts, _eadaf)
				_eadaf.EG_MathContent = append(_eadaf.EG_MathContent, _dbeg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_adfg := NewEG_ContentRowContent()
				_gdagg := NewEG_RunLevelElts()
				_ddab := NewEG_MathContent()
				_ddab.OMath = _f.NewOMath()
				if _faab := d.DecodeElement(_ddab.OMath, &_dgbad); _faab != nil {
					return _faab
				}
				_dffbd.EG_ContentRowContent = append(_dffbd.EG_ContentRowContent, _adfg)
				_adfg.EG_RunLevelElts = append(_adfg.EG_RunLevelElts, _gdagg)
				_gdagg.EG_MathContent = append(_gdagg.EG_MathContent, _ddab)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_CustomXmlRow\u0020\u0025v", _dgbad.Name)
				if _dcce := d.Skip(); _dcce != nil {
					return _dcce
				}
			}
		case _d.EndElement:
			break _cace
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_NumRestart and its children
func (_dacdfd *CT_NumRestart) Validate() error { return _dacdfd.ValidateWithPath("CT_NumRestart") }
func (_fbfgf *EG_BlockLevelElts) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fbfgf.AltChunk != nil {
		_cdfff := _d.StartElement{Name: _d.Name{Local: "w:altChunk"}}
		for _, _gfdagf := range _fbfgf.AltChunk {
			e.EncodeElement(_gfdagf, _cdfff)
		}
	}
	if _fbfgf.EG_ContentBlockContent != nil {
		for _, _cddgg := range _fbfgf.EG_ContentBlockContent {
			_cddgg.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func (_ddcgdfb ST_Proof) String() string {
	switch _ddcgdfb {
	case 0:
		return ""
	case 1:
		return "clean"
	case 2:
		return "dirty"
	}
	return ""
}
func (_bbca *CT_Charset) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbca.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_bbca.ValAttr)})
	}
	if _bbca.CharacterSetAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:characterSet"}, Value: _b.Sprintf("\u0025v", *_bbca.CharacterSetAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_DisplacedByCustomXml byte

func (_abebbf ST_ObjectUpdateMode) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fcefb := _d.Attr{}
	_fcefb.Name = name
	switch _abebbf {
	case ST_ObjectUpdateModeUnset:
		_fcefb.Value = ""
	case ST_ObjectUpdateModeAlways:
		_fcefb.Value = "always"
	case ST_ObjectUpdateModeOnCall:
		_fcefb.Value = "onCall"
	}
	return _fcefb, nil
}
func (_eabcb ST_StyleType) Validate() error { return _eabcb.ValidateWithPath("") }
func (_dcacb *ST_DocPartGallery) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gdgecd, _dbbcfg := d.Token()
	if _dbbcfg != nil {
		return _dbbcfg
	}
	if _gecec, _fbgece := _gdgecd.(_d.EndElement); _fbgece && _gecec.Name == start.Name {
		*_dcacb = 1
		return nil
	}
	if _bggbb, _fgdcgd := _gdgecd.(_d.CharData); !_fgdcgd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _gdgecd)
	} else {
		switch string(_bggbb) {
		case "":
			*_dcacb = 0
		case "placeholder":
			*_dcacb = 1
		case "any":
			*_dcacb = 2
		case "default":
			*_dcacb = 3
		case "docParts":
			*_dcacb = 4
		case "coverPg":
			*_dcacb = 5
		case "eq":
			*_dcacb = 6
		case "ftrs":
			*_dcacb = 7
		case "hdrs":
			*_dcacb = 8
		case "pgNum":
			*_dcacb = 9
		case "tbls":
			*_dcacb = 10
		case "watermarks":
			*_dcacb = 11
		case "autoTxt":
			*_dcacb = 12
		case "txtBox":
			*_dcacb = 13
		case "pgNumT":
			*_dcacb = 14
		case "pgNumB":
			*_dcacb = 15
		case "pgNumMargins":
			*_dcacb = 16
		case "tblOfContents":
			*_dcacb = 17
		case "bib":
			*_dcacb = 18
		case "custQuickParts":
			*_dcacb = 19
		case "custCoverPg":
			*_dcacb = 20
		case "custEq":
			*_dcacb = 21
		case "custFtrs":
			*_dcacb = 22
		case "custHdrs":
			*_dcacb = 23
		case "custPgNum":
			*_dcacb = 24
		case "custTbls":
			*_dcacb = 25
		case "custWatermarks":
			*_dcacb = 26
		case "custAutoTxt":
			*_dcacb = 27
		case "custTxtBox":
			*_dcacb = 28
		case "custPgNumT":
			*_dcacb = 29
		case "custPgNumB":
			*_dcacb = 30
		case "custPgNumMargins":
			*_dcacb = 31
		case "custTblOfContents":
			*_dcacb = 32
		case "custBib":
			*_dcacb = 33
		case "custom1":
			*_dcacb = 34
		case "custom2":
			*_dcacb = 35
		case "custom3":
			*_dcacb = 36
		case "custom4":
			*_dcacb = 37
		case "custom5":
			*_dcacb = 38
		}
	}
	_gdgecd, _dbbcfg = d.Token()
	if _dbbcfg != nil {
		return _dbbcfg
	}
	if _gfbega, _fgbbde := _gdgecd.(_d.EndElement); _fgbbde && _gfbega.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _gdgecd)
}
func (_decag ST_StyleSort) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_decag.String(), start)
}
func (_cbffc ST_HpsMeasure) String() string {
	if _cbffc.ST_UnsignedDecimalNumber != nil {
		return _b.Sprintf("\u0025v", *_cbffc.ST_UnsignedDecimalNumber)
	}
	if _cbffc.ST_PositiveUniversalMeasure != nil {
		return _b.Sprintf("\u0025v", *_cbffc.ST_PositiveUniversalMeasure)
	}
	return ""
}

type ST_PTabAlignment byte

// Validate validates the EG_RubyContent and its children
func (_febef *EG_RubyContent) Validate() error { return _febef.ValidateWithPath("EG_RubyContent") }

// ValidateWithPath validates the CT_NumPr and its children, prefixing error messages with path
func (_cgfea *CT_NumPr) ValidateWithPath(path string) error {
	if _cgfea.Ilvl != nil {
		if _cegfe := _cgfea.Ilvl.ValidateWithPath(path + "\u002fIlvl"); _cegfe != nil {
			return _cegfe
		}
	}
	if _cgfea.NumId != nil {
		if _dcda := _cgfea.NumId.ValidateWithPath(path + "\u002fNumId"); _dcda != nil {
			return _dcda
		}
	}
	if _cgfea.NumberingChange != nil {
		if _aacdg := _cgfea.NumberingChange.ValidateWithPath(path + "\u002fNumberingChange"); _aacdg != nil {
			return _aacdg
		}
	}
	if _cgfea.Ins != nil {
		if _edadf := _cgfea.Ins.ValidateWithPath(path + "\u002fIns"); _edadf != nil {
			return _edadf
		}
	}
	return nil
}
func NewWdAnchor() *WdAnchor {
	_eaade := &WdAnchor{}
	_eaade.WdCT_Anchor = *NewWdCT_Anchor()
	return _eaade
}
func (_fcefa *CT_SignedTwipsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _fcefa.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dbggcc ST_DocPartType) String() string {
	switch _dbggcc {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "normal"
	case 3:
		return "autoExp"
	case 4:
		return "toolbar"
	case 5:
		return "speller"
	case 6:
		return "formFld"
	case 7:
		return "bbPlcHdr"
	}
	return ""
}
func (_gabdfb *ST_Shd) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_geebde, _bgdcde := d.Token()
	if _bgdcde != nil {
		return _bgdcde
	}
	if _agfbce, _gcfce := _geebde.(_d.EndElement); _gcfce && _agfbce.Name == start.Name {
		*_gabdfb = 1
		return nil
	}
	if _cgbfef, _gfgbda := _geebde.(_d.CharData); !_gfgbda {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _geebde)
	} else {
		switch string(_cgbfef) {
		case "":
			*_gabdfb = 0
		case "nil":
			*_gabdfb = 1
		case "clear":
			*_gabdfb = 2
		case "solid":
			*_gabdfb = 3
		case "horzStripe":
			*_gabdfb = 4
		case "vertStripe":
			*_gabdfb = 5
		case "reverseDiagStripe":
			*_gabdfb = 6
		case "diagStripe":
			*_gabdfb = 7
		case "horzCross":
			*_gabdfb = 8
		case "diagCross":
			*_gabdfb = 9
		case "thinHorzStripe":
			*_gabdfb = 10
		case "thinVertStripe":
			*_gabdfb = 11
		case "thinReverseDiagStripe":
			*_gabdfb = 12
		case "thinDiagStripe":
			*_gabdfb = 13
		case "thinHorzCross":
			*_gabdfb = 14
		case "thinDiagCross":
			*_gabdfb = 15
		case "pct5":
			*_gabdfb = 16
		case "pct10":
			*_gabdfb = 17
		case "pct12":
			*_gabdfb = 18
		case "pct15":
			*_gabdfb = 19
		case "pct20":
			*_gabdfb = 20
		case "pct25":
			*_gabdfb = 21
		case "pct30":
			*_gabdfb = 22
		case "pct35":
			*_gabdfb = 23
		case "pct37":
			*_gabdfb = 24
		case "pct40":
			*_gabdfb = 25
		case "pct45":
			*_gabdfb = 26
		case "pct50":
			*_gabdfb = 27
		case "pct55":
			*_gabdfb = 28
		case "pct60":
			*_gabdfb = 29
		case "pct62":
			*_gabdfb = 30
		case "pct65":
			*_gabdfb = 31
		case "pct70":
			*_gabdfb = 32
		case "pct75":
			*_gabdfb = 33
		case "pct80":
			*_gabdfb = 34
		case "pct85":
			*_gabdfb = 35
		case "pct87":
			*_gabdfb = 36
		case "pct90":
			*_gabdfb = 37
		case "pct95":
			*_gabdfb = 38
		}
	}
	_geebde, _bgdcde = d.Token()
	if _bgdcde != nil {
		return _bgdcde
	}
	if _baede, _caece := _geebde.(_d.EndElement); _caece && _baede.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _geebde)
}

// Validate validates the CT_TrPrBase and its children
func (_fcgab *CT_TrPrBase) Validate() error { return _fcgab.ValidateWithPath("CT_TrPrBase") }
func (_cgeeae *CT_Tabs) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_gbdfa := _d.StartElement{Name: _d.Name{Local: "w:tab"}}
	for _, _bafag := range _cgeeae.Tab {
		e.EncodeElement(_bafag, _gbdfa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_daebeg *ST_LineSpacingRule) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_daebeg = 0
	case "auto":
		*_daebeg = 1
	case "exact":
		*_daebeg = 2
	case "atLeast":
		*_daebeg = 3
	}
	return nil
}
func (_begbf WdST_RelFromV) Validate() error { return _begbf.ValidateWithPath("") }
func (_dbafg ST_Underline) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bacgd := _d.Attr{}
	_bacgd.Name = name
	switch _dbafg {
	case ST_UnderlineUnset:
		_bacgd.Value = ""
	case ST_UnderlineSingle:
		_bacgd.Value = "single"
	case ST_UnderlineWords:
		_bacgd.Value = "words"
	case ST_UnderlineDouble:
		_bacgd.Value = "double"
	case ST_UnderlineThick:
		_bacgd.Value = "thick"
	case ST_UnderlineDotted:
		_bacgd.Value = "dotted"
	case ST_UnderlineDottedHeavy:
		_bacgd.Value = "dottedHeavy"
	case ST_UnderlineDash:
		_bacgd.Value = "dash"
	case ST_UnderlineDashedHeavy:
		_bacgd.Value = "dashedHeavy"
	case ST_UnderlineDashLong:
		_bacgd.Value = "dashLong"
	case ST_UnderlineDashLongHeavy:
		_bacgd.Value = "dashLongHeavy"
	case ST_UnderlineDotDash:
		_bacgd.Value = "dotDash"
	case ST_UnderlineDashDotHeavy:
		_bacgd.Value = "dashDotHeavy"
	case ST_UnderlineDotDotDash:
		_bacgd.Value = "dotDotDash"
	case ST_UnderlineDashDotDotHeavy:
		_bacgd.Value = "dashDotDotHeavy"
	case ST_UnderlineWave:
		_bacgd.Value = "wave"
	case ST_UnderlineWavyHeavy:
		_bacgd.Value = "wavyHeavy"
	case ST_UnderlineWavyDouble:
		_bacgd.Value = "wavyDouble"
	case ST_UnderlineNone:
		_bacgd.Value = "none"
	}
	return _bacgd, nil
}

// ValidateWithPath validates the CT_MailMergeDataType and its children, prefixing error messages with path
func (_bfgaa *CT_MailMergeDataType) ValidateWithPath(path string) error { return nil }
func (_fgcgga ST_LevelSuffix) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fgcgga.String(), start)
}

type CT_SdtDocPart struct {

	// Document Part Gallery Filter
	DocPartGallery *CT_String

	// Document Part Category Filter
	DocPartCategory *CT_String

	// Built-In Document Part
	DocPartUnique *CT_OnOff
}
type CT_ObjectChoice struct {
	Control     *CT_Control
	ObjectLink  *CT_ObjectLink
	ObjectEmbed *CT_ObjectEmbed
	Movie       *CT_Rel
}

func (_fgaag *CT_TblGridCol) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dfgdf := range start.Attr {
		if _dfgdf.Name.Local == "w" {
			_acef, _gdbcb := ParseUnionST_TwipsMeasure(_dfgdf.Value)
			if _gdbcb != nil {
				return _gdbcb
			}
			_fgaag.WAttr = &_acef
			continue
		}
	}
	for {
		_eagbgaa, _fagb := d.Token()
		if _fagb != nil {
			return _b.Errorf("parsing\u0020CT_TblGridCol:\u0020\u0025s", _fagb)
		}
		if _fabaff, _dggeaa := _eagbgaa.(_d.EndElement); _dggeaa && _fabaff.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_VMerge() *CT_VMerge             { _abfad := &CT_VMerge{}; return _abfad }
func NewCT_DocumentBase() *CT_DocumentBase { _daabc := &CT_DocumentBase{}; return _daabc }
func NewCT_TxbxContent() *CT_TxbxContent   { _fcffc := &CT_TxbxContent{}; return _fcffc }
func (_bacbd *CT_DocDefaults) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ddge:
	for {
		_dcagd, _ceeb := d.Token()
		if _ceeb != nil {
			return _ceeb
		}
		switch _cgggbc := _dcagd.(type) {
		case _d.StartElement:
			switch _cgggbc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPrDefault"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPrDefault"}:
				_bacbd.RPrDefault = NewCT_RPrDefault()
				if _efee := d.DecodeElement(_bacbd.RPrDefault, &_cgggbc); _efee != nil {
					return _efee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPrDefault"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPrDefault"}:
				_bacbd.PPrDefault = NewCT_PPrDefault()
				if _feafb := d.DecodeElement(_bacbd.PPrDefault, &_cgggbc); _feafb != nil {
					return _feafb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DocDefaults\u0020\u0025v", _cgggbc.Name)
				if _ffacd := d.Skip(); _ffacd != nil {
					return _ffacd
				}
			}
		case _d.EndElement:
			break _ddge
		case _d.CharData:
		}
	}
	return nil
}
func (_dfdge ST_Lock) ValidateWithPath(path string) error {
	switch _dfdge {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dfdge))
	}
	return nil
}
func (_dcabf *CT_SdtContentRow) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_agfce:
	for {
		_cccbbc, _eabfgg := d.Token()
		if _eabfgg != nil {
			return _eabfgg
		}
		switch _afbaff := _cccbbc.(type) {
		case _d.StartElement:
			switch _afbaff.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tr"}:
				_acegdbc := NewCT_Row()
				if _ebagg := d.DecodeElement(_acegdbc, &_afbaff); _ebagg != nil {
					return _ebagg
				}
				_dcabf.Tr = append(_dcabf.Tr, _acegdbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_dcabf.CustomXml = NewCT_CustomXmlRow()
				if _fdbfc := d.DecodeElement(_dcabf.CustomXml, &_afbaff); _fdbfc != nil {
					return _fdbfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_dcabf.Sdt = NewCT_SdtRow()
				if _egade := d.DecodeElement(_dcabf.Sdt, &_afbaff); _egade != nil {
					return _egade
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_cdaab := NewEG_RunLevelElts()
				_cdaab.ProofErr = NewCT_ProofErr()
				if _baded := d.DecodeElement(_cdaab.ProofErr, &_afbaff); _baded != nil {
					return _baded
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _cdaab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_adaceg := NewEG_RunLevelElts()
				_adaceg.PermStart = NewCT_PermStart()
				if _ebebdb := d.DecodeElement(_adaceg.PermStart, &_afbaff); _ebebdb != nil {
					return _ebebdb
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _adaceg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_fbgfa := NewEG_RunLevelElts()
				_fbgfa.PermEnd = NewCT_Perm()
				if _fbgag := d.DecodeElement(_fbgfa.PermEnd, &_afbaff); _fbgag != nil {
					return _fbgag
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _fbgfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_afcec := NewEG_RunLevelElts()
				_afcec.Ins = NewCT_RunTrackChange()
				if _adgfd := d.DecodeElement(_afcec.Ins, &_afbaff); _adgfd != nil {
					return _adgfd
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _afcec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ebeda := NewEG_RunLevelElts()
				_ebeda.Del = NewCT_RunTrackChange()
				if _cebd := d.DecodeElement(_ebeda.Del, &_afbaff); _cebd != nil {
					return _cebd
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _ebeda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_cgaff := NewEG_RunLevelElts()
				_cgaff.MoveFrom = NewCT_RunTrackChange()
				if _ffccc := d.DecodeElement(_cgaff.MoveFrom, &_afbaff); _ffccc != nil {
					return _ffccc
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _cgaff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_ddfgb := NewEG_RunLevelElts()
				_ddfgb.MoveTo = NewCT_RunTrackChange()
				if _dcfbb := d.DecodeElement(_ddfgb.MoveTo, &_afbaff); _dcfbb != nil {
					return _dcfbb
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _ddfgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_bgaec := NewEG_RunLevelElts()
				_fafag := NewEG_RangeMarkupElements()
				_fafag.BookmarkStart = NewCT_Bookmark()
				if _ccdba := d.DecodeElement(_fafag.BookmarkStart, &_afbaff); _ccdba != nil {
					return _ccdba
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _bgaec)
				_bgaec.EG_RangeMarkupElements = append(_bgaec.EG_RangeMarkupElements, _fafag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_fbgea := NewEG_RunLevelElts()
				_ceda := NewEG_RangeMarkupElements()
				_ceda.BookmarkEnd = NewCT_MarkupRange()
				if _fgdfa := d.DecodeElement(_ceda.BookmarkEnd, &_afbaff); _fgdfa != nil {
					return _fgdfa
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _fbgea)
				_fbgea.EG_RangeMarkupElements = append(_fbgea.EG_RangeMarkupElements, _ceda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fbfbb := NewEG_RunLevelElts()
				_dafeb := NewEG_RangeMarkupElements()
				_dafeb.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gddbc := d.DecodeElement(_dafeb.MoveFromRangeStart, &_afbaff); _gddbc != nil {
					return _gddbc
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _fbfbb)
				_fbfbb.EG_RangeMarkupElements = append(_fbfbb.EG_RangeMarkupElements, _dafeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_gbgefd := NewEG_RunLevelElts()
				_cdaad := NewEG_RangeMarkupElements()
				_cdaad.MoveFromRangeEnd = NewCT_MarkupRange()
				if _abbaa := d.DecodeElement(_cdaad.MoveFromRangeEnd, &_afbaff); _abbaa != nil {
					return _abbaa
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _gbgefd)
				_gbgefd.EG_RangeMarkupElements = append(_gbgefd.EG_RangeMarkupElements, _cdaad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_adgeb := NewEG_RunLevelElts()
				_ddgde := NewEG_RangeMarkupElements()
				_ddgde.MoveToRangeStart = NewCT_MoveBookmark()
				if _dged := d.DecodeElement(_ddgde.MoveToRangeStart, &_afbaff); _dged != nil {
					return _dged
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _adgeb)
				_adgeb.EG_RangeMarkupElements = append(_adgeb.EG_RangeMarkupElements, _ddgde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_abefa := NewEG_RunLevelElts()
				_gbffg := NewEG_RangeMarkupElements()
				_gbffg.MoveToRangeEnd = NewCT_MarkupRange()
				if _ggbgc := d.DecodeElement(_gbffg.MoveToRangeEnd, &_afbaff); _ggbgc != nil {
					return _ggbgc
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _abefa)
				_abefa.EG_RangeMarkupElements = append(_abefa.EG_RangeMarkupElements, _gbffg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_ggbaf := NewEG_RunLevelElts()
				_dagag := NewEG_RangeMarkupElements()
				_dagag.CommentRangeStart = NewCT_MarkupRange()
				if _bdaade := d.DecodeElement(_dagag.CommentRangeStart, &_afbaff); _bdaade != nil {
					return _bdaade
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _ggbaf)
				_ggbaf.EG_RangeMarkupElements = append(_ggbaf.EG_RangeMarkupElements, _dagag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_egeeba := NewEG_RunLevelElts()
				_dagba := NewEG_RangeMarkupElements()
				_dagba.CommentRangeEnd = NewCT_MarkupRange()
				if _cgbdg := d.DecodeElement(_dagba.CommentRangeEnd, &_afbaff); _cgbdg != nil {
					return _cgbdg
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _egeeba)
				_egeeba.EG_RangeMarkupElements = append(_egeeba.EG_RangeMarkupElements, _dagba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_efgg := NewEG_RunLevelElts()
				_dedba := NewEG_RangeMarkupElements()
				_dedba.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _eaaab := d.DecodeElement(_dedba.CustomXmlInsRangeStart, &_afbaff); _eaaab != nil {
					return _eaaab
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _efgg)
				_efgg.EG_RangeMarkupElements = append(_efgg.EG_RangeMarkupElements, _dedba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_bcbcb := NewEG_RunLevelElts()
				_edbede := NewEG_RangeMarkupElements()
				_edbede.CustomXmlInsRangeEnd = NewCT_Markup()
				if _bgdagf := d.DecodeElement(_edbede.CustomXmlInsRangeEnd, &_afbaff); _bgdagf != nil {
					return _bgdagf
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _bcbcb)
				_bcbcb.EG_RangeMarkupElements = append(_bcbcb.EG_RangeMarkupElements, _edbede)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_ggdbg := NewEG_RunLevelElts()
				_aebdef := NewEG_RangeMarkupElements()
				_aebdef.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _fgefff := d.DecodeElement(_aebdef.CustomXmlDelRangeStart, &_afbaff); _fgefff != nil {
					return _fgefff
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _ggdbg)
				_ggdbg.EG_RangeMarkupElements = append(_ggdbg.EG_RangeMarkupElements, _aebdef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_bfdcf := NewEG_RunLevelElts()
				_addcc := NewEG_RangeMarkupElements()
				_addcc.CustomXmlDelRangeEnd = NewCT_Markup()
				if _dcdfb := d.DecodeElement(_addcc.CustomXmlDelRangeEnd, &_afbaff); _dcdfb != nil {
					return _dcdfb
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _bfdcf)
				_bfdcf.EG_RangeMarkupElements = append(_bfdcf.EG_RangeMarkupElements, _addcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_geaed := NewEG_RunLevelElts()
				_ceffc := NewEG_RangeMarkupElements()
				_ceffc.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _daebe := d.DecodeElement(_ceffc.CustomXmlMoveFromRangeStart, &_afbaff); _daebe != nil {
					return _daebe
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _geaed)
				_geaed.EG_RangeMarkupElements = append(_geaed.EG_RangeMarkupElements, _ceffc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_caeac := NewEG_RunLevelElts()
				_fabcc := NewEG_RangeMarkupElements()
				_fabcc.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _egbff := d.DecodeElement(_fabcc.CustomXmlMoveFromRangeEnd, &_afbaff); _egbff != nil {
					return _egbff
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _caeac)
				_caeac.EG_RangeMarkupElements = append(_caeac.EG_RangeMarkupElements, _fabcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_ceecf := NewEG_RunLevelElts()
				_cdadd := NewEG_RangeMarkupElements()
				_cdadd.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _eeaaf := d.DecodeElement(_cdadd.CustomXmlMoveToRangeStart, &_afbaff); _eeaaf != nil {
					return _eeaaf
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _ceecf)
				_ceecf.EG_RangeMarkupElements = append(_ceecf.EG_RangeMarkupElements, _cdadd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_fbceg := NewEG_RunLevelElts()
				_fbcdb := NewEG_RangeMarkupElements()
				_fbcdb.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _gbgc := d.DecodeElement(_fbcdb.CustomXmlMoveToRangeEnd, &_afbaff); _gbgc != nil {
					return _gbgc
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _fbceg)
				_fbceg.EG_RangeMarkupElements = append(_fbceg.EG_RangeMarkupElements, _fbcdb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_aaedcg := NewEG_RunLevelElts()
				_egaea := NewEG_MathContent()
				_egaea.OMathPara = _f.NewOMathPara()
				if _cdegga := d.DecodeElement(_egaea.OMathPara, &_afbaff); _cdegga != nil {
					return _cdegga
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _aaedcg)
				_aaedcg.EG_MathContent = append(_aaedcg.EG_MathContent, _egaea)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_ffcgbg := NewEG_RunLevelElts()
				_dfbacf := NewEG_MathContent()
				_dfbacf.OMath = _f.NewOMath()
				if _fagedf := d.DecodeElement(_dfbacf.OMath, &_afbaff); _fagedf != nil {
					return _fagedf
				}
				_dcabf.EG_RunLevelElts = append(_dcabf.EG_RunLevelElts, _ffcgbg)
				_ffcgbg.EG_MathContent = append(_ffcgbg.EG_MathContent, _dfbacf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SdtContentRow\u0020\u0025v", _afbaff.Name)
				if _ceaga := d.Skip(); _ceaga != nil {
					return _ceaga
				}
			}
		case _d.EndElement:
			break _agfce
		case _d.CharData:
		}
	}
	return nil
}

type CT_MoveBookmark struct {
	AuthorAttr               string
	DateAttr                 _c.Time
	NameAttr                 string
	ColFirstAttr             *int64
	ColLastAttr              *int64
	DisplacedByCustomXmlAttr ST_DisplacedByCustomXml

	// Annotation Identifier
	IdAttr int64
}

func (_affbgd *WdWsp) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_affbgd.WdCT_WordprocessingShape = *NewWdCT_WordprocessingShape()
	for _, _aaaff := range start.Attr {
		if _aaaff.Name.Local == "normalEastAsianFlow" {
			_aecgf, _bdaaf := _dd.ParseBool(_aaaff.Value)
			if _bdaaf != nil {
				return _bdaaf
			}
			_affbgd.NormalEastAsianFlowAttr = &_aecgf
			continue
		}
	}
_fcabc:
	for {
		_ddecge, _eegcgg := d.Token()
		if _eegcgg != nil {
			return _eegcgg
		}
		switch _aacbb := _ddecge.(type) {
		case _d.StartElement:
			switch _aacbb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvPr"}:
				_affbgd.CNvPr = _eb.NewCT_NonVisualDrawingProps()
				if _efefc := d.DecodeElement(_affbgd.CNvPr, &_aacbb); _efefc != nil {
					return _efefc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvSpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvSpPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvSpPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvSpPr"}:
				_affbgd.Choice = NewWdCT_WordprocessingShapeChoice()
				if _afbgea := d.DecodeElement(&_affbgd.Choice.CNvSpPr, &_aacbb); _afbgea != nil {
					return _afbgea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvCnPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvCnPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvCnPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvCnPr"}:
				_affbgd.Choice = NewWdCT_WordprocessingShapeChoice()
				if _fgedf := d.DecodeElement(&_affbgd.Choice.CNvCnPr, &_aacbb); _fgedf != nil {
					return _fgedf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "spPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "spPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "spPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spPr"}:
				if _bcdged := d.DecodeElement(_affbgd.SpPr, &_aacbb); _bcdged != nil {
					return _bcdged
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "style"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "style"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "style"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "style"}:
				_affbgd.Style = _eb.NewCT_ShapeStyle()
				if _egfcce := d.DecodeElement(_affbgd.Style, &_aacbb); _egfcce != nil {
					return _egfcce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_affbgd.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _efffda := d.DecodeElement(_affbgd.ExtLst, &_aacbb); _efffda != nil {
					return _efffda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "txbx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "txbx"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "txbx"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "txbx"}:
				_affbgd.WChoice = NewWdCT_WordprocessingShapeChoice1()
				if _dgdef := d.DecodeElement(&_affbgd.WChoice.Txbx, &_aacbb); _dgdef != nil {
					return _dgdef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "linkedTxbx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "linkedTxbx"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "linkedTxbx"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "linkedTxbx"}:
				_affbgd.WChoice = NewWdCT_WordprocessingShapeChoice1()
				if _ccbcgc := d.DecodeElement(&_affbgd.WChoice.LinkedTxbx, &_aacbb); _ccbcgc != nil {
					return _ccbcgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "bodyPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "bodyPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "bodyPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bodyPr"}:
				if _bbebce := d.DecodeElement(_affbgd.BodyPr, &_aacbb); _bbebce != nil {
					return _bbebce
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on WdWsp \u0025v", _aacbb.Name)
				if _ffaced := d.Skip(); _ffaced != nil {
					return _ffaced
				}
			}
		case _d.EndElement:
			break _fcabc
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CustomXmlCell and its children, prefixing error messages with path
func (_eeae *CT_CustomXmlCell) ValidateWithPath(path string) error {
	if _eeae.CustomXmlPr != nil {
		if _cfagc := _eeae.CustomXmlPr.ValidateWithPath(path + "\u002fCustomXmlPr"); _cfagc != nil {
			return _cfagc
		}
	}
	for _bcda, _fadb := range _eeae.EG_ContentCellContent {
		if _acgb := _fadb.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_ContentCellContent\u005b%d\u005d", path, _bcda)); _acgb != nil {
			return _acgb
		}
	}
	return nil
}
func NewCT_TrPrBase() *CT_TrPrBase { _cafef := &CT_TrPrBase{}; return _cafef }

type CT_DocPartName struct {

	// Name Value
	ValAttr string

	// Built-In Entry
	DecoratedAttr *_g.ST_OnOff
}

func (_bcceb ST_NumberFormat) ValidateWithPath(path string) error {
	switch _bcceb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_bcceb))
	}
	return nil
}
func (_aggac *CT_Lang) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _aggac.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fcdff *CT_RunTrackChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _agbfa := range start.Attr {
		if _agbfa.Name.Local == "author" {
			_dfacc, _dddaa := _agbfa.Value, error(nil)
			if _dddaa != nil {
				return _dddaa
			}
			_fcdff.AuthorAttr = _dfacc
			continue
		}
		if _agbfa.Name.Local == "date" {
			_dccgba, _gcadfc := ParseStdlibTime(_agbfa.Value)
			if _gcadfc != nil {
				return _gcadfc
			}
			_fcdff.DateAttr = &_dccgba
			continue
		}
		if _agbfa.Name.Local == "id" {
			_eaggg, _abgdb := _dd.ParseInt(_agbfa.Value, 10, 64)
			if _abgdb != nil {
				return _abgdb
			}
			_fcdff.IdAttr = _eaggg
			continue
		}
	}
	for {
		_fcgfc, _edbfe := d.Token()
		if _edbfe != nil {
			return _b.Errorf("parsing\u0020CT_RunTrackChange: \u0025s", _edbfe)
		}
		if _gbece, _bdgdf := _fcgfc.(_d.EndElement); _bdgdf && _gbece.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_TblGridCol struct {

	// Grid Column Width
	WAttr *_g.ST_TwipsMeasure
}

func (_adfaad ST_TextAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gdega := _d.Attr{}
	_gdega.Name = name
	switch _adfaad {
	case ST_TextAlignmentUnset:
		_gdega.Value = ""
	case ST_TextAlignmentTop:
		_gdega.Value = "top"
	case ST_TextAlignmentCenter:
		_gdega.Value = "center"
	case ST_TextAlignmentBaseline:
		_gdega.Value = "baseline"
	case ST_TextAlignmentBottom:
		_gdega.Value = "bottom"
	case ST_TextAlignmentAuto:
		_gdega.Value = "auto"
	}
	return _gdega, nil
}
func (_dacb *CT_BdoContentRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dacb.ValAttr != ST_DirectionUnset {
		_ecge, _edc := _dacb.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _edc != nil {
			return _edc
		}
		start.Attr = append(start.Attr, _ecge)
	}
	e.EncodeToken(start)
	if _dacb.FldSimple != nil {
		_egec := _d.StartElement{Name: _d.Name{Local: "w:fldSimple"}}
		for _, _bfg := range _dacb.FldSimple {
			e.EncodeElement(_bfg, _egec)
		}
	}
	if _dacb.Hyperlink != nil {
		_bef := _d.StartElement{Name: _d.Name{Local: "w:hyperlink"}}
		e.EncodeElement(_dacb.Hyperlink, _bef)
	}
	if _dacb.SubDoc != nil {
		_ccf := _d.StartElement{Name: _d.Name{Local: "w:subDoc"}}
		e.EncodeElement(_dacb.SubDoc, _ccf)
	}
	if _dacb.EG_ContentRunContent != nil {
		for _, _gbdc := range _dacb.EG_ContentRunContent {
			_gbdc.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_MultiLevelType and its children
func (_ebdag *CT_MultiLevelType) Validate() error {
	return _ebdag.ValidateWithPath("CT_MultiLevelType")
}

// ValidateWithPath validates the EG_RubyContent and its children, prefixing error messages with path
func (_eagff *EG_RubyContent) ValidateWithPath(path string) error {
	if _eagff.R != nil {
		if _gaafe := _eagff.R.ValidateWithPath(path + "\u002fR"); _gaafe != nil {
			return _gaafe
		}
	}
	for _dfdcc, _feccd := range _eagff.EG_RunLevelElts {
		if _aefed := _feccd.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _dfdcc)); _aefed != nil {
			return _aefed
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Border and its children, prefixing error messages with path
func (_fbef *CT_Border) ValidateWithPath(path string) error {
	if _fbef.ValAttr == ST_BorderUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _gdef := _fbef.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _gdef != nil {
		return _gdef
	}
	if _fbef.ColorAttr != nil {
		if _eabg := _fbef.ColorAttr.ValidateWithPath(path + "\u002fColorAttr"); _eabg != nil {
			return _eabg
		}
	}
	if _def := _fbef.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _def != nil {
		return _def
	}
	if _fbef.ShadowAttr != nil {
		if _ebfe := _fbef.ShadowAttr.ValidateWithPath(path + "/ShadowAttr"); _ebfe != nil {
			return _ebfe
		}
	}
	if _fbef.FrameAttr != nil {
		if _adgd := _fbef.FrameAttr.ValidateWithPath(path + "\u002fFrameAttr"); _adgd != nil {
			return _adgd
		}
	}
	return nil
}
func NewCT_Proof() *CT_Proof { _afbeg := &CT_Proof{}; return _afbeg }

// Validate validates the CT_LatentStyles and its children
func (_bfffc *CT_LatentStyles) Validate() error { return _bfffc.ValidateWithPath("CT_LatentStyles") }
func (_fdcged *CT_SdtRow) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dcdafg:
	for {
		_bccbcf, _ffggdce := d.Token()
		if _ffggdce != nil {
			return _ffggdce
		}
		switch _dcfge := _bccbcf.(type) {
		case _d.StartElement:
			switch _dcfge.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtPr"}:
				_fdcged.SdtPr = NewCT_SdtPr()
				if _gdffg := d.DecodeElement(_fdcged.SdtPr, &_dcfge); _gdffg != nil {
					return _gdffg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtEndPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtEndPr"}:
				_fdcged.SdtEndPr = NewCT_SdtEndPr()
				if _fgbge := d.DecodeElement(_fdcged.SdtEndPr, &_dcfge); _fgbge != nil {
					return _fgbge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdtContent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdtContent"}:
				_fdcged.SdtContent = NewCT_SdtContentRow()
				if _fabbcd := d.DecodeElement(_fdcged.SdtContent, &_dcfge); _fabbcd != nil {
					return _fabbcd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_SdtRow \u0025v", _dcfge.Name)
				if _edadc := d.Skip(); _edadc != nil {
					return _edadc
				}
			}
		case _d.EndElement:
			break _dcdafg
		case _d.CharData:
		}
	}
	return nil
}
func (_bdcbgf ST_FldCharType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bdcbgf.String(), start)
}

type ST_PageBorderDisplay byte

func NewCT_SdtContentRow() *CT_SdtContentRow { _cbagb := &CT_SdtContentRow{}; return _cbagb }

// Validate validates the CT_DocPartGallery and its children
func (_fdgd *CT_DocPartGallery) Validate() error { return _fdgd.ValidateWithPath("CT_DocPartGallery") }
func (_acaeb *CT_LvlLegacy) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dfgd := range start.Attr {
		if _dfgd.Name.Local == "legacy" {
			_dfafbc, _eebd := ParseUnionST_OnOff(_dfgd.Value)
			if _eebd != nil {
				return _eebd
			}
			_acaeb.LegacyAttr = &_dfafbc
			continue
		}
		if _dfgd.Name.Local == "legacySpace" {
			_feea, _dgda := ParseUnionST_TwipsMeasure(_dfgd.Value)
			if _dgda != nil {
				return _dgda
			}
			_acaeb.LegacySpaceAttr = &_feea
			continue
		}
		if _dfgd.Name.Local == "legacyIndent" {
			_bbee, _dedea := ParseUnionST_SignedTwipsMeasure(_dfgd.Value)
			if _dedea != nil {
				return _dedea
			}
			_acaeb.LegacyIndentAttr = &_bbee
			continue
		}
	}
	for {
		_eagfg, _gbggdb := d.Token()
		if _gbggdb != nil {
			return _b.Errorf("parsing\u0020CT_LvlLegacy:\u0020\u0025s", _gbggdb)
		}
		if _gdfc, _dfaeg := _eagfg.(_d.EndElement); _dfaeg && _gdfc.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_MailMergeSourceTypeUnset       ST_MailMergeSourceType = 0
	ST_MailMergeSourceTypeDatabase    ST_MailMergeSourceType = 1
	ST_MailMergeSourceTypeAddressBook ST_MailMergeSourceType = 2
	ST_MailMergeSourceTypeDocument1   ST_MailMergeSourceType = 3
	ST_MailMergeSourceTypeDocument2   ST_MailMergeSourceType = 4
	ST_MailMergeSourceTypeText        ST_MailMergeSourceType = 5
	ST_MailMergeSourceTypeEmail       ST_MailMergeSourceType = 6
	ST_MailMergeSourceTypeNative      ST_MailMergeSourceType = 7
	ST_MailMergeSourceTypeLegacy      ST_MailMergeSourceType = 8
	ST_MailMergeSourceTypeMaster      ST_MailMergeSourceType = 9
)

func NewCT_Font() *CT_Font { _adefb := &CT_Font{}; return _adefb }

type WebSettings struct{ CT_WebSettings }

func NewCT_SdtDocPart() *CT_SdtDocPart          { _eaeff := &CT_SdtDocPart{}; return _eaeff }
func (_bdabge ST_NumberFormat) Validate() error { return _bdabge.ValidateWithPath("") }

type CT_RPrChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
	RPr    *CT_RPrOriginal
}

func (_gebec *CT_ParaRPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fffbb:
	for {
		_dfega, _ddcbeg := d.Token()
		if _ddcbeg != nil {
			return _ddcbeg
		}
		switch _afgga := _dfega.(type) {
		case _d.StartElement:
			switch _afgga.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_gebec.Ins = NewCT_TrackChange()
				if _cgbagb := d.DecodeElement(_gebec.Ins, &_afgga); _cgbagb != nil {
					return _cgbagb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_gebec.Del = NewCT_TrackChange()
				if _ebbc := d.DecodeElement(_gebec.Del, &_afgga); _ebbc != nil {
					return _ebbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_gebec.MoveFrom = NewCT_TrackChange()
				if _ddage := d.DecodeElement(_gebec.MoveFrom, &_afgga); _ddage != nil {
					return _ddage
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_gebec.MoveTo = NewCT_TrackChange()
				if _aadcce := d.DecodeElement(_gebec.MoveTo, &_afgga); _aadcce != nil {
					return _aadcce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rStyle"}:
				_gebec.RStyle = NewCT_String()
				if _eabeg := d.DecodeElement(_gebec.RStyle, &_afgga); _eabeg != nil {
					return _eabeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rFonts"}:
				_gebec.RFonts = NewCT_Fonts()
				if _fdbbgg := d.DecodeElement(_gebec.RFonts, &_afgga); _fdbbgg != nil {
					return _fdbbgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "b"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "b"}:
				_gebec.B = NewCT_OnOff()
				if _cfegg := d.DecodeElement(_gebec.B, &_afgga); _cfegg != nil {
					return _cfegg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bCs"}:
				_gebec.BCs = NewCT_OnOff()
				if _ebfcc := d.DecodeElement(_gebec.BCs, &_afgga); _ebfcc != nil {
					return _ebfcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "i"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "i"}:
				_gebec.I = NewCT_OnOff()
				if _cfbeb := d.DecodeElement(_gebec.I, &_afgga); _cfbeb != nil {
					return _cfbeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "iCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "iCs"}:
				_gebec.ICs = NewCT_OnOff()
				if _fedde := d.DecodeElement(_gebec.ICs, &_afgga); _fedde != nil {
					return _fedde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "caps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "caps"}:
				_gebec.Caps = NewCT_OnOff()
				if _adcdgd := d.DecodeElement(_gebec.Caps, &_afgga); _adcdgd != nil {
					return _adcdgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smallCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smallCaps"}:
				_gebec.SmallCaps = NewCT_OnOff()
				if _gbacc := d.DecodeElement(_gebec.SmallCaps, &_afgga); _gbacc != nil {
					return _gbacc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strike"}:
				_gebec.Strike = NewCT_OnOff()
				if _ecbbg := d.DecodeElement(_gebec.Strike, &_afgga); _ecbbg != nil {
					return _ecbbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dstrike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dstrike"}:
				_gebec.Dstrike = NewCT_OnOff()
				if _aeggd := d.DecodeElement(_gebec.Dstrike, &_afgga); _aeggd != nil {
					return _aeggd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outline"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outline"}:
				_gebec.Outline = NewCT_OnOff()
				if _bdabd := d.DecodeElement(_gebec.Outline, &_afgga); _bdabd != nil {
					return _bdabd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shadow"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shadow"}:
				_gebec.Shadow = NewCT_OnOff()
				if _caeea := d.DecodeElement(_gebec.Shadow, &_afgga); _caeea != nil {
					return _caeea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "emboss"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "emboss"}:
				_gebec.Emboss = NewCT_OnOff()
				if _abdf := d.DecodeElement(_gebec.Emboss, &_afgga); _abdf != nil {
					return _abdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "imprint"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "imprint"}:
				_gebec.Imprint = NewCT_OnOff()
				if _bcfc := d.DecodeElement(_gebec.Imprint, &_afgga); _bcfc != nil {
					return _bcfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noProof"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noProof"}:
				_gebec.NoProof = NewCT_OnOff()
				if _adec := d.DecodeElement(_gebec.NoProof, &_afgga); _adec != nil {
					return _adec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_gebec.SnapToGrid = NewCT_OnOff()
				if _fedbea := d.DecodeElement(_gebec.SnapToGrid, &_afgga); _fedbea != nil {
					return _fedbea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vanish"}:
				_gebec.Vanish = NewCT_OnOff()
				if _dgcdb := d.DecodeElement(_gebec.Vanish, &_afgga); _dgcdb != nil {
					return _dgcdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "webHidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "webHidden"}:
				_gebec.WebHidden = NewCT_OnOff()
				if _cebcc := d.DecodeElement(_gebec.WebHidden, &_afgga); _cebcc != nil {
					return _cebcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "color"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "color"}:
				_gebec.Color = NewCT_Color()
				if _eaffed := d.DecodeElement(_gebec.Color, &_afgga); _eaffed != nil {
					return _eaffed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_gebec.Spacing = NewCT_SignedTwipsMeasure()
				if _bcfa := d.DecodeElement(_gebec.Spacing, &_afgga); _bcfa != nil {
					return _bcfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "w"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "w"}:
				_gebec.W = NewCT_TextScale()
				if _abdfd := d.DecodeElement(_gebec.W, &_afgga); _abdfd != nil {
					return _abdfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kern"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kern"}:
				_gebec.Kern = NewCT_HpsMeasure()
				if _ceegc := d.DecodeElement(_gebec.Kern, &_afgga); _ceegc != nil {
					return _ceegc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "position"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "position"}:
				_gebec.Position = NewCT_SignedHpsMeasure()
				if _gbedg := d.DecodeElement(_gebec.Position, &_afgga); _gbedg != nil {
					return _gbedg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_gebec.Sz = NewCT_HpsMeasure()
				if _fgaeg := d.DecodeElement(_gebec.Sz, &_afgga); _fgaeg != nil {
					return _fgaeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "szCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "szCs"}:
				_gebec.SzCs = NewCT_HpsMeasure()
				if _eaebac := d.DecodeElement(_gebec.SzCs, &_afgga); _eaebac != nil {
					return _eaebac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "highlight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "highlight"}:
				_gebec.Highlight = NewCT_Highlight()
				if _baabf := d.DecodeElement(_gebec.Highlight, &_afgga); _baabf != nil {
					return _baabf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "u"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "u"}:
				_gebec.U = NewCT_Underline()
				if _adafg := d.DecodeElement(_gebec.U, &_afgga); _adafg != nil {
					return _adafg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effect"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "effect"}:
				_gebec.Effect = NewCT_TextEffect()
				if _begag := d.DecodeElement(_gebec.Effect, &_afgga); _begag != nil {
					return _begag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdr"}:
				_gebec.Bdr = NewCT_Border()
				if _cgege := d.DecodeElement(_gebec.Bdr, &_afgga); _cgege != nil {
					return _cgege
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_gebec.Shd = NewCT_Shd()
				if _ffacdc := d.DecodeElement(_gebec.Shd, &_afgga); _ffacdc != nil {
					return _ffacdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fitText"}:
				_gebec.FitText = NewCT_FitText()
				if _efgea := d.DecodeElement(_gebec.FitText, &_afgga); _efgea != nil {
					return _efgea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vertAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vertAlign"}:
				_gebec.VertAlign = NewCT_VerticalAlignRun()
				if _bgcbd := d.DecodeElement(_gebec.VertAlign, &_afgga); _bgcbd != nil {
					return _bgcbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtl"}:
				_gebec.Rtl = NewCT_OnOff()
				if _dfbbb := d.DecodeElement(_gebec.Rtl, &_afgga); _dfbbb != nil {
					return _dfbbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cs"}:
				_gebec.Cs = NewCT_OnOff()
				if _acedc := d.DecodeElement(_gebec.Cs, &_afgga); _acedc != nil {
					return _acedc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "em"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "em"}:
				_gebec.Em = NewCT_Em()
				if _gfag := d.DecodeElement(_gebec.Em, &_afgga); _gfag != nil {
					return _gfag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lang"}:
				_gebec.Lang = NewCT_Language()
				if _geace := d.DecodeElement(_gebec.Lang, &_afgga); _geace != nil {
					return _geace
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "eastAsianLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "eastAsianLayout"}:
				_gebec.EastAsianLayout = NewCT_EastAsianLayout()
				if _cbdeg := d.DecodeElement(_gebec.EastAsianLayout, &_afgga); _cbdeg != nil {
					return _cbdeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "specVanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "specVanish"}:
				_gebec.SpecVanish = NewCT_OnOff()
				if _dfbbd := d.DecodeElement(_gebec.SpecVanish, &_afgga); _dfbbd != nil {
					return _dfbbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "oMath"}:
				_gebec.OMath = NewCT_OnOff()
				if _cdec := d.DecodeElement(_gebec.OMath, &_afgga); _cdec != nil {
					return _cdec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPrChange"}:
				_gebec.RPrChange = NewCT_ParaRPrChange()
				if _dcccb := d.DecodeElement(_gebec.RPrChange, &_afgga); _dcccb != nil {
					return _dcccb
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_ParaRPr\u0020\u0025v", _afgga.Name)
				if _gffee := d.Skip(); _gffee != nil {
					return _gffee
				}
			}
		case _d.EndElement:
			break _fffbb
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_HdrFtrReferences and its children, prefixing error messages with path
func (_cacfd *EG_HdrFtrReferences) ValidateWithPath(path string) error {
	if _cacfd.HeaderReference != nil {
		if _cdbcf := _cacfd.HeaderReference.ValidateWithPath(path + "\u002fHeaderReference"); _cdbcf != nil {
			return _cdbcf
		}
	}
	if _cacfd.FooterReference != nil {
		if _cfcbce := _cacfd.FooterReference.ValidateWithPath(path + "\u002fFooterReference"); _cfcbce != nil {
			return _cfcbce
		}
	}
	return nil
}

// Validate validates the CT_Object and its children
func (_aeege *CT_Object) Validate() error { return _aeege.ValidateWithPath("CT_Object") }

// Validate validates the CT_Ruby and its children
func (_ccgbd *CT_Ruby) Validate() error { return _ccgbd.ValidateWithPath("CT_Ruby") }
func (_bddca *CT_Ruby) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_bebbb := _d.StartElement{Name: _d.Name{Local: "w:rubyPr"}}
	e.EncodeElement(_bddca.RubyPr, _bebbb)
	_gdafd := _d.StartElement{Name: _d.Name{Local: "w:rt"}}
	e.EncodeElement(_bddca.Rt, _gdafd)
	_affgg := _d.StartElement{Name: _d.Name{Local: "w:rubyBase"}}
	e.EncodeElement(_bddca.RubyBase, _affgg)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_adcad ST_DisplacedByCustomXml) ValidateWithPath(path string) error {
	switch _adcad {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_adcad))
	}
	return nil
}

// ValidateWithPath validates the CT_TrackChangeRange and its children, prefixing error messages with path
func (_eagad *CT_TrackChangeRange) ValidateWithPath(path string) error {
	if _feaeeb := _eagad.DisplacedByCustomXmlAttr.ValidateWithPath(path + "\u002fDisplacedByCustomXmlAttr"); _feaeeb != nil {
		return _feaeeb
	}
	return nil
}
func (_ceceeg *EG_RPrBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gcgga:
	for {
		_dedbea, _eecfgdb := d.Token()
		if _eecfgdb != nil {
			return _eecfgdb
		}
		switch _dccef := _dedbea.(type) {
		case _d.StartElement:
			switch _dccef.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rStyle"}:
				_ceceeg.RStyle = NewCT_String()
				if _eceddc := d.DecodeElement(_ceceeg.RStyle, &_dccef); _eceddc != nil {
					return _eceddc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rFonts"}:
				_ceceeg.RFonts = NewCT_Fonts()
				if _bfbggf := d.DecodeElement(_ceceeg.RFonts, &_dccef); _bfbggf != nil {
					return _bfbggf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "b"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "b"}:
				_ceceeg.B = NewCT_OnOff()
				if _efbab := d.DecodeElement(_ceceeg.B, &_dccef); _efbab != nil {
					return _efbab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bCs"}:
				_ceceeg.BCs = NewCT_OnOff()
				if _afbbab := d.DecodeElement(_ceceeg.BCs, &_dccef); _afbbab != nil {
					return _afbbab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "i"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "i"}:
				_ceceeg.I = NewCT_OnOff()
				if _adgfc := d.DecodeElement(_ceceeg.I, &_dccef); _adgfc != nil {
					return _adgfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "iCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "iCs"}:
				_ceceeg.ICs = NewCT_OnOff()
				if _afeag := d.DecodeElement(_ceceeg.ICs, &_dccef); _afeag != nil {
					return _afeag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "caps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "caps"}:
				_ceceeg.Caps = NewCT_OnOff()
				if _geaaa := d.DecodeElement(_ceceeg.Caps, &_dccef); _geaaa != nil {
					return _geaaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smallCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smallCaps"}:
				_ceceeg.SmallCaps = NewCT_OnOff()
				if _cdbdd := d.DecodeElement(_ceceeg.SmallCaps, &_dccef); _cdbdd != nil {
					return _cdbdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strike"}:
				_ceceeg.Strike = NewCT_OnOff()
				if _edede := d.DecodeElement(_ceceeg.Strike, &_dccef); _edede != nil {
					return _edede
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dstrike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dstrike"}:
				_ceceeg.Dstrike = NewCT_OnOff()
				if _aececg := d.DecodeElement(_ceceeg.Dstrike, &_dccef); _aececg != nil {
					return _aececg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outline"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outline"}:
				_ceceeg.Outline = NewCT_OnOff()
				if _bafac := d.DecodeElement(_ceceeg.Outline, &_dccef); _bafac != nil {
					return _bafac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shadow"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shadow"}:
				_ceceeg.Shadow = NewCT_OnOff()
				if _egadga := d.DecodeElement(_ceceeg.Shadow, &_dccef); _egadga != nil {
					return _egadga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "emboss"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "emboss"}:
				_ceceeg.Emboss = NewCT_OnOff()
				if _aabafc := d.DecodeElement(_ceceeg.Emboss, &_dccef); _aabafc != nil {
					return _aabafc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "imprint"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "imprint"}:
				_ceceeg.Imprint = NewCT_OnOff()
				if _gdcgb := d.DecodeElement(_ceceeg.Imprint, &_dccef); _gdcgb != nil {
					return _gdcgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noProof"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noProof"}:
				_ceceeg.NoProof = NewCT_OnOff()
				if _cgbcgc := d.DecodeElement(_ceceeg.NoProof, &_dccef); _cgbcgc != nil {
					return _cgbcgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_ceceeg.SnapToGrid = NewCT_OnOff()
				if _dfagg := d.DecodeElement(_ceceeg.SnapToGrid, &_dccef); _dfagg != nil {
					return _dfagg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vanish"}:
				_ceceeg.Vanish = NewCT_OnOff()
				if _aaebb := d.DecodeElement(_ceceeg.Vanish, &_dccef); _aaebb != nil {
					return _aaebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "webHidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "webHidden"}:
				_ceceeg.WebHidden = NewCT_OnOff()
				if _ebfga := d.DecodeElement(_ceceeg.WebHidden, &_dccef); _ebfga != nil {
					return _ebfga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "color"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "color"}:
				_ceceeg.Color = NewCT_Color()
				if _gbgbef := d.DecodeElement(_ceceeg.Color, &_dccef); _gbgbef != nil {
					return _gbgbef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_ceceeg.Spacing = NewCT_SignedTwipsMeasure()
				if _ddecc := d.DecodeElement(_ceceeg.Spacing, &_dccef); _ddecc != nil {
					return _ddecc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "w"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "w"}:
				_ceceeg.W = NewCT_TextScale()
				if _dbdbc := d.DecodeElement(_ceceeg.W, &_dccef); _dbdbc != nil {
					return _dbdbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kern"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kern"}:
				_ceceeg.Kern = NewCT_HpsMeasure()
				if _bbgbgd := d.DecodeElement(_ceceeg.Kern, &_dccef); _bbgbgd != nil {
					return _bbgbgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "position"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "position"}:
				_ceceeg.Position = NewCT_SignedHpsMeasure()
				if _ceecd := d.DecodeElement(_ceceeg.Position, &_dccef); _ceecd != nil {
					return _ceecd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_ceceeg.Sz = NewCT_HpsMeasure()
				if _dfgfda := d.DecodeElement(_ceceeg.Sz, &_dccef); _dfgfda != nil {
					return _dfgfda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "szCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "szCs"}:
				_ceceeg.SzCs = NewCT_HpsMeasure()
				if _cfacg := d.DecodeElement(_ceceeg.SzCs, &_dccef); _cfacg != nil {
					return _cfacg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "highlight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "highlight"}:
				_ceceeg.Highlight = NewCT_Highlight()
				if _egcc := d.DecodeElement(_ceceeg.Highlight, &_dccef); _egcc != nil {
					return _egcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "u"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "u"}:
				_ceceeg.U = NewCT_Underline()
				if _gcaef := d.DecodeElement(_ceceeg.U, &_dccef); _gcaef != nil {
					return _gcaef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effect"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "effect"}:
				_ceceeg.Effect = NewCT_TextEffect()
				if _aecgd := d.DecodeElement(_ceceeg.Effect, &_dccef); _aecgd != nil {
					return _aecgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdr"}:
				_ceceeg.Bdr = NewCT_Border()
				if _ggagab := d.DecodeElement(_ceceeg.Bdr, &_dccef); _ggagab != nil {
					return _ggagab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_ceceeg.Shd = NewCT_Shd()
				if _ffdgga := d.DecodeElement(_ceceeg.Shd, &_dccef); _ffdgga != nil {
					return _ffdgga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fitText"}:
				_ceceeg.FitText = NewCT_FitText()
				if _eddcfa := d.DecodeElement(_ceceeg.FitText, &_dccef); _eddcfa != nil {
					return _eddcfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vertAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vertAlign"}:
				_ceceeg.VertAlign = NewCT_VerticalAlignRun()
				if _aaaad := d.DecodeElement(_ceceeg.VertAlign, &_dccef); _aaaad != nil {
					return _aaaad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtl"}:
				_ceceeg.Rtl = NewCT_OnOff()
				if _ggdcf := d.DecodeElement(_ceceeg.Rtl, &_dccef); _ggdcf != nil {
					return _ggdcf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cs"}:
				_ceceeg.Cs = NewCT_OnOff()
				if _dcacae := d.DecodeElement(_ceceeg.Cs, &_dccef); _dcacae != nil {
					return _dcacae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "em"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "em"}:
				_ceceeg.Em = NewCT_Em()
				if _debdg := d.DecodeElement(_ceceeg.Em, &_dccef); _debdg != nil {
					return _debdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lang"}:
				_ceceeg.Lang = NewCT_Language()
				if _ffbag := d.DecodeElement(_ceceeg.Lang, &_dccef); _ffbag != nil {
					return _ffbag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "eastAsianLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "eastAsianLayout"}:
				_ceceeg.EastAsianLayout = NewCT_EastAsianLayout()
				if _gcecf := d.DecodeElement(_ceceeg.EastAsianLayout, &_dccef); _gcecf != nil {
					return _gcecf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "specVanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "specVanish"}:
				_ceceeg.SpecVanish = NewCT_OnOff()
				if _bfeba := d.DecodeElement(_ceceeg.SpecVanish, &_dccef); _bfeba != nil {
					return _bfeba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "oMath"}:
				_ceceeg.OMath = NewCT_OnOff()
				if _egccd := d.DecodeElement(_ceceeg.OMath, &_dccef); _egccd != nil {
					return _egccd
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020EG_RPrBase\u0020\u0025v", _dccef.Name)
				if _gcbgc := d.Skip(); _gcbgc != nil {
					return _gcbgc
				}
			}
		case _d.EndElement:
			break _gcgga
		case _d.CharData:
		}
	}
	return nil
}

type CT_Sym struct {

	// Symbol Character Font
	FontAttr *string

	// Symbol Character Code
	CharAttr *string
}

// Validate validates the CT_FtnDocProps and its children
func (_dbddd *CT_FtnDocProps) Validate() error { return _dbddd.ValidateWithPath("CT_FtnDocProps") }

// ValidateWithPath validates the CT_PageBorder and its children, prefixing error messages with path
func (_cgdffa *CT_PageBorder) ValidateWithPath(path string) error {
	if _cgdffa.ValAttr == ST_BorderUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _faaf := _cgdffa.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _faaf != nil {
		return _faaf
	}
	if _cgdffa.ColorAttr != nil {
		if _bdadgc := _cgdffa.ColorAttr.ValidateWithPath(path + "\u002fColorAttr"); _bdadgc != nil {
			return _bdadgc
		}
	}
	if _fbgcc := _cgdffa.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _fbgcc != nil {
		return _fbgcc
	}
	if _cgdffa.ShadowAttr != nil {
		if _fdcgb := _cgdffa.ShadowAttr.ValidateWithPath(path + "/ShadowAttr"); _fdcgb != nil {
			return _fdcgb
		}
	}
	if _cgdffa.FrameAttr != nil {
		if _dfead := _cgdffa.FrameAttr.ValidateWithPath(path + "\u002fFrameAttr"); _dfead != nil {
			return _dfead
		}
	}
	return nil
}
func (_afbfc ST_Wrap) ValidateWithPath(path string) error {
	switch _afbfc {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_afbfc))
	}
	return nil
}
func NewCT_MathCtrlIns() *CT_MathCtrlIns { _fgdca := &CT_MathCtrlIns{}; return _fgdca }
func (_bbdce *ST_NumberFormat) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bbdce = 0
	case "decimal":
		*_bbdce = 1
	case "upperRoman":
		*_bbdce = 2
	case "lowerRoman":
		*_bbdce = 3
	case "upperLetter":
		*_bbdce = 4
	case "lowerLetter":
		*_bbdce = 5
	case "ordinal":
		*_bbdce = 6
	case "cardinalText":
		*_bbdce = 7
	case "ordinalText":
		*_bbdce = 8
	case "hex":
		*_bbdce = 9
	case "chicago":
		*_bbdce = 10
	case "ideographDigital":
		*_bbdce = 11
	case "japaneseCounting":
		*_bbdce = 12
	case "aiueo":
		*_bbdce = 13
	case "iroha":
		*_bbdce = 14
	case "decimalFullWidth":
		*_bbdce = 15
	case "decimalHalfWidth":
		*_bbdce = 16
	case "japaneseLegal":
		*_bbdce = 17
	case "japaneseDigitalTenThousand":
		*_bbdce = 18
	case "decimalEnclosedCircle":
		*_bbdce = 19
	case "decimalFullWidth2":
		*_bbdce = 20
	case "aiueoFullWidth":
		*_bbdce = 21
	case "irohaFullWidth":
		*_bbdce = 22
	case "decimalZero":
		*_bbdce = 23
	case "bullet":
		*_bbdce = 24
	case "ganada":
		*_bbdce = 25
	case "chosung":
		*_bbdce = 26
	case "decimalEnclosedFullstop":
		*_bbdce = 27
	case "decimalEnclosedParen":
		*_bbdce = 28
	case "decimalEnclosedCircleChinese":
		*_bbdce = 29
	case "ideographEnclosedCircle":
		*_bbdce = 30
	case "ideographTraditional":
		*_bbdce = 31
	case "ideographZodiac":
		*_bbdce = 32
	case "ideographZodiacTraditional":
		*_bbdce = 33
	case "taiwaneseCounting":
		*_bbdce = 34
	case "ideographLegalTraditional":
		*_bbdce = 35
	case "taiwaneseCountingThousand":
		*_bbdce = 36
	case "taiwaneseDigital":
		*_bbdce = 37
	case "chineseCounting":
		*_bbdce = 38
	case "chineseLegalSimplified":
		*_bbdce = 39
	case "chineseCountingThousand":
		*_bbdce = 40
	case "koreanDigital":
		*_bbdce = 41
	case "koreanCounting":
		*_bbdce = 42
	case "koreanLegal":
		*_bbdce = 43
	case "koreanDigital2":
		*_bbdce = 44
	case "vietnameseCounting":
		*_bbdce = 45
	case "russianLower":
		*_bbdce = 46
	case "russianUpper":
		*_bbdce = 47
	case "none":
		*_bbdce = 48
	case "numberInDash":
		*_bbdce = 49
	case "hebrew1":
		*_bbdce = 50
	case "hebrew2":
		*_bbdce = 51
	case "arabicAlpha":
		*_bbdce = 52
	case "arabicAbjad":
		*_bbdce = 53
	case "hindiVowels":
		*_bbdce = 54
	case "hindiConsonants":
		*_bbdce = 55
	case "hindiNumbers":
		*_bbdce = 56
	case "hindiCounting":
		*_bbdce = 57
	case "thaiLetters":
		*_bbdce = 58
	case "thaiNumbers":
		*_bbdce = 59
	case "thaiCounting":
		*_bbdce = 60
	case "bahtText":
		*_bbdce = 61
	case "dollarText":
		*_bbdce = 62
	case "custom":
		*_bbdce = 63
	}
	return nil
}

type CT_HdrFtrRef struct {
	TypeAttr ST_HdrFtr
	IdAttr   string
}

func (_bccdb *WdCT_GraphicFrame) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bccdb.CNvPr = _eb.NewCT_NonVisualDrawingProps()
	_bccdb.CNvFrPr = _eb.NewCT_NonVisualGraphicFrameProperties()
	_bccdb.Xfrm = _eb.NewCT_Transform2D()
	_bccdb.Graphic = _eb.NewGraphic()
_acfce:
	for {
		_daceaf, _dfcga := d.Token()
		if _dfcga != nil {
			return _dfcga
		}
		switch _efgefg := _daceaf.(type) {
		case _d.StartElement:
			switch _efgefg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvPr"}:
				if _fggec := d.DecodeElement(_bccdb.CNvPr, &_efgefg); _fggec != nil {
					return _fggec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvFrPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvFrPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvFrPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvFrPr"}:
				if _ededd := d.DecodeElement(_bccdb.CNvFrPr, &_efgefg); _ededd != nil {
					return _ededd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "xfrm"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "xfrm"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "xfrm"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "xfrm"}:
				if _befae := d.DecodeElement(_bccdb.Xfrm, &_efgefg); _befae != nil {
					return _befae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain", Local: "graphic"}, _d.Name{Space: "http:/\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fmain", Local: "graphic"}:
				if _fcgd := d.DecodeElement(_bccdb.Graphic, &_efgefg); _fcgd != nil {
					return _fcgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_bccdb.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _fcegde := d.DecodeElement(_bccdb.ExtLst, &_efgefg); _fcegde != nil {
					return _fcegde
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020WdCT_GraphicFrame\u0020\u0025v", _efgefg.Name)
				if _bdccgf := d.Skip(); _bdccgf != nil {
					return _bdccgf
				}
			}
		case _d.EndElement:
			break _acfce
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the WdCT_Inline and its children, prefixing error messages with path
func (_efcgag *WdCT_Inline) ValidateWithPath(path string) error {
	if _cbgfc := _efcgag.Extent.ValidateWithPath(path + "\u002fExtent"); _cbgfc != nil {
		return _cbgfc
	}
	if _efcgag.EffectExtent != nil {
		if _bcega := _efcgag.EffectExtent.ValidateWithPath(path + "\u002fEffectExtent"); _bcega != nil {
			return _bcega
		}
	}
	if _dgeaea := _efcgag.DocPr.ValidateWithPath(path + "\u002fDocPr"); _dgeaea != nil {
		return _dgeaea
	}
	if _efcgag.CNvGraphicFramePr != nil {
		if _dfecba := _efcgag.CNvGraphicFramePr.ValidateWithPath(path + "\u002fCNvGraphicFramePr"); _dfecba != nil {
			return _dfecba
		}
	}
	if _efaefb := _efcgag.Graphic.ValidateWithPath(path + "\u002fGraphic"); _efaefb != nil {
		return _efaefb
	}
	return nil
}
func (_fdf *CT_BdoContentRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ceba := range start.Attr {
		if _ceba.Name.Local == "val" {
			_fdf.ValAttr.UnmarshalXMLAttr(_ceba)
			continue
		}
	}
_gcdd:
	for {
		_dfe, _fab := d.Token()
		if _fab != nil {
			return _fab
		}
		switch _cfe := _dfe.(type) {
		case _d.StartElement:
			switch _cfe.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_fbcd := NewCT_SimpleField()
				if _bcd := d.DecodeElement(_fbcd, &_cfe); _bcd != nil {
					return _bcd
				}
				_fdf.FldSimple = append(_fdf.FldSimple, _fbcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_fdf.Hyperlink = NewCT_Hyperlink()
				if _acfc := d.DecodeElement(_fdf.Hyperlink, &_cfe); _acfc != nil {
					return _acfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_fdf.SubDoc = NewCT_Rel()
				if _ffgc := d.DecodeElement(_fdf.SubDoc, &_cfe); _ffgc != nil {
					return _ffgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_bdaa := NewEG_ContentRunContent()
				_bdaa.CustomXml = NewCT_CustomXmlRun()
				if _ecgc := d.DecodeElement(_bdaa.CustomXml, &_cfe); _ecgc != nil {
					return _ecgc
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _bdaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_aga := NewEG_ContentRunContent()
				_aga.SmartTag = NewCT_SmartTagRun()
				if _bg := d.DecodeElement(_aga.SmartTag, &_cfe); _bg != nil {
					return _bg
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _aga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_aef := NewEG_ContentRunContent()
				_aef.Sdt = NewCT_SdtRun()
				if _fad := d.DecodeElement(_aef.Sdt, &_cfe); _fad != nil {
					return _fad
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _aef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_fbca := NewEG_ContentRunContent()
				_fbca.Dir = NewCT_DirContentRun()
				if _dee := d.DecodeElement(_fbca.Dir, &_cfe); _dee != nil {
					return _dee
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _fbca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_adfe := NewEG_ContentRunContent()
				_adfe.Bdo = NewCT_BdoContentRun()
				if _cada := d.DecodeElement(_adfe.Bdo, &_cfe); _cada != nil {
					return _cada
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _adfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_bbg := NewEG_ContentRunContent()
				_bbg.R = NewCT_R()
				if _aca := d.DecodeElement(_bbg.R, &_cfe); _aca != nil {
					return _aca
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _bbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_aec := NewEG_ContentRunContent()
				_eegg := NewEG_RunLevelElts()
				_eegg.ProofErr = NewCT_ProofErr()
				if _agfe := d.DecodeElement(_eegg.ProofErr, &_cfe); _agfe != nil {
					return _agfe
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _aec)
				_aec.EG_RunLevelElts = append(_aec.EG_RunLevelElts, _eegg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_dbag := NewEG_ContentRunContent()
				_bac := NewEG_RunLevelElts()
				_bac.PermStart = NewCT_PermStart()
				if _gbdf := d.DecodeElement(_bac.PermStart, &_cfe); _gbdf != nil {
					return _gbdf
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _dbag)
				_dbag.EG_RunLevelElts = append(_dbag.EG_RunLevelElts, _bac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_gcbd := NewEG_ContentRunContent()
				_bbef := NewEG_RunLevelElts()
				_bbef.PermEnd = NewCT_Perm()
				if _dfdb := d.DecodeElement(_bbef.PermEnd, &_cfe); _dfdb != nil {
					return _dfdb
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _gcbd)
				_gcbd.EG_RunLevelElts = append(_gcbd.EG_RunLevelElts, _bbef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_bfdb := NewEG_ContentRunContent()
				_edd := NewEG_RunLevelElts()
				_edd.Ins = NewCT_RunTrackChange()
				if _aebe := d.DecodeElement(_edd.Ins, &_cfe); _aebe != nil {
					return _aebe
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _bfdb)
				_bfdb.EG_RunLevelElts = append(_bfdb.EG_RunLevelElts, _edd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_eaf := NewEG_ContentRunContent()
				_cbed := NewEG_RunLevelElts()
				_cbed.Del = NewCT_RunTrackChange()
				if _edfe := d.DecodeElement(_cbed.Del, &_cfe); _edfe != nil {
					return _edfe
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _eaf)
				_eaf.EG_RunLevelElts = append(_eaf.EG_RunLevelElts, _cbed)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_ece := NewEG_ContentRunContent()
				_fdc := NewEG_RunLevelElts()
				_fdc.MoveFrom = NewCT_RunTrackChange()
				if _debf := d.DecodeElement(_fdc.MoveFrom, &_cfe); _debf != nil {
					return _debf
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _ece)
				_ece.EG_RunLevelElts = append(_ece.EG_RunLevelElts, _fdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_eadd := NewEG_ContentRunContent()
				_feec := NewEG_RunLevelElts()
				_feec.MoveTo = NewCT_RunTrackChange()
				if _fbb := d.DecodeElement(_feec.MoveTo, &_cfe); _fbb != nil {
					return _fbb
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _eadd)
				_eadd.EG_RunLevelElts = append(_eadd.EG_RunLevelElts, _feec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_fdde := NewEG_ContentRunContent()
				_fabe := NewEG_RunLevelElts()
				_dda := NewEG_RangeMarkupElements()
				_dda.BookmarkStart = NewCT_Bookmark()
				if _aaa := d.DecodeElement(_dda.BookmarkStart, &_cfe); _aaa != nil {
					return _aaa
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _fdde)
				_fdde.EG_RunLevelElts = append(_fdde.EG_RunLevelElts, _fabe)
				_fabe.EG_RangeMarkupElements = append(_fabe.EG_RangeMarkupElements, _dda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_eceg := NewEG_ContentRunContent()
				_eed := NewEG_RunLevelElts()
				_feg := NewEG_RangeMarkupElements()
				_feg.BookmarkEnd = NewCT_MarkupRange()
				if _gbe := d.DecodeElement(_feg.BookmarkEnd, &_cfe); _gbe != nil {
					return _gbe
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _eceg)
				_eceg.EG_RunLevelElts = append(_eceg.EG_RunLevelElts, _eed)
				_eed.EG_RangeMarkupElements = append(_eed.EG_RangeMarkupElements, _feg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_ddf := NewEG_ContentRunContent()
				_acab := NewEG_RunLevelElts()
				_dgea := NewEG_RangeMarkupElements()
				_dgea.MoveFromRangeStart = NewCT_MoveBookmark()
				if _ge := d.DecodeElement(_dgea.MoveFromRangeStart, &_cfe); _ge != nil {
					return _ge
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _ddf)
				_ddf.EG_RunLevelElts = append(_ddf.EG_RunLevelElts, _acab)
				_acab.EG_RangeMarkupElements = append(_acab.EG_RangeMarkupElements, _dgea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_aag := NewEG_ContentRunContent()
				_fgbb := NewEG_RunLevelElts()
				_bdb := NewEG_RangeMarkupElements()
				_bdb.MoveFromRangeEnd = NewCT_MarkupRange()
				if _dbgf := d.DecodeElement(_bdb.MoveFromRangeEnd, &_cfe); _dbgf != nil {
					return _dbgf
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _aag)
				_aag.EG_RunLevelElts = append(_aag.EG_RunLevelElts, _fgbb)
				_fgbb.EG_RangeMarkupElements = append(_fgbb.EG_RangeMarkupElements, _bdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_gfea := NewEG_ContentRunContent()
				_bfgb := NewEG_RunLevelElts()
				_fgd := NewEG_RangeMarkupElements()
				_fgd.MoveToRangeStart = NewCT_MoveBookmark()
				if _ded := d.DecodeElement(_fgd.MoveToRangeStart, &_cfe); _ded != nil {
					return _ded
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _gfea)
				_gfea.EG_RunLevelElts = append(_gfea.EG_RunLevelElts, _bfgb)
				_bfgb.EG_RangeMarkupElements = append(_bfgb.EG_RangeMarkupElements, _fgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_cae := NewEG_ContentRunContent()
				_bag := NewEG_RunLevelElts()
				_gdf := NewEG_RangeMarkupElements()
				_gdf.MoveToRangeEnd = NewCT_MarkupRange()
				if _aea := d.DecodeElement(_gdf.MoveToRangeEnd, &_cfe); _aea != nil {
					return _aea
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _cae)
				_cae.EG_RunLevelElts = append(_cae.EG_RunLevelElts, _bag)
				_bag.EG_RangeMarkupElements = append(_bag.EG_RangeMarkupElements, _gdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_deac := NewEG_ContentRunContent()
				_fcab := NewEG_RunLevelElts()
				_cdce := NewEG_RangeMarkupElements()
				_cdce.CommentRangeStart = NewCT_MarkupRange()
				if _dada := d.DecodeElement(_cdce.CommentRangeStart, &_cfe); _dada != nil {
					return _dada
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _deac)
				_deac.EG_RunLevelElts = append(_deac.EG_RunLevelElts, _fcab)
				_fcab.EG_RangeMarkupElements = append(_fcab.EG_RangeMarkupElements, _cdce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_gcf := NewEG_ContentRunContent()
				_dbbe := NewEG_RunLevelElts()
				_dgd := NewEG_RangeMarkupElements()
				_dgd.CommentRangeEnd = NewCT_MarkupRange()
				if _dbgb := d.DecodeElement(_dgd.CommentRangeEnd, &_cfe); _dbgb != nil {
					return _dbgb
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _gcf)
				_gcf.EG_RunLevelElts = append(_gcf.EG_RunLevelElts, _dbbe)
				_dbbe.EG_RangeMarkupElements = append(_dbbe.EG_RangeMarkupElements, _dgd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_adge := NewEG_ContentRunContent()
				_ccab := NewEG_RunLevelElts()
				_bfeg := NewEG_RangeMarkupElements()
				_bfeg.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _gccfe := d.DecodeElement(_bfeg.CustomXmlInsRangeStart, &_cfe); _gccfe != nil {
					return _gccfe
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _adge)
				_adge.EG_RunLevelElts = append(_adge.EG_RunLevelElts, _ccab)
				_ccab.EG_RangeMarkupElements = append(_ccab.EG_RangeMarkupElements, _bfeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_fcca := NewEG_ContentRunContent()
				_gaf := NewEG_RunLevelElts()
				_cbec := NewEG_RangeMarkupElements()
				_cbec.CustomXmlInsRangeEnd = NewCT_Markup()
				if _ggab := d.DecodeElement(_cbec.CustomXmlInsRangeEnd, &_cfe); _ggab != nil {
					return _ggab
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _fcca)
				_fcca.EG_RunLevelElts = append(_fcca.EG_RunLevelElts, _gaf)
				_gaf.EG_RangeMarkupElements = append(_gaf.EG_RangeMarkupElements, _cbec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_fbfd := NewEG_ContentRunContent()
				_fcee := NewEG_RunLevelElts()
				_fge := NewEG_RangeMarkupElements()
				_fge.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _fec := d.DecodeElement(_fge.CustomXmlDelRangeStart, &_cfe); _fec != nil {
					return _fec
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _fbfd)
				_fbfd.EG_RunLevelElts = append(_fbfd.EG_RunLevelElts, _fcee)
				_fcee.EG_RangeMarkupElements = append(_fcee.EG_RangeMarkupElements, _fge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_efef := NewEG_ContentRunContent()
				_daa := NewEG_RunLevelElts()
				_dae := NewEG_RangeMarkupElements()
				_dae.CustomXmlDelRangeEnd = NewCT_Markup()
				if _bedd := d.DecodeElement(_dae.CustomXmlDelRangeEnd, &_cfe); _bedd != nil {
					return _bedd
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _efef)
				_efef.EG_RunLevelElts = append(_efef.EG_RunLevelElts, _daa)
				_daa.EG_RangeMarkupElements = append(_daa.EG_RangeMarkupElements, _dae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_bgb := NewEG_ContentRunContent()
				_ccd := NewEG_RunLevelElts()
				_deea := NewEG_RangeMarkupElements()
				_deea.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _bacb := d.DecodeElement(_deea.CustomXmlMoveFromRangeStart, &_cfe); _bacb != nil {
					return _bacb
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _bgb)
				_bgb.EG_RunLevelElts = append(_bgb.EG_RunLevelElts, _ccd)
				_ccd.EG_RangeMarkupElements = append(_ccd.EG_RangeMarkupElements, _deea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_gbge := NewEG_ContentRunContent()
				_abg := NewEG_RunLevelElts()
				_gef := NewEG_RangeMarkupElements()
				_gef.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _beff := d.DecodeElement(_gef.CustomXmlMoveFromRangeEnd, &_cfe); _beff != nil {
					return _beff
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _gbge)
				_gbge.EG_RunLevelElts = append(_gbge.EG_RunLevelElts, _abg)
				_abg.EG_RangeMarkupElements = append(_abg.EG_RangeMarkupElements, _gef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_ccc := NewEG_ContentRunContent()
				_bcac := NewEG_RunLevelElts()
				_cgf := NewEG_RangeMarkupElements()
				_cgf.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _fecc := d.DecodeElement(_cgf.CustomXmlMoveToRangeStart, &_cfe); _fecc != nil {
					return _fecc
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _ccc)
				_ccc.EG_RunLevelElts = append(_ccc.EG_RunLevelElts, _bcac)
				_bcac.EG_RangeMarkupElements = append(_bcac.EG_RangeMarkupElements, _cgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_gfc := NewEG_ContentRunContent()
				_gfa := NewEG_RunLevelElts()
				_ffb := NewEG_RangeMarkupElements()
				_ffb.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _aaba := d.DecodeElement(_ffb.CustomXmlMoveToRangeEnd, &_cfe); _aaba != nil {
					return _aaba
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _gfc)
				_gfc.EG_RunLevelElts = append(_gfc.EG_RunLevelElts, _gfa)
				_gfa.EG_RangeMarkupElements = append(_gfa.EG_RangeMarkupElements, _ffb)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_beffg := NewEG_ContentRunContent()
				_ebcf := NewEG_RunLevelElts()
				_ceg := NewEG_MathContent()
				_ceg.OMathPara = _f.NewOMathPara()
				if _bacg := d.DecodeElement(_ceg.OMathPara, &_cfe); _bacg != nil {
					return _bacg
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _beffg)
				_beffg.EG_RunLevelElts = append(_beffg.EG_RunLevelElts, _ebcf)
				_ebcf.EG_MathContent = append(_ebcf.EG_MathContent, _ceg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_egcg := NewEG_ContentRunContent()
				_dbgc := NewEG_RunLevelElts()
				_ffa := NewEG_MathContent()
				_ffa.OMath = _f.NewOMath()
				if _dce := d.DecodeElement(_ffa.OMath, &_cfe); _dce != nil {
					return _dce
				}
				_fdf.EG_ContentRunContent = append(_fdf.EG_ContentRunContent, _egcg)
				_egcg.EG_RunLevelElts = append(_egcg.EG_RunLevelElts, _dbgc)
				_dbgc.EG_MathContent = append(_dbgc.EG_MathContent, _ffa)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_BdoContentRun\u0020\u0025v", _cfe.Name)
				if _geff := d.Skip(); _geff != nil {
					return _geff
				}
			}
		case _d.EndElement:
			break _gcdd
		case _d.CharData:
		}
	}
	return nil
}
func (_fdbgff ST_Theme) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fdbgff.String(), start)
}
func (_egeebg ST_HeightRule) ValidateWithPath(path string) error {
	switch _egeebg {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_egeebg))
	}
	return nil
}
func (_gfaag *CT_VerticalJc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gfaag.ValAttr = ST_VerticalJc(1)
	for _, _ddaae := range start.Attr {
		if _ddaae.Name.Local == "val" {
			_gfaag.ValAttr.UnmarshalXMLAttr(_ddaae)
			continue
		}
	}
	for {
		_fdfgc, _dgcce := d.Token()
		if _dgcce != nil {
			return _b.Errorf("parsing\u0020CT_VerticalJc:\u0020\u0025s", _dgcce)
		}
		if _aafee, _aebgc := _fdfgc.(_d.EndElement); _aebgc && _aafee.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_UnsignedDecimalNumber and its children, prefixing error messages with path
func (_deead *CT_UnsignedDecimalNumber) ValidateWithPath(path string) error { return nil }
func NewCT_DocPart() *CT_DocPart                                            { _egdaf := &CT_DocPart{}; return _egdaf }
func (_cdab *CT_NumPicBullet) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:numPicBulletId"}, Value: _b.Sprintf("\u0025v", _cdab.NumPicBulletIdAttr)})
	e.EncodeToken(start)
	if _cdab.Pict != nil {
		_adeea := _d.StartElement{Name: _d.Name{Local: "w:pict"}}
		e.EncodeElement(_cdab.Pict, _adeea)
	}
	if _cdab.Drawing != nil {
		_dfbcf := _d.StartElement{Name: _d.Name{Local: "w:drawing"}}
		e.EncodeElement(_cdab.Drawing, _dfbcf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_FrameLayout() *CT_FrameLayout {
	_ffef := &CT_FrameLayout{}
	_ffef.ValAttr = ST_FrameLayout(1)
	return _ffef
}
func NewEG_RunInnerContent() *EG_RunInnerContent { _agebc := &EG_RunInnerContent{}; return _agebc }

// ST_TextScale is a union type
type ST_TextScale struct {
	ST_TextScalePercent *string
	ST_TextScaleDecimal *int64
}

func (_bfbbe *CT_FtnEdnRef) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bfbbe.CustomMarkFollowsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:customMarkFollows"}, Value: _b.Sprintf("\u0025v", *_bfbbe.CustomMarkFollowsAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _bfbbe.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfbdc ST_TblLayoutType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cfbdc.String(), start)
}

// Validate validates the CT_MailMerge and its children
func (_gcggg *CT_MailMerge) Validate() error { return _gcggg.ValidateWithPath("CT_MailMerge") }
func NewCT_MailMergeDataType() *CT_MailMergeDataType {
	_fcbee := &CT_MailMergeDataType{}
	return _fcbee
}
func (_ddadae ST_Lock) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fdfged := _d.Attr{}
	_fdfged.Name = name
	switch _ddadae {
	case ST_LockUnset:
		_fdfged.Value = ""
	case ST_LockSdtLocked:
		_fdfged.Value = "sdtLocked"
	case ST_LockContentLocked:
		_fdfged.Value = "contentLocked"
	case ST_LockUnlocked:
		_fdfged.Value = "unlocked"
	case ST_LockSdtContentLocked:
		_fdfged.Value = "sdtContentLocked"
	}
	return _fdfged, nil
}

type CT_Object struct {

	// Original Image Width
	DxaOrigAttr *_g.ST_TwipsMeasure

	// Original Image Height
	DyaOrigAttr *_g.ST_TwipsMeasure
	Any         []_ga.Any
	Drawing     *CT_Drawing
	Choice      *CT_ObjectChoice
}

// Validate validates the CT_Columns and its children
func (_cbcg *CT_Columns) Validate() error { return _cbcg.ValidateWithPath("CT_Columns") }

type Hdr struct{ CT_HdrFtr }
type ST_DocProtect byte

func (_ecgfff ST_NumberFormat) String() string {
	switch _ecgfff {
	case 0:
		return ""
	case 1:
		return "decimal"
	case 2:
		return "upperRoman"
	case 3:
		return "lowerRoman"
	case 4:
		return "upperLetter"
	case 5:
		return "lowerLetter"
	case 6:
		return "ordinal"
	case 7:
		return "cardinalText"
	case 8:
		return "ordinalText"
	case 9:
		return "hex"
	case 10:
		return "chicago"
	case 11:
		return "ideographDigital"
	case 12:
		return "japaneseCounting"
	case 13:
		return "aiueo"
	case 14:
		return "iroha"
	case 15:
		return "decimalFullWidth"
	case 16:
		return "decimalHalfWidth"
	case 17:
		return "japaneseLegal"
	case 18:
		return "japaneseDigitalTenThousand"
	case 19:
		return "decimalEnclosedCircle"
	case 20:
		return "decimalFullWidth2"
	case 21:
		return "aiueoFullWidth"
	case 22:
		return "irohaFullWidth"
	case 23:
		return "decimalZero"
	case 24:
		return "bullet"
	case 25:
		return "ganada"
	case 26:
		return "chosung"
	case 27:
		return "decimalEnclosedFullstop"
	case 28:
		return "decimalEnclosedParen"
	case 29:
		return "decimalEnclosedCircleChinese"
	case 30:
		return "ideographEnclosedCircle"
	case 31:
		return "ideographTraditional"
	case 32:
		return "ideographZodiac"
	case 33:
		return "ideographZodiacTraditional"
	case 34:
		return "taiwaneseCounting"
	case 35:
		return "ideographLegalTraditional"
	case 36:
		return "taiwaneseCountingThousand"
	case 37:
		return "taiwaneseDigital"
	case 38:
		return "chineseCounting"
	case 39:
		return "chineseLegalSimplified"
	case 40:
		return "chineseCountingThousand"
	case 41:
		return "koreanDigital"
	case 42:
		return "koreanCounting"
	case 43:
		return "koreanLegal"
	case 44:
		return "koreanDigital2"
	case 45:
		return "vietnameseCounting"
	case 46:
		return "russianLower"
	case 47:
		return "russianUpper"
	case 48:
		return "none"
	case 49:
		return "numberInDash"
	case 50:
		return "hebrew1"
	case 51:
		return "hebrew2"
	case 52:
		return "arabicAlpha"
	case 53:
		return "arabicAbjad"
	case 54:
		return "hindiVowels"
	case 55:
		return "hindiConsonants"
	case 56:
		return "hindiNumbers"
	case 57:
		return "hindiCounting"
	case 58:
		return "thaiLetters"
	case 59:
		return "thaiNumbers"
	case 60:
		return "thaiCounting"
	case 61:
		return "bahtText"
	case 62:
		return "dollarText"
	case 63:
		return "custom"
	}
	return ""
}

// ValidateWithPath validates the CT_RPr and its children, prefixing error messages with path
func (_aeabe *CT_RPr) ValidateWithPath(path string) error {
	if _aeabe.RStyle != nil {
		if _cbabdc := _aeabe.RStyle.ValidateWithPath(path + "\u002fRStyle"); _cbabdc != nil {
			return _cbabdc
		}
	}
	if _aeabe.RFonts != nil {
		if _cgbge := _aeabe.RFonts.ValidateWithPath(path + "\u002fRFonts"); _cgbge != nil {
			return _cgbge
		}
	}
	if _aeabe.B != nil {
		if _bdedb := _aeabe.B.ValidateWithPath(path + "\u002fB"); _bdedb != nil {
			return _bdedb
		}
	}
	if _aeabe.BCs != nil {
		if _dcggge := _aeabe.BCs.ValidateWithPath(path + "\u002fBCs"); _dcggge != nil {
			return _dcggge
		}
	}
	if _aeabe.I != nil {
		if _bbcag := _aeabe.I.ValidateWithPath(path + "\u002fI"); _bbcag != nil {
			return _bbcag
		}
	}
	if _aeabe.ICs != nil {
		if _ccffd := _aeabe.ICs.ValidateWithPath(path + "\u002fICs"); _ccffd != nil {
			return _ccffd
		}
	}
	if _aeabe.Caps != nil {
		if _bfae := _aeabe.Caps.ValidateWithPath(path + "\u002fCaps"); _bfae != nil {
			return _bfae
		}
	}
	if _aeabe.SmallCaps != nil {
		if _bfabd := _aeabe.SmallCaps.ValidateWithPath(path + "\u002fSmallCaps"); _bfabd != nil {
			return _bfabd
		}
	}
	if _aeabe.Strike != nil {
		if _ffbgd := _aeabe.Strike.ValidateWithPath(path + "\u002fStrike"); _ffbgd != nil {
			return _ffbgd
		}
	}
	if _aeabe.Dstrike != nil {
		if _febcb := _aeabe.Dstrike.ValidateWithPath(path + "\u002fDstrike"); _febcb != nil {
			return _febcb
		}
	}
	if _aeabe.Outline != nil {
		if _bafge := _aeabe.Outline.ValidateWithPath(path + "\u002fOutline"); _bafge != nil {
			return _bafge
		}
	}
	if _aeabe.Shadow != nil {
		if _gcgfga := _aeabe.Shadow.ValidateWithPath(path + "\u002fShadow"); _gcgfga != nil {
			return _gcgfga
		}
	}
	if _aeabe.Emboss != nil {
		if _afegad := _aeabe.Emboss.ValidateWithPath(path + "\u002fEmboss"); _afegad != nil {
			return _afegad
		}
	}
	if _aeabe.Imprint != nil {
		if _bbace := _aeabe.Imprint.ValidateWithPath(path + "\u002fImprint"); _bbace != nil {
			return _bbace
		}
	}
	if _aeabe.NoProof != nil {
		if _gbccff := _aeabe.NoProof.ValidateWithPath(path + "\u002fNoProof"); _gbccff != nil {
			return _gbccff
		}
	}
	if _aeabe.SnapToGrid != nil {
		if _aeffe := _aeabe.SnapToGrid.ValidateWithPath(path + "/SnapToGrid"); _aeffe != nil {
			return _aeffe
		}
	}
	if _aeabe.Vanish != nil {
		if _gacgg := _aeabe.Vanish.ValidateWithPath(path + "\u002fVanish"); _gacgg != nil {
			return _gacgg
		}
	}
	if _aeabe.WebHidden != nil {
		if _cffab := _aeabe.WebHidden.ValidateWithPath(path + "\u002fWebHidden"); _cffab != nil {
			return _cffab
		}
	}
	if _aeabe.Color != nil {
		if _dgbdd := _aeabe.Color.ValidateWithPath(path + "\u002fColor"); _dgbdd != nil {
			return _dgbdd
		}
	}
	if _aeabe.Spacing != nil {
		if _baffa := _aeabe.Spacing.ValidateWithPath(path + "\u002fSpacing"); _baffa != nil {
			return _baffa
		}
	}
	if _aeabe.W != nil {
		if _bdgg := _aeabe.W.ValidateWithPath(path + "\u002fW"); _bdgg != nil {
			return _bdgg
		}
	}
	if _aeabe.Kern != nil {
		if _dbdddf := _aeabe.Kern.ValidateWithPath(path + "\u002fKern"); _dbdddf != nil {
			return _dbdddf
		}
	}
	if _aeabe.Position != nil {
		if _cfffc := _aeabe.Position.ValidateWithPath(path + "\u002fPosition"); _cfffc != nil {
			return _cfffc
		}
	}
	if _aeabe.Sz != nil {
		if _agfcf := _aeabe.Sz.ValidateWithPath(path + "\u002fSz"); _agfcf != nil {
			return _agfcf
		}
	}
	if _aeabe.SzCs != nil {
		if _agfbe := _aeabe.SzCs.ValidateWithPath(path + "\u002fSzCs"); _agfbe != nil {
			return _agfbe
		}
	}
	if _aeabe.Highlight != nil {
		if _fgeaf := _aeabe.Highlight.ValidateWithPath(path + "\u002fHighlight"); _fgeaf != nil {
			return _fgeaf
		}
	}
	if _aeabe.U != nil {
		if _fgeafd := _aeabe.U.ValidateWithPath(path + "\u002fU"); _fgeafd != nil {
			return _fgeafd
		}
	}
	if _aeabe.Effect != nil {
		if _fdfge := _aeabe.Effect.ValidateWithPath(path + "\u002fEffect"); _fdfge != nil {
			return _fdfge
		}
	}
	if _aeabe.Bdr != nil {
		if _gcccf := _aeabe.Bdr.ValidateWithPath(path + "\u002fBdr"); _gcccf != nil {
			return _gcccf
		}
	}
	if _aeabe.Shd != nil {
		if _cecfd := _aeabe.Shd.ValidateWithPath(path + "\u002fShd"); _cecfd != nil {
			return _cecfd
		}
	}
	if _aeabe.FitText != nil {
		if _eadbfe := _aeabe.FitText.ValidateWithPath(path + "\u002fFitText"); _eadbfe != nil {
			return _eadbfe
		}
	}
	if _aeabe.VertAlign != nil {
		if _ebfff := _aeabe.VertAlign.ValidateWithPath(path + "\u002fVertAlign"); _ebfff != nil {
			return _ebfff
		}
	}
	if _aeabe.Rtl != nil {
		if _adfad := _aeabe.Rtl.ValidateWithPath(path + "\u002fRtl"); _adfad != nil {
			return _adfad
		}
	}
	if _aeabe.Cs != nil {
		if _ebcdf := _aeabe.Cs.ValidateWithPath(path + "\u002fCs"); _ebcdf != nil {
			return _ebcdf
		}
	}
	if _aeabe.Em != nil {
		if _dbfdb := _aeabe.Em.ValidateWithPath(path + "\u002fEm"); _dbfdb != nil {
			return _dbfdb
		}
	}
	if _aeabe.Lang != nil {
		if _edefdc := _aeabe.Lang.ValidateWithPath(path + "\u002fLang"); _edefdc != nil {
			return _edefdc
		}
	}
	if _aeabe.EastAsianLayout != nil {
		if _ffdbd := _aeabe.EastAsianLayout.ValidateWithPath(path + "\u002fEastAsianLayout"); _ffdbd != nil {
			return _ffdbd
		}
	}
	if _aeabe.SpecVanish != nil {
		if _eebcf := _aeabe.SpecVanish.ValidateWithPath(path + "/SpecVanish"); _eebcf != nil {
			return _eebcf
		}
	}
	if _aeabe.OMath != nil {
		if _faafg := _aeabe.OMath.ValidateWithPath(path + "\u002fOMath"); _faafg != nil {
			return _faafg
		}
	}
	if _aeabe.RPrChange != nil {
		if _gbdgf := _aeabe.RPrChange.ValidateWithPath(path + "\u002fRPrChange"); _gbdgf != nil {
			return _gbdgf
		}
	}
	return nil
}
func (_ebcacd *CT_Styles) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ebcacd.DocDefaults != nil {
		_deedg := _d.StartElement{Name: _d.Name{Local: "w:docDefaults"}}
		e.EncodeElement(_ebcacd.DocDefaults, _deedg)
	}
	if _ebcacd.LatentStyles != nil {
		_bfbdb := _d.StartElement{Name: _d.Name{Local: "w:latentStyles"}}
		e.EncodeElement(_ebcacd.LatentStyles, _bfbdb)
	}
	if _ebcacd.Style != nil {
		_ebdge := _d.StartElement{Name: _d.Name{Local: "w:style"}}
		for _, _agfggd := range _ebcacd.Style {
			e.EncodeElement(_agfggd, _ebdge)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bbfbdf ST_TextDirection) Validate() error { return _bbfbdf.ValidateWithPath("") }
func (_fccag *CT_Panose) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _fccag.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bgefgb *ST_PageBorderDisplay) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bdgbgc, _caaeef := d.Token()
	if _caaeef != nil {
		return _caaeef
	}
	if _gaede, _fafgf := _bdgbgc.(_d.EndElement); _fafgf && _gaede.Name == start.Name {
		*_bgefgb = 1
		return nil
	}
	if _ceabe, _dbfgc := _bdgbgc.(_d.CharData); !_dbfgc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bdgbgc)
	} else {
		switch string(_ceabe) {
		case "":
			*_bgefgb = 0
		case "allPages":
			*_bgefgb = 1
		case "firstPage":
			*_bgefgb = 2
		case "notFirstPage":
			*_bgefgb = 3
		}
	}
	_bdgbgc, _caaeef = d.Token()
	if _caaeef != nil {
		return _caaeef
	}
	if _dfbcg, _bdceca := _bdgbgc.(_d.EndElement); _bdceca && _dfbcg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bdgbgc)
}

// ValidateWithPath validates the CT_Em and its children, prefixing error messages with path
func (_ddfef *CT_Em) ValidateWithPath(path string) error {
	if _ddfef.ValAttr == ST_EmUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _affdf := _ddfef.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _affdf != nil {
		return _affdf
	}
	return nil
}

type CT_MathCtrlIns struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
}
type ST_TabTlc byte
type CT_WriteProtection struct {

	// Recommend Write Protection in User Interface
	RecommendedAttr                *_g.ST_OnOff
	AlgorithmNameAttr              *string
	HashValueAttr                  *string
	SaltValueAttr                  *string
	SpinCountAttr                  *int64
	CryptProviderTypeAttr          _g.ST_CryptProv
	CryptAlgorithmClassAttr        _g.ST_AlgClass
	CryptAlgorithmTypeAttr         _g.ST_AlgType
	CryptAlgorithmSidAttr          *int64
	CryptSpinCountAttr             *int64
	CryptProviderAttr              *string
	AlgIdExtAttr                   *string
	AlgIdExtSourceAttr             *string
	CryptProviderTypeExtAttr       *string
	CryptProviderTypeExtSourceAttr *string
	HashAttr                       *string
	SaltAttr                       *string
}

func (_deabg ST_Border) String() string {
	switch _deabg {
	case 0:
		return ""
	case 1:
		return "nil"
	case 2:
		return "none"
	case 3:
		return "single"
	case 4:
		return "thick"
	case 5:
		return "double"
	case 6:
		return "dotted"
	case 7:
		return "dashed"
	case 8:
		return "dotDash"
	case 9:
		return "dotDotDash"
	case 10:
		return "triple"
	case 11:
		return "thinThickSmallGap"
	case 12:
		return "thickThinSmallGap"
	case 13:
		return "thinThickThinSmallGap"
	case 14:
		return "thinThickMediumGap"
	case 15:
		return "thickThinMediumGap"
	case 16:
		return "thinThickThinMediumGap"
	case 17:
		return "thinThickLargeGap"
	case 18:
		return "thickThinLargeGap"
	case 19:
		return "thinThickThinLargeGap"
	case 20:
		return "wave"
	case 21:
		return "doubleWave"
	case 22:
		return "dashSmallGap"
	case 23:
		return "dashDotStroked"
	case 24:
		return "threeDEmboss"
	case 25:
		return "threeDEngrave"
	case 26:
		return "outset"
	case 27:
		return "inset"
	case 28:
		return "apples"
	case 29:
		return "archedScallops"
	case 30:
		return "babyPacifier"
	case 31:
		return "babyRattle"
	case 32:
		return "balloons3Colors"
	case 33:
		return "balloonsHotAir"
	case 34:
		return "basicBlackDashes"
	case 35:
		return "basicBlackDots"
	case 36:
		return "basicBlackSquares"
	case 37:
		return "basicThinLines"
	case 38:
		return "basicWhiteDashes"
	case 39:
		return "basicWhiteDots"
	case 40:
		return "basicWhiteSquares"
	case 41:
		return "basicWideInline"
	case 42:
		return "basicWideMidline"
	case 43:
		return "basicWideOutline"
	case 44:
		return "bats"
	case 45:
		return "birds"
	case 46:
		return "birdsFlight"
	case 47:
		return "cabins"
	case 48:
		return "cakeSlice"
	case 49:
		return "candyCorn"
	case 50:
		return "celticKnotwork"
	case 51:
		return "certificateBanner"
	case 52:
		return "chainLink"
	case 53:
		return "champagneBottle"
	case 54:
		return "checkedBarBlack"
	case 55:
		return "checkedBarColor"
	case 56:
		return "checkered"
	case 57:
		return "christmasTree"
	case 58:
		return "circlesLines"
	case 59:
		return "circlesRectangles"
	case 60:
		return "classicalWave"
	case 61:
		return "clocks"
	case 62:
		return "compass"
	case 63:
		return "confetti"
	case 64:
		return "confettiGrays"
	case 65:
		return "confettiOutline"
	case 66:
		return "confettiStreamers"
	case 67:
		return "confettiWhite"
	case 68:
		return "cornerTriangles"
	case 69:
		return "couponCutoutDashes"
	case 70:
		return "couponCutoutDots"
	case 71:
		return "crazyMaze"
	case 72:
		return "creaturesButterfly"
	case 73:
		return "creaturesFish"
	case 74:
		return "creaturesInsects"
	case 75:
		return "creaturesLadyBug"
	case 76:
		return "crossStitch"
	case 77:
		return "cup"
	case 78:
		return "decoArch"
	case 79:
		return "decoArchColor"
	case 80:
		return "decoBlocks"
	case 81:
		return "diamondsGray"
	case 82:
		return "doubleD"
	case 83:
		return "doubleDiamonds"
	case 84:
		return "earth1"
	case 85:
		return "earth2"
	case 86:
		return "earth3"
	case 87:
		return "eclipsingSquares1"
	case 88:
		return "eclipsingSquares2"
	case 89:
		return "eggsBlack"
	case 90:
		return "fans"
	case 91:
		return "film"
	case 92:
		return "firecrackers"
	case 93:
		return "flowersBlockPrint"
	case 94:
		return "flowersDaisies"
	case 95:
		return "flowersModern1"
	case 96:
		return "flowersModern2"
	case 97:
		return "flowersPansy"
	case 98:
		return "flowersRedRose"
	case 99:
		return "flowersRoses"
	case 100:
		return "flowersTeacup"
	case 101:
		return "flowersTiny"
	case 102:
		return "gems"
	case 103:
		return "gingerbreadMan"
	case 104:
		return "gradient"
	case 105:
		return "handmade1"
	case 106:
		return "handmade2"
	case 107:
		return "heartBalloon"
	case 108:
		return "heartGray"
	case 109:
		return "hearts"
	case 110:
		return "heebieJeebies"
	case 111:
		return "holly"
	case 112:
		return "houseFunky"
	case 113:
		return "hypnotic"
	case 114:
		return "iceCreamCones"
	case 115:
		return "lightBulb"
	case 116:
		return "lightning1"
	case 117:
		return "lightning2"
	case 118:
		return "mapPins"
	case 119:
		return "mapleLeaf"
	case 120:
		return "mapleMuffins"
	case 121:
		return "marquee"
	case 122:
		return "marqueeToothed"
	case 123:
		return "moons"
	case 124:
		return "mosaic"
	case 125:
		return "musicNotes"
	case 126:
		return "northwest"
	case 127:
		return "ovals"
	case 128:
		return "packages"
	case 129:
		return "palmsBlack"
	case 130:
		return "palmsColor"
	case 131:
		return "paperClips"
	case 132:
		return "papyrus"
	case 133:
		return "partyFavor"
	case 134:
		return "partyGlass"
	case 135:
		return "pencils"
	case 136:
		return "people"
	case 137:
		return "peopleWaving"
	case 138:
		return "peopleHats"
	case 139:
		return "poinsettias"
	case 140:
		return "postageStamp"
	case 141:
		return "pumpkin1"
	case 142:
		return "pushPinNote2"
	case 143:
		return "pushPinNote1"
	case 144:
		return "pyramids"
	case 145:
		return "pyramidsAbove"
	case 146:
		return "quadrants"
	case 147:
		return "rings"
	case 148:
		return "safari"
	case 149:
		return "sawtooth"
	case 150:
		return "sawtoothGray"
	case 151:
		return "scaredCat"
	case 152:
		return "seattle"
	case 153:
		return "shadowedSquares"
	case 154:
		return "sharksTeeth"
	case 155:
		return "shorebirdTracks"
	case 156:
		return "skyrocket"
	case 157:
		return "snowflakeFancy"
	case 158:
		return "snowflakes"
	case 159:
		return "sombrero"
	case 160:
		return "southwest"
	case 161:
		return "stars"
	case 162:
		return "starsTop"
	case 163:
		return "stars3d"
	case 164:
		return "starsBlack"
	case 165:
		return "starsShadowed"
	case 166:
		return "sun"
	case 167:
		return "swirligig"
	case 168:
		return "tornPaper"
	case 169:
		return "tornPaperBlack"
	case 170:
		return "trees"
	case 171:
		return "triangleParty"
	case 172:
		return "triangles"
	case 173:
		return "triangle1"
	case 174:
		return "triangle2"
	case 175:
		return "triangleCircle1"
	case 176:
		return "triangleCircle2"
	case 177:
		return "shapes1"
	case 178:
		return "shapes2"
	case 179:
		return "twistedLines1"
	case 180:
		return "twistedLines2"
	case 181:
		return "vine"
	case 182:
		return "waveline"
	case 183:
		return "weavingAngles"
	case 184:
		return "weavingBraid"
	case 185:
		return "weavingRibbon"
	case 186:
		return "weavingStrips"
	case 187:
		return "whiteFlowers"
	case 188:
		return "woodwork"
	case 189:
		return "xIllusions"
	case 190:
		return "zanyTriangles"
	case 191:
		return "zigZag"
	case 192:
		return "zigZagStitch"
	case 193:
		return "custom"
	}
	return ""
}
func (_ecbgc *CT_Tc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cbgeaa := range start.Attr {
		if _cbgeaa.Name.Local == "id" {
			_bfbgbf, _afedc := _cbgeaa.Value, error(nil)
			if _afedc != nil {
				return _afedc
			}
			_ecbgc.IdAttr = &_bfbgbf
			continue
		}
	}
_bfcgefe:
	for {
		_gdced, _efgee := d.Token()
		if _efgee != nil {
			return _efgee
		}
		switch _defggg := _gdced.(type) {
		case _d.StartElement:
			switch _defggg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tcPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tcPr"}:
				_ecbgc.TcPr = NewCT_TcPr()
				if _acgfe := d.DecodeElement(_ecbgc.TcPr, &_defggg); _acgfe != nil {
					return _acgfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_dcdcb := NewEG_BlockLevelElts()
				_bgdcd := NewCT_AltChunk()
				if _afabe := d.DecodeElement(_bgdcd, &_defggg); _afabe != nil {
					return _afabe
				}
				_dcdcb.AltChunk = append(_dcdcb.AltChunk, _bgdcd)
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _dcdcb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_bbeaa := NewEG_BlockLevelElts()
				_dfeaf := NewEG_ContentBlockContent()
				_dfeaf.CustomXml = NewCT_CustomXmlBlock()
				if _bagcf := d.DecodeElement(_dfeaf.CustomXml, &_defggg); _bagcf != nil {
					return _bagcf
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _bbeaa)
				_bbeaa.EG_ContentBlockContent = append(_bbeaa.EG_ContentBlockContent, _dfeaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_acdgbd := NewEG_BlockLevelElts()
				_cbfga := NewEG_ContentBlockContent()
				_cbfga.Sdt = NewCT_SdtBlock()
				if _eeage := d.DecodeElement(_cbfga.Sdt, &_defggg); _eeage != nil {
					return _eeage
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _acdgbd)
				_acdgbd.EG_ContentBlockContent = append(_acdgbd.EG_ContentBlockContent, _cbfga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_dafcdf := NewEG_BlockLevelElts()
				_dbfabea := NewEG_ContentBlockContent()
				_ceaaf := NewCT_P()
				if _afbeb := d.DecodeElement(_ceaaf, &_defggg); _afbeb != nil {
					return _afbeb
				}
				_dbfabea.P = append(_dbfabea.P, _ceaaf)
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _dafcdf)
				_dafcdf.EG_ContentBlockContent = append(_dafcdf.EG_ContentBlockContent, _dbfabea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_cadaa := NewEG_BlockLevelElts()
				_fdafda := NewEG_ContentBlockContent()
				_beeece := NewCT_Tbl()
				if _aafdd := d.DecodeElement(_beeece, &_defggg); _aafdd != nil {
					return _aafdd
				}
				_fdafda.Tbl = append(_fdafda.Tbl, _beeece)
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _cadaa)
				_cadaa.EG_ContentBlockContent = append(_cadaa.EG_ContentBlockContent, _fdafda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_gabeeg := NewEG_BlockLevelElts()
				_eefed := NewEG_ContentBlockContent()
				_bdcdb := NewEG_RunLevelElts()
				_bdcdb.ProofErr = NewCT_ProofErr()
				if _bebfdc := d.DecodeElement(_bdcdb.ProofErr, &_defggg); _bebfdc != nil {
					return _bebfdc
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _gabeeg)
				_gabeeg.EG_ContentBlockContent = append(_gabeeg.EG_ContentBlockContent, _eefed)
				_eefed.EG_RunLevelElts = append(_eefed.EG_RunLevelElts, _bdcdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_caffbd := NewEG_BlockLevelElts()
				_fcged := NewEG_ContentBlockContent()
				_fdfca := NewEG_RunLevelElts()
				_fdfca.PermStart = NewCT_PermStart()
				if _gaefgg := d.DecodeElement(_fdfca.PermStart, &_defggg); _gaefgg != nil {
					return _gaefgg
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _caffbd)
				_caffbd.EG_ContentBlockContent = append(_caffbd.EG_ContentBlockContent, _fcged)
				_fcged.EG_RunLevelElts = append(_fcged.EG_RunLevelElts, _fdfca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_efefdc := NewEG_BlockLevelElts()
				_effab := NewEG_ContentBlockContent()
				_gdgfb := NewEG_RunLevelElts()
				_gdgfb.PermEnd = NewCT_Perm()
				if _bagfcd := d.DecodeElement(_gdgfb.PermEnd, &_defggg); _bagfcd != nil {
					return _bagfcd
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _efefdc)
				_efefdc.EG_ContentBlockContent = append(_efefdc.EG_ContentBlockContent, _effab)
				_effab.EG_RunLevelElts = append(_effab.EG_RunLevelElts, _gdgfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_bfbga := NewEG_BlockLevelElts()
				_afbebe := NewEG_ContentBlockContent()
				_fdbgg := NewEG_RunLevelElts()
				_fdbgg.Ins = NewCT_RunTrackChange()
				if _cfeae := d.DecodeElement(_fdbgg.Ins, &_defggg); _cfeae != nil {
					return _cfeae
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _bfbga)
				_bfbga.EG_ContentBlockContent = append(_bfbga.EG_ContentBlockContent, _afbebe)
				_afbebe.EG_RunLevelElts = append(_afbebe.EG_RunLevelElts, _fdbgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ggfde := NewEG_BlockLevelElts()
				_egfbb := NewEG_ContentBlockContent()
				_egaag := NewEG_RunLevelElts()
				_egaag.Del = NewCT_RunTrackChange()
				if _bcdfc := d.DecodeElement(_egaag.Del, &_defggg); _bcdfc != nil {
					return _bcdfc
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _ggfde)
				_ggfde.EG_ContentBlockContent = append(_ggfde.EG_ContentBlockContent, _egfbb)
				_egfbb.EG_RunLevelElts = append(_egfbb.EG_RunLevelElts, _egaag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_efcea := NewEG_BlockLevelElts()
				_ededad := NewEG_ContentBlockContent()
				_bddcg := NewEG_RunLevelElts()
				_bddcg.MoveFrom = NewCT_RunTrackChange()
				if _abeadd := d.DecodeElement(_bddcg.MoveFrom, &_defggg); _abeadd != nil {
					return _abeadd
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _efcea)
				_efcea.EG_ContentBlockContent = append(_efcea.EG_ContentBlockContent, _ededad)
				_ededad.EG_RunLevelElts = append(_ededad.EG_RunLevelElts, _bddcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_bgcgb := NewEG_BlockLevelElts()
				_gdedb := NewEG_ContentBlockContent()
				_dcfgg := NewEG_RunLevelElts()
				_dcfgg.MoveTo = NewCT_RunTrackChange()
				if _aggeb := d.DecodeElement(_dcfgg.MoveTo, &_defggg); _aggeb != nil {
					return _aggeb
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _bgcgb)
				_bgcgb.EG_ContentBlockContent = append(_bgcgb.EG_ContentBlockContent, _gdedb)
				_gdedb.EG_RunLevelElts = append(_gdedb.EG_RunLevelElts, _dcfgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_ccaege := NewEG_BlockLevelElts()
				_fdaff := NewEG_ContentBlockContent()
				_ggccff := NewEG_RunLevelElts()
				_afbgcg := NewEG_RangeMarkupElements()
				_afbgcg.BookmarkStart = NewCT_Bookmark()
				if _fcccg := d.DecodeElement(_afbgcg.BookmarkStart, &_defggg); _fcccg != nil {
					return _fcccg
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _ccaege)
				_ccaege.EG_ContentBlockContent = append(_ccaege.EG_ContentBlockContent, _fdaff)
				_fdaff.EG_RunLevelElts = append(_fdaff.EG_RunLevelElts, _ggccff)
				_ggccff.EG_RangeMarkupElements = append(_ggccff.EG_RangeMarkupElements, _afbgcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_abegfe := NewEG_BlockLevelElts()
				_fbadca := NewEG_ContentBlockContent()
				_gecggg := NewEG_RunLevelElts()
				_gdbdf := NewEG_RangeMarkupElements()
				_gdbdf.BookmarkEnd = NewCT_MarkupRange()
				if _bbcbf := d.DecodeElement(_gdbdf.BookmarkEnd, &_defggg); _bbcbf != nil {
					return _bbcbf
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _abegfe)
				_abegfe.EG_ContentBlockContent = append(_abegfe.EG_ContentBlockContent, _fbadca)
				_fbadca.EG_RunLevelElts = append(_fbadca.EG_RunLevelElts, _gecggg)
				_gecggg.EG_RangeMarkupElements = append(_gecggg.EG_RangeMarkupElements, _gdbdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_beea := NewEG_BlockLevelElts()
				_eggebg := NewEG_ContentBlockContent()
				_deecc := NewEG_RunLevelElts()
				_bfffg := NewEG_RangeMarkupElements()
				_bfffg.MoveFromRangeStart = NewCT_MoveBookmark()
				if _fceecd := d.DecodeElement(_bfffg.MoveFromRangeStart, &_defggg); _fceecd != nil {
					return _fceecd
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _beea)
				_beea.EG_ContentBlockContent = append(_beea.EG_ContentBlockContent, _eggebg)
				_eggebg.EG_RunLevelElts = append(_eggebg.EG_RunLevelElts, _deecc)
				_deecc.EG_RangeMarkupElements = append(_deecc.EG_RangeMarkupElements, _bfffg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_cebbd := NewEG_BlockLevelElts()
				_ccagcb := NewEG_ContentBlockContent()
				_edcde := NewEG_RunLevelElts()
				_fdgde := NewEG_RangeMarkupElements()
				_fdgde.MoveFromRangeEnd = NewCT_MarkupRange()
				if _aabd := d.DecodeElement(_fdgde.MoveFromRangeEnd, &_defggg); _aabd != nil {
					return _aabd
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _cebbd)
				_cebbd.EG_ContentBlockContent = append(_cebbd.EG_ContentBlockContent, _ccagcb)
				_ccagcb.EG_RunLevelElts = append(_ccagcb.EG_RunLevelElts, _edcde)
				_edcde.EG_RangeMarkupElements = append(_edcde.EG_RangeMarkupElements, _fdgde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_cffaf := NewEG_BlockLevelElts()
				_cgccg := NewEG_ContentBlockContent()
				_aeagg := NewEG_RunLevelElts()
				_cdbgbf := NewEG_RangeMarkupElements()
				_cdbgbf.MoveToRangeStart = NewCT_MoveBookmark()
				if _cdcae := d.DecodeElement(_cdbgbf.MoveToRangeStart, &_defggg); _cdcae != nil {
					return _cdcae
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _cffaf)
				_cffaf.EG_ContentBlockContent = append(_cffaf.EG_ContentBlockContent, _cgccg)
				_cgccg.EG_RunLevelElts = append(_cgccg.EG_RunLevelElts, _aeagg)
				_aeagg.EG_RangeMarkupElements = append(_aeagg.EG_RangeMarkupElements, _cdbgbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_deadbe := NewEG_BlockLevelElts()
				_dcfccc := NewEG_ContentBlockContent()
				_fegdag := NewEG_RunLevelElts()
				_fgdgb := NewEG_RangeMarkupElements()
				_fgdgb.MoveToRangeEnd = NewCT_MarkupRange()
				if _eeedbb := d.DecodeElement(_fgdgb.MoveToRangeEnd, &_defggg); _eeedbb != nil {
					return _eeedbb
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _deadbe)
				_deadbe.EG_ContentBlockContent = append(_deadbe.EG_ContentBlockContent, _dcfccc)
				_dcfccc.EG_RunLevelElts = append(_dcfccc.EG_RunLevelElts, _fegdag)
				_fegdag.EG_RangeMarkupElements = append(_fegdag.EG_RangeMarkupElements, _fgdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_cfbaf := NewEG_BlockLevelElts()
				_bddcc := NewEG_ContentBlockContent()
				_bbbafd := NewEG_RunLevelElts()
				_afbfe := NewEG_RangeMarkupElements()
				_afbfe.CommentRangeStart = NewCT_MarkupRange()
				if _cgggeg := d.DecodeElement(_afbfe.CommentRangeStart, &_defggg); _cgggeg != nil {
					return _cgggeg
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _cfbaf)
				_cfbaf.EG_ContentBlockContent = append(_cfbaf.EG_ContentBlockContent, _bddcc)
				_bddcc.EG_RunLevelElts = append(_bddcc.EG_RunLevelElts, _bbbafd)
				_bbbafd.EG_RangeMarkupElements = append(_bbbafd.EG_RangeMarkupElements, _afbfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_ggdad := NewEG_BlockLevelElts()
				_edebc := NewEG_ContentBlockContent()
				_adebe := NewEG_RunLevelElts()
				_facfc := NewEG_RangeMarkupElements()
				_facfc.CommentRangeEnd = NewCT_MarkupRange()
				if _cegfcf := d.DecodeElement(_facfc.CommentRangeEnd, &_defggg); _cegfcf != nil {
					return _cegfcf
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _ggdad)
				_ggdad.EG_ContentBlockContent = append(_ggdad.EG_ContentBlockContent, _edebc)
				_edebc.EG_RunLevelElts = append(_edebc.EG_RunLevelElts, _adebe)
				_adebe.EG_RangeMarkupElements = append(_adebe.EG_RangeMarkupElements, _facfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_edafg := NewEG_BlockLevelElts()
				_gdfgff := NewEG_ContentBlockContent()
				_aaccca := NewEG_RunLevelElts()
				_eabdb := NewEG_RangeMarkupElements()
				_eabdb.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _bfadg := d.DecodeElement(_eabdb.CustomXmlInsRangeStart, &_defggg); _bfadg != nil {
					return _bfadg
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _edafg)
				_edafg.EG_ContentBlockContent = append(_edafg.EG_ContentBlockContent, _gdfgff)
				_gdfgff.EG_RunLevelElts = append(_gdfgff.EG_RunLevelElts, _aaccca)
				_aaccca.EG_RangeMarkupElements = append(_aaccca.EG_RangeMarkupElements, _eabdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_decce := NewEG_BlockLevelElts()
				_dbcdb := NewEG_ContentBlockContent()
				_fgcbf := NewEG_RunLevelElts()
				_adbag := NewEG_RangeMarkupElements()
				_adbag.CustomXmlInsRangeEnd = NewCT_Markup()
				if _dacbd := d.DecodeElement(_adbag.CustomXmlInsRangeEnd, &_defggg); _dacbd != nil {
					return _dacbd
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _decce)
				_decce.EG_ContentBlockContent = append(_decce.EG_ContentBlockContent, _dbcdb)
				_dbcdb.EG_RunLevelElts = append(_dbcdb.EG_RunLevelElts, _fgcbf)
				_fgcbf.EG_RangeMarkupElements = append(_fgcbf.EG_RangeMarkupElements, _adbag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_bcfcg := NewEG_BlockLevelElts()
				_afegfb := NewEG_ContentBlockContent()
				_efbbge := NewEG_RunLevelElts()
				_ccacf := NewEG_RangeMarkupElements()
				_ccacf.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _bfgcd := d.DecodeElement(_ccacf.CustomXmlDelRangeStart, &_defggg); _bfgcd != nil {
					return _bfgcd
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _bcfcg)
				_bcfcg.EG_ContentBlockContent = append(_bcfcg.EG_ContentBlockContent, _afegfb)
				_afegfb.EG_RunLevelElts = append(_afegfb.EG_RunLevelElts, _efbbge)
				_efbbge.EG_RangeMarkupElements = append(_efbbge.EG_RangeMarkupElements, _ccacf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fbcfae := NewEG_BlockLevelElts()
				_dadeg := NewEG_ContentBlockContent()
				_abbfa := NewEG_RunLevelElts()
				_aafg := NewEG_RangeMarkupElements()
				_aafg.CustomXmlDelRangeEnd = NewCT_Markup()
				if _ebafc := d.DecodeElement(_aafg.CustomXmlDelRangeEnd, &_defggg); _ebafc != nil {
					return _ebafc
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _fbcfae)
				_fbcfae.EG_ContentBlockContent = append(_fbcfae.EG_ContentBlockContent, _dadeg)
				_dadeg.EG_RunLevelElts = append(_dadeg.EG_RunLevelElts, _abbfa)
				_abbfa.EG_RangeMarkupElements = append(_abbfa.EG_RangeMarkupElements, _aafg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_babda := NewEG_BlockLevelElts()
				_afaba := NewEG_ContentBlockContent()
				_fdbbc := NewEG_RunLevelElts()
				_gdcec := NewEG_RangeMarkupElements()
				_gdcec.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _dbfaef := d.DecodeElement(_gdcec.CustomXmlMoveFromRangeStart, &_defggg); _dbfaef != nil {
					return _dbfaef
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _babda)
				_babda.EG_ContentBlockContent = append(_babda.EG_ContentBlockContent, _afaba)
				_afaba.EG_RunLevelElts = append(_afaba.EG_RunLevelElts, _fdbbc)
				_fdbbc.EG_RangeMarkupElements = append(_fdbbc.EG_RangeMarkupElements, _gdcec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_adgcb := NewEG_BlockLevelElts()
				_ggcbgf := NewEG_ContentBlockContent()
				_adaccb := NewEG_RunLevelElts()
				_aageg := NewEG_RangeMarkupElements()
				_aageg.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _adgag := d.DecodeElement(_aageg.CustomXmlMoveFromRangeEnd, &_defggg); _adgag != nil {
					return _adgag
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _adgcb)
				_adgcb.EG_ContentBlockContent = append(_adgcb.EG_ContentBlockContent, _ggcbgf)
				_ggcbgf.EG_RunLevelElts = append(_ggcbgf.EG_RunLevelElts, _adaccb)
				_adaccb.EG_RangeMarkupElements = append(_adaccb.EG_RangeMarkupElements, _aageg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_cdfec := NewEG_BlockLevelElts()
				_aacec := NewEG_ContentBlockContent()
				_eabage := NewEG_RunLevelElts()
				_acaace := NewEG_RangeMarkupElements()
				_acaace.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _geccg := d.DecodeElement(_acaace.CustomXmlMoveToRangeStart, &_defggg); _geccg != nil {
					return _geccg
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _cdfec)
				_cdfec.EG_ContentBlockContent = append(_cdfec.EG_ContentBlockContent, _aacec)
				_aacec.EG_RunLevelElts = append(_aacec.EG_RunLevelElts, _eabage)
				_eabage.EG_RangeMarkupElements = append(_eabage.EG_RangeMarkupElements, _acaace)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_ccdff := NewEG_BlockLevelElts()
				_gaadf := NewEG_ContentBlockContent()
				_gbbfe := NewEG_RunLevelElts()
				_ggfgd := NewEG_RangeMarkupElements()
				_ggfgd.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _afcfb := d.DecodeElement(_ggfgd.CustomXmlMoveToRangeEnd, &_defggg); _afcfb != nil {
					return _afcfb
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _ccdff)
				_ccdff.EG_ContentBlockContent = append(_ccdff.EG_ContentBlockContent, _gaadf)
				_gaadf.EG_RunLevelElts = append(_gaadf.EG_RunLevelElts, _gbbfe)
				_gbbfe.EG_RangeMarkupElements = append(_gbbfe.EG_RangeMarkupElements, _ggfgd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_beebac := NewEG_BlockLevelElts()
				_dfcaec := NewEG_ContentBlockContent()
				_bgbdb := NewEG_RunLevelElts()
				_cfdbc := NewEG_MathContent()
				_cfdbc.OMathPara = _f.NewOMathPara()
				if _bbedg := d.DecodeElement(_cfdbc.OMathPara, &_defggg); _bbedg != nil {
					return _bbedg
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _beebac)
				_beebac.EG_ContentBlockContent = append(_beebac.EG_ContentBlockContent, _dfcaec)
				_dfcaec.EG_RunLevelElts = append(_dfcaec.EG_RunLevelElts, _bgbdb)
				_bgbdb.EG_MathContent = append(_bgbdb.EG_MathContent, _cfdbc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_dbgdc := NewEG_BlockLevelElts()
				_eagae := NewEG_ContentBlockContent()
				_begfdb := NewEG_RunLevelElts()
				_gagde := NewEG_MathContent()
				_gagde.OMath = _f.NewOMath()
				if _cfeggc := d.DecodeElement(_gagde.OMath, &_defggg); _cfeggc != nil {
					return _cfeggc
				}
				_ecbgc.EG_BlockLevelElts = append(_ecbgc.EG_BlockLevelElts, _dbgdc)
				_dbgdc.EG_ContentBlockContent = append(_dbgdc.EG_ContentBlockContent, _eagae)
				_eagae.EG_RunLevelElts = append(_eagae.EG_RunLevelElts, _begfdb)
				_begfdb.EG_MathContent = append(_begfdb.EG_MathContent, _gagde)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on CT_Tc \u0025v", _defggg.Name)
				if _efbdb := d.Skip(); _efbdb != nil {
					return _efbdb
				}
			}
		case _d.EndElement:
			break _bfcgefe
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Empty and its children
func (_efab *CT_Empty) Validate() error        { return _efab.ValidateWithPath("CT_Empty") }
func NewCT_RunTrackChange() *CT_RunTrackChange { _dcabe := &CT_RunTrackChange{}; return _dcabe }
func (_ccgfd ST_LineNumberRestart) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ccgfd.String(), start)
}
func (_dccaf *CT_EdnDocProps) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dccaf.Pos != nil {
		_decd := _d.StartElement{Name: _d.Name{Local: "w:pos"}}
		e.EncodeElement(_dccaf.Pos, _decd)
	}
	if _dccaf.NumFmt != nil {
		_dabbc := _d.StartElement{Name: _d.Name{Local: "w:numFmt"}}
		e.EncodeElement(_dccaf.NumFmt, _dabbc)
	}
	if _dccaf.NumStart != nil {
		_effb := _d.StartElement{Name: _d.Name{Local: "w:numStart"}}
		e.EncodeElement(_dccaf.NumStart, _effb)
	}
	if _dccaf.NumRestart != nil {
		_ecda := _d.StartElement{Name: _d.Name{Local: "w:numRestart"}}
		e.EncodeElement(_dccaf.NumRestart, _ecda)
	}
	if _dccaf.Endnote != nil {
		_efbg := _d.StartElement{Name: _d.Name{Local: "w:endnote"}}
		for _, _gbbee := range _dccaf.Endnote {
			e.EncodeElement(_gbbee, _efbg)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fbdgc *CT_PageSz) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fbdgc.WAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:w"}, Value: _b.Sprintf("\u0025v", *_fbdgc.WAttr)})
	}
	if _fbdgc.HAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:h"}, Value: _b.Sprintf("\u0025v", *_fbdgc.HAttr)})
	}
	if _fbdgc.OrientAttr != ST_PageOrientationUnset {
		_bddgf, _cbdfa := _fbdgc.OrientAttr.MarshalXMLAttr(_d.Name{Local: "w:orient"})
		if _cbdfa != nil {
			return _cbdfa
		}
		start.Attr = append(start.Attr, _bddgf)
	}
	if _fbdgc.CodeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:code"}, Value: _b.Sprintf("\u0025v", *_fbdgc.CodeAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_TblGridCol() *CT_TblGridCol { _ccgdg := &CT_TblGridCol{}; return _ccgdg }

// ValidateWithPath validates the EG_RPr and its children, prefixing error messages with path
func (_fcgfed *EG_RPr) ValidateWithPath(path string) error {
	if _fcgfed.RPr != nil {
		if _fcbfb := _fcgfed.RPr.ValidateWithPath(path + "\u002fRPr"); _fcbfb != nil {
			return _fcbfb
		}
	}
	return nil
}
func (_aagbb *Comments) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aagbb.CT_Comments = *NewCT_Comments()
_dbfdga:
	for {
		_fcfgce, _gbbge := d.Token()
		if _gbbge != nil {
			return _gbbge
		}
		switch _ddegg := _fcfgce.(type) {
		case _d.StartElement:
			switch _ddegg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "comment"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "comment"}:
				_fgfdc := NewCT_Comment()
				if _aacfce := d.DecodeElement(_fgfdc, &_ddegg); _aacfce != nil {
					return _aacfce
				}
				_aagbb.Comment = append(_aagbb.Comment, _fgfdc)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020Comments\u0020\u0025v", _ddegg.Name)
				if _bcfaa := d.Skip(); _bcfaa != nil {
					return _bcfaa
				}
			}
		case _d.EndElement:
			break _dbfdga
		case _d.CharData:
		}
	}
	return nil
}

type CT_Font struct {

	// Primary Font Name
	NameAttr string

	// Alternate Names for Font
	AltName *CT_String

	// Panose-1 Typeface Classification Number
	Panose1 *CT_Panose

	// Character Set Supported By Font
	Charset *CT_Charset

	// Font Family
	Family *CT_FontFamily

	// Raster or Vector Font
	NotTrueType *CT_OnOff

	// Font Pitch
	Pitch *CT_Pitch

	// Supported Unicode Subranges and Code Pages
	Sig *CT_FontSig

	// Regular Font Style Embedding
	EmbedRegular *CT_FontRel

	// Bold Style Font Style Embedding
	EmbedBold *CT_FontRel

	// Italic Font Style Embedding
	EmbedItalic *CT_FontRel

	// Bold Italic Font Style Embedding
	EmbedBoldItalic *CT_FontRel
}

func (_cbcec *CT_FFTextType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_feded, _gccdf := _cbcec.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _gccdf != nil {
		return _gccdf
	}
	start.Attr = append(start.Attr, _feded)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_FFDDList and its children, prefixing error messages with path
func (_eaccf *CT_FFDDList) ValidateWithPath(path string) error {
	if _eaccf.Result != nil {
		if _gebbd := _eaccf.Result.ValidateWithPath(path + "\u002fResult"); _gebbd != nil {
			return _gebbd
		}
	}
	if _eaccf.Default != nil {
		if _cdddg := _eaccf.Default.ValidateWithPath(path + "\u002fDefault"); _cdddg != nil {
			return _cdddg
		}
	}
	for _fagae, _gfbb := range _eaccf.ListEntry {
		if _bfbg := _gfbb.ValidateWithPath(_b.Sprintf("\u0025s/ListEntry\u005b\u0025d\u005d", path, _fagae)); _bfbg != nil {
			return _bfbg
		}
	}
	return nil
}
func (_adddb *CT_TblPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bbdfb:
	for {
		_dacfagb, _aebdf := d.Token()
		if _aebdf != nil {
			return _aebdf
		}
		switch _fgabf := _dacfagb.(type) {
		case _d.StartElement:
			switch _fgabf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblStyle"}:
				_adddb.TblStyle = NewCT_String()
				if _bgdec := d.DecodeElement(_adddb.TblStyle, &_fgabf); _bgdec != nil {
					return _bgdec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblpPr"}:
				_adddb.TblpPr = NewCT_TblPPr()
				if _aeaeg := d.DecodeElement(_adddb.TblpPr, &_fgabf); _aeaeg != nil {
					return _aeaeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblOverlap"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblOverlap"}:
				_adddb.TblOverlap = NewCT_TblOverlap()
				if _dcedea := d.DecodeElement(_adddb.TblOverlap, &_fgabf); _dcedea != nil {
					return _dcedea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bidiVisual"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bidiVisual"}:
				_adddb.BidiVisual = NewCT_OnOff()
				if _dcega := d.DecodeElement(_adddb.BidiVisual, &_fgabf); _dcega != nil {
					return _dcega
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblStyleRowBandSize"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblStyleRowBandSize"}:
				_adddb.TblStyleRowBandSize = NewCT_DecimalNumber()
				if _abgeeb := d.DecodeElement(_adddb.TblStyleRowBandSize, &_fgabf); _abgeeb != nil {
					return _abgeeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblStyleColBandSize"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblStyleColBandSize"}:
				_adddb.TblStyleColBandSize = NewCT_DecimalNumber()
				if _eecgc := d.DecodeElement(_adddb.TblStyleColBandSize, &_fgabf); _eecgc != nil {
					return _eecgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblW"}:
				_adddb.TblW = NewCT_TblWidth()
				if _bfgbee := d.DecodeElement(_adddb.TblW, &_fgabf); _bfgbee != nil {
					return _bfgbee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "jc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "jc"}:
				_adddb.Jc = NewCT_JcTable()
				if _geade := d.DecodeElement(_adddb.Jc, &_fgabf); _geade != nil {
					return _geade
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellSpacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellSpacing"}:
				_adddb.TblCellSpacing = NewCT_TblWidth()
				if _cbabb := d.DecodeElement(_adddb.TblCellSpacing, &_fgabf); _cbabb != nil {
					return _cbabb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblInd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblInd"}:
				_adddb.TblInd = NewCT_TblWidth()
				if _bgfge := d.DecodeElement(_adddb.TblInd, &_fgabf); _bgfge != nil {
					return _bgfge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblBorders"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblBorders"}:
				_adddb.TblBorders = NewCT_TblBorders()
				if _ddcgd := d.DecodeElement(_adddb.TblBorders, &_fgabf); _ddcgd != nil {
					return _ddcgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_adddb.Shd = NewCT_Shd()
				if _gbcfa := d.DecodeElement(_adddb.Shd, &_fgabf); _gbcfa != nil {
					return _gbcfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLayout"}:
				_adddb.TblLayout = NewCT_TblLayoutType()
				if _cdcag := d.DecodeElement(_adddb.TblLayout, &_fgabf); _cdcag != nil {
					return _cdcag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCellMar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCellMar"}:
				_adddb.TblCellMar = NewCT_TblCellMar()
				if _dbbff := d.DecodeElement(_adddb.TblCellMar, &_fgabf); _dbbff != nil {
					return _dbbff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblLook"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblLook"}:
				_adddb.TblLook = NewCT_TblLook()
				if _cefgc := d.DecodeElement(_adddb.TblLook, &_fgabf); _cefgc != nil {
					return _cefgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblCaption"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblCaption"}:
				_adddb.TblCaption = NewCT_String()
				if _cfecb := d.DecodeElement(_adddb.TblCaption, &_fgabf); _cfecb != nil {
					return _cfecb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblDescription"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblDescription"}:
				_adddb.TblDescription = NewCT_String()
				if _agaee := d.DecodeElement(_adddb.TblDescription, &_fgabf); _agaee != nil {
					return _agaee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPrChange"}:
				_adddb.TblPrChange = NewCT_TblPrChange()
				if _fcbdce := d.DecodeElement(_adddb.TblPrChange, &_fgabf); _fcbdce != nil {
					return _fcbdce
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TblPr\u0020\u0025v", _fgabf.Name)
				if _gbddb := d.Skip(); _gbddb != nil {
					return _gbddb
				}
			}
		case _d.EndElement:
			break _bbdfb
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Ruby and its children, prefixing error messages with path
func (_dabbca *CT_Ruby) ValidateWithPath(path string) error {
	if _afbdf := _dabbca.RubyPr.ValidateWithPath(path + "\u002fRubyPr"); _afbdf != nil {
		return _afbdf
	}
	if _gffea := _dabbca.Rt.ValidateWithPath(path + "\u002fRt"); _gffea != nil {
		return _gffea
	}
	if _cggdcb := _dabbca.RubyBase.ValidateWithPath(path + "\u002fRubyBase"); _cggdcb != nil {
		return _cggdcb
	}
	return nil
}
func (_gfecf *CT_NumPicBullet) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gddeb := range start.Attr {
		if _gddeb.Name.Local == "numPicBulletId" {
			_affcc, _eabagf := _dd.ParseInt(_gddeb.Value, 10, 64)
			if _eabagf != nil {
				return _eabagf
			}
			_gfecf.NumPicBulletIdAttr = _affcc
			continue
		}
	}
_cbcbac:
	for {
		_facaf, _cfbca := d.Token()
		if _cfbca != nil {
			return _cfbca
		}
		switch _cfbbb := _facaf.(type) {
		case _d.StartElement:
			switch _cfbbb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pict"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pict"}:
				_gfecf.Pict = NewCT_Picture()
				if _fddba := d.DecodeElement(_gfecf.Pict, &_cfbbb); _fddba != nil {
					return _fddba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "drawing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "drawing"}:
				_gfecf.Drawing = NewCT_Drawing()
				if _dacab := d.DecodeElement(_gfecf.Drawing, &_cfbbb); _dacab != nil {
					return _dacab
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_NumPicBullet\u0020\u0025v", _cfbbb.Name)
				if _befga := d.Skip(); _befga != nil {
					return _befga
				}
			}
		case _d.EndElement:
			break _cbcbac
		case _d.CharData:
		}
	}
	return nil
}
func (_degfac ST_Jc) ValidateWithPath(path string) error {
	switch _degfac {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_degfac))
	}
	return nil
}
func (_gfggc *WdCT_WordprocessingContentPartNonVisual) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_daegf:
	for {
		_ccbaa, _gdbdc := d.Token()
		if _gdbdc != nil {
			return _gdbdc
		}
		switch _bcaeee := _ccbaa.(type) {
		case _d.StartElement:
			switch _bcaeee.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvPr"}:
				_gfggc.CNvPr = _eb.NewCT_NonVisualDrawingProps()
				if _bfacd := d.DecodeElement(_gfggc.CNvPr, &_bcaeee); _bfacd != nil {
					return _bfacd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvContentPartPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvContentPartPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvContentPartPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvContentPartPr"}:
				_gfggc.CNvContentPartPr = _eb.NewCT_NonVisualContentPartProperties()
				if _aggcf := d.DecodeElement(_gfggc.CNvContentPartPr, &_bcaeee); _aggcf != nil {
					return _aggcf
				}
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020WdCT_WordprocessingContentPartNonVisual\u0020\u0025v", _bcaeee.Name)
				if _aaffdf := d.Skip(); _aaffdf != nil {
					return _aaffdf
				}
			}
		case _d.EndElement:
			break _daegf
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_SimpleField and its children
func (_fcefe *CT_SimpleField) Validate() error { return _fcefe.ValidateWithPath("CT_SimpleField") }
func (_gfefeg ST_TblWidth) ValidateWithPath(path string) error {
	switch _gfefeg {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_gfefeg))
	}
	return nil
}

// ValidateWithPath validates the CT_LvlLegacy and its children, prefixing error messages with path
func (_bfcd *CT_LvlLegacy) ValidateWithPath(path string) error {
	if _bfcd.LegacyAttr != nil {
		if _cfedf := _bfcd.LegacyAttr.ValidateWithPath(path + "/LegacyAttr"); _cfedf != nil {
			return _cfedf
		}
	}
	if _bfcd.LegacySpaceAttr != nil {
		if _dfcag := _bfcd.LegacySpaceAttr.ValidateWithPath(path + "\u002fLegacySpaceAttr"); _dfcag != nil {
			return _dfcag
		}
	}
	if _bfcd.LegacyIndentAttr != nil {
		if _baeb := _bfcd.LegacyIndentAttr.ValidateWithPath(path + "\u002fLegacyIndentAttr"); _baeb != nil {
			return _baeb
		}
	}
	return nil
}
func NewCT_SdtDateMappingType() *CT_SdtDateMappingType {
	_gdeaa := &CT_SdtDateMappingType{}
	return _gdeaa
}

// ValidateWithPath validates the Hdr and its children, prefixing error messages with path
func (_fegcfd *Hdr) ValidateWithPath(path string) error {
	if _eagba := _fegcfd.CT_HdrFtr.ValidateWithPath(path); _eagba != nil {
		return _eagba
	}
	return nil
}
func (_egcdg ST_Hint) Validate() error { return _egcdg.ValidateWithPath("") }

type CT_Comments struct {

	// Comment Content
	Comment []*CT_Comment
}

func (_bgdab *CT_FtnProps) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cbcga:
	for {
		_dcede, _cgbcg := d.Token()
		if _cgbcg != nil {
			return _cgbcg
		}
		switch _faggbg := _dcede.(type) {
		case _d.StartElement:
			switch _faggbg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pos"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pos"}:
				_bgdab.Pos = NewCT_FtnPos()
				if _cfffec := d.DecodeElement(_bgdab.Pos, &_faggbg); _cfffec != nil {
					return _cfffec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numFmt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numFmt"}:
				_bgdab.NumFmt = NewCT_NumFmt()
				if _gabegf := d.DecodeElement(_bgdab.NumFmt, &_faggbg); _gabegf != nil {
					return _gabegf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numStart"}:
				_bgdab.NumStart = NewCT_DecimalNumber()
				if _beda := d.DecodeElement(_bgdab.NumStart, &_faggbg); _beda != nil {
					return _beda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numRestart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numRestart"}:
				_bgdab.NumRestart = NewCT_NumRestart()
				if _eccd := d.DecodeElement(_bgdab.NumRestart, &_faggbg); _eccd != nil {
					return _eccd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_FtnProps\u0020\u0025v", _faggbg.Name)
				if _dcdea := d.Skip(); _dcdea != nil {
					return _dcdea
				}
			}
		case _d.EndElement:
			break _cbcga
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_VerticalJc and its children
func (_caeegc *CT_VerticalJc) Validate() error { return _caeegc.ValidateWithPath("CT_VerticalJc") }

// Validate validates the WdCT_PosH and its children
func (_fdgfa *WdCT_PosH) Validate() error { return _fdgfa.ValidateWithPath("WdCT_PosH") }
func (_bgaab *CT_RPr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bgaab.RStyle != nil {
		_egffa := _d.StartElement{Name: _d.Name{Local: "w:rStyle"}}
		e.EncodeElement(_bgaab.RStyle, _egffa)
	}
	if _bgaab.RFonts != nil {
		_dgdgd := _d.StartElement{Name: _d.Name{Local: "w:rFonts"}}
		e.EncodeElement(_bgaab.RFonts, _dgdgd)
	}
	if _bgaab.B != nil {
		_fbaa := _d.StartElement{Name: _d.Name{Local: "w:b"}}
		e.EncodeElement(_bgaab.B, _fbaa)
	}
	if _bgaab.BCs != nil {
		_ababg := _d.StartElement{Name: _d.Name{Local: "w:bCs"}}
		e.EncodeElement(_bgaab.BCs, _ababg)
	}
	if _bgaab.I != nil {
		_bbeffg := _d.StartElement{Name: _d.Name{Local: "w:i"}}
		e.EncodeElement(_bgaab.I, _bbeffg)
	}
	if _bgaab.ICs != nil {
		_fgbbcf := _d.StartElement{Name: _d.Name{Local: "w:iCs"}}
		e.EncodeElement(_bgaab.ICs, _fgbbcf)
	}
	if _bgaab.Caps != nil {
		_cfcbb := _d.StartElement{Name: _d.Name{Local: "w:caps"}}
		e.EncodeElement(_bgaab.Caps, _cfcbb)
	}
	if _bgaab.SmallCaps != nil {
		_cdfc := _d.StartElement{Name: _d.Name{Local: "w:smallCaps"}}
		e.EncodeElement(_bgaab.SmallCaps, _cdfc)
	}
	if _bgaab.Strike != nil {
		_caggfa := _d.StartElement{Name: _d.Name{Local: "w:strike"}}
		e.EncodeElement(_bgaab.Strike, _caggfa)
	}
	if _bgaab.Dstrike != nil {
		_bgdgg := _d.StartElement{Name: _d.Name{Local: "w:dstrike"}}
		e.EncodeElement(_bgaab.Dstrike, _bgdgg)
	}
	if _bgaab.Outline != nil {
		_ecfc := _d.StartElement{Name: _d.Name{Local: "w:outline"}}
		e.EncodeElement(_bgaab.Outline, _ecfc)
	}
	if _bgaab.Shadow != nil {
		_ebbbc := _d.StartElement{Name: _d.Name{Local: "w:shadow"}}
		e.EncodeElement(_bgaab.Shadow, _ebbbc)
	}
	if _bgaab.Emboss != nil {
		_abfbg := _d.StartElement{Name: _d.Name{Local: "w:emboss"}}
		e.EncodeElement(_bgaab.Emboss, _abfbg)
	}
	if _bgaab.Imprint != nil {
		_edcdb := _d.StartElement{Name: _d.Name{Local: "w:imprint"}}
		e.EncodeElement(_bgaab.Imprint, _edcdb)
	}
	if _bgaab.NoProof != nil {
		_eebeb := _d.StartElement{Name: _d.Name{Local: "w:noProof"}}
		e.EncodeElement(_bgaab.NoProof, _eebeb)
	}
	if _bgaab.SnapToGrid != nil {
		_acbgb := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_bgaab.SnapToGrid, _acbgb)
	}
	if _bgaab.Vanish != nil {
		_eecdb := _d.StartElement{Name: _d.Name{Local: "w:vanish"}}
		e.EncodeElement(_bgaab.Vanish, _eecdb)
	}
	if _bgaab.WebHidden != nil {
		_gcfa := _d.StartElement{Name: _d.Name{Local: "w:webHidden"}}
		e.EncodeElement(_bgaab.WebHidden, _gcfa)
	}
	if _bgaab.Color != nil {
		_cgcbd := _d.StartElement{Name: _d.Name{Local: "w:color"}}
		e.EncodeElement(_bgaab.Color, _cgcbd)
	}
	if _bgaab.Spacing != nil {
		_gcefg := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_bgaab.Spacing, _gcefg)
	}
	if _bgaab.W != nil {
		_eeafe := _d.StartElement{Name: _d.Name{Local: "w:w"}}
		e.EncodeElement(_bgaab.W, _eeafe)
	}
	if _bgaab.Kern != nil {
		_bccdd := _d.StartElement{Name: _d.Name{Local: "w:kern"}}
		e.EncodeElement(_bgaab.Kern, _bccdd)
	}
	if _bgaab.Position != nil {
		_fdbgf := _d.StartElement{Name: _d.Name{Local: "w:position"}}
		e.EncodeElement(_bgaab.Position, _fdbgf)
	}
	if _bgaab.Sz != nil {
		_fabde := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_bgaab.Sz, _fabde)
	}
	if _bgaab.SzCs != nil {
		_cfgca := _d.StartElement{Name: _d.Name{Local: "w:szCs"}}
		e.EncodeElement(_bgaab.SzCs, _cfgca)
	}
	if _bgaab.Highlight != nil {
		_geebag := _d.StartElement{Name: _d.Name{Local: "w:highlight"}}
		e.EncodeElement(_bgaab.Highlight, _geebag)
	}
	if _bgaab.U != nil {
		_gggff := _d.StartElement{Name: _d.Name{Local: "w:u"}}
		e.EncodeElement(_bgaab.U, _gggff)
	}
	if _bgaab.Effect != nil {
		_facbg := _d.StartElement{Name: _d.Name{Local: "w:effect"}}
		e.EncodeElement(_bgaab.Effect, _facbg)
	}
	if _bgaab.Bdr != nil {
		_feadc := _d.StartElement{Name: _d.Name{Local: "w:bdr"}}
		e.EncodeElement(_bgaab.Bdr, _feadc)
	}
	if _bgaab.Shd != nil {
		_afedf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_bgaab.Shd, _afedf)
	}
	if _bgaab.FitText != nil {
		_ecccgb := _d.StartElement{Name: _d.Name{Local: "w:fitText"}}
		e.EncodeElement(_bgaab.FitText, _ecccgb)
	}
	if _bgaab.VertAlign != nil {
		_gcdee := _d.StartElement{Name: _d.Name{Local: "w:vertAlign"}}
		e.EncodeElement(_bgaab.VertAlign, _gcdee)
	}
	if _bgaab.Rtl != nil {
		_fgafg := _d.StartElement{Name: _d.Name{Local: "w:rtl"}}
		e.EncodeElement(_bgaab.Rtl, _fgafg)
	}
	if _bgaab.Cs != nil {
		_cbeaf := _d.StartElement{Name: _d.Name{Local: "w:cs"}}
		e.EncodeElement(_bgaab.Cs, _cbeaf)
	}
	if _bgaab.Em != nil {
		_defaf := _d.StartElement{Name: _d.Name{Local: "w:em"}}
		e.EncodeElement(_bgaab.Em, _defaf)
	}
	if _bgaab.Lang != nil {
		_fcfcc := _d.StartElement{Name: _d.Name{Local: "w:lang"}}
		e.EncodeElement(_bgaab.Lang, _fcfcc)
	}
	if _bgaab.EastAsianLayout != nil {
		_cbeee := _d.StartElement{Name: _d.Name{Local: "w:eastAsianLayout"}}
		e.EncodeElement(_bgaab.EastAsianLayout, _cbeee)
	}
	if _bgaab.SpecVanish != nil {
		_bgdcb := _d.StartElement{Name: _d.Name{Local: "w:specVanish"}}
		e.EncodeElement(_bgaab.SpecVanish, _bgdcb)
	}
	if _bgaab.OMath != nil {
		_bdcdeb := _d.StartElement{Name: _d.Name{Local: "w:oMath"}}
		e.EncodeElement(_bgaab.OMath, _bdcdeb)
	}
	if _bgaab.RPrChange != nil {
		_bacfa := _d.StartElement{Name: _d.Name{Local: "w:rPrChange"}}
		e.EncodeElement(_bgaab.RPrChange, _bacfa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TblPrBase and its children, prefixing error messages with path
func (_effcd *CT_TblPrBase) ValidateWithPath(path string) error {
	if _effcd.TblStyle != nil {
		if _cdbga := _effcd.TblStyle.ValidateWithPath(path + "\u002fTblStyle"); _cdbga != nil {
			return _cdbga
		}
	}
	if _effcd.TblpPr != nil {
		if _ddbfg := _effcd.TblpPr.ValidateWithPath(path + "\u002fTblpPr"); _ddbfg != nil {
			return _ddbfg
		}
	}
	if _effcd.TblOverlap != nil {
		if _egdcbg := _effcd.TblOverlap.ValidateWithPath(path + "/TblOverlap"); _egdcbg != nil {
			return _egdcbg
		}
	}
	if _effcd.BidiVisual != nil {
		if _ggbfb := _effcd.BidiVisual.ValidateWithPath(path + "/BidiVisual"); _ggbfb != nil {
			return _ggbfb
		}
	}
	if _effcd.TblStyleRowBandSize != nil {
		if _bfabe := _effcd.TblStyleRowBandSize.ValidateWithPath(path + "/TblStyleRowBandSize"); _bfabe != nil {
			return _bfabe
		}
	}
	if _effcd.TblStyleColBandSize != nil {
		if _ecfdfg := _effcd.TblStyleColBandSize.ValidateWithPath(path + "/TblStyleColBandSize"); _ecfdfg != nil {
			return _ecfdfg
		}
	}
	if _effcd.TblW != nil {
		if _ggceaf := _effcd.TblW.ValidateWithPath(path + "\u002fTblW"); _ggceaf != nil {
			return _ggceaf
		}
	}
	if _effcd.Jc != nil {
		if _fbggc := _effcd.Jc.ValidateWithPath(path + "\u002fJc"); _fbggc != nil {
			return _fbggc
		}
	}
	if _effcd.TblCellSpacing != nil {
		if _dcdgbd := _effcd.TblCellSpacing.ValidateWithPath(path + "\u002fTblCellSpacing"); _dcdgbd != nil {
			return _dcdgbd
		}
	}
	if _effcd.TblInd != nil {
		if _ffaafd := _effcd.TblInd.ValidateWithPath(path + "\u002fTblInd"); _ffaafd != nil {
			return _ffaafd
		}
	}
	if _effcd.TblBorders != nil {
		if _ecfcg := _effcd.TblBorders.ValidateWithPath(path + "/TblBorders"); _ecfcg != nil {
			return _ecfcg
		}
	}
	if _effcd.Shd != nil {
		if _afeab := _effcd.Shd.ValidateWithPath(path + "\u002fShd"); _afeab != nil {
			return _afeab
		}
	}
	if _effcd.TblLayout != nil {
		if _bddea := _effcd.TblLayout.ValidateWithPath(path + "\u002fTblLayout"); _bddea != nil {
			return _bddea
		}
	}
	if _effcd.TblCellMar != nil {
		if _gdebfe := _effcd.TblCellMar.ValidateWithPath(path + "/TblCellMar"); _gdebfe != nil {
			return _gdebfe
		}
	}
	if _effcd.TblLook != nil {
		if _cbdcd := _effcd.TblLook.ValidateWithPath(path + "\u002fTblLook"); _cbdcd != nil {
			return _cbdcd
		}
	}
	if _effcd.TblCaption != nil {
		if _fafeaf := _effcd.TblCaption.ValidateWithPath(path + "/TblCaption"); _fafeaf != nil {
			return _fafeaf
		}
	}
	if _effcd.TblDescription != nil {
		if _eccgg := _effcd.TblDescription.ValidateWithPath(path + "\u002fTblDescription"); _eccgg != nil {
			return _eccgg
		}
	}
	return nil
}
func (_cbdgd *EG_ParaRPrTrackChanges) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cbdgd.Ins != nil {
		_bgeccd := _d.StartElement{Name: _d.Name{Local: "w:ins"}}
		e.EncodeElement(_cbdgd.Ins, _bgeccd)
	}
	if _cbdgd.Del != nil {
		_bbaaa := _d.StartElement{Name: _d.Name{Local: "w:del"}}
		e.EncodeElement(_cbdgd.Del, _bbaaa)
	}
	if _cbdgd.MoveFrom != nil {
		_dagcef := _d.StartElement{Name: _d.Name{Local: "w:moveFrom"}}
		e.EncodeElement(_cbdgd.MoveFrom, _dagcef)
	}
	if _cbdgd.MoveTo != nil {
		_deddd := _d.StartElement{Name: _d.Name{Local: "w:moveTo"}}
		e.EncodeElement(_cbdgd.MoveTo, _deddd)
	}
	return nil
}

// ValidateWithPath validates the CT_CellMergeTrackChange and its children, prefixing error messages with path
func (_gfee *CT_CellMergeTrackChange) ValidateWithPath(path string) error {
	if _dbbc := _gfee.VMergeAttr.ValidateWithPath(path + "/VMergeAttr"); _dbbc != nil {
		return _dbbc
	}
	if _abge := _gfee.VMergeOrigAttr.ValidateWithPath(path + "\u002fVMergeOrigAttr"); _abge != nil {
		return _abge
	}
	return nil
}

// ValidateWithPath validates the CT_AbstractNum and its children, prefixing error messages with path
func (_bfc *CT_AbstractNum) ValidateWithPath(path string) error {
	if _bfc.Nsid != nil {
		if _bbd := _bfc.Nsid.ValidateWithPath(path + "\u002fNsid"); _bbd != nil {
			return _bbd
		}
	}
	if _bfc.MultiLevelType != nil {
		if _bab := _bfc.MultiLevelType.ValidateWithPath(path + "\u002fMultiLevelType"); _bab != nil {
			return _bab
		}
	}
	if _bfc.Tmpl != nil {
		if _cabg := _bfc.Tmpl.ValidateWithPath(path + "\u002fTmpl"); _cabg != nil {
			return _cabg
		}
	}
	if _bfc.Name != nil {
		if _cad := _bfc.Name.ValidateWithPath(path + "\u002fName"); _cad != nil {
			return _cad
		}
	}
	if _bfc.StyleLink != nil {
		if _deb := _bfc.StyleLink.ValidateWithPath(path + "\u002fStyleLink"); _deb != nil {
			return _deb
		}
	}
	if _bfc.NumStyleLink != nil {
		if _cebg := _bfc.NumStyleLink.ValidateWithPath(path + "\u002fNumStyleLink"); _cebg != nil {
			return _cebg
		}
	}
	for _cbb, _fbe := range _bfc.Lvl {
		if _bfce := _fbe.ValidateWithPath(_b.Sprintf("\u0025s\u002fLvl\u005b\u0025d\u005d", path, _cbb)); _bfce != nil {
			return _bfce
		}
	}
	return nil
}

// Validate validates the CT_OdsoFieldMapData and its children
func (_cebff *CT_OdsoFieldMapData) Validate() error {
	return _cebff.ValidateWithPath("CT_OdsoFieldMapData")
}
func (_beebbc *Numbering) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_beebbc.CT_Numbering = *NewCT_Numbering()
_cedbac:
	for {
		_ffeaf, _fdbede := d.Token()
		if _fdbede != nil {
			return _fdbede
		}
		switch _egagcd := _ffeaf.(type) {
		case _d.StartElement:
			switch _egagcd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numPicBullet"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numPicBullet"}:
				_agfea := NewCT_NumPicBullet()
				if _egcedf := d.DecodeElement(_agfea, &_egagcd); _egcedf != nil {
					return _egcedf
				}
				_beebbc.NumPicBullet = append(_beebbc.NumPicBullet, _agfea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "abstractNum"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "abstractNum"}:
				_acgaae := NewCT_AbstractNum()
				if _bbeffb := d.DecodeElement(_acgaae, &_egagcd); _bbeffb != nil {
					return _bbeffb
				}
				_beebbc.AbstractNum = append(_beebbc.AbstractNum, _acgaae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "num"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "num"}:
				_affaga := NewCT_Num()
				if _efbabc := d.DecodeElement(_affaga, &_egagcd); _efbabc != nil {
					return _efbabc
				}
				_beebbc.Num = append(_beebbc.Num, _affaga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numIdMacAtCleanup"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numIdMacAtCleanup"}:
				_beebbc.NumIdMacAtCleanup = NewCT_DecimalNumber()
				if _bddbg := d.DecodeElement(_beebbc.NumIdMacAtCleanup, &_egagcd); _bddbg != nil {
					return _bddbg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on Numbering \u0025v", _egagcd.Name)
				if _ebafea := d.Skip(); _ebafea != nil {
					return _ebafea
				}
			}
		case _d.EndElement:
			break _cedbac
		case _d.CharData:
		}
	}
	return nil
}
func (_aabad *CT_String) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _aabad.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cadfb ST_HdrFtr) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bdcdec := _d.Attr{}
	_bdcdec.Name = name
	switch _cadfb {
	case ST_HdrFtrUnset:
		_bdcdec.Value = ""
	case ST_HdrFtrEven:
		_bdcdec.Value = "even"
	case ST_HdrFtrDefault:
		_bdcdec.Value = "default"
	case ST_HdrFtrFirst:
		_bdcdec.Value = "first"
	}
	return _bdcdec, nil
}
func (_badb *CT_DocumentBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cddec:
	for {
		_fbccb, _fcgb := d.Token()
		if _fcgb != nil {
			return _fcgb
		}
		switch _ebcac := _fbccb.(type) {
		case _d.StartElement:
			switch _ebcac.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "background"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "background"}:
				_badb.Background = NewCT_Background()
				if _ccacb := d.DecodeElement(_badb.Background, &_ebcac); _ccacb != nil {
					return _ccacb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DocumentBase\u0020\u0025v", _ebcac.Name)
				if _adac := d.Skip(); _adac != nil {
					return _adac
				}
			}
		case _d.EndElement:
			break _cddec
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_SdtComboBox() *CT_SdtComboBox { _gfecc := &CT_SdtComboBox{}; return _gfecc }
func (_agccaa *WdCT_WordprocessingContentPart) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bcfcdf := range start.Attr {
		if _bcfcdf.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _bcfcdf.Name.Local == "id" || _bcfcdf.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _bcfcdf.Name.Local == "id" {
			_cgffd, _dbdbbe := _bcfcdf.Value, error(nil)
			if _dbdbbe != nil {
				return _dbdbbe
			}
			_agccaa.IdAttr = _cgffd
			continue
		}
		if _bcfcdf.Name.Local == "bwMode" {
			_agccaa.BwModeAttr.UnmarshalXMLAttr(_bcfcdf)
			continue
		}
	}
_fgbgb:
	for {
		_bfebb, _dbaggb := d.Token()
		if _dbaggb != nil {
			return _dbaggb
		}
		switch _bedeca := _bfebb.(type) {
		case _d.StartElement:
			switch _bedeca.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "nvContentPartPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "nvContentPartPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "nvContentPartPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "nvContentPartPr"}:
				_agccaa.NvContentPartPr = NewWdCT_WordprocessingContentPartNonVisual()
				if _bdbab := d.DecodeElement(_agccaa.NvContentPartPr, &_bedeca); _bdbab != nil {
					return _bdbab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "xfrm"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "xfrm"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "xfrm"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "xfrm"}:
				_agccaa.Xfrm = _eb.NewCT_Transform2D()
				if _bacfe := d.DecodeElement(_agccaa.Xfrm, &_bedeca); _bacfe != nil {
					return _bacfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_agccaa.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _afbgdd := d.DecodeElement(_agccaa.ExtLst, &_bedeca); _afbgdd != nil {
					return _afbgdd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WordprocessingContentPart\u0020\u0025v", _bedeca.Name)
				if _adecea := d.Skip(); _adecea != nil {
					return _adecea
				}
			}
		case _d.EndElement:
			break _fgbgb
		case _d.CharData:
		}
	}
	return nil
}
func (_ebbeca *ST_PTabRelativeTo) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ebbeca = 0
	case "margin":
		*_ebbeca = 1
	case "indent":
		*_ebbeca = 2
	}
	return nil
}
func NewCT_RubyAlign() *CT_RubyAlign {
	_ggaeag := &CT_RubyAlign{}
	_ggaeag.ValAttr = ST_RubyAlign(1)
	return _ggaeag
}

type CT_DataBinding struct {

	// XML Namespace Prefix Mappings
	PrefixMappingsAttr *string

	// XPath
	XpathAttr string

	// Custom XML Data Storage ID
	StoreItemIDAttr string
}
type ST_JcTable byte

func NewCT_ParaRPrChange() *CT_ParaRPrChange {
	_eeface := &CT_ParaRPrChange{}
	_eeface.RPr = NewCT_ParaRPrOriginal()
	return _eeface
}

type WdCT_WordprocessingGroupChoice struct {
	Wsp          []*WdWsp
	GrpSp        []*WdCT_WordprocessingGroup
	GraphicFrame []*WdCT_GraphicFrame
	Pic          []*_ca.Pic
	ContentPart  []*WdCT_WordprocessingContentPart
}

// Validate validates the CT_FFTextInput and its children
func (_eagd *CT_FFTextInput) Validate() error { return _eagd.ValidateWithPath("CT_FFTextInput") }
func NewCT_Endnotes() *CT_Endnotes            { _dbfe := &CT_Endnotes{}; return _dbfe }

// Validate validates the CT_SdtDropDownList and its children
func (_eaaaga *CT_SdtDropDownList) Validate() error {
	return _eaaaga.ValidateWithPath("CT_SdtDropDownList")
}

// Validate validates the CT_CustomXmlRun and its children
func (_gegb *CT_CustomXmlRun) Validate() error { return _gegb.ValidateWithPath("CT_CustomXmlRun") }
func (_gfbfg *EG_FtnEdnNumProps) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gcfff:
	for {
		_decccb, _ceafe := d.Token()
		if _ceafe != nil {
			return _ceafe
		}
		switch _ffcbbc := _decccb.(type) {
		case _d.StartElement:
			switch _ffcbbc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numStart"}:
				_gfbfg.NumStart = NewCT_DecimalNumber()
				if _caccd := d.DecodeElement(_gfbfg.NumStart, &_ffcbbc); _caccd != nil {
					return _caccd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numRestart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numRestart"}:
				_gfbfg.NumRestart = NewCT_NumRestart()
				if _cgaacb := d.DecodeElement(_gfbfg.NumRestart, &_ffcbbc); _cgaacb != nil {
					return _cgaacb
				}
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020EG_FtnEdnNumProps\u0020\u0025v", _ffcbbc.Name)
				if _fecgc := d.Skip(); _fecgc != nil {
					return _fecgc
				}
			}
		case _d.EndElement:
			break _gcfff
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_TblPrChange() *CT_TblPrChange {
	_gcdab := &CT_TblPrChange{}
	_gcdab.TblPr = NewCT_TblPrBase()
	return _gcdab
}
func NewCT_Lvl() *CT_Lvl { _gacfge := &CT_Lvl{}; return _gacfge }

const (
	ST_WrapUnset     ST_Wrap = 0
	ST_WrapAuto      ST_Wrap = 1
	ST_WrapNotBeside ST_Wrap = 2
	ST_WrapAround    ST_Wrap = 3
	ST_WrapTight     ST_Wrap = 4
	ST_WrapThrough   ST_Wrap = 5
	ST_WrapNone      ST_Wrap = 6
)

type Styles struct{ CT_Styles }

func (_dffgda ST_CharacterSpacing) ValidateWithPath(path string) error {
	switch _dffgda {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dffgda))
	}
	return nil
}
func (_fbgec *CT_Markup) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _fbgec.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_TrPrChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
	TrPr   *CT_TrPrBase
}
type ST_HighlightColor byte

func NewCT_AbstractNum() *CT_AbstractNum { _aeb := &CT_AbstractNum{}; return _aeb }
func (_egbd *CT_DataBinding) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gecd := range start.Attr {
		if _gecd.Name.Local == "prefixMappings" {
			_ebgdf, _bbec := _gecd.Value, error(nil)
			if _bbec != nil {
				return _bbec
			}
			_egbd.PrefixMappingsAttr = &_ebgdf
			continue
		}
		if _gecd.Name.Local == "xpath" {
			_gbfca, _bgagg := _gecd.Value, error(nil)
			if _bgagg != nil {
				return _bgagg
			}
			_egbd.XpathAttr = _gbfca
			continue
		}
		if _gecd.Name.Local == "storeItemID" {
			_ccgd, _daddb := _gecd.Value, error(nil)
			if _daddb != nil {
				return _daddb
			}
			_egbd.StoreItemIDAttr = _ccgd
			continue
		}
	}
	for {
		_dgfeg, _eebcc := d.Token()
		if _eebcc != nil {
			return _b.Errorf("parsing\u0020CT_DataBinding:\u0020\u0025s", _eebcc)
		}
		if _acdg, _ggbcg := _dgfeg.(_d.EndElement); _ggbcg && _acdg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_TopPageBorder() *CT_TopPageBorder {
	_aabbec := &CT_TopPageBorder{}
	_aabbec.ValAttr = ST_Border(1)
	return _aabbec
}

// ValidateWithPath validates the CT_Styles and its children, prefixing error messages with path
func (_ggdegb *CT_Styles) ValidateWithPath(path string) error {
	if _ggdegb.DocDefaults != nil {
		if _decbc := _ggdegb.DocDefaults.ValidateWithPath(path + "\u002fDocDefaults"); _decbc != nil {
			return _decbc
		}
	}
	if _ggdegb.LatentStyles != nil {
		if _ddbec := _ggdegb.LatentStyles.ValidateWithPath(path + "\u002fLatentStyles"); _ddbec != nil {
			return _ddbec
		}
	}
	for _eeaae, _gecde := range _ggdegb.Style {
		if _aeffd := _gecde.ValidateWithPath(_b.Sprintf("\u0025s\u002fStyle\u005b\u0025d\u005d", path, _eeaae)); _aeffd != nil {
			return _aeffd
		}
	}
	return nil
}
func (_eaadeg WdST_RelFromV) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dfeadgf := _d.Attr{}
	_dfeadgf.Name = name
	switch _eaadeg {
	case WdST_RelFromVUnset:
		_dfeadgf.Value = ""
	case WdST_RelFromVMargin:
		_dfeadgf.Value = "margin"
	case WdST_RelFromVPage:
		_dfeadgf.Value = "page"
	case WdST_RelFromVParagraph:
		_dfeadgf.Value = "paragraph"
	case WdST_RelFromVLine:
		_dfeadgf.Value = "line"
	case WdST_RelFromVTopMargin:
		_dfeadgf.Value = "topMargin"
	case WdST_RelFromVBottomMargin:
		_dfeadgf.Value = "bottomMargin"
	case WdST_RelFromVInsideMargin:
		_dfeadgf.Value = "insideMargin"
	case WdST_RelFromVOutsideMargin:
		_dfeadgf.Value = "outsideMargin"
	}
	return _dfeadgf, nil
}

// ValidateWithPath validates the WdCT_WordprocessingContentPart and its children, prefixing error messages with path
func (_dagad *WdCT_WordprocessingContentPart) ValidateWithPath(path string) error {
	if _fgebc := _dagad.BwModeAttr.ValidateWithPath(path + "/BwModeAttr"); _fgebc != nil {
		return _fgebc
	}
	if _dagad.NvContentPartPr != nil {
		if _ggeffcb := _dagad.NvContentPartPr.ValidateWithPath(path + "\u002fNvContentPartPr"); _ggeffcb != nil {
			return _ggeffcb
		}
	}
	if _dagad.Xfrm != nil {
		if _begcg := _dagad.Xfrm.ValidateWithPath(path + "\u002fXfrm"); _begcg != nil {
			return _begcg
		}
	}
	if _dagad.ExtLst != nil {
		if _ageac := _dagad.ExtLst.ValidateWithPath(path + "\u002fExtLst"); _ageac != nil {
			return _ageac
		}
	}
	return nil
}
func NewCT_TblPr() *CT_TblPr { _aegcg := &CT_TblPr{}; return _aegcg }
func NewWdCT_WordprocessingGroupChoice() *WdCT_WordprocessingGroupChoice {
	_gaafgd := &WdCT_WordprocessingGroupChoice{}
	return _gaafgd
}
func (_defca ST_VAnchor) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cbagfg := _d.Attr{}
	_cbagfg.Name = name
	switch _defca {
	case ST_VAnchorUnset:
		_cbagfg.Value = ""
	case ST_VAnchorText:
		_cbagfg.Value = "text"
	case ST_VAnchorMargin:
		_cbagfg.Value = "margin"
	case ST_VAnchorPage:
		_cbagfg.Value = "page"
	}
	return _cbagfg, nil
}

// ValidateWithPath validates the WdEG_WrapType and its children, prefixing error messages with path
func (_agfdg *WdEG_WrapType) ValidateWithPath(path string) error {
	if _agfdg.Choice != nil {
		if _bebfbc := _agfdg.Choice.ValidateWithPath(path + "\u002fChoice"); _bebfbc != nil {
			return _bebfbc
		}
	}
	return nil
}
func NewCT_TblPrExChange() *CT_TblPrExChange {
	_gcbdg := &CT_TblPrExChange{}
	_gcbdg.TblPrEx = NewCT_TblPrExBase()
	return _gcbdg
}

type ST_ObjectDrawAspect byte

func (_ededf *EG_ContentRunContentBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dgfee:
	for {
		_daecc, _feadae := d.Token()
		if _feadae != nil {
			return _feadae
		}
		switch _dcdda := _daecc.(type) {
		case _d.StartElement:
			switch _dcdda.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_ededf.SmartTag = NewCT_SmartTagRun()
				if _gbfbff := d.DecodeElement(_ededf.SmartTag, &_dcdda); _gbfbff != nil {
					return _gbfbff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_ededf.Sdt = NewCT_SdtRun()
				if _gdcac := d.DecodeElement(_ededf.Sdt, &_dcdda); _gdcac != nil {
					return _gdcac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_efecad := NewEG_RunLevelElts()
				_efecad.ProofErr = NewCT_ProofErr()
				if _gaefe := d.DecodeElement(_efecad.ProofErr, &_dcdda); _gaefe != nil {
					return _gaefe
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _efecad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_becfaf := NewEG_RunLevelElts()
				_becfaf.PermStart = NewCT_PermStart()
				if _ccabce := d.DecodeElement(_becfaf.PermStart, &_dcdda); _ccabce != nil {
					return _ccabce
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _becfaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_bagdb := NewEG_RunLevelElts()
				_bagdb.PermEnd = NewCT_Perm()
				if _decfdg := d.DecodeElement(_bagdb.PermEnd, &_dcdda); _decfdg != nil {
					return _decfdg
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _bagdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_caggeb := NewEG_RunLevelElts()
				_caggeb.Ins = NewCT_RunTrackChange()
				if _dbeccd := d.DecodeElement(_caggeb.Ins, &_dcdda); _dbeccd != nil {
					return _dbeccd
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _caggeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_gcegc := NewEG_RunLevelElts()
				_gcegc.Del = NewCT_RunTrackChange()
				if _ddffda := d.DecodeElement(_gcegc.Del, &_dcdda); _ddffda != nil {
					return _ddffda
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _gcegc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_gbdee := NewEG_RunLevelElts()
				_gbdee.MoveFrom = NewCT_RunTrackChange()
				if _acacc := d.DecodeElement(_gbdee.MoveFrom, &_dcdda); _acacc != nil {
					return _acacc
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _gbdee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_fagefd := NewEG_RunLevelElts()
				_fagefd.MoveTo = NewCT_RunTrackChange()
				if _deadba := d.DecodeElement(_fagefd.MoveTo, &_dcdda); _deadba != nil {
					return _deadba
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _fagefd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_fdabg := NewEG_RunLevelElts()
				_eacbba := NewEG_RangeMarkupElements()
				_eacbba.BookmarkStart = NewCT_Bookmark()
				if _gbeeb := d.DecodeElement(_eacbba.BookmarkStart, &_dcdda); _gbeeb != nil {
					return _gbeeb
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _fdabg)
				_fdabg.EG_RangeMarkupElements = append(_fdabg.EG_RangeMarkupElements, _eacbba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_agdggb := NewEG_RunLevelElts()
				_aebeac := NewEG_RangeMarkupElements()
				_aebeac.BookmarkEnd = NewCT_MarkupRange()
				if _ddbdbd := d.DecodeElement(_aebeac.BookmarkEnd, &_dcdda); _ddbdbd != nil {
					return _ddbdbd
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _agdggb)
				_agdggb.EG_RangeMarkupElements = append(_agdggb.EG_RangeMarkupElements, _aebeac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fagebf := NewEG_RunLevelElts()
				_dgbbc := NewEG_RangeMarkupElements()
				_dgbbc.MoveFromRangeStart = NewCT_MoveBookmark()
				if _bedac := d.DecodeElement(_dgbbc.MoveFromRangeStart, &_dcdda); _bedac != nil {
					return _bedac
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _fagebf)
				_fagebf.EG_RangeMarkupElements = append(_fagebf.EG_RangeMarkupElements, _dgbbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_aadedf := NewEG_RunLevelElts()
				_aeegf := NewEG_RangeMarkupElements()
				_aeegf.MoveFromRangeEnd = NewCT_MarkupRange()
				if _dabdcb := d.DecodeElement(_aeegf.MoveFromRangeEnd, &_dcdda); _dabdcb != nil {
					return _dabdcb
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _aadedf)
				_aadedf.EG_RangeMarkupElements = append(_aadedf.EG_RangeMarkupElements, _aeegf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_fgafe := NewEG_RunLevelElts()
				_fdfbag := NewEG_RangeMarkupElements()
				_fdfbag.MoveToRangeStart = NewCT_MoveBookmark()
				if _gbedb := d.DecodeElement(_fdfbag.MoveToRangeStart, &_dcdda); _gbedb != nil {
					return _gbedb
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _fgafe)
				_fgafe.EG_RangeMarkupElements = append(_fgafe.EG_RangeMarkupElements, _fdfbag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_abbaac := NewEG_RunLevelElts()
				_fdggd := NewEG_RangeMarkupElements()
				_fdggd.MoveToRangeEnd = NewCT_MarkupRange()
				if _bffbf := d.DecodeElement(_fdggd.MoveToRangeEnd, &_dcdda); _bffbf != nil {
					return _bffbf
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _abbaac)
				_abbaac.EG_RangeMarkupElements = append(_abbaac.EG_RangeMarkupElements, _fdggd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_eeeebe := NewEG_RunLevelElts()
				_fdce := NewEG_RangeMarkupElements()
				_fdce.CommentRangeStart = NewCT_MarkupRange()
				if _eedaf := d.DecodeElement(_fdce.CommentRangeStart, &_dcdda); _eedaf != nil {
					return _eedaf
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _eeeebe)
				_eeeebe.EG_RangeMarkupElements = append(_eeeebe.EG_RangeMarkupElements, _fdce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_gecge := NewEG_RunLevelElts()
				_dgbaaf := NewEG_RangeMarkupElements()
				_dgbaaf.CommentRangeEnd = NewCT_MarkupRange()
				if _feaef := d.DecodeElement(_dgbaaf.CommentRangeEnd, &_dcdda); _feaef != nil {
					return _feaef
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _gecge)
				_gecge.EG_RangeMarkupElements = append(_gecge.EG_RangeMarkupElements, _dgbaaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gabge := NewEG_RunLevelElts()
				_afcge := NewEG_RangeMarkupElements()
				_afcge.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _gdcfc := d.DecodeElement(_afcge.CustomXmlInsRangeStart, &_dcdda); _gdcfc != nil {
					return _gdcfc
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _gabge)
				_gabge.EG_RangeMarkupElements = append(_gabge.EG_RangeMarkupElements, _afcge)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_fedeab := NewEG_RunLevelElts()
				_fddbab := NewEG_RangeMarkupElements()
				_fddbab.CustomXmlInsRangeEnd = NewCT_Markup()
				if _badcgd := d.DecodeElement(_fddbab.CustomXmlInsRangeEnd, &_dcdda); _badcgd != nil {
					return _badcgd
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _fedeab)
				_fedeab.EG_RangeMarkupElements = append(_fedeab.EG_RangeMarkupElements, _fddbab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_gcgcg := NewEG_RunLevelElts()
				_bgcdbe := NewEG_RangeMarkupElements()
				_bgcdbe.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gbaef := d.DecodeElement(_bgcdbe.CustomXmlDelRangeStart, &_dcdda); _gbaef != nil {
					return _gbaef
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _gcgcg)
				_gcgcg.EG_RangeMarkupElements = append(_gcgcg.EG_RangeMarkupElements, _bgcdbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_gefdcc := NewEG_RunLevelElts()
				_agec := NewEG_RangeMarkupElements()
				_agec.CustomXmlDelRangeEnd = NewCT_Markup()
				if _edcdbc := d.DecodeElement(_agec.CustomXmlDelRangeEnd, &_dcdda); _edcdbc != nil {
					return _edcdbc
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _gefdcc)
				_gefdcc.EG_RangeMarkupElements = append(_gefdcc.EG_RangeMarkupElements, _agec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_dfafcc := NewEG_RunLevelElts()
				_edggdc := NewEG_RangeMarkupElements()
				_edggdc.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _facab := d.DecodeElement(_edggdc.CustomXmlMoveFromRangeStart, &_dcdda); _facab != nil {
					return _facab
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _dfafcc)
				_dfafcc.EG_RangeMarkupElements = append(_dfafcc.EG_RangeMarkupElements, _edggdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_beccec := NewEG_RunLevelElts()
				_fbfeg := NewEG_RangeMarkupElements()
				_fbfeg.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _eedbgg := d.DecodeElement(_fbfeg.CustomXmlMoveFromRangeEnd, &_dcdda); _eedbgg != nil {
					return _eedbgg
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _beccec)
				_beccec.EG_RangeMarkupElements = append(_beccec.EG_RangeMarkupElements, _fbfeg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gadgf := NewEG_RunLevelElts()
				_ggcff := NewEG_RangeMarkupElements()
				_ggcff.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _gebace := d.DecodeElement(_ggcff.CustomXmlMoveToRangeStart, &_dcdda); _gebace != nil {
					return _gebace
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _gadgf)
				_gadgf.EG_RangeMarkupElements = append(_gadgf.EG_RangeMarkupElements, _ggcff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_debagb := NewEG_RunLevelElts()
				_gfbdf := NewEG_RangeMarkupElements()
				_gfbdf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _cdcfgg := d.DecodeElement(_gfbdf.CustomXmlMoveToRangeEnd, &_dcdda); _cdcfgg != nil {
					return _cdcfgg
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _debagb)
				_debagb.EG_RangeMarkupElements = append(_debagb.EG_RangeMarkupElements, _gfbdf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_eddbg := NewEG_RunLevelElts()
				_abfed := NewEG_MathContent()
				_abfed.OMathPara = _f.NewOMathPara()
				if _degdfd := d.DecodeElement(_abfed.OMathPara, &_dcdda); _degdfd != nil {
					return _degdfd
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _eddbg)
				_eddbg.EG_MathContent = append(_eddbg.EG_MathContent, _abfed)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_cegdfb := NewEG_RunLevelElts()
				_edabba := NewEG_MathContent()
				_edabba.OMath = _f.NewOMath()
				if _cabec := d.DecodeElement(_edabba.OMath, &_dcdda); _cabec != nil {
					return _cabec
				}
				_ededf.EG_RunLevelElts = append(_ededf.EG_RunLevelElts, _cegdfb)
				_cegdfb.EG_MathContent = append(_cegdfb.EG_MathContent, _edabba)
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020EG_ContentRunContentBase\u0020%v", _dcdda.Name)
				if _gdfge := d.Skip(); _gdfge != nil {
					return _gdfge
				}
			}
		case _d.EndElement:
			break _dgfee
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ObjectChoice and its children, prefixing error messages with path
func (_aadee *CT_ObjectChoice) ValidateWithPath(path string) error {
	if _aadee.Control != nil {
		if _bbbad := _aadee.Control.ValidateWithPath(path + "\u002fControl"); _bbbad != nil {
			return _bbbad
		}
	}
	if _aadee.ObjectLink != nil {
		if _ebfb := _aadee.ObjectLink.ValidateWithPath(path + "/ObjectLink"); _ebfb != nil {
			return _ebfb
		}
	}
	if _aadee.ObjectEmbed != nil {
		if _fbfaa := _aadee.ObjectEmbed.ValidateWithPath(path + "\u002fObjectEmbed"); _fbfaa != nil {
			return _fbfaa
		}
	}
	if _aadee.Movie != nil {
		if _babdfa := _aadee.Movie.ValidateWithPath(path + "\u002fMovie"); _babdfa != nil {
			return _babdfa
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BookmarkRange and its children, prefixing error messages with path
func (_ffee *CT_BookmarkRange) ValidateWithPath(path string) error {
	if _dbcb := _ffee.DisplacedByCustomXmlAttr.ValidateWithPath(path + "\u002fDisplacedByCustomXmlAttr"); _dbcb != nil {
		return _dbcb
	}
	return nil
}
func (_gcef *CT_FFDDList) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fadfc:
	for {
		_fbfb, _ccaad := d.Token()
		if _ccaad != nil {
			return _ccaad
		}
		switch _ccbag := _fbfb.(type) {
		case _d.StartElement:
			switch _ccbag.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "result"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "result"}:
				_gcef.Result = NewCT_DecimalNumber()
				if _ccfd := d.DecodeElement(_gcef.Result, &_ccbag); _ccfd != nil {
					return _ccfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "default"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "default"}:
				_gcef.Default = NewCT_DecimalNumber()
				if _eegb := d.DecodeElement(_gcef.Default, &_ccbag); _eegb != nil {
					return _eegb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "listEntry"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "listEntry"}:
				_abegc := NewCT_String()
				if _eaae := d.DecodeElement(_abegc, &_ccbag); _eaae != nil {
					return _eaae
				}
				_gcef.ListEntry = append(_gcef.ListEntry, _abegc)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_FFDDList\u0020\u0025v", _ccbag.Name)
				if _edgfg := d.Skip(); _edgfg != nil {
					return _edgfg
				}
			}
		case _d.EndElement:
			break _fadfc
		case _d.CharData:
		}
	}
	return nil
}
func (_bcbbc ST_EdGrp) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_geeabb := _d.Attr{}
	_geeabb.Name = name
	switch _bcbbc {
	case ST_EdGrpUnset:
		_geeabb.Value = ""
	case ST_EdGrpNone:
		_geeabb.Value = "none"
	case ST_EdGrpEveryone:
		_geeabb.Value = "everyone"
	case ST_EdGrpAdministrators:
		_geeabb.Value = "administrators"
	case ST_EdGrpContributors:
		_geeabb.Value = "contributors"
	case ST_EdGrpEditors:
		_geeabb.Value = "editors"
	case ST_EdGrpOwners:
		_geeabb.Value = "owners"
	case ST_EdGrpCurrent:
		_geeabb.Value = "current"
	}
	return _geeabb, nil
}
func (_gddddb ST_Merge) Validate() error { return _gddddb.ValidateWithPath("") }

// ValidateWithPath validates the CT_String and its children, prefixing error messages with path
func (_ffgba *CT_String) ValidateWithPath(path string) error { return nil }
func (_dccbae ST_FtnEdn) ValidateWithPath(path string) error {
	switch _dccbae {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dccbae))
	}
	return nil
}

type ST_TextAlignment byte

func NewCT_ObjectEmbed() *CT_ObjectEmbed { _bgbba := &CT_ObjectEmbed{}; return _bgbba }
func NewCT_SdtRun() *CT_SdtRun           { _bbbfef := &CT_SdtRun{}; return _bbbfef }

// Validate validates the CT_ParaRPrChange and its children
func (_eaebf *CT_ParaRPrChange) Validate() error { return _eaebf.ValidateWithPath("CT_ParaRPrChange") }
func (_acbfe *WdCT_Inline) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _acbfe.DistTAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distT"}, Value: _b.Sprintf("\u0025v", *_acbfe.DistTAttr)})
	}
	if _acbfe.DistBAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distB"}, Value: _b.Sprintf("\u0025v", *_acbfe.DistBAttr)})
	}
	if _acbfe.DistLAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distL"}, Value: _b.Sprintf("\u0025v", *_acbfe.DistLAttr)})
	}
	if _acbfe.DistRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distR"}, Value: _b.Sprintf("\u0025v", *_acbfe.DistRAttr)})
	}
	e.EncodeToken(start)
	_cgffb := _d.StartElement{Name: _d.Name{Local: "wp:extent"}}
	e.EncodeElement(_acbfe.Extent, _cgffb)
	if _acbfe.EffectExtent != nil {
		_cdgacb := _d.StartElement{Name: _d.Name{Local: "wp:effectExtent"}}
		e.EncodeElement(_acbfe.EffectExtent, _cdgacb)
	}
	_ggafag := _d.StartElement{Name: _d.Name{Local: "wp:docPr"}}
	e.EncodeElement(_acbfe.DocPr, _ggafag)
	if _acbfe.CNvGraphicFramePr != nil {
		_gaeca := _d.StartElement{Name: _d.Name{Local: "wp:cNvGraphicFramePr"}}
		e.EncodeElement(_acbfe.CNvGraphicFramePr, _gaeca)
	}
	_dagec := _d.StartElement{Name: _d.Name{Local: "a:graphic"}}
	_dagec.Attr = append(_dagec.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	e.EncodeElement(_acbfe.Graphic, _dagec)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dcefaa *CT_StylePaneFilter) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dcefaa.AllStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:allStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.AllStylesAttr)})
	}
	if _dcefaa.CustomStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:customStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.CustomStylesAttr)})
	}
	if _dcefaa.LatentStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:latentStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.LatentStylesAttr)})
	}
	if _dcefaa.StylesInUseAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:stylesInUse"}, Value: _b.Sprintf("\u0025v", *_dcefaa.StylesInUseAttr)})
	}
	if _dcefaa.HeadingStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:headingStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.HeadingStylesAttr)})
	}
	if _dcefaa.NumberingStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:numberingStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.NumberingStylesAttr)})
	}
	if _dcefaa.TableStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:tableStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.TableStylesAttr)})
	}
	if _dcefaa.DirectFormattingOnRunsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:directFormattingOnRuns"}, Value: _b.Sprintf("\u0025v", *_dcefaa.DirectFormattingOnRunsAttr)})
	}
	if _dcefaa.DirectFormattingOnParagraphsAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:directFormattingOnParagraphs"}, Value: _b.Sprintf("\u0025v", *_dcefaa.DirectFormattingOnParagraphsAttr)})
	}
	if _dcefaa.DirectFormattingOnNumberingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:directFormattingOnNumbering"}, Value: _b.Sprintf("\u0025v", *_dcefaa.DirectFormattingOnNumberingAttr)})
	}
	if _dcefaa.DirectFormattingOnTablesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:directFormattingOnTables"}, Value: _b.Sprintf("\u0025v", *_dcefaa.DirectFormattingOnTablesAttr)})
	}
	if _dcefaa.ClearFormattingAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:clearFormatting"}, Value: _b.Sprintf("\u0025v", *_dcefaa.ClearFormattingAttr)})
	}
	if _dcefaa.Top3HeadingStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:top3HeadingStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.Top3HeadingStylesAttr)})
	}
	if _dcefaa.VisibleStylesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:visibleStyles"}, Value: _b.Sprintf("\u0025v", *_dcefaa.VisibleStylesAttr)})
	}
	if _dcefaa.AlternateStyleNamesAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:alternateStyleNames"}, Value: _b.Sprintf("\u0025v", *_dcefaa.AlternateStyleNamesAttr)})
	}
	if _dcefaa.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_dcefaa.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dgecgc *Hdr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dgecgc.CT_HdrFtr = *NewCT_HdrFtr()
_afbcaf:
	for {
		_gcgbeg, _afafgb := d.Token()
		if _afafgb != nil {
			return _afafgb
		}
		switch _fbgdac := _gcgbeg.(type) {
		case _d.StartElement:
			switch _fbgdac.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_gbfcdb := NewCT_AltChunk()
				if _faacc := d.DecodeElement(_gbfcdb, &_fbgdac); _faacc != nil {
					return _faacc
				}
				_dgecgc.AltChunk = append(_dgecgc.AltChunk, _gbfcdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_bbcbe := NewEG_ContentBlockContent()
				_bbcbe.CustomXml = NewCT_CustomXmlBlock()
				if _bdggg := d.DecodeElement(_bbcbe.CustomXml, &_fbgdac); _bdggg != nil {
					return _bdggg
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _bbcbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_dbaega := NewEG_ContentBlockContent()
				_dbaega.Sdt = NewCT_SdtBlock()
				if _befaaa := d.DecodeElement(_dbaega.Sdt, &_fbgdac); _befaaa != nil {
					return _befaaa
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _dbaega)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_gcfgb := NewEG_ContentBlockContent()
				_cfdfbd := NewCT_P()
				if _gbdege := d.DecodeElement(_cfdfbd, &_fbgdac); _gbdege != nil {
					return _gbdege
				}
				_gcfgb.P = append(_gcfgb.P, _cfdfbd)
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _gcfgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_eaabaf := NewEG_ContentBlockContent()
				_baebgg := NewCT_Tbl()
				if _bffgeb := d.DecodeElement(_baebgg, &_fbgdac); _bffgeb != nil {
					return _bffgeb
				}
				_eaabaf.Tbl = append(_eaabaf.Tbl, _baebgg)
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _eaabaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_gecdf := NewEG_ContentBlockContent()
				_bgade := NewEG_RunLevelElts()
				_bgade.ProofErr = NewCT_ProofErr()
				if _ddbafd := d.DecodeElement(_bgade.ProofErr, &_fbgdac); _ddbafd != nil {
					return _ddbafd
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _gecdf)
				_gecdf.EG_RunLevelElts = append(_gecdf.EG_RunLevelElts, _bgade)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_ccdede := NewEG_ContentBlockContent()
				_efgdc := NewEG_RunLevelElts()
				_efgdc.PermStart = NewCT_PermStart()
				if _dgacdf := d.DecodeElement(_efgdc.PermStart, &_fbgdac); _dgacdf != nil {
					return _dgacdf
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _ccdede)
				_ccdede.EG_RunLevelElts = append(_ccdede.EG_RunLevelElts, _efgdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_ebgcb := NewEG_ContentBlockContent()
				_baefc := NewEG_RunLevelElts()
				_baefc.PermEnd = NewCT_Perm()
				if _eggeeb := d.DecodeElement(_baefc.PermEnd, &_fbgdac); _eggeeb != nil {
					return _eggeeb
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _ebgcb)
				_ebgcb.EG_RunLevelElts = append(_ebgcb.EG_RunLevelElts, _baefc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_eebceg := NewEG_ContentBlockContent()
				_ffbdac := NewEG_RunLevelElts()
				_ffbdac.Ins = NewCT_RunTrackChange()
				if _gcaff := d.DecodeElement(_ffbdac.Ins, &_fbgdac); _gcaff != nil {
					return _gcaff
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _eebceg)
				_eebceg.EG_RunLevelElts = append(_eebceg.EG_RunLevelElts, _ffbdac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_cffba := NewEG_ContentBlockContent()
				_dggef := NewEG_RunLevelElts()
				_dggef.Del = NewCT_RunTrackChange()
				if _edbcg := d.DecodeElement(_dggef.Del, &_fbgdac); _edbcg != nil {
					return _edbcg
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _cffba)
				_cffba.EG_RunLevelElts = append(_cffba.EG_RunLevelElts, _dggef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_egbgb := NewEG_ContentBlockContent()
				_dcgee := NewEG_RunLevelElts()
				_dcgee.MoveFrom = NewCT_RunTrackChange()
				if _cafeb := d.DecodeElement(_dcgee.MoveFrom, &_fbgdac); _cafeb != nil {
					return _cafeb
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _egbgb)
				_egbgb.EG_RunLevelElts = append(_egbgb.EG_RunLevelElts, _dcgee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_fdfdg := NewEG_ContentBlockContent()
				_fbcbc := NewEG_RunLevelElts()
				_fbcbc.MoveTo = NewCT_RunTrackChange()
				if _edgad := d.DecodeElement(_fbcbc.MoveTo, &_fbgdac); _edgad != nil {
					return _edgad
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _fdfdg)
				_fdfdg.EG_RunLevelElts = append(_fdfdg.EG_RunLevelElts, _fbcbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_dgeac := NewEG_ContentBlockContent()
				_fgffc := NewEG_RunLevelElts()
				_ggafa := NewEG_RangeMarkupElements()
				_ggafa.BookmarkStart = NewCT_Bookmark()
				if _gffdgg := d.DecodeElement(_ggafa.BookmarkStart, &_fbgdac); _gffdgg != nil {
					return _gffdgg
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _dgeac)
				_dgeac.EG_RunLevelElts = append(_dgeac.EG_RunLevelElts, _fgffc)
				_fgffc.EG_RangeMarkupElements = append(_fgffc.EG_RangeMarkupElements, _ggafa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_cafeff := NewEG_ContentBlockContent()
				_dgadg := NewEG_RunLevelElts()
				_gedce := NewEG_RangeMarkupElements()
				_gedce.BookmarkEnd = NewCT_MarkupRange()
				if _gagcb := d.DecodeElement(_gedce.BookmarkEnd, &_fbgdac); _gagcb != nil {
					return _gagcb
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _cafeff)
				_cafeff.EG_RunLevelElts = append(_cafeff.EG_RunLevelElts, _dgadg)
				_dgadg.EG_RangeMarkupElements = append(_dgadg.EG_RangeMarkupElements, _gedce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_fdgfff := NewEG_ContentBlockContent()
				_gcgcaa := NewEG_RunLevelElts()
				_ffege := NewEG_RangeMarkupElements()
				_ffege.MoveFromRangeStart = NewCT_MoveBookmark()
				if _ecfgec := d.DecodeElement(_ffege.MoveFromRangeStart, &_fbgdac); _ecfgec != nil {
					return _ecfgec
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _fdgfff)
				_fdgfff.EG_RunLevelElts = append(_fdgfff.EG_RunLevelElts, _gcgcaa)
				_gcgcaa.EG_RangeMarkupElements = append(_gcgcaa.EG_RangeMarkupElements, _ffege)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_fdcec := NewEG_ContentBlockContent()
				_gffffdb := NewEG_RunLevelElts()
				_fffac := NewEG_RangeMarkupElements()
				_fffac.MoveFromRangeEnd = NewCT_MarkupRange()
				if _gadce := d.DecodeElement(_fffac.MoveFromRangeEnd, &_fbgdac); _gadce != nil {
					return _gadce
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _fdcec)
				_fdcec.EG_RunLevelElts = append(_fdcec.EG_RunLevelElts, _gffffdb)
				_gffffdb.EG_RangeMarkupElements = append(_gffffdb.EG_RangeMarkupElements, _fffac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_accaaf := NewEG_ContentBlockContent()
				_ebacf := NewEG_RunLevelElts()
				_bffagb := NewEG_RangeMarkupElements()
				_bffagb.MoveToRangeStart = NewCT_MoveBookmark()
				if _geege := d.DecodeElement(_bffagb.MoveToRangeStart, &_fbgdac); _geege != nil {
					return _geege
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _accaaf)
				_accaaf.EG_RunLevelElts = append(_accaaf.EG_RunLevelElts, _ebacf)
				_ebacf.EG_RangeMarkupElements = append(_ebacf.EG_RangeMarkupElements, _bffagb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_efbed := NewEG_ContentBlockContent()
				_fgbbca := NewEG_RunLevelElts()
				_fggea := NewEG_RangeMarkupElements()
				_fggea.MoveToRangeEnd = NewCT_MarkupRange()
				if _dfbgcd := d.DecodeElement(_fggea.MoveToRangeEnd, &_fbgdac); _dfbgcd != nil {
					return _dfbgcd
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _efbed)
				_efbed.EG_RunLevelElts = append(_efbed.EG_RunLevelElts, _fgbbca)
				_fgbbca.EG_RangeMarkupElements = append(_fgbbca.EG_RangeMarkupElements, _fggea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_caaec := NewEG_ContentBlockContent()
				_eebfg := NewEG_RunLevelElts()
				_agfee := NewEG_RangeMarkupElements()
				_agfee.CommentRangeStart = NewCT_MarkupRange()
				if _bfcbf := d.DecodeElement(_agfee.CommentRangeStart, &_fbgdac); _bfcbf != nil {
					return _bfcbf
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _caaec)
				_caaec.EG_RunLevelElts = append(_caaec.EG_RunLevelElts, _eebfg)
				_eebfg.EG_RangeMarkupElements = append(_eebfg.EG_RangeMarkupElements, _agfee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_bacae := NewEG_ContentBlockContent()
				_begae := NewEG_RunLevelElts()
				_afccf := NewEG_RangeMarkupElements()
				_afccf.CommentRangeEnd = NewCT_MarkupRange()
				if _dadbce := d.DecodeElement(_afccf.CommentRangeEnd, &_fbgdac); _dadbce != nil {
					return _dadbce
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _bacae)
				_bacae.EG_RunLevelElts = append(_bacae.EG_RunLevelElts, _begae)
				_begae.EG_RangeMarkupElements = append(_begae.EG_RangeMarkupElements, _afccf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_dbcfg := NewEG_ContentBlockContent()
				_afcege := NewEG_RunLevelElts()
				_cegcg := NewEG_RangeMarkupElements()
				_cegcg.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _cbbdb := d.DecodeElement(_cegcg.CustomXmlInsRangeStart, &_fbgdac); _cbbdb != nil {
					return _cbbdb
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _dbcfg)
				_dbcfg.EG_RunLevelElts = append(_dbcfg.EG_RunLevelElts, _afcege)
				_afcege.EG_RangeMarkupElements = append(_afcege.EG_RangeMarkupElements, _cegcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_ceagge := NewEG_ContentBlockContent()
				_babacb := NewEG_RunLevelElts()
				_cdfcc := NewEG_RangeMarkupElements()
				_cdfcc.CustomXmlInsRangeEnd = NewCT_Markup()
				if _facad := d.DecodeElement(_cdfcc.CustomXmlInsRangeEnd, &_fbgdac); _facad != nil {
					return _facad
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _ceagge)
				_ceagge.EG_RunLevelElts = append(_ceagge.EG_RunLevelElts, _babacb)
				_babacb.EG_RangeMarkupElements = append(_babacb.EG_RangeMarkupElements, _cdfcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_eaeddb := NewEG_ContentBlockContent()
				_bgacb := NewEG_RunLevelElts()
				_acabfe := NewEG_RangeMarkupElements()
				_acabfe.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gfgde := d.DecodeElement(_acabfe.CustomXmlDelRangeStart, &_fbgdac); _gfgde != nil {
					return _gfgde
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _eaeddb)
				_eaeddb.EG_RunLevelElts = append(_eaeddb.EG_RunLevelElts, _bgacb)
				_bgacb.EG_RangeMarkupElements = append(_bgacb.EG_RangeMarkupElements, _acabfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fbdca := NewEG_ContentBlockContent()
				_ffbcae := NewEG_RunLevelElts()
				_beddg := NewEG_RangeMarkupElements()
				_beddg.CustomXmlDelRangeEnd = NewCT_Markup()
				if _bdgace := d.DecodeElement(_beddg.CustomXmlDelRangeEnd, &_fbgdac); _bdgace != nil {
					return _bdgace
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _fbdca)
				_fbdca.EG_RunLevelElts = append(_fbdca.EG_RunLevelElts, _ffbcae)
				_ffbcae.EG_RangeMarkupElements = append(_ffbcae.EG_RangeMarkupElements, _beddg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_ecgcfg := NewEG_ContentBlockContent()
				_fgfgc := NewEG_RunLevelElts()
				_cgbgee := NewEG_RangeMarkupElements()
				_cgbgee.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _bcgdag := d.DecodeElement(_cgbgee.CustomXmlMoveFromRangeStart, &_fbgdac); _bcgdag != nil {
					return _bcgdag
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _ecgcfg)
				_ecgcfg.EG_RunLevelElts = append(_ecgcfg.EG_RunLevelElts, _fgfgc)
				_fgfgc.EG_RangeMarkupElements = append(_fgfgc.EG_RangeMarkupElements, _cgbgee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_febcaag := NewEG_ContentBlockContent()
				_ddffg := NewEG_RunLevelElts()
				_bbafa := NewEG_RangeMarkupElements()
				_bbafa.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _cddfg := d.DecodeElement(_bbafa.CustomXmlMoveFromRangeEnd, &_fbgdac); _cddfg != nil {
					return _cddfg
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _febcaag)
				_febcaag.EG_RunLevelElts = append(_febcaag.EG_RunLevelElts, _ddffg)
				_ddffg.EG_RangeMarkupElements = append(_ddffg.EG_RangeMarkupElements, _bbafa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_adefbf := NewEG_ContentBlockContent()
				_gaeddc := NewEG_RunLevelElts()
				_ebacfb := NewEG_RangeMarkupElements()
				_ebacfb.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bbadb := d.DecodeElement(_ebacfb.CustomXmlMoveToRangeStart, &_fbgdac); _bbadb != nil {
					return _bbadb
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _adefbf)
				_adefbf.EG_RunLevelElts = append(_adefbf.EG_RunLevelElts, _gaeddc)
				_gaeddc.EG_RangeMarkupElements = append(_gaeddc.EG_RangeMarkupElements, _ebacfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_fcdgfd := NewEG_ContentBlockContent()
				_afabc := NewEG_RunLevelElts()
				_defea := NewEG_RangeMarkupElements()
				_defea.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _gfabe := d.DecodeElement(_defea.CustomXmlMoveToRangeEnd, &_fbgdac); _gfabe != nil {
					return _gfabe
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _fcdgfd)
				_fcdgfd.EG_RunLevelElts = append(_fcdgfd.EG_RunLevelElts, _afabc)
				_afabc.EG_RangeMarkupElements = append(_afabc.EG_RangeMarkupElements, _defea)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_abacdb := NewEG_ContentBlockContent()
				_dcbab := NewEG_RunLevelElts()
				_bbfeg := NewEG_MathContent()
				_bbfeg.OMathPara = _f.NewOMathPara()
				if _affca := d.DecodeElement(_bbfeg.OMathPara, &_fbgdac); _affca != nil {
					return _affca
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _abacdb)
				_abacdb.EG_RunLevelElts = append(_abacdb.EG_RunLevelElts, _dcbab)
				_dcbab.EG_MathContent = append(_dcbab.EG_MathContent, _bbfeg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_gbaga := NewEG_ContentBlockContent()
				_fafbf := NewEG_RunLevelElts()
				_ggacb := NewEG_MathContent()
				_ggacb.OMath = _f.NewOMath()
				if _fdace := d.DecodeElement(_ggacb.OMath, &_fbgdac); _fdace != nil {
					return _fdace
				}
				_dgecgc.EG_ContentBlockContent = append(_dgecgc.EG_ContentBlockContent, _gbaga)
				_gbaga.EG_RunLevelElts = append(_gbaga.EG_RunLevelElts, _fafbf)
				_fafbf.EG_MathContent = append(_fafbf.EG_MathContent, _ggacb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020Hdr\u0020\u0025v", _fbgdac.Name)
				if _fdgbf := d.Skip(); _fdgbf != nil {
					return _fdgbf
				}
			}
		case _d.EndElement:
			break _afbcaf
		case _d.CharData:
		}
	}
	return nil
}
func (_adbcg ST_MailMergeDest) Validate() error { return _adbcg.ValidateWithPath("") }
func (_aaccg ST_Border) ValidateWithPath(path string) error {
	switch _aaccg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_aaccg))
	}
	return nil
}

const (
	ST_JcUnset          ST_Jc = 0
	ST_JcStart          ST_Jc = 1
	ST_JcCenter         ST_Jc = 2
	ST_JcEnd            ST_Jc = 3
	ST_JcBoth           ST_Jc = 4
	ST_JcMediumKashida  ST_Jc = 5
	ST_JcDistribute     ST_Jc = 6
	ST_JcNumTab         ST_Jc = 7
	ST_JcHighKashida    ST_Jc = 8
	ST_JcLowKashida     ST_Jc = 9
	ST_JcThaiDistribute ST_Jc = 10
	ST_JcLeft           ST_Jc = 11
	ST_JcRight          ST_Jc = 12
)

func (_gecccbg ST_TabJc) ValidateWithPath(path string) error {
	switch _gecccbg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_gecccbg))
	}
	return nil
}
func NewCT_HMerge() *CT_HMerge { _gafca := &CT_HMerge{}; return _gafca }
func (_fgfccd *CT_WritingStyle) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lang"}, Value: _b.Sprintf("\u0025v", _fgfccd.LangAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:vendorID"}, Value: _b.Sprintf("\u0025v", _fgfccd.VendorIDAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:dllVersion"}, Value: _b.Sprintf("\u0025v", _fgfccd.DllVersionAttr)})
	if _fgfccd.NlCheckAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:nlCheck"}, Value: _b.Sprintf("\u0025v", *_fgfccd.NlCheckAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:checkStyle"}, Value: _b.Sprintf("\u0025v", _fgfccd.CheckStyleAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:appName"}, Value: _b.Sprintf("\u0025v", _fgfccd.AppNameAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Highlight and its children
func (_ebgf *CT_Highlight) Validate() error { return _ebgf.ValidateWithPath("CT_Highlight") }

type ST_TextDirection byte

// Validate validates the CT_DocPartName and its children
func (_fdbgc *CT_DocPartName) Validate() error { return _fdbgc.ValidateWithPath("CT_DocPartName") }

// Validate validates the CT_LongHexNumber and its children
func (_geffc *CT_LongHexNumber) Validate() error { return _geffc.ValidateWithPath("CT_LongHexNumber") }
func (_fdgbg *CT_TblCellMar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gbcbed:
	for {
		_cecde, _aeaffg := d.Token()
		if _aeaffg != nil {
			return _aeaffg
		}
		switch _ccbae := _cecde.(type) {
		case _d.StartElement:
			switch _ccbae.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "top"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "top"}:
				_fdgbg.Top = NewCT_TblWidth()
				if _bgecab := d.DecodeElement(_fdgbg.Top, &_ccbae); _bgecab != nil {
					return _bgecab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "start"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "start"}:
				_fdgbg.Start = NewCT_TblWidth()
				if _dbfaecb := d.DecodeElement(_fdgbg.Start, &_ccbae); _dbfaecb != nil {
					return _dbfaecb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "left"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "left"}:
				_fdgbg.Left = NewCT_TblWidth()
				if _cegbb := d.DecodeElement(_fdgbg.Left, &_ccbae); _cegbb != nil {
					return _cegbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bottom"}:
				_fdgbg.Bottom = NewCT_TblWidth()
				if _gebaf := d.DecodeElement(_fdgbg.Bottom, &_ccbae); _gebaf != nil {
					return _gebaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "end"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "end"}:
				_fdgbg.End = NewCT_TblWidth()
				if _cafdd := d.DecodeElement(_fdgbg.End, &_ccbae); _cafdd != nil {
					return _cafdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "right"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "right"}:
				_fdgbg.Right = NewCT_TblWidth()
				if _gfffcb := d.DecodeElement(_fdgbg.Right, &_ccbae); _gfffcb != nil {
					return _gfffcb
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_TblCellMar \u0025v", _ccbae.Name)
				if _eeefbg := d.Skip(); _eeefbg != nil {
					return _eeefbg
				}
			}
		case _d.EndElement:
			break _gbcbed
		case _d.CharData:
		}
	}
	return nil
}

type ST_MailMergeOdsoFMDFieldType byte

// ValidateWithPath validates the CT_Num and its children, prefixing error messages with path
func (_gcgdg *CT_Num) ValidateWithPath(path string) error {
	if _bfbeb := _gcgdg.AbstractNumId.ValidateWithPath(path + "\u002fAbstractNumId"); _bfbeb != nil {
		return _bfbeb
	}
	for _bgcaf, _dfgcf := range _gcgdg.LvlOverride {
		if _befaf := _dfgcf.ValidateWithPath(_b.Sprintf("\u0025s\u002fLvlOverride\u005b\u0025d\u005d", path, _bgcaf)); _befaf != nil {
			return _befaf
		}
	}
	return nil
}

const (
	ST_HAnchorUnset  ST_HAnchor = 0
	ST_HAnchorText   ST_HAnchor = 1
	ST_HAnchorMargin ST_HAnchor = 2
	ST_HAnchorPage   ST_HAnchor = 3
)

func NewCT_MacroName() *CT_MacroName { _fddcd := &CT_MacroName{}; return _fddcd }
func (_bfggaa ST_TextAlignment) ValidateWithPath(path string) error {
	switch _bfggaa {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_bfggaa))
	}
	return nil
}

// Validate validates the AC_ChoiceRun and its children
func (_fefcg *AC_ChoiceRun) Validate() error { return _fefcg.ValidateWithPath("AC_ChoiceRun") }
func NewCT_MailMergeSourceType() *CT_MailMergeSourceType {
	_cdede := &CT_MailMergeSourceType{}
	_cdede.ValAttr = ST_MailMergeSourceType(1)
	return _cdede
}
func NewCT_HpsMeasure() *CT_HpsMeasure { _gfga := &CT_HpsMeasure{}; return _gfga }

const (
	ST_ChapterSepUnset  ST_ChapterSep = 0
	ST_ChapterSepHyphen ST_ChapterSep = 1
	ST_ChapterSepPeriod ST_ChapterSep = 2
	ST_ChapterSepColon  ST_ChapterSep = 3
	ST_ChapterSepEmDash ST_ChapterSep = 4
	ST_ChapterSepEnDash ST_ChapterSep = 5
)

func (_fgfdde ST_FldCharType) ValidateWithPath(path string) error {
	switch _fgfdde {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fgfdde))
	}
	return nil
}

// Validate validates the Settings and its children
func (_eadgg *Settings) Validate() error { return _eadgg.ValidateWithPath("Settings") }
func (_bbacbgd *GlossaryDocument) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:glossaryDocument"
	return _bbacbgd.CT_GlossaryDocument.MarshalXML(e, start)
}

type CT_Highlight struct {

	// Highlighting Color
	ValAttr ST_HighlightColor
}

// Validate validates the CT_FtnEdnSepRef and its children
func (_befa *CT_FtnEdnSepRef) Validate() error { return _befa.ValidateWithPath("CT_FtnEdnSepRef") }
func (_dgcde *CT_TblCellMar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dgcde.Top != nil {
		_cdecg := _d.StartElement{Name: _d.Name{Local: "w:top"}}
		e.EncodeElement(_dgcde.Top, _cdecg)
	}
	if _dgcde.Start != nil {
		_dgecab := _d.StartElement{Name: _d.Name{Local: "w:start"}}
		e.EncodeElement(_dgcde.Start, _dgecab)
	}
	if _dgcde.Left != nil {
		_bgabc := _d.StartElement{Name: _d.Name{Local: "w:left"}}
		e.EncodeElement(_dgcde.Left, _bgabc)
	}
	if _dgcde.Bottom != nil {
		_dafgdf := _d.StartElement{Name: _d.Name{Local: "w:bottom"}}
		e.EncodeElement(_dgcde.Bottom, _dafgdf)
	}
	if _dgcde.End != nil {
		_gagac := _d.StartElement{Name: _d.Name{Local: "w:end"}}
		e.EncodeElement(_dgcde.End, _gagac)
	}
	if _dgcde.Right != nil {
		_faefa := _d.StartElement{Name: _d.Name{Local: "w:right"}}
		e.EncodeElement(_dgcde.Right, _faefa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gfbedef ST_ObjectDrawAspect) String() string {
	switch _gfbedef {
	case 0:
		return ""
	case 1:
		return "content"
	case 2:
		return "icon"
	}
	return ""
}

// Validate validates the CT_CompatSetting and its children
func (_cegd *CT_CompatSetting) Validate() error { return _cegd.ValidateWithPath("CT_CompatSetting") }

type WdCT_Anchor struct {
	DistTAttr          *uint32
	DistBAttr          *uint32
	DistLAttr          *uint32
	DistRAttr          *uint32
	SimplePosAttr      *bool
	RelativeHeightAttr uint32
	BehindDocAttr      bool
	LockedAttr         bool
	LayoutInCellAttr   bool
	HiddenAttr         *bool
	AllowOverlapAttr   bool
	SimplePos          *_eb.CT_Point2D
	PositionH          *WdCT_PosH
	PositionV          *WdCT_PosV
	Extent             *_eb.CT_PositiveSize2D
	EffectExtent       *WdCT_EffectExtent
	Choice             *WdEG_WrapTypeChoice
	DocPr              *_eb.CT_NonVisualDrawingProps
	CNvGraphicFramePr  *_eb.CT_NonVisualGraphicFrameProperties
	Graphic            *_eb.Graphic
}

// ValidateWithPath validates the CT_LevelSuffix and its children, prefixing error messages with path
func (_ecce *CT_LevelSuffix) ValidateWithPath(path string) error {
	if _ecce.ValAttr == ST_LevelSuffixUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _gceg := _ecce.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _gceg != nil {
		return _gceg
	}
	return nil
}
func (_aacddb ST_SdtDateMappingType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_aacddb.String(), start)
}
func (_ggacdf ST_HdrFtr) Validate() error { return _ggacdf.ValidateWithPath("") }
func (_dgecg *CT_MailMergeSourceType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_affgee, _affee := _dgecg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _affee != nil {
		return _affee
	}
	start.Attr = append(start.Attr, _affgee)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_TcPrChange() *CT_TcPrChange {
	_afada := &CT_TcPrChange{}
	_afada.TcPr = NewCT_TcPrInner()
	return _afada
}

type CT_DocVars struct {

	// Single Document Variable
	DocVar []*CT_DocVar
}
type CT_Lock struct {

	// Locking Type
	ValAttr ST_Lock
}

func (_egaff ST_Em) String() string {
	switch _egaff {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "dot"
	case 3:
		return "comma"
	case 4:
		return "circle"
	case 5:
		return "underDot"
	}
	return ""
}

// ValidateWithPath validates the CT_FldChar and its children, prefixing error messages with path
func (_ccccg *CT_FldChar) ValidateWithPath(path string) error {
	if _ccccg.FldCharTypeAttr == ST_FldCharTypeUnset {
		return _b.Errorf("\u0025s\u002fFldCharTypeAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _bgdff := _ccccg.FldCharTypeAttr.ValidateWithPath(path + "\u002fFldCharTypeAttr"); _bgdff != nil {
		return _bgdff
	}
	if _ccccg.FldLockAttr != nil {
		if _bbaca := _ccccg.FldLockAttr.ValidateWithPath(path + "\u002fFldLockAttr"); _bbaca != nil {
			return _bbaca
		}
	}
	if _ccccg.DirtyAttr != nil {
		if _aeecb := _ccccg.DirtyAttr.ValidateWithPath(path + "\u002fDirtyAttr"); _aeecb != nil {
			return _aeecb
		}
	}
	if _ccccg.FldData != nil {
		if _edggf := _ccccg.FldData.ValidateWithPath(path + "\u002fFldData"); _edggf != nil {
			return _edggf
		}
	}
	if _ccccg.FfData != nil {
		if _fbcf := _ccccg.FfData.ValidateWithPath(path + "\u002fFfData"); _fbcf != nil {
			return _fbcf
		}
	}
	if _ccccg.NumberingChange != nil {
		if _ddae := _ccccg.NumberingChange.ValidateWithPath(path + "\u002fNumberingChange"); _ddae != nil {
			return _ddae
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PPrChange and its children, prefixing error messages with path
func (_abfa *CT_PPrChange) ValidateWithPath(path string) error {
	if _acddbd := _abfa.PPr.ValidateWithPath(path + "\u002fPPr"); _acddbd != nil {
		return _acddbd
	}
	return nil
}
func (_gbcccf *CT_PageBorder) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gbcccf.ValAttr = ST_Border(1)
	for _, _bbeae := range start.Attr {
		if _bbeae.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _bbeae.Name.Local == "id" || _bbeae.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _bbeae.Name.Local == "id" {
			_gaaae, _dfbg := _bbeae.Value, error(nil)
			if _dfbg != nil {
				return _dfbg
			}
			_gbcccf.IdAttr = &_gaaae
			continue
		}
		if _bbeae.Name.Local == "val" {
			_gbcccf.ValAttr.UnmarshalXMLAttr(_bbeae)
			continue
		}
		if _bbeae.Name.Local == "color" {
			_dgdga, _bbdcc := ParseUnionST_HexColor(_bbeae.Value)
			if _bbdcc != nil {
				return _bbdcc
			}
			_gbcccf.ColorAttr = &_dgdga
			continue
		}
		if _bbeae.Name.Local == "themeColor" {
			_gbcccf.ThemeColorAttr.UnmarshalXMLAttr(_bbeae)
			continue
		}
		if _bbeae.Name.Local == "themeTint" {
			_fgcba, _afbge := _bbeae.Value, error(nil)
			if _afbge != nil {
				return _afbge
			}
			_gbcccf.ThemeTintAttr = &_fgcba
			continue
		}
		if _bbeae.Name.Local == "themeShade" {
			_fabeba, _fcaac := _bbeae.Value, error(nil)
			if _fcaac != nil {
				return _fcaac
			}
			_gbcccf.ThemeShadeAttr = &_fabeba
			continue
		}
		if _bbeae.Name.Local == "sz" {
			_ebbab, _bfbge := _dd.ParseUint(_bbeae.Value, 10, 64)
			if _bfbge != nil {
				return _bfbge
			}
			_gbcccf.SzAttr = &_ebbab
			continue
		}
		if _bbeae.Name.Local == "space" {
			_fccgf, _afeace := _dd.ParseUint(_bbeae.Value, 10, 64)
			if _afeace != nil {
				return _afeace
			}
			_gbcccf.SpaceAttr = &_fccgf
			continue
		}
		if _bbeae.Name.Local == "shadow" {
			_edgbe, _agabfg := ParseUnionST_OnOff(_bbeae.Value)
			if _agabfg != nil {
				return _agabfg
			}
			_gbcccf.ShadowAttr = &_edgbe
			continue
		}
		if _bbeae.Name.Local == "frame" {
			_ddcag, _gfcfef := ParseUnionST_OnOff(_bbeae.Value)
			if _gfcfef != nil {
				return _gfcfef
			}
			_gbcccf.FrameAttr = &_ddcag
			continue
		}
	}
	for {
		_ebgeb, _ecabg := d.Token()
		if _ecabg != nil {
			return _b.Errorf("parsing\u0020CT_PageBorder:\u0020\u0025s", _ecabg)
		}
		if _ecbeg, _ggdbb := _ebgeb.(_d.EndElement); _ggdbb && _ecbeg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TblPrExBase and its children, prefixing error messages with path
func (_cabcd *CT_TblPrExBase) ValidateWithPath(path string) error {
	if _cabcd.TblW != nil {
		if _acbbab := _cabcd.TblW.ValidateWithPath(path + "\u002fTblW"); _acbbab != nil {
			return _acbbab
		}
	}
	if _cabcd.Jc != nil {
		if _gbfda := _cabcd.Jc.ValidateWithPath(path + "\u002fJc"); _gbfda != nil {
			return _gbfda
		}
	}
	if _cabcd.TblCellSpacing != nil {
		if _dbfdgg := _cabcd.TblCellSpacing.ValidateWithPath(path + "\u002fTblCellSpacing"); _dbfdgg != nil {
			return _dbfdgg
		}
	}
	if _cabcd.TblInd != nil {
		if _dbfgg := _cabcd.TblInd.ValidateWithPath(path + "\u002fTblInd"); _dbfgg != nil {
			return _dbfgg
		}
	}
	if _cabcd.TblBorders != nil {
		if _gffdb := _cabcd.TblBorders.ValidateWithPath(path + "/TblBorders"); _gffdb != nil {
			return _gffdb
		}
	}
	if _cabcd.Shd != nil {
		if _eaeeb := _cabcd.Shd.ValidateWithPath(path + "\u002fShd"); _eaeeb != nil {
			return _eaeeb
		}
	}
	if _cabcd.TblLayout != nil {
		if _eecad := _cabcd.TblLayout.ValidateWithPath(path + "\u002fTblLayout"); _eecad != nil {
			return _eecad
		}
	}
	if _cabcd.TblCellMar != nil {
		if _ceeaff := _cabcd.TblCellMar.ValidateWithPath(path + "/TblCellMar"); _ceeaff != nil {
			return _ceeaff
		}
	}
	if _cabcd.TblLook != nil {
		if _ddbbfg := _cabcd.TblLook.ValidateWithPath(path + "\u002fTblLook"); _ddbbfg != nil {
			return _ddbbfg
		}
	}
	return nil
}
func (_fcdaf *CT_TrackChangeNumbering) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gccbb := range start.Attr {
		if _gccbb.Name.Local == "original" {
			_dbcdac, _bgbaga := _gccbb.Value, error(nil)
			if _bgbaga != nil {
				return _bgbaga
			}
			_fcdaf.OriginalAttr = &_dbcdac
			continue
		}
		if _gccbb.Name.Local == "author" {
			_gbdcac, _cfeace := _gccbb.Value, error(nil)
			if _cfeace != nil {
				return _cfeace
			}
			_fcdaf.AuthorAttr = _gbdcac
			continue
		}
		if _gccbb.Name.Local == "date" {
			_dcgggb, _badcga := ParseStdlibTime(_gccbb.Value)
			if _badcga != nil {
				return _badcga
			}
			_fcdaf.DateAttr = &_dcgggb
			continue
		}
		if _gccbb.Name.Local == "id" {
			_adbeb, _gcdaba := _dd.ParseInt(_gccbb.Value, 10, 64)
			if _gcdaba != nil {
				return _gcdaba
			}
			_fcdaf.IdAttr = _adbeb
			continue
		}
	}
	for {
		_adbdg, _ddcbee := d.Token()
		if _ddcbee != nil {
			return _b.Errorf("parsing CT_TrackChangeNumbering:\u0020%s", _ddcbee)
		}
		if _ggbfc, _gfgdgc := _adbdg.(_d.EndElement); _gfgdgc && _ggbfc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ccgead ST_Zoom) ValidateWithPath(path string) error {
	switch _ccgead {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ccgead))
	}
	return nil
}

// ValidateWithPath validates the CT_Fonts and its children, prefixing error messages with path
func (_agdfc *CT_Fonts) ValidateWithPath(path string) error {
	if _gggbf := _agdfc.HintAttr.ValidateWithPath(path + "\u002fHintAttr"); _gggbf != nil {
		return _gggbf
	}
	if _deegec := _agdfc.AsciiThemeAttr.ValidateWithPath(path + "\u002fAsciiThemeAttr"); _deegec != nil {
		return _deegec
	}
	if _gcfeg := _agdfc.HAnsiThemeAttr.ValidateWithPath(path + "\u002fHAnsiThemeAttr"); _gcfeg != nil {
		return _gcfeg
	}
	if _acfed := _agdfc.EastAsiaThemeAttr.ValidateWithPath(path + "\u002fEastAsiaThemeAttr"); _acfed != nil {
		return _acfed
	}
	if _affce := _agdfc.CsthemeAttr.ValidateWithPath(path + "\u002fCsthemeAttr"); _affce != nil {
		return _affce
	}
	return nil
}
func (_cggbba *CT_TblPrExBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cggbba.TblW != nil {
		_dbfcea := _d.StartElement{Name: _d.Name{Local: "w:tblW"}}
		e.EncodeElement(_cggbba.TblW, _dbfcea)
	}
	if _cggbba.Jc != nil {
		_aaee := _d.StartElement{Name: _d.Name{Local: "w:jc"}}
		e.EncodeElement(_cggbba.Jc, _aaee)
	}
	if _cggbba.TblCellSpacing != nil {
		_bggcb := _d.StartElement{Name: _d.Name{Local: "w:tblCellSpacing"}}
		e.EncodeElement(_cggbba.TblCellSpacing, _bggcb)
	}
	if _cggbba.TblInd != nil {
		_aeffc := _d.StartElement{Name: _d.Name{Local: "w:tblInd"}}
		e.EncodeElement(_cggbba.TblInd, _aeffc)
	}
	if _cggbba.TblBorders != nil {
		_acgfa := _d.StartElement{Name: _d.Name{Local: "w:tblBorders"}}
		e.EncodeElement(_cggbba.TblBorders, _acgfa)
	}
	if _cggbba.Shd != nil {
		_ffgaf := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_cggbba.Shd, _ffgaf)
	}
	if _cggbba.TblLayout != nil {
		_gagabe := _d.StartElement{Name: _d.Name{Local: "w:tblLayout"}}
		e.EncodeElement(_cggbba.TblLayout, _gagabe)
	}
	if _cggbba.TblCellMar != nil {
		_fgcbaag := _d.StartElement{Name: _d.Name{Local: "w:tblCellMar"}}
		e.EncodeElement(_cggbba.TblCellMar, _fgcbaag)
	}
	if _cggbba.TblLook != nil {
		_edabb := _d.StartElement{Name: _d.Name{Local: "w:tblLook"}}
		e.EncodeElement(_cggbba.TblLook, _edabb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SdtPr and its children, prefixing error messages with path
func (_egafb *CT_SdtPr) ValidateWithPath(path string) error {
	if _egafb.RPr != nil {
		if _cagda := _egafb.RPr.ValidateWithPath(path + "\u002fRPr"); _cagda != nil {
			return _cagda
		}
	}
	if _egafb.Alias != nil {
		if _debae := _egafb.Alias.ValidateWithPath(path + "\u002fAlias"); _debae != nil {
			return _debae
		}
	}
	if _egafb.Tag != nil {
		if _debge := _egafb.Tag.ValidateWithPath(path + "\u002fTag"); _debge != nil {
			return _debge
		}
	}
	if _egafb.Id != nil {
		if _afacee := _egafb.Id.ValidateWithPath(path + "\u002fId"); _afacee != nil {
			return _afacee
		}
	}
	if _egafb.Lock != nil {
		if _dfefac := _egafb.Lock.ValidateWithPath(path + "\u002fLock"); _dfefac != nil {
			return _dfefac
		}
	}
	if _egafb.Placeholder != nil {
		if _egedea := _egafb.Placeholder.ValidateWithPath(path + "\u002fPlaceholder"); _egedea != nil {
			return _egedea
		}
	}
	if _egafb.Temporary != nil {
		if _cdafc := _egafb.Temporary.ValidateWithPath(path + "\u002fTemporary"); _cdafc != nil {
			return _cdafc
		}
	}
	if _egafb.ShowingPlcHdr != nil {
		if _ggdcb := _egafb.ShowingPlcHdr.ValidateWithPath(path + "\u002fShowingPlcHdr"); _ggdcb != nil {
			return _ggdcb
		}
	}
	if _egafb.DataBinding != nil {
		if _abdgeed := _egafb.DataBinding.ValidateWithPath(path + "\u002fDataBinding"); _abdgeed != nil {
			return _abdgeed
		}
	}
	if _egafb.Label != nil {
		if _cgbbc := _egafb.Label.ValidateWithPath(path + "\u002fLabel"); _cgbbc != nil {
			return _cgbbc
		}
	}
	if _egafb.TabIndex != nil {
		if _bbcda := _egafb.TabIndex.ValidateWithPath(path + "\u002fTabIndex"); _bbcda != nil {
			return _bbcda
		}
	}
	if _egafb.Choice != nil {
		if _dbfabe := _egafb.Choice.ValidateWithPath(path + "\u002fChoice"); _dbfabe != nil {
			return _dbfabe
		}
	}
	return nil
}
func (_abcgec *CT_WriteProtection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _abcgec.RecommendedAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:recommended"}, Value: _b.Sprintf("\u0025v", *_abcgec.RecommendedAttr)})
	}
	if _abcgec.AlgorithmNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algorithmName"}, Value: _b.Sprintf("\u0025v", *_abcgec.AlgorithmNameAttr)})
	}
	if _abcgec.HashValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hashValue"}, Value: _b.Sprintf("\u0025v", *_abcgec.HashValueAttr)})
	}
	if _abcgec.SaltValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:saltValue"}, Value: _b.Sprintf("\u0025v", *_abcgec.SaltValueAttr)})
	}
	if _abcgec.SpinCountAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:spinCount"}, Value: _b.Sprintf("\u0025v", *_abcgec.SpinCountAttr)})
	}
	if _abcgec.CryptProviderTypeAttr != _g.ST_CryptProvUnset {
		_fddae, _ddgbgc := _abcgec.CryptProviderTypeAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptProviderType"})
		if _ddgbgc != nil {
			return _ddgbgc
		}
		start.Attr = append(start.Attr, _fddae)
	}
	if _abcgec.CryptAlgorithmClassAttr != _g.ST_AlgClassUnset {
		_gccgc, _cedea := _abcgec.CryptAlgorithmClassAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptAlgorithmClass"})
		if _cedea != nil {
			return _cedea
		}
		start.Attr = append(start.Attr, _gccgc)
	}
	if _abcgec.CryptAlgorithmTypeAttr != _g.ST_AlgTypeUnset {
		_afcgb, _fafb := _abcgec.CryptAlgorithmTypeAttr.MarshalXMLAttr(_d.Name{Local: "w:cryptAlgorithmType"})
		if _fafb != nil {
			return _fafb
		}
		start.Attr = append(start.Attr, _afcgb)
	}
	if _abcgec.CryptAlgorithmSidAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptAlgorithmSid"}, Value: _b.Sprintf("\u0025v", *_abcgec.CryptAlgorithmSidAttr)})
	}
	if _abcgec.CryptSpinCountAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptSpinCount"}, Value: _b.Sprintf("\u0025v", *_abcgec.CryptSpinCountAttr)})
	}
	if _abcgec.CryptProviderAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProvider"}, Value: _b.Sprintf("\u0025v", *_abcgec.CryptProviderAttr)})
	}
	if _abcgec.AlgIdExtAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algIdExt"}, Value: _b.Sprintf("\u0025v", *_abcgec.AlgIdExtAttr)})
	}
	if _abcgec.AlgIdExtSourceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:algIdExtSource"}, Value: _b.Sprintf("\u0025v", *_abcgec.AlgIdExtSourceAttr)})
	}
	if _abcgec.CryptProviderTypeExtAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProviderTypeExt"}, Value: _b.Sprintf("\u0025v", *_abcgec.CryptProviderTypeExtAttr)})
	}
	if _abcgec.CryptProviderTypeExtSourceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:cryptProviderTypeExtSource"}, Value: _b.Sprintf("\u0025v", *_abcgec.CryptProviderTypeExtSourceAttr)})
	}
	if _abcgec.HashAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:hash"}, Value: _b.Sprintf("\u0025v", *_abcgec.HashAttr)})
	}
	if _abcgec.SaltAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:salt"}, Value: _b.Sprintf("\u0025v", *_abcgec.SaltAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the Document and its children
func (_dfggge *Document) Validate() error              { return _dfggge.ValidateWithPath("Document") }
func (_aaeea ST_DisplacedByCustomXml) Validate() error { return _aaeea.ValidateWithPath("") }

type CT_DocProtect struct {

	// Document Editing Restrictions
	EditAttr ST_DocProtect

	// Only Allow Formatting With Unlocked Styles
	FormattingAttr *_g.ST_OnOff

	// Enforce Document Protection Settings
	EnforcementAttr                *_g.ST_OnOff
	AlgorithmNameAttr              *string
	HashValueAttr                  *string
	SaltValueAttr                  *string
	SpinCountAttr                  *int64
	CryptProviderTypeAttr          _g.ST_CryptProv
	CryptAlgorithmClassAttr        _g.ST_AlgClass
	CryptAlgorithmTypeAttr         _g.ST_AlgType
	CryptAlgorithmSidAttr          *int64
	CryptSpinCountAttr             *int64
	CryptProviderAttr              *string
	AlgIdExtAttr                   *string
	AlgIdExtSourceAttr             *string
	CryptProviderTypeExtAttr       *string
	CryptProviderTypeExtSourceAttr *string
	HashAttr                       *string
	SaltAttr                       *string
}

func (_bdcd *CT_Divs) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_bgbcf := _d.StartElement{Name: _d.Name{Local: "w:div"}}
	for _, _agccb := range _bdcd.Div {
		e.EncodeElement(_agccb, _bgbcf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cffce *CT_SignedTwipsMeasure) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cgeag := range start.Attr {
		if _cgeag.Name.Local == "val" {
			_debgd, _dbeag := ParseUnionST_SignedTwipsMeasure(_cgeag.Value)
			if _dbeag != nil {
				return _dbeag
			}
			_cffce.ValAttr = _debgd
			continue
		}
	}
	for {
		_dgdb, _daacfb := d.Token()
		if _daacfb != nil {
			return _b.Errorf("parsing\u0020CT_SignedTwipsMeasure:\u0020\u0025s", _daacfb)
		}
		if _fadba, _afddca := _dgdb.(_d.EndElement); _afddca && _fadba.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_FFDDList() *CT_FFDDList { _bcgce := &CT_FFDDList{}; return _bcgce }
func (_facac *CT_RubyPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_facac.RubyAlign = NewCT_RubyAlign()
	_facac.Hps = NewCT_HpsMeasure()
	_facac.HpsRaise = NewCT_HpsMeasure()
	_facac.HpsBaseText = NewCT_HpsMeasure()
	_facac.Lid = NewCT_Lang()
_ecfca:
	for {
		_efbaa, _baafd := d.Token()
		if _baafd != nil {
			return _baafd
		}
		switch _dfgfde := _efbaa.(type) {
		case _d.StartElement:
			switch _dfgfde.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rubyAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rubyAlign"}:
				if _cfeac := d.DecodeElement(_facac.RubyAlign, &_dfgfde); _cfeac != nil {
					return _cfeac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hps"}:
				if _eaeae := d.DecodeElement(_facac.Hps, &_dfgfde); _eaeae != nil {
					return _eaeae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hpsRaise"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hpsRaise"}:
				if _dfeba := d.DecodeElement(_facac.HpsRaise, &_dfgfde); _dfeba != nil {
					return _dfeba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hpsBaseText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hpsBaseText"}:
				if _gcfae := d.DecodeElement(_facac.HpsBaseText, &_dfgfde); _gcfae != nil {
					return _gcfae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lid"}:
				if _decfd := d.DecodeElement(_facac.Lid, &_dfgfde); _decfd != nil {
					return _decfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dirty"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dirty"}:
				_facac.Dirty = NewCT_OnOff()
				if _dbaab := d.DecodeElement(_facac.Dirty, &_dfgfde); _dbaab != nil {
					return _dbaab
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_RubyPr \u0025v", _dfgfde.Name)
				if _cagdb := d.Skip(); _cagdb != nil {
					return _cagdb
				}
			}
		case _d.EndElement:
			break _ecfca
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TcBorders and its children, prefixing error messages with path
func (_bbgaa *CT_TcBorders) ValidateWithPath(path string) error {
	if _bbgaa.Top != nil {
		if _begcfc := _bbgaa.Top.ValidateWithPath(path + "\u002fTop"); _begcfc != nil {
			return _begcfc
		}
	}
	if _bbgaa.Start != nil {
		if _afabf := _bbgaa.Start.ValidateWithPath(path + "\u002fStart"); _afabf != nil {
			return _afabf
		}
	}
	if _bbgaa.Left != nil {
		if _aecba := _bbgaa.Left.ValidateWithPath(path + "\u002fLeft"); _aecba != nil {
			return _aecba
		}
	}
	if _bbgaa.Bottom != nil {
		if _bbdccc := _bbgaa.Bottom.ValidateWithPath(path + "\u002fBottom"); _bbdccc != nil {
			return _bbdccc
		}
	}
	if _bbgaa.End != nil {
		if _cabfa := _bbgaa.End.ValidateWithPath(path + "\u002fEnd"); _cabfa != nil {
			return _cabfa
		}
	}
	if _bbgaa.Right != nil {
		if _dgdfea := _bbgaa.Right.ValidateWithPath(path + "\u002fRight"); _dgdfea != nil {
			return _dgdfea
		}
	}
	if _bbgaa.InsideH != nil {
		if _febed := _bbgaa.InsideH.ValidateWithPath(path + "\u002fInsideH"); _febed != nil {
			return _febed
		}
	}
	if _bbgaa.InsideV != nil {
		if _acfdd := _bbgaa.InsideV.ValidateWithPath(path + "\u002fInsideV"); _acfdd != nil {
			return _acfdd
		}
	}
	if _bbgaa.Tl2br != nil {
		if _dbbfc := _bbgaa.Tl2br.ValidateWithPath(path + "\u002fTl2br"); _dbbfc != nil {
			return _dbbfc
		}
	}
	if _bbgaa.Tr2bl != nil {
		if _afdedd := _bbgaa.Tr2bl.ValidateWithPath(path + "\u002fTr2bl"); _afdedd != nil {
			return _afdedd
		}
	}
	return nil
}
func (_fbdaga ST_PageOrientation) String() string {
	switch _fbdaga {
	case 0:
		return ""
	case 1:
		return "portrait"
	case 2:
		return "landscape"
	}
	return ""
}
func (_dbdcg *Fonts) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:fonts"
	return _dbdcg.CT_FontsList.MarshalXML(e, start)
}
func (_cgbab *CT_P) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _acddb := range start.Attr {
		if _acddb.Name.Local == "rsidR" {
			_adfaag, _eabf := _acddb.Value, error(nil)
			if _eabf != nil {
				return _eabf
			}
			_cgbab.RsidRAttr = &_adfaag
			continue
		}
		if _acddb.Name.Local == "rsidDel" {
			_ffada, _dgcaf := _acddb.Value, error(nil)
			if _dgcaf != nil {
				return _dgcaf
			}
			_cgbab.RsidDelAttr = &_ffada
			continue
		}
		if _acddb.Name.Local == "rsidP" {
			_bebg, _ebebf := _acddb.Value, error(nil)
			if _ebebf != nil {
				return _ebebf
			}
			_cgbab.RsidPAttr = &_bebg
			continue
		}
		if _acddb.Name.Local == "rsidRDefault" {
			_edbbd, _dcdfc := _acddb.Value, error(nil)
			if _dcdfc != nil {
				return _dcdfc
			}
			_cgbab.RsidRDefaultAttr = &_edbbd
			continue
		}
		if _acddb.Name.Local == "rsidRPr" {
			_begeg, _egdca := _acddb.Value, error(nil)
			if _egdca != nil {
				return _egdca
			}
			_cgbab.RsidRPrAttr = &_begeg
			continue
		}
	}
_eabcg:
	for {
		_eaaag, _dbbbfe := d.Token()
		if _dbbbfe != nil {
			return _dbbbfe
		}
		switch _efeda := _eaaag.(type) {
		case _d.StartElement:
			switch _efeda.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pPr"}:
				_cgbab.PPr = NewCT_PPr()
				if _acgd := d.DecodeElement(_cgbab.PPr, &_efeda); _acgd != nil {
					return _acgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_aefe := NewEG_PContent()
				_bbfge := NewCT_SimpleField()
				if _fdaba := d.DecodeElement(_bbfge, &_efeda); _fdaba != nil {
					return _fdaba
				}
				_aefe.FldSimple = append(_aefe.FldSimple, _bbfge)
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _aefe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_ceggf := NewEG_PContent()
				_ceggf.Hyperlink = NewCT_Hyperlink()
				if _gceb := d.DecodeElement(_ceggf.Hyperlink, &_efeda); _gceb != nil {
					return _gceb
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _ceggf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_eccfe := NewEG_PContent()
				_eccfe.SubDoc = NewCT_Rel()
				if _ffcba := d.DecodeElement(_eccfe.SubDoc, &_efeda); _ffcba != nil {
					return _ffcba
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _eccfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_acbaf := NewEG_PContent()
				_eegeb := NewEG_ContentRunContent()
				_eegeb.CustomXml = NewCT_CustomXmlRun()
				if _ebede := d.DecodeElement(_eegeb.CustomXml, &_efeda); _ebede != nil {
					return _ebede
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _acbaf)
				_acbaf.EG_ContentRunContent = append(_acbaf.EG_ContentRunContent, _eegeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_cfeef := NewEG_PContent()
				_eccaf := NewEG_ContentRunContent()
				_eccaf.SmartTag = NewCT_SmartTagRun()
				if _ebeee := d.DecodeElement(_eccaf.SmartTag, &_efeda); _ebeee != nil {
					return _ebeee
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _cfeef)
				_cfeef.EG_ContentRunContent = append(_cfeef.EG_ContentRunContent, _eccaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_egcfc := NewEG_PContent()
				_gbfea := NewEG_ContentRunContent()
				_gbfea.Sdt = NewCT_SdtRun()
				if _bgcg := d.DecodeElement(_gbfea.Sdt, &_efeda); _bgcg != nil {
					return _bgcg
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _egcfc)
				_egcfc.EG_ContentRunContent = append(_egcfc.EG_ContentRunContent, _gbfea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_cafd := NewEG_PContent()
				_eeffg := NewEG_ContentRunContent()
				_eeffg.Dir = NewCT_DirContentRun()
				if _agaab := d.DecodeElement(_eeffg.Dir, &_efeda); _agaab != nil {
					return _agaab
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _cafd)
				_cafd.EG_ContentRunContent = append(_cafd.EG_ContentRunContent, _eeffg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_cfgf := NewEG_PContent()
				_edfg := NewEG_ContentRunContent()
				_edfg.Bdo = NewCT_BdoContentRun()
				if _fbdge := d.DecodeElement(_edfg.Bdo, &_efeda); _fbdge != nil {
					return _fbdge
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _cfgf)
				_cfgf.EG_ContentRunContent = append(_cfgf.EG_ContentRunContent, _edfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_ccaga := NewEG_PContent()
				_fegg := NewEG_ContentRunContent()
				_fegg.R = NewCT_R()
				if _fbabb := d.DecodeElement(_fegg.R, &_efeda); _fbabb != nil {
					return _fbabb
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _ccaga)
				_ccaga.EG_ContentRunContent = append(_ccaga.EG_ContentRunContent, _fegg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_gbbbe := NewEG_PContent()
				_egbfb := NewEG_ContentRunContent()
				_bceb := NewEG_RunLevelElts()
				_bceb.ProofErr = NewCT_ProofErr()
				if _bdeagg := d.DecodeElement(_bceb.ProofErr, &_efeda); _bdeagg != nil {
					return _bdeagg
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _gbbbe)
				_gbbbe.EG_ContentRunContent = append(_gbbbe.EG_ContentRunContent, _egbfb)
				_egbfb.EG_RunLevelElts = append(_egbfb.EG_RunLevelElts, _bceb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_fegfec := NewEG_PContent()
				_afcdd := NewEG_ContentRunContent()
				_fdgb := NewEG_RunLevelElts()
				_fdgb.PermStart = NewCT_PermStart()
				if _fabfac := d.DecodeElement(_fdgb.PermStart, &_efeda); _fabfac != nil {
					return _fabfac
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _fegfec)
				_fegfec.EG_ContentRunContent = append(_fegfec.EG_ContentRunContent, _afcdd)
				_afcdd.EG_RunLevelElts = append(_afcdd.EG_RunLevelElts, _fdgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_fdeg := NewEG_PContent()
				_gbadcg := NewEG_ContentRunContent()
				_adeb := NewEG_RunLevelElts()
				_adeb.PermEnd = NewCT_Perm()
				if _fbfec := d.DecodeElement(_adeb.PermEnd, &_efeda); _fbfec != nil {
					return _fbfec
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _fdeg)
				_fdeg.EG_ContentRunContent = append(_fdeg.EG_ContentRunContent, _gbadcg)
				_gbadcg.EG_RunLevelElts = append(_gbadcg.EG_RunLevelElts, _adeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_adbbd := NewEG_PContent()
				_ggdff := NewEG_ContentRunContent()
				_becaa := NewEG_RunLevelElts()
				_becaa.Ins = NewCT_RunTrackChange()
				if _gafbe := d.DecodeElement(_becaa.Ins, &_efeda); _gafbe != nil {
					return _gafbe
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _adbbd)
				_adbbd.EG_ContentRunContent = append(_adbbd.EG_ContentRunContent, _ggdff)
				_ggdff.EG_RunLevelElts = append(_ggdff.EG_RunLevelElts, _becaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_acaae := NewEG_PContent()
				_acca := NewEG_ContentRunContent()
				_aacaac := NewEG_RunLevelElts()
				_aacaac.Del = NewCT_RunTrackChange()
				if _gbdcde := d.DecodeElement(_aacaac.Del, &_efeda); _gbdcde != nil {
					return _gbdcde
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _acaae)
				_acaae.EG_ContentRunContent = append(_acaae.EG_ContentRunContent, _acca)
				_acca.EG_RunLevelElts = append(_acca.EG_RunLevelElts, _aacaac)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_ecgff := NewEG_PContent()
				_agggd := NewEG_ContentRunContent()
				_aeegec := NewEG_RunLevelElts()
				_aeegec.MoveFrom = NewCT_RunTrackChange()
				if _gccce := d.DecodeElement(_aeegec.MoveFrom, &_efeda); _gccce != nil {
					return _gccce
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _ecgff)
				_ecgff.EG_ContentRunContent = append(_ecgff.EG_ContentRunContent, _agggd)
				_agggd.EG_RunLevelElts = append(_agggd.EG_RunLevelElts, _aeegec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_gaaf := NewEG_PContent()
				_dbfab := NewEG_ContentRunContent()
				_dgbga := NewEG_RunLevelElts()
				_dgbga.MoveTo = NewCT_RunTrackChange()
				if _gfeb := d.DecodeElement(_dgbga.MoveTo, &_efeda); _gfeb != nil {
					return _gfeb
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _gaaf)
				_gaaf.EG_ContentRunContent = append(_gaaf.EG_ContentRunContent, _dbfab)
				_dbfab.EG_RunLevelElts = append(_dbfab.EG_RunLevelElts, _dgbga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_ffbeb := NewEG_PContent()
				_cafbd := NewEG_ContentRunContent()
				_fdege := NewEG_RunLevelElts()
				_eddb := NewEG_RangeMarkupElements()
				_eddb.BookmarkStart = NewCT_Bookmark()
				if _ggbbgd := d.DecodeElement(_eddb.BookmarkStart, &_efeda); _ggbbgd != nil {
					return _ggbbgd
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _ffbeb)
				_ffbeb.EG_ContentRunContent = append(_ffbeb.EG_ContentRunContent, _cafbd)
				_cafbd.EG_RunLevelElts = append(_cafbd.EG_RunLevelElts, _fdege)
				_fdege.EG_RangeMarkupElements = append(_fdege.EG_RangeMarkupElements, _eddb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_dfgff := NewEG_PContent()
				_fgebf := NewEG_ContentRunContent()
				_fabgf := NewEG_RunLevelElts()
				_deeb := NewEG_RangeMarkupElements()
				_deeb.BookmarkEnd = NewCT_MarkupRange()
				if _bbcedg := d.DecodeElement(_deeb.BookmarkEnd, &_efeda); _bbcedg != nil {
					return _bbcedg
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _dfgff)
				_dfgff.EG_ContentRunContent = append(_dfgff.EG_ContentRunContent, _fgebf)
				_fgebf.EG_RunLevelElts = append(_fgebf.EG_RunLevelElts, _fabgf)
				_fabgf.EG_RangeMarkupElements = append(_fabgf.EG_RangeMarkupElements, _deeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_cgdcd := NewEG_PContent()
				_aebee := NewEG_ContentRunContent()
				_ceeab := NewEG_RunLevelElts()
				_cgfeb := NewEG_RangeMarkupElements()
				_cgfeb.MoveFromRangeStart = NewCT_MoveBookmark()
				if _eecfd := d.DecodeElement(_cgfeb.MoveFromRangeStart, &_efeda); _eecfd != nil {
					return _eecfd
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _cgdcd)
				_cgdcd.EG_ContentRunContent = append(_cgdcd.EG_ContentRunContent, _aebee)
				_aebee.EG_RunLevelElts = append(_aebee.EG_RunLevelElts, _ceeab)
				_ceeab.EG_RangeMarkupElements = append(_ceeab.EG_RangeMarkupElements, _cgfeb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_fcebe := NewEG_PContent()
				_aeece := NewEG_ContentRunContent()
				_bcaa := NewEG_RunLevelElts()
				_egafd := NewEG_RangeMarkupElements()
				_egafd.MoveFromRangeEnd = NewCT_MarkupRange()
				if _abgbc := d.DecodeElement(_egafd.MoveFromRangeEnd, &_efeda); _abgbc != nil {
					return _abgbc
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _fcebe)
				_fcebe.EG_ContentRunContent = append(_fcebe.EG_ContentRunContent, _aeece)
				_aeece.EG_RunLevelElts = append(_aeece.EG_RunLevelElts, _bcaa)
				_bcaa.EG_RangeMarkupElements = append(_bcaa.EG_RangeMarkupElements, _egafd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dcggga := NewEG_PContent()
				_ebegd := NewEG_ContentRunContent()
				_edgafg := NewEG_RunLevelElts()
				_eaege := NewEG_RangeMarkupElements()
				_eaege.MoveToRangeStart = NewCT_MoveBookmark()
				if _eede := d.DecodeElement(_eaege.MoveToRangeStart, &_efeda); _eede != nil {
					return _eede
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _dcggga)
				_dcggga.EG_ContentRunContent = append(_dcggga.EG_ContentRunContent, _ebegd)
				_ebegd.EG_RunLevelElts = append(_ebegd.EG_RunLevelElts, _edgafg)
				_edgafg.EG_RangeMarkupElements = append(_edgafg.EG_RangeMarkupElements, _eaege)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_aaea := NewEG_PContent()
				_dbbfb := NewEG_ContentRunContent()
				_bfcbg := NewEG_RunLevelElts()
				_eaeba := NewEG_RangeMarkupElements()
				_eaeba.MoveToRangeEnd = NewCT_MarkupRange()
				if _cbfcf := d.DecodeElement(_eaeba.MoveToRangeEnd, &_efeda); _cbfcf != nil {
					return _cbfcf
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _aaea)
				_aaea.EG_ContentRunContent = append(_aaea.EG_ContentRunContent, _dbbfb)
				_dbbfb.EG_RunLevelElts = append(_dbbfb.EG_RunLevelElts, _bfcbg)
				_bfcbg.EG_RangeMarkupElements = append(_bfcbg.EG_RangeMarkupElements, _eaeba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_dgdff := NewEG_PContent()
				_gcbbf := NewEG_ContentRunContent()
				_dfdcf := NewEG_RunLevelElts()
				_cabde := NewEG_RangeMarkupElements()
				_cabde.CommentRangeStart = NewCT_MarkupRange()
				if _aegca := d.DecodeElement(_cabde.CommentRangeStart, &_efeda); _aegca != nil {
					return _aegca
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _dgdff)
				_dgdff.EG_ContentRunContent = append(_dgdff.EG_ContentRunContent, _gcbbf)
				_gcbbf.EG_RunLevelElts = append(_gcbbf.EG_RunLevelElts, _dfdcf)
				_dfdcf.EG_RangeMarkupElements = append(_dfdcf.EG_RangeMarkupElements, _cabde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_dbbdeb := NewEG_PContent()
				_cgdff := NewEG_ContentRunContent()
				_fdfae := NewEG_RunLevelElts()
				_bbggb := NewEG_RangeMarkupElements()
				_bbggb.CommentRangeEnd = NewCT_MarkupRange()
				if _bafcd := d.DecodeElement(_bbggb.CommentRangeEnd, &_efeda); _bafcd != nil {
					return _bafcd
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _dbbdeb)
				_dbbdeb.EG_ContentRunContent = append(_dbbdeb.EG_ContentRunContent, _cgdff)
				_cgdff.EG_RunLevelElts = append(_cgdff.EG_RunLevelElts, _fdfae)
				_fdfae.EG_RangeMarkupElements = append(_fdfae.EG_RangeMarkupElements, _bbggb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gggfd := NewEG_PContent()
				_fgdaf := NewEG_ContentRunContent()
				_decbb := NewEG_RunLevelElts()
				_bacbdd := NewEG_RangeMarkupElements()
				_bacbdd.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _bcace := d.DecodeElement(_bacbdd.CustomXmlInsRangeStart, &_efeda); _bcace != nil {
					return _bcace
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _gggfd)
				_gggfd.EG_ContentRunContent = append(_gggfd.EG_ContentRunContent, _fgdaf)
				_fgdaf.EG_RunLevelElts = append(_fgdaf.EG_RunLevelElts, _decbb)
				_decbb.EG_RangeMarkupElements = append(_decbb.EG_RangeMarkupElements, _bacbdd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_fbfaad := NewEG_PContent()
				_egebc := NewEG_ContentRunContent()
				_ecae := NewEG_RunLevelElts()
				_eaeee := NewEG_RangeMarkupElements()
				_eaeee.CustomXmlInsRangeEnd = NewCT_Markup()
				if _efcab := d.DecodeElement(_eaeee.CustomXmlInsRangeEnd, &_efeda); _efcab != nil {
					return _efcab
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _fbfaad)
				_fbfaad.EG_ContentRunContent = append(_fbfaad.EG_ContentRunContent, _egebc)
				_egebc.EG_RunLevelElts = append(_egebc.EG_RunLevelElts, _ecae)
				_ecae.EG_RangeMarkupElements = append(_ecae.EG_RangeMarkupElements, _eaeee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_bbece := NewEG_PContent()
				_ebece := NewEG_ContentRunContent()
				_fcgfbf := NewEG_RunLevelElts()
				_ccgea := NewEG_RangeMarkupElements()
				_ccgea.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _ecfaf := d.DecodeElement(_ccgea.CustomXmlDelRangeStart, &_efeda); _ecfaf != nil {
					return _ecfaf
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _bbece)
				_bbece.EG_ContentRunContent = append(_bbece.EG_ContentRunContent, _ebece)
				_ebece.EG_RunLevelElts = append(_ebece.EG_RunLevelElts, _fcgfbf)
				_fcgfbf.EG_RangeMarkupElements = append(_fcgfbf.EG_RangeMarkupElements, _ccgea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_abae := NewEG_PContent()
				_gdagcf := NewEG_ContentRunContent()
				_fbegg := NewEG_RunLevelElts()
				_begdc := NewEG_RangeMarkupElements()
				_begdc.CustomXmlDelRangeEnd = NewCT_Markup()
				if _dacgd := d.DecodeElement(_begdc.CustomXmlDelRangeEnd, &_efeda); _dacgd != nil {
					return _dacgd
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _abae)
				_abae.EG_ContentRunContent = append(_abae.EG_ContentRunContent, _gdagcf)
				_gdagcf.EG_RunLevelElts = append(_gdagcf.EG_RunLevelElts, _fbegg)
				_fbegg.EG_RangeMarkupElements = append(_fbegg.EG_RangeMarkupElements, _begdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_eecaa := NewEG_PContent()
				_gcbec := NewEG_ContentRunContent()
				_bfggb := NewEG_RunLevelElts()
				_eaede := NewEG_RangeMarkupElements()
				_eaede.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _baebe := d.DecodeElement(_eaede.CustomXmlMoveFromRangeStart, &_efeda); _baebe != nil {
					return _baebe
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _eecaa)
				_eecaa.EG_ContentRunContent = append(_eecaa.EG_ContentRunContent, _gcbec)
				_gcbec.EG_RunLevelElts = append(_gcbec.EG_RunLevelElts, _bfggb)
				_bfggb.EG_RangeMarkupElements = append(_bfggb.EG_RangeMarkupElements, _eaede)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_fegad := NewEG_PContent()
				_dbbea := NewEG_ContentRunContent()
				_bbedad := NewEG_RunLevelElts()
				_gdbbb := NewEG_RangeMarkupElements()
				_gdbbb.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _bagfcg := d.DecodeElement(_gdbbb.CustomXmlMoveFromRangeEnd, &_efeda); _bagfcg != nil {
					return _bagfcg
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _fegad)
				_fegad.EG_ContentRunContent = append(_fegad.EG_ContentRunContent, _dbbea)
				_dbbea.EG_RunLevelElts = append(_dbbea.EG_RunLevelElts, _bbedad)
				_bbedad.EG_RangeMarkupElements = append(_bbedad.EG_RangeMarkupElements, _gdbbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_daacf := NewEG_PContent()
				_gbcca := NewEG_ContentRunContent()
				_ccdd := NewEG_RunLevelElts()
				_bggcgc := NewEG_RangeMarkupElements()
				_bggcgc.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bdcdd := d.DecodeElement(_bggcgc.CustomXmlMoveToRangeStart, &_efeda); _bdcdd != nil {
					return _bdcdd
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _daacf)
				_daacf.EG_ContentRunContent = append(_daacf.EG_ContentRunContent, _gbcca)
				_gbcca.EG_RunLevelElts = append(_gbcca.EG_RunLevelElts, _ccdd)
				_ccdd.EG_RangeMarkupElements = append(_ccdd.EG_RangeMarkupElements, _bggcgc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_eeaba := NewEG_PContent()
				_eafad := NewEG_ContentRunContent()
				_dddbg := NewEG_RunLevelElts()
				_gafgd := NewEG_RangeMarkupElements()
				_gafgd.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _fadac := d.DecodeElement(_gafgd.CustomXmlMoveToRangeEnd, &_efeda); _fadac != nil {
					return _fadac
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _eeaba)
				_eeaba.EG_ContentRunContent = append(_eeaba.EG_ContentRunContent, _eafad)
				_eafad.EG_RunLevelElts = append(_eafad.EG_RunLevelElts, _dddbg)
				_dddbg.EG_RangeMarkupElements = append(_dddbg.EG_RangeMarkupElements, _gafgd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_ddfda := NewEG_PContent()
				_gdbba := NewEG_ContentRunContent()
				_ggbca := NewEG_RunLevelElts()
				_bagff := NewEG_MathContent()
				_bagff.OMathPara = _f.NewOMathPara()
				if _efgeb := d.DecodeElement(_bagff.OMathPara, &_efeda); _efgeb != nil {
					return _efgeb
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _ddfda)
				_ddfda.EG_ContentRunContent = append(_ddfda.EG_ContentRunContent, _gdbba)
				_gdbba.EG_RunLevelElts = append(_gdbba.EG_RunLevelElts, _ggbca)
				_ggbca.EG_MathContent = append(_ggbca.EG_MathContent, _bagff)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_deca := NewEG_PContent()
				_bbccdf := NewEG_ContentRunContent()
				_aecea := NewEG_RunLevelElts()
				_cgfae := NewEG_MathContent()
				_cgfae.OMath = _f.NewOMath()
				if _aedgf := d.DecodeElement(_cgfae.OMath, &_efeda); _aedgf != nil {
					return _aedgf
				}
				_cgbab.EG_PContent = append(_cgbab.EG_PContent, _deca)
				_deca.EG_ContentRunContent = append(_deca.EG_ContentRunContent, _bbccdf)
				_bbccdf.EG_RunLevelElts = append(_bbccdf.EG_RunLevelElts, _aecea)
				_aecea.EG_MathContent = append(_aecea.EG_MathContent, _cgfae)
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020CT_P\u0020\u0025v", _efeda.Name)
				if _bdcde := d.Skip(); _bdcde != nil {
					return _bdcde
				}
			}
		case _d.EndElement:
			break _eabcg
		case _d.CharData:
		}
	}
	return nil
}
func (_gdefbf *ST_TargetScreenSz) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbbbde, _gccbbg := d.Token()
	if _gccbbg != nil {
		return _gccbbg
	}
	if _feeeca, _fadef := _bbbbde.(_d.EndElement); _fadef && _feeeca.Name == start.Name {
		*_gdefbf = 1
		return nil
	}
	if _ddabad, _fcebb := _bbbbde.(_d.CharData); !_fcebb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bbbbde)
	} else {
		switch string(_ddabad) {
		case "":
			*_gdefbf = 0
		case "544x376":
			*_gdefbf = 1
		case "640x480":
			*_gdefbf = 2
		case "720x512":
			*_gdefbf = 3
		case "800x600":
			*_gdefbf = 4
		case "1024x768":
			*_gdefbf = 5
		case "1152x882":
			*_gdefbf = 6
		case "1152x900":
			*_gdefbf = 7
		case "1280x1024":
			*_gdefbf = 8
		case "1600x1200":
			*_gdefbf = 9
		case "1800x1440":
			*_gdefbf = 10
		case "1920x1200":
			*_gdefbf = 11
		}
	}
	_bbbbde, _gccbbg = d.Token()
	if _gccbbg != nil {
		return _gccbbg
	}
	if _fabggd, _eeagc := _bbbbde.(_d.EndElement); _eeagc && _fabggd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bbbbde)
}

type CT_DocDefaults struct {

	// Default Run Properties
	RPrDefault *CT_RPrDefault

	// Default Paragraph Properties
	PPrDefault *CT_PPrDefault
}

func (_fcaed *WdCT_WordprocessingShape) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcaed.Choice = NewWdCT_WordprocessingShapeChoice()
	_fcaed.SpPr = _eb.NewCT_ShapeProperties()
	_fcaed.BodyPr = _eb.NewCT_TextBodyProperties()
	for _, _gccba := range start.Attr {
		if _gccba.Name.Local == "normalEastAsianFlow" {
			_befdgc, _fcfbb := _dd.ParseBool(_gccba.Value)
			if _fcfbb != nil {
				return _fcfbb
			}
			_fcaed.NormalEastAsianFlowAttr = &_befdgc
			continue
		}
	}
_afbfbg:
	for {
		_cgdeg, _gfdega := d.Token()
		if _gfdega != nil {
			return _gfdega
		}
		switch _bbdebf := _cgdeg.(type) {
		case _d.StartElement:
			switch _bbdebf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvPr"}:
				_fcaed.CNvPr = _eb.NewCT_NonVisualDrawingProps()
				if _feddb := d.DecodeElement(_fcaed.CNvPr, &_bbdebf); _feddb != nil {
					return _feddb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvSpPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvSpPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvSpPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvSpPr"}:
				_fcaed.Choice = NewWdCT_WordprocessingShapeChoice()
				if _bdaaa := d.DecodeElement(&_fcaed.Choice.CNvSpPr, &_bbdebf); _bdaaa != nil {
					return _bdaaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvCnPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvCnPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvCnPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvCnPr"}:
				_fcaed.Choice = NewWdCT_WordprocessingShapeChoice()
				if _cgegb := d.DecodeElement(&_fcaed.Choice.CNvCnPr, &_bbdebf); _cgegb != nil {
					return _cgegb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "spPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "spPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "spPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spPr"}:
				if _eecaae := d.DecodeElement(_fcaed.SpPr, &_bbdebf); _eecaae != nil {
					return _eecaae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "style"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "style"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "style"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "style"}:
				_fcaed.Style = _eb.NewCT_ShapeStyle()
				if _agefdc := d.DecodeElement(_fcaed.Style, &_bbdebf); _agefdc != nil {
					return _agefdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_fcaed.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _dbca := d.DecodeElement(_fcaed.ExtLst, &_bbdebf); _dbca != nil {
					return _dbca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "txbx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "txbx"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "txbx"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "txbx"}:
				_fcaed.WChoice = NewWdCT_WordprocessingShapeChoice1()
				if _cedaf := d.DecodeElement(&_fcaed.WChoice.Txbx, &_bbdebf); _cedaf != nil {
					return _cedaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "linkedTxbx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "linkedTxbx"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "linkedTxbx"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "linkedTxbx"}:
				_fcaed.WChoice = NewWdCT_WordprocessingShapeChoice1()
				if _eegaag := d.DecodeElement(&_fcaed.WChoice.LinkedTxbx, &_bbdebf); _eegaag != nil {
					return _eegaag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "bodyPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "bodyPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "bodyPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bodyPr"}:
				if _ecdbc := d.DecodeElement(_fcaed.BodyPr, &_bbdebf); _ecdbc != nil {
					return _ecdbc
				}
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020WdCT_WordprocessingShape\u0020%v", _bbdebf.Name)
				if _cdfabb := d.Skip(); _cdfabb != nil {
					return _cdfabb
				}
			}
		case _d.EndElement:
			break _afbfbg
		case _d.CharData:
		}
	}
	return nil
}
func (_ffgbbg *EG_ContentRunContentBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ffgbbg.SmartTag != nil {
		_bcadf := _d.StartElement{Name: _d.Name{Local: "w:smartTag"}}
		e.EncodeElement(_ffgbbg.SmartTag, _bcadf)
	}
	if _ffgbbg.Sdt != nil {
		_ggccfg := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_ffgbbg.Sdt, _ggccfg)
	}
	if _ffgbbg.EG_RunLevelElts != nil {
		for _, _fgccdb := range _ffgbbg.EG_RunLevelElts {
			_fgccdb.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func (_agbag ST_FontFamily) String() string {
	switch _agbag {
	case 0:
		return ""
	case 1:
		return "decorative"
	case 2:
		return "modern"
	case 3:
		return "roman"
	case 4:
		return "script"
	case 5:
		return "swiss"
	case 6:
		return "auto"
	}
	return ""
}

// Validate validates the CT_DocProtect and its children
func (_afacf *CT_DocProtect) Validate() error { return _afacf.ValidateWithPath("CT_DocProtect") }
func (_gdeff *CT_FFData) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gdeff.Name != nil {
		_aebde := _d.StartElement{Name: _d.Name{Local: "w:name"}}
		for _, _fegda := range _gdeff.Name {
			e.EncodeElement(_fegda, _aebde)
		}
	}
	if _gdeff.Label != nil {
		_dacdd := _d.StartElement{Name: _d.Name{Local: "w:label"}}
		for _, _aecbc := range _gdeff.Label {
			e.EncodeElement(_aecbc, _dacdd)
		}
	}
	if _gdeff.TabIndex != nil {
		_acgc := _d.StartElement{Name: _d.Name{Local: "w:tabIndex"}}
		for _, _dgcab := range _gdeff.TabIndex {
			e.EncodeElement(_dgcab, _acgc)
		}
	}
	if _gdeff.Enabled != nil {
		_gdbb := _d.StartElement{Name: _d.Name{Local: "w:enabled"}}
		for _, _fgfbc := range _gdeff.Enabled {
			e.EncodeElement(_fgfbc, _gdbb)
		}
	}
	if _gdeff.CalcOnExit != nil {
		_egdb := _d.StartElement{Name: _d.Name{Local: "w:calcOnExit"}}
		for _, _gecgb := range _gdeff.CalcOnExit {
			e.EncodeElement(_gecgb, _egdb)
		}
	}
	if _gdeff.EntryMacro != nil {
		_abgb := _d.StartElement{Name: _d.Name{Local: "w:entryMacro"}}
		for _, _afcdf := range _gdeff.EntryMacro {
			e.EncodeElement(_afcdf, _abgb)
		}
	}
	if _gdeff.ExitMacro != nil {
		_ccfcf := _d.StartElement{Name: _d.Name{Local: "w:exitMacro"}}
		for _, _gcdb := range _gdeff.ExitMacro {
			e.EncodeElement(_gcdb, _ccfcf)
		}
	}
	if _gdeff.HelpText != nil {
		_acffd := _d.StartElement{Name: _d.Name{Local: "w:helpText"}}
		for _, _edfec := range _gdeff.HelpText {
			e.EncodeElement(_edfec, _acffd)
		}
	}
	if _gdeff.StatusText != nil {
		_aggcc := _d.StartElement{Name: _d.Name{Local: "w:statusText"}}
		for _, _afege := range _gdeff.StatusText {
			e.EncodeElement(_afege, _aggcc)
		}
	}
	if _gdeff.CheckBox != nil {
		_fecffd := _d.StartElement{Name: _d.Name{Local: "w:checkBox"}}
		e.EncodeElement(_gdeff.CheckBox, _fecffd)
	}
	if _gdeff.DdList != nil {
		_fgffb := _d.StartElement{Name: _d.Name{Local: "w:ddList"}}
		e.EncodeElement(_gdeff.DdList, _fgffb)
	}
	if _gdeff.TextInput != nil {
		_cgfff := _d.StartElement{Name: _d.Name{Local: "w:textInput"}}
		e.EncodeElement(_gdeff.TextInput, _cgfff)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bgdegd ST_DocPartType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dbeac := _d.Attr{}
	_dbeac.Name = name
	switch _bgdegd {
	case ST_DocPartTypeUnset:
		_dbeac.Value = ""
	case ST_DocPartTypeNone:
		_dbeac.Value = "none"
	case ST_DocPartTypeNormal:
		_dbeac.Value = "normal"
	case ST_DocPartTypeAutoExp:
		_dbeac.Value = "autoExp"
	case ST_DocPartTypeToolbar:
		_dbeac.Value = "toolbar"
	case ST_DocPartTypeSpeller:
		_dbeac.Value = "speller"
	case ST_DocPartTypeFormFld:
		_dbeac.Value = "formFld"
	case ST_DocPartTypeBbPlcHdr:
		_dbeac.Value = "bbPlcHdr"
	}
	return _dbeac, nil
}
func (_gefae *CT_SdtText) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gefae.MultiLineAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:multiLine"}, Value: _b.Sprintf("\u0025v", *_gefae.MultiLineAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bggbec ST_PageBorderZOrder) Validate() error { return _bggbec.ValidateWithPath("") }
func (_caefg ST_SectionMark) Validate() error       { return _caefg.ValidateWithPath("") }
func (_dbfdfe ST_LineSpacingRule) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dadgb := _d.Attr{}
	_dadgb.Name = name
	switch _dbfdfe {
	case ST_LineSpacingRuleUnset:
		_dadgb.Value = ""
	case ST_LineSpacingRuleAuto:
		_dadgb.Value = "auto"
	case ST_LineSpacingRuleExact:
		_dadgb.Value = "exact"
	case ST_LineSpacingRuleAtLeast:
		_dadgb.Value = "atLeast"
	}
	return _dadgb, nil
}

const (
	ST_SdtDateMappingTypeUnset    ST_SdtDateMappingType = 0
	ST_SdtDateMappingTypeText     ST_SdtDateMappingType = 1
	ST_SdtDateMappingTypeDate     ST_SdtDateMappingType = 2
	ST_SdtDateMappingTypeDateTime ST_SdtDateMappingType = 3
)

func (_acdcge *CT_RPrOriginal) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _acdcge.RStyle != nil {
		_cabdf := _d.StartElement{Name: _d.Name{Local: "w:rStyle"}}
		e.EncodeElement(_acdcge.RStyle, _cabdf)
	}
	if _acdcge.RFonts != nil {
		_cgbfac := _d.StartElement{Name: _d.Name{Local: "w:rFonts"}}
		e.EncodeElement(_acdcge.RFonts, _cgbfac)
	}
	if _acdcge.B != nil {
		_dbagfg := _d.StartElement{Name: _d.Name{Local: "w:b"}}
		e.EncodeElement(_acdcge.B, _dbagfg)
	}
	if _acdcge.BCs != nil {
		_cbffaeb := _d.StartElement{Name: _d.Name{Local: "w:bCs"}}
		e.EncodeElement(_acdcge.BCs, _cbffaeb)
	}
	if _acdcge.I != nil {
		_cdegdd := _d.StartElement{Name: _d.Name{Local: "w:i"}}
		e.EncodeElement(_acdcge.I, _cdegdd)
	}
	if _acdcge.ICs != nil {
		_eaea := _d.StartElement{Name: _d.Name{Local: "w:iCs"}}
		e.EncodeElement(_acdcge.ICs, _eaea)
	}
	if _acdcge.Caps != nil {
		_bbfbg := _d.StartElement{Name: _d.Name{Local: "w:caps"}}
		e.EncodeElement(_acdcge.Caps, _bbfbg)
	}
	if _acdcge.SmallCaps != nil {
		_ccaea := _d.StartElement{Name: _d.Name{Local: "w:smallCaps"}}
		e.EncodeElement(_acdcge.SmallCaps, _ccaea)
	}
	if _acdcge.Strike != nil {
		_gcgbe := _d.StartElement{Name: _d.Name{Local: "w:strike"}}
		e.EncodeElement(_acdcge.Strike, _gcgbe)
	}
	if _acdcge.Dstrike != nil {
		_afdbdd := _d.StartElement{Name: _d.Name{Local: "w:dstrike"}}
		e.EncodeElement(_acdcge.Dstrike, _afdbdd)
	}
	if _acdcge.Outline != nil {
		_fgbbe := _d.StartElement{Name: _d.Name{Local: "w:outline"}}
		e.EncodeElement(_acdcge.Outline, _fgbbe)
	}
	if _acdcge.Shadow != nil {
		_efdbf := _d.StartElement{Name: _d.Name{Local: "w:shadow"}}
		e.EncodeElement(_acdcge.Shadow, _efdbf)
	}
	if _acdcge.Emboss != nil {
		_adcdc := _d.StartElement{Name: _d.Name{Local: "w:emboss"}}
		e.EncodeElement(_acdcge.Emboss, _adcdc)
	}
	if _acdcge.Imprint != nil {
		_gggab := _d.StartElement{Name: _d.Name{Local: "w:imprint"}}
		e.EncodeElement(_acdcge.Imprint, _gggab)
	}
	if _acdcge.NoProof != nil {
		_gcfee := _d.StartElement{Name: _d.Name{Local: "w:noProof"}}
		e.EncodeElement(_acdcge.NoProof, _gcfee)
	}
	if _acdcge.SnapToGrid != nil {
		_cdccgb := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_acdcge.SnapToGrid, _cdccgb)
	}
	if _acdcge.Vanish != nil {
		_dfbfg := _d.StartElement{Name: _d.Name{Local: "w:vanish"}}
		e.EncodeElement(_acdcge.Vanish, _dfbfg)
	}
	if _acdcge.WebHidden != nil {
		_bcce := _d.StartElement{Name: _d.Name{Local: "w:webHidden"}}
		e.EncodeElement(_acdcge.WebHidden, _bcce)
	}
	if _acdcge.Color != nil {
		_dbbdfa := _d.StartElement{Name: _d.Name{Local: "w:color"}}
		e.EncodeElement(_acdcge.Color, _dbbdfa)
	}
	if _acdcge.Spacing != nil {
		_dfbag := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_acdcge.Spacing, _dfbag)
	}
	if _acdcge.W != nil {
		_ffab := _d.StartElement{Name: _d.Name{Local: "w:w"}}
		e.EncodeElement(_acdcge.W, _ffab)
	}
	if _acdcge.Kern != nil {
		_gacba := _d.StartElement{Name: _d.Name{Local: "w:kern"}}
		e.EncodeElement(_acdcge.Kern, _gacba)
	}
	if _acdcge.Position != nil {
		_bcefd := _d.StartElement{Name: _d.Name{Local: "w:position"}}
		e.EncodeElement(_acdcge.Position, _bcefd)
	}
	if _acdcge.Sz != nil {
		_fbbefa := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_acdcge.Sz, _fbbefa)
	}
	if _acdcge.SzCs != nil {
		_dafed := _d.StartElement{Name: _d.Name{Local: "w:szCs"}}
		e.EncodeElement(_acdcge.SzCs, _dafed)
	}
	if _acdcge.Highlight != nil {
		_gffdf := _d.StartElement{Name: _d.Name{Local: "w:highlight"}}
		e.EncodeElement(_acdcge.Highlight, _gffdf)
	}
	if _acdcge.U != nil {
		_bgfea := _d.StartElement{Name: _d.Name{Local: "w:u"}}
		e.EncodeElement(_acdcge.U, _bgfea)
	}
	if _acdcge.Effect != nil {
		_cbbfc := _d.StartElement{Name: _d.Name{Local: "w:effect"}}
		e.EncodeElement(_acdcge.Effect, _cbbfc)
	}
	if _acdcge.Bdr != nil {
		_fagdg := _d.StartElement{Name: _d.Name{Local: "w:bdr"}}
		e.EncodeElement(_acdcge.Bdr, _fagdg)
	}
	if _acdcge.Shd != nil {
		_bgcbe := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_acdcge.Shd, _bgcbe)
	}
	if _acdcge.FitText != nil {
		_fdffe := _d.StartElement{Name: _d.Name{Local: "w:fitText"}}
		e.EncodeElement(_acdcge.FitText, _fdffe)
	}
	if _acdcge.VertAlign != nil {
		_bgcdba := _d.StartElement{Name: _d.Name{Local: "w:vertAlign"}}
		e.EncodeElement(_acdcge.VertAlign, _bgcdba)
	}
	if _acdcge.Rtl != nil {
		_gfbgbc := _d.StartElement{Name: _d.Name{Local: "w:rtl"}}
		e.EncodeElement(_acdcge.Rtl, _gfbgbc)
	}
	if _acdcge.Cs != nil {
		_dafdf := _d.StartElement{Name: _d.Name{Local: "w:cs"}}
		e.EncodeElement(_acdcge.Cs, _dafdf)
	}
	if _acdcge.Em != nil {
		_bbdde := _d.StartElement{Name: _d.Name{Local: "w:em"}}
		e.EncodeElement(_acdcge.Em, _bbdde)
	}
	if _acdcge.Lang != nil {
		_agbgb := _d.StartElement{Name: _d.Name{Local: "w:lang"}}
		e.EncodeElement(_acdcge.Lang, _agbgb)
	}
	if _acdcge.EastAsianLayout != nil {
		_aecbfe := _d.StartElement{Name: _d.Name{Local: "w:eastAsianLayout"}}
		e.EncodeElement(_acdcge.EastAsianLayout, _aecbfe)
	}
	if _acdcge.SpecVanish != nil {
		_dcddec := _d.StartElement{Name: _d.Name{Local: "w:specVanish"}}
		e.EncodeElement(_acdcge.SpecVanish, _dcddec)
	}
	if _acdcge.OMath != nil {
		_abfcg := _d.StartElement{Name: _d.Name{Local: "w:oMath"}}
		e.EncodeElement(_acdcge.OMath, _abfcg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bgaebf WdST_RelFromV) ValidateWithPath(path string) error {
	switch _bgaebf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_bgaebf))
	}
	return nil
}

// ValidateWithPath validates the CT_TblOverlap and its children, prefixing error messages with path
func (_ffaddg *CT_TblOverlap) ValidateWithPath(path string) error {
	if _ffaddg.ValAttr == ST_TblOverlapUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fbcfa := _ffaddg.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fbcfa != nil {
		return _fbcfa
	}
	return nil
}

type ST_CharacterSpacing byte

// Validate validates the CT_Em and its children
func (_faeae *CT_Em) Validate() error { return _faeae.ValidateWithPath("CT_Em") }
func (_aaadd *CT_DocParts) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _aaadd.DocPart != nil {
		_cegb := _d.StartElement{Name: _d.Name{Local: "w:docPart"}}
		for _, _cefa := range _aaadd.DocPart {
			e.EncodeElement(_cefa, _cegb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fgaffab *WdCT_WrapThrough) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dfeadd, _cfeffg := _fgaffab.WrapTextAttr.MarshalXMLAttr(_d.Name{Local: "wrapText"})
	if _cfeffg != nil {
		return _cfeffg
	}
	start.Attr = append(start.Attr, _dfeadd)
	if _fgaffab.DistLAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distL"}, Value: _b.Sprintf("\u0025v", *_fgaffab.DistLAttr)})
	}
	if _fgaffab.DistRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distR"}, Value: _b.Sprintf("\u0025v", *_fgaffab.DistRAttr)})
	}
	e.EncodeToken(start)
	_effee := _d.StartElement{Name: _d.Name{Local: "wp:wrapPolygon"}}
	e.EncodeElement(_fgaffab.WrapPolygon, _effee)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_Text() *CT_Text { _ecccb := &CT_Text{}; return _ecccb }
func (_gegac *CT_FontRel) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gegac.FontKeyAttr = "\u007b00000000\u002d0000\u002d0000\u002d0000-000000000000\u007d"
	for _, _edeec := range start.Attr {
		if _edeec.Name.Space == "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships" && _edeec.Name.Local == "id" || _edeec.Name.Space == "http:\u002f\u002fpurl.oclc\u002eorg\u002fooxml\u002fofficeDocument\u002frelationships" && _edeec.Name.Local == "id" {
			_eagfc, _aaga := _edeec.Value, error(nil)
			if _aaga != nil {
				return _aaga
			}
			_gegac.IdAttr = _eagfc
			continue
		}
		if _edeec.Name.Local == "fontKey" {
			_dgfb, _bcdcf := _edeec.Value, error(nil)
			if _bcdcf != nil {
				return _bcdcf
			}
			_gegac.FontKeyAttr = _dgfb
			continue
		}
		if _edeec.Name.Local == "subsetted" {
			_dbge, _fccff := ParseUnionST_OnOff(_edeec.Value)
			if _fccff != nil {
				return _fccff
			}
			_gegac.SubsettedAttr = _dbge
			continue
		}
	}
	for {
		_bddeg, _bcgad := d.Token()
		if _bcgad != nil {
			return _b.Errorf("parsing\u0020CT_FontRel:\u0020%s", _bcgad)
		}
		if _baadg, _begff := _bddeg.(_d.EndElement); _begff && _baadg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fbbbae ST_BrType) ValidateWithPath(path string) error {
	switch _fbbbae {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fbbbae))
	}
	return nil
}

// Validate validates the CT_DivBdr and its children
func (_ggfg *CT_DivBdr) Validate() error { return _ggfg.ValidateWithPath("CT_DivBdr") }

// ValidateWithPath validates the CT_TblBorders and its children, prefixing error messages with path
func (_baggb *CT_TblBorders) ValidateWithPath(path string) error {
	if _baggb.Top != nil {
		if _fadbgd := _baggb.Top.ValidateWithPath(path + "\u002fTop"); _fadbgd != nil {
			return _fadbgd
		}
	}
	if _baggb.Start != nil {
		if _fcabd := _baggb.Start.ValidateWithPath(path + "\u002fStart"); _fcabd != nil {
			return _fcabd
		}
	}
	if _baggb.Left != nil {
		if _cegfcb := _baggb.Left.ValidateWithPath(path + "\u002fLeft"); _cegfcb != nil {
			return _cegfcb
		}
	}
	if _baggb.Bottom != nil {
		if _dggdg := _baggb.Bottom.ValidateWithPath(path + "\u002fBottom"); _dggdg != nil {
			return _dggdg
		}
	}
	if _baggb.End != nil {
		if _deggb := _baggb.End.ValidateWithPath(path + "\u002fEnd"); _deggb != nil {
			return _deggb
		}
	}
	if _baggb.Right != nil {
		if _fecada := _baggb.Right.ValidateWithPath(path + "\u002fRight"); _fecada != nil {
			return _fecada
		}
	}
	if _baggb.InsideH != nil {
		if _eeefa := _baggb.InsideH.ValidateWithPath(path + "\u002fInsideH"); _eeefa != nil {
			return _eeefa
		}
	}
	if _baggb.InsideV != nil {
		if _dfdde := _baggb.InsideV.ValidateWithPath(path + "\u002fInsideV"); _dfdde != nil {
			return _dfdde
		}
	}
	return nil
}
func NewCT_LevelText() *CT_LevelText { _cfdea := &CT_LevelText{}; return _cfdea }

type ST_VerticalJc byte

func (_beaeegd ST_TextboxTightWrap) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_deedga := _d.Attr{}
	_deedga.Name = name
	switch _beaeegd {
	case ST_TextboxTightWrapUnset:
		_deedga.Value = ""
	case ST_TextboxTightWrapNone:
		_deedga.Value = "none"
	case ST_TextboxTightWrapAllLines:
		_deedga.Value = "allLines"
	case ST_TextboxTightWrapFirstAndLastLine:
		_deedga.Value = "firstAndLastLine"
	case ST_TextboxTightWrapFirstLineOnly:
		_deedga.Value = "firstLineOnly"
	case ST_TextboxTightWrapLastLineOnly:
		_deedga.Value = "lastLineOnly"
	}
	return _deedga, nil
}
func (_bddgd *CT_RunTrackChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _bddgd.AuthorAttr)})
	if _bddgd.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_bddgd.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _bddgd.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Numbering and its children
func (_facg *CT_Numbering) Validate() error { return _facg.ValidateWithPath("CT_Numbering") }
func NewCT_LineNumber() *CT_LineNumber      { _daaae := &CT_LineNumber{}; return _daaae }

type CT_Column struct {

	// Column Width
	WAttr *_g.ST_TwipsMeasure

	// Space Before Following Column
	SpaceAttr *_g.ST_TwipsMeasure
}
type CT_Cnf struct {

	// Conditional Formatting Bit Mask
	ValAttr *string

	// First Row
	FirstRowAttr *_g.ST_OnOff

	// Last Row
	LastRowAttr *_g.ST_OnOff

	// First Column
	FirstColumnAttr *_g.ST_OnOff

	// Last Column
	LastColumnAttr *_g.ST_OnOff

	// Odd Numbered Vertical Band
	OddVBandAttr *_g.ST_OnOff

	// Even Numbered Vertical Band
	EvenVBandAttr *_g.ST_OnOff

	// Odd Numbered Horizontal Band
	OddHBandAttr *_g.ST_OnOff

	// Even Numbered Horizontal Band
	EvenHBandAttr *_g.ST_OnOff

	// First Row and First Column
	FirstRowFirstColumnAttr *_g.ST_OnOff

	// First Row and Last Column
	FirstRowLastColumnAttr *_g.ST_OnOff

	// Last Row and First Column
	LastRowFirstColumnAttr *_g.ST_OnOff

	// Last Row and Last Column
	LastRowLastColumnAttr *_g.ST_OnOff
}

func (_bddabg ST_EdGrp) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bddabg.String(), start)
}
func (_aaageb ST_StyleSort) String() string {
	switch _aaageb {
	case 0:
		return ""
	case 1:
		return "name"
	case 2:
		return "priority"
	case 3:
		return "default"
	case 4:
		return "font"
	case 5:
		return "basedOn"
	case 6:
		return "type"
	case 7:
		return "0000"
	case 8:
		return "0001"
	case 9:
		return "0002"
	case 10:
		return "0003"
	case 11:
		return "0004"
	case 12:
		return "0005"
	}
	return ""
}

type CT_Underline struct {

	// Underline Style
	ValAttr ST_Underline

	// Underline Color
	ColorAttr *ST_HexColor

	// Underline Theme Color
	ThemeColorAttr ST_ThemeColor

	// Underline Theme Color Tint
	ThemeTintAttr *string

	// Underline Theme Color Shade
	ThemeShadeAttr *string
}

func (_dfgbad WdST_AlignV) Validate() error { return _dfgbad.ValidateWithPath("") }
func (_eeafb ST_DecimalNumberOrPercent) String() string {
	if _eeafb.ST_UnqualifiedPercentage != nil {
		return _b.Sprintf("\u0025v", *_eeafb.ST_UnqualifiedPercentage)
	}
	if _eeafb.ST_Percentage != nil {
		return _b.Sprintf("\u0025v", *_eeafb.ST_Percentage)
	}
	return ""
}
func NewCT_Divs() *CT_Divs               { _dbbeg := &CT_Divs{}; return _dbbeg }
func NewCT_EdnDocProps() *CT_EdnDocProps { _faga := &CT_EdnDocProps{}; return _faga }
func (_bbceb *CT_DocRsids) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fgcgg:
	for {
		_afbd, _fegeg := d.Token()
		if _fegeg != nil {
			return _fegeg
		}
		switch _cbfeb := _afbd.(type) {
		case _d.StartElement:
			switch _cbfeb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rsidRoot"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rsidRoot"}:
				_bbceb.RsidRoot = NewCT_LongHexNumber()
				if _bfbd := d.DecodeElement(_bbceb.RsidRoot, &_cbfeb); _bfbd != nil {
					return _bfbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rsid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rsid"}:
				_bebf := NewCT_LongHexNumber()
				if _dbbgd := d.DecodeElement(_bebf, &_cbfeb); _dbbgd != nil {
					return _dbbgd
				}
				_bbceb.Rsid = append(_bbceb.Rsid, _bebf)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DocRsids\u0020\u0025v", _cbfeb.Name)
				if _cggcc := d.Skip(); _cggcc != nil {
					return _cggcc
				}
			}
		case _d.EndElement:
			break _fgcgg
		case _d.CharData:
		}
	}
	return nil
}
func (_acgbcd *WdST_AlignV) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fedadf, _dfgde := d.Token()
	if _dfgde != nil {
		return _dfgde
	}
	if _gagfg, _gdgfbb := _fedadf.(_d.EndElement); _gdgfbb && _gagfg.Name == start.Name {
		*_acgbcd = 1
		return nil
	}
	if _gafgb, _dadaa := _fedadf.(_d.CharData); !_dadaa {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fedadf)
	} else {
		switch string(_gafgb) {
		case "":
			*_acgbcd = 0
		case "top":
			*_acgbcd = 1
		case "bottom":
			*_acgbcd = 2
		case "center":
			*_acgbcd = 3
		case "inside":
			*_acgbcd = 4
		case "outside":
			*_acgbcd = 5
		}
	}
	_fedadf, _dfgde = d.Token()
	if _dfgde != nil {
		return _dfgde
	}
	if _gfeda, _fdagefg := _fedadf.(_d.EndElement); _fdagefg && _gfeda.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fedadf)
}
func (_bgedf ST_TextScale) String() string {
	if _bgedf.ST_TextScalePercent != nil {
		return _b.Sprintf("\u0025v", *_bgedf.ST_TextScalePercent)
	}
	if _bgedf.ST_TextScaleDecimal != nil {
		return _b.Sprintf("\u0025v", *_bgedf.ST_TextScaleDecimal)
	}
	return ""
}
func (_fagace ST_View) ValidateWithPath(path string) error {
	switch _fagace {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fagace))
	}
	return nil
}

const (
	ST_AnnotationVMergeUnset ST_AnnotationVMerge = 0
	ST_AnnotationVMergeCont  ST_AnnotationVMerge = 1
	ST_AnnotationVMergeRest  ST_AnnotationVMerge = 2
)

// Validate validates the WdInline and its children
func (_agecg *WdInline) Validate() error { return _agecg.ValidateWithPath("WdInline") }
func (_bafbbf *WdST_WrapText) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bafbbf = 0
	case "bothSides":
		*_bafbbf = 1
	case "left":
		*_bafbbf = 2
	case "right":
		*_bafbbf = 3
	case "largest":
		*_bafbbf = 4
	}
	return nil
}

// ValidateWithPath validates the CT_ParaRPrChange and its children, prefixing error messages with path
func (_fbbdd *CT_ParaRPrChange) ValidateWithPath(path string) error {
	if _dbeeb := _fbbdd.RPr.ValidateWithPath(path + "\u002fRPr"); _dbeeb != nil {
		return _dbeeb
	}
	return nil
}

type CT_SectPrBase struct {

	// Section-Wide Footnote Properties
	FootnotePr *CT_FtnProps

	// Section-Wide Endnote Properties
	EndnotePr *CT_EdnProps

	// Section Type
	Type *CT_SectType

	// Page Size
	PgSz *CT_PageSz

	// Page Margins
	PgMar *CT_PageMar

	// Paper Source Information
	PaperSrc *CT_PaperSource

	// Page Borders
	PgBorders *CT_PageBorders

	// Line Numbering Settings
	LnNumType *CT_LineNumber

	// Page Numbering Settings
	PgNumType *CT_PageNumber

	// Column Definitions
	Cols *CT_Columns

	// Only Allow Editing of Form Fields
	FormProt *CT_OnOff

	// Vertical Text Alignment on Page
	VAlign *CT_VerticalJc

	// Suppress Endnotes In Document
	NoEndnote *CT_OnOff

	// Different First Page Headers and Footers
	TitlePg *CT_OnOff

	// Text Flow Direction
	TextDirection *CT_TextDirection

	// Right to Left Section Layout
	Bidi *CT_OnOff

	// Gutter on Right Side of Page
	RtlGutter *CT_OnOff

	// Document Grid
	DocGrid *CT_DocGrid

	// Reference to Printer Settings Data
	PrinterSettings *CT_Rel
	RsidRPrAttr     *string
	RsidDelAttr     *string
	RsidRAttr       *string
	RsidSectAttr    *string
}
type CT_FtnPos struct {

	// Footnote Position Type
	ValAttr ST_FtnPos
}
type ST_LineNumberRestart byte

func (_ecdabf ST_ProofErr) ValidateWithPath(path string) error {
	switch _ecdabf {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ecdabf))
	}
	return nil
}
func (_ccfgg *ST_TblLayoutType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ccfgg = 0
	case "fixed":
		*_ccfgg = 1
	case "autofit":
		*_ccfgg = 2
	}
	return nil
}
func (_ccbbc *CT_TblPrChange) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ccbbc.TblPr = NewCT_TblPrBase()
	for _, _gcgba := range start.Attr {
		if _gcgba.Name.Local == "author" {
			_dcdce, _agdca := _gcgba.Value, error(nil)
			if _agdca != nil {
				return _agdca
			}
			_ccbbc.AuthorAttr = _dcdce
			continue
		}
		if _gcgba.Name.Local == "date" {
			_fbcbdf, _cebgd := ParseStdlibTime(_gcgba.Value)
			if _cebgd != nil {
				return _cebgd
			}
			_ccbbc.DateAttr = &_fbcbdf
			continue
		}
		if _gcgba.Name.Local == "id" {
			_dfcaca, _fdfccf := _dd.ParseInt(_gcgba.Value, 10, 64)
			if _fdfccf != nil {
				return _fdfccf
			}
			_ccbbc.IdAttr = _dfcaca
			continue
		}
	}
_efgecg:
	for {
		_faeba, _cdddc := d.Token()
		if _cdddc != nil {
			return _cdddc
		}
		switch _acecf := _faeba.(type) {
		case _d.StartElement:
			switch _acecf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tblPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tblPr"}:
				if _agbda := d.DecodeElement(_ccbbc.TblPr, &_acecf); _agbda != nil {
					return _agbda
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_TblPrChange\u0020\u0025v", _acecf.Name)
				if _bbbge := d.Skip(); _bbbge != nil {
					return _bbbge
				}
			}
		case _d.EndElement:
			break _efgecg
		case _d.CharData:
		}
	}
	return nil
}
func (_fegae ST_SectionMark) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fegae.String(), start)
}
func (_edecd *CT_HpsMeasure) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gegg := range start.Attr {
		if _gegg.Name.Local == "val" {
			_gbdeg, _gacddc := ParseUnionST_HpsMeasure(_gegg.Value)
			if _gacddc != nil {
				return _gacddc
			}
			_edecd.ValAttr = _gbdeg
			continue
		}
	}
	for {
		_aecg, _aecfc := d.Token()
		if _aecfc != nil {
			return _b.Errorf("parsing\u0020CT_HpsMeasure:\u0020\u0025s", _aecfc)
		}
		if _dacgg, _fgdba := _aecg.(_d.EndElement); _fgdba && _dacgg.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_ObjectLink struct {
	UpdateModeAttr  ST_ObjectUpdateMode
	LockedFieldAttr *_g.ST_OnOff

	// Object Representation
	DrawAspectAttr ST_ObjectDrawAspect
	IdAttr         string

	// Object Application
	ProgIdAttr *string

	// Object Shape
	ShapeIdAttr *string

	// Field Switches
	FieldCodesAttr *string
}

// ValidateWithPath validates the CT_Bookmark and its children, prefixing error messages with path
func (_dgef *CT_Bookmark) ValidateWithPath(path string) error {
	if _deag := _dgef.DisplacedByCustomXmlAttr.ValidateWithPath(path + "\u002fDisplacedByCustomXmlAttr"); _deag != nil {
		return _deag
	}
	return nil
}
func NewCT_WriteProtection() *CT_WriteProtection { _fbbabe := &CT_WriteProtection{}; return _fbbabe }
func (_gfbea *CT_RPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gebbab:
	for {
		_bfgab, _eacebe := d.Token()
		if _eacebe != nil {
			return _eacebe
		}
		switch _gegc := _bfgab.(type) {
		case _d.StartElement:
			switch _gegc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rStyle"}:
				_gfbea.RStyle = NewCT_String()
				if _bcbcc := d.DecodeElement(_gfbea.RStyle, &_gegc); _bcbcc != nil {
					return _bcbcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rFonts"}:
				_gfbea.RFonts = NewCT_Fonts()
				if _cecfg := d.DecodeElement(_gfbea.RFonts, &_gegc); _cecfg != nil {
					return _cecfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "b"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "b"}:
				_gfbea.B = NewCT_OnOff()
				if _deddc := d.DecodeElement(_gfbea.B, &_gegc); _deddc != nil {
					return _deddc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bCs"}:
				_gfbea.BCs = NewCT_OnOff()
				if _dbbgbb := d.DecodeElement(_gfbea.BCs, &_gegc); _dbbgbb != nil {
					return _dbbgbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "i"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "i"}:
				_gfbea.I = NewCT_OnOff()
				if _beac := d.DecodeElement(_gfbea.I, &_gegc); _beac != nil {
					return _beac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "iCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "iCs"}:
				_gfbea.ICs = NewCT_OnOff()
				if _dbedb := d.DecodeElement(_gfbea.ICs, &_gegc); _dbedb != nil {
					return _dbedb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "caps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "caps"}:
				_gfbea.Caps = NewCT_OnOff()
				if _bgebf := d.DecodeElement(_gfbea.Caps, &_gegc); _bgebf != nil {
					return _bgebf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smallCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smallCaps"}:
				_gfbea.SmallCaps = NewCT_OnOff()
				if _efba := d.DecodeElement(_gfbea.SmallCaps, &_gegc); _efba != nil {
					return _efba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strike"}:
				_gfbea.Strike = NewCT_OnOff()
				if _dddeb := d.DecodeElement(_gfbea.Strike, &_gegc); _dddeb != nil {
					return _dddeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dstrike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dstrike"}:
				_gfbea.Dstrike = NewCT_OnOff()
				if _gdfbba := d.DecodeElement(_gfbea.Dstrike, &_gegc); _gdfbba != nil {
					return _gdfbba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outline"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outline"}:
				_gfbea.Outline = NewCT_OnOff()
				if _eegfb := d.DecodeElement(_gfbea.Outline, &_gegc); _eegfb != nil {
					return _eegfb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shadow"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shadow"}:
				_gfbea.Shadow = NewCT_OnOff()
				if _abaec := d.DecodeElement(_gfbea.Shadow, &_gegc); _abaec != nil {
					return _abaec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "emboss"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "emboss"}:
				_gfbea.Emboss = NewCT_OnOff()
				if _baef := d.DecodeElement(_gfbea.Emboss, &_gegc); _baef != nil {
					return _baef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "imprint"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "imprint"}:
				_gfbea.Imprint = NewCT_OnOff()
				if _eabcgg := d.DecodeElement(_gfbea.Imprint, &_gegc); _eabcgg != nil {
					return _eabcgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noProof"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noProof"}:
				_gfbea.NoProof = NewCT_OnOff()
				if _gcaede := d.DecodeElement(_gfbea.NoProof, &_gegc); _gcaede != nil {
					return _gcaede
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_gfbea.SnapToGrid = NewCT_OnOff()
				if _egcaf := d.DecodeElement(_gfbea.SnapToGrid, &_gegc); _egcaf != nil {
					return _egcaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vanish"}:
				_gfbea.Vanish = NewCT_OnOff()
				if _cadeee := d.DecodeElement(_gfbea.Vanish, &_gegc); _cadeee != nil {
					return _cadeee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "webHidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "webHidden"}:
				_gfbea.WebHidden = NewCT_OnOff()
				if _dgbbg := d.DecodeElement(_gfbea.WebHidden, &_gegc); _dgbbg != nil {
					return _dgbbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "color"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "color"}:
				_gfbea.Color = NewCT_Color()
				if _ffadf := d.DecodeElement(_gfbea.Color, &_gegc); _ffadf != nil {
					return _ffadf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_gfbea.Spacing = NewCT_SignedTwipsMeasure()
				if _cgfgb := d.DecodeElement(_gfbea.Spacing, &_gegc); _cgfgb != nil {
					return _cgfgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "w"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "w"}:
				_gfbea.W = NewCT_TextScale()
				if _adfgc := d.DecodeElement(_gfbea.W, &_gegc); _adfgc != nil {
					return _adfgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kern"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kern"}:
				_gfbea.Kern = NewCT_HpsMeasure()
				if _gbefd := d.DecodeElement(_gfbea.Kern, &_gegc); _gbefd != nil {
					return _gbefd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "position"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "position"}:
				_gfbea.Position = NewCT_SignedHpsMeasure()
				if _dbfag := d.DecodeElement(_gfbea.Position, &_gegc); _dbfag != nil {
					return _dbfag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_gfbea.Sz = NewCT_HpsMeasure()
				if _bgdbd := d.DecodeElement(_gfbea.Sz, &_gegc); _bgdbd != nil {
					return _bgdbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "szCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "szCs"}:
				_gfbea.SzCs = NewCT_HpsMeasure()
				if _dgadfc := d.DecodeElement(_gfbea.SzCs, &_gegc); _dgadfc != nil {
					return _dgadfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "highlight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "highlight"}:
				_gfbea.Highlight = NewCT_Highlight()
				if _febcg := d.DecodeElement(_gfbea.Highlight, &_gegc); _febcg != nil {
					return _febcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "u"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "u"}:
				_gfbea.U = NewCT_Underline()
				if _acbaa := d.DecodeElement(_gfbea.U, &_gegc); _acbaa != nil {
					return _acbaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effect"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "effect"}:
				_gfbea.Effect = NewCT_TextEffect()
				if _dcfbg := d.DecodeElement(_gfbea.Effect, &_gegc); _dcfbg != nil {
					return _dcfbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdr"}:
				_gfbea.Bdr = NewCT_Border()
				if _bdeg := d.DecodeElement(_gfbea.Bdr, &_gegc); _bdeg != nil {
					return _bdeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_gfbea.Shd = NewCT_Shd()
				if _dabcb := d.DecodeElement(_gfbea.Shd, &_gegc); _dabcb != nil {
					return _dabcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fitText"}:
				_gfbea.FitText = NewCT_FitText()
				if _gdbed := d.DecodeElement(_gfbea.FitText, &_gegc); _gdbed != nil {
					return _gdbed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vertAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vertAlign"}:
				_gfbea.VertAlign = NewCT_VerticalAlignRun()
				if _affgd := d.DecodeElement(_gfbea.VertAlign, &_gegc); _affgd != nil {
					return _affgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtl"}:
				_gfbea.Rtl = NewCT_OnOff()
				if _gdbcc := d.DecodeElement(_gfbea.Rtl, &_gegc); _gdbcc != nil {
					return _gdbcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cs"}:
				_gfbea.Cs = NewCT_OnOff()
				if _eceac := d.DecodeElement(_gfbea.Cs, &_gegc); _eceac != nil {
					return _eceac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "em"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "em"}:
				_gfbea.Em = NewCT_Em()
				if _aege := d.DecodeElement(_gfbea.Em, &_gegc); _aege != nil {
					return _aege
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lang"}:
				_gfbea.Lang = NewCT_Language()
				if _fgacf := d.DecodeElement(_gfbea.Lang, &_gegc); _fgacf != nil {
					return _fgacf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "eastAsianLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "eastAsianLayout"}:
				_gfbea.EastAsianLayout = NewCT_EastAsianLayout()
				if _daece := d.DecodeElement(_gfbea.EastAsianLayout, &_gegc); _daece != nil {
					return _daece
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "specVanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "specVanish"}:
				_gfbea.SpecVanish = NewCT_OnOff()
				if _agaabf := d.DecodeElement(_gfbea.SpecVanish, &_gegc); _agaabf != nil {
					return _agaabf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "oMath"}:
				_gfbea.OMath = NewCT_OnOff()
				if _aegcd := d.DecodeElement(_gfbea.OMath, &_gegc); _aegcd != nil {
					return _aegcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rPrChange"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rPrChange"}:
				_gfbea.RPrChange = NewCT_RPrChange()
				if _gbfg := d.DecodeElement(_gfbea.RPrChange, &_gegc); _gbfg != nil {
					return _gbfg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_RPr\u0020\u0025v", _gegc.Name)
				if _fdacc := d.Skip(); _fdacc != nil {
					return _fdacc
				}
			}
		case _d.EndElement:
			break _gebbab
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Sym and its children, prefixing error messages with path
func (_cdeec *CT_Sym) ValidateWithPath(path string) error { return nil }

type CT_Odso struct {

	// UDL Connection String
	Udl *CT_String

	// Data Source Table Name
	Table *CT_String

	// ODSO Data Source File Path
	Src *CT_Rel

	// Column Delimiter for Data Source
	ColDelim *CT_DecimalNumber

	// ODSO Data Source Type
	Type *CT_MailMergeSourceType

	// First Row of Data Source Contains Column Names
	FHdr *CT_OnOff

	// External Data Source to Merge Field Mapping
	FieldMapData []*CT_OdsoFieldMapData

	// Reference to Inclusion/Exclusion Data for Data Source
	RecipientData []*CT_Rel
}

func NewStyles() *Styles { _gabac := &Styles{}; _gabac.CT_Styles = *NewCT_Styles(); return _gabac }

// ValidateWithPath validates the CT_FramePr and its children, prefixing error messages with path
func (_fdfb *CT_FramePr) ValidateWithPath(path string) error {
	if _fdggg := _fdfb.DropCapAttr.ValidateWithPath(path + "\u002fDropCapAttr"); _fdggg != nil {
		return _fdggg
	}
	if _fdfb.WAttr != nil {
		if _bbfdd := _fdfb.WAttr.ValidateWithPath(path + "\u002fWAttr"); _bbfdd != nil {
			return _bbfdd
		}
	}
	if _fdfb.HAttr != nil {
		if _fefe := _fdfb.HAttr.ValidateWithPath(path + "\u002fHAttr"); _fefe != nil {
			return _fefe
		}
	}
	if _fdfb.VSpaceAttr != nil {
		if _bcdee := _fdfb.VSpaceAttr.ValidateWithPath(path + "/VSpaceAttr"); _bcdee != nil {
			return _bcdee
		}
	}
	if _fdfb.HSpaceAttr != nil {
		if _efcg := _fdfb.HSpaceAttr.ValidateWithPath(path + "/HSpaceAttr"); _efcg != nil {
			return _efcg
		}
	}
	if _cdced := _fdfb.WrapAttr.ValidateWithPath(path + "\u002fWrapAttr"); _cdced != nil {
		return _cdced
	}
	if _ggcd := _fdfb.HAnchorAttr.ValidateWithPath(path + "\u002fHAnchorAttr"); _ggcd != nil {
		return _ggcd
	}
	if _cegac := _fdfb.VAnchorAttr.ValidateWithPath(path + "\u002fVAnchorAttr"); _cegac != nil {
		return _cegac
	}
	if _fdfb.XAttr != nil {
		if _caggc := _fdfb.XAttr.ValidateWithPath(path + "\u002fXAttr"); _caggc != nil {
			return _caggc
		}
	}
	if _cgce := _fdfb.XAlignAttr.ValidateWithPath(path + "/XAlignAttr"); _cgce != nil {
		return _cgce
	}
	if _fdfb.YAttr != nil {
		if _aeca := _fdfb.YAttr.ValidateWithPath(path + "\u002fYAttr"); _aeca != nil {
			return _aeca
		}
	}
	if _bccdg := _fdfb.YAlignAttr.ValidateWithPath(path + "/YAlignAttr"); _bccdg != nil {
		return _bccdg
	}
	if _agbf := _fdfb.HRuleAttr.ValidateWithPath(path + "\u002fHRuleAttr"); _agbf != nil {
		return _agbf
	}
	if _fdfb.AnchorLockAttr != nil {
		if _cbceb := _fdfb.AnchorLockAttr.ValidateWithPath(path + "\u002fAnchorLockAttr"); _cbceb != nil {
			return _cbceb
		}
	}
	return nil
}

type CT_SmartTagRun struct {

	// Smart Tag Namespace
	UriAttr *string

	// Smart Tag Name
	ElementAttr string

	// Smart Tag Properties
	SmartTagPr  *CT_SmartTagPr
	EG_PContent []*EG_PContent
}

func (_geeebe ST_TargetScreenSz) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_geeebe.String(), start)
}

type EG_ContentRunContentBase struct {
	SmartTag        *CT_SmartTagRun
	Sdt             *CT_SdtRun
	EG_RunLevelElts []*EG_RunLevelElts
}

func (_eacbd *CT_SdtDocPart) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _eacbd.DocPartGallery != nil {
		_dgacf := _d.StartElement{Name: _d.Name{Local: "w:docPartGallery"}}
		e.EncodeElement(_eacbd.DocPartGallery, _dgacf)
	}
	if _eacbd.DocPartCategory != nil {
		_facgg := _d.StartElement{Name: _d.Name{Local: "w:docPartCategory"}}
		e.EncodeElement(_eacbd.DocPartCategory, _facgg)
	}
	if _eacbd.DocPartUnique != nil {
		_cabefb := _d.StartElement{Name: _d.Name{Local: "w:docPartUnique"}}
		e.EncodeElement(_eacbd.DocPartUnique, _cabefb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_afaad *CT_OdsoFieldMapData) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _afaad.Type != nil {
		_gfbeg := _d.StartElement{Name: _d.Name{Local: "w:type"}}
		e.EncodeElement(_afaad.Type, _gfbeg)
	}
	if _afaad.Name != nil {
		_gadac := _d.StartElement{Name: _d.Name{Local: "w:name"}}
		e.EncodeElement(_afaad.Name, _gadac)
	}
	if _afaad.MappedName != nil {
		_gabeed := _d.StartElement{Name: _d.Name{Local: "w:mappedName"}}
		e.EncodeElement(_afaad.MappedName, _gabeed)
	}
	if _afaad.Column != nil {
		_fdadf := _d.StartElement{Name: _d.Name{Local: "w:column"}}
		e.EncodeElement(_afaad.Column, _fdadf)
	}
	if _afaad.Lid != nil {
		_abbae := _d.StartElement{Name: _d.Name{Local: "w:lid"}}
		e.EncodeElement(_afaad.Lid, _abbae)
	}
	if _afaad.DynamicAddress != nil {
		_bcgf := _d.StartElement{Name: _d.Name{Local: "w:dynamicAddress"}}
		e.EncodeElement(_afaad.DynamicAddress, _bcgf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_abebe *CT_TabStop) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_abebe.ValAttr = ST_TabJc(1)
	for _, _bdbbab := range start.Attr {
		if _bdbbab.Name.Local == "val" {
			_abebe.ValAttr.UnmarshalXMLAttr(_bdbbab)
			continue
		}
		if _bdbbab.Name.Local == "leader" {
			_abebe.LeaderAttr.UnmarshalXMLAttr(_bdbbab)
			continue
		}
		if _bdbbab.Name.Local == "pos" {
			_gefcd, _aabega := ParseUnionST_SignedTwipsMeasure(_bdbbab.Value)
			if _aabega != nil {
				return _aabega
			}
			_abebe.PosAttr = _gefcd
			continue
		}
	}
	for {
		_agced, _ebacg := d.Token()
		if _ebacg != nil {
			return _b.Errorf("parsing\u0020CT_TabStop:\u0020%s", _ebacg)
		}
		if _geeea, _fffgbb := _agced.(_d.EndElement); _fffgbb && _geeea.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fccab ST_NumberFormat) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fccab.String(), start)
}
func NewCT_Headers() *CT_Headers { _faegd := &CT_Headers{}; return _faegd }
func (_gdbgca *WdCT_GraphicFrame) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_bfede := _d.StartElement{Name: _d.Name{Local: "wp:cNvPr"}}
	e.EncodeElement(_gdbgca.CNvPr, _bfede)
	_dbfgb := _d.StartElement{Name: _d.Name{Local: "wp:cNvFrPr"}}
	e.EncodeElement(_gdbgca.CNvFrPr, _dbfgb)
	_gcbcdb := _d.StartElement{Name: _d.Name{Local: "wp:xfrm"}}
	e.EncodeElement(_gdbgca.Xfrm, _gcbcdb)
	_acbef := _d.StartElement{Name: _d.Name{Local: "a:graphic"}}
	_acbef.Attr = append(_acbef.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	e.EncodeElement(_gdbgca.Graphic, _acbef)
	if _gdbgca.ExtLst != nil {
		_gfabbfb := _d.StartElement{Name: _d.Name{Local: "wp:extLst"}}
		e.EncodeElement(_gdbgca.ExtLst, _gfabbfb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_OnOff struct {

	// On/Off Value
	ValAttr *_g.ST_OnOff
}

// Validate validates the CT_WriteProtection and its children
func (_ccaac *CT_WriteProtection) Validate() error {
	return _ccaac.ValidateWithPath("CT_WriteProtection")
}

// ValidateWithPath validates the CT_SmartTagPr and its children, prefixing error messages with path
func (_dfaec *CT_SmartTagPr) ValidateWithPath(path string) error {
	for _egceb, _fffge := range _dfaec.Attr {
		if _egacc := _fffge.ValidateWithPath(_b.Sprintf("%s\u002fAttr\u005b\u0025d\u005d", path, _egceb)); _egacc != nil {
			return _egacc
		}
	}
	return nil
}

// Validate validates the CT_SdtPr and its children
func (_fgccc *CT_SdtPr) Validate() error { return _fgccc.ValidateWithPath("CT_SdtPr") }
func (_dgbaf *ST_Border) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dgbaf = 0
	case "nil":
		*_dgbaf = 1
	case "none":
		*_dgbaf = 2
	case "single":
		*_dgbaf = 3
	case "thick":
		*_dgbaf = 4
	case "double":
		*_dgbaf = 5
	case "dotted":
		*_dgbaf = 6
	case "dashed":
		*_dgbaf = 7
	case "dotDash":
		*_dgbaf = 8
	case "dotDotDash":
		*_dgbaf = 9
	case "triple":
		*_dgbaf = 10
	case "thinThickSmallGap":
		*_dgbaf = 11
	case "thickThinSmallGap":
		*_dgbaf = 12
	case "thinThickThinSmallGap":
		*_dgbaf = 13
	case "thinThickMediumGap":
		*_dgbaf = 14
	case "thickThinMediumGap":
		*_dgbaf = 15
	case "thinThickThinMediumGap":
		*_dgbaf = 16
	case "thinThickLargeGap":
		*_dgbaf = 17
	case "thickThinLargeGap":
		*_dgbaf = 18
	case "thinThickThinLargeGap":
		*_dgbaf = 19
	case "wave":
		*_dgbaf = 20
	case "doubleWave":
		*_dgbaf = 21
	case "dashSmallGap":
		*_dgbaf = 22
	case "dashDotStroked":
		*_dgbaf = 23
	case "threeDEmboss":
		*_dgbaf = 24
	case "threeDEngrave":
		*_dgbaf = 25
	case "outset":
		*_dgbaf = 26
	case "inset":
		*_dgbaf = 27
	case "apples":
		*_dgbaf = 28
	case "archedScallops":
		*_dgbaf = 29
	case "babyPacifier":
		*_dgbaf = 30
	case "babyRattle":
		*_dgbaf = 31
	case "balloons3Colors":
		*_dgbaf = 32
	case "balloonsHotAir":
		*_dgbaf = 33
	case "basicBlackDashes":
		*_dgbaf = 34
	case "basicBlackDots":
		*_dgbaf = 35
	case "basicBlackSquares":
		*_dgbaf = 36
	case "basicThinLines":
		*_dgbaf = 37
	case "basicWhiteDashes":
		*_dgbaf = 38
	case "basicWhiteDots":
		*_dgbaf = 39
	case "basicWhiteSquares":
		*_dgbaf = 40
	case "basicWideInline":
		*_dgbaf = 41
	case "basicWideMidline":
		*_dgbaf = 42
	case "basicWideOutline":
		*_dgbaf = 43
	case "bats":
		*_dgbaf = 44
	case "birds":
		*_dgbaf = 45
	case "birdsFlight":
		*_dgbaf = 46
	case "cabins":
		*_dgbaf = 47
	case "cakeSlice":
		*_dgbaf = 48
	case "candyCorn":
		*_dgbaf = 49
	case "celticKnotwork":
		*_dgbaf = 50
	case "certificateBanner":
		*_dgbaf = 51
	case "chainLink":
		*_dgbaf = 52
	case "champagneBottle":
		*_dgbaf = 53
	case "checkedBarBlack":
		*_dgbaf = 54
	case "checkedBarColor":
		*_dgbaf = 55
	case "checkered":
		*_dgbaf = 56
	case "christmasTree":
		*_dgbaf = 57
	case "circlesLines":
		*_dgbaf = 58
	case "circlesRectangles":
		*_dgbaf = 59
	case "classicalWave":
		*_dgbaf = 60
	case "clocks":
		*_dgbaf = 61
	case "compass":
		*_dgbaf = 62
	case "confetti":
		*_dgbaf = 63
	case "confettiGrays":
		*_dgbaf = 64
	case "confettiOutline":
		*_dgbaf = 65
	case "confettiStreamers":
		*_dgbaf = 66
	case "confettiWhite":
		*_dgbaf = 67
	case "cornerTriangles":
		*_dgbaf = 68
	case "couponCutoutDashes":
		*_dgbaf = 69
	case "couponCutoutDots":
		*_dgbaf = 70
	case "crazyMaze":
		*_dgbaf = 71
	case "creaturesButterfly":
		*_dgbaf = 72
	case "creaturesFish":
		*_dgbaf = 73
	case "creaturesInsects":
		*_dgbaf = 74
	case "creaturesLadyBug":
		*_dgbaf = 75
	case "crossStitch":
		*_dgbaf = 76
	case "cup":
		*_dgbaf = 77
	case "decoArch":
		*_dgbaf = 78
	case "decoArchColor":
		*_dgbaf = 79
	case "decoBlocks":
		*_dgbaf = 80
	case "diamondsGray":
		*_dgbaf = 81
	case "doubleD":
		*_dgbaf = 82
	case "doubleDiamonds":
		*_dgbaf = 83
	case "earth1":
		*_dgbaf = 84
	case "earth2":
		*_dgbaf = 85
	case "earth3":
		*_dgbaf = 86
	case "eclipsingSquares1":
		*_dgbaf = 87
	case "eclipsingSquares2":
		*_dgbaf = 88
	case "eggsBlack":
		*_dgbaf = 89
	case "fans":
		*_dgbaf = 90
	case "film":
		*_dgbaf = 91
	case "firecrackers":
		*_dgbaf = 92
	case "flowersBlockPrint":
		*_dgbaf = 93
	case "flowersDaisies":
		*_dgbaf = 94
	case "flowersModern1":
		*_dgbaf = 95
	case "flowersModern2":
		*_dgbaf = 96
	case "flowersPansy":
		*_dgbaf = 97
	case "flowersRedRose":
		*_dgbaf = 98
	case "flowersRoses":
		*_dgbaf = 99
	case "flowersTeacup":
		*_dgbaf = 100
	case "flowersTiny":
		*_dgbaf = 101
	case "gems":
		*_dgbaf = 102
	case "gingerbreadMan":
		*_dgbaf = 103
	case "gradient":
		*_dgbaf = 104
	case "handmade1":
		*_dgbaf = 105
	case "handmade2":
		*_dgbaf = 106
	case "heartBalloon":
		*_dgbaf = 107
	case "heartGray":
		*_dgbaf = 108
	case "hearts":
		*_dgbaf = 109
	case "heebieJeebies":
		*_dgbaf = 110
	case "holly":
		*_dgbaf = 111
	case "houseFunky":
		*_dgbaf = 112
	case "hypnotic":
		*_dgbaf = 113
	case "iceCreamCones":
		*_dgbaf = 114
	case "lightBulb":
		*_dgbaf = 115
	case "lightning1":
		*_dgbaf = 116
	case "lightning2":
		*_dgbaf = 117
	case "mapPins":
		*_dgbaf = 118
	case "mapleLeaf":
		*_dgbaf = 119
	case "mapleMuffins":
		*_dgbaf = 120
	case "marquee":
		*_dgbaf = 121
	case "marqueeToothed":
		*_dgbaf = 122
	case "moons":
		*_dgbaf = 123
	case "mosaic":
		*_dgbaf = 124
	case "musicNotes":
		*_dgbaf = 125
	case "northwest":
		*_dgbaf = 126
	case "ovals":
		*_dgbaf = 127
	case "packages":
		*_dgbaf = 128
	case "palmsBlack":
		*_dgbaf = 129
	case "palmsColor":
		*_dgbaf = 130
	case "paperClips":
		*_dgbaf = 131
	case "papyrus":
		*_dgbaf = 132
	case "partyFavor":
		*_dgbaf = 133
	case "partyGlass":
		*_dgbaf = 134
	case "pencils":
		*_dgbaf = 135
	case "people":
		*_dgbaf = 136
	case "peopleWaving":
		*_dgbaf = 137
	case "peopleHats":
		*_dgbaf = 138
	case "poinsettias":
		*_dgbaf = 139
	case "postageStamp":
		*_dgbaf = 140
	case "pumpkin1":
		*_dgbaf = 141
	case "pushPinNote2":
		*_dgbaf = 142
	case "pushPinNote1":
		*_dgbaf = 143
	case "pyramids":
		*_dgbaf = 144
	case "pyramidsAbove":
		*_dgbaf = 145
	case "quadrants":
		*_dgbaf = 146
	case "rings":
		*_dgbaf = 147
	case "safari":
		*_dgbaf = 148
	case "sawtooth":
		*_dgbaf = 149
	case "sawtoothGray":
		*_dgbaf = 150
	case "scaredCat":
		*_dgbaf = 151
	case "seattle":
		*_dgbaf = 152
	case "shadowedSquares":
		*_dgbaf = 153
	case "sharksTeeth":
		*_dgbaf = 154
	case "shorebirdTracks":
		*_dgbaf = 155
	case "skyrocket":
		*_dgbaf = 156
	case "snowflakeFancy":
		*_dgbaf = 157
	case "snowflakes":
		*_dgbaf = 158
	case "sombrero":
		*_dgbaf = 159
	case "southwest":
		*_dgbaf = 160
	case "stars":
		*_dgbaf = 161
	case "starsTop":
		*_dgbaf = 162
	case "stars3d":
		*_dgbaf = 163
	case "starsBlack":
		*_dgbaf = 164
	case "starsShadowed":
		*_dgbaf = 165
	case "sun":
		*_dgbaf = 166
	case "swirligig":
		*_dgbaf = 167
	case "tornPaper":
		*_dgbaf = 168
	case "tornPaperBlack":
		*_dgbaf = 169
	case "trees":
		*_dgbaf = 170
	case "triangleParty":
		*_dgbaf = 171
	case "triangles":
		*_dgbaf = 172
	case "triangle1":
		*_dgbaf = 173
	case "triangle2":
		*_dgbaf = 174
	case "triangleCircle1":
		*_dgbaf = 175
	case "triangleCircle2":
		*_dgbaf = 176
	case "shapes1":
		*_dgbaf = 177
	case "shapes2":
		*_dgbaf = 178
	case "twistedLines1":
		*_dgbaf = 179
	case "twistedLines2":
		*_dgbaf = 180
	case "vine":
		*_dgbaf = 181
	case "waveline":
		*_dgbaf = 182
	case "weavingAngles":
		*_dgbaf = 183
	case "weavingBraid":
		*_dgbaf = 184
	case "weavingRibbon":
		*_dgbaf = 185
	case "weavingStrips":
		*_dgbaf = 186
	case "whiteFlowers":
		*_dgbaf = 187
	case "woodwork":
		*_dgbaf = 188
	case "xIllusions":
		*_dgbaf = 189
	case "zanyTriangles":
		*_dgbaf = 190
	case "zigZag":
		*_dgbaf = 191
	case "zigZagStitch":
		*_dgbaf = 192
	case "custom":
		*_dgbaf = 193
	}
	return nil
}
func (_ggeed ST_MultiLevelType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_abgde := _d.Attr{}
	_abgde.Name = name
	switch _ggeed {
	case ST_MultiLevelTypeUnset:
		_abgde.Value = ""
	case ST_MultiLevelTypeSingleLevel:
		_abgde.Value = "singleLevel"
	case ST_MultiLevelTypeMultilevel:
		_abgde.Value = "multilevel"
	case ST_MultiLevelTypeHybridMultilevel:
		_abgde.Value = "hybridMultilevel"
	}
	return _abgde, nil
}

type ST_StyleSort byte

func (_ddbgf *ST_Merge) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ddace, _aedacc := d.Token()
	if _aedacc != nil {
		return _aedacc
	}
	if _bcade, _fcbab := _ddace.(_d.EndElement); _fcbab && _bcade.Name == start.Name {
		*_ddbgf = 1
		return nil
	}
	if _begdb, _aacbd := _ddace.(_d.CharData); !_aacbd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ddace)
	} else {
		switch string(_begdb) {
		case "":
			*_ddbgf = 0
		case "continue":
			*_ddbgf = 1
		case "restart":
			*_ddbgf = 2
		}
	}
	_ddace, _aedacc = d.Token()
	if _aedacc != nil {
		return _aedacc
	}
	if _deeeg, _edagc := _ddace.(_d.EndElement); _edagc && _deeeg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ddace)
}
func (_gecga *CT_DocDefaults) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gecga.RPrDefault != nil {
		_ffbca := _d.StartElement{Name: _d.Name{Local: "w:rPrDefault"}}
		e.EncodeElement(_gecga.RPrDefault, _ffbca)
	}
	if _gecga.PPrDefault != nil {
		_efceb := _d.StartElement{Name: _d.Name{Local: "w:pPrDefault"}}
		e.EncodeElement(_gecga.PPrDefault, _efceb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bdefcf ST_View) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bdefcf.String(), start)
}
func (_cecab ST_DropCap) String() string {
	switch _cecab {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "drop"
	case 3:
		return "margin"
	}
	return ""
}
func ParseUnionST_TextScale(s string) (ST_TextScale, error) {
	_ebfea := ST_TextScale{}
	if ST_TextScalePercentPatternRe.MatchString(s) {
		_ebfea.ST_TextScalePercent = &s
	} else {
		_adbaab, _egddg := _dd.ParseFloat(s, 64)
		if _egddg != nil {
			return _ebfea, _b.Errorf("parsing\u0020%s\u0020as\u0020int:\u0020\u0025s", s, _egddg)
		}
		_ebfea.ST_TextScaleDecimal = _ga.Int64(int64(_adbaab))
	}
	return _ebfea, nil
}

// ValidateWithPath validates the WdCT_GraphicFrame and its children, prefixing error messages with path
func (_befbed *WdCT_GraphicFrame) ValidateWithPath(path string) error {
	if _cfecf := _befbed.CNvPr.ValidateWithPath(path + "\u002fCNvPr"); _cfecf != nil {
		return _cfecf
	}
	if _dbfaeg := _befbed.CNvFrPr.ValidateWithPath(path + "\u002fCNvFrPr"); _dbfaeg != nil {
		return _dbfaeg
	}
	if _gfedgd := _befbed.Xfrm.ValidateWithPath(path + "\u002fXfrm"); _gfedgd != nil {
		return _gfedgd
	}
	if _bdfge := _befbed.Graphic.ValidateWithPath(path + "\u002fGraphic"); _bdfge != nil {
		return _bdfge
	}
	if _befbed.ExtLst != nil {
		if _dbgfbd := _befbed.ExtLst.ValidateWithPath(path + "\u002fExtLst"); _dbgfbd != nil {
			return _dbgfbd
		}
	}
	return nil
}
func (_bfceg *CT_Divs) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_egefgd:
	for {
		_dbdfa, _adged := d.Token()
		if _adged != nil {
			return _adged
		}
		switch _eefdf := _dbdfa.(type) {
		case _d.StartElement:
			switch _eefdf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "div"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "div"}:
				_fded := NewCT_Div()
				if _gccb := d.DecodeElement(_fded, &_eefdf); _gccb != nil {
					return _gccb
				}
				_bfceg.Div = append(_bfceg.Div, _fded)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Divs\u0020\u0025v", _eefdf.Name)
				if _gebc := d.Skip(); _gebc != nil {
					return _gebc
				}
			}
		case _d.EndElement:
			break _egefgd
		case _d.CharData:
		}
	}
	return nil
}
func (_eacaf *CT_Frame) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _eacaf.Sz != nil {
		_afgc := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_eacaf.Sz, _afgc)
	}
	if _eacaf.Name != nil {
		_eccgd := _d.StartElement{Name: _d.Name{Local: "w:name"}}
		e.EncodeElement(_eacaf.Name, _eccgd)
	}
	if _eacaf.Title != nil {
		_eafgc := _d.StartElement{Name: _d.Name{Local: "w:title"}}
		e.EncodeElement(_eacaf.Title, _eafgc)
	}
	if _eacaf.LongDesc != nil {
		_gafc := _d.StartElement{Name: _d.Name{Local: "w:longDesc"}}
		e.EncodeElement(_eacaf.LongDesc, _gafc)
	}
	if _eacaf.SourceFileName != nil {
		_ggdgcg := _d.StartElement{Name: _d.Name{Local: "w:sourceFileName"}}
		e.EncodeElement(_eacaf.SourceFileName, _ggdgcg)
	}
	if _eacaf.MarW != nil {
		_abbfg := _d.StartElement{Name: _d.Name{Local: "w:marW"}}
		e.EncodeElement(_eacaf.MarW, _abbfg)
	}
	if _eacaf.MarH != nil {
		_ecgga := _d.StartElement{Name: _d.Name{Local: "w:marH"}}
		e.EncodeElement(_eacaf.MarH, _ecgga)
	}
	if _eacaf.Scrollbar != nil {
		_gacgd := _d.StartElement{Name: _d.Name{Local: "w:scrollbar"}}
		e.EncodeElement(_eacaf.Scrollbar, _gacgd)
	}
	if _eacaf.NoResizeAllowed != nil {
		_faffcc := _d.StartElement{Name: _d.Name{Local: "w:noResizeAllowed"}}
		e.EncodeElement(_eacaf.NoResizeAllowed, _faffcc)
	}
	if _eacaf.LinkedToFile != nil {
		_daadb := _d.StartElement{Name: _d.Name{Local: "w:linkedToFile"}}
		e.EncodeElement(_eacaf.LinkedToFile, _daadb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type WdCT_WordprocessingContentPartNonVisual struct {
	CNvPr            *_eb.CT_NonVisualDrawingProps
	CNvContentPartPr *_eb.CT_NonVisualContentPartProperties
}
type CT_StyleSort struct {

	// Style Sorting
	ValAttr ST_StyleSort
}

func (_efaaa WdST_AlignV) String() string {
	switch _efaaa {
	case 0:
		return ""
	case 1:
		return "top"
	case 2:
		return "bottom"
	case 3:
		return "center"
	case 4:
		return "inside"
	case 5:
		return "outside"
	}
	return ""
}

type WdCT_LinkedTextboxInformation struct {
	IdAttr  uint16
	SeqAttr uint16
	ExtLst  *_eb.CT_OfficeArtExtensionList
}

// Validate validates the CT_LsdException and its children
func (_geaegg *CT_LsdException) Validate() error { return _geaegg.ValidateWithPath("CT_LsdException") }

// Validate validates the CT_CustomXmlPr and its children
func (_bcbb *CT_CustomXmlPr) Validate() error { return _bcbb.ValidateWithPath("CT_CustomXmlPr") }
func (_fgbcc *CT_DocPartPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgbcc.Name = NewCT_DocPartName()
_beeeg:
	for {
		_cgffe, _dbda := d.Token()
		if _dbda != nil {
			return _dbda
		}
		switch _fbbfb := _cgffe.(type) {
		case _d.StartElement:
			switch _fbbfb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "name"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "name"}:
				if _gdfa := d.DecodeElement(_fgbcc.Name, &_fbbfb); _gdfa != nil {
					return _gdfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "style"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "style"}:
				_fgbcc.Style = NewCT_String()
				if _eacga := d.DecodeElement(_fgbcc.Style, &_fbbfb); _eacga != nil {
					return _eacga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "category"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "category"}:
				_fgbcc.Category = NewCT_DocPartCategory()
				if _eege := d.DecodeElement(_fgbcc.Category, &_fbbfb); _eege != nil {
					return _eege
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "types"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "types"}:
				_fgbcc.Types = NewCT_DocPartTypes()
				if _dcggc := d.DecodeElement(_fgbcc.Types, &_fbbfb); _dcggc != nil {
					return _dcggc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "behaviors"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "behaviors"}:
				_fgbcc.Behaviors = NewCT_DocPartBehaviors()
				if _dfccf := d.DecodeElement(_fgbcc.Behaviors, &_fbbfb); _dfccf != nil {
					return _dfccf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "description"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "description"}:
				_fgbcc.Description = NewCT_String()
				if _gdff := d.DecodeElement(_fgbcc.Description, &_fbbfb); _gdff != nil {
					return _gdff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "guid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "guid"}:
				_fgbcc.Guid = NewCT_Guid()
				if _gcbga := d.DecodeElement(_fgbcc.Guid, &_fbbfb); _gcbga != nil {
					return _gcbga
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DocPartPr\u0020\u0025v", _fbbfb.Name)
				if _ccaaf := d.Skip(); _ccaaf != nil {
					return _ccaaf
				}
			}
		case _d.EndElement:
			break _beeeg
		case _d.CharData:
		}
	}
	return nil
}

type CT_TcPrInner struct {

	// Table Cell Conditional Formatting
	CnfStyle *CT_Cnf

	// Preferred Table Cell Width
	TcW *CT_TblWidth

	// Grid Columns Spanned by Current Table Cell
	GridSpan *CT_DecimalNumber

	// Horizontally Merged Cell
	HMerge *CT_HMerge

	// Vertically Merged Cell
	VMerge *CT_VMerge

	// Table Cell Borders
	TcBorders *CT_TcBorders

	// Table Cell Shading
	Shd *CT_Shd

	// Don't Wrap Cell Content
	NoWrap *CT_OnOff

	// Single Table Cell Margins
	TcMar *CT_TcMar

	// Table Cell Text Flow Direction
	TextDirection *CT_TextDirection

	// Fit Text Within Cell
	TcFitText *CT_OnOff

	// Table Cell Vertical Alignment
	VAlign *CT_VerticalJc

	// Ignore End Of Cell Marker In Row Height Calculation
	HideMark *CT_OnOff

	// Header Cells Associated With Table Cell
	Headers *CT_Headers

	// Table Cell Insertion
	CellIns *CT_TrackChange

	// Table Cell Deletion
	CellDel *CT_TrackChange

	// Vertically Merged/Split Table Cells
	CellMerge *CT_CellMergeTrackChange
}
type CT_FFStatusText struct {

	// Status Text Type
	TypeAttr ST_InfoTextType

	// Status Text Value
	ValAttr *string
}

func (_dgebfb *CT_FramePr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fagge := range start.Attr {
		if _fagge.Name.Local == "hAnchor" {
			_dgebfb.HAnchorAttr.UnmarshalXMLAttr(_fagge)
			continue
		}
		if _fagge.Name.Local == "vAnchor" {
			_dgebfb.VAnchorAttr.UnmarshalXMLAttr(_fagge)
			continue
		}
		if _fagge.Name.Local == "lines" {
			_adfac, _gfffce := _dd.ParseInt(_fagge.Value, 10, 64)
			if _gfffce != nil {
				return _gfffce
			}
			_dgebfb.LinesAttr = &_adfac
			continue
		}
		if _fagge.Name.Local == "h" {
			_fffda, _fddge := ParseUnionST_TwipsMeasure(_fagge.Value)
			if _fddge != nil {
				return _fddge
			}
			_dgebfb.HAttr = &_fffda
			continue
		}
		if _fagge.Name.Local == "vSpace" {
			_bcab, _ddefg := ParseUnionST_TwipsMeasure(_fagge.Value)
			if _ddefg != nil {
				return _ddefg
			}
			_dgebfb.VSpaceAttr = &_bcab
			continue
		}
		if _fagge.Name.Local == "hSpace" {
			_acead, _adfec := ParseUnionST_TwipsMeasure(_fagge.Value)
			if _adfec != nil {
				return _adfec
			}
			_dgebfb.HSpaceAttr = &_acead
			continue
		}
		if _fagge.Name.Local == "wrap" {
			_dgebfb.WrapAttr.UnmarshalXMLAttr(_fagge)
			continue
		}
		if _fagge.Name.Local == "dropCap" {
			_dgebfb.DropCapAttr.UnmarshalXMLAttr(_fagge)
			continue
		}
		if _fagge.Name.Local == "w" {
			_ddddac, _cgabc := ParseUnionST_TwipsMeasure(_fagge.Value)
			if _cgabc != nil {
				return _cgabc
			}
			_dgebfb.WAttr = &_ddddac
			continue
		}
		if _fagge.Name.Local == "x" {
			_bgcb, _faca := ParseUnionST_SignedTwipsMeasure(_fagge.Value)
			if _faca != nil {
				return _faca
			}
			_dgebfb.XAttr = &_bgcb
			continue
		}
		if _fagge.Name.Local == "xAlign" {
			_dgebfb.XAlignAttr.UnmarshalXMLAttr(_fagge)
			continue
		}
		if _fagge.Name.Local == "y" {
			_daded, _dbgga := ParseUnionST_SignedTwipsMeasure(_fagge.Value)
			if _dbgga != nil {
				return _dbgga
			}
			_dgebfb.YAttr = &_daded
			continue
		}
		if _fagge.Name.Local == "yAlign" {
			_dgebfb.YAlignAttr.UnmarshalXMLAttr(_fagge)
			continue
		}
		if _fagge.Name.Local == "hRule" {
			_dgebfb.HRuleAttr.UnmarshalXMLAttr(_fagge)
			continue
		}
		if _fagge.Name.Local == "anchorLock" {
			_adba, _cdcc := ParseUnionST_OnOff(_fagge.Value)
			if _cdcc != nil {
				return _cdcc
			}
			_dgebfb.AnchorLockAttr = &_adba
			continue
		}
	}
	for {
		_febda, _fged := d.Token()
		if _fged != nil {
			return _b.Errorf("parsing\u0020CT_FramePr:\u0020%s", _fged)
		}
		if _ebeec, _dgade := _febda.(_d.EndElement); _dgade && _ebeec.Name == start.Name {
			break
		}
	}
	return nil
}

type WdWsp struct{ WdCT_WordprocessingShape }

func (_dcaac *EG_RangeMarkupElements) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gfdfea:
	for {
		_fdbdcf, _dgcba := d.Token()
		if _dgcba != nil {
			return _dgcba
		}
		switch _efgbb := _fdbdcf.(type) {
		case _d.StartElement:
			switch _efgbb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_dcaac.BookmarkStart = NewCT_Bookmark()
				if _bbfde := d.DecodeElement(_dcaac.BookmarkStart, &_efgbb); _bbfde != nil {
					return _bbfde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_dcaac.BookmarkEnd = NewCT_MarkupRange()
				if _cddcc := d.DecodeElement(_dcaac.BookmarkEnd, &_efgbb); _cddcc != nil {
					return _cddcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_dcaac.MoveFromRangeStart = NewCT_MoveBookmark()
				if _ffadg := d.DecodeElement(_dcaac.MoveFromRangeStart, &_efgbb); _ffadg != nil {
					return _ffadg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_dcaac.MoveFromRangeEnd = NewCT_MarkupRange()
				if _deggee := d.DecodeElement(_dcaac.MoveFromRangeEnd, &_efgbb); _deggee != nil {
					return _deggee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dcaac.MoveToRangeStart = NewCT_MoveBookmark()
				if _ffbec := d.DecodeElement(_dcaac.MoveToRangeStart, &_efgbb); _ffbec != nil {
					return _ffbec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_dcaac.MoveToRangeEnd = NewCT_MarkupRange()
				if _egabgd := d.DecodeElement(_dcaac.MoveToRangeEnd, &_efgbb); _egabgd != nil {
					return _egabgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_dcaac.CommentRangeStart = NewCT_MarkupRange()
				if _abafbb := d.DecodeElement(_dcaac.CommentRangeStart, &_efgbb); _abafbb != nil {
					return _abafbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_dcaac.CommentRangeEnd = NewCT_MarkupRange()
				if _bffee := d.DecodeElement(_dcaac.CommentRangeEnd, &_efgbb); _bffee != nil {
					return _bffee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_dcaac.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _faedde := d.DecodeElement(_dcaac.CustomXmlInsRangeStart, &_efgbb); _faedde != nil {
					return _faedde
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_dcaac.CustomXmlInsRangeEnd = NewCT_Markup()
				if _caeaa := d.DecodeElement(_dcaac.CustomXmlInsRangeEnd, &_efgbb); _caeaa != nil {
					return _caeaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_dcaac.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _ggcfa := d.DecodeElement(_dcaac.CustomXmlDelRangeStart, &_efgbb); _ggcfa != nil {
					return _ggcfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_dcaac.CustomXmlDelRangeEnd = NewCT_Markup()
				if _bbbag := d.DecodeElement(_dcaac.CustomXmlDelRangeEnd, &_efgbb); _bbbag != nil {
					return _bbbag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_dcaac.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _bcdedg := d.DecodeElement(_dcaac.CustomXmlMoveFromRangeStart, &_efgbb); _bcdedg != nil {
					return _bcdedg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_dcaac.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _bgfccf := d.DecodeElement(_dcaac.CustomXmlMoveFromRangeEnd, &_efgbb); _bgfccf != nil {
					return _bgfccf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_dcaac.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _cgbgdd := d.DecodeElement(_dcaac.CustomXmlMoveToRangeStart, &_efgbb); _cgbgdd != nil {
					return _cgbgdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_dcaac.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _fegafd := d.DecodeElement(_dcaac.CustomXmlMoveToRangeEnd, &_efgbb); _fegafd != nil {
					return _fegafd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_RangeMarkupElements\u0020\u0025v", _efgbb.Name)
				if _cacdba := d.Skip(); _cacdba != nil {
					return _cacdba
				}
			}
		case _d.EndElement:
			break _gfdfea
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Charset and its children
func (_cfag *CT_Charset) Validate() error { return _cfag.ValidateWithPath("CT_Charset") }

// Validate validates the Numbering and its children
func (_gfeea *Numbering) Validate() error { return _gfeea.ValidateWithPath("Numbering") }

// Validate validates the CT_HdrFtr and its children
func (_cbddb *CT_HdrFtr) Validate() error { return _cbddb.ValidateWithPath("CT_HdrFtr") }
func (_acdebg ST_PageBorderZOrder) ValidateWithPath(path string) error {
	switch _acdebg {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_acdebg))
	}
	return nil
}

type CT_NumLvl struct {

	// Numbering Level ID
	IlvlAttr int64

	// Numbering Level Starting Value Override
	StartOverride *CT_DecimalNumber

	// Numbering Level Override Definition
	Lvl *CT_Lvl
}
type CT_TcPrChange struct {
	AuthorAttr string
	DateAttr   *_c.Time

	// Annotation Identifier
	IdAttr int64
	TcPr   *CT_TcPrInner
}

func (_cgeed ST_VerticalJc) ValidateWithPath(path string) error {
	switch _cgeed {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cgeed))
	}
	return nil
}
func (_bbeda *CT_GlossaryDocument) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_adbc:
	for {
		_ceed, _bcgdc := d.Token()
		if _bcgdc != nil {
			return _bcgdc
		}
		switch _eadae := _ceed.(type) {
		case _d.StartElement:
			switch _eadae.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "background"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "background"}:
				_bbeda.Background = NewCT_Background()
				if _cbgec := d.DecodeElement(_bbeda.Background, &_eadae); _cbgec != nil {
					return _cbgec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docParts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docParts"}:
				_bbeda.DocParts = NewCT_DocParts()
				if _cacc := d.DecodeElement(_bbeda.DocParts, &_eadae); _cacc != nil {
					return _cacc
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_GlossaryDocument\u0020\u0025v", _eadae.Name)
				if _gggfe := d.Skip(); _gggfe != nil {
					return _gggfe
				}
			}
		case _d.EndElement:
			break _adbc
		case _d.CharData:
		}
	}
	return nil
}
func (_bgbfc *EG_ContentBlockContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gggcf:
	for {
		_dadbf, _adeee := d.Token()
		if _adeee != nil {
			return _adeee
		}
		switch _fcbae := _dadbf.(type) {
		case _d.StartElement:
			switch _fcbae.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_bgbfc.CustomXml = NewCT_CustomXmlBlock()
				if _ddaaf := d.DecodeElement(_bgbfc.CustomXml, &_fcbae); _ddaaf != nil {
					return _ddaaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_bgbfc.Sdt = NewCT_SdtBlock()
				if _eaaef := d.DecodeElement(_bgbfc.Sdt, &_fcbae); _eaaef != nil {
					return _eaaef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_gbfag := NewCT_P()
				if _eagdf := d.DecodeElement(_gbfag, &_fcbae); _eagdf != nil {
					return _eagdf
				}
				_bgbfc.P = append(_bgbfc.P, _gbfag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_gegcc := NewCT_Tbl()
				if _cegeg := d.DecodeElement(_gegcc, &_fcbae); _cegeg != nil {
					return _cegeg
				}
				_bgbfc.Tbl = append(_bgbfc.Tbl, _gegcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_cebce := NewEG_RunLevelElts()
				_cebce.ProofErr = NewCT_ProofErr()
				if _bbfgc := d.DecodeElement(_cebce.ProofErr, &_fcbae); _bbfgc != nil {
					return _bbfgc
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _cebce)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_gebde := NewEG_RunLevelElts()
				_gebde.PermStart = NewCT_PermStart()
				if _adadbb := d.DecodeElement(_gebde.PermStart, &_fcbae); _adadbb != nil {
					return _adadbb
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _gebde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_eddcg := NewEG_RunLevelElts()
				_eddcg.PermEnd = NewCT_Perm()
				if _agcge := d.DecodeElement(_eddcg.PermEnd, &_fcbae); _agcge != nil {
					return _agcge
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _eddcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_affga := NewEG_RunLevelElts()
				_affga.Ins = NewCT_RunTrackChange()
				if _cadefb := d.DecodeElement(_affga.Ins, &_fcbae); _cadefb != nil {
					return _cadefb
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _affga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ddbab := NewEG_RunLevelElts()
				_ddbab.Del = NewCT_RunTrackChange()
				if _adddad := d.DecodeElement(_ddbab.Del, &_fcbae); _adddad != nil {
					return _adddad
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _ddbab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_ffbda := NewEG_RunLevelElts()
				_ffbda.MoveFrom = NewCT_RunTrackChange()
				if _aceed := d.DecodeElement(_ffbda.MoveFrom, &_fcbae); _aceed != nil {
					return _aceed
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _ffbda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_efabad := NewEG_RunLevelElts()
				_efabad.MoveTo = NewCT_RunTrackChange()
				if _dcgcc := d.DecodeElement(_efabad.MoveTo, &_fcbae); _dcgcc != nil {
					return _dcgcc
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _efabad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_badda := NewEG_RunLevelElts()
				_ffceff := NewEG_RangeMarkupElements()
				_ffceff.BookmarkStart = NewCT_Bookmark()
				if _cabag := d.DecodeElement(_ffceff.BookmarkStart, &_fcbae); _cabag != nil {
					return _cabag
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _badda)
				_badda.EG_RangeMarkupElements = append(_badda.EG_RangeMarkupElements, _ffceff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_adcge := NewEG_RunLevelElts()
				_cagfg := NewEG_RangeMarkupElements()
				_cagfg.BookmarkEnd = NewCT_MarkupRange()
				if _afgabb := d.DecodeElement(_cagfg.BookmarkEnd, &_fcbae); _afgabb != nil {
					return _afgabb
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _adcge)
				_adcge.EG_RangeMarkupElements = append(_adcge.EG_RangeMarkupElements, _cagfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_bdbcc := NewEG_RunLevelElts()
				_cgfbae := NewEG_RangeMarkupElements()
				_cgfbae.MoveFromRangeStart = NewCT_MoveBookmark()
				if _bcaead := d.DecodeElement(_cgfbae.MoveFromRangeStart, &_fcbae); _bcaead != nil {
					return _bcaead
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _bdbcc)
				_bdbcc.EG_RangeMarkupElements = append(_bdbcc.EG_RangeMarkupElements, _cgfbae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_dbgbf := NewEG_RunLevelElts()
				_cffbb := NewEG_RangeMarkupElements()
				_cffbb.MoveFromRangeEnd = NewCT_MarkupRange()
				if _bfaac := d.DecodeElement(_cffbb.MoveFromRangeEnd, &_fcbae); _bfaac != nil {
					return _bfaac
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _dbgbf)
				_dbgbf.EG_RangeMarkupElements = append(_dbgbf.EG_RangeMarkupElements, _cffbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_bdfffg := NewEG_RunLevelElts()
				_dffebc := NewEG_RangeMarkupElements()
				_dffebc.MoveToRangeStart = NewCT_MoveBookmark()
				if _fgdgfa := d.DecodeElement(_dffebc.MoveToRangeStart, &_fcbae); _fgdgfa != nil {
					return _fgdgfa
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _bdfffg)
				_bdfffg.EG_RangeMarkupElements = append(_bdfffg.EG_RangeMarkupElements, _dffebc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_eadge := NewEG_RunLevelElts()
				_baacd := NewEG_RangeMarkupElements()
				_baacd.MoveToRangeEnd = NewCT_MarkupRange()
				if _cedbf := d.DecodeElement(_baacd.MoveToRangeEnd, &_fcbae); _cedbf != nil {
					return _cedbf
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _eadge)
				_eadge.EG_RangeMarkupElements = append(_eadge.EG_RangeMarkupElements, _baacd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_bafcg := NewEG_RunLevelElts()
				_bfadcc := NewEG_RangeMarkupElements()
				_bfadcc.CommentRangeStart = NewCT_MarkupRange()
				if _eagaae := d.DecodeElement(_bfadcc.CommentRangeStart, &_fcbae); _eagaae != nil {
					return _eagaae
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _bafcg)
				_bafcg.EG_RangeMarkupElements = append(_bafcg.EG_RangeMarkupElements, _bfadcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_acbacb := NewEG_RunLevelElts()
				_gfdga := NewEG_RangeMarkupElements()
				_gfdga.CommentRangeEnd = NewCT_MarkupRange()
				if _bfeagg := d.DecodeElement(_gfdga.CommentRangeEnd, &_fcbae); _bfeagg != nil {
					return _bfeagg
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _acbacb)
				_acbacb.EG_RangeMarkupElements = append(_acbacb.EG_RangeMarkupElements, _gfdga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_faegde := NewEG_RunLevelElts()
				_fbegb := NewEG_RangeMarkupElements()
				_fbegb.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _aecbg := d.DecodeElement(_fbegb.CustomXmlInsRangeStart, &_fcbae); _aecbg != nil {
					return _aecbg
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _faegde)
				_faegde.EG_RangeMarkupElements = append(_faegde.EG_RangeMarkupElements, _fbegb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_dgfgg := NewEG_RunLevelElts()
				_ddeab := NewEG_RangeMarkupElements()
				_ddeab.CustomXmlInsRangeEnd = NewCT_Markup()
				if _ggfgcf := d.DecodeElement(_ddeab.CustomXmlInsRangeEnd, &_fcbae); _ggfgcf != nil {
					return _ggfgcf
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _dgfgg)
				_dgfgg.EG_RangeMarkupElements = append(_dgfgg.EG_RangeMarkupElements, _ddeab)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_ddfgbc := NewEG_RunLevelElts()
				_cgdca := NewEG_RangeMarkupElements()
				_cgdca.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _ccaaac := d.DecodeElement(_cgdca.CustomXmlDelRangeStart, &_fcbae); _ccaaac != nil {
					return _ccaaac
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _ddfgbc)
				_ddfgbc.EG_RangeMarkupElements = append(_ddfgbc.EG_RangeMarkupElements, _cgdca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_bcbcg := NewEG_RunLevelElts()
				_bdcgec := NewEG_RangeMarkupElements()
				_bdcgec.CustomXmlDelRangeEnd = NewCT_Markup()
				if _aadgb := d.DecodeElement(_bdcgec.CustomXmlDelRangeEnd, &_fcbae); _aadgb != nil {
					return _aadgb
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _bcbcg)
				_bcbcg.EG_RangeMarkupElements = append(_bcbcg.EG_RangeMarkupElements, _bdcgec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_abfdd := NewEG_RunLevelElts()
				_gbccd := NewEG_RangeMarkupElements()
				_gbccd.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _cfccd := d.DecodeElement(_gbccd.CustomXmlMoveFromRangeStart, &_fcbae); _cfccd != nil {
					return _cfccd
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _abfdd)
				_abfdd.EG_RangeMarkupElements = append(_abfdd.EG_RangeMarkupElements, _gbccd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_dbgccc := NewEG_RunLevelElts()
				_fdaaa := NewEG_RangeMarkupElements()
				_fdaaa.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _dbggg := d.DecodeElement(_fdaaa.CustomXmlMoveFromRangeEnd, &_fcbae); _dbggg != nil {
					return _dbggg
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _dbgccc)
				_dbgccc.EG_RangeMarkupElements = append(_dbgccc.EG_RangeMarkupElements, _fdaaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_fafbg := NewEG_RunLevelElts()
				_aacdb := NewEG_RangeMarkupElements()
				_aacdb.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bfgea := d.DecodeElement(_aacdb.CustomXmlMoveToRangeStart, &_fcbae); _bfgea != nil {
					return _bfgea
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _fafbg)
				_fafbg.EG_RangeMarkupElements = append(_fafbg.EG_RangeMarkupElements, _aacdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_bggfe := NewEG_RunLevelElts()
				_ccdgg := NewEG_RangeMarkupElements()
				_ccdgg.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _egagad := d.DecodeElement(_ccdgg.CustomXmlMoveToRangeEnd, &_fcbae); _egagad != nil {
					return _egagad
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _bggfe)
				_bggfe.EG_RangeMarkupElements = append(_bggfe.EG_RangeMarkupElements, _ccdgg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_cdgfc := NewEG_RunLevelElts()
				_cadba := NewEG_MathContent()
				_cadba.OMathPara = _f.NewOMathPara()
				if _bagaee := d.DecodeElement(_cadba.OMathPara, &_fcbae); _bagaee != nil {
					return _bagaee
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _cdgfc)
				_cdgfc.EG_MathContent = append(_cdgfc.EG_MathContent, _cadba)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_bdaggf := NewEG_RunLevelElts()
				_ggaeae := NewEG_MathContent()
				_ggaeae.OMath = _f.NewOMath()
				if _cbbcde := d.DecodeElement(_ggaeae.OMath, &_fcbae); _cbbcde != nil {
					return _cbbcde
				}
				_bgbfc.EG_RunLevelElts = append(_bgbfc.EG_RunLevelElts, _bdaggf)
				_bdaggf.EG_MathContent = append(_bdaggf.EG_MathContent, _ggaeae)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_ContentBlockContent\u0020\u0025v", _fcbae.Name)
				if _gdacc := d.Skip(); _gdacc != nil {
					return _gdacc
				}
			}
		case _d.EndElement:
			break _gggcf
		case _d.CharData:
		}
	}
	return nil
}

const (
	ST_ThemeUnset         ST_Theme = 0
	ST_ThemeMajorEastAsia ST_Theme = 1
	ST_ThemeMajorBidi     ST_Theme = 2
	ST_ThemeMajorAscii    ST_Theme = 3
	ST_ThemeMajorHAnsi    ST_Theme = 4
	ST_ThemeMinorEastAsia ST_Theme = 5
	ST_ThemeMinorBidi     ST_Theme = 6
	ST_ThemeMinorAscii    ST_Theme = 7
	ST_ThemeMinorHAnsi    ST_Theme = 8
)

// Validate validates the CT_WebSettings and its children
func (_ddacd *CT_WebSettings) Validate() error { return _ddacd.ValidateWithPath("CT_WebSettings") }

// Validate validates the CT_RunTrackChange and its children
func (_eadfd *CT_RunTrackChange) Validate() error {
	return _eadfd.ValidateWithPath("CT_RunTrackChange")
}

// Validate validates the CT_FFDDList and its children
func (_bagfc *CT_FFDDList) Validate() error { return _bagfc.ValidateWithPath("CT_FFDDList") }

// ValidateWithPath validates the Endnotes and its children, prefixing error messages with path
func (_baeae *Endnotes) ValidateWithPath(path string) error {
	if _aaggb := _baeae.CT_Endnotes.ValidateWithPath(path); _aaggb != nil {
		return _aaggb
	}
	return nil
}
func (_egbbcg *ST_InfoTextType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ceefe, _bagcd := d.Token()
	if _bagcd != nil {
		return _bagcd
	}
	if _fbgfaf, _ecebb := _ceefe.(_d.EndElement); _ecebb && _fbgfaf.Name == start.Name {
		*_egbbcg = 1
		return nil
	}
	if _eacad, _dfafgf := _ceefe.(_d.CharData); !_dfafgf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ceefe)
	} else {
		switch string(_eacad) {
		case "":
			*_egbbcg = 0
		case "text":
			*_egbbcg = 1
		case "autoText":
			*_egbbcg = 2
		}
	}
	_ceefe, _bagcd = d.Token()
	if _bagcd != nil {
		return _bagcd
	}
	if _bcdff, _bbdadg := _ceefe.(_d.EndElement); _bbdadg && _bcdff.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ceefe)
}
func NewCT_CustomXmlCell() *CT_CustomXmlCell { _eegga := &CT_CustomXmlCell{}; return _eegga }

type CT_FramePr struct {

	// Drop Cap Frame
	DropCapAttr ST_DropCap

	// Drop Cap Vertical Height in Lines
	LinesAttr *int64

	// Frame Width
	WAttr *_g.ST_TwipsMeasure

	// Frame Height
	HAttr *_g.ST_TwipsMeasure

	// Vertical Frame Padding
	VSpaceAttr *_g.ST_TwipsMeasure

	// Horizontal Frame Padding
	HSpaceAttr *_g.ST_TwipsMeasure

	// Text Wrapping Around Frame
	WrapAttr ST_Wrap

	// Frame Horizontal Positioning Base
	HAnchorAttr ST_HAnchor

	// Frame Vertical Positioning Base
	VAnchorAttr ST_VAnchor

	// Absolute Horizontal Position
	XAttr *ST_SignedTwipsMeasure

	// Relative Horizontal Position
	XAlignAttr _g.ST_XAlign

	// Absolute Vertical Position
	YAttr *ST_SignedTwipsMeasure

	// Relative Vertical Position
	YAlignAttr _g.ST_YAlign

	// Frame Height Type
	HRuleAttr ST_HeightRule

	// Lock Frame Anchor to Paragraph
	AnchorLockAttr *_g.ST_OnOff
}

func (_gabage ST_DecimalNumberOrPercent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gabage.ST_UnqualifiedPercentage != nil {
		e.EncodeToken(_d.CharData(_b.Sprintf("\u0025d", *_gabage.ST_UnqualifiedPercentage)))
	}
	if _gabage.ST_Percentage != nil {
		e.EncodeToken(_d.CharData(*_gabage.ST_Percentage))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}
func (_eedaa ST_FtnPos) String() string {
	switch _eedaa {
	case 0:
		return ""
	case 1:
		return "pageBottom"
	case 2:
		return "beneathText"
	case 3:
		return "sectEnd"
	case 4:
		return "docEnd"
	}
	return ""
}

type ST_HexColorAuto byte

func (_aeecbd ST_TblWidth) String() string {
	switch _aeecbd {
	case 0:
		return ""
	case 1:
		return "nil"
	case 2:
		return "pct"
	case 3:
		return "dxa"
	case 4:
		return "auto"
	}
	return ""
}

type ST_PTabLeader byte

// ValidateWithPath validates the CT_TcPr and its children, prefixing error messages with path
func (_bffabd *CT_TcPr) ValidateWithPath(path string) error {
	if _bffabd.CnfStyle != nil {
		if _fcbdg := _bffabd.CnfStyle.ValidateWithPath(path + "\u002fCnfStyle"); _fcbdg != nil {
			return _fcbdg
		}
	}
	if _bffabd.TcW != nil {
		if _dbdbg := _bffabd.TcW.ValidateWithPath(path + "\u002fTcW"); _dbdbg != nil {
			return _dbdbg
		}
	}
	if _bffabd.GridSpan != nil {
		if _aecgc := _bffabd.GridSpan.ValidateWithPath(path + "\u002fGridSpan"); _aecgc != nil {
			return _aecgc
		}
	}
	if _bffabd.HMerge != nil {
		if _edbge := _bffabd.HMerge.ValidateWithPath(path + "\u002fHMerge"); _edbge != nil {
			return _edbge
		}
	}
	if _bffabd.VMerge != nil {
		if _beeae := _bffabd.VMerge.ValidateWithPath(path + "\u002fVMerge"); _beeae != nil {
			return _beeae
		}
	}
	if _bffabd.TcBorders != nil {
		if _gdfgdg := _bffabd.TcBorders.ValidateWithPath(path + "\u002fTcBorders"); _gdfgdg != nil {
			return _gdfgdg
		}
	}
	if _bffabd.Shd != nil {
		if _cfcgb := _bffabd.Shd.ValidateWithPath(path + "\u002fShd"); _cfcgb != nil {
			return _cfcgb
		}
	}
	if _bffabd.NoWrap != nil {
		if _geegg := _bffabd.NoWrap.ValidateWithPath(path + "\u002fNoWrap"); _geegg != nil {
			return _geegg
		}
	}
	if _bffabd.TcMar != nil {
		if _cccag := _bffabd.TcMar.ValidateWithPath(path + "\u002fTcMar"); _cccag != nil {
			return _cccag
		}
	}
	if _bffabd.TextDirection != nil {
		if _ebgebg := _bffabd.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _ebgebg != nil {
			return _ebgebg
		}
	}
	if _bffabd.TcFitText != nil {
		if _gfaea := _bffabd.TcFitText.ValidateWithPath(path + "\u002fTcFitText"); _gfaea != nil {
			return _gfaea
		}
	}
	if _bffabd.VAlign != nil {
		if _fcefg := _bffabd.VAlign.ValidateWithPath(path + "\u002fVAlign"); _fcefg != nil {
			return _fcefg
		}
	}
	if _bffabd.HideMark != nil {
		if _fbaee := _bffabd.HideMark.ValidateWithPath(path + "\u002fHideMark"); _fbaee != nil {
			return _fbaee
		}
	}
	if _bffabd.Headers != nil {
		if _fggbc := _bffabd.Headers.ValidateWithPath(path + "\u002fHeaders"); _fggbc != nil {
			return _fggbc
		}
	}
	if _bffabd.CellIns != nil {
		if _cbddba := _bffabd.CellIns.ValidateWithPath(path + "\u002fCellIns"); _cbddba != nil {
			return _cbddba
		}
	}
	if _bffabd.CellDel != nil {
		if _afdecg := _bffabd.CellDel.ValidateWithPath(path + "\u002fCellDel"); _afdecg != nil {
			return _afdecg
		}
	}
	if _bffabd.CellMerge != nil {
		if _edaec := _bffabd.CellMerge.ValidateWithPath(path + "\u002fCellMerge"); _edaec != nil {
			return _edaec
		}
	}
	if _bffabd.TcPrChange != nil {
		if _dabgb := _bffabd.TcPrChange.ValidateWithPath(path + "/TcPrChange"); _dabgb != nil {
			return _dabgb
		}
	}
	return nil
}
func (_eaaecc ST_HeightRule) String() string {
	switch _eaaecc {
	case 0:
		return ""
	case 1:
		return "auto"
	case 2:
		return "exact"
	case 3:
		return "atLeast"
	}
	return ""
}

type CT_Styles struct {

	// Document Default Paragraph and Run Properties
	DocDefaults *CT_DocDefaults

	// Latent Style Information
	LatentStyles *CT_LatentStyles

	// Style Definition
	Style []*CT_Style
}

// ValidateWithPath validates the Comments and its children, prefixing error messages with path
func (_gdabcb *Comments) ValidateWithPath(path string) error {
	if _gfafa := _gdabcb.CT_Comments.ValidateWithPath(path); _gfafa != nil {
		return _gfafa
	}
	return nil
}

// Validate validates the CT_Control and its children
func (_gdfe *CT_Control) Validate() error { return _gdfe.ValidateWithPath("CT_Control") }
func (_baacdd ST_SignedHpsMeasure) String() string {
	if _baacdd.Int64 != nil {
		return _b.Sprintf("\u0025v", *_baacdd.Int64)
	}
	if _baacdd.ST_UniversalMeasure != nil {
		return _b.Sprintf("\u0025v", *_baacdd.ST_UniversalMeasure)
	}
	return ""
}
func (_bebac *CT_Font) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:name"}, Value: _b.Sprintf("\u0025v", _bebac.NameAttr)})
	e.EncodeToken(start)
	if _bebac.AltName != nil {
		_gebce := _d.StartElement{Name: _d.Name{Local: "w:altName"}}
		e.EncodeElement(_bebac.AltName, _gebce)
	}
	if _bebac.Panose1 != nil {
		_beec := _d.StartElement{Name: _d.Name{Local: "w:panose1"}}
		e.EncodeElement(_bebac.Panose1, _beec)
	}
	if _bebac.Charset != nil {
		_fccfa := _d.StartElement{Name: _d.Name{Local: "w:charset"}}
		e.EncodeElement(_bebac.Charset, _fccfa)
	}
	if _bebac.Family != nil {
		_bbebc := _d.StartElement{Name: _d.Name{Local: "w:family"}}
		e.EncodeElement(_bebac.Family, _bbebc)
	}
	if _bebac.NotTrueType != nil {
		_bgcef := _d.StartElement{Name: _d.Name{Local: "w:notTrueType"}}
		e.EncodeElement(_bebac.NotTrueType, _bgcef)
	}
	if _bebac.Pitch != nil {
		_cfaaf := _d.StartElement{Name: _d.Name{Local: "w:pitch"}}
		e.EncodeElement(_bebac.Pitch, _cfaaf)
	}
	if _bebac.Sig != nil {
		_ecbad := _d.StartElement{Name: _d.Name{Local: "w:sig"}}
		e.EncodeElement(_bebac.Sig, _ecbad)
	}
	if _bebac.EmbedRegular != nil {
		_aebec := _d.StartElement{Name: _d.Name{Local: "w:embedRegular"}}
		e.EncodeElement(_bebac.EmbedRegular, _aebec)
	}
	if _bebac.EmbedBold != nil {
		_dggfg := _d.StartElement{Name: _d.Name{Local: "w:embedBold"}}
		e.EncodeElement(_bebac.EmbedBold, _dggfg)
	}
	if _bebac.EmbedItalic != nil {
		_ccaae := _d.StartElement{Name: _d.Name{Local: "w:embedItalic"}}
		e.EncodeElement(_bebac.EmbedItalic, _ccaae)
	}
	if _bebac.EmbedBoldItalic != nil {
		_edab := _d.StartElement{Name: _d.Name{Local: "w:embedBoldItalic"}}
		e.EncodeElement(_bebac.EmbedBoldItalic, _edab)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_abdfb *ST_Em) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_daaga, _cbcde := d.Token()
	if _cbcde != nil {
		return _cbcde
	}
	if _geabbe, _ceaadb := _daaga.(_d.EndElement); _ceaadb && _geabbe.Name == start.Name {
		*_abdfb = 1
		return nil
	}
	if _efddag, _dbbaab := _daaga.(_d.CharData); !_dbbaab {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _daaga)
	} else {
		switch string(_efddag) {
		case "":
			*_abdfb = 0
		case "none":
			*_abdfb = 1
		case "dot":
			*_abdfb = 2
		case "comma":
			*_abdfb = 3
		case "circle":
			*_abdfb = 4
		case "underDot":
			*_abdfb = 5
		}
	}
	_daaga, _cbcde = d.Token()
	if _cbcde != nil {
		return _cbcde
	}
	if _dbdfe, _afabd := _daaga.(_d.EndElement); _afabd && _dbdfe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _daaga)
}
func (_egfdaa *EG_PContentBase) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cfbgb:
	for {
		_cfcadbg, _dddcba := d.Token()
		if _dddcba != nil {
			return _dddcba
		}
		switch _dbaag := _cfcadbg.(type) {
		case _d.StartElement:
			switch _dbaag.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_egfdaa.CustomXml = NewCT_CustomXmlRun()
				if _dbeage := d.DecodeElement(_egfdaa.CustomXml, &_dbaag); _dbeage != nil {
					return _dbeage
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_bgfbf := NewCT_SimpleField()
				if _ecgbdg := d.DecodeElement(_bgfbf, &_dbaag); _ecgbdg != nil {
					return _ecgbdg
				}
				_egfdaa.FldSimple = append(_egfdaa.FldSimple, _bgfbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_egfdaa.Hyperlink = NewCT_Hyperlink()
				if _ddeba := d.DecodeElement(_egfdaa.Hyperlink, &_dbaag); _ddeba != nil {
					return _ddeba
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_PContentBase\u0020\u0025v", _dbaag.Name)
				if _adddf := d.Skip(); _adddf != nil {
					return _adddf
				}
			}
		case _d.EndElement:
			break _cfbgb
		case _d.CharData:
		}
	}
	return nil
}
func (_abbcf ST_PTabLeader) ValidateWithPath(path string) error {
	switch _abbcf {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_abbcf))
	}
	return nil
}

// ValidateWithPath validates the CT_AutoCaptions and its children, prefixing error messages with path
func (_bde *CT_AutoCaptions) ValidateWithPath(path string) error {
	for _cgga, _cdb := range _bde.AutoCaption {
		if _ced := _cdb.ValidateWithPath(_b.Sprintf("\u0025s\u002fAutoCaption\u005b\u0025d\u005d", path, _cgga)); _ced != nil {
			return _ced
		}
	}
	return nil
}

// Validate validates the CT_String and its children
func (_ggbcfe *CT_String) Validate() error { return _ggbcfe.ValidateWithPath("CT_String") }

// Validate validates the CT_AutoCaption and its children
func (_debc *CT_AutoCaption) Validate() error { return _debc.ValidateWithPath("CT_AutoCaption") }
func (_ececdg ST_TextDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ececdg.String(), start)
}
func (_edbedg *CT_SdtDropDownList) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _edbedg.LastValueAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastValue"}, Value: _b.Sprintf("\u0025v", *_edbedg.LastValueAttr)})
	}
	e.EncodeToken(start)
	if _edbedg.ListItem != nil {
		_fdaea := _d.StartElement{Name: _d.Name{Local: "w:listItem"}}
		for _, _dfed := range _edbedg.ListItem {
			e.EncodeElement(_dfed, _fdaea)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TextDirectionUnset ST_TextDirection = 0
	ST_TextDirectionTb    ST_TextDirection = 1
	ST_TextDirectionRl    ST_TextDirection = 2
	ST_TextDirectionLr    ST_TextDirection = 3
	ST_TextDirectionTbV   ST_TextDirection = 4
	ST_TextDirectionRlV   ST_TextDirection = 5
	ST_TextDirectionLrV   ST_TextDirection = 6
	ST_TextDirectionBtLr  ST_TextDirection = 7
	ST_TextDirectionLrTb  ST_TextDirection = 8
	ST_TextDirectionLrTbV ST_TextDirection = 9
	ST_TextDirectionTbLrV ST_TextDirection = 10
	ST_TextDirectionTbRl  ST_TextDirection = 11
	ST_TextDirectionTbRlV ST_TextDirection = 12
)

func NewCT_CustomXmlPr() *CT_CustomXmlPr { _dbdd := &CT_CustomXmlPr{}; return _dbdd }
func (_dagbcf ST_SdtDateMappingType) String() string {
	switch _dagbcf {
	case 0:
		return ""
	case 1:
		return "text"
	case 2:
		return "date"
	case 3:
		return "dateTime"
	}
	return ""
}
func (_adfacg *CT_VerticalJc) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dcdgdg, _fagac := _adfacg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _fagac != nil {
		return _fagac
	}
	start.Attr = append(start.Attr, _dcdgdg)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_String struct {

	// String Value
	ValAttr string
}
type CT_ColorSchemeMapping struct {

	// Background 1 Theme Color Mapping
	Bg1Attr ST_WmlColorSchemeIndex

	// Text 1 Theme Color Mapping
	T1Attr ST_WmlColorSchemeIndex

	// Background 2 Theme Color Mapping
	Bg2Attr ST_WmlColorSchemeIndex

	// Text 2 Theme Color Mapping
	T2Attr ST_WmlColorSchemeIndex

	// Accent 1 Theme Color Mapping
	Accent1Attr ST_WmlColorSchemeIndex

	// Accent 2 Theme Color Mapping
	Accent2Attr ST_WmlColorSchemeIndex

	// Accent3 Theme Color Mapping
	Accent3Attr ST_WmlColorSchemeIndex

	// Accent4 Theme Color Mapping
	Accent4Attr ST_WmlColorSchemeIndex

	// Accent5 Theme Color Mapping
	Accent5Attr ST_WmlColorSchemeIndex

	// Accent6 Theme Color Mapping
	Accent6Attr ST_WmlColorSchemeIndex

	// Hyperlink Theme Color Mapping
	HyperlinkAttr ST_WmlColorSchemeIndex

	// Followed Hyperlink Theme Color Mapping
	FollowedHyperlinkAttr ST_WmlColorSchemeIndex
}

func (_faeaa *EG_BlockLevelChunkElts) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _faeaa.EG_ContentBlockContent != nil {
		for _, _daadd := range _faeaa.EG_ContentBlockContent {
			_daadd.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}

// Validate validates the CT_SdtEndPr and its children
func (_afede *CT_SdtEndPr) Validate() error { return _afede.ValidateWithPath("CT_SdtEndPr") }
func (_baab *CT_FtnEdn) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ggbcd := range start.Attr {
		if _ggbcd.Name.Local == "type" {
			_baab.TypeAttr.UnmarshalXMLAttr(_ggbcd)
			continue
		}
		if _ggbcd.Name.Local == "id" {
			_acdde, _ddcgc := _dd.ParseInt(_ggbcd.Value, 10, 64)
			if _ddcgc != nil {
				return _ddcgc
			}
			_baab.IdAttr = _acdde
			continue
		}
	}
_cgfec:
	for {
		_cfggg, _cgcdb := d.Token()
		if _cgcdb != nil {
			return _cgcdb
		}
		switch _fdgfc := _cfggg.(type) {
		case _d.StartElement:
			switch _fdgfc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altChunk"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altChunk"}:
				_cggcd := NewEG_BlockLevelElts()
				_ggcae := NewCT_AltChunk()
				if _efdgg := d.DecodeElement(_ggcae, &_fdgfc); _efdgg != nil {
					return _efdgg
				}
				_cggcd.AltChunk = append(_cggcd.AltChunk, _ggcae)
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _cggcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_dbggb := NewEG_BlockLevelElts()
				_fddcf := NewEG_ContentBlockContent()
				_fddcf.CustomXml = NewCT_CustomXmlBlock()
				if _dabgg := d.DecodeElement(_fddcf.CustomXml, &_fdgfc); _dabgg != nil {
					return _dabgg
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _dbggb)
				_dbggb.EG_ContentBlockContent = append(_dbggb.EG_ContentBlockContent, _fddcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_efag := NewEG_BlockLevelElts()
				_dffd := NewEG_ContentBlockContent()
				_dffd.Sdt = NewCT_SdtBlock()
				if _agbgac := d.DecodeElement(_dffd.Sdt, &_fdgfc); _agbgac != nil {
					return _agbgac
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _efag)
				_efag.EG_ContentBlockContent = append(_efag.EG_ContentBlockContent, _dffd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "p"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "p"}:
				_ebcfg := NewEG_BlockLevelElts()
				_gebbf := NewEG_ContentBlockContent()
				_efbgg := NewCT_P()
				if _fffdf := d.DecodeElement(_efbgg, &_fdgfc); _fffdf != nil {
					return _fffdf
				}
				_gebbf.P = append(_gebbf.P, _efbgg)
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _ebcfg)
				_ebcfg.EG_ContentBlockContent = append(_ebcfg.EG_ContentBlockContent, _gebbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "tbl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "tbl"}:
				_cafae := NewEG_BlockLevelElts()
				_fgcf := NewEG_ContentBlockContent()
				_ddbee := NewCT_Tbl()
				if _egced := d.DecodeElement(_ddbee, &_fdgfc); _egced != nil {
					return _egced
				}
				_fgcf.Tbl = append(_fgcf.Tbl, _ddbee)
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _cafae)
				_cafae.EG_ContentBlockContent = append(_cafae.EG_ContentBlockContent, _fgcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_afbbf := NewEG_BlockLevelElts()
				_afeeg := NewEG_ContentBlockContent()
				_gbfee := NewEG_RunLevelElts()
				_gbfee.ProofErr = NewCT_ProofErr()
				if _bcdaa := d.DecodeElement(_gbfee.ProofErr, &_fdgfc); _bcdaa != nil {
					return _bcdaa
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _afbbf)
				_afbbf.EG_ContentBlockContent = append(_afbbf.EG_ContentBlockContent, _afeeg)
				_afeeg.EG_RunLevelElts = append(_afeeg.EG_RunLevelElts, _gbfee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_acfea := NewEG_BlockLevelElts()
				_feffb := NewEG_ContentBlockContent()
				_bfgbb := NewEG_RunLevelElts()
				_bfgbb.PermStart = NewCT_PermStart()
				if _efabc := d.DecodeElement(_bfgbb.PermStart, &_fdgfc); _efabc != nil {
					return _efabc
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _acfea)
				_acfea.EG_ContentBlockContent = append(_acfea.EG_ContentBlockContent, _feffb)
				_feffb.EG_RunLevelElts = append(_feffb.EG_RunLevelElts, _bfgbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_befca := NewEG_BlockLevelElts()
				_cefff := NewEG_ContentBlockContent()
				_ggdgf := NewEG_RunLevelElts()
				_ggdgf.PermEnd = NewCT_Perm()
				if _ecgac := d.DecodeElement(_ggdgf.PermEnd, &_fdgfc); _ecgac != nil {
					return _ecgac
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _befca)
				_befca.EG_ContentBlockContent = append(_befca.EG_ContentBlockContent, _cefff)
				_cefff.EG_RunLevelElts = append(_cefff.EG_RunLevelElts, _ggdgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_dbbcb := NewEG_BlockLevelElts()
				_babcb := NewEG_ContentBlockContent()
				_abff := NewEG_RunLevelElts()
				_abff.Ins = NewCT_RunTrackChange()
				if _eefc := d.DecodeElement(_abff.Ins, &_fdgfc); _eefc != nil {
					return _eefc
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _dbbcb)
				_dbbcb.EG_ContentBlockContent = append(_dbbcb.EG_ContentBlockContent, _babcb)
				_babcb.EG_RunLevelElts = append(_babcb.EG_RunLevelElts, _abff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_agfae := NewEG_BlockLevelElts()
				_bfdgg := NewEG_ContentBlockContent()
				_cdaeag := NewEG_RunLevelElts()
				_cdaeag.Del = NewCT_RunTrackChange()
				if _fccfag := d.DecodeElement(_cdaeag.Del, &_fdgfc); _fccfag != nil {
					return _fccfag
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _agfae)
				_agfae.EG_ContentBlockContent = append(_agfae.EG_ContentBlockContent, _bfdgg)
				_bfdgg.EG_RunLevelElts = append(_bfdgg.EG_RunLevelElts, _cdaeag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_fgfcf := NewEG_BlockLevelElts()
				_acgaf := NewEG_ContentBlockContent()
				_gdcgf := NewEG_RunLevelElts()
				_gdcgf.MoveFrom = NewCT_RunTrackChange()
				if _gdfee := d.DecodeElement(_gdcgf.MoveFrom, &_fdgfc); _gdfee != nil {
					return _gdfee
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _fgfcf)
				_fgfcf.EG_ContentBlockContent = append(_fgfcf.EG_ContentBlockContent, _acgaf)
				_acgaf.EG_RunLevelElts = append(_acgaf.EG_RunLevelElts, _gdcgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_dgfab := NewEG_BlockLevelElts()
				_gebba := NewEG_ContentBlockContent()
				_dacfg := NewEG_RunLevelElts()
				_dacfg.MoveTo = NewCT_RunTrackChange()
				if _bcdae := d.DecodeElement(_dacfg.MoveTo, &_fdgfc); _bcdae != nil {
					return _bcdae
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _dgfab)
				_dgfab.EG_ContentBlockContent = append(_dgfab.EG_ContentBlockContent, _gebba)
				_gebba.EG_RunLevelElts = append(_gebba.EG_RunLevelElts, _dacfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_gfca := NewEG_BlockLevelElts()
				_fbbed := NewEG_ContentBlockContent()
				_egfca := NewEG_RunLevelElts()
				_abec := NewEG_RangeMarkupElements()
				_abec.BookmarkStart = NewCT_Bookmark()
				if _bfdfd := d.DecodeElement(_abec.BookmarkStart, &_fdgfc); _bfdfd != nil {
					return _bfdfd
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _gfca)
				_gfca.EG_ContentBlockContent = append(_gfca.EG_ContentBlockContent, _fbbed)
				_fbbed.EG_RunLevelElts = append(_fbbed.EG_RunLevelElts, _egfca)
				_egfca.EG_RangeMarkupElements = append(_egfca.EG_RangeMarkupElements, _abec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_cgeff := NewEG_BlockLevelElts()
				_gfeec := NewEG_ContentBlockContent()
				_ceffe := NewEG_RunLevelElts()
				_gdceec := NewEG_RangeMarkupElements()
				_gdceec.BookmarkEnd = NewCT_MarkupRange()
				if _ebdgb := d.DecodeElement(_gdceec.BookmarkEnd, &_fdgfc); _ebdgb != nil {
					return _ebdgb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _cgeff)
				_cgeff.EG_ContentBlockContent = append(_cgeff.EG_ContentBlockContent, _gfeec)
				_gfeec.EG_RunLevelElts = append(_gfeec.EG_RunLevelElts, _ceffe)
				_ceffe.EG_RangeMarkupElements = append(_ceffe.EG_RangeMarkupElements, _gdceec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_cabdg := NewEG_BlockLevelElts()
				_acgbg := NewEG_ContentBlockContent()
				_cbggd := NewEG_RunLevelElts()
				_gdgdd := NewEG_RangeMarkupElements()
				_gdgdd.MoveFromRangeStart = NewCT_MoveBookmark()
				if _cafff := d.DecodeElement(_gdgdd.MoveFromRangeStart, &_fdgfc); _cafff != nil {
					return _cafff
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _cabdg)
				_cabdg.EG_ContentBlockContent = append(_cabdg.EG_ContentBlockContent, _acgbg)
				_acgbg.EG_RunLevelElts = append(_acgbg.EG_RunLevelElts, _cbggd)
				_cbggd.EG_RangeMarkupElements = append(_cbggd.EG_RangeMarkupElements, _gdgdd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_deacf := NewEG_BlockLevelElts()
				_fefdd := NewEG_ContentBlockContent()
				_ddcbf := NewEG_RunLevelElts()
				_aaedg := NewEG_RangeMarkupElements()
				_aaedg.MoveFromRangeEnd = NewCT_MarkupRange()
				if _fabeb := d.DecodeElement(_aaedg.MoveFromRangeEnd, &_fdgfc); _fabeb != nil {
					return _fabeb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _deacf)
				_deacf.EG_ContentBlockContent = append(_deacf.EG_ContentBlockContent, _fefdd)
				_fefdd.EG_RunLevelElts = append(_fefdd.EG_RunLevelElts, _ddcbf)
				_ddcbf.EG_RangeMarkupElements = append(_ddcbf.EG_RangeMarkupElements, _aaedg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_eecce := NewEG_BlockLevelElts()
				_beaf := NewEG_ContentBlockContent()
				_bcddg := NewEG_RunLevelElts()
				_gagcd := NewEG_RangeMarkupElements()
				_gagcd.MoveToRangeStart = NewCT_MoveBookmark()
				if _fcaf := d.DecodeElement(_gagcd.MoveToRangeStart, &_fdgfc); _fcaf != nil {
					return _fcaf
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _eecce)
				_eecce.EG_ContentBlockContent = append(_eecce.EG_ContentBlockContent, _beaf)
				_beaf.EG_RunLevelElts = append(_beaf.EG_RunLevelElts, _bcddg)
				_bcddg.EG_RangeMarkupElements = append(_bcddg.EG_RangeMarkupElements, _gagcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_fddgd := NewEG_BlockLevelElts()
				_ggdc := NewEG_ContentBlockContent()
				_bgba := NewEG_RunLevelElts()
				_ccff := NewEG_RangeMarkupElements()
				_ccff.MoveToRangeEnd = NewCT_MarkupRange()
				if _ddbf := d.DecodeElement(_ccff.MoveToRangeEnd, &_fdgfc); _ddbf != nil {
					return _ddbf
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _fddgd)
				_fddgd.EG_ContentBlockContent = append(_fddgd.EG_ContentBlockContent, _ggdc)
				_ggdc.EG_RunLevelElts = append(_ggdc.EG_RunLevelElts, _bgba)
				_bgba.EG_RangeMarkupElements = append(_bgba.EG_RangeMarkupElements, _ccff)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_ggdeg := NewEG_BlockLevelElts()
				_dceaa := NewEG_ContentBlockContent()
				_dagb := NewEG_RunLevelElts()
				_agacea := NewEG_RangeMarkupElements()
				_agacea.CommentRangeStart = NewCT_MarkupRange()
				if _adgfb := d.DecodeElement(_agacea.CommentRangeStart, &_fdgfc); _adgfb != nil {
					return _adgfb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _ggdeg)
				_ggdeg.EG_ContentBlockContent = append(_ggdeg.EG_ContentBlockContent, _dceaa)
				_dceaa.EG_RunLevelElts = append(_dceaa.EG_RunLevelElts, _dagb)
				_dagb.EG_RangeMarkupElements = append(_dagb.EG_RangeMarkupElements, _agacea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_egaa := NewEG_BlockLevelElts()
				_bdgf := NewEG_ContentBlockContent()
				_dgbee := NewEG_RunLevelElts()
				_egad := NewEG_RangeMarkupElements()
				_egad.CommentRangeEnd = NewCT_MarkupRange()
				if _ecefb := d.DecodeElement(_egad.CommentRangeEnd, &_fdgfc); _ecefb != nil {
					return _ecefb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _egaa)
				_egaa.EG_ContentBlockContent = append(_egaa.EG_ContentBlockContent, _bdgf)
				_bdgf.EG_RunLevelElts = append(_bdgf.EG_RunLevelElts, _dgbee)
				_dgbee.EG_RangeMarkupElements = append(_dgbee.EG_RangeMarkupElements, _egad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_cfbc := NewEG_BlockLevelElts()
				_dbbaa := NewEG_ContentBlockContent()
				_aebg := NewEG_RunLevelElts()
				_cfaad := NewEG_RangeMarkupElements()
				_cfaad.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _effdg := d.DecodeElement(_cfaad.CustomXmlInsRangeStart, &_fdgfc); _effdg != nil {
					return _effdg
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _cfbc)
				_cfbc.EG_ContentBlockContent = append(_cfbc.EG_ContentBlockContent, _dbbaa)
				_dbbaa.EG_RunLevelElts = append(_dbbaa.EG_RunLevelElts, _aebg)
				_aebg.EG_RangeMarkupElements = append(_aebg.EG_RangeMarkupElements, _cfaad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_bbea := NewEG_BlockLevelElts()
				_dddba := NewEG_ContentBlockContent()
				_cfcag := NewEG_RunLevelElts()
				_abfg := NewEG_RangeMarkupElements()
				_abfg.CustomXmlInsRangeEnd = NewCT_Markup()
				if _dcabb := d.DecodeElement(_abfg.CustomXmlInsRangeEnd, &_fdgfc); _dcabb != nil {
					return _dcabb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _bbea)
				_bbea.EG_ContentBlockContent = append(_bbea.EG_ContentBlockContent, _dddba)
				_dddba.EG_RunLevelElts = append(_dddba.EG_RunLevelElts, _cfcag)
				_cfcag.EG_RangeMarkupElements = append(_cfcag.EG_RangeMarkupElements, _abfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_dddcg := NewEG_BlockLevelElts()
				_ggfbb := NewEG_ContentBlockContent()
				_egfff := NewEG_RunLevelElts()
				_gdggb := NewEG_RangeMarkupElements()
				_gdggb.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gfdaf := d.DecodeElement(_gdggb.CustomXmlDelRangeStart, &_fdgfc); _gfdaf != nil {
					return _gfdaf
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _dddcg)
				_dddcg.EG_ContentBlockContent = append(_dddcg.EG_ContentBlockContent, _ggfbb)
				_ggfbb.EG_RunLevelElts = append(_ggfbb.EG_RunLevelElts, _egfff)
				_egfff.EG_RangeMarkupElements = append(_egfff.EG_RangeMarkupElements, _gdggb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fbfbd := NewEG_BlockLevelElts()
				_ecedc := NewEG_ContentBlockContent()
				_bbcb := NewEG_RunLevelElts()
				_bcbee := NewEG_RangeMarkupElements()
				_bcbee.CustomXmlDelRangeEnd = NewCT_Markup()
				if _aagd := d.DecodeElement(_bcbee.CustomXmlDelRangeEnd, &_fdgfc); _aagd != nil {
					return _aagd
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _fbfbd)
				_fbfbd.EG_ContentBlockContent = append(_fbfbd.EG_ContentBlockContent, _ecedc)
				_ecedc.EG_RunLevelElts = append(_ecedc.EG_RunLevelElts, _bbcb)
				_bbcb.EG_RangeMarkupElements = append(_bbcb.EG_RangeMarkupElements, _bcbee)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_cbabg := NewEG_BlockLevelElts()
				_fcde := NewEG_ContentBlockContent()
				_cdccg := NewEG_RunLevelElts()
				_dfbec := NewEG_RangeMarkupElements()
				_dfbec.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _facb := d.DecodeElement(_dfbec.CustomXmlMoveFromRangeStart, &_fdgfc); _facb != nil {
					return _facb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _cbabg)
				_cbabg.EG_ContentBlockContent = append(_cbabg.EG_ContentBlockContent, _fcde)
				_fcde.EG_RunLevelElts = append(_fcde.EG_RunLevelElts, _cdccg)
				_cdccg.EG_RangeMarkupElements = append(_cdccg.EG_RangeMarkupElements, _dfbec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_febdd := NewEG_BlockLevelElts()
				_gcabg := NewEG_ContentBlockContent()
				_ebcaf := NewEG_RunLevelElts()
				_fegbe := NewEG_RangeMarkupElements()
				_fegbe.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _abaaa := d.DecodeElement(_fegbe.CustomXmlMoveFromRangeEnd, &_fdgfc); _abaaa != nil {
					return _abaaa
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _febdd)
				_febdd.EG_ContentBlockContent = append(_febdd.EG_ContentBlockContent, _gcabg)
				_gcabg.EG_RunLevelElts = append(_gcabg.EG_RunLevelElts, _ebcaf)
				_ebcaf.EG_RangeMarkupElements = append(_ebcaf.EG_RangeMarkupElements, _fegbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_cceca := NewEG_BlockLevelElts()
				_cceecb := NewEG_ContentBlockContent()
				_badeb := NewEG_RunLevelElts()
				_cggfa := NewEG_RangeMarkupElements()
				_cggfa.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _agfge := d.DecodeElement(_cggfa.CustomXmlMoveToRangeStart, &_fdgfc); _agfge != nil {
					return _agfge
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _cceca)
				_cceca.EG_ContentBlockContent = append(_cceca.EG_ContentBlockContent, _cceecb)
				_cceecb.EG_RunLevelElts = append(_cceecb.EG_RunLevelElts, _badeb)
				_badeb.EG_RangeMarkupElements = append(_badeb.EG_RangeMarkupElements, _cggfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_gecfe := NewEG_BlockLevelElts()
				_dfafb := NewEG_ContentBlockContent()
				_dbabe := NewEG_RunLevelElts()
				_cecf := NewEG_RangeMarkupElements()
				_cecf.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _cdfb := d.DecodeElement(_cecf.CustomXmlMoveToRangeEnd, &_fdgfc); _cdfb != nil {
					return _cdfb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _gecfe)
				_gecfe.EG_ContentBlockContent = append(_gecfe.EG_ContentBlockContent, _dfafb)
				_dfafb.EG_RunLevelElts = append(_dfafb.EG_RunLevelElts, _dbabe)
				_dbabe.EG_RangeMarkupElements = append(_dbabe.EG_RangeMarkupElements, _cecf)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_bffg := NewEG_BlockLevelElts()
				_fddbb := NewEG_ContentBlockContent()
				_cgbfa := NewEG_RunLevelElts()
				_dacea := NewEG_MathContent()
				_dacea.OMathPara = _f.NewOMathPara()
				if _ggbbg := d.DecodeElement(_dacea.OMathPara, &_fdgfc); _ggbbg != nil {
					return _ggbbg
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _bffg)
				_bffg.EG_ContentBlockContent = append(_bffg.EG_ContentBlockContent, _fddbb)
				_fddbb.EG_RunLevelElts = append(_fddbb.EG_RunLevelElts, _cgbfa)
				_cgbfa.EG_MathContent = append(_cgbfa.EG_MathContent, _dacea)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_aebad := NewEG_BlockLevelElts()
				_fadbe := NewEG_ContentBlockContent()
				_eaga := NewEG_RunLevelElts()
				_aega := NewEG_MathContent()
				_aega.OMath = _f.NewOMath()
				if _daaeb := d.DecodeElement(_aega.OMath, &_fdgfc); _daaeb != nil {
					return _daaeb
				}
				_baab.EG_BlockLevelElts = append(_baab.EG_BlockLevelElts, _aebad)
				_aebad.EG_ContentBlockContent = append(_aebad.EG_ContentBlockContent, _fadbe)
				_fadbe.EG_RunLevelElts = append(_fadbe.EG_RunLevelElts, _eaga)
				_eaga.EG_MathContent = append(_eaga.EG_MathContent, _aega)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_FtnEdn \u0025v", _fdgfc.Name)
				if _ddcefg := d.Skip(); _ddcefg != nil {
					return _ddcefg
				}
			}
		case _d.EndElement:
			break _cgfec
		case _d.CharData:
		}
	}
	return nil
}
func (_aeeba *ST_MultiLevelType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_aeeba = 0
	case "singleLevel":
		*_aeeba = 1
	case "multilevel":
		*_aeeba = 2
	case "hybridMultilevel":
		*_aeeba = 3
	}
	return nil
}

// Validate validates the CT_RPr and its children
func (_eceeg *CT_RPr) Validate() error { return _eceeg.ValidateWithPath("CT_RPr") }
func (_cffac *CT_ColorSchemeMapping) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cffac.Bg1Attr != ST_WmlColorSchemeIndexUnset {
		_abgfb, _ffegc := _cffac.Bg1Attr.MarshalXMLAttr(_d.Name{Local: "w:bg1"})
		if _ffegc != nil {
			return _ffegc
		}
		start.Attr = append(start.Attr, _abgfb)
	}
	if _cffac.T1Attr != ST_WmlColorSchemeIndexUnset {
		_gafb, _beeg := _cffac.T1Attr.MarshalXMLAttr(_d.Name{Local: "w:t1"})
		if _beeg != nil {
			return _beeg
		}
		start.Attr = append(start.Attr, _gafb)
	}
	if _cffac.Bg2Attr != ST_WmlColorSchemeIndexUnset {
		_cbfe, _ebdf := _cffac.Bg2Attr.MarshalXMLAttr(_d.Name{Local: "w:bg2"})
		if _ebdf != nil {
			return _ebdf
		}
		start.Attr = append(start.Attr, _cbfe)
	}
	if _cffac.T2Attr != ST_WmlColorSchemeIndexUnset {
		_acbb, _afca := _cffac.T2Attr.MarshalXMLAttr(_d.Name{Local: "w:t2"})
		if _afca != nil {
			return _afca
		}
		start.Attr = append(start.Attr, _acbb)
	}
	if _cffac.Accent1Attr != ST_WmlColorSchemeIndexUnset {
		_dceg, _geffb := _cffac.Accent1Attr.MarshalXMLAttr(_d.Name{Local: "w:accent1"})
		if _geffb != nil {
			return _geffb
		}
		start.Attr = append(start.Attr, _dceg)
	}
	if _cffac.Accent2Attr != ST_WmlColorSchemeIndexUnset {
		_fbad, _gged := _cffac.Accent2Attr.MarshalXMLAttr(_d.Name{Local: "w:accent2"})
		if _gged != nil {
			return _gged
		}
		start.Attr = append(start.Attr, _fbad)
	}
	if _cffac.Accent3Attr != ST_WmlColorSchemeIndexUnset {
		_afdg, _cdf := _cffac.Accent3Attr.MarshalXMLAttr(_d.Name{Local: "w:accent3"})
		if _cdf != nil {
			return _cdf
		}
		start.Attr = append(start.Attr, _afdg)
	}
	if _cffac.Accent4Attr != ST_WmlColorSchemeIndexUnset {
		_eecg, _gecb := _cffac.Accent4Attr.MarshalXMLAttr(_d.Name{Local: "w:accent4"})
		if _gecb != nil {
			return _gecb
		}
		start.Attr = append(start.Attr, _eecg)
	}
	if _cffac.Accent5Attr != ST_WmlColorSchemeIndexUnset {
		_gefb, _ebee := _cffac.Accent5Attr.MarshalXMLAttr(_d.Name{Local: "w:accent5"})
		if _ebee != nil {
			return _ebee
		}
		start.Attr = append(start.Attr, _gefb)
	}
	if _cffac.Accent6Attr != ST_WmlColorSchemeIndexUnset {
		_baac, _ggcc := _cffac.Accent6Attr.MarshalXMLAttr(_d.Name{Local: "w:accent6"})
		if _ggcc != nil {
			return _ggcc
		}
		start.Attr = append(start.Attr, _baac)
	}
	if _cffac.HyperlinkAttr != ST_WmlColorSchemeIndexUnset {
		_fabc, _cfcg := _cffac.HyperlinkAttr.MarshalXMLAttr(_d.Name{Local: "w:hyperlink"})
		if _cfcg != nil {
			return _cfcg
		}
		start.Attr = append(start.Attr, _fabc)
	}
	if _cffac.FollowedHyperlinkAttr != ST_WmlColorSchemeIndexUnset {
		_afa, _cbece := _cffac.FollowedHyperlinkAttr.MarshalXMLAttr(_d.Name{Local: "w:followedHyperlink"})
		if _cbece != nil {
			return _cbece
		}
		start.Attr = append(start.Attr, _afa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bdbgcg *ST_RubyAlign) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_deeaa, _ggbcda := d.Token()
	if _ggbcda != nil {
		return _ggbcda
	}
	if _fcgaa, _bbbdd := _deeaa.(_d.EndElement); _bbbdd && _fcgaa.Name == start.Name {
		*_bdbgcg = 1
		return nil
	}
	if _baegd, _bfdea := _deeaa.(_d.CharData); !_bfdea {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _deeaa)
	} else {
		switch string(_baegd) {
		case "":
			*_bdbgcg = 0
		case "center":
			*_bdbgcg = 1
		case "distributeLetter":
			*_bdbgcg = 2
		case "distributeSpace":
			*_bdbgcg = 3
		case "left":
			*_bdbgcg = 4
		case "right":
			*_bdbgcg = 5
		case "rightVertical":
			*_bdbgcg = 6
		}
	}
	_deeaa, _ggbcda = d.Token()
	if _ggbcda != nil {
		return _ggbcda
	}
	if _bdgfeg, _bcbbef := _deeaa.(_d.EndElement); _bcbbef && _bdgfeg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _deeaa)
}
func (_cbdecd ST_Merge) String() string {
	switch _cbdecd {
	case 0:
		return ""
	case 1:
		return "continue"
	case 2:
		return "restart"
	}
	return ""
}

type WdCT_WrapTight struct {
	WrapTextAttr WdST_WrapText
	DistLAttr    *uint32
	DistRAttr    *uint32
	WrapPolygon  *WdCT_WrapPath
}

// ValidateWithPath validates the CT_MarkupRange and its children, prefixing error messages with path
func (_aggae *CT_MarkupRange) ValidateWithPath(path string) error {
	if _aeage := _aggae.DisplacedByCustomXmlAttr.ValidateWithPath(path + "\u002fDisplacedByCustomXmlAttr"); _aeage != nil {
		return _aeage
	}
	return nil
}

// Validate validates the CT_FtnEdn and its children
func (_gcabd *CT_FtnEdn) Validate() error { return _gcabd.ValidateWithPath("CT_FtnEdn") }
func (_gcbbba *ST_BrClear) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcaag, _gadgfg := d.Token()
	if _gadgfg != nil {
		return _gadgfg
	}
	if _fdbbgf, _cccfggg := _fcaag.(_d.EndElement); _cccfggg && _fdbbgf.Name == start.Name {
		*_gcbbba = 1
		return nil
	}
	if _fcfgfd, _ceccg := _fcaag.(_d.CharData); !_ceccg {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fcaag)
	} else {
		switch string(_fcfgfd) {
		case "":
			*_gcbbba = 0
		case "none":
			*_gcbbba = 1
		case "left":
			*_gcbbba = 2
		case "right":
			*_gcbbba = 3
		case "all":
			*_gcbbba = 4
		}
	}
	_fcaag, _gadgfg = d.Token()
	if _gadgfg != nil {
		return _gadgfg
	}
	if _efabg, _acdac := _fcaag.(_d.EndElement); _acdac && _efabg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fcaag)
}
func NewCT_DecimalNumber() *CT_DecimalNumber { _dfaf := &CT_DecimalNumber{}; return _dfaf }
func (_abced *ST_DocPartBehavior) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_abced = 0
	case "content":
		*_abced = 1
	case "p":
		*_abced = 2
	case "pg":
		*_abced = 3
	}
	return nil
}
func (_bbagb *CT_EdnPos) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dbdg, _daae := _bbagb.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _daae != nil {
		return _daae
	}
	start.Attr = append(start.Attr, _dbdg)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_MailMergeDest and its children, prefixing error messages with path
func (_bfegf *CT_MailMergeDest) ValidateWithPath(path string) error {
	if _bfegf.ValAttr == ST_MailMergeDestUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cbgee := _bfegf.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cbgee != nil {
		return _cbgee
	}
	return nil
}

// Validate validates the CT_SdtBlock and its children
func (_fgeddf *CT_SdtBlock) Validate() error { return _fgeddf.ValidateWithPath("CT_SdtBlock") }
func (_aegceg ST_HighlightColor) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cceaf := _d.Attr{}
	_cceaf.Name = name
	switch _aegceg {
	case ST_HighlightColorUnset:
		_cceaf.Value = ""
	case ST_HighlightColorBlack:
		_cceaf.Value = "black"
	case ST_HighlightColorBlue:
		_cceaf.Value = "blue"
	case ST_HighlightColorCyan:
		_cceaf.Value = "cyan"
	case ST_HighlightColorGreen:
		_cceaf.Value = "green"
	case ST_HighlightColorMagenta:
		_cceaf.Value = "magenta"
	case ST_HighlightColorRed:
		_cceaf.Value = "red"
	case ST_HighlightColorYellow:
		_cceaf.Value = "yellow"
	case ST_HighlightColorWhite:
		_cceaf.Value = "white"
	case ST_HighlightColorDarkBlue:
		_cceaf.Value = "darkBlue"
	case ST_HighlightColorDarkCyan:
		_cceaf.Value = "darkCyan"
	case ST_HighlightColorDarkGreen:
		_cceaf.Value = "darkGreen"
	case ST_HighlightColorDarkMagenta:
		_cceaf.Value = "darkMagenta"
	case ST_HighlightColorDarkRed:
		_cceaf.Value = "darkRed"
	case ST_HighlightColorDarkYellow:
		_cceaf.Value = "darkYellow"
	case ST_HighlightColorDarkGray:
		_cceaf.Value = "darkGray"
	case ST_HighlightColorLightGray:
		_cceaf.Value = "lightGray"
	case ST_HighlightColorNone:
		_cceaf.Value = "none"
	}
	return _cceaf, nil
}

type CT_CellMergeTrackChange struct {
	VMergeAttr     ST_AnnotationVMerge
	VMergeOrigAttr ST_AnnotationVMerge
	AuthorAttr     string
	DateAttr       *_c.Time

	// Annotation Identifier
	IdAttr int64
}

func (_bfcb *CT_DocGrid) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bfcb.TypeAttr != ST_DocGridUnset {
		_fdac, _egeac := _bfcb.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _egeac != nil {
			return _egeac
		}
		start.Attr = append(start.Attr, _fdac)
	}
	if _bfcb.LinePitchAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:linePitch"}, Value: _b.Sprintf("\u0025v", *_bfcb.LinePitchAttr)})
	}
	if _bfcb.CharSpaceAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:charSpace"}, Value: _b.Sprintf("\u0025v", *_bfcb.CharSpaceAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_afbab *WdCT_WrapSquare) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_feafd, _ebbfgf := _afbab.WrapTextAttr.MarshalXMLAttr(_d.Name{Local: "wrapText"})
	if _ebbfgf != nil {
		return _ebbfgf
	}
	start.Attr = append(start.Attr, _feafd)
	if _afbab.DistTAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distT"}, Value: _b.Sprintf("\u0025v", *_afbab.DistTAttr)})
	}
	if _afbab.DistBAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distB"}, Value: _b.Sprintf("\u0025v", *_afbab.DistBAttr)})
	}
	if _afbab.DistLAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distL"}, Value: _b.Sprintf("\u0025v", *_afbab.DistLAttr)})
	}
	if _afbab.DistRAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distR"}, Value: _b.Sprintf("\u0025v", *_afbab.DistRAttr)})
	}
	e.EncodeToken(start)
	if _afbab.EffectExtent != nil {
		_gbfbd := _d.StartElement{Name: _d.Name{Local: "wp:effectExtent"}}
		e.EncodeElement(_afbab.EffectExtent, _gbfbd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fdcff *WdCT_TxbxContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fdcff.AltChunk != nil {
		_fgbbdde := _d.StartElement{Name: _d.Name{Local: "wp:altChunk"}}
		for _, _efcbf := range _fdcff.AltChunk {
			e.EncodeElement(_efcbf, _fgbbdde)
		}
	}
	if _fdcff.EG_ContentBlockContent != nil {
		for _, _aecdb := range _fdcff.EG_ContentBlockContent {
			_aecdb.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_TblLook() *CT_TblLook { _dacfeb := &CT_TblLook{}; return _dacfeb }

const (
	ST_PTabAlignmentUnset  ST_PTabAlignment = 0
	ST_PTabAlignmentLeft   ST_PTabAlignment = 1
	ST_PTabAlignmentCenter ST_PTabAlignment = 2
	ST_PTabAlignmentRight  ST_PTabAlignment = 3
)

func (_bgfdcg *ST_PTabAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bgfdcg = 0
	case "left":
		*_bgfdcg = 1
	case "center":
		*_bgfdcg = 2
	case "right":
		*_bgfdcg = 3
	}
	return nil
}

// ValidateWithPath validates the CT_Column and its children, prefixing error messages with path
func (_fcac *CT_Column) ValidateWithPath(path string) error {
	if _fcac.WAttr != nil {
		if _cbdd := _fcac.WAttr.ValidateWithPath(path + "\u002fWAttr"); _cbdd != nil {
			return _cbdd
		}
	}
	if _fcac.SpaceAttr != nil {
		if _gag := _fcac.SpaceAttr.ValidateWithPath(path + "\u002fSpaceAttr"); _gag != nil {
			return _gag
		}
	}
	return nil
}
func NewCT_MoveBookmark() *CT_MoveBookmark { _geecac := &CT_MoveBookmark{}; return _geecac }
func (_cfbcbd ST_HdrFtr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cfbcbd.String(), start)
}

// Validate validates the CT_SdtCell and its children
func (_bcaba *CT_SdtCell) Validate() error { return _bcaba.ValidateWithPath("CT_SdtCell") }

type CT_TblPr struct {

	// Referenced Table Style
	TblStyle *CT_String

	// Floating Table Positioning
	TblpPr *CT_TblPPr

	// Floating Table Allows Other Tables to Overlap
	TblOverlap *CT_TblOverlap

	// Visually Right to Left Table
	BidiVisual *CT_OnOff

	// Number of Rows in Row Band
	TblStyleRowBandSize *CT_DecimalNumber

	// Number of Columns in Column Band
	TblStyleColBandSize *CT_DecimalNumber

	// Preferred Table Width
	TblW *CT_TblWidth

	// Table Alignment
	Jc *CT_JcTable

	// Table Cell Spacing Default
	TblCellSpacing *CT_TblWidth

	// Table Indent from Leading Margin
	TblInd *CT_TblWidth

	// Table Borders
	TblBorders *CT_TblBorders

	// Table Shading
	Shd *CT_Shd

	// Table Layout
	TblLayout *CT_TblLayoutType

	// Table Cell Margin Defaults
	TblCellMar *CT_TblCellMar

	// Table Style Conditional Formatting Settings
	TblLook *CT_TblLook

	// Table Caption
	TblCaption *CT_String

	// Table Description
	TblDescription *CT_String
	TblPrChange    *CT_TblPrChange
}
type WdCT_WordprocessingShape struct {
	NormalEastAsianFlowAttr *bool
	CNvPr                   *_eb.CT_NonVisualDrawingProps
	Choice                  *WdCT_WordprocessingShapeChoice
	SpPr                    *_eb.CT_ShapeProperties
	Style                   *_eb.CT_ShapeStyle
	ExtLst                  *_eb.CT_OfficeArtExtensionList
	WChoice                 *WdCT_WordprocessingShapeChoice1
	BodyPr                  *_eb.CT_TextBodyProperties
}

func (_cbdca *CT_ReadingModeInkLockDown) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:actualPg"}, Value: _b.Sprintf("\u0025v", _cbdca.ActualPgAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:w"}, Value: _b.Sprintf("\u0025v", _cbdca.WAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:h"}, Value: _b.Sprintf("\u0025v", _cbdca.HAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fontSz"}, Value: _b.Sprintf("\u0025v", _cbdca.FontSzAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LevelText and its children
func (_efcebd *CT_LevelText) Validate() error { return _efcebd.ValidateWithPath("CT_LevelText") }
func NewCT_Perm() *CT_Perm                    { _gfedf := &CT_Perm{}; return _gfedf }
func (_agcfa *CT_Markup) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cbcba := range start.Attr {
		if _cbcba.Name.Local == "id" {
			_fcfa, _aagcd := _dd.ParseInt(_cbcba.Value, 10, 64)
			if _aagcd != nil {
				return _aagcd
			}
			_agcfa.IdAttr = _fcfa
			continue
		}
	}
	for {
		_aggdgd, _bcbc := d.Token()
		if _bcbc != nil {
			return _b.Errorf("parsing\u0020CT_Markup:\u0020\u0025s", _bcbc)
		}
		if _dfge, _cbba := _aggdgd.(_d.EndElement); _cbba && _dfge.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gadaf *ST_Lock) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ceaaa, _gbeag := d.Token()
	if _gbeag != nil {
		return _gbeag
	}
	if _ggdbad, _babeaa := _ceaaa.(_d.EndElement); _babeaa && _ggdbad.Name == start.Name {
		*_gadaf = 1
		return nil
	}
	if _cagaa, _gcgab := _ceaaa.(_d.CharData); !_gcgab {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ceaaa)
	} else {
		switch string(_cagaa) {
		case "":
			*_gadaf = 0
		case "sdtLocked":
			*_gadaf = 1
		case "contentLocked":
			*_gadaf = 2
		case "unlocked":
			*_gadaf = 3
		case "sdtContentLocked":
			*_gadaf = 4
		}
	}
	_ceaaa, _gbeag = d.Token()
	if _gbeag != nil {
		return _gbeag
	}
	if _bcdgg, _fbabca := _ceaaa.(_d.EndElement); _fbabca && _bcdgg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ceaaa)
}
func (_caddf ST_Shd) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_caddf.String(), start)
}
func NewWdCT_PosHChoice() *WdCT_PosHChoice { _bbdacb := &WdCT_PosHChoice{}; return _bbdacb }

type WdST_WrapText byte
type ST_TabJc byte

func (_fdeeg ST_FtnPos) Validate() error { return _fdeeg.ValidateWithPath("") }

type WdAnchor struct{ WdCT_Anchor }

func (_aggcee *ST_ChapterSep) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gedcfb, _adffac := d.Token()
	if _adffac != nil {
		return _adffac
	}
	if _acbgec, _gccfec := _gedcfb.(_d.EndElement); _gccfec && _acbgec.Name == start.Name {
		*_aggcee = 1
		return nil
	}
	if _abega, _ecdfa := _gedcfb.(_d.CharData); !_ecdfa {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _gedcfb)
	} else {
		switch string(_abega) {
		case "":
			*_aggcee = 0
		case "hyphen":
			*_aggcee = 1
		case "period":
			*_aggcee = 2
		case "colon":
			*_aggcee = 3
		case "emDash":
			*_aggcee = 4
		case "enDash":
			*_aggcee = 5
		}
	}
	_gedcfb, _adffac = d.Token()
	if _adffac != nil {
		return _adffac
	}
	if _bagab, _gcbcgf := _gedcfb.(_d.EndElement); _gcbcgf && _bagab.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _gedcfb)
}

type CT_Lang struct {

	// Language Code
	ValAttr string
}
type CT_CalendarType struct {

	// Calendar Type Value
	ValAttr _g.ST_CalendarType
}

func (_begegd ST_CombineBrackets) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bggfc := _d.Attr{}
	_bggfc.Name = name
	switch _begegd {
	case ST_CombineBracketsUnset:
		_bggfc.Value = ""
	case ST_CombineBracketsNone:
		_bggfc.Value = "none"
	case ST_CombineBracketsRound:
		_bggfc.Value = "round"
	case ST_CombineBracketsSquare:
		_bggfc.Value = "square"
	case ST_CombineBracketsAngle:
		_bggfc.Value = "angle"
	case ST_CombineBracketsCurly:
		_bggfc.Value = "curly"
	}
	return _bggfc, nil
}
func (_ebebfa ST_DropCap) ValidateWithPath(path string) error {
	switch _ebebfa {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ebebfa))
	}
	return nil
}
func NewAC_ChoiceRun() *AC_ChoiceRun { _agbcdg := &AC_ChoiceRun{}; return _agbcdg }
func (_bbdadb *CT_TblGridCol) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbdadb.WAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:w"}, Value: _b.Sprintf("\u0025v", *_bbdadb.WAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_VerticalJcUnset  ST_VerticalJc = 0
	ST_VerticalJcTop    ST_VerticalJc = 1
	ST_VerticalJcCenter ST_VerticalJc = 2
	ST_VerticalJcBoth   ST_VerticalJc = 3
	ST_VerticalJcBottom ST_VerticalJc = 4
)

func (_fcbbeb *ST_TblOverlap) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fcbbeb = 0
	case "never":
		*_fcbbeb = 1
	case "overlap":
		*_fcbbeb = 2
	}
	return nil
}
func (_ceceda ST_Shd) ValidateWithPath(path string) error {
	switch _ceceda {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ceceda))
	}
	return nil
}
func (_ddfg *CT_HMerge) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _edbfg := range start.Attr {
		if _edbfg.Name.Local == "val" {
			_ddfg.ValAttr.UnmarshalXMLAttr(_edbfg)
			continue
		}
	}
	for {
		_dbeec, _cbdcef := d.Token()
		if _cbdcef != nil {
			return _b.Errorf("parsing\u0020CT_HMerge:\u0020\u0025s", _cbdcef)
		}
		if _caaf, _gdaac := _dbeec.(_d.EndElement); _gdaac && _caaf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_SdtListItem and its children
func (_fddeg *CT_SdtListItem) Validate() error { return _fddeg.ValidateWithPath("CT_SdtListItem") }
func (_eceggg *CT_EastAsianLayout) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eceggg.IdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", *_eceggg.IdAttr)})
	}
	if _eceggg.CombineAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:combine"}, Value: _b.Sprintf("\u0025v", *_eceggg.CombineAttr)})
	}
	if _eceggg.CombineBracketsAttr != ST_CombineBracketsUnset {
		_dgeba, _dcae := _eceggg.CombineBracketsAttr.MarshalXMLAttr(_d.Name{Local: "w:combineBrackets"})
		if _dcae != nil {
			return _dcae
		}
		start.Attr = append(start.Attr, _dgeba)
	}
	if _eceggg.VertAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:vert"}, Value: _b.Sprintf("\u0025v", *_eceggg.VertAttr)})
	}
	if _eceggg.VertCompressAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:vertCompress"}, Value: _b.Sprintf("\u0025v", *_eceggg.VertCompressAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_SdtContentBlock struct {

	// Block-Level Custom XML Element
	CustomXml *CT_CustomXmlBlock

	// Block-Level Structured Document Tag
	Sdt *CT_SdtBlock

	// Paragraph
	P []*CT_P

	// Table
	Tbl             []*CT_Tbl
	EG_RunLevelElts []*EG_RunLevelElts
}

const (
	ST_PageBorderZOrderUnset ST_PageBorderZOrder = 0
	ST_PageBorderZOrderFront ST_PageBorderZOrder = 1
	ST_PageBorderZOrderBack  ST_PageBorderZOrder = 2
)

// Validate validates the CT_Border and its children
func (_aade *CT_Border) Validate() error { return _aade.ValidateWithPath("CT_Border") }

type CT_TrPr struct {

	// Table Row Conditional Formatting
	CnfStyle []*CT_Cnf

	// Associated HTML div ID
	DivId []*CT_DecimalNumber

	// Grid Columns Before First Cell
	GridBefore []*CT_DecimalNumber

	// Grid Columns After Last Cell
	GridAfter []*CT_DecimalNumber

	// Preferred Width Before Table Row
	WBefore []*CT_TblWidth

	// Preferred Width After Table Row
	WAfter []*CT_TblWidth

	// Table Row Cannot Break Across Pages
	CantSplit []*CT_OnOff

	// Table Row Height
	TrHeight []*CT_Height

	// Repeat Table Row on Every New Page
	TblHeader []*CT_OnOff

	// Table Row Cell Spacing
	TblCellSpacing []*CT_TblWidth

	// Table Row Alignment
	Jc []*CT_JcTable

	// Hidden Table Row Marker
	Hidden     []*CT_OnOff
	Ins        *CT_TrackChange
	Del        *CT_TrackChange
	TrPrChange *CT_TrPrChange
}

// Validate validates the WdCT_WordprocessingShape and its children
func (_afcfff *WdCT_WordprocessingShape) Validate() error {
	return _afcfff.ValidateWithPath("WdCT_WordprocessingShape")
}

type CT_TextDirection struct {

	// Direction of Text Flow
	ValAttr ST_TextDirection
}

// Validate validates the CT_DocType and its children
func (_ffccf *CT_DocType) Validate() error { return _ffccf.ValidateWithPath("CT_DocType") }
func (_daefdc ST_DocPartBehavior) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_daefdc.String(), start)
}
func (_egdbe ST_PageBorderDisplay) String() string {
	switch _egdbe {
	case 0:
		return ""
	case 1:
		return "allPages"
	case 2:
		return "firstPage"
	case 3:
		return "notFirstPage"
	}
	return ""
}
func (_fdfbfd *CT_String) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bdbfc := range start.Attr {
		if _bdbfc.Name.Local == "val" {
			_affcfe, _efafe := _bdbfc.Value, error(nil)
			if _efafe != nil {
				return _efafe
			}
			_fdfbfd.ValAttr = _affcfe
			continue
		}
	}
	for {
		_beeba, _dbdbb := d.Token()
		if _dbdbb != nil {
			return _b.Errorf("parsing\u0020CT_String:\u0020\u0025s", _dbdbb)
		}
		if _bfcaf, _dcdad := _beeba.(_d.EndElement); _dcdad && _bfcaf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_ProofErr struct {

	// Proofing Error Anchor Type
	TypeAttr ST_ProofErr
}

const (
	ST_MultiLevelTypeUnset            ST_MultiLevelType = 0
	ST_MultiLevelTypeSingleLevel      ST_MultiLevelType = 1
	ST_MultiLevelTypeMultilevel       ST_MultiLevelType = 2
	ST_MultiLevelTypeHybridMultilevel ST_MultiLevelType = 3
)

type ST_MailMergeSourceType byte
type CT_AbstractNum struct {

	// Abstract Numbering Definition ID
	AbstractNumIdAttr int64

	// Abstract Numbering Definition Identifier
	Nsid *CT_LongHexNumber

	// Abstract Numbering Definition Type
	MultiLevelType *CT_MultiLevelType

	// Numbering Template Code
	Tmpl *CT_LongHexNumber

	// Abstract Numbering Definition Name
	Name *CT_String

	// Numbering Style Definition
	StyleLink *CT_String

	// Numbering Style Reference
	NumStyleLink *CT_String

	// Numbering Level Definition
	Lvl []*CT_Lvl
}

// ValidateWithPath validates the CT_Pitch and its children, prefixing error messages with path
func (_gdgffe *CT_Pitch) ValidateWithPath(path string) error {
	if _gdgffe.ValAttr == ST_PitchUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cabfb := _gdgffe.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cabfb != nil {
		return _cabfb
	}
	return nil
}
func NewCT_PPrChange() *CT_PPrChange {
	_abgega := &CT_PPrChange{}
	_abgega.PPr = NewCT_PPrBase()
	return _abgega
}
func NewCT_SmartTagPr() *CT_SmartTagPr { _ddffa := &CT_SmartTagPr{}; return _ddffa }

type CT_AutoCaption struct {

	// Identifier of Object to be Automatically Captioned
	NameAttr string

	// Caption Used for Automatic Captioning
	CaptionAttr string
}

func (_abbeb *ST_TblWidth) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_abbeb = 0
	case "nil":
		*_abbeb = 1
	case "pct":
		*_abbeb = 2
	case "dxa":
		*_abbeb = 3
	case "auto":
		*_abbeb = 4
	}
	return nil
}

type CT_TblLayoutType struct {

	// Table Layout Setting
	TypeAttr ST_TblLayoutType
}

func NewEG_ParaRPrTrackChanges() *EG_ParaRPrTrackChanges {
	_dcdbf := &EG_ParaRPrTrackChanges{}
	return _dcdbf
}
func NewCT_TrackChangeNumbering() *CT_TrackChangeNumbering {
	_ccafd := &CT_TrackChangeNumbering{}
	return _ccafd
}
func (_ebfbbga *EG_PContentMath) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cdbeca:
	for {
		_aefcf, _deacg := d.Token()
		if _deacg != nil {
			return _deacg
		}
		switch _efgcb := _aefcf.(type) {
		case _d.StartElement:
			switch _efgcb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_acadg := NewEG_PContentBase()
				_acadg.CustomXml = NewCT_CustomXmlRun()
				if _gabedd := d.DecodeElement(_acadg.CustomXml, &_efgcb); _gabedd != nil {
					return _gabedd
				}
				_ebfbbga.EG_PContentBase = append(_ebfbbga.EG_PContentBase, _acadg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_aedef := NewEG_PContentBase()
				_dgeced := NewCT_SimpleField()
				if _bccgac := d.DecodeElement(_dgeced, &_efgcb); _bccgac != nil {
					return _bccgac
				}
				_aedef.FldSimple = append(_aedef.FldSimple, _dgeced)
				_ebfbbga.EG_PContentBase = append(_ebfbbga.EG_PContentBase, _aedef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_cafdba := NewEG_PContentBase()
				_cafdba.Hyperlink = NewCT_Hyperlink()
				if _eegfa := d.DecodeElement(_cafdba.Hyperlink, &_efgcb); _eegfa != nil {
					return _eegfa
				}
				_ebfbbga.EG_PContentBase = append(_ebfbbga.EG_PContentBase, _cafdba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_cacef := NewEG_ContentRunContentBase()
				_cacef.SmartTag = NewCT_SmartTagRun()
				if _beebe := d.DecodeElement(_cacef.SmartTag, &_efgcb); _beebe != nil {
					return _beebe
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _cacef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_ebgccd := NewEG_ContentRunContentBase()
				_ebgccd.Sdt = NewCT_SdtRun()
				if _ffefcc := d.DecodeElement(_ebgccd.Sdt, &_efgcb); _ffefcc != nil {
					return _ffefcc
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _ebgccd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_efdae := NewEG_ContentRunContentBase()
				_fbdcg := NewEG_RunLevelElts()
				_fbdcg.ProofErr = NewCT_ProofErr()
				if _ggedbb := d.DecodeElement(_fbdcg.ProofErr, &_efgcb); _ggedbb != nil {
					return _ggedbb
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _efdae)
				_efdae.EG_RunLevelElts = append(_efdae.EG_RunLevelElts, _fbdcg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_gdfafd := NewEG_ContentRunContentBase()
				_bdecbg := NewEG_RunLevelElts()
				_bdecbg.PermStart = NewCT_PermStart()
				if _deeda := d.DecodeElement(_bdecbg.PermStart, &_efgcb); _deeda != nil {
					return _deeda
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _gdfafd)
				_gdfafd.EG_RunLevelElts = append(_gdfafd.EG_RunLevelElts, _bdecbg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_gefcde := NewEG_ContentRunContentBase()
				_ccfgde := NewEG_RunLevelElts()
				_ccfgde.PermEnd = NewCT_Perm()
				if _cbbcb := d.DecodeElement(_ccfgde.PermEnd, &_efgcb); _cbbcb != nil {
					return _cbbcb
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _gefcde)
				_gefcde.EG_RunLevelElts = append(_gefcde.EG_RunLevelElts, _ccfgde)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_cfcbfg := NewEG_ContentRunContentBase()
				_dfdggf := NewEG_RunLevelElts()
				_dfdggf.Ins = NewCT_RunTrackChange()
				if _cffda := d.DecodeElement(_dfdggf.Ins, &_efgcb); _cffda != nil {
					return _cffda
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _cfcbfg)
				_cfcbfg.EG_RunLevelElts = append(_cfcbfg.EG_RunLevelElts, _dfdggf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_dbeggg := NewEG_ContentRunContentBase()
				_bgeceaa := NewEG_RunLevelElts()
				_bgeceaa.Del = NewCT_RunTrackChange()
				if _eegaf := d.DecodeElement(_bgeceaa.Del, &_efgcb); _eegaf != nil {
					return _eegaf
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _dbeggg)
				_dbeggg.EG_RunLevelElts = append(_dbeggg.EG_RunLevelElts, _bgeceaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_bcfbc := NewEG_ContentRunContentBase()
				_dbefcf := NewEG_RunLevelElts()
				_dbefcf.MoveFrom = NewCT_RunTrackChange()
				if _ecgacf := d.DecodeElement(_dbefcf.MoveFrom, &_efgcb); _ecgacf != nil {
					return _ecgacf
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _bcfbc)
				_bcfbc.EG_RunLevelElts = append(_bcfbc.EG_RunLevelElts, _dbefcf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_gddfb := NewEG_ContentRunContentBase()
				_dbacbe := NewEG_RunLevelElts()
				_dbacbe.MoveTo = NewCT_RunTrackChange()
				if _cbbec := d.DecodeElement(_dbacbe.MoveTo, &_efgcb); _cbbec != nil {
					return _cbbec
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _gddfb)
				_gddfb.EG_RunLevelElts = append(_gddfb.EG_RunLevelElts, _dbacbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_egcgee := NewEG_ContentRunContentBase()
				_fffbbe := NewEG_RunLevelElts()
				_adgbf := NewEG_RangeMarkupElements()
				_adgbf.BookmarkStart = NewCT_Bookmark()
				if _afcdb := d.DecodeElement(_adgbf.BookmarkStart, &_efgcb); _afcdb != nil {
					return _afcdb
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _egcgee)
				_egcgee.EG_RunLevelElts = append(_egcgee.EG_RunLevelElts, _fffbbe)
				_fffbbe.EG_RangeMarkupElements = append(_fffbbe.EG_RangeMarkupElements, _adgbf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_cfeeg := NewEG_ContentRunContentBase()
				_aaefa := NewEG_RunLevelElts()
				_decdf := NewEG_RangeMarkupElements()
				_decdf.BookmarkEnd = NewCT_MarkupRange()
				if _dfegc := d.DecodeElement(_decdf.BookmarkEnd, &_efgcb); _dfegc != nil {
					return _dfegc
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _cfeeg)
				_cfeeg.EG_RunLevelElts = append(_cfeeg.EG_RunLevelElts, _aaefa)
				_aaefa.EG_RangeMarkupElements = append(_aaefa.EG_RangeMarkupElements, _decdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_bbcea := NewEG_ContentRunContentBase()
				_fecgcg := NewEG_RunLevelElts()
				_ccgfe := NewEG_RangeMarkupElements()
				_ccgfe.MoveFromRangeStart = NewCT_MoveBookmark()
				if _efedcf := d.DecodeElement(_ccgfe.MoveFromRangeStart, &_efgcb); _efedcf != nil {
					return _efedcf
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _bbcea)
				_bbcea.EG_RunLevelElts = append(_bbcea.EG_RunLevelElts, _fecgcg)
				_fecgcg.EG_RangeMarkupElements = append(_fecgcg.EG_RangeMarkupElements, _ccgfe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_egdbdg := NewEG_ContentRunContentBase()
				_fdafcc := NewEG_RunLevelElts()
				_dfgccd := NewEG_RangeMarkupElements()
				_dfgccd.MoveFromRangeEnd = NewCT_MarkupRange()
				if _fddfd := d.DecodeElement(_dfgccd.MoveFromRangeEnd, &_efgcb); _fddfd != nil {
					return _fddfd
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _egdbdg)
				_egdbdg.EG_RunLevelElts = append(_egdbdg.EG_RunLevelElts, _fdafcc)
				_fdafcc.EG_RangeMarkupElements = append(_fdafcc.EG_RangeMarkupElements, _dfgccd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dafgdaa := NewEG_ContentRunContentBase()
				_dabcbe := NewEG_RunLevelElts()
				_aeagga := NewEG_RangeMarkupElements()
				_aeagga.MoveToRangeStart = NewCT_MoveBookmark()
				if _fedaf := d.DecodeElement(_aeagga.MoveToRangeStart, &_efgcb); _fedaf != nil {
					return _fedaf
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _dafgdaa)
				_dafgdaa.EG_RunLevelElts = append(_dafgdaa.EG_RunLevelElts, _dabcbe)
				_dabcbe.EG_RangeMarkupElements = append(_dabcbe.EG_RangeMarkupElements, _aeagga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_afaaf := NewEG_ContentRunContentBase()
				_fdagef := NewEG_RunLevelElts()
				_edebb := NewEG_RangeMarkupElements()
				_edebb.MoveToRangeEnd = NewCT_MarkupRange()
				if _ecgaf := d.DecodeElement(_edebb.MoveToRangeEnd, &_efgcb); _ecgaf != nil {
					return _ecgaf
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _afaaf)
				_afaaf.EG_RunLevelElts = append(_afaaf.EG_RunLevelElts, _fdagef)
				_fdagef.EG_RangeMarkupElements = append(_fdagef.EG_RangeMarkupElements, _edebb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_eabea := NewEG_ContentRunContentBase()
				_aacfdb := NewEG_RunLevelElts()
				_gcaacg := NewEG_RangeMarkupElements()
				_gcaacg.CommentRangeStart = NewCT_MarkupRange()
				if _dcegd := d.DecodeElement(_gcaacg.CommentRangeStart, &_efgcb); _dcegd != nil {
					return _dcegd
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _eabea)
				_eabea.EG_RunLevelElts = append(_eabea.EG_RunLevelElts, _aacfdb)
				_aacfdb.EG_RangeMarkupElements = append(_aacfdb.EG_RangeMarkupElements, _gcaacg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_gcbfc := NewEG_ContentRunContentBase()
				_ebfgf := NewEG_RunLevelElts()
				_cdaae := NewEG_RangeMarkupElements()
				_cdaae.CommentRangeEnd = NewCT_MarkupRange()
				if _bagef := d.DecodeElement(_cdaae.CommentRangeEnd, &_efgcb); _bagef != nil {
					return _bagef
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _gcbfc)
				_gcbfc.EG_RunLevelElts = append(_gcbfc.EG_RunLevelElts, _ebfgf)
				_ebfgf.EG_RangeMarkupElements = append(_ebfgf.EG_RangeMarkupElements, _cdaae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_gcbaag := NewEG_ContentRunContentBase()
				_ecddd := NewEG_RunLevelElts()
				_fbccdc := NewEG_RangeMarkupElements()
				_fbccdc.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _afggdc := d.DecodeElement(_fbccdc.CustomXmlInsRangeStart, &_efgcb); _afggdc != nil {
					return _afggdc
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _gcbaag)
				_gcbaag.EG_RunLevelElts = append(_gcbaag.EG_RunLevelElts, _ecddd)
				_ecddd.EG_RangeMarkupElements = append(_ecddd.EG_RangeMarkupElements, _fbccdc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_dgcabcc := NewEG_ContentRunContentBase()
				_fgcec := NewEG_RunLevelElts()
				_dfefe := NewEG_RangeMarkupElements()
				_dfefe.CustomXmlInsRangeEnd = NewCT_Markup()
				if _ffffea := d.DecodeElement(_dfefe.CustomXmlInsRangeEnd, &_efgcb); _ffffea != nil {
					return _ffffea
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _dgcabcc)
				_dgcabcc.EG_RunLevelElts = append(_dgcabcc.EG_RunLevelElts, _fgcec)
				_fgcec.EG_RangeMarkupElements = append(_fgcec.EG_RangeMarkupElements, _dfefe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_gbadf := NewEG_ContentRunContentBase()
				_adedb := NewEG_RunLevelElts()
				_cfbga := NewEG_RangeMarkupElements()
				_cfbga.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _bgdfaa := d.DecodeElement(_cfbga.CustomXmlDelRangeStart, &_efgcb); _bgdfaa != nil {
					return _bgdfaa
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _gbadf)
				_gbadf.EG_RunLevelElts = append(_gbadf.EG_RunLevelElts, _adedb)
				_adedb.EG_RangeMarkupElements = append(_adedb.EG_RangeMarkupElements, _cfbga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_fbbfbe := NewEG_ContentRunContentBase()
				_gacce := NewEG_RunLevelElts()
				_geebaa := NewEG_RangeMarkupElements()
				_geebaa.CustomXmlDelRangeEnd = NewCT_Markup()
				if _cgbfae := d.DecodeElement(_geebaa.CustomXmlDelRangeEnd, &_efgcb); _cgbfae != nil {
					return _cgbfae
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _fbbfbe)
				_fbbfbe.EG_RunLevelElts = append(_fbbfbe.EG_RunLevelElts, _gacce)
				_gacce.EG_RangeMarkupElements = append(_gacce.EG_RangeMarkupElements, _geebaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_eaaaa := NewEG_ContentRunContentBase()
				_adbddc := NewEG_RunLevelElts()
				_acffea := NewEG_RangeMarkupElements()
				_acffea.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _edfecb := d.DecodeElement(_acffea.CustomXmlMoveFromRangeStart, &_efgcb); _edfecb != nil {
					return _edfecb
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _eaaaa)
				_eaaaa.EG_RunLevelElts = append(_eaaaa.EG_RunLevelElts, _adbddc)
				_adbddc.EG_RangeMarkupElements = append(_adbddc.EG_RangeMarkupElements, _acffea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_bccae := NewEG_ContentRunContentBase()
				_daeda := NewEG_RunLevelElts()
				_efabb := NewEG_RangeMarkupElements()
				_efabb.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _cabad := d.DecodeElement(_efabb.CustomXmlMoveFromRangeEnd, &_efgcb); _cabad != nil {
					return _cabad
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _bccae)
				_bccae.EG_RunLevelElts = append(_bccae.EG_RunLevelElts, _daeda)
				_daeda.EG_RangeMarkupElements = append(_daeda.EG_RangeMarkupElements, _efabb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_cface := NewEG_ContentRunContentBase()
				_deedgd := NewEG_RunLevelElts()
				_bfbggg := NewEG_RangeMarkupElements()
				_bfbggg.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _aefgac := d.DecodeElement(_bfbggg.CustomXmlMoveToRangeStart, &_efgcb); _aefgac != nil {
					return _aefgac
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _cface)
				_cface.EG_RunLevelElts = append(_cface.EG_RunLevelElts, _deedgd)
				_deedgd.EG_RangeMarkupElements = append(_deedgd.EG_RangeMarkupElements, _bfbggg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_baggd := NewEG_ContentRunContentBase()
				_cdadb := NewEG_RunLevelElts()
				_fgcde := NewEG_RangeMarkupElements()
				_fgcde.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _aaead := d.DecodeElement(_fgcde.CustomXmlMoveToRangeEnd, &_efgcb); _aaead != nil {
					return _aaead
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _baggd)
				_baggd.EG_RunLevelElts = append(_baggd.EG_RunLevelElts, _cdadb)
				_cdadb.EG_RangeMarkupElements = append(_cdadb.EG_RangeMarkupElements, _fgcde)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_facdgd := NewEG_ContentRunContentBase()
				_bcbgd := NewEG_RunLevelElts()
				_acbbd := NewEG_MathContent()
				_acbbd.OMathPara = _f.NewOMathPara()
				if _ffbfe := d.DecodeElement(_acbbd.OMathPara, &_efgcb); _ffbfe != nil {
					return _ffbfe
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _facdgd)
				_facdgd.EG_RunLevelElts = append(_facdgd.EG_RunLevelElts, _bcbgd)
				_bcbgd.EG_MathContent = append(_bcbgd.EG_MathContent, _acbbd)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_cdddcc := NewEG_ContentRunContentBase()
				_deggec := NewEG_RunLevelElts()
				_eadbfc := NewEG_MathContent()
				_eadbfc.OMath = _f.NewOMath()
				if _cdcff := d.DecodeElement(_eadbfc.OMath, &_efgcb); _cdcff != nil {
					return _cdcff
				}
				_ebfbbga.EG_ContentRunContentBase = append(_ebfbbga.EG_ContentRunContentBase, _cdddcc)
				_cdddcc.EG_RunLevelElts = append(_cdddcc.EG_RunLevelElts, _deggec)
				_deggec.EG_MathContent = append(_deggec.EG_MathContent, _eadbfc)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020EG_PContentMath\u0020\u0025v", _efgcb.Name)
				if _ddgeb := d.Skip(); _ddgeb != nil {
					return _ddgeb
				}
			}
		case _d.EndElement:
			break _cdbeca
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the WdCT_WrapNone and its children
func (_bfeec *WdCT_WrapNone) Validate() error { return _bfeec.ValidateWithPath("WdCT_WrapNone") }

// Validate validates the CT_Odso and its children
func (_geeab *CT_Odso) Validate() error { return _geeab.ValidateWithPath("CT_Odso") }

// ValidateWithPath validates the CT_Hyperlink and its children, prefixing error messages with path
func (_bedgf *CT_Hyperlink) ValidateWithPath(path string) error {
	if _bedgf.HistoryAttr != nil {
		if _edad := _bedgf.HistoryAttr.ValidateWithPath(path + "\u002fHistoryAttr"); _edad != nil {
			return _edad
		}
	}
	for _bcdge, _geeca := range _bedgf.FldSimple {
		if _ceade := _geeca.ValidateWithPath(_b.Sprintf("\u0025s/FldSimple\u005b\u0025d\u005d", path, _bcdge)); _ceade != nil {
			return _ceade
		}
	}
	if _bedgf.Hyperlink != nil {
		if _fbag := _bedgf.Hyperlink.ValidateWithPath(path + "\u002fHyperlink"); _fbag != nil {
			return _fbag
		}
	}
	if _bedgf.SubDoc != nil {
		if _geadf := _bedgf.SubDoc.ValidateWithPath(path + "\u002fSubDoc"); _geadf != nil {
			return _geadf
		}
	}
	for _gadad, _cffb := range _bedgf.EG_ContentRunContent {
		if _dfdac := _cffb.ValidateWithPath(_b.Sprintf("%s\u002fEG_ContentRunContent[\u0025d\u005d", path, _gadad)); _dfdac != nil {
			return _dfdac
		}
	}
	return nil
}
func (_fgabgc *ST_AnnotationVMerge) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afbag, _gdcbfe := d.Token()
	if _gdcbfe != nil {
		return _gdcbfe
	}
	if _eegfc, _cfddec := _afbag.(_d.EndElement); _cfddec && _eegfc.Name == start.Name {
		*_fgabgc = 1
		return nil
	}
	if _bdgbeg, _acbedd := _afbag.(_d.CharData); !_acbedd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _afbag)
	} else {
		switch string(_bdgbeg) {
		case "":
			*_fgabgc = 0
		case "cont":
			*_fgabgc = 1
		case "rest":
			*_fgabgc = 2
		}
	}
	_afbag, _gdcbfe = d.Token()
	if _gdcbfe != nil {
		return _gdcbfe
	}
	if _decba, _cdefde := _afbag.(_d.EndElement); _cdefde && _decba.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _afbag)
}

// Validate validates the CT_Ind and its children
func (_fadbg *CT_Ind) Validate() error { return _fadbg.ValidateWithPath("CT_Ind") }
func (_gbaec *ST_ProofErr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bfgfcf, _ffcbaeb := d.Token()
	if _ffcbaeb != nil {
		return _ffcbaeb
	}
	if _gaacdf, _fcaca := _bfgfcf.(_d.EndElement); _fcaca && _gaacdf.Name == start.Name {
		*_gbaec = 1
		return nil
	}
	if _gebeag, _abcec := _bfgfcf.(_d.CharData); !_abcec {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bfgfcf)
	} else {
		switch string(_gebeag) {
		case "":
			*_gbaec = 0
		case "spellStart":
			*_gbaec = 1
		case "spellEnd":
			*_gbaec = 2
		case "gramStart":
			*_gbaec = 3
		case "gramEnd":
			*_gbaec = 4
		}
	}
	_bfgfcf, _ffcbaeb = d.Token()
	if _ffcbaeb != nil {
		return _ffcbaeb
	}
	if _ebgfe, _gbcfcd := _bfgfcf.(_d.EndElement); _gbcfcd && _ebgfe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bfgfcf)
}
func (_cbaag ST_Merge) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gbcgf := _d.Attr{}
	_gbcgf.Name = name
	switch _cbaag {
	case ST_MergeUnset:
		_gbcgf.Value = ""
	case ST_MergeContinue:
		_gbcgf.Value = "continue"
	case ST_MergeRestart:
		_gbcgf.Value = "restart"
	}
	return _gbcgf, nil
}
func (_gbgaf *WdCT_WordprocessingGroup) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gbgaf.CNvPr != nil {
		_gabae := _d.StartElement{Name: _d.Name{Local: "wp:cNvPr"}}
		e.EncodeElement(_gbgaf.CNvPr, _gabae)
	}
	_gbcfda := _d.StartElement{Name: _d.Name{Local: "wp:cNvGrpSpPr"}}
	e.EncodeElement(_gbgaf.CNvGrpSpPr, _gbcfda)
	_dcbbe := _d.StartElement{Name: _d.Name{Local: "wp:grpSpPr"}}
	e.EncodeElement(_gbgaf.GrpSpPr, _dcbbe)
	if _gbgaf.Choice != nil {
		for _, _egccb := range _gbgaf.Choice {
			_egccb.MarshalXML(e, _d.StartElement{})
		}
	}
	if _gbgaf.ExtLst != nil {
		_fdgfcf := _d.StartElement{Name: _d.Name{Local: "wp:extLst"}}
		e.EncodeElement(_gbgaf.ExtLst, _fdgfcf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cfefca *ST_HAnchor) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_efeaga, _cdgfcd := d.Token()
	if _cdgfcd != nil {
		return _cdgfcd
	}
	if _facgd, _fcfea := _efeaga.(_d.EndElement); _fcfea && _facgd.Name == start.Name {
		*_cfefca = 1
		return nil
	}
	if _bgadcd, _dfade := _efeaga.(_d.CharData); !_dfade {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _efeaga)
	} else {
		switch string(_bgadcd) {
		case "":
			*_cfefca = 0
		case "text":
			*_cfefca = 1
		case "margin":
			*_cfefca = 2
		case "page":
			*_cfefca = 3
		}
	}
	_efeaga, _cdgfcd = d.Token()
	if _cdgfcd != nil {
		return _cdgfcd
	}
	if _ceabf, _aafbda := _efeaga.(_d.EndElement); _aafbda && _ceabf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _efeaga)
}
func (_cgada *CT_Num) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:numId"}, Value: _b.Sprintf("\u0025v", _cgada.NumIdAttr)})
	e.EncodeToken(start)
	_fbccg := _d.StartElement{Name: _d.Name{Local: "w:abstractNumId"}}
	e.EncodeElement(_cgada.AbstractNumId, _fbccg)
	if _cgada.LvlOverride != nil {
		_afdce := _d.StartElement{Name: _d.Name{Local: "w:lvlOverride"}}
		for _, _agbdf := range _cgada.LvlOverride {
			e.EncodeElement(_agbdf, _afdce)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_eaebfc ST_AnnotationVMerge) ValidateWithPath(path string) error {
	switch _eaebfc {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_eaebfc))
	}
	return nil
}
func (_fbcaf *CT_FrameLayout) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_eeeeeb, _fddec := _fbcaf.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _fddec != nil {
		return _fddec
	}
	start.Attr = append(start.Attr, _eeeeeb)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gcdffg ST_FrameLayout) Validate() error { return _gcdffg.ValidateWithPath("") }
func (_eebccg ST_ThemeColor) Validate() error  { return _eebccg.ValidateWithPath("") }

type CT_EastAsianLayout struct {

	// East Asian Typography Run ID
	IdAttr *int64

	// Two Lines in One
	CombineAttr *_g.ST_OnOff

	// Display Brackets Around Two Lines in One
	CombineBracketsAttr ST_CombineBrackets

	// Horizontal in Vertical (Rotate Text)
	VertAttr *_g.ST_OnOff

	// Compress Rotated Text to Line Height
	VertCompressAttr *_g.ST_OnOff
}
type ST_DocGrid byte
type CT_PPrGeneral struct {

	// Referenced Paragraph Style
	PStyle *CT_String

	// Keep Paragraph With Next Paragraph
	KeepNext *CT_OnOff

	// Keep All Lines On One Page
	KeepLines *CT_OnOff

	// Start Paragraph on Next Page
	PageBreakBefore *CT_OnOff

	// Text Frame Properties
	FramePr *CT_FramePr

	// Allow First/Last Line to Display on a Separate Page
	WidowControl *CT_OnOff

	// Numbering Definition Instance Reference
	NumPr *CT_NumPr

	// Suppress Line Numbers for Paragraph
	SuppressLineNumbers *CT_OnOff

	// Paragraph Borders
	PBdr *CT_PBdr

	// Paragraph Shading
	Shd *CT_Shd

	// Set of Custom Tab Stops
	Tabs *CT_Tabs

	// Suppress Hyphenation for Paragraph
	SuppressAutoHyphens *CT_OnOff

	// Use East Asian Typography Rules for First and Last Character per Line
	Kinsoku *CT_OnOff

	// Allow Line Breaking At Character Level
	WordWrap *CT_OnOff

	// Allow Punctuation to Extend Past Text Extents
	OverflowPunct *CT_OnOff

	// Compress Punctuation at Start of a Line
	TopLinePunct *CT_OnOff

	// Automatically Adjust Spacing of Latin and East Asian Text
	AutoSpaceDE *CT_OnOff

	// Automatically Adjust Spacing of East Asian Text and Numbers
	AutoSpaceDN *CT_OnOff

	// Right to Left Paragraph Layout
	Bidi *CT_OnOff

	// Automatically Adjust Right Indent When Using Document Grid
	AdjustRightInd *CT_OnOff

	// Use Document Grid Settings for Inter-Line Paragraph Spacing
	SnapToGrid *CT_OnOff

	// Spacing Between Lines and Above/Below Paragraph
	Spacing *CT_Spacing

	// Paragraph Indentation
	Ind *CT_Ind

	// Ignore Spacing Above and Below When Using Identical Styles
	ContextualSpacing *CT_OnOff

	// Use Left/Right Indents as Inside/Outside Indents
	MirrorIndents *CT_OnOff

	// Prevent Text Frames From Overlapping
	SuppressOverlap *CT_OnOff

	// Paragraph Alignment
	Jc *CT_Jc

	// Paragraph Text Flow Direction
	TextDirection *CT_TextDirection

	// Vertical Character Alignment on Line
	TextAlignment *CT_TextAlignment

	// Allow Surrounding Paragraphs to Tight Wrap to Text Box Contents
	TextboxTightWrap *CT_TextboxTightWrap

	// Associated Outline Level
	OutlineLvl *CT_DecimalNumber

	// Associated HTML div ID
	DivId *CT_DecimalNumber

	// Paragraph Conditional Formatting
	CnfStyle  *CT_Cnf
	PPrChange *CT_PPrChange
}

// ValidateWithPath validates the WdCT_WrapPath and its children, prefixing error messages with path
func (_egebcg *WdCT_WrapPath) ValidateWithPath(path string) error {
	if _fedafc := _egebcg.Start.ValidateWithPath(path + "\u002fStart"); _fedafc != nil {
		return _fedafc
	}
	for _ffdcdf, _fedcd := range _egebcg.LineTo {
		if _bcedae := _fedcd.ValidateWithPath(_b.Sprintf("\u0025s\u002fLineTo\u005b\u0025d\u005d", path, _ffdcdf)); _bcedae != nil {
			return _bcedae
		}
	}
	return nil
}
func (_ddag *CT_Frame) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_eefg:
	for {
		_gbcgg, _fagf := d.Token()
		if _fagf != nil {
			return _fagf
		}
		switch _bfgba := _gbcgg.(type) {
		case _d.StartElement:
			switch _bfgba.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_ddag.Sz = NewCT_String()
				if _deedf := d.DecodeElement(_ddag.Sz, &_bfgba); _deedf != nil {
					return _deedf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "name"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "name"}:
				_ddag.Name = NewCT_String()
				if _cgedf := d.DecodeElement(_ddag.Name, &_bfgba); _cgedf != nil {
					return _cgedf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "title"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "title"}:
				_ddag.Title = NewCT_String()
				if _cfcaf := d.DecodeElement(_ddag.Title, &_bfgba); _cfcaf != nil {
					return _cfcaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "longDesc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "longDesc"}:
				_ddag.LongDesc = NewCT_Rel()
				if _cdaafa := d.DecodeElement(_ddag.LongDesc, &_bfgba); _cdaafa != nil {
					return _cdaafa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sourceFileName"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sourceFileName"}:
				_ddag.SourceFileName = NewCT_Rel()
				if _accda := d.DecodeElement(_ddag.SourceFileName, &_bfgba); _accda != nil {
					return _accda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "marW"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "marW"}:
				_ddag.MarW = NewCT_PixelsMeasure()
				if _gfgdg := d.DecodeElement(_ddag.MarW, &_bfgba); _gfgdg != nil {
					return _gfgdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "marH"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "marH"}:
				_ddag.MarH = NewCT_PixelsMeasure()
				if _gcgf := d.DecodeElement(_ddag.MarH, &_bfgba); _gcgf != nil {
					return _gcgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "scrollbar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "scrollbar"}:
				_ddag.Scrollbar = NewCT_FrameScrollbar()
				if _cfgad := d.DecodeElement(_ddag.Scrollbar, &_bfgba); _cfgad != nil {
					return _cfgad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noResizeAllowed"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noResizeAllowed"}:
				_ddag.NoResizeAllowed = NewCT_OnOff()
				if _bfbca := d.DecodeElement(_ddag.NoResizeAllowed, &_bfgba); _bfbca != nil {
					return _bfbca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "linkedToFile"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "linkedToFile"}:
				_ddag.LinkedToFile = NewCT_OnOff()
				if _ccgf := d.DecodeElement(_ddag.LinkedToFile, &_bfgba); _ccgf != nil {
					return _ccgf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Frame\u0020\u0025v", _bfgba.Name)
				if _aagcf := d.Skip(); _aagcf != nil {
					return _aagcf
				}
			}
		case _d.EndElement:
			break _eefg
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the EG_ContentRunContentBase and its children
func (_cefac *EG_ContentRunContentBase) Validate() error {
	return _cefac.ValidateWithPath("EG_ContentRunContentBase")
}
func (_ffceb *ST_ProofErr) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ffceb = 0
	case "spellStart":
		*_ffceb = 1
	case "spellEnd":
		*_ffceb = 2
	case "gramStart":
		*_ffceb = 3
	case "gramEnd":
		*_ffceb = 4
	}
	return nil
}
func (_gbfbdg ST_MailMergeSourceType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_debgega := _d.Attr{}
	_debgega.Name = name
	switch _gbfbdg {
	case ST_MailMergeSourceTypeUnset:
		_debgega.Value = ""
	case ST_MailMergeSourceTypeDatabase:
		_debgega.Value = "database"
	case ST_MailMergeSourceTypeAddressBook:
		_debgega.Value = "addressBook"
	case ST_MailMergeSourceTypeDocument1:
		_debgega.Value = "document1"
	case ST_MailMergeSourceTypeDocument2:
		_debgega.Value = "document2"
	case ST_MailMergeSourceTypeText:
		_debgega.Value = "text"
	case ST_MailMergeSourceTypeEmail:
		_debgega.Value = "email"
	case ST_MailMergeSourceTypeNative:
		_debgega.Value = "native"
	case ST_MailMergeSourceTypeLegacy:
		_debgega.Value = "legacy"
	case ST_MailMergeSourceTypeMaster:
		_debgega.Value = "master"
	}
	return _debgega, nil
}

const (
	ST_LevelSuffixUnset   ST_LevelSuffix = 0
	ST_LevelSuffixTab     ST_LevelSuffix = 1
	ST_LevelSuffixSpace   ST_LevelSuffix = 2
	ST_LevelSuffixNothing ST_LevelSuffix = 3
)

func (_becgg *ST_Theme) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aeacbc, _ddadf := d.Token()
	if _ddadf != nil {
		return _ddadf
	}
	if _dbgbff, _cbfaa := _aeacbc.(_d.EndElement); _cbfaa && _dbgbff.Name == start.Name {
		*_becgg = 1
		return nil
	}
	if _fgbgcc, _agece := _aeacbc.(_d.CharData); !_agece {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _aeacbc)
	} else {
		switch string(_fgbgcc) {
		case "":
			*_becgg = 0
		case "majorEastAsia":
			*_becgg = 1
		case "majorBidi":
			*_becgg = 2
		case "majorAscii":
			*_becgg = 3
		case "majorHAnsi":
			*_becgg = 4
		case "minorEastAsia":
			*_becgg = 5
		case "minorBidi":
			*_becgg = 6
		case "minorAscii":
			*_becgg = 7
		case "minorHAnsi":
			*_becgg = 8
		}
	}
	_aeacbc, _ddadf = d.Token()
	if _ddadf != nil {
		return _ddadf
	}
	if _agbfdc, _cecfa := _aeacbc.(_d.EndElement); _cecfa && _agbfdc.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _aeacbc)
}
func (_eggdgd *ST_CombineBrackets) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gfdcf, _fbggg := d.Token()
	if _fbggg != nil {
		return _fbggg
	}
	if _cdcaagg, _aggaa := _gfdcf.(_d.EndElement); _aggaa && _cdcaagg.Name == start.Name {
		*_eggdgd = 1
		return nil
	}
	if _daagd, _fefec := _gfdcf.(_d.CharData); !_fefec {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _gfdcf)
	} else {
		switch string(_daagd) {
		case "":
			*_eggdgd = 0
		case "none":
			*_eggdgd = 1
		case "round":
			*_eggdgd = 2
		case "square":
			*_eggdgd = 3
		case "angle":
			*_eggdgd = 4
		case "curly":
			*_eggdgd = 5
		}
	}
	_gfdcf, _fbggg = d.Token()
	if _fbggg != nil {
		return _fbggg
	}
	if _bcfaef, _gfgbg := _gfdcf.(_d.EndElement); _gfgbg && _bcfaef.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _gfdcf)
}
func (_acecfc ST_ProofErr) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bgaga := _d.Attr{}
	_bgaga.Name = name
	switch _acecfc {
	case ST_ProofErrUnset:
		_bgaga.Value = ""
	case ST_ProofErrSpellStart:
		_bgaga.Value = "spellStart"
	case ST_ProofErrSpellEnd:
		_bgaga.Value = "spellEnd"
	case ST_ProofErrGramStart:
		_bgaga.Value = "gramStart"
	case ST_ProofErrGramEnd:
		_bgaga.Value = "gramEnd"
	}
	return _bgaga, nil
}
func (_ggagaf *ST_TblLayoutType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_facfcd, _eegcc := d.Token()
	if _eegcc != nil {
		return _eegcc
	}
	if _ececea, _fgffee := _facfcd.(_d.EndElement); _fgffee && _ececea.Name == start.Name {
		*_ggagaf = 1
		return nil
	}
	if _aggbe, _fffdag := _facfcd.(_d.CharData); !_fffdag {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _facfcd)
	} else {
		switch string(_aggbe) {
		case "":
			*_ggagaf = 0
		case "fixed":
			*_ggagaf = 1
		case "autofit":
			*_ggagaf = 2
		}
	}
	_facfcd, _eegcc = d.Token()
	if _eegcc != nil {
		return _eegcc
	}
	if _bbagf, _gedgba := _facfcd.(_d.EndElement); _gedgba && _bbagf.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _facfcd)
}

type CT_Height struct {

	// Table Row Height
	ValAttr *_g.ST_TwipsMeasure

	// Table Row Height Type
	HRuleAttr ST_HeightRule
}

func (_dcbfd *CT_SignedHpsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _dcbfd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_MailMergeDestUnset       ST_MailMergeDest = 0
	ST_MailMergeDestNewDocument ST_MailMergeDest = 1
	ST_MailMergeDestPrinter     ST_MailMergeDest = 2
	ST_MailMergeDestEmail       ST_MailMergeDest = 3
	ST_MailMergeDestFax         ST_MailMergeDest = 4
)

func (_deefa ST_StyleSort) Validate() error { return _deefa.ValidateWithPath("") }
func (_gfgadg *ST_LineNumberRestart) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ecbgcg, _dfddeg := d.Token()
	if _dfddeg != nil {
		return _dfddeg
	}
	if _aaecee, _gcbbdf := _ecbgcg.(_d.EndElement); _gcbbdf && _aaecee.Name == start.Name {
		*_gfgadg = 1
		return nil
	}
	if _egfagf, _bccfa := _ecbgcg.(_d.CharData); !_bccfa {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ecbgcg)
	} else {
		switch string(_egfagf) {
		case "":
			*_gfgadg = 0
		case "newPage":
			*_gfgadg = 1
		case "newSection":
			*_gfgadg = 2
		case "continuous":
			*_gfgadg = 3
		}
	}
	_ecbgcg, _dfddeg = d.Token()
	if _dfddeg != nil {
		return _dfddeg
	}
	if _dbecb, _bbdfca := _ecbgcg.(_d.EndElement); _bbdfca && _dbecb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ecbgcg)
}
func (_afcbfe *ST_DecimalNumberOrPercent) ValidateWithPath(path string) error {
	_adfbbg := []string{}
	if _afcbfe.ST_UnqualifiedPercentage != nil {
		_adfbbg = append(_adfbbg, "ST_UnqualifiedPercentage")
	}
	if _afcbfe.ST_Percentage != nil {
		_adfbbg = append(_adfbbg, "ST_Percentage")
	}
	if len(_adfbbg) > 1 {
		return _b.Errorf("%s\u0020too\u0020many\u0020members\u0020set:\u0020\u0025v", path, _adfbbg)
	}
	return nil
}

// Validate validates the CT_Guid and its children
func (_edgaf *CT_Guid) Validate() error { return _edgaf.ValidateWithPath("CT_Guid") }
func (_fccbg ST_HexColor) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fccbg.ST_HexColorAuto != ST_HexColorAutoUnset {
		e.EncodeToken(_d.CharData(_fccbg.ST_HexColorAuto.String()))
	}
	if _fccbg.ST_HexColorRGB != nil {
		e.EncodeToken(_d.CharData(*_fccbg.ST_HexColorRGB))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}

type CT_SdtBlock struct {

	// Structured Document Tag Properties
	SdtPr *CT_SdtPr

	// Structured Document Tag End Character Properties
	SdtEndPr *CT_SdtEndPr

	// Block-Level Structured Document Tag Content
	SdtContent *CT_SdtContentBlock
}

// ValidateWithPath validates the CT_NumRestart and its children, prefixing error messages with path
func (_cagagf *CT_NumRestart) ValidateWithPath(path string) error {
	if _cagagf.ValAttr == ST_RestartNumberUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _fbfef := _cagagf.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _fbfef != nil {
		return _fbfef
	}
	return nil
}
func (_abaega ST_FontFamily) Validate() error { return _abaega.ValidateWithPath("") }
func (_deec *CT_Captions) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bee:
	for {
		_fdb, _cebae := d.Token()
		if _cebae != nil {
			return _cebae
		}
		switch _daff := _fdb.(type) {
		case _d.StartElement:
			switch _daff.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "caption"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "caption"}:
				_babd := NewCT_Caption()
				if _dfcd := d.DecodeElement(_babd, &_daff); _dfcd != nil {
					return _dfcd
				}
				_deec.Caption = append(_deec.Caption, _babd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "autoCaptions"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "autoCaptions"}:
				_deec.AutoCaptions = NewCT_AutoCaptions()
				if _fcff := d.DecodeElement(_deec.AutoCaptions, &_daff); _fcff != nil {
					return _fcff
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Captions\u0020\u0025v", _daff.Name)
				if _bdbb := d.Skip(); _bdbb != nil {
					return _bdbb
				}
			}
		case _d.EndElement:
			break _bee
		case _d.CharData:
		}
	}
	return nil
}
func (_eagaf ST_InfoTextType) ValidateWithPath(path string) error {
	switch _eagaf {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_eagaf))
	}
	return nil
}

// Validate validates the CT_CharacterSpacing and its children
func (_bgee *CT_CharacterSpacing) Validate() error {
	return _bgee.ValidateWithPath("CT_CharacterSpacing")
}

const (
	ST_ThemeColorUnset             ST_ThemeColor = 0
	ST_ThemeColorDark1             ST_ThemeColor = 1
	ST_ThemeColorLight1            ST_ThemeColor = 2
	ST_ThemeColorDark2             ST_ThemeColor = 3
	ST_ThemeColorLight2            ST_ThemeColor = 4
	ST_ThemeColorAccent1           ST_ThemeColor = 5
	ST_ThemeColorAccent2           ST_ThemeColor = 6
	ST_ThemeColorAccent3           ST_ThemeColor = 7
	ST_ThemeColorAccent4           ST_ThemeColor = 8
	ST_ThemeColorAccent5           ST_ThemeColor = 9
	ST_ThemeColorAccent6           ST_ThemeColor = 10
	ST_ThemeColorHyperlink         ST_ThemeColor = 11
	ST_ThemeColorFollowedHyperlink ST_ThemeColor = 12
	ST_ThemeColorNone              ST_ThemeColor = 13
	ST_ThemeColorBackground1       ST_ThemeColor = 14
	ST_ThemeColorText1             ST_ThemeColor = 15
	ST_ThemeColorBackground2       ST_ThemeColor = 16
	ST_ThemeColorText2             ST_ThemeColor = 17
)

func (_gccad ST_ObjectUpdateMode) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gccad.String(), start)
}

// Validate validates the CT_MarkupRange and its children
func (_gaad *CT_MarkupRange) Validate() error { return _gaad.ValidateWithPath("CT_MarkupRange") }

// ValidateWithPath validates the WdInline and its children, prefixing error messages with path
func (_fdbcaa *WdInline) ValidateWithPath(path string) error {
	if _ecgcgf := _fdbcaa.WdCT_Inline.ValidateWithPath(path); _ecgcgf != nil {
		return _ecgcgf
	}
	return nil
}
func NewCT_Tabs() *CT_Tabs { _bffcef := &CT_Tabs{}; return _bffcef }
func (_acgde *CT_SdtRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _acgde.SdtPr != nil {
		_aebfb := _d.StartElement{Name: _d.Name{Local: "w:sdtPr"}}
		e.EncodeElement(_acgde.SdtPr, _aebfb)
	}
	if _acgde.SdtEndPr != nil {
		_ececg := _d.StartElement{Name: _d.Name{Local: "w:sdtEndPr"}}
		e.EncodeElement(_acgde.SdtEndPr, _ececg)
	}
	if _acgde.SdtContent != nil {
		_fgebfe := _d.StartElement{Name: _d.Name{Local: "w:sdtContent"}}
		e.EncodeElement(_acgde.SdtContent, _fgebfe)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SdtDateMappingType and its children, prefixing error messages with path
func (_defbff *CT_SdtDateMappingType) ValidateWithPath(path string) error {
	if _aadef := _defbff.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _aadef != nil {
		return _aadef
	}
	return nil
}
func NewCT_WebSettings() *CT_WebSettings { _dcffb := &CT_WebSettings{}; return _dcffb }

type CT_RPr struct {

	// Referenced Character Style
	RStyle *CT_String

	// Run Fonts
	RFonts *CT_Fonts

	// Bold
	B *CT_OnOff

	// Complex Script Bold
	BCs *CT_OnOff

	// Italics
	I *CT_OnOff

	// Complex Script Italics
	ICs *CT_OnOff

	// Display All Characters As Capital Letters
	Caps *CT_OnOff

	// Small Caps
	SmallCaps *CT_OnOff

	// Single Strikethrough
	Strike *CT_OnOff

	// Double Strikethrough
	Dstrike *CT_OnOff

	// Display Character Outline
	Outline *CT_OnOff

	// Shadow
	Shadow *CT_OnOff

	// Embossing
	Emboss *CT_OnOff

	// Imprinting
	Imprint *CT_OnOff

	// Do Not Check Spelling or Grammar
	NoProof *CT_OnOff

	// Use Document Grid Settings For Inter-Character Spacing
	SnapToGrid *CT_OnOff

	// Hidden Text
	Vanish *CT_OnOff

	// Web Hidden Text
	WebHidden *CT_OnOff

	// Run Content Color
	Color *CT_Color

	// Character Spacing Adjustment
	Spacing *CT_SignedTwipsMeasure

	// Expanded/Compressed Text
	W *CT_TextScale

	// Font Kerning
	Kern *CT_HpsMeasure

	// Vertically Raised or Lowered Text
	Position *CT_SignedHpsMeasure

	// Non-Complex Script Font Size
	Sz *CT_HpsMeasure

	// Complex Script Font Size
	SzCs *CT_HpsMeasure

	// Text Highlighting
	Highlight *CT_Highlight

	// Underline
	U *CT_Underline

	// Animated Text Effect
	Effect *CT_TextEffect

	// Text Border
	Bdr *CT_Border

	// Run Shading
	Shd *CT_Shd

	// Manual Run Width
	FitText *CT_FitText

	// Subscript/Superscript Text
	VertAlign *CT_VerticalAlignRun

	// Right To Left Text
	Rtl *CT_OnOff

	// Use Complex Script Formatting on Run
	Cs *CT_OnOff

	// Emphasis Mark
	Em *CT_Em

	// Languages for Run Content
	Lang *CT_Language

	// East Asian Typography Settings
	EastAsianLayout *CT_EastAsianLayout

	// Paragraph Mark Is Always Hidden
	SpecVanish *CT_OnOff

	// Office Open XML Math
	OMath *CT_OnOff

	// Revision Information for Run Properties
	RPrChange *CT_RPrChange
}

// Validate validates the WdCT_WordprocessingCanvas and its children
func (_ggadd *WdCT_WordprocessingCanvas) Validate() error {
	return _ggadd.ValidateWithPath("WdCT_WordprocessingCanvas")
}

type CT_AltChunk struct {
	IdAttr *string

	// External Content Import Properties
	AltChunkPr *CT_AltChunkPr
}

// Validate validates the CT_TwipsMeasure and its children
func (_ebfgc *CT_TwipsMeasure) Validate() error { return _ebfgc.ValidateWithPath("CT_TwipsMeasure") }

// Validate validates the CT_TcMar and its children
func (_ggfcg *CT_TcMar) Validate() error { return _ggfcg.ValidateWithPath("CT_TcMar") }
func (_effec *CT_MailMergeDocType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_effec.ValAttr = ST_MailMergeDocType(1)
	for _, _cadca := range start.Attr {
		if _cadca.Name.Local == "val" {
			_effec.ValAttr.UnmarshalXMLAttr(_cadca)
			continue
		}
	}
	for {
		_bdccg, _cceee := d.Token()
		if _cceee != nil {
			return _b.Errorf("parsing\u0020CT_MailMergeDocType:\u0020\u0025s", _cceee)
		}
		if _cedee, _ecgfa := _bdccg.(_d.EndElement); _ecgfa && _cedee.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LongHexNumber and its children, prefixing error messages with path
func (_feebe *CT_LongHexNumber) ValidateWithPath(path string) error { return nil }
func NewCT_FFTextInput() *CT_FFTextInput                            { _gdcaf := &CT_FFTextInput{}; return _gdcaf }

// Validate validates the CT_HdrFtrRef and its children
func (_agaad *CT_HdrFtrRef) Validate() error { return _agaad.ValidateWithPath("CT_HdrFtrRef") }
func (_afacc *WdCT_WordprocessingShapeChoice1) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dfefb:
	for {
		_caeffc, _afbbe := d.Token()
		if _afbbe != nil {
			return _afbbe
		}
		switch _fbagg := _caeffc.(type) {
		case _d.StartElement:
			switch _fbagg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "txbx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "txbx"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "txbx"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "txbx"}:
				_afacc.Txbx = NewWdCT_TextboxInfo()
				if _fedede := d.DecodeElement(_afacc.Txbx, &_fbagg); _fedede != nil {
					return _fedede
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "linkedTxbx"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "linkedTxbx"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "linkedTxbx"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "linkedTxbx"}:
				_afacc.LinkedTxbx = NewWdCT_LinkedTextboxInformation()
				if _fedgd := d.DecodeElement(_afacc.LinkedTxbx, &_fbagg); _fedgd != nil {
					return _fedgd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_WordprocessingShapeChoice1\u0020\u0025v", _fbagg.Name)
				if _cbdfeb := d.Skip(); _cbdfeb != nil {
					return _cbdfeb
				}
			}
		case _d.EndElement:
			break _dfefb
		case _d.CharData:
		}
	}
	return nil
}
func (_fcbffg *GlossaryDocument) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcbffg.CT_GlossaryDocument = *NewCT_GlossaryDocument()
_dfcgb:
	for {
		_ebggc, _eebgae := d.Token()
		if _eebgae != nil {
			return _eebgae
		}
		switch _gfbddc := _ebggc.(type) {
		case _d.StartElement:
			switch _gfbddc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "background"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "background"}:
				_fcbffg.Background = NewCT_Background()
				if _egfbe := d.DecodeElement(_fcbffg.Background, &_gfbddc); _egfbe != nil {
					return _egfbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docParts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docParts"}:
				_fcbffg.DocParts = NewCT_DocParts()
				if _bggcd := d.DecodeElement(_fcbffg.DocParts, &_gfbddc); _bggcd != nil {
					return _bggcd
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020GlossaryDocument\u0020\u0025v", _gfbddc.Name)
				if _dcgef := d.Skip(); _dcgef != nil {
					return _dcgef
				}
			}
		case _d.EndElement:
			break _dfcgb
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_ContentCellContent and its children, prefixing error messages with path
func (_bcdcbf *EG_ContentCellContent) ValidateWithPath(path string) error {
	for _dgdbd, _ggeca := range _bcdcbf.Tc {
		if _eeaebc := _ggeca.ValidateWithPath(_b.Sprintf("\u0025s\u002fTc\u005b\u0025d]", path, _dgdbd)); _eeaebc != nil {
			return _eeaebc
		}
	}
	if _bcdcbf.CustomXml != nil {
		if _ggaeb := _bcdcbf.CustomXml.ValidateWithPath(path + "\u002fCustomXml"); _ggaeb != nil {
			return _ggaeb
		}
	}
	if _bcdcbf.Sdt != nil {
		if _gddgd := _bcdcbf.Sdt.ValidateWithPath(path + "\u002fSdt"); _gddgd != nil {
			return _gddgd
		}
	}
	for _cabdd, _bgdaaa := range _bcdcbf.EG_RunLevelElts {
		if _gbcccff := _bgdaaa.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_RunLevelElts\u005b\u0025d\u005d", path, _cabdd)); _gbcccff != nil {
			return _gbcccff
		}
	}
	return nil
}
func (_dcgcg ST_Em) ValidateWithPath(path string) error {
	switch _dcgcg {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dcgcg))
	}
	return nil
}

// Validate validates the CT_FontsList and its children
func (_cccd *CT_FontsList) Validate() error { return _cccd.ValidateWithPath("CT_FontsList") }
func (_dgcac *ST_PageBorderOffset) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cbeag, _dbceaf := d.Token()
	if _dbceaf != nil {
		return _dbceaf
	}
	if _edgdef, _geaccd := _cbeag.(_d.EndElement); _geaccd && _edgdef.Name == start.Name {
		*_dgcac = 1
		return nil
	}
	if _ffdbeb, _afdffbdb := _cbeag.(_d.CharData); !_afdffbdb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cbeag)
	} else {
		switch string(_ffdbeb) {
		case "":
			*_dgcac = 0
		case "page":
			*_dgcac = 1
		case "text":
			*_dgcac = 2
		}
	}
	_cbeag, _dbceaf = d.Token()
	if _dbceaf != nil {
		return _dbceaf
	}
	if _bbeebd, _gfbcaa := _cbeag.(_d.EndElement); _gfbcaa && _bbeebd.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cbeag)
}

// ValidateWithPath validates the CT_Settings and its children, prefixing error messages with path
func (_eeabe *CT_Settings) ValidateWithPath(path string) error {
	if _eeabe.WriteProtection != nil {
		if _gedea := _eeabe.WriteProtection.ValidateWithPath(path + "\u002fWriteProtection"); _gedea != nil {
			return _gedea
		}
	}
	if _eeabe.View != nil {
		if _fcebcf := _eeabe.View.ValidateWithPath(path + "\u002fView"); _fcebcf != nil {
			return _fcebcf
		}
	}
	if _eeabe.Zoom != nil {
		if _adfdc := _eeabe.Zoom.ValidateWithPath(path + "\u002fZoom"); _adfdc != nil {
			return _adfdc
		}
	}
	if _eeabe.RemovePersonalInformation != nil {
		if _agbcc := _eeabe.RemovePersonalInformation.ValidateWithPath(path + "\u002fRemovePersonalInformation"); _agbcc != nil {
			return _agbcc
		}
	}
	if _eeabe.RemoveDateAndTime != nil {
		if _fgecbg := _eeabe.RemoveDateAndTime.ValidateWithPath(path + "\u002fRemoveDateAndTime"); _fgecbg != nil {
			return _fgecbg
		}
	}
	if _eeabe.DoNotDisplayPageBoundaries != nil {
		if _acee := _eeabe.DoNotDisplayPageBoundaries.ValidateWithPath(path + "/DoNotDisplayPageBoundaries"); _acee != nil {
			return _acee
		}
	}
	if _eeabe.DisplayBackgroundShape != nil {
		if _gcgce := _eeabe.DisplayBackgroundShape.ValidateWithPath(path + "\u002fDisplayBackgroundShape"); _gcgce != nil {
			return _gcgce
		}
	}
	if _eeabe.PrintPostScriptOverText != nil {
		if _decgb := _eeabe.PrintPostScriptOverText.ValidateWithPath(path + "\u002fPrintPostScriptOverText"); _decgb != nil {
			return _decgb
		}
	}
	if _eeabe.PrintFractionalCharacterWidth != nil {
		if _cgdcbaa := _eeabe.PrintFractionalCharacterWidth.ValidateWithPath(path + "\u002fPrintFractionalCharacterWidth"); _cgdcbaa != nil {
			return _cgdcbaa
		}
	}
	if _eeabe.PrintFormsData != nil {
		if _fefee := _eeabe.PrintFormsData.ValidateWithPath(path + "\u002fPrintFormsData"); _fefee != nil {
			return _fefee
		}
	}
	if _eeabe.EmbedTrueTypeFonts != nil {
		if _agdbcf := _eeabe.EmbedTrueTypeFonts.ValidateWithPath(path + "\u002fEmbedTrueTypeFonts"); _agdbcf != nil {
			return _agdbcf
		}
	}
	if _eeabe.EmbedSystemFonts != nil {
		if _efgce := _eeabe.EmbedSystemFonts.ValidateWithPath(path + "\u002fEmbedSystemFonts"); _efgce != nil {
			return _efgce
		}
	}
	if _eeabe.SaveSubsetFonts != nil {
		if _eaefb := _eeabe.SaveSubsetFonts.ValidateWithPath(path + "\u002fSaveSubsetFonts"); _eaefb != nil {
			return _eaefb
		}
	}
	if _eeabe.SaveFormsData != nil {
		if _dbacaa := _eeabe.SaveFormsData.ValidateWithPath(path + "\u002fSaveFormsData"); _dbacaa != nil {
			return _dbacaa
		}
	}
	if _eeabe.MirrorMargins != nil {
		if _effdf := _eeabe.MirrorMargins.ValidateWithPath(path + "\u002fMirrorMargins"); _effdf != nil {
			return _effdf
		}
	}
	if _eeabe.AlignBordersAndEdges != nil {
		if _dgecb := _eeabe.AlignBordersAndEdges.ValidateWithPath(path + "/AlignBordersAndEdges"); _dgecb != nil {
			return _dgecb
		}
	}
	if _eeabe.BordersDoNotSurroundHeader != nil {
		if _gbagf := _eeabe.BordersDoNotSurroundHeader.ValidateWithPath(path + "/BordersDoNotSurroundHeader"); _gbagf != nil {
			return _gbagf
		}
	}
	if _eeabe.BordersDoNotSurroundFooter != nil {
		if _dacda := _eeabe.BordersDoNotSurroundFooter.ValidateWithPath(path + "/BordersDoNotSurroundFooter"); _dacda != nil {
			return _dacda
		}
	}
	if _eeabe.GutterAtTop != nil {
		if _deeed := _eeabe.GutterAtTop.ValidateWithPath(path + "\u002fGutterAtTop"); _deeed != nil {
			return _deeed
		}
	}
	if _eeabe.HideSpellingErrors != nil {
		if _aecab := _eeabe.HideSpellingErrors.ValidateWithPath(path + "\u002fHideSpellingErrors"); _aecab != nil {
			return _aecab
		}
	}
	if _eeabe.HideGrammaticalErrors != nil {
		if _efgfe := _eeabe.HideGrammaticalErrors.ValidateWithPath(path + "\u002fHideGrammaticalErrors"); _efgfe != nil {
			return _efgfe
		}
	}
	for _bcafcb, _egbgaf := range _eeabe.ActiveWritingStyle {
		if _aaabf := _egbgaf.ValidateWithPath(_b.Sprintf("\u0025s\u002fActiveWritingStyle\u005b\u0025d]", path, _bcafcb)); _aaabf != nil {
			return _aaabf
		}
	}
	if _eeabe.ProofState != nil {
		if _cfgegb := _eeabe.ProofState.ValidateWithPath(path + "/ProofState"); _cfgegb != nil {
			return _cfgegb
		}
	}
	if _eeabe.FormsDesign != nil {
		if _fggbe := _eeabe.FormsDesign.ValidateWithPath(path + "\u002fFormsDesign"); _fggbe != nil {
			return _fggbe
		}
	}
	if _eeabe.AttachedTemplate != nil {
		if _edagd := _eeabe.AttachedTemplate.ValidateWithPath(path + "\u002fAttachedTemplate"); _edagd != nil {
			return _edagd
		}
	}
	if _eeabe.LinkStyles != nil {
		if _faceb := _eeabe.LinkStyles.ValidateWithPath(path + "/LinkStyles"); _faceb != nil {
			return _faceb
		}
	}
	if _eeabe.StylePaneFormatFilter != nil {
		if _gbege := _eeabe.StylePaneFormatFilter.ValidateWithPath(path + "\u002fStylePaneFormatFilter"); _gbege != nil {
			return _gbege
		}
	}
	if _eeabe.StylePaneSortMethod != nil {
		if _bafgc := _eeabe.StylePaneSortMethod.ValidateWithPath(path + "/StylePaneSortMethod"); _bafgc != nil {
			return _bafgc
		}
	}
	if _eeabe.DocumentType != nil {
		if _gcddb := _eeabe.DocumentType.ValidateWithPath(path + "\u002fDocumentType"); _gcddb != nil {
			return _gcddb
		}
	}
	if _eeabe.MailMerge != nil {
		if _aggaca := _eeabe.MailMerge.ValidateWithPath(path + "\u002fMailMerge"); _aggaca != nil {
			return _aggaca
		}
	}
	if _eeabe.RevisionView != nil {
		if _bdaadd := _eeabe.RevisionView.ValidateWithPath(path + "\u002fRevisionView"); _bdaadd != nil {
			return _bdaadd
		}
	}
	if _eeabe.TrackRevisions != nil {
		if _bacdc := _eeabe.TrackRevisions.ValidateWithPath(path + "\u002fTrackRevisions"); _bacdc != nil {
			return _bacdc
		}
	}
	if _eeabe.DoNotTrackMoves != nil {
		if _adggc := _eeabe.DoNotTrackMoves.ValidateWithPath(path + "\u002fDoNotTrackMoves"); _adggc != nil {
			return _adggc
		}
	}
	if _eeabe.DoNotTrackFormatting != nil {
		if _bbgfd := _eeabe.DoNotTrackFormatting.ValidateWithPath(path + "/DoNotTrackFormatting"); _bbgfd != nil {
			return _bbgfd
		}
	}
	if _eeabe.DocumentProtection != nil {
		if _dgabc := _eeabe.DocumentProtection.ValidateWithPath(path + "\u002fDocumentProtection"); _dgabc != nil {
			return _dgabc
		}
	}
	if _eeabe.AutoFormatOverride != nil {
		if _baada := _eeabe.AutoFormatOverride.ValidateWithPath(path + "\u002fAutoFormatOverride"); _baada != nil {
			return _baada
		}
	}
	if _eeabe.StyleLockTheme != nil {
		if _fdadc := _eeabe.StyleLockTheme.ValidateWithPath(path + "\u002fStyleLockTheme"); _fdadc != nil {
			return _fdadc
		}
	}
	if _eeabe.StyleLockQFSet != nil {
		if _abefb := _eeabe.StyleLockQFSet.ValidateWithPath(path + "\u002fStyleLockQFSet"); _abefb != nil {
			return _abefb
		}
	}
	if _eeabe.DefaultTabStop != nil {
		if _efdbc := _eeabe.DefaultTabStop.ValidateWithPath(path + "\u002fDefaultTabStop"); _efdbc != nil {
			return _efdbc
		}
	}
	if _eeabe.AutoHyphenation != nil {
		if _cgebf := _eeabe.AutoHyphenation.ValidateWithPath(path + "\u002fAutoHyphenation"); _cgebf != nil {
			return _cgebf
		}
	}
	if _eeabe.ConsecutiveHyphenLimit != nil {
		if _baade := _eeabe.ConsecutiveHyphenLimit.ValidateWithPath(path + "\u002fConsecutiveHyphenLimit"); _baade != nil {
			return _baade
		}
	}
	if _eeabe.HyphenationZone != nil {
		if _gacc := _eeabe.HyphenationZone.ValidateWithPath(path + "\u002fHyphenationZone"); _gacc != nil {
			return _gacc
		}
	}
	if _eeabe.DoNotHyphenateCaps != nil {
		if _gaege := _eeabe.DoNotHyphenateCaps.ValidateWithPath(path + "\u002fDoNotHyphenateCaps"); _gaege != nil {
			return _gaege
		}
	}
	if _eeabe.ShowEnvelope != nil {
		if _eefdc := _eeabe.ShowEnvelope.ValidateWithPath(path + "\u002fShowEnvelope"); _eefdc != nil {
			return _eefdc
		}
	}
	if _eeabe.SummaryLength != nil {
		if _baeec := _eeabe.SummaryLength.ValidateWithPath(path + "\u002fSummaryLength"); _baeec != nil {
			return _baeec
		}
	}
	if _eeabe.ClickAndTypeStyle != nil {
		if _efgced := _eeabe.ClickAndTypeStyle.ValidateWithPath(path + "\u002fClickAndTypeStyle"); _efgced != nil {
			return _efgced
		}
	}
	if _eeabe.DefaultTableStyle != nil {
		if _bdabg := _eeabe.DefaultTableStyle.ValidateWithPath(path + "\u002fDefaultTableStyle"); _bdabg != nil {
			return _bdabg
		}
	}
	if _eeabe.EvenAndOddHeaders != nil {
		if _aaedgc := _eeabe.EvenAndOddHeaders.ValidateWithPath(path + "\u002fEvenAndOddHeaders"); _aaedgc != nil {
			return _aaedgc
		}
	}
	if _eeabe.BookFoldRevPrinting != nil {
		if _eceebd := _eeabe.BookFoldRevPrinting.ValidateWithPath(path + "/BookFoldRevPrinting"); _eceebd != nil {
			return _eceebd
		}
	}
	if _eeabe.BookFoldPrinting != nil {
		if _gcgcec := _eeabe.BookFoldPrinting.ValidateWithPath(path + "\u002fBookFoldPrinting"); _gcgcec != nil {
			return _gcgcec
		}
	}
	if _eeabe.BookFoldPrintingSheets != nil {
		if _edfcf := _eeabe.BookFoldPrintingSheets.ValidateWithPath(path + "\u002fBookFoldPrintingSheets"); _edfcf != nil {
			return _edfcf
		}
	}
	if _eeabe.DrawingGridHorizontalSpacing != nil {
		if _ebecb := _eeabe.DrawingGridHorizontalSpacing.ValidateWithPath(path + "\u002fDrawingGridHorizontalSpacing"); _ebecb != nil {
			return _ebecb
		}
	}
	if _eeabe.DrawingGridVerticalSpacing != nil {
		if _aagebc := _eeabe.DrawingGridVerticalSpacing.ValidateWithPath(path + "/DrawingGridVerticalSpacing"); _aagebc != nil {
			return _aagebc
		}
	}
	if _eeabe.DisplayHorizontalDrawingGridEvery != nil {
		if _fdgba := _eeabe.DisplayHorizontalDrawingGridEvery.ValidateWithPath(path + "\u002fDisplayHorizontalDrawingGridEvery"); _fdgba != nil {
			return _fdgba
		}
	}
	if _eeabe.DisplayVerticalDrawingGridEvery != nil {
		if _daccb := _eeabe.DisplayVerticalDrawingGridEvery.ValidateWithPath(path + "\u002fDisplayVerticalDrawingGridEvery"); _daccb != nil {
			return _daccb
		}
	}
	if _eeabe.DoNotUseMarginsForDrawingGridOrigin != nil {
		if _adacg := _eeabe.DoNotUseMarginsForDrawingGridOrigin.ValidateWithPath(path + "\u002fDoNotUseMarginsForDrawingGridOrigin"); _adacg != nil {
			return _adacg
		}
	}
	if _eeabe.DrawingGridHorizontalOrigin != nil {
		if _caagb := _eeabe.DrawingGridHorizontalOrigin.ValidateWithPath(path + "\u002fDrawingGridHorizontalOrigin"); _caagb != nil {
			return _caagb
		}
	}
	if _eeabe.DrawingGridVerticalOrigin != nil {
		if _afcef := _eeabe.DrawingGridVerticalOrigin.ValidateWithPath(path + "\u002fDrawingGridVerticalOrigin"); _afcef != nil {
			return _afcef
		}
	}
	if _eeabe.DoNotShadeFormData != nil {
		if _dadgc := _eeabe.DoNotShadeFormData.ValidateWithPath(path + "\u002fDoNotShadeFormData"); _dadgc != nil {
			return _dadgc
		}
	}
	if _eeabe.NoPunctuationKerning != nil {
		if _bgdda := _eeabe.NoPunctuationKerning.ValidateWithPath(path + "/NoPunctuationKerning"); _bgdda != nil {
			return _bgdda
		}
	}
	if _eeabe.CharacterSpacingControl != nil {
		if _gcdbf := _eeabe.CharacterSpacingControl.ValidateWithPath(path + "\u002fCharacterSpacingControl"); _gcdbf != nil {
			return _gcdbf
		}
	}
	if _eeabe.PrintTwoOnOne != nil {
		if _ffgbb := _eeabe.PrintTwoOnOne.ValidateWithPath(path + "\u002fPrintTwoOnOne"); _ffgbb != nil {
			return _ffgbb
		}
	}
	if _eeabe.StrictFirstAndLastChars != nil {
		if _ccabb := _eeabe.StrictFirstAndLastChars.ValidateWithPath(path + "\u002fStrictFirstAndLastChars"); _ccabb != nil {
			return _ccabb
		}
	}
	if _eeabe.NoLineBreaksAfter != nil {
		if _ggcfc := _eeabe.NoLineBreaksAfter.ValidateWithPath(path + "\u002fNoLineBreaksAfter"); _ggcfc != nil {
			return _ggcfc
		}
	}
	if _eeabe.NoLineBreaksBefore != nil {
		if _fbbdf := _eeabe.NoLineBreaksBefore.ValidateWithPath(path + "\u002fNoLineBreaksBefore"); _fbbdf != nil {
			return _fbbdf
		}
	}
	if _eeabe.SavePreviewPicture != nil {
		if _bgcdc := _eeabe.SavePreviewPicture.ValidateWithPath(path + "\u002fSavePreviewPicture"); _bgcdc != nil {
			return _bgcdc
		}
	}
	if _eeabe.DoNotValidateAgainstSchema != nil {
		if _gggba := _eeabe.DoNotValidateAgainstSchema.ValidateWithPath(path + "/DoNotValidateAgainstSchema"); _gggba != nil {
			return _gggba
		}
	}
	if _eeabe.SaveInvalidXml != nil {
		if _feage := _eeabe.SaveInvalidXml.ValidateWithPath(path + "\u002fSaveInvalidXml"); _feage != nil {
			return _feage
		}
	}
	if _eeabe.IgnoreMixedContent != nil {
		if _dacae := _eeabe.IgnoreMixedContent.ValidateWithPath(path + "\u002fIgnoreMixedContent"); _dacae != nil {
			return _dacae
		}
	}
	if _eeabe.AlwaysShowPlaceholderText != nil {
		if _cfgcg := _eeabe.AlwaysShowPlaceholderText.ValidateWithPath(path + "\u002fAlwaysShowPlaceholderText"); _cfgcg != nil {
			return _cfgcg
		}
	}
	if _eeabe.DoNotDemarcateInvalidXml != nil {
		if _ffgga := _eeabe.DoNotDemarcateInvalidXml.ValidateWithPath(path + "\u002fDoNotDemarcateInvalidXml"); _ffgga != nil {
			return _ffgga
		}
	}
	if _eeabe.SaveXmlDataOnly != nil {
		if _agfdcb := _eeabe.SaveXmlDataOnly.ValidateWithPath(path + "\u002fSaveXmlDataOnly"); _agfdcb != nil {
			return _agfdcb
		}
	}
	if _eeabe.UseXSLTWhenSaving != nil {
		if _gbgfad := _eeabe.UseXSLTWhenSaving.ValidateWithPath(path + "\u002fUseXSLTWhenSaving"); _gbgfad != nil {
			return _gbgfad
		}
	}
	if _eeabe.SaveThroughXslt != nil {
		if _baebg := _eeabe.SaveThroughXslt.ValidateWithPath(path + "\u002fSaveThroughXslt"); _baebg != nil {
			return _baebg
		}
	}
	if _eeabe.ShowXMLTags != nil {
		if _gggbe := _eeabe.ShowXMLTags.ValidateWithPath(path + "\u002fShowXMLTags"); _gggbe != nil {
			return _gggbe
		}
	}
	if _eeabe.AlwaysMergeEmptyNamespace != nil {
		if _gabfe := _eeabe.AlwaysMergeEmptyNamespace.ValidateWithPath(path + "\u002fAlwaysMergeEmptyNamespace"); _gabfe != nil {
			return _gabfe
		}
	}
	if _eeabe.UpdateFields != nil {
		if _gfcdg := _eeabe.UpdateFields.ValidateWithPath(path + "\u002fUpdateFields"); _gfcdg != nil {
			return _gfcdg
		}
	}
	if _eeabe.HdrShapeDefaults != nil {
		if _caade := _eeabe.HdrShapeDefaults.ValidateWithPath(path + "\u002fHdrShapeDefaults"); _caade != nil {
			return _caade
		}
	}
	if _eeabe.FootnotePr != nil {
		if _fccgfg := _eeabe.FootnotePr.ValidateWithPath(path + "/FootnotePr"); _fccgfg != nil {
			return _fccgfg
		}
	}
	if _eeabe.EndnotePr != nil {
		if _afbgc := _eeabe.EndnotePr.ValidateWithPath(path + "\u002fEndnotePr"); _afbgc != nil {
			return _afbgc
		}
	}
	if _eeabe.Compat != nil {
		if _caefb := _eeabe.Compat.ValidateWithPath(path + "\u002fCompat"); _caefb != nil {
			return _caefb
		}
	}
	if _eeabe.DocVars != nil {
		if _ggfdf := _eeabe.DocVars.ValidateWithPath(path + "\u002fDocVars"); _ggfdf != nil {
			return _ggfdf
		}
	}
	if _eeabe.Rsids != nil {
		if _bcaab := _eeabe.Rsids.ValidateWithPath(path + "\u002fRsids"); _bcaab != nil {
			return _bcaab
		}
	}
	if _eeabe.MathPr != nil {
		if _fbdbcf := _eeabe.MathPr.ValidateWithPath(path + "\u002fMathPr"); _fbdbcf != nil {
			return _fbdbcf
		}
	}
	for _ccega, _bfdeg := range _eeabe.AttachedSchema {
		if _gadag := _bfdeg.ValidateWithPath(_b.Sprintf("%s\u002fAttachedSchema\u005b\u0025d\u005d", path, _ccega)); _gadag != nil {
			return _gadag
		}
	}
	if _eeabe.ThemeFontLang != nil {
		if _efffb := _eeabe.ThemeFontLang.ValidateWithPath(path + "\u002fThemeFontLang"); _efffb != nil {
			return _efffb
		}
	}
	if _eeabe.ClrSchemeMapping != nil {
		if _cfdde := _eeabe.ClrSchemeMapping.ValidateWithPath(path + "\u002fClrSchemeMapping"); _cfdde != nil {
			return _cfdde
		}
	}
	if _eeabe.DoNotIncludeSubdocsInStats != nil {
		if _ggaae := _eeabe.DoNotIncludeSubdocsInStats.ValidateWithPath(path + "/DoNotIncludeSubdocsInStats"); _ggaae != nil {
			return _ggaae
		}
	}
	if _eeabe.DoNotAutoCompressPictures != nil {
		if _befag := _eeabe.DoNotAutoCompressPictures.ValidateWithPath(path + "\u002fDoNotAutoCompressPictures"); _befag != nil {
			return _befag
		}
	}
	if _eeabe.ForceUpgrade != nil {
		if _gggfdf := _eeabe.ForceUpgrade.ValidateWithPath(path + "\u002fForceUpgrade"); _gggfdf != nil {
			return _gggfdf
		}
	}
	if _eeabe.Captions != nil {
		if _adfaba := _eeabe.Captions.ValidateWithPath(path + "\u002fCaptions"); _adfaba != nil {
			return _adfaba
		}
	}
	if _eeabe.ReadModeInkLockDown != nil {
		if _afeedf := _eeabe.ReadModeInkLockDown.ValidateWithPath(path + "/ReadModeInkLockDown"); _afeedf != nil {
			return _afeedf
		}
	}
	for _gedgb, _bcdbc := range _eeabe.SmartTagType {
		if _aafdc := _bcdbc.ValidateWithPath(_b.Sprintf("\u0025s\u002fSmartTagType\u005b\u0025d\u005d", path, _gedgb)); _aafdc != nil {
			return _aafdc
		}
	}
	if _eeabe.SchemaLibrary != nil {
		if _bageab := _eeabe.SchemaLibrary.ValidateWithPath(path + "\u002fSchemaLibrary"); _bageab != nil {
			return _bageab
		}
	}
	if _eeabe.ShapeDefaults != nil {
		if _deecf := _eeabe.ShapeDefaults.ValidateWithPath(path + "\u002fShapeDefaults"); _deecf != nil {
			return _deecf
		}
	}
	if _eeabe.DoNotEmbedSmartTags != nil {
		if _bfgeg := _eeabe.DoNotEmbedSmartTags.ValidateWithPath(path + "/DoNotEmbedSmartTags"); _bfgeg != nil {
			return _bfgeg
		}
	}
	if _eeabe.DecimalSymbol != nil {
		if _cceedf := _eeabe.DecimalSymbol.ValidateWithPath(path + "\u002fDecimalSymbol"); _cceedf != nil {
			return _cceedf
		}
	}
	if _eeabe.ListSeparator != nil {
		if _begfbd := _eeabe.ListSeparator.ValidateWithPath(path + "\u002fListSeparator"); _begfbd != nil {
			return _begfbd
		}
	}
	return nil
}
func (_deccec *EG_ContentRunContent) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ggead:
	for {
		_bgeef, _fgeddc := d.Token()
		if _fgeddc != nil {
			return _fgeddc
		}
		switch _fdeab := _bgeef.(type) {
		case _d.StartElement:
			switch _fdeab.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_deccec.CustomXml = NewCT_CustomXmlRun()
				if _egfgg := d.DecodeElement(_deccec.CustomXml, &_fdeab); _egfgg != nil {
					return _egfgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_deccec.SmartTag = NewCT_SmartTagRun()
				if _gdbac := d.DecodeElement(_deccec.SmartTag, &_fdeab); _gdbac != nil {
					return _gdbac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_deccec.Sdt = NewCT_SdtRun()
				if _dgcagf := d.DecodeElement(_deccec.Sdt, &_fdeab); _dgcagf != nil {
					return _dgcagf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_deccec.Dir = NewCT_DirContentRun()
				if _gfacbd := d.DecodeElement(_deccec.Dir, &_fdeab); _gfacbd != nil {
					return _gfacbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_deccec.Bdo = NewCT_BdoContentRun()
				if _fedgc := d.DecodeElement(_deccec.Bdo, &_fdeab); _fedgc != nil {
					return _fedgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_deccec.R = NewCT_R()
				if _gfabge := d.DecodeElement(_deccec.R, &_fdeab); _gfabge != nil {
					return _gfabge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_bacdb := NewEG_RunLevelElts()
				_bacdb.ProofErr = NewCT_ProofErr()
				if _ecebd := d.DecodeElement(_bacdb.ProofErr, &_fdeab); _ecebd != nil {
					return _ecebd
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _bacdb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_fcbbe := NewEG_RunLevelElts()
				_fcbbe.PermStart = NewCT_PermStart()
				if _cfefgc := d.DecodeElement(_fcbbe.PermStart, &_fdeab); _cfefgc != nil {
					return _cfefgc
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _fcbbe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_fdcfg := NewEG_RunLevelElts()
				_fdcfg.PermEnd = NewCT_Perm()
				if _dadggg := d.DecodeElement(_fdcfg.PermEnd, &_fdeab); _dadggg != nil {
					return _dadggg
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _fdcfg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_fcegd := NewEG_RunLevelElts()
				_fcegd.Ins = NewCT_RunTrackChange()
				if _fbcag := d.DecodeElement(_fcegd.Ins, &_fdeab); _fbcag != nil {
					return _fbcag
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _fcegd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_cdafe := NewEG_RunLevelElts()
				_cdafe.Del = NewCT_RunTrackChange()
				if _bfecc := d.DecodeElement(_cdafe.Del, &_fdeab); _bfecc != nil {
					return _bfecc
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _cdafe)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_bcfcd := NewEG_RunLevelElts()
				_bcfcd.MoveFrom = NewCT_RunTrackChange()
				if _bfaagb := d.DecodeElement(_bcfcd.MoveFrom, &_fdeab); _bfaagb != nil {
					return _bfaagb
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _bcfcd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_ebfgbc := NewEG_RunLevelElts()
				_ebfgbc.MoveTo = NewCT_RunTrackChange()
				if _bdgcc := d.DecodeElement(_ebfgbc.MoveTo, &_fdeab); _bdgcc != nil {
					return _bdgcc
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _ebfgbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_cbadg := NewEG_RunLevelElts()
				_geagcc := NewEG_RangeMarkupElements()
				_geagcc.BookmarkStart = NewCT_Bookmark()
				if _dfbed := d.DecodeElement(_geagcc.BookmarkStart, &_fdeab); _dfbed != nil {
					return _dfbed
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _cbadg)
				_cbadg.EG_RangeMarkupElements = append(_cbadg.EG_RangeMarkupElements, _geagcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_cfagg := NewEG_RunLevelElts()
				_bgaagb := NewEG_RangeMarkupElements()
				_bgaagb.BookmarkEnd = NewCT_MarkupRange()
				if _eggfaa := d.DecodeElement(_bgaagb.BookmarkEnd, &_fdeab); _eggfaa != nil {
					return _eggfaa
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _cfagg)
				_cfagg.EG_RangeMarkupElements = append(_cfagg.EG_RangeMarkupElements, _bgaagb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_bdcgdg := NewEG_RunLevelElts()
				_dabgfa := NewEG_RangeMarkupElements()
				_dabgfa.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gcgdc := d.DecodeElement(_dabgfa.MoveFromRangeStart, &_fdeab); _gcgdc != nil {
					return _gcgdc
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _bdcgdg)
				_bdcgdg.EG_RangeMarkupElements = append(_bdcgdg.EG_RangeMarkupElements, _dabgfa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_degbd := NewEG_RunLevelElts()
				_gagea := NewEG_RangeMarkupElements()
				_gagea.MoveFromRangeEnd = NewCT_MarkupRange()
				if _ccea := d.DecodeElement(_gagea.MoveFromRangeEnd, &_fdeab); _ccea != nil {
					return _ccea
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _degbd)
				_degbd.EG_RangeMarkupElements = append(_degbd.EG_RangeMarkupElements, _gagea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_acbae := NewEG_RunLevelElts()
				_cgbfd := NewEG_RangeMarkupElements()
				_cgbfd.MoveToRangeStart = NewCT_MoveBookmark()
				if _ccccd := d.DecodeElement(_cgbfd.MoveToRangeStart, &_fdeab); _ccccd != nil {
					return _ccccd
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _acbae)
				_acbae.EG_RangeMarkupElements = append(_acbae.EG_RangeMarkupElements, _cgbfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_gagfc := NewEG_RunLevelElts()
				_gdbgg := NewEG_RangeMarkupElements()
				_gdbgg.MoveToRangeEnd = NewCT_MarkupRange()
				if _beggc := d.DecodeElement(_gdbgg.MoveToRangeEnd, &_fdeab); _beggc != nil {
					return _beggc
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _gagfc)
				_gagfc.EG_RangeMarkupElements = append(_gagfc.EG_RangeMarkupElements, _gdbgg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_ebbeb := NewEG_RunLevelElts()
				_adeecf := NewEG_RangeMarkupElements()
				_adeecf.CommentRangeStart = NewCT_MarkupRange()
				if _aedac := d.DecodeElement(_adeecf.CommentRangeStart, &_fdeab); _aedac != nil {
					return _aedac
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _ebbeb)
				_ebbeb.EG_RangeMarkupElements = append(_ebbeb.EG_RangeMarkupElements, _adeecf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_dabdc := NewEG_RunLevelElts()
				_dgdag := NewEG_RangeMarkupElements()
				_dgdag.CommentRangeEnd = NewCT_MarkupRange()
				if _bfbad := d.DecodeElement(_dgdag.CommentRangeEnd, &_fdeab); _bfbad != nil {
					return _bfbad
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _dabdc)
				_dabdc.EG_RangeMarkupElements = append(_dabdc.EG_RangeMarkupElements, _dgdag)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_efdge := NewEG_RunLevelElts()
				_eedfbd := NewEG_RangeMarkupElements()
				_eedfbd.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _ccbded := d.DecodeElement(_eedfbd.CustomXmlInsRangeStart, &_fdeab); _ccbded != nil {
					return _ccbded
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _efdge)
				_efdge.EG_RangeMarkupElements = append(_efdge.EG_RangeMarkupElements, _eedfbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_ddbeea := NewEG_RunLevelElts()
				_bbcedgb := NewEG_RangeMarkupElements()
				_bbcedgb.CustomXmlInsRangeEnd = NewCT_Markup()
				if _debcdd := d.DecodeElement(_bbcedgb.CustomXmlInsRangeEnd, &_fdeab); _debcdd != nil {
					return _debcdd
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _ddbeea)
				_ddbeea.EG_RangeMarkupElements = append(_ddbeea.EG_RangeMarkupElements, _bbcedgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_egbbc := NewEG_RunLevelElts()
				_gfeef := NewEG_RangeMarkupElements()
				_gfeef.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _gfddf := d.DecodeElement(_gfeef.CustomXmlDelRangeStart, &_fdeab); _gfddf != nil {
					return _gfddf
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _egbbc)
				_egbbc.EG_RangeMarkupElements = append(_egbbc.EG_RangeMarkupElements, _gfeef)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_deedgb := NewEG_RunLevelElts()
				_bdecgb := NewEG_RangeMarkupElements()
				_bdecgb.CustomXmlDelRangeEnd = NewCT_Markup()
				if _baecg := d.DecodeElement(_bdecgb.CustomXmlDelRangeEnd, &_fdeab); _baecg != nil {
					return _baecg
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _deedgb)
				_deedgb.EG_RangeMarkupElements = append(_deedgb.EG_RangeMarkupElements, _bdecgb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_gccaf := NewEG_RunLevelElts()
				_bggbc := NewEG_RangeMarkupElements()
				_bggbc.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _addde := d.DecodeElement(_bggbc.CustomXmlMoveFromRangeStart, &_fdeab); _addde != nil {
					return _addde
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _gccaf)
				_gccaf.EG_RangeMarkupElements = append(_gccaf.EG_RangeMarkupElements, _bggbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_affbag := NewEG_RunLevelElts()
				_ebegc := NewEG_RangeMarkupElements()
				_ebegc.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _egdae := d.DecodeElement(_ebegc.CustomXmlMoveFromRangeEnd, &_fdeab); _egdae != nil {
					return _egdae
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _affbag)
				_affbag.EG_RangeMarkupElements = append(_affbag.EG_RangeMarkupElements, _ebegc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gdfcf := NewEG_RunLevelElts()
				_cbafeda := NewEG_RangeMarkupElements()
				_cbafeda.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bdgfg := d.DecodeElement(_cbafeda.CustomXmlMoveToRangeStart, &_fdeab); _bdgfg != nil {
					return _bdgfg
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _gdfcf)
				_gdfcf.EG_RangeMarkupElements = append(_gdfcf.EG_RangeMarkupElements, _cbafeda)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_ecdae := NewEG_RunLevelElts()
				_fagdgg := NewEG_RangeMarkupElements()
				_fagdgg.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _gffgd := d.DecodeElement(_fagdgg.CustomXmlMoveToRangeEnd, &_fdeab); _gffgd != nil {
					return _gffgd
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _ecdae)
				_ecdae.EG_RangeMarkupElements = append(_ecdae.EG_RangeMarkupElements, _fagdgg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_cfedaf := NewEG_RunLevelElts()
				_ddgeg := NewEG_MathContent()
				_ddgeg.OMathPara = _f.NewOMathPara()
				if _gfdbb := d.DecodeElement(_ddgeg.OMathPara, &_fdeab); _gfdbb != nil {
					return _gfdbb
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _cfedaf)
				_cfedaf.EG_MathContent = append(_cfedaf.EG_MathContent, _ddgeg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_dbegf := NewEG_RunLevelElts()
				_bedgb := NewEG_MathContent()
				_bedgb.OMath = _f.NewOMath()
				if _gafcf := d.DecodeElement(_bedgb.OMath, &_fdeab); _gafcf != nil {
					return _gafcf
				}
				_deccec.EG_RunLevelElts = append(_deccec.EG_RunLevelElts, _dbegf)
				_dbegf.EG_MathContent = append(_dbegf.EG_MathContent, _bedgb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on\u0020EG_ContentRunContent\u0020\u0025v", _fdeab.Name)
				if _bacgg := d.Skip(); _bacgg != nil {
					return _bacgg
				}
			}
		case _d.EndElement:
			break _ggead
		case _d.CharData:
		}
	}
	return nil
}

type CT_ParaRPr struct {

	// Inserted Paragraph
	Ins *CT_TrackChange

	// Deleted Paragraph
	Del *CT_TrackChange

	// Move Source Paragraph
	MoveFrom *CT_TrackChange

	// Move Destination Paragraph
	MoveTo *CT_TrackChange

	// Referenced Character Style
	RStyle *CT_String

	// Run Fonts
	RFonts *CT_Fonts

	// Bold
	B *CT_OnOff

	// Complex Script Bold
	BCs *CT_OnOff

	// Italics
	I *CT_OnOff

	// Complex Script Italics
	ICs *CT_OnOff

	// Display All Characters As Capital Letters
	Caps *CT_OnOff

	// Small Caps
	SmallCaps *CT_OnOff

	// Single Strikethrough
	Strike *CT_OnOff

	// Double Strikethrough
	Dstrike *CT_OnOff

	// Display Character Outline
	Outline *CT_OnOff

	// Shadow
	Shadow *CT_OnOff

	// Embossing
	Emboss *CT_OnOff

	// Imprinting
	Imprint *CT_OnOff

	// Do Not Check Spelling or Grammar
	NoProof *CT_OnOff

	// Use Document Grid Settings For Inter-Character Spacing
	SnapToGrid *CT_OnOff

	// Hidden Text
	Vanish *CT_OnOff

	// Web Hidden Text
	WebHidden *CT_OnOff

	// Run Content Color
	Color *CT_Color

	// Character Spacing Adjustment
	Spacing *CT_SignedTwipsMeasure

	// Expanded/Compressed Text
	W *CT_TextScale

	// Font Kerning
	Kern *CT_HpsMeasure

	// Vertically Raised or Lowered Text
	Position *CT_SignedHpsMeasure

	// Non-Complex Script Font Size
	Sz *CT_HpsMeasure

	// Complex Script Font Size
	SzCs *CT_HpsMeasure

	// Text Highlighting
	Highlight *CT_Highlight

	// Underline
	U *CT_Underline

	// Animated Text Effect
	Effect *CT_TextEffect

	// Text Border
	Bdr *CT_Border

	// Run Shading
	Shd *CT_Shd

	// Manual Run Width
	FitText *CT_FitText

	// Subscript/Superscript Text
	VertAlign *CT_VerticalAlignRun

	// Right To Left Text
	Rtl *CT_OnOff

	// Use Complex Script Formatting on Run
	Cs *CT_OnOff

	// Emphasis Mark
	Em *CT_Em

	// Languages for Run Content
	Lang *CT_Language

	// East Asian Typography Settings
	EastAsianLayout *CT_EastAsianLayout

	// Paragraph Mark Is Always Hidden
	SpecVanish *CT_OnOff

	// Office Open XML Math
	OMath *CT_OnOff

	// Revision Information for Run Properties on the Paragraph Mark
	RPrChange *CT_ParaRPrChange
}

// ValidateWithPath validates the CT_TcPrBase and its children, prefixing error messages with path
func (_fabgg *CT_TcPrBase) ValidateWithPath(path string) error {
	if _fabgg.CnfStyle != nil {
		if _aedcf := _fabgg.CnfStyle.ValidateWithPath(path + "\u002fCnfStyle"); _aedcf != nil {
			return _aedcf
		}
	}
	if _fabgg.TcW != nil {
		if _abgcac := _fabgg.TcW.ValidateWithPath(path + "\u002fTcW"); _abgcac != nil {
			return _abgcac
		}
	}
	if _fabgg.GridSpan != nil {
		if _ecgfe := _fabgg.GridSpan.ValidateWithPath(path + "\u002fGridSpan"); _ecgfe != nil {
			return _ecgfe
		}
	}
	if _fabgg.HMerge != nil {
		if _caebg := _fabgg.HMerge.ValidateWithPath(path + "\u002fHMerge"); _caebg != nil {
			return _caebg
		}
	}
	if _fabgg.VMerge != nil {
		if _cbafed := _fabgg.VMerge.ValidateWithPath(path + "\u002fVMerge"); _cbafed != nil {
			return _cbafed
		}
	}
	if _fabgg.TcBorders != nil {
		if _fgbeeg := _fabgg.TcBorders.ValidateWithPath(path + "\u002fTcBorders"); _fgbeeg != nil {
			return _fgbeeg
		}
	}
	if _fabgg.Shd != nil {
		if _eeccc := _fabgg.Shd.ValidateWithPath(path + "\u002fShd"); _eeccc != nil {
			return _eeccc
		}
	}
	if _fabgg.NoWrap != nil {
		if _dgedfg := _fabgg.NoWrap.ValidateWithPath(path + "\u002fNoWrap"); _dgedfg != nil {
			return _dgedfg
		}
	}
	if _fabgg.TcMar != nil {
		if _fbgdaa := _fabgg.TcMar.ValidateWithPath(path + "\u002fTcMar"); _fbgdaa != nil {
			return _fbgdaa
		}
	}
	if _fabgg.TextDirection != nil {
		if _ebfbbg := _fabgg.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _ebfbbg != nil {
			return _ebfbbg
		}
	}
	if _fabgg.TcFitText != nil {
		if _gdcgfg := _fabgg.TcFitText.ValidateWithPath(path + "\u002fTcFitText"); _gdcgfg != nil {
			return _gdcgfg
		}
	}
	if _fabgg.VAlign != nil {
		if _fefdc := _fabgg.VAlign.ValidateWithPath(path + "\u002fVAlign"); _fefdc != nil {
			return _fefdc
		}
	}
	if _fabgg.HideMark != nil {
		if _bfbff := _fabgg.HideMark.ValidateWithPath(path + "\u002fHideMark"); _bfbff != nil {
			return _bfbff
		}
	}
	if _fabgg.Headers != nil {
		if _gdfba := _fabgg.Headers.ValidateWithPath(path + "\u002fHeaders"); _gdfba != nil {
			return _gdfba
		}
	}
	return nil
}
func (_fegdb ST_TblStyleOverrideType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fegdb.String(), start)
}

const (
	ST_DocPartBehaviorUnset   ST_DocPartBehavior = 0
	ST_DocPartBehaviorContent ST_DocPartBehavior = 1
	ST_DocPartBehaviorP       ST_DocPartBehavior = 2
	ST_DocPartBehaviorPg      ST_DocPartBehavior = 3
)

func (_cbcecd ST_PTabLeader) String() string {
	switch _cbcecd {
	case 0:
		return ""
	case 1:
		return "none"
	case 2:
		return "dot"
	case 3:
		return "hyphen"
	case 4:
		return "underscore"
	case 5:
		return "middleDot"
	}
	return ""
}
func (_cgfgg *CT_RPrDefault) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cgfgg.RPr != nil {
		_gaefd := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_cgfgg.RPr, _gaefd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_WmlColorSchemeIndexUnset             ST_WmlColorSchemeIndex = 0
	ST_WmlColorSchemeIndexDark1             ST_WmlColorSchemeIndex = 1
	ST_WmlColorSchemeIndexLight1            ST_WmlColorSchemeIndex = 2
	ST_WmlColorSchemeIndexDark2             ST_WmlColorSchemeIndex = 3
	ST_WmlColorSchemeIndexLight2            ST_WmlColorSchemeIndex = 4
	ST_WmlColorSchemeIndexAccent1           ST_WmlColorSchemeIndex = 5
	ST_WmlColorSchemeIndexAccent2           ST_WmlColorSchemeIndex = 6
	ST_WmlColorSchemeIndexAccent3           ST_WmlColorSchemeIndex = 7
	ST_WmlColorSchemeIndexAccent4           ST_WmlColorSchemeIndex = 8
	ST_WmlColorSchemeIndexAccent5           ST_WmlColorSchemeIndex = 9
	ST_WmlColorSchemeIndexAccent6           ST_WmlColorSchemeIndex = 10
	ST_WmlColorSchemeIndexHyperlink         ST_WmlColorSchemeIndex = 11
	ST_WmlColorSchemeIndexFollowedHyperlink ST_WmlColorSchemeIndex = 12
)

func (_dcfade ST_CharacterSpacing) Validate() error { return _dcfade.ValidateWithPath("") }
func NewCT_Ind() *CT_Ind                            { _aadaa := &CT_Ind{}; return _aadaa }
func (_bdffd *ST_HighlightColor) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ccbbcg, _dbeefa := d.Token()
	if _dbeefa != nil {
		return _dbeefa
	}
	if _ffcbbd, _fbbgc := _ccbbcg.(_d.EndElement); _fbbgc && _ffcbbd.Name == start.Name {
		*_bdffd = 1
		return nil
	}
	if _gfacd, _adggca := _ccbbcg.(_d.CharData); !_adggca {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _ccbbcg)
	} else {
		switch string(_gfacd) {
		case "":
			*_bdffd = 0
		case "black":
			*_bdffd = 1
		case "blue":
			*_bdffd = 2
		case "cyan":
			*_bdffd = 3
		case "green":
			*_bdffd = 4
		case "magenta":
			*_bdffd = 5
		case "red":
			*_bdffd = 6
		case "yellow":
			*_bdffd = 7
		case "white":
			*_bdffd = 8
		case "darkBlue":
			*_bdffd = 9
		case "darkCyan":
			*_bdffd = 10
		case "darkGreen":
			*_bdffd = 11
		case "darkMagenta":
			*_bdffd = 12
		case "darkRed":
			*_bdffd = 13
		case "darkYellow":
			*_bdffd = 14
		case "darkGray":
			*_bdffd = 15
		case "lightGray":
			*_bdffd = 16
		case "none":
			*_bdffd = 17
		}
	}
	_ccbbcg, _dbeefa = d.Token()
	if _dbeefa != nil {
		return _dbeefa
	}
	if _fccfab, _egbegb := _ccbbcg.(_d.EndElement); _egbegb && _fccfab.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _ccbbcg)
}
func NewWdCT_PosVChoice() *WdCT_PosVChoice { _aegfd := &WdCT_PosVChoice{}; return _aegfd }
func (_adaffae ST_Direction) ValidateWithPath(path string) error {
	switch _adaffae {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_adaffae))
	}
	return nil
}
func (_bgabcc ST_TextEffect) ValidateWithPath(path string) error {
	switch _bgabcc {
	case 0, 1, 2, 3, 4, 5, 6, 7:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_bgabcc))
	}
	return nil
}
func (_dfbge *CT_RubyAlign) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfbge.ValAttr = ST_RubyAlign(1)
	for _, _afggf := range start.Attr {
		if _afggf.Name.Local == "val" {
			_dfbge.ValAttr.UnmarshalXMLAttr(_afggf)
			continue
		}
	}
	for {
		_facdc, _fbcae := d.Token()
		if _fbcae != nil {
			return _b.Errorf("parsing\u0020CT_RubyAlign:\u0020\u0025s", _fbcae)
		}
		if _cebgf, _bebgf := _facdc.(_d.EndElement); _bebgf && _cebgf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ProofErr and its children
func (_gdffe *CT_ProofErr) Validate() error { return _gdffe.ValidateWithPath("CT_ProofErr") }

// Validate validates the CT_TblGrid and its children
func (_fcbgg *CT_TblGrid) Validate() error { return _fcbgg.ValidateWithPath("CT_TblGrid") }

// Validate validates the EG_HdrFtrReferences and its children
func (_fdbddc *EG_HdrFtrReferences) Validate() error {
	return _fdbddc.ValidateWithPath("EG_HdrFtrReferences")
}

// ValidateWithPath validates the CT_Cnf and its children, prefixing error messages with path
func (_aedba *CT_Cnf) ValidateWithPath(path string) error {
	if _aedba.ValAttr != nil {
		if !ST_CnfPatternRe.MatchString(*_aedba.ValAttr) {
			return _b.Errorf("\u0025s\u002fm\u002eValAttr\u0020must\u0020match\u0020'\u0025s\u0027\u0020\u0028have\u0020\u0025v\u0029", path, ST_CnfPatternRe, *_aedba.ValAttr)
		}
	}
	if _aedba.FirstRowAttr != nil {
		if _dfcg := _aedba.FirstRowAttr.ValidateWithPath(path + "\u002fFirstRowAttr"); _dfcg != nil {
			return _dfcg
		}
	}
	if _aedba.LastRowAttr != nil {
		if _dde := _aedba.LastRowAttr.ValidateWithPath(path + "\u002fLastRowAttr"); _dde != nil {
			return _dde
		}
	}
	if _aedba.FirstColumnAttr != nil {
		if _gecf := _aedba.FirstColumnAttr.ValidateWithPath(path + "\u002fFirstColumnAttr"); _gecf != nil {
			return _gecf
		}
	}
	if _aedba.LastColumnAttr != nil {
		if _adbd := _aedba.LastColumnAttr.ValidateWithPath(path + "\u002fLastColumnAttr"); _adbd != nil {
			return _adbd
		}
	}
	if _aedba.OddVBandAttr != nil {
		if _ddga := _aedba.OddVBandAttr.ValidateWithPath(path + "\u002fOddVBandAttr"); _ddga != nil {
			return _ddga
		}
	}
	if _aedba.EvenVBandAttr != nil {
		if _fafg := _aedba.EvenVBandAttr.ValidateWithPath(path + "\u002fEvenVBandAttr"); _fafg != nil {
			return _fafg
		}
	}
	if _aedba.OddHBandAttr != nil {
		if _fcef := _aedba.OddHBandAttr.ValidateWithPath(path + "\u002fOddHBandAttr"); _fcef != nil {
			return _fcef
		}
	}
	if _aedba.EvenHBandAttr != nil {
		if _cfcb := _aedba.EvenHBandAttr.ValidateWithPath(path + "\u002fEvenHBandAttr"); _cfcb != nil {
			return _cfcb
		}
	}
	if _aedba.FirstRowFirstColumnAttr != nil {
		if _bdde := _aedba.FirstRowFirstColumnAttr.ValidateWithPath(path + "\u002fFirstRowFirstColumnAttr"); _bdde != nil {
			return _bdde
		}
	}
	if _aedba.FirstRowLastColumnAttr != nil {
		if _ecbg := _aedba.FirstRowLastColumnAttr.ValidateWithPath(path + "\u002fFirstRowLastColumnAttr"); _ecbg != nil {
			return _ecbg
		}
	}
	if _aedba.LastRowFirstColumnAttr != nil {
		if _babg := _aedba.LastRowFirstColumnAttr.ValidateWithPath(path + "\u002fLastRowFirstColumnAttr"); _babg != nil {
			return _babg
		}
	}
	if _aedba.LastRowLastColumnAttr != nil {
		if _bbeb := _aedba.LastRowLastColumnAttr.ValidateWithPath(path + "\u002fLastRowLastColumnAttr"); _bbeb != nil {
			return _bbeb
		}
	}
	return nil
}
func (_bfdbf ST_Shd) String() string {
	switch _bfdbf {
	case 0:
		return ""
	case 1:
		return "nil"
	case 2:
		return "clear"
	case 3:
		return "solid"
	case 4:
		return "horzStripe"
	case 5:
		return "vertStripe"
	case 6:
		return "reverseDiagStripe"
	case 7:
		return "diagStripe"
	case 8:
		return "horzCross"
	case 9:
		return "diagCross"
	case 10:
		return "thinHorzStripe"
	case 11:
		return "thinVertStripe"
	case 12:
		return "thinReverseDiagStripe"
	case 13:
		return "thinDiagStripe"
	case 14:
		return "thinHorzCross"
	case 15:
		return "thinDiagCross"
	case 16:
		return "pct5"
	case 17:
		return "pct10"
	case 18:
		return "pct12"
	case 19:
		return "pct15"
	case 20:
		return "pct20"
	case 21:
		return "pct25"
	case 22:
		return "pct30"
	case 23:
		return "pct35"
	case 24:
		return "pct37"
	case 25:
		return "pct40"
	case 26:
		return "pct45"
	case 27:
		return "pct50"
	case 28:
		return "pct55"
	case 29:
		return "pct60"
	case 30:
		return "pct62"
	case 31:
		return "pct65"
	case 32:
		return "pct70"
	case 33:
		return "pct75"
	case 34:
		return "pct80"
	case 35:
		return "pct85"
	case 36:
		return "pct87"
	case 37:
		return "pct90"
	case 38:
		return "pct95"
	}
	return ""
}
func (_gcgac ST_TextEffect) String() string {
	switch _gcgac {
	case 0:
		return ""
	case 1:
		return "blinkBackground"
	case 2:
		return "lights"
	case 3:
		return "antsBlack"
	case 4:
		return "antsRed"
	case 5:
		return "shimmer"
	case 6:
		return "sparkle"
	case 7:
		return "none"
	}
	return ""
}

// Validate validates the CT_ShapeDefaults and its children
func (_abeaf *CT_ShapeDefaults) Validate() error { return _abeaf.ValidateWithPath("CT_ShapeDefaults") }
func (_eedea ST_CombineBrackets) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_eedea.String(), start)
}

// ValidateWithPath validates the CT_DocPartName and its children, prefixing error messages with path
func (_agef *CT_DocPartName) ValidateWithPath(path string) error {
	if _agef.DecoratedAttr != nil {
		if _gfge := _agef.DecoratedAttr.ValidateWithPath(path + "\u002fDecoratedAttr"); _gfge != nil {
			return _gfge
		}
	}
	return nil
}
func (_bdfefg *ST_CharacterSpacing) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bdfefg = 0
	case "doNotCompress":
		*_bdfefg = 1
	case "compressPunctuation":
		*_bdfefg = 2
	case "compressPunctuationAndJapaneseKana":
		*_bdfefg = 3
	}
	return nil
}

// ValidateWithPath validates the CT_EdnProps and its children, prefixing error messages with path
func (_edfee *CT_EdnProps) ValidateWithPath(path string) error {
	if _edfee.Pos != nil {
		if _dfeb := _edfee.Pos.ValidateWithPath(path + "\u002fPos"); _dfeb != nil {
			return _dfeb
		}
	}
	if _edfee.NumFmt != nil {
		if _fffdd := _edfee.NumFmt.ValidateWithPath(path + "\u002fNumFmt"); _fffdd != nil {
			return _fffdd
		}
	}
	if _edfee.NumStart != nil {
		if _geef := _edfee.NumStart.ValidateWithPath(path + "\u002fNumStart"); _geef != nil {
			return _geef
		}
	}
	if _edfee.NumRestart != nil {
		if _bagg := _edfee.NumRestart.ValidateWithPath(path + "/NumRestart"); _bagg != nil {
			return _bagg
		}
	}
	return nil
}
func (_fedfg *CT_HMerge) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fedfg.ValAttr != ST_MergeUnset {
		_fafe, _gcgfg := _fedfg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _gcgfg != nil {
			return _gcgfg
		}
		start.Attr = append(start.Attr, _fafe)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cdd *CT_AltChunkPr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bcf:
	for {
		_acd, _aaf := d.Token()
		if _aaf != nil {
			return _aaf
		}
		switch _ab := _acd.(type) {
		case _d.StartElement:
			switch _ab.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "matchSrc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "matchSrc"}:
				_cdd.MatchSrc = NewCT_OnOff()
				if _dcf := d.DecodeElement(_cdd.MatchSrc, &_ab); _dcf != nil {
					return _dcf
				}
			default:
				_ga.Log("skipping unsupported element\u0020on\u0020CT_AltChunkPr \u0025v", _ab.Name)
				if _aab := d.Skip(); _aab != nil {
					return _aab
				}
			}
		case _d.EndElement:
			break _bcf
		case _d.CharData:
		}
	}
	return nil
}
func (_geafe ST_WmlColorSchemeIndex) Validate() error { return _geafe.ValidateWithPath("") }

type CT_TwipsMeasure struct {

	// Measurement in Twentieths of a Point
	ValAttr _g.ST_TwipsMeasure
}

// ValidateWithPath validates the EG_SectPrContents and its children, prefixing error messages with path
func (_badgb *EG_SectPrContents) ValidateWithPath(path string) error {
	if _badgb.FootnotePr != nil {
		if _dgggf := _badgb.FootnotePr.ValidateWithPath(path + "/FootnotePr"); _dgggf != nil {
			return _dgggf
		}
	}
	if _badgb.EndnotePr != nil {
		if _baeff := _badgb.EndnotePr.ValidateWithPath(path + "\u002fEndnotePr"); _baeff != nil {
			return _baeff
		}
	}
	if _badgb.Type != nil {
		if _edcfa := _badgb.Type.ValidateWithPath(path + "\u002fType"); _edcfa != nil {
			return _edcfa
		}
	}
	if _badgb.PgSz != nil {
		if _geaca := _badgb.PgSz.ValidateWithPath(path + "\u002fPgSz"); _geaca != nil {
			return _geaca
		}
	}
	if _badgb.PgMar != nil {
		if _fbaebg := _badgb.PgMar.ValidateWithPath(path + "\u002fPgMar"); _fbaebg != nil {
			return _fbaebg
		}
	}
	if _badgb.PaperSrc != nil {
		if _cdacdc := _badgb.PaperSrc.ValidateWithPath(path + "\u002fPaperSrc"); _cdacdc != nil {
			return _cdacdc
		}
	}
	if _badgb.PgBorders != nil {
		if _ceegcfc := _badgb.PgBorders.ValidateWithPath(path + "\u002fPgBorders"); _ceegcfc != nil {
			return _ceegcfc
		}
	}
	if _badgb.LnNumType != nil {
		if _cbddcd := _badgb.LnNumType.ValidateWithPath(path + "\u002fLnNumType"); _cbddcd != nil {
			return _cbddcd
		}
	}
	if _badgb.PgNumType != nil {
		if _bfdgf := _badgb.PgNumType.ValidateWithPath(path + "\u002fPgNumType"); _bfdgf != nil {
			return _bfdgf
		}
	}
	if _badgb.Cols != nil {
		if _cdbebd := _badgb.Cols.ValidateWithPath(path + "\u002fCols"); _cdbebd != nil {
			return _cdbebd
		}
	}
	if _badgb.FormProt != nil {
		if _gafgde := _badgb.FormProt.ValidateWithPath(path + "\u002fFormProt"); _gafgde != nil {
			return _gafgde
		}
	}
	if _badgb.VAlign != nil {
		if _ddedd := _badgb.VAlign.ValidateWithPath(path + "\u002fVAlign"); _ddedd != nil {
			return _ddedd
		}
	}
	if _badgb.NoEndnote != nil {
		if _edgce := _badgb.NoEndnote.ValidateWithPath(path + "\u002fNoEndnote"); _edgce != nil {
			return _edgce
		}
	}
	if _badgb.TitlePg != nil {
		if _ebadd := _badgb.TitlePg.ValidateWithPath(path + "\u002fTitlePg"); _ebadd != nil {
			return _ebadd
		}
	}
	if _badgb.TextDirection != nil {
		if _ebbgbec := _badgb.TextDirection.ValidateWithPath(path + "\u002fTextDirection"); _ebbgbec != nil {
			return _ebbgbec
		}
	}
	if _badgb.Bidi != nil {
		if _bcbcdb := _badgb.Bidi.ValidateWithPath(path + "\u002fBidi"); _bcbcdb != nil {
			return _bcbcdb
		}
	}
	if _badgb.RtlGutter != nil {
		if _fcbfa := _badgb.RtlGutter.ValidateWithPath(path + "\u002fRtlGutter"); _fcbfa != nil {
			return _fcbfa
		}
	}
	if _badgb.DocGrid != nil {
		if _efcde := _badgb.DocGrid.ValidateWithPath(path + "\u002fDocGrid"); _efcde != nil {
			return _efcde
		}
	}
	if _badgb.PrinterSettings != nil {
		if _cfcce := _badgb.PrinterSettings.ValidateWithPath(path + "\u002fPrinterSettings"); _cfcce != nil {
			return _cfcce
		}
	}
	return nil
}
func (_adccb *CT_LevelText) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dgaaa := range start.Attr {
		if _dgaaa.Name.Local == "val" {
			_fbade, _abce := _dgaaa.Value, error(nil)
			if _abce != nil {
				return _abce
			}
			_adccb.ValAttr = &_fbade
			continue
		}
		if _dgaaa.Name.Local == "null" {
			_dcba, _cbdad := ParseUnionST_OnOff(_dgaaa.Value)
			if _cbdad != nil {
				return _cbdad
			}
			_adccb.NullAttr = &_dcba
			continue
		}
	}
	for {
		_fadfe, _ecegb := d.Token()
		if _ecegb != nil {
			return _b.Errorf("parsing\u0020CT_LevelText:\u0020\u0025s", _ecegb)
		}
		if _aabg, _ddaag := _fadfe.(_d.EndElement); _ddaag && _aabg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_afbcge ST_ThemeColor) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_afbcge.String(), start)
}
func NewCT_OdsoFieldMapData() *CT_OdsoFieldMapData { _afeec := &CT_OdsoFieldMapData{}; return _afeec }
func (_fbacgb ST_FtnEdn) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fbacgb.String(), start)
}
func (_agfdag *WdCT_Inline) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_agfdag.Extent = _eb.NewCT_PositiveSize2D()
	_agfdag.DocPr = _eb.NewCT_NonVisualDrawingProps()
	_agfdag.Graphic = _eb.NewGraphic()
	for _, _bfbda := range start.Attr {
		if _bfbda.Name.Local == "distT" {
			_dgfbc, _dcbbd := _dd.ParseUint(_bfbda.Value, 10, 32)
			if _dcbbd != nil {
				return _dcbbd
			}
			_gedfg := uint32(_dgfbc)
			_agfdag.DistTAttr = &_gedfg
			continue
		}
		if _bfbda.Name.Local == "distB" {
			_gaeae, _fbeec := _dd.ParseUint(_bfbda.Value, 10, 32)
			if _fbeec != nil {
				return _fbeec
			}
			_eegfbb := uint32(_gaeae)
			_agfdag.DistBAttr = &_eegfbb
			continue
		}
		if _bfbda.Name.Local == "distR" {
			_aafaba, _dadfdb := _dd.ParseUint(_bfbda.Value, 10, 32)
			if _dadfdb != nil {
				return _dadfdb
			}
			_fdegdb := uint32(_aafaba)
			_agfdag.DistRAttr = &_fdegdb
			continue
		}
		if _bfbda.Name.Local == "distL" {
			_degef, _cecbgb := _dd.ParseUint(_bfbda.Value, 10, 32)
			if _cecbgb != nil {
				return _cecbgb
			}
			_cgccf := uint32(_degef)
			_agfdag.DistLAttr = &_cgccf
			continue
		}
	}
_ggagfd:
	for {
		_cdgga, _bfabg := d.Token()
		if _bfabg != nil {
			return _bfabg
		}
		switch _bgfcd := _cdgga.(type) {
		case _d.StartElement:
			switch _bgfcd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extent"}:
				if _bbafg := d.DecodeElement(_agfdag.Extent, &_bgfcd); _bbafg != nil {
					return _bbafg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effectExtent"}:
				_agfdag.EffectExtent = NewWdCT_EffectExtent()
				if _cdeeec := d.DecodeElement(_agfdag.EffectExtent, &_bgfcd); _cdeeec != nil {
					return _cdeeec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPr"}:
				if _acadfd := d.DecodeElement(_agfdag.DocPr, &_bgfcd); _acadfd != nil {
					return _acadfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvGraphicFramePr"}:
				_agfdag.CNvGraphicFramePr = _eb.NewCT_NonVisualGraphicFrameProperties()
				if _dfddga := d.DecodeElement(_agfdag.CNvGraphicFramePr, &_bgfcd); _dfddga != nil {
					return _dfddga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain", Local: "graphic"}, _d.Name{Space: "http:/\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fmain", Local: "graphic"}:
				if _eceab := d.DecodeElement(_agfdag.Graphic, &_bgfcd); _eceab != nil {
					return _eceab
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_Inline\u0020\u0025v", _bgfcd.Name)
				if _ecggde := d.Skip(); _ecggde != nil {
					return _ecggde
				}
			}
		case _d.EndElement:
			break _ggagfd
		case _d.CharData:
		}
	}
	return nil
}
func (_abfgg *CT_MailMergeOdsoFMDFieldType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_fafdd, _dddde := _abfgg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _dddde != nil {
		return _dddde
	}
	start.Attr = append(start.Attr, _fafdd)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_RPrMath and its children
func (_gagbbb *EG_RPrMath) Validate() error { return _gagbbb.ValidateWithPath("EG_RPrMath") }

// ValidateWithPath validates the CT_Comments and its children, prefixing error messages with path
func (_cdff *CT_Comments) ValidateWithPath(path string) error {
	for _bad, _fef := range _cdff.Comment {
		if _adcc := _fef.ValidateWithPath(_b.Sprintf("\u0025s\u002fComment\u005b\u0025d\u005d", path, _bad)); _adcc != nil {
			return _adcc
		}
	}
	return nil
}
func (_edbdef WdST_AlignH) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bfdffg := _d.Attr{}
	_bfdffg.Name = name
	switch _edbdef {
	case WdST_AlignHUnset:
		_bfdffg.Value = ""
	case WdST_AlignHLeft:
		_bfdffg.Value = "left"
	case WdST_AlignHRight:
		_bfdffg.Value = "right"
	case WdST_AlignHCenter:
		_bfdffg.Value = "center"
	case WdST_AlignHInside:
		_bfdffg.Value = "inside"
	case WdST_AlignHOutside:
		_bfdffg.Value = "outside"
	}
	return _bfdffg, nil
}

type CT_DocPartBehaviors struct {

	// Entry Insertion Behavior
	Behavior []*CT_DocPartBehavior
}

func NewCT_Style() *CT_Style { _bgcfa := &CT_Style{}; return _bgcfa }
func (_egcbc *WdCT_PosVChoice) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ddfdab:
	for {
		_edbgcg, _gdfff := d.Token()
		if _gdfff != nil {
			return _gdfff
		}
		switch _cbdfd := _edbgcg.(type) {
		case _d.StartElement:
			switch _cbdfd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "align"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "align"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "align"}:
				_egcbc.Align = WdST_AlignVUnset
				if _dbace := d.DecodeElement(&_egcbc.Align, &_cbdfd); _dbace != nil {
					return _dbace
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "posOffset"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "posOffset"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "posOffset"}:
				_egcbc.PosOffset = new(int32)
				if _debdb := d.DecodeElement(_egcbc.PosOffset, &_cbdfd); _debdb != nil {
					return _debdb
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_PosVChoice\u0020\u0025v", _cbdfd.Name)
				if _gbagge := d.Skip(); _gbagge != nil {
					return _gbagge
				}
			}
		case _d.EndElement:
			break _ddfdab
		case _d.CharData:
		}
	}
	return nil
}
func (_afccdg *CT_VerticalAlignRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_efgfed, _ebcfbb := _afccdg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _ebcfbb != nil {
		return _ebcfbb
	}
	start.Attr = append(start.Attr, _efgfed)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gfggd ST_CharacterSpacing) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gfggd.String(), start)
}
func (_adadg *CT_DocPartTypes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fcfdd := range start.Attr {
		if _fcfdd.Name.Local == "all" {
			_becgb, _dcada := ParseUnionST_OnOff(_fcfdd.Value)
			if _dcada != nil {
				return _dcada
			}
			_adadg.AllAttr = &_becgb
			continue
		}
	}
_gdad:
	for {
		_adff, _fbbff := d.Token()
		if _fbbff != nil {
			return _fbbff
		}
		switch _ccabd := _adff.(type) {
		case _d.StartElement:
			switch _ccabd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "type"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "type"}:
				_fbcb := NewCT_DocPartType()
				if _adcf := d.DecodeElement(_fbcb, &_ccabd); _adcf != nil {
					return _adcf
				}
				_adadg.Type = append(_adadg.Type, _fbcb)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_DocPartTypes\u0020\u0025v", _ccabd.Name)
				if _ddef := d.Skip(); _ddef != nil {
					return _ddef
				}
			}
		case _d.EndElement:
			break _gdad
		case _d.CharData:
		}
	}
	return nil
}
func (_dfadea ST_RestartNumber) ValidateWithPath(path string) error {
	switch _dfadea {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dfadea))
	}
	return nil
}

// ValidateWithPath validates the CT_TextAlignment and its children, prefixing error messages with path
func (_abbagb *CT_TextAlignment) ValidateWithPath(path string) error {
	if _abbagb.ValAttr == ST_TextAlignmentUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _gdagb := _abbagb.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _gdagb != nil {
		return _gdagb
	}
	return nil
}
func (_gacegc *Footnotes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:footnotes"
	return _gacegc.CT_Footnotes.MarshalXML(e, start)
}
func (_eebgf ST_TblStyleOverrideType) String() string {
	switch _eebgf {
	case 0:
		return ""
	case 1:
		return "wholeTable"
	case 2:
		return "firstRow"
	case 3:
		return "lastRow"
	case 4:
		return "firstCol"
	case 5:
		return "lastCol"
	case 6:
		return "band1Vert"
	case 7:
		return "band2Vert"
	case 8:
		return "band1Horz"
	case 9:
		return "band2Horz"
	case 10:
		return "neCell"
	case 11:
		return "nwCell"
	case 12:
		return "seCell"
	case 13:
		return "swCell"
	}
	return ""
}

// ValidateWithPath validates the CT_TrPr and its children, prefixing error messages with path
func (_fcegcd *CT_TrPr) ValidateWithPath(path string) error {
	for _ecfcgf, _dgbfe := range _fcegcd.CnfStyle {
		if _afdca := _dgbfe.ValidateWithPath(_b.Sprintf("\u0025s\u002fCnfStyle\u005b\u0025d\u005d", path, _ecfcgf)); _afdca != nil {
			return _afdca
		}
	}
	for _ecdca, _ffabac := range _fcegcd.DivId {
		if _cdbaa := _ffabac.ValidateWithPath(_b.Sprintf("\u0025s\u002fDivId\u005b\u0025d\u005d", path, _ecdca)); _cdbaa != nil {
			return _cdbaa
		}
	}
	for _dcdeef, _afdbc := range _fcegcd.GridBefore {
		if _efaca := _afdbc.ValidateWithPath(_b.Sprintf("\u0025s\u002fGridBefore\u005b\u0025d\u005d", path, _dcdeef)); _efaca != nil {
			return _efaca
		}
	}
	for _fgbfed, _begdg := range _fcegcd.GridAfter {
		if _cfeda := _begdg.ValidateWithPath(_b.Sprintf("\u0025s/GridAfter\u005b\u0025d\u005d", path, _fgbfed)); _cfeda != nil {
			return _cfeda
		}
	}
	for _abeef, _ecgcgg := range _fcegcd.WBefore {
		if _bdfaa := _ecgcgg.ValidateWithPath(_b.Sprintf("\u0025s\u002fWBefore\u005b\u0025d\u005d", path, _abeef)); _bdfaa != nil {
			return _bdfaa
		}
	}
	for _fcedf, _cgfcag := range _fcegcd.WAfter {
		if _ebbgbe := _cgfcag.ValidateWithPath(_b.Sprintf("\u0025s\u002fWAfter\u005b\u0025d\u005d", path, _fcedf)); _ebbgbe != nil {
			return _ebbgbe
		}
	}
	for _fefga, _fgead := range _fcegcd.CantSplit {
		if _feaca := _fgead.ValidateWithPath(_b.Sprintf("\u0025s/CantSplit\u005b\u0025d\u005d", path, _fefga)); _feaca != nil {
			return _feaca
		}
	}
	for _bfdcaf, _dfcagg := range _fcegcd.TrHeight {
		if _fddecc := _dfcagg.ValidateWithPath(_b.Sprintf("\u0025s\u002fTrHeight\u005b\u0025d\u005d", path, _bfdcaf)); _fddecc != nil {
			return _fddecc
		}
	}
	for _acedg, _gagacg := range _fcegcd.TblHeader {
		if _bgcafg := _gagacg.ValidateWithPath(_b.Sprintf("\u0025s/TblHeader\u005b\u0025d\u005d", path, _acedg)); _bgcafg != nil {
			return _bgcafg
		}
	}
	for _abcgba, _dgdfd := range _fcegcd.TblCellSpacing {
		if _efcdd := _dgdfd.ValidateWithPath(_b.Sprintf("%s\u002fTblCellSpacing\u005b\u0025d\u005d", path, _abcgba)); _efcdd != nil {
			return _efcdd
		}
	}
	for _gfcea, _dfgea := range _fcegcd.Jc {
		if _gefgf := _dfgea.ValidateWithPath(_b.Sprintf("\u0025s\u002fJc\u005b\u0025d]", path, _gfcea)); _gefgf != nil {
			return _gefgf
		}
	}
	for _edacf, _acgaaa := range _fcegcd.Hidden {
		if _baaaaf := _acgaaa.ValidateWithPath(_b.Sprintf("\u0025s\u002fHidden\u005b\u0025d\u005d", path, _edacf)); _baaaaf != nil {
			return _baaaaf
		}
	}
	if _fcegcd.Ins != nil {
		if _aegbfa := _fcegcd.Ins.ValidateWithPath(path + "\u002fIns"); _aegbfa != nil {
			return _aegbfa
		}
	}
	if _fcegcd.Del != nil {
		if _dggag := _fcegcd.Del.ValidateWithPath(path + "\u002fDel"); _dggag != nil {
			return _dggag
		}
	}
	if _fcegcd.TrPrChange != nil {
		if _gggfa := _fcegcd.TrPrChange.ValidateWithPath(path + "/TrPrChange"); _gggfa != nil {
			return _gggfa
		}
	}
	return nil
}
func NewCT_Attr() *CT_Attr { _gcdg := &CT_Attr{}; return _gcdg }
func (_bgcag *ST_EdnPos) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbabfd, _dagfe := d.Token()
	if _dagfe != nil {
		return _dagfe
	}
	if _beadb, _bdbge := _bbabfd.(_d.EndElement); _bdbge && _beadb.Name == start.Name {
		*_bgcag = 1
		return nil
	}
	if _deebe, _adgdag := _bbabfd.(_d.CharData); !_adgdag {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bbabfd)
	} else {
		switch string(_deebe) {
		case "":
			*_bgcag = 0
		case "sectEnd":
			*_bgcag = 1
		case "docEnd":
			*_bgcag = 2
		}
	}
	_bbabfd, _dagfe = d.Token()
	if _dagfe != nil {
		return _dagfe
	}
	if _aaebg, _cbabda := _bbabfd.(_d.EndElement); _cbabda && _aaebg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bbabfd)
}
func (_cbgba WdST_RelFromH) String() string {
	switch _cbgba {
	case 0:
		return ""
	case 1:
		return "margin"
	case 2:
		return "page"
	case 3:
		return "column"
	case 4:
		return "character"
	case 5:
		return "leftMargin"
	case 6:
		return "rightMargin"
	case 7:
		return "insideMargin"
	case 8:
		return "outsideMargin"
	}
	return ""
}
func (_begdcc ST_ThemeColor) ValidateWithPath(path string) error {
	switch _begdcc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_begdcc))
	}
	return nil
}

const (
	ST_EdGrpUnset          ST_EdGrp = 0
	ST_EdGrpNone           ST_EdGrp = 1
	ST_EdGrpEveryone       ST_EdGrp = 2
	ST_EdGrpAdministrators ST_EdGrp = 3
	ST_EdGrpContributors   ST_EdGrp = 4
	ST_EdGrpEditors        ST_EdGrp = 5
	ST_EdGrpOwners         ST_EdGrp = 6
	ST_EdGrpCurrent        ST_EdGrp = 7
)

func NewCT_Comments() *CT_Comments { _bdgc := &CT_Comments{}; return _bdgc }
func (_cddce *CT_StyleSort) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cddce.ValAttr = ST_StyleSort(1)
	for _, _fddgf := range start.Attr {
		if _fddgf.Name.Local == "val" {
			_cddce.ValAttr.UnmarshalXMLAttr(_fddgf)
			continue
		}
	}
	for {
		_fcge, _fabfb := d.Token()
		if _fabfb != nil {
			return _b.Errorf("parsing\u0020CT_StyleSort:\u0020\u0025s", _fabfb)
		}
		if _eedae, _dbaegg := _fcge.(_d.EndElement); _dbaegg && _eedae.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Frame() *CT_Frame { _dbfed := &CT_Frame{}; return _dbfed }

// Validate validates the CT_Divs and its children
func (_gdcgc *CT_Divs) Validate() error { return _gdcgc.ValidateWithPath("CT_Divs") }
func (_afbga *ST_LineSpacingRule) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dcgeg, _cfacb := d.Token()
	if _cfacb != nil {
		return _cfacb
	}
	if _cfbadg, _agfcc := _dcgeg.(_d.EndElement); _agfcc && _cfbadg.Name == start.Name {
		*_afbga = 1
		return nil
	}
	if _eadfed, _dbdgb := _dcgeg.(_d.CharData); !_dbdgb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _dcgeg)
	} else {
		switch string(_eadfed) {
		case "":
			*_afbga = 0
		case "auto":
			*_afbga = 1
		case "exact":
			*_afbga = 2
		case "atLeast":
			*_afbga = 3
		}
	}
	_dcgeg, _cfacb = d.Token()
	if _cfacb != nil {
		return _cfacb
	}
	if _egabb, _cbafg := _dcgeg.(_d.EndElement); _cbafg && _egabb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _dcgeg)
}

// ValidateWithPath validates the CT_DocParts and its children, prefixing error messages with path
func (_gagc *CT_DocParts) ValidateWithPath(path string) error {
	for _ebdec, _ebgaa := range _gagc.DocPart {
		if _dedb := _ebgaa.ValidateWithPath(_b.Sprintf("\u0025s\u002fDocPart\u005b\u0025d\u005d", path, _ebdec)); _dedb != nil {
			return _dedb
		}
	}
	return nil
}
func (_bdacf *ST_StyleType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aaddcf, _bggga := d.Token()
	if _bggga != nil {
		return _bggga
	}
	if _gagec, _gcddd := _aaddcf.(_d.EndElement); _gcddd && _gagec.Name == start.Name {
		*_bdacf = 1
		return nil
	}
	if _gbceb, _bggacf := _aaddcf.(_d.CharData); !_bggacf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _aaddcf)
	} else {
		switch string(_gbceb) {
		case "":
			*_bdacf = 0
		case "paragraph":
			*_bdacf = 1
		case "character":
			*_bdacf = 2
		case "table":
			*_bdacf = 3
		case "numbering":
			*_bdacf = 4
		}
	}
	_aaddcf, _bggga = d.Token()
	if _bggga != nil {
		return _bggga
	}
	if _dffgaa, _dfagde := _aaddcf.(_d.EndElement); _dfagde && _dffgaa.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _aaddcf)
}

// Validate validates the CT_Kinsoku and its children
func (_eggf *CT_Kinsoku) Validate() error { return _eggf.ValidateWithPath("CT_Kinsoku") }

type ST_PTabRelativeTo byte

func (_egcebd *ST_FtnEdn) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fadbd, _bgdbgb := d.Token()
	if _bgdbgb != nil {
		return _bgdbgb
	}
	if _dcebed, _cfdga := _fadbd.(_d.EndElement); _cfdga && _dcebed.Name == start.Name {
		*_egcebd = 1
		return nil
	}
	if _abcdc, _ccaabf := _fadbd.(_d.CharData); !_ccaabf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fadbd)
	} else {
		switch string(_abcdc) {
		case "":
			*_egcebd = 0
		case "normal":
			*_egcebd = 1
		case "separator":
			*_egcebd = 2
		case "continuationSeparator":
			*_egcebd = 3
		case "continuationNotice":
			*_egcebd = 4
		}
	}
	_fadbd, _bgdbgb = d.Token()
	if _bgdbgb != nil {
		return _bgdbgb
	}
	if _cegcge, _bgegd := _fadbd.(_d.EndElement); _bgegd && _cegcge.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fadbd)
}

// Validate validates the CT_NumLvl and its children
func (_bdgbc *CT_NumLvl) Validate() error { return _bdgbc.ValidateWithPath("CT_NumLvl") }

// Validate validates the EG_FtnEdnNumProps and its children
func (_cgggcf *EG_FtnEdnNumProps) Validate() error {
	return _cgggcf.ValidateWithPath("EG_FtnEdnNumProps")
}

// ValidateWithPath validates the CT_Language and its children, prefixing error messages with path
func (_ecfef *CT_Language) ValidateWithPath(path string) error { return nil }
func (_gaed *CT_Color) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _daee := range start.Attr {
		if _daee.Name.Local == "val" {
			_ggebd, _cccb := ParseUnionST_HexColor(_daee.Value)
			if _cccb != nil {
				return _cccb
			}
			_gaed.ValAttr = _ggebd
			continue
		}
		if _daee.Name.Local == "themeColor" {
			_gaed.ThemeColorAttr.UnmarshalXMLAttr(_daee)
			continue
		}
		if _daee.Name.Local == "themeTint" {
			_acac, _ggbc := _daee.Value, error(nil)
			if _ggbc != nil {
				return _ggbc
			}
			_gaed.ThemeTintAttr = &_acac
			continue
		}
		if _daee.Name.Local == "themeShade" {
			_ceace, _egca := _daee.Value, error(nil)
			if _egca != nil {
				return _egca
			}
			_gaed.ThemeShadeAttr = &_ceace
			continue
		}
	}
	for {
		_acba, _dcb := d.Token()
		if _dcb != nil {
			return _b.Errorf("parsing\u0020CT_Color: \u0025s", _dcb)
		}
		if _cbeb, _gdag := _acba.(_d.EndElement); _gdag && _cbeb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_PixelsMeasure struct {

	// Measurement in Pixels
	ValAttr uint64
}
type CT_DocPart struct {

	// Glossary Document Entry Properties
	DocPartPr *CT_DocPartPr

	// Contents of Glossary Document Entry
	DocPartBody *CT_Body
}

// ValidateWithPath validates the CT_TblPr and its children, prefixing error messages with path
func (_edddfb *CT_TblPr) ValidateWithPath(path string) error {
	if _edddfb.TblStyle != nil {
		if _abbec := _edddfb.TblStyle.ValidateWithPath(path + "\u002fTblStyle"); _abbec != nil {
			return _abbec
		}
	}
	if _edddfb.TblpPr != nil {
		if _dbffc := _edddfb.TblpPr.ValidateWithPath(path + "\u002fTblpPr"); _dbffc != nil {
			return _dbffc
		}
	}
	if _edddfb.TblOverlap != nil {
		if _dffaae := _edddfb.TblOverlap.ValidateWithPath(path + "/TblOverlap"); _dffaae != nil {
			return _dffaae
		}
	}
	if _edddfb.BidiVisual != nil {
		if _bdcef := _edddfb.BidiVisual.ValidateWithPath(path + "/BidiVisual"); _bdcef != nil {
			return _bdcef
		}
	}
	if _edddfb.TblStyleRowBandSize != nil {
		if _bdfff := _edddfb.TblStyleRowBandSize.ValidateWithPath(path + "/TblStyleRowBandSize"); _bdfff != nil {
			return _bdfff
		}
	}
	if _edddfb.TblStyleColBandSize != nil {
		if _ddbeg := _edddfb.TblStyleColBandSize.ValidateWithPath(path + "/TblStyleColBandSize"); _ddbeg != nil {
			return _ddbeg
		}
	}
	if _edddfb.TblW != nil {
		if _deaca := _edddfb.TblW.ValidateWithPath(path + "\u002fTblW"); _deaca != nil {
			return _deaca
		}
	}
	if _edddfb.Jc != nil {
		if _eaacc := _edddfb.Jc.ValidateWithPath(path + "\u002fJc"); _eaacc != nil {
			return _eaacc
		}
	}
	if _edddfb.TblCellSpacing != nil {
		if _ffacgf := _edddfb.TblCellSpacing.ValidateWithPath(path + "\u002fTblCellSpacing"); _ffacgf != nil {
			return _ffacgf
		}
	}
	if _edddfb.TblInd != nil {
		if _gbdga := _edddfb.TblInd.ValidateWithPath(path + "\u002fTblInd"); _gbdga != nil {
			return _gbdga
		}
	}
	if _edddfb.TblBorders != nil {
		if _eggdg := _edddfb.TblBorders.ValidateWithPath(path + "/TblBorders"); _eggdg != nil {
			return _eggdg
		}
	}
	if _edddfb.Shd != nil {
		if _fbdfe := _edddfb.Shd.ValidateWithPath(path + "\u002fShd"); _fbdfe != nil {
			return _fbdfe
		}
	}
	if _edddfb.TblLayout != nil {
		if _bfeda := _edddfb.TblLayout.ValidateWithPath(path + "\u002fTblLayout"); _bfeda != nil {
			return _bfeda
		}
	}
	if _edddfb.TblCellMar != nil {
		if _eeedb := _edddfb.TblCellMar.ValidateWithPath(path + "/TblCellMar"); _eeedb != nil {
			return _eeedb
		}
	}
	if _edddfb.TblLook != nil {
		if _fddaa := _edddfb.TblLook.ValidateWithPath(path + "\u002fTblLook"); _fddaa != nil {
			return _fddaa
		}
	}
	if _edddfb.TblCaption != nil {
		if _cfbde := _edddfb.TblCaption.ValidateWithPath(path + "/TblCaption"); _cfbde != nil {
			return _cfbde
		}
	}
	if _edddfb.TblDescription != nil {
		if _bggaae := _edddfb.TblDescription.ValidateWithPath(path + "\u002fTblDescription"); _bggaae != nil {
			return _bggaae
		}
	}
	if _edddfb.TblPrChange != nil {
		if _fbdgb := _edddfb.TblPrChange.ValidateWithPath(path + "\u002fTblPrChange"); _fbdgb != nil {
			return _fbdgb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Document and its children, prefixing error messages with path
func (_bdae *CT_Document) ValidateWithPath(path string) error {
	if _bdae.ConformanceAttr == _g.ST_ConformanceClassUnset {
		return _b.Errorf("\u0025s\u002fConformanceAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _bfcge := _bdae.ConformanceAttr.ValidateWithPath(path + "\u002fConformanceAttr"); _bfcge != nil {
		return _bfcge
	}
	if _bdae.Background != nil {
		if _dffbde := _bdae.Background.ValidateWithPath(path + "/Background"); _dffbde != nil {
			return _dffbde
		}
	}
	if _bdae.Body != nil {
		if _eeedc := _bdae.Body.ValidateWithPath(path + "\u002fBody"); _eeedc != nil {
			return _eeedc
		}
	}
	return nil
}
func (_fdgbga *ST_FrameScrollbar) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fdgbga = 0
	case "on":
		*_fdgbga = 1
	case "off":
		*_fdgbga = 2
	case "auto":
		*_fdgbga = 3
	}
	return nil
}

// Validate validates the EG_ContentBlockContent and its children
func (_cfdfa *EG_ContentBlockContent) Validate() error {
	return _cfdfa.ValidateWithPath("EG_ContentBlockContent")
}

// Validate validates the CT_Underline and its children
func (_cdbgda *CT_Underline) Validate() error { return _cdbgda.ValidateWithPath("CT_Underline") }
func (_fcgedg *ST_DocProtect) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fcgedg = 0
	case "none":
		*_fcgedg = 1
	case "readOnly":
		*_fcgedg = 2
	case "comments":
		*_fcgedg = 3
	case "trackedChanges":
		*_fcgedg = 4
	case "forms":
		*_fcgedg = 5
	}
	return nil
}
func NewCT_ObjectChoice() *CT_ObjectChoice { _fdff := &CT_ObjectChoice{}; return _fdff }
func NewCT_PermStart() *CT_PermStart       { _eaceb := &CT_PermStart{}; return _eaceb }
func NewCT_SmartTagRun() *CT_SmartTagRun   { _aafeg := &CT_SmartTagRun{}; return _aafeg }
func NewCT_CellMergeTrackChange() *CT_CellMergeTrackChange {
	_ggbd := &CT_CellMergeTrackChange{}
	return _ggbd
}
func (_defb *CT_DocPart) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _defb.DocPartPr != nil {
		_eeedd := _d.StartElement{Name: _d.Name{Local: "w:docPartPr"}}
		e.EncodeElement(_defb.DocPartPr, _eeedd)
	}
	if _defb.DocPartBody != nil {
		_gfefe := _d.StartElement{Name: _d.Name{Local: "w:docPartBody"}}
		e.EncodeElement(_defb.DocPartBody, _gfefe)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dbdcef *Hdr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:hdr"
	return _dbdcef.CT_HdrFtr.MarshalXML(e, start)
}
func (_aeaba *CT_Style) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aeaba.TypeAttr != ST_StyleTypeUnset {
		_agaec, _bfcff := _aeaba.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _bfcff != nil {
			return _bfcff
		}
		start.Attr = append(start.Attr, _agaec)
	}
	if _aeaba.StyleIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:styleId"}, Value: _b.Sprintf("\u0025v", *_aeaba.StyleIdAttr)})
	}
	if _aeaba.DefaultAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:default"}, Value: _b.Sprintf("\u0025v", *_aeaba.DefaultAttr)})
	}
	if _aeaba.CustomStyleAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:customStyle"}, Value: _b.Sprintf("\u0025v", *_aeaba.CustomStyleAttr)})
	}
	e.EncodeToken(start)
	if _aeaba.Name != nil {
		_dcdag := _d.StartElement{Name: _d.Name{Local: "w:name"}}
		e.EncodeElement(_aeaba.Name, _dcdag)
	}
	if _aeaba.Aliases != nil {
		_deedb := _d.StartElement{Name: _d.Name{Local: "w:aliases"}}
		e.EncodeElement(_aeaba.Aliases, _deedb)
	}
	if _aeaba.BasedOn != nil {
		_edfddg := _d.StartElement{Name: _d.Name{Local: "w:basedOn"}}
		e.EncodeElement(_aeaba.BasedOn, _edfddg)
	}
	if _aeaba.Next != nil {
		_ggegc := _d.StartElement{Name: _d.Name{Local: "w:next"}}
		e.EncodeElement(_aeaba.Next, _ggegc)
	}
	if _aeaba.Link != nil {
		_ceegcf := _d.StartElement{Name: _d.Name{Local: "w:link"}}
		e.EncodeElement(_aeaba.Link, _ceegcf)
	}
	if _aeaba.AutoRedefine != nil {
		_aegggf := _d.StartElement{Name: _d.Name{Local: "w:autoRedefine"}}
		e.EncodeElement(_aeaba.AutoRedefine, _aegggf)
	}
	if _aeaba.Hidden != nil {
		_ggaaed := _d.StartElement{Name: _d.Name{Local: "w:hidden"}}
		e.EncodeElement(_aeaba.Hidden, _ggaaed)
	}
	if _aeaba.UiPriority != nil {
		_bggaf := _d.StartElement{Name: _d.Name{Local: "w:uiPriority"}}
		e.EncodeElement(_aeaba.UiPriority, _bggaf)
	}
	if _aeaba.SemiHidden != nil {
		_defbe := _d.StartElement{Name: _d.Name{Local: "w:semiHidden"}}
		e.EncodeElement(_aeaba.SemiHidden, _defbe)
	}
	if _aeaba.UnhideWhenUsed != nil {
		_ebdaf := _d.StartElement{Name: _d.Name{Local: "w:unhideWhenUsed"}}
		e.EncodeElement(_aeaba.UnhideWhenUsed, _ebdaf)
	}
	if _aeaba.QFormat != nil {
		_bbdgf := _d.StartElement{Name: _d.Name{Local: "w:qFormat"}}
		e.EncodeElement(_aeaba.QFormat, _bbdgf)
	}
	if _aeaba.Locked != nil {
		_fecad := _d.StartElement{Name: _d.Name{Local: "w:locked"}}
		e.EncodeElement(_aeaba.Locked, _fecad)
	}
	if _aeaba.Personal != nil {
		_bcfefd := _d.StartElement{Name: _d.Name{Local: "w:personal"}}
		e.EncodeElement(_aeaba.Personal, _bcfefd)
	}
	if _aeaba.PersonalCompose != nil {
		_bffce := _d.StartElement{Name: _d.Name{Local: "w:personalCompose"}}
		e.EncodeElement(_aeaba.PersonalCompose, _bffce)
	}
	if _aeaba.PersonalReply != nil {
		_fbgcg := _d.StartElement{Name: _d.Name{Local: "w:personalReply"}}
		e.EncodeElement(_aeaba.PersonalReply, _fbgcg)
	}
	if _aeaba.Rsid != nil {
		_cbadb := _d.StartElement{Name: _d.Name{Local: "w:rsid"}}
		e.EncodeElement(_aeaba.Rsid, _cbadb)
	}
	if _aeaba.PPr != nil {
		_acgca := _d.StartElement{Name: _d.Name{Local: "w:pPr"}}
		e.EncodeElement(_aeaba.PPr, _acgca)
	}
	if _aeaba.RPr != nil {
		_dgacda := _d.StartElement{Name: _d.Name{Local: "w:rPr"}}
		e.EncodeElement(_aeaba.RPr, _dgacda)
	}
	if _aeaba.TblPr != nil {
		_cafec := _d.StartElement{Name: _d.Name{Local: "w:tblPr"}}
		e.EncodeElement(_aeaba.TblPr, _cafec)
	}
	if _aeaba.TrPr != nil {
		_bbbae := _d.StartElement{Name: _d.Name{Local: "w:trPr"}}
		e.EncodeElement(_aeaba.TrPr, _bbbae)
	}
	if _aeaba.TcPr != nil {
		_ceaab := _d.StartElement{Name: _d.Name{Local: "w:tcPr"}}
		e.EncodeElement(_aeaba.TcPr, _ceaab)
	}
	if _aeaba.TblStylePr != nil {
		_baccfg := _d.StartElement{Name: _d.Name{Local: "w:tblStylePr"}}
		for _, _feada := range _aeaba.TblStylePr {
			e.EncodeElement(_feada, _baccfg)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DivBdr and its children, prefixing error messages with path
func (_eaaf *CT_DivBdr) ValidateWithPath(path string) error {
	if _eaaf.Top != nil {
		if _geag := _eaaf.Top.ValidateWithPath(path + "\u002fTop"); _geag != nil {
			return _geag
		}
	}
	if _eaaf.Left != nil {
		if _fdfcb := _eaaf.Left.ValidateWithPath(path + "\u002fLeft"); _fdfcb != nil {
			return _fdfcb
		}
	}
	if _eaaf.Bottom != nil {
		if _cedcc := _eaaf.Bottom.ValidateWithPath(path + "\u002fBottom"); _cedcc != nil {
			return _cedcc
		}
	}
	if _eaaf.Right != nil {
		if _fgdgg := _eaaf.Right.ValidateWithPath(path + "\u002fRight"); _fgdgg != nil {
			return _fgdgg
		}
	}
	return nil
}

const (
	ST_TblOverlapUnset   ST_TblOverlap = 0
	ST_TblOverlapNever   ST_TblOverlap = 1
	ST_TblOverlapOverlap ST_TblOverlap = 2
)

func (_acfgdf *EG_ContentRowContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _acfgdf.Tr != nil {
		_degeb := _d.StartElement{Name: _d.Name{Local: "w:tr"}}
		for _, _ebdfag := range _acfgdf.Tr {
			e.EncodeElement(_ebdfag, _degeb)
		}
	}
	if _acfgdf.CustomXml != nil {
		_eaaba := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_acfgdf.CustomXml, _eaaba)
	}
	if _acfgdf.Sdt != nil {
		_eadcfe := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_acfgdf.Sdt, _eadcfe)
	}
	if _acfgdf.EG_RunLevelElts != nil {
		for _, _ffegg := range _acfgdf.EG_RunLevelElts {
			_ffegg.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func NewCT_FFTextType() *CT_FFTextType {
	_bcgbc := &CT_FFTextType{}
	_bcgbc.ValAttr = ST_FFTextType(1)
	return _bcgbc
}
func (_dcdbda ST_TabTlc) Validate() error { return _dcdbda.ValidateWithPath("") }
func NewCT_NumRestart() *CT_NumRestart {
	_eedcg := &CT_NumRestart{}
	_eedcg.ValAttr = ST_RestartNumber(1)
	return _eedcg
}

type CT_Div struct {

	// div Data ID
	IdAttr int64

	// Data for HTML blockquote Element
	BlockQuote *CT_OnOff

	// Data for HTML body Element
	BodyDiv *CT_OnOff

	// Left Margin for HTML div
	MarLeft *CT_SignedTwipsMeasure

	// Right Margin for HTML div
	MarRight *CT_SignedTwipsMeasure

	// Top Margin for HTML div
	MarTop *CT_SignedTwipsMeasure

	// Bottom Margin for HTML div
	MarBottom *CT_SignedTwipsMeasure

	// Set of Borders for HTML div
	DivBdr *CT_DivBdr

	// Child div Elements Contained within Current div
	DivsChild []*CT_Divs
}

func (_fddg *CT_Captions) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_ebcg := _d.StartElement{Name: _d.Name{Local: "w:caption"}}
	for _, _fgdg := range _fddg.Caption {
		e.EncodeElement(_fgdg, _ebcg)
	}
	if _fddg.AutoCaptions != nil {
		_cddf := _d.StartElement{Name: _d.Name{Local: "w:autoCaptions"}}
		e.EncodeElement(_fddg.AutoCaptions, _cddf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_TextboxTightWrap struct {

	// Lines to Tight Wrap to Paragraph Extents
	ValAttr ST_TextboxTightWrap
}

// ValidateWithPath validates the CT_VMerge and its children, prefixing error messages with path
func (_cbaff *CT_VMerge) ValidateWithPath(path string) error {
	if _eface := _cbaff.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _eface != nil {
		return _eface
	}
	return nil
}
func (_gfbgbf ST_Direction) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gfbgbf.String(), start)
}

// Validate validates the WdCT_WordprocessingShapeChoice1 and its children
func (_eeabgg *WdCT_WordprocessingShapeChoice1) Validate() error {
	return _eeabgg.ValidateWithPath("WdCT_WordprocessingShapeChoice1")
}

// ValidateWithPath validates the CT_Proof and its children, prefixing error messages with path
func (_fegdf *CT_Proof) ValidateWithPath(path string) error {
	if _faece := _fegdf.SpellingAttr.ValidateWithPath(path + "\u002fSpellingAttr"); _faece != nil {
		return _faece
	}
	if _edcdg := _fegdf.GrammarAttr.ValidateWithPath(path + "\u002fGrammarAttr"); _edcdg != nil {
		return _edcdg
	}
	return nil
}
func (_gadbfc *AC_ChoiceRun) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gadbfc.Br != nil {
		_fbaae := _d.StartElement{Name: _d.Name{Local: "w:br"}}
		e.EncodeElement(_gadbfc.Br, _fbaae)
	}
	if _gadbfc.T != nil {
		_aecgfa := _d.StartElement{Name: _d.Name{Local: "w:t"}}
		e.EncodeElement(_gadbfc.T, _aecgfa)
	}
	if _gadbfc.ContentPart != nil {
		_feebff := _d.StartElement{Name: _d.Name{Local: "w:contentPart"}}
		e.EncodeElement(_gadbfc.ContentPart, _feebff)
	}
	if _gadbfc.DelText != nil {
		_ffbcc := _d.StartElement{Name: _d.Name{Local: "w:delText"}}
		e.EncodeElement(_gadbfc.DelText, _ffbcc)
	}
	if _gadbfc.InstrText != nil {
		_dcddc := _d.StartElement{Name: _d.Name{Local: "w:instrText"}}
		e.EncodeElement(_gadbfc.InstrText, _dcddc)
	}
	if _gadbfc.DelInstrText != nil {
		_ffdbe := _d.StartElement{Name: _d.Name{Local: "w:delInstrText"}}
		e.EncodeElement(_gadbfc.DelInstrText, _ffdbe)
	}
	if _gadbfc.NoBreakHyphen != nil {
		_cceac := _d.StartElement{Name: _d.Name{Local: "w:noBreakHyphen"}}
		e.EncodeElement(_gadbfc.NoBreakHyphen, _cceac)
	}
	if _gadbfc.SoftHyphen != nil {
		_bgfcea := _d.StartElement{Name: _d.Name{Local: "w:softHyphen"}}
		e.EncodeElement(_gadbfc.SoftHyphen, _bgfcea)
	}
	if _gadbfc.DayShort != nil {
		_fcgfdb := _d.StartElement{Name: _d.Name{Local: "w:dayShort"}}
		e.EncodeElement(_gadbfc.DayShort, _fcgfdb)
	}
	if _gadbfc.MonthShort != nil {
		_ecbegd := _d.StartElement{Name: _d.Name{Local: "w:monthShort"}}
		e.EncodeElement(_gadbfc.MonthShort, _ecbegd)
	}
	if _gadbfc.YearShort != nil {
		_eeega := _d.StartElement{Name: _d.Name{Local: "w:yearShort"}}
		e.EncodeElement(_gadbfc.YearShort, _eeega)
	}
	if _gadbfc.DayLong != nil {
		_efgegf := _d.StartElement{Name: _d.Name{Local: "w:dayLong"}}
		e.EncodeElement(_gadbfc.DayLong, _efgegf)
	}
	if _gadbfc.MonthLong != nil {
		_dccba := _d.StartElement{Name: _d.Name{Local: "w:monthLong"}}
		e.EncodeElement(_gadbfc.MonthLong, _dccba)
	}
	if _gadbfc.YearLong != nil {
		_facebc := _d.StartElement{Name: _d.Name{Local: "w:yearLong"}}
		e.EncodeElement(_gadbfc.YearLong, _facebc)
	}
	if _gadbfc.AnnotationRef != nil {
		_fbcccb := _d.StartElement{Name: _d.Name{Local: "w:annotationRef"}}
		e.EncodeElement(_gadbfc.AnnotationRef, _fbcccb)
	}
	if _gadbfc.FootnoteRef != nil {
		_afbac := _d.StartElement{Name: _d.Name{Local: "w:footnoteRef"}}
		e.EncodeElement(_gadbfc.FootnoteRef, _afbac)
	}
	if _gadbfc.EndnoteRef != nil {
		_cabaf := _d.StartElement{Name: _d.Name{Local: "w:endnoteRef"}}
		e.EncodeElement(_gadbfc.EndnoteRef, _cabaf)
	}
	if _gadbfc.Separator != nil {
		_beecf := _d.StartElement{Name: _d.Name{Local: "w:separator"}}
		e.EncodeElement(_gadbfc.Separator, _beecf)
	}
	if _gadbfc.ContinuationSeparator != nil {
		_caaca := _d.StartElement{Name: _d.Name{Local: "w:continuationSeparator"}}
		e.EncodeElement(_gadbfc.ContinuationSeparator, _caaca)
	}
	if _gadbfc.Sym != nil {
		_ggbaa := _d.StartElement{Name: _d.Name{Local: "w:sym"}}
		e.EncodeElement(_gadbfc.Sym, _ggbaa)
	}
	if _gadbfc.PgNum != nil {
		_cfaaa := _d.StartElement{Name: _d.Name{Local: "w:pgNum"}}
		e.EncodeElement(_gadbfc.PgNum, _cfaaa)
	}
	if _gadbfc.Cr != nil {
		_dcecf := _d.StartElement{Name: _d.Name{Local: "w:cr"}}
		e.EncodeElement(_gadbfc.Cr, _dcecf)
	}
	if _gadbfc.Tab != nil {
		_accfcd := _d.StartElement{Name: _d.Name{Local: "w:tab"}}
		e.EncodeElement(_gadbfc.Tab, _accfcd)
	}
	if _gadbfc.Object != nil {
		_cdbbbed := _d.StartElement{Name: _d.Name{Local: "w:object"}}
		e.EncodeElement(_gadbfc.Object, _cdbbbed)
	}
	if _gadbfc.Pict != nil {
		_bfddf := _d.StartElement{Name: _d.Name{Local: "w:pict"}}
		e.EncodeElement(_gadbfc.Pict, _bfddf)
	}
	if _gadbfc.FldChar != nil {
		_cfaba := _d.StartElement{Name: _d.Name{Local: "w:fldChar"}}
		e.EncodeElement(_gadbfc.FldChar, _cfaba)
	}
	if _gadbfc.Ruby != nil {
		_ddfgc := _d.StartElement{Name: _d.Name{Local: "w:ruby"}}
		e.EncodeElement(_gadbfc.Ruby, _ddfgc)
	}
	if _gadbfc.FootnoteReference != nil {
		_egegb := _d.StartElement{Name: _d.Name{Local: "w:footnoteReference"}}
		e.EncodeElement(_gadbfc.FootnoteReference, _egegb)
	}
	if _gadbfc.EndnoteReference != nil {
		_cfbcad := _d.StartElement{Name: _d.Name{Local: "w:endnoteReference"}}
		e.EncodeElement(_gadbfc.EndnoteReference, _cfbcad)
	}
	if _gadbfc.CommentReference != nil {
		_gaeab := _d.StartElement{Name: _d.Name{Local: "w:commentReference"}}
		e.EncodeElement(_gadbfc.CommentReference, _gaeab)
	}
	if _gadbfc.Drawing != nil {
		_eadaa := _d.StartElement{Name: _d.Name{Local: "w:drawing"}}
		e.EncodeElement(_gadbfc.Drawing, _eadaa)
	}
	if _gadbfc.Ptab != nil {
		_gccda := _d.StartElement{Name: _d.Name{Local: "w:ptab"}}
		e.EncodeElement(_gadbfc.Ptab, _gccda)
	}
	if _gadbfc.LastRenderedPageBreak != nil {
		_ebebfd := _d.StartElement{Name: _d.Name{Local: "w:lastRenderedPageBreak"}}
		e.EncodeElement(_gadbfc.LastRenderedPageBreak, _ebebfd)
	}
	return nil
}
func (_effbga *ST_TextAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cbbgea, _fggfd := d.Token()
	if _fggfd != nil {
		return _fggfd
	}
	if _fefdde, _dggdcc := _cbbgea.(_d.EndElement); _dggdcc && _fefdde.Name == start.Name {
		*_effbga = 1
		return nil
	}
	if _ggdfb, _feeggf := _cbbgea.(_d.CharData); !_feeggf {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _cbbgea)
	} else {
		switch string(_ggdfb) {
		case "":
			*_effbga = 0
		case "top":
			*_effbga = 1
		case "center":
			*_effbga = 2
		case "baseline":
			*_effbga = 3
		case "bottom":
			*_effbga = 4
		case "auto":
			*_effbga = 5
		}
	}
	_cbbgea, _fggfd = d.Token()
	if _fggfd != nil {
		return _fggfd
	}
	if _defabe, _fgaccb := _cbbgea.(_d.EndElement); _fgaccb && _defabe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _cbbgea)
}
func (_cdedc *CT_LongHexNumber) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dbbdc := range start.Attr {
		if _dbbdc.Name.Local == "val" {
			_dfgcb, _abccd := _dbbdc.Value, error(nil)
			if _abccd != nil {
				return _abccd
			}
			_cdedc.ValAttr = _dfgcb
			continue
		}
	}
	for {
		_aecbd, _egefd := d.Token()
		if _egefd != nil {
			return _b.Errorf("parsing\u0020CT_LongHexNumber: \u0025s", _egefd)
		}
		if _begfdc, _eeaec := _aecbd.(_d.EndElement); _eeaec && _begfdc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_CustomXmlBlock struct {

	// Custom XML Element Namespace
	UriAttr *string

	// Custom XML Element Name
	ElementAttr string

	// Custom XML Element Properties
	CustomXmlPr            *CT_CustomXmlPr
	EG_ContentBlockContent []*EG_ContentBlockContent
}

const (
	ST_PageOrientationUnset     ST_PageOrientation = 0
	ST_PageOrientationPortrait  ST_PageOrientation = 1
	ST_PageOrientationLandscape ST_PageOrientation = 2
)

func (_eddcad ST_TextAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_eddcad.String(), start)
}
func NewCT_StylePaneFilter() *CT_StylePaneFilter { _eddde := &CT_StylePaneFilter{}; return _eddde }

type CT_Document struct {
	ConformanceAttr _g.ST_ConformanceClass

	// Document Background
	Background *CT_Background
	Body       *CT_Body
}

func (_deeggac ST_DocPartGallery) Validate() error { return _deeggac.ValidateWithPath("") }

type CT_SdtPrChoice struct {
	Equation     *CT_Empty
	ComboBox     *CT_SdtComboBox
	Date         *CT_SdtDate
	DocPartObj   *CT_SdtDocPart
	DocPartList  *CT_SdtDocPart
	DropDownList *CT_SdtDropDownList
	Picture      *CT_Empty
	RichText     *CT_Empty
	Text         *CT_SdtText
	Citation     *CT_Empty
	Group        *CT_Empty
	Bibliography *CT_Empty
}
type CT_FrameLayout struct {

	// Frameset Layout Value
	ValAttr ST_FrameLayout
}

func (_feafc *CT_DocRsids) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _feafc.RsidRoot != nil {
		_efae := _d.StartElement{Name: _d.Name{Local: "w:rsidRoot"}}
		e.EncodeElement(_feafc.RsidRoot, _efae)
	}
	if _feafc.Rsid != nil {
		_ebdc := _d.StartElement{Name: _d.Name{Local: "w:rsid"}}
		for _, _bacc := range _feafc.Rsid {
			e.EncodeElement(_bacc, _ebdc)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cgdecf ST_TargetScreenSz) ValidateWithPath(path string) error {
	switch _cgdecf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cgdecf))
	}
	return nil
}

// ValidateWithPath validates the CT_RubyAlign and its children, prefixing error messages with path
func (_bebfd *CT_RubyAlign) ValidateWithPath(path string) error {
	if _bebfd.ValAttr == ST_RubyAlignUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _dbgeg := _bebfd.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _dbgeg != nil {
		return _dbgeg
	}
	return nil
}
func (_cebdafd *ST_PageOrientation) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cebdafd = 0
	case "portrait":
		*_cebdafd = 1
	case "landscape":
		*_cebdafd = 2
	}
	return nil
}

// ValidateWithPath validates the CT_FtnEdnRef and its children, prefixing error messages with path
func (_ccabfc *CT_FtnEdnRef) ValidateWithPath(path string) error {
	if _ccabfc.CustomMarkFollowsAttr != nil {
		if _dgdgc := _ccabfc.CustomMarkFollowsAttr.ValidateWithPath(path + "\u002fCustomMarkFollowsAttr"); _dgdgc != nil {
			return _dgdgc
		}
	}
	return nil
}
func (_aaebe ST_ChapterSep) Validate() error { return _aaebe.ValidateWithPath("") }
func (_ababf *CT_PageNumber) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ababf.FmtAttr != ST_NumberFormatUnset {
		_eefac, _ddcba := _ababf.FmtAttr.MarshalXMLAttr(_d.Name{Local: "w:fmt"})
		if _ddcba != nil {
			return _ddcba
		}
		start.Attr = append(start.Attr, _eefac)
	}
	if _ababf.StartAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:start"}, Value: _b.Sprintf("\u0025v", *_ababf.StartAttr)})
	}
	if _ababf.ChapStyleAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:chapStyle"}, Value: _b.Sprintf("\u0025v", *_ababf.ChapStyleAttr)})
	}
	if _ababf.ChapSepAttr != ST_ChapterSepUnset {
		_ffefgc, _dfgffb := _ababf.ChapSepAttr.MarshalXMLAttr(_d.Name{Local: "w:chapSep"})
		if _dfgffb != nil {
			return _dfgffb
		}
		start.Attr = append(start.Attr, _ffefgc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fdgea ST_DocPartBehavior) String() string {
	switch _fdgea {
	case 0:
		return ""
	case 1:
		return "content"
	case 2:
		return "p"
	case 3:
		return "pg"
	}
	return ""
}

type CT_WebSettings struct {

	// Root Frameset Definition
	Frameset *CT_Frameset

	// Information about HTML div Elements
	Divs *CT_Divs

	// Output Encoding When Saving as Web Page
	Encoding *CT_String

	// Disable Features Not Supported by Target Web Browser
	OptimizeForBrowser *CT_OptimizeForBrowser

	// Utilize VML When Saving as Web Page
	RelyOnVML *CT_OnOff

	// Allow PNG as Graphic Format
	AllowPNG *CT_OnOff

	// Do Not Rely on CSS for Font Face Formatting
	DoNotRelyOnCSS *CT_OnOff

	// Recommend Web Page Format over Single File Web Page Format
	DoNotSaveAsSingleFile *CT_OnOff

	// Do Not Place Supporting Files in Subdirectory
	DoNotOrganizeInFolder *CT_OnOff

	// Do Not Use File Names Longer than 8.3 Characters
	DoNotUseLongFileNames *CT_OnOff

	// Pixels per Inch for Graphics/Images
	PixelsPerInch *CT_DecimalNumber

	// Target Screen Size for Web Page
	TargetScreenSz *CT_TargetScreenSz

	// Save Smart Tag Data in XML Property Bag
	SaveSmartTagsAsXml *CT_OnOff
}

func NewCT_FramesetSplitbar() *CT_FramesetSplitbar { _egace := &CT_FramesetSplitbar{}; return _egace }
func (_gabe *CT_Br) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gabe.TypeAttr != ST_BrTypeUnset {
		_aead, _efc := _gabe.TypeAttr.MarshalXMLAttr(_d.Name{Local: "w:type"})
		if _efc != nil {
			return _efc
		}
		start.Attr = append(start.Attr, _aead)
	}
	if _gabe.ClearAttr != ST_BrClearUnset {
		_geaf, _cbge := _gabe.ClearAttr.MarshalXMLAttr(_d.Name{Local: "w:clear"})
		if _cbge != nil {
			return _cbge
		}
		start.Attr = append(start.Attr, _geaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_Guid() *CT_Guid { _adcfa := &CT_Guid{}; return _adcfa }

// Validate validates the Fonts and its children
func (_eaegbc *Fonts) Validate() error { return _eaegbc.ValidateWithPath("Fonts") }
func (_ecca *CT_CellMergeTrackChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ecca.VMergeAttr != ST_AnnotationVMergeUnset {
		_cfga, _ggd := _ecca.VMergeAttr.MarshalXMLAttr(_d.Name{Local: "w:vMerge"})
		if _ggd != nil {
			return _ggd
		}
		start.Attr = append(start.Attr, _cfga)
	}
	if _ecca.VMergeOrigAttr != ST_AnnotationVMergeUnset {
		_acag, _abeb := _ecca.VMergeOrigAttr.MarshalXMLAttr(_d.Name{Local: "w:vMergeOrig"})
		if _abeb != nil {
			return _abeb
		}
		start.Attr = append(start.Attr, _acag)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _ecca.AuthorAttr)})
	if _ecca.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_ecca.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _ecca.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dbcced ST_Zoom) Validate() error { return _dbcced.ValidateWithPath("") }

type CT_BdoContentRun struct {

	// Direction of Override
	ValAttr ST_Direction

	// Simple Field
	FldSimple []*CT_SimpleField

	// Hyperlink
	Hyperlink *CT_Hyperlink

	// Anchor for Subdocument Location
	SubDoc               *CT_Rel
	EG_ContentRunContent []*EG_ContentRunContent
}

func (_bfab *CT_Language) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gccdd := range start.Attr {
		if _gccdd.Name.Local == "val" {
			_dbefc, _fbfgg := _gccdd.Value, error(nil)
			if _fbfgg != nil {
				return _fbfgg
			}
			_bfab.ValAttr = &_dbefc
			continue
		}
		if _gccdd.Name.Local == "eastAsia" {
			_dfdag, _eefbab := _gccdd.Value, error(nil)
			if _eefbab != nil {
				return _eefbab
			}
			_bfab.EastAsiaAttr = &_dfdag
			continue
		}
		if _gccdd.Name.Local == "bidi" {
			_geba, _feebc := _gccdd.Value, error(nil)
			if _feebc != nil {
				return _feebc
			}
			_bfab.BidiAttr = &_geba
			continue
		}
	}
	for {
		_eadff, _ddfca := d.Token()
		if _ddfca != nil {
			return _b.Errorf("parsing\u0020CT_Language:\u0020\u0025s", _ddfca)
		}
		if _aaaed, _fead := _eadff.(_d.EndElement); _fead && _aaaed.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_EdnPosUnset   ST_EdnPos = 0
	ST_EdnPosSectEnd ST_EdnPos = 1
	ST_EdnPosDocEnd  ST_EdnPos = 2
)

func (_dcdgce ST_TblOverlap) Validate() error { return _dcdgce.ValidateWithPath("") }

// ValidateWithPath validates the CT_Columns and its children, prefixing error messages with path
func (_caab *CT_Columns) ValidateWithPath(path string) error {
	if _caab.EqualWidthAttr != nil {
		if _ffba := _caab.EqualWidthAttr.ValidateWithPath(path + "\u002fEqualWidthAttr"); _ffba != nil {
			return _ffba
		}
	}
	if _caab.SpaceAttr != nil {
		if _ccaa := _caab.SpaceAttr.ValidateWithPath(path + "\u002fSpaceAttr"); _ccaa != nil {
			return _ccaa
		}
	}
	if _caab.SepAttr != nil {
		if _fgfd := _caab.SepAttr.ValidateWithPath(path + "\u002fSepAttr"); _fgfd != nil {
			return _fgfd
		}
	}
	for _efgf, _edbf := range _caab.Col {
		if _egfg := _edbf.ValidateWithPath(_b.Sprintf("\u0025s\u002fCol\u005b\u0025d\u005d", path, _efgf)); _egfg != nil {
			return _egfg
		}
	}
	return nil
}
func (_edcfbb WdST_RelFromV) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_edcfbb.String(), start)
}

type EG_SectPrContents struct {

	// Section-Wide Footnote Properties
	FootnotePr *CT_FtnProps

	// Section-Wide Endnote Properties
	EndnotePr *CT_EdnProps

	// Section Type
	Type *CT_SectType

	// Page Size
	PgSz *CT_PageSz

	// Page Margins
	PgMar *CT_PageMar

	// Paper Source Information
	PaperSrc *CT_PaperSource

	// Page Borders
	PgBorders *CT_PageBorders

	// Line Numbering Settings
	LnNumType *CT_LineNumber

	// Page Numbering Settings
	PgNumType *CT_PageNumber

	// Column Definitions
	Cols *CT_Columns

	// Only Allow Editing of Form Fields
	FormProt *CT_OnOff

	// Vertical Text Alignment on Page
	VAlign *CT_VerticalJc

	// Suppress Endnotes In Document
	NoEndnote *CT_OnOff

	// Different First Page Headers and Footers
	TitlePg *CT_OnOff

	// Text Flow Direction
	TextDirection *CT_TextDirection

	// Right to Left Section Layout
	Bidi *CT_OnOff

	// Gutter on Right Side of Page
	RtlGutter *CT_OnOff

	// Document Grid
	DocGrid *CT_DocGrid

	// Reference to Printer Settings Data
	PrinterSettings *CT_Rel
}

func (_eecdec *CT_Kinsoku) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cbddc := range start.Attr {
		if _cbddc.Name.Local == "lang" {
			_cafbf, _eeec := _cbddc.Value, error(nil)
			if _eeec != nil {
				return _eeec
			}
			_eecdec.LangAttr = _cafbf
			continue
		}
		if _cbddc.Name.Local == "val" {
			_aeded, _deaaf := _cbddc.Value, error(nil)
			if _deaaf != nil {
				return _deaaf
			}
			_eecdec.ValAttr = _aeded
			continue
		}
	}
	for {
		_aaeg, _debfb := d.Token()
		if _debfb != nil {
			return _b.Errorf("parsing\u0020CT_Kinsoku:\u0020%s", _debfb)
		}
		if _gdbee, _eagg := _aaeg.(_d.EndElement); _eagg && _gdbee.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Direction byte

func (_faabf ST_LevelSuffix) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_acagb := _d.Attr{}
	_acagb.Name = name
	switch _faabf {
	case ST_LevelSuffixUnset:
		_acagb.Value = ""
	case ST_LevelSuffixTab:
		_acagb.Value = "tab"
	case ST_LevelSuffixSpace:
		_acagb.Value = "space"
	case ST_LevelSuffixNothing:
		_acagb.Value = "nothing"
	}
	return _acagb, nil
}

type CT_CompatSetting struct {

	// Name of Setting
	NameAttr *string

	// Namespace of Setting
	UriAttr *string

	// Value of Setting
	ValAttr *string
}
type CT_TblPrEx struct {

	// Preferred Table Width Exception
	TblW *CT_TblWidth

	// Table Alignment Exception
	Jc *CT_JcTable

	// Table Cell Spacing Exception
	TblCellSpacing *CT_TblWidth

	// Table Indent from Leading Margin Exception
	TblInd *CT_TblWidth

	// Table Borders Exceptions
	TblBorders *CT_TblBorders

	// Table Shading Exception
	Shd *CT_Shd

	// Table Layout Exception
	TblLayout *CT_TblLayoutType

	// Table Cell Margin Exceptions
	TblCellMar *CT_TblCellMar

	// Table Style Conditional Formatting Settings Exception
	TblLook       *CT_TblLook
	TblPrExChange *CT_TblPrExChange
}

func (_eecdae *CT_SignedHpsMeasure) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fcdeae := range start.Attr {
		if _fcdeae.Name.Local == "val" {
			_gdbce, _cdffe := ParseUnionST_SignedHpsMeasure(_fcdeae.Value)
			if _cdffe != nil {
				return _cdffe
			}
			_eecdae.ValAttr = _gdbce
			continue
		}
	}
	for {
		_gfdag, _dgbdc := d.Token()
		if _dgbdc != nil {
			return _b.Errorf("parsing\u0020CT_SignedHpsMeasure:\u0020\u0025s", _dgbdc)
		}
		if _fddga, _aggbb := _gfdag.(_d.EndElement); _aggbb && _fddga.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PageBorders and its children, prefixing error messages with path
func (_ababe *CT_PageBorders) ValidateWithPath(path string) error {
	if _ffebb := _ababe.ZOrderAttr.ValidateWithPath(path + "/ZOrderAttr"); _ffebb != nil {
		return _ffebb
	}
	if _fagec := _ababe.DisplayAttr.ValidateWithPath(path + "\u002fDisplayAttr"); _fagec != nil {
		return _fagec
	}
	if _gabab := _ababe.OffsetFromAttr.ValidateWithPath(path + "\u002fOffsetFromAttr"); _gabab != nil {
		return _gabab
	}
	if _ababe.Top != nil {
		if _cbbee := _ababe.Top.ValidateWithPath(path + "\u002fTop"); _cbbee != nil {
			return _cbbee
		}
	}
	if _ababe.Left != nil {
		if _cdfde := _ababe.Left.ValidateWithPath(path + "\u002fLeft"); _cdfde != nil {
			return _cdfde
		}
	}
	if _ababe.Bottom != nil {
		if _agabaf := _ababe.Bottom.ValidateWithPath(path + "\u002fBottom"); _agabaf != nil {
			return _agabaf
		}
	}
	if _ababe.Right != nil {
		if _debcd := _ababe.Right.ValidateWithPath(path + "\u002fRight"); _debcd != nil {
			return _debcd
		}
	}
	return nil
}
func (_adca *CT_FtnProps) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _adca.Pos != nil {
		_fbfcb := _d.StartElement{Name: _d.Name{Local: "w:pos"}}
		e.EncodeElement(_adca.Pos, _fbfcb)
	}
	if _adca.NumFmt != nil {
		_gcgg := _d.StartElement{Name: _d.Name{Local: "w:numFmt"}}
		e.EncodeElement(_adca.NumFmt, _gcgg)
	}
	if _adca.NumStart != nil {
		_bbba := _d.StartElement{Name: _d.Name{Local: "w:numStart"}}
		e.EncodeElement(_adca.NumStart, _bbba)
	}
	if _adca.NumRestart != nil {
		_befgd := _d.StartElement{Name: _d.Name{Local: "w:numRestart"}}
		e.EncodeElement(_adca.NumRestart, _befgd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_FtnPos byte

func (_bcceg *ST_AnnotationVMerge) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bcceg = 0
	case "cont":
		*_bcceg = 1
	case "rest":
		*_bcceg = 2
	}
	return nil
}
func (_gbfde ST_LevelSuffix) Validate() error { return _gbfde.ValidateWithPath("") }

const (
	ST_ViewUnset       ST_View = 0
	ST_ViewNone        ST_View = 1
	ST_ViewPrint       ST_View = 2
	ST_ViewOutline     ST_View = 3
	ST_ViewMasterPages ST_View = 4
	ST_ViewNormal      ST_View = 5
	ST_ViewWeb         ST_View = 6
)

func (_eggdc *CT_FrameScrollbar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eggdc.ValAttr = ST_FrameScrollbar(1)
	for _, _bdbba := range start.Attr {
		if _bdbba.Name.Local == "val" {
			_eggdc.ValAttr.UnmarshalXMLAttr(_bdbba)
			continue
		}
	}
	for {
		_gdgge, _ebfgb := d.Token()
		if _ebfgb != nil {
			return _b.Errorf("parsing\u0020CT_FrameScrollbar: \u0025s", _ebfgb)
		}
		if _bcgda, _ebgg := _gdgge.(_d.EndElement); _ebgg && _bcgda.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Shd byte

// ValidateWithPath validates the CT_ProofErr and its children, prefixing error messages with path
func (_bbegf *CT_ProofErr) ValidateWithPath(path string) error {
	if _bbegf.TypeAttr == ST_ProofErrUnset {
		return _b.Errorf("\u0025s\u002fTypeAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _dabcf := _bbegf.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _dabcf != nil {
		return _dabcf
	}
	return nil
}

// Validate validates the CT_PPrGeneral and its children
func (_cgbgfb *CT_PPrGeneral) Validate() error { return _cgbgfb.ValidateWithPath("CT_PPrGeneral") }
func NewCT_TextboxTightWrap() *CT_TextboxTightWrap {
	_fgbbg := &CT_TextboxTightWrap{}
	_fgbbg.ValAttr = ST_TextboxTightWrap(1)
	return _fgbbg
}
func NewCT_Height() *CT_Height { _bfffe := &CT_Height{}; return _bfffe }
func (_gfdeg *WdCT_LinkedTextboxInformation) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "id"}, Value: _b.Sprintf("\u0025v", _gfdeg.IdAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "seq"}, Value: _b.Sprintf("\u0025v", _gfdeg.SeqAttr)})
	e.EncodeToken(start)
	if _gfdeg.ExtLst != nil {
		_bgffgb := _d.StartElement{Name: _d.Name{Local: "wp:extLst"}}
		e.EncodeElement(_gfdeg.ExtLst, _bgffgb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_RPr() *CT_RPr { _adaeg := &CT_RPr{}; return _adaeg }
func (_adffcc *CT_RubyAlign) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_beeee, _fgfga := _adffcc.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _fgfga != nil {
		return _fgfga
	}
	start.Attr = append(start.Attr, _beeee)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_FrameLayout and its children, prefixing error messages with path
func (_gdbd *CT_FrameLayout) ValidateWithPath(path string) error {
	if _gdbd.ValAttr == ST_FrameLayoutUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _cbefa := _gdbd.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _cbefa != nil {
		return _cbefa
	}
	return nil
}

type CT_Picture struct {
	Any []_ga.Any

	// Embedded Video
	Movie *CT_Rel

	// Floating Embedded Control
	Control *CT_Control
}

// ValidateWithPath validates the CT_SdtRow and its children, prefixing error messages with path
func (_cdgdf *CT_SdtRow) ValidateWithPath(path string) error {
	if _cdgdf.SdtPr != nil {
		if _eaagf := _cdgdf.SdtPr.ValidateWithPath(path + "\u002fSdtPr"); _eaagf != nil {
			return _eaagf
		}
	}
	if _cdgdf.SdtEndPr != nil {
		if _dbdff := _cdgdf.SdtEndPr.ValidateWithPath(path + "\u002fSdtEndPr"); _dbdff != nil {
			return _dbdff
		}
	}
	if _cdgdf.SdtContent != nil {
		if _cdcdcc := _cdgdf.SdtContent.ValidateWithPath(path + "/SdtContent"); _cdcdcc != nil {
			return _cdcdcc
		}
	}
	return nil
}
func (_dbagfa ST_PTabAlignment) Validate() error   { return _dbagfa.ValidateWithPath("") }
func (_bdabc ST_MailMergeDocType) Validate() error { return _bdabc.ValidateWithPath("") }
func (_cdfgc *CT_FitText) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bgecb := range start.Attr {
		if _bgecb.Name.Local == "val" {
			_cdbed, _accg := ParseUnionST_TwipsMeasure(_bgecb.Value)
			if _accg != nil {
				return _accg
			}
			_cdfgc.ValAttr = _cdbed
			continue
		}
		if _bgecb.Name.Local == "id" {
			_fbgeg, _ffeac := _dd.ParseInt(_bgecb.Value, 10, 64)
			if _ffeac != nil {
				return _ffeac
			}
			_cdfgc.IdAttr = &_fbgeg
			continue
		}
	}
	for {
		_eegde, _fcdcd := d.Token()
		if _fcdcd != nil {
			return _b.Errorf("parsing\u0020CT_FitText:\u0020%s", _fcdcd)
		}
		if _ffeeg, _daaab := _eegde.(_d.EndElement); _daaab && _ffeeg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ebefg *CT_Perm) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ebbea := range start.Attr {
		if _ebbea.Name.Local == "id" {
			_bgbbeb, _gfgfa := _ebbea.Value, error(nil)
			if _gfgfa != nil {
				return _gfgfa
			}
			_ebefg.IdAttr = _bgbbeb
			continue
		}
		if _ebbea.Name.Local == "displacedByCustomXml" {
			_ebefg.DisplacedByCustomXmlAttr.UnmarshalXMLAttr(_ebbea)
			continue
		}
	}
	for {
		_dffec, _addgb := d.Token()
		if _addgb != nil {
			return _b.Errorf("parsing\u0020CT_Perm:\u0020\u0025s", _addgb)
		}
		if _bgcae, _dbadc := _dffec.(_d.EndElement); _dbadc && _bgcae.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_TblGridBase and its children
func (_gcacc *CT_TblGridBase) Validate() error { return _gcacc.ValidateWithPath("CT_TblGridBase") }
func (_abgce *WdCT_PosVChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _abgce.Align != WdST_AlignVUnset {
		_eeefe := _d.StartElement{Name: _d.Name{Local: "wp:align"}}
		e.EncodeElement(_abgce.Align, _eeefe)
	}
	if _abgce.PosOffset != nil {
		_fbaef := _d.StartElement{Name: _d.Name{Local: "wp:posOffset"}}
		e.EncodeElement(_abgce.PosOffset, _fbaef)
	}
	return nil
}
func (_bbbbd *CT_FramesetChoice) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bbbbd.Frameset != nil {
		_fegee := _d.StartElement{Name: _d.Name{Local: "w:frameset"}}
		for _, _edfag := range _bbbbd.Frameset {
			e.EncodeElement(_edfag, _fegee)
		}
	}
	if _bbbbd.Frame != nil {
		_adcdg := _d.StartElement{Name: _d.Name{Local: "w:frame"}}
		for _, _ebeb := range _bbbbd.Frame {
			e.EncodeElement(_ebeb, _adcdg)
		}
	}
	return nil
}

type CT_FldChar struct {

	// Field Character Type
	FldCharTypeAttr ST_FldCharType

	// Field Should Not Be Recalculated
	FldLockAttr *_g.ST_OnOff

	// Field Result Invalidated
	DirtyAttr *_g.ST_OnOff

	// Custom Field Data
	FldData *CT_Text

	// Form Field Properties
	FfData *CT_FFData

	// Previous Numbering Field Properties
	NumberingChange *CT_TrackChangeNumbering
}

func (_dgdgfc *WdST_WrapText) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fegce, _cddfcf := d.Token()
	if _cddfcf != nil {
		return _cddfcf
	}
	if _bfgcf, _efbdab := _fegce.(_d.EndElement); _efbdab && _bfgcf.Name == start.Name {
		*_dgdgfc = 1
		return nil
	}
	if _bfddd, _feagb := _fegce.(_d.CharData); !_feagb {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fegce)
	} else {
		switch string(_bfddd) {
		case "":
			*_dgdgfc = 0
		case "bothSides":
			*_dgdgfc = 1
		case "left":
			*_dgdgfc = 2
		case "right":
			*_dgdgfc = 3
		case "largest":
			*_dgdgfc = 4
		}
	}
	_fegce, _cddfcf = d.Token()
	if _cddfcf != nil {
		return _cddfcf
	}
	if _fbagce, _fgdbg := _fegce.(_d.EndElement); _fgdbg && _fbagce.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fegce)
}
func (_ccaff *CT_TblWidth) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _eggbe := range start.Attr {
		if _eggbe.Name.Local == "w" {
			_bgfde, _aafcec := ParseUnionST_MeasurementOrPercent(_eggbe.Value)
			if _aafcec != nil {
				return _aafcec
			}
			_ccaff.WAttr = &_bgfde
			continue
		}
		if _eggbe.Name.Local == "type" {
			_ccaff.TypeAttr.UnmarshalXMLAttr(_eggbe)
			continue
		}
	}
	for {
		_afbeda, _ecfcge := d.Token()
		if _ecfcge != nil {
			return _b.Errorf("parsing\u0020CT_TblWidth:\u0020\u0025s", _ecfcge)
		}
		if _gbgda, _fddea := _afbeda.(_d.EndElement); _fddea && _gbgda.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_SdtText struct {

	// Allow Soft Line Breaks
	MultiLineAttr *_g.ST_OnOff
}

func (_fdbad ST_LevelSuffix) ValidateWithPath(path string) error {
	switch _fdbad {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_fdbad))
	}
	return nil
}
func (_dffb *CT_Cnf) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dffb.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", *_dffb.ValAttr)})
	}
	if _dffb.FirstRowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstRow"}, Value: _b.Sprintf("\u0025v", *_dffb.FirstRowAttr)})
	}
	if _dffb.LastRowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastRow"}, Value: _b.Sprintf("\u0025v", *_dffb.LastRowAttr)})
	}
	if _dffb.FirstColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstColumn"}, Value: _b.Sprintf("\u0025v", *_dffb.FirstColumnAttr)})
	}
	if _dffb.LastColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastColumn"}, Value: _b.Sprintf("\u0025v", *_dffb.LastColumnAttr)})
	}
	if _dffb.OddVBandAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:oddVBand"}, Value: _b.Sprintf("\u0025v", *_dffb.OddVBandAttr)})
	}
	if _dffb.EvenVBandAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:evenVBand"}, Value: _b.Sprintf("\u0025v", *_dffb.EvenVBandAttr)})
	}
	if _dffb.OddHBandAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:oddHBand"}, Value: _b.Sprintf("\u0025v", *_dffb.OddHBandAttr)})
	}
	if _dffb.EvenHBandAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:evenHBand"}, Value: _b.Sprintf("\u0025v", *_dffb.EvenHBandAttr)})
	}
	if _dffb.FirstRowFirstColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstRowFirstColumn"}, Value: _b.Sprintf("\u0025v", *_dffb.FirstRowFirstColumnAttr)})
	}
	if _dffb.FirstRowLastColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:firstRowLastColumn"}, Value: _b.Sprintf("\u0025v", *_dffb.FirstRowLastColumnAttr)})
	}
	if _dffb.LastRowFirstColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastRowFirstColumn"}, Value: _b.Sprintf("\u0025v", *_dffb.LastRowFirstColumnAttr)})
	}
	if _dffb.LastRowLastColumnAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lastRowLastColumn"}, Value: _b.Sprintf("\u0025v", *_dffb.LastRowLastColumnAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_WritingStyle and its children, prefixing error messages with path
func (_bfbbeaa *CT_WritingStyle) ValidateWithPath(path string) error {
	if _bfbbeaa.NlCheckAttr != nil {
		if _cdeece := _bfbbeaa.NlCheckAttr.ValidateWithPath(path + "\u002fNlCheckAttr"); _cdeece != nil {
			return _cdeece
		}
	}
	if _adfbf := _bfbbeaa.CheckStyleAttr.ValidateWithPath(path + "\u002fCheckStyleAttr"); _adfbf != nil {
		return _adfbf
	}
	return nil
}

type CT_ShapeDefaults struct{ Any []_ga.Any }
type WdCT_Inline struct {
	DistTAttr         *uint32
	DistBAttr         *uint32
	DistLAttr         *uint32
	DistRAttr         *uint32
	Extent            *_eb.CT_PositiveSize2D
	EffectExtent      *WdCT_EffectExtent
	DocPr             *_eb.CT_NonVisualDrawingProps
	CNvGraphicFramePr *_eb.CT_NonVisualGraphicFrameProperties
	Graphic           *_eb.Graphic
}

// ValidateWithPath validates the CT_Picture and its children, prefixing error messages with path
func (_gccae *CT_Picture) ValidateWithPath(path string) error {
	if _gccae.Movie != nil {
		if _ecabc := _gccae.Movie.ValidateWithPath(path + "\u002fMovie"); _ecabc != nil {
			return _ecabc
		}
	}
	if _gccae.Control != nil {
		if _bbafe := _gccae.Control.ValidateWithPath(path + "\u002fControl"); _bbafe != nil {
			return _bbafe
		}
	}
	return nil
}

// Validate validates the CT_FFName and its children
func (_cfeag *CT_FFName) Validate() error { return _cfeag.ValidateWithPath("CT_FFName") }
func (_bgbe *CT_Compat) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bgbe.UseSingleBorderforContiguousCells != nil {
		_cafa := _d.StartElement{Name: _d.Name{Local: "w:useSingleBorderforContiguousCells"}}
		e.EncodeElement(_bgbe.UseSingleBorderforContiguousCells, _cafa)
	}
	if _bgbe.WpJustification != nil {
		_cgac := _d.StartElement{Name: _d.Name{Local: "w:wpJustification"}}
		e.EncodeElement(_bgbe.WpJustification, _cgac)
	}
	if _bgbe.NoTabHangInd != nil {
		_dfcf := _d.StartElement{Name: _d.Name{Local: "w:noTabHangInd"}}
		e.EncodeElement(_bgbe.NoTabHangInd, _dfcf)
	}
	if _bgbe.NoLeading != nil {
		_aeaf := _d.StartElement{Name: _d.Name{Local: "w:noLeading"}}
		e.EncodeElement(_bgbe.NoLeading, _aeaf)
	}
	if _bgbe.SpaceForUL != nil {
		_bdda := _d.StartElement{Name: _d.Name{Local: "w:spaceForUL"}}
		e.EncodeElement(_bgbe.SpaceForUL, _bdda)
	}
	if _bgbe.NoColumnBalance != nil {
		_ddbd := _d.StartElement{Name: _d.Name{Local: "w:noColumnBalance"}}
		e.EncodeElement(_bgbe.NoColumnBalance, _ddbd)
	}
	if _bgbe.BalanceSingleByteDoubleByteWidth != nil {
		_gbea := _d.StartElement{Name: _d.Name{Local: "w:balanceSingleByteDoubleByteWidth"}}
		e.EncodeElement(_bgbe.BalanceSingleByteDoubleByteWidth, _gbea)
	}
	if _bgbe.NoExtraLineSpacing != nil {
		_bggeg := _d.StartElement{Name: _d.Name{Local: "w:noExtraLineSpacing"}}
		e.EncodeElement(_bgbe.NoExtraLineSpacing, _bggeg)
	}
	if _bgbe.DoNotLeaveBackslashAlone != nil {
		_fbgb := _d.StartElement{Name: _d.Name{Local: "w:doNotLeaveBackslashAlone"}}
		e.EncodeElement(_bgbe.DoNotLeaveBackslashAlone, _fbgb)
	}
	if _bgbe.UlTrailSpace != nil {
		_dbba := _d.StartElement{Name: _d.Name{Local: "w:ulTrailSpace"}}
		e.EncodeElement(_bgbe.UlTrailSpace, _dbba)
	}
	if _bgbe.DoNotExpandShiftReturn != nil {
		_abef := _d.StartElement{Name: _d.Name{Local: "w:doNotExpandShiftReturn"}}
		e.EncodeElement(_bgbe.DoNotExpandShiftReturn, _abef)
	}
	if _bgbe.SpacingInWholePoints != nil {
		_ceea := _d.StartElement{Name: _d.Name{Local: "w:spacingInWholePoints"}}
		e.EncodeElement(_bgbe.SpacingInWholePoints, _ceea)
	}
	if _bgbe.LineWrapLikeWord6 != nil {
		_fbbe := _d.StartElement{Name: _d.Name{Local: "w:lineWrapLikeWord6"}}
		e.EncodeElement(_bgbe.LineWrapLikeWord6, _fbbe)
	}
	if _bgbe.PrintBodyTextBeforeHeader != nil {
		_edgf := _d.StartElement{Name: _d.Name{Local: "w:printBodyTextBeforeHeader"}}
		e.EncodeElement(_bgbe.PrintBodyTextBeforeHeader, _edgf)
	}
	if _bgbe.PrintColBlack != nil {
		_gfce := _d.StartElement{Name: _d.Name{Local: "w:printColBlack"}}
		e.EncodeElement(_bgbe.PrintColBlack, _gfce)
	}
	if _bgbe.WpSpaceWidth != nil {
		_abbff := _d.StartElement{Name: _d.Name{Local: "w:wpSpaceWidth"}}
		e.EncodeElement(_bgbe.WpSpaceWidth, _abbff)
	}
	if _bgbe.ShowBreaksInFrames != nil {
		_ffdcg := _d.StartElement{Name: _d.Name{Local: "w:showBreaksInFrames"}}
		e.EncodeElement(_bgbe.ShowBreaksInFrames, _ffdcg)
	}
	if _bgbe.SubFontBySize != nil {
		_geeb := _d.StartElement{Name: _d.Name{Local: "w:subFontBySize"}}
		e.EncodeElement(_bgbe.SubFontBySize, _geeb)
	}
	if _bgbe.SuppressBottomSpacing != nil {
		_aada := _d.StartElement{Name: _d.Name{Local: "w:suppressBottomSpacing"}}
		e.EncodeElement(_bgbe.SuppressBottomSpacing, _aada)
	}
	if _bgbe.SuppressTopSpacing != nil {
		_ffcg := _d.StartElement{Name: _d.Name{Local: "w:suppressTopSpacing"}}
		e.EncodeElement(_bgbe.SuppressTopSpacing, _ffcg)
	}
	if _bgbe.SuppressSpacingAtTopOfPage != nil {
		_edcg := _d.StartElement{Name: _d.Name{Local: "w:suppressSpacingAtTopOfPage"}}
		e.EncodeElement(_bgbe.SuppressSpacingAtTopOfPage, _edcg)
	}
	if _bgbe.SuppressTopSpacingWP != nil {
		_bgfe := _d.StartElement{Name: _d.Name{Local: "w:suppressTopSpacingWP"}}
		e.EncodeElement(_bgbe.SuppressTopSpacingWP, _bgfe)
	}
	if _bgbe.SuppressSpBfAfterPgBrk != nil {
		_cgcb := _d.StartElement{Name: _d.Name{Local: "w:suppressSpBfAfterPgBrk"}}
		e.EncodeElement(_bgbe.SuppressSpBfAfterPgBrk, _cgcb)
	}
	if _bgbe.SwapBordersFacingPages != nil {
		_edfd := _d.StartElement{Name: _d.Name{Local: "w:swapBordersFacingPages"}}
		e.EncodeElement(_bgbe.SwapBordersFacingPages, _edfd)
	}
	if _bgbe.ConvMailMergeEsc != nil {
		_aeba := _d.StartElement{Name: _d.Name{Local: "w:convMailMergeEsc"}}
		e.EncodeElement(_bgbe.ConvMailMergeEsc, _aeba)
	}
	if _bgbe.TruncateFontHeightsLikeWP6 != nil {
		_geed := _d.StartElement{Name: _d.Name{Local: "w:truncateFontHeightsLikeWP6"}}
		e.EncodeElement(_bgbe.TruncateFontHeightsLikeWP6, _geed)
	}
	if _bgbe.MwSmallCaps != nil {
		_ddfbb := _d.StartElement{Name: _d.Name{Local: "w:mwSmallCaps"}}
		e.EncodeElement(_bgbe.MwSmallCaps, _ddfbb)
	}
	if _bgbe.UsePrinterMetrics != nil {
		_bfgf := _d.StartElement{Name: _d.Name{Local: "w:usePrinterMetrics"}}
		e.EncodeElement(_bgbe.UsePrinterMetrics, _bfgf)
	}
	if _bgbe.DoNotSuppressParagraphBorders != nil {
		_dadf := _d.StartElement{Name: _d.Name{Local: "w:doNotSuppressParagraphBorders"}}
		e.EncodeElement(_bgbe.DoNotSuppressParagraphBorders, _dadf)
	}
	if _bgbe.WrapTrailSpaces != nil {
		_dagg := _d.StartElement{Name: _d.Name{Local: "w:wrapTrailSpaces"}}
		e.EncodeElement(_bgbe.WrapTrailSpaces, _dagg)
	}
	if _bgbe.FootnoteLayoutLikeWW8 != nil {
		_dedf := _d.StartElement{Name: _d.Name{Local: "w:footnoteLayoutLikeWW8"}}
		e.EncodeElement(_bgbe.FootnoteLayoutLikeWW8, _dedf)
	}
	if _bgbe.ShapeLayoutLikeWW8 != nil {
		_cdgd := _d.StartElement{Name: _d.Name{Local: "w:shapeLayoutLikeWW8"}}
		e.EncodeElement(_bgbe.ShapeLayoutLikeWW8, _cdgd)
	}
	if _bgbe.AlignTablesRowByRow != nil {
		_gecc := _d.StartElement{Name: _d.Name{Local: "w:alignTablesRowByRow"}}
		e.EncodeElement(_bgbe.AlignTablesRowByRow, _gecc)
	}
	if _bgbe.ForgetLastTabAlignment != nil {
		_bbaf := _d.StartElement{Name: _d.Name{Local: "w:forgetLastTabAlignment"}}
		e.EncodeElement(_bgbe.ForgetLastTabAlignment, _bbaf)
	}
	if _bgbe.AdjustLineHeightInTable != nil {
		_dddf := _d.StartElement{Name: _d.Name{Local: "w:adjustLineHeightInTable"}}
		e.EncodeElement(_bgbe.AdjustLineHeightInTable, _dddf)
	}
	if _bgbe.AutoSpaceLikeWord95 != nil {
		_bcc := _d.StartElement{Name: _d.Name{Local: "w:autoSpaceLikeWord95"}}
		e.EncodeElement(_bgbe.AutoSpaceLikeWord95, _bcc)
	}
	if _bgbe.NoSpaceRaiseLower != nil {
		_bagf := _d.StartElement{Name: _d.Name{Local: "w:noSpaceRaiseLower"}}
		e.EncodeElement(_bgbe.NoSpaceRaiseLower, _bagf)
	}
	if _bgbe.DoNotUseHTMLParagraphAutoSpacing != nil {
		_afdb := _d.StartElement{Name: _d.Name{Local: "w:doNotUseHTMLParagraphAutoSpacing"}}
		e.EncodeElement(_bgbe.DoNotUseHTMLParagraphAutoSpacing, _afdb)
	}
	if _bgbe.LayoutRawTableWidth != nil {
		_bcba := _d.StartElement{Name: _d.Name{Local: "w:layoutRawTableWidth"}}
		e.EncodeElement(_bgbe.LayoutRawTableWidth, _bcba)
	}
	if _bgbe.LayoutTableRowsApart != nil {
		_bdfb := _d.StartElement{Name: _d.Name{Local: "w:layoutTableRowsApart"}}
		e.EncodeElement(_bgbe.LayoutTableRowsApart, _bdfb)
	}
	if _bgbe.UseWord97LineBreakRules != nil {
		_ffea := _d.StartElement{Name: _d.Name{Local: "w:useWord97LineBreakRules"}}
		e.EncodeElement(_bgbe.UseWord97LineBreakRules, _ffea)
	}
	if _bgbe.DoNotBreakWrappedTables != nil {
		_cdcaa := _d.StartElement{Name: _d.Name{Local: "w:doNotBreakWrappedTables"}}
		e.EncodeElement(_bgbe.DoNotBreakWrappedTables, _cdcaa)
	}
	if _bgbe.DoNotSnapToGridInCell != nil {
		_abc := _d.StartElement{Name: _d.Name{Local: "w:doNotSnapToGridInCell"}}
		e.EncodeElement(_bgbe.DoNotSnapToGridInCell, _abc)
	}
	if _bgbe.SelectFldWithFirstOrLastChar != nil {
		_cbaf := _d.StartElement{Name: _d.Name{Local: "w:selectFldWithFirstOrLastChar"}}
		e.EncodeElement(_bgbe.SelectFldWithFirstOrLastChar, _cbaf)
	}
	if _bgbe.ApplyBreakingRules != nil {
		_cccfg := _d.StartElement{Name: _d.Name{Local: "w:applyBreakingRules"}}
		e.EncodeElement(_bgbe.ApplyBreakingRules, _cccfg)
	}
	if _bgbe.DoNotWrapTextWithPunct != nil {
		_cfd := _d.StartElement{Name: _d.Name{Local: "w:doNotWrapTextWithPunct"}}
		e.EncodeElement(_bgbe.DoNotWrapTextWithPunct, _cfd)
	}
	if _bgbe.DoNotUseEastAsianBreakRules != nil {
		_ddeg := _d.StartElement{Name: _d.Name{Local: "w:doNotUseEastAsianBreakRules"}}
		e.EncodeElement(_bgbe.DoNotUseEastAsianBreakRules, _ddeg)
	}
	if _bgbe.UseWord2002TableStyleRules != nil {
		_ebdb := _d.StartElement{Name: _d.Name{Local: "w:useWord2002TableStyleRules"}}
		e.EncodeElement(_bgbe.UseWord2002TableStyleRules, _ebdb)
	}
	if _bgbe.GrowAutofit != nil {
		_eegd := _d.StartElement{Name: _d.Name{Local: "w:growAutofit"}}
		e.EncodeElement(_bgbe.GrowAutofit, _eegd)
	}
	if _bgbe.UseFELayout != nil {
		_gcgd := _d.StartElement{Name: _d.Name{Local: "w:useFELayout"}}
		e.EncodeElement(_bgbe.UseFELayout, _gcgd)
	}
	if _bgbe.UseNormalStyleForList != nil {
		_fdcf := _d.StartElement{Name: _d.Name{Local: "w:useNormalStyleForList"}}
		e.EncodeElement(_bgbe.UseNormalStyleForList, _fdcf)
	}
	if _bgbe.DoNotUseIndentAsNumberingTabStop != nil {
		_cdaag := _d.StartElement{Name: _d.Name{Local: "w:doNotUseIndentAsNumberingTabStop"}}
		e.EncodeElement(_bgbe.DoNotUseIndentAsNumberingTabStop, _cdaag)
	}
	if _bgbe.UseAltKinsokuLineBreakRules != nil {
		_cbbbd := _d.StartElement{Name: _d.Name{Local: "w:useAltKinsokuLineBreakRules"}}
		e.EncodeElement(_bgbe.UseAltKinsokuLineBreakRules, _cbbbd)
	}
	if _bgbe.AllowSpaceOfSameStyleInTable != nil {
		_dbd := _d.StartElement{Name: _d.Name{Local: "w:allowSpaceOfSameStyleInTable"}}
		e.EncodeElement(_bgbe.AllowSpaceOfSameStyleInTable, _dbd)
	}
	if _bgbe.DoNotSuppressIndentation != nil {
		_bfaa := _d.StartElement{Name: _d.Name{Local: "w:doNotSuppressIndentation"}}
		e.EncodeElement(_bgbe.DoNotSuppressIndentation, _bfaa)
	}
	if _bgbe.DoNotAutofitConstrainedTables != nil {
		_dbdf := _d.StartElement{Name: _d.Name{Local: "w:doNotAutofitConstrainedTables"}}
		e.EncodeElement(_bgbe.DoNotAutofitConstrainedTables, _dbdf)
	}
	if _bgbe.AutofitToFirstFixedWidthCell != nil {
		_dgege := _d.StartElement{Name: _d.Name{Local: "w:autofitToFirstFixedWidthCell"}}
		e.EncodeElement(_bgbe.AutofitToFirstFixedWidthCell, _dgege)
	}
	if _bgbe.UnderlineTabInNumList != nil {
		_aaffg := _d.StartElement{Name: _d.Name{Local: "w:underlineTabInNumList"}}
		e.EncodeElement(_bgbe.UnderlineTabInNumList, _aaffg)
	}
	if _bgbe.DisplayHangulFixedWidth != nil {
		_egac := _d.StartElement{Name: _d.Name{Local: "w:displayHangulFixedWidth"}}
		e.EncodeElement(_bgbe.DisplayHangulFixedWidth, _egac)
	}
	if _bgbe.SplitPgBreakAndParaMark != nil {
		_cefdg := _d.StartElement{Name: _d.Name{Local: "w:splitPgBreakAndParaMark"}}
		e.EncodeElement(_bgbe.SplitPgBreakAndParaMark, _cefdg)
	}
	if _bgbe.DoNotVertAlignCellWithSp != nil {
		_babed := _d.StartElement{Name: _d.Name{Local: "w:doNotVertAlignCellWithSp"}}
		e.EncodeElement(_bgbe.DoNotVertAlignCellWithSp, _babed)
	}
	if _bgbe.DoNotBreakConstrainedForcedTable != nil {
		_fgce := _d.StartElement{Name: _d.Name{Local: "w:doNotBreakConstrainedForcedTable"}}
		e.EncodeElement(_bgbe.DoNotBreakConstrainedForcedTable, _fgce)
	}
	if _bgbe.DoNotVertAlignInTxbx != nil {
		_bfbf := _d.StartElement{Name: _d.Name{Local: "w:doNotVertAlignInTxbx"}}
		e.EncodeElement(_bgbe.DoNotVertAlignInTxbx, _bfbf)
	}
	if _bgbe.UseAnsiKerningPairs != nil {
		_baaca := _d.StartElement{Name: _d.Name{Local: "w:useAnsiKerningPairs"}}
		e.EncodeElement(_bgbe.UseAnsiKerningPairs, _baaca)
	}
	if _bgbe.CachedColBalance != nil {
		_ddgc := _d.StartElement{Name: _d.Name{Local: "w:cachedColBalance"}}
		e.EncodeElement(_bgbe.CachedColBalance, _ddgc)
	}
	if _bgbe.CompatSetting != nil {
		_dgeaf := _d.StartElement{Name: _d.Name{Local: "w:compatSetting"}}
		for _, _gaeeg := range _bgbe.CompatSetting {
			e.EncodeElement(_gaeeg, _dgeaf)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ceded ST_Pitch) ValidateWithPath(path string) error {
	switch _ceded {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_ceded))
	}
	return nil
}
func (_cafad ST_MailMergeOdsoFMDFieldType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_adefa := _d.Attr{}
	_adefa.Name = name
	switch _cafad {
	case ST_MailMergeOdsoFMDFieldTypeUnset:
		_adefa.Value = ""
	case ST_MailMergeOdsoFMDFieldTypeNull:
		_adefa.Value = "null"
	case ST_MailMergeOdsoFMDFieldTypeDbColumn:
		_adefa.Value = "dbColumn"
	}
	return _adefa, nil
}
func (_gcgbdd *ST_WmlColorSchemeIndex) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dafeaa, _cbfgee := d.Token()
	if _cbfgee != nil {
		return _cbfgee
	}
	if _dbcad, _edeff := _dafeaa.(_d.EndElement); _edeff && _dbcad.Name == start.Name {
		*_gcgbdd = 1
		return nil
	}
	if _bbafea, _fgbab := _dafeaa.(_d.CharData); !_fgbab {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _dafeaa)
	} else {
		switch string(_bbafea) {
		case "":
			*_gcgbdd = 0
		case "dark1":
			*_gcgbdd = 1
		case "light1":
			*_gcgbdd = 2
		case "dark2":
			*_gcgbdd = 3
		case "light2":
			*_gcgbdd = 4
		case "accent1":
			*_gcgbdd = 5
		case "accent2":
			*_gcgbdd = 6
		case "accent3":
			*_gcgbdd = 7
		case "accent4":
			*_gcgbdd = 8
		case "accent5":
			*_gcgbdd = 9
		case "accent6":
			*_gcgbdd = 10
		case "hyperlink":
			*_gcgbdd = 11
		case "followedHyperlink":
			*_gcgbdd = 12
		}
	}
	_dafeaa, _cbfgee = d.Token()
	if _cbfgee != nil {
		return _cbfgee
	}
	if _bfcde, _cfbdf := _dafeaa.(_d.EndElement); _cfbdf && _bfcde.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _dafeaa)
}
func (_aaadac *CT_TblPrChange) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:author"}, Value: _b.Sprintf("\u0025v", _aaadac.AuthorAttr)})
	if _aaadac.DateAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:date"}, Value: _b.Sprintf("\u0025v", *_aaadac.DateAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:id"}, Value: _b.Sprintf("\u0025v", _aaadac.IdAttr)})
	e.EncodeToken(start)
	_dbece := _d.StartElement{Name: _d.Name{Local: "w:tblPr"}}
	e.EncodeElement(_aaadac.TblPr, _dbece)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ffbceg *Recipients) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:recipients"
	return _ffbceg.CT_Recipients.MarshalXML(e, start)
}

// Validate validates the CT_SectPr and its children
func (_aabcbc *CT_SectPr) Validate() error { return _aabcbc.ValidateWithPath("CT_SectPr") }
func (_dcfcg *ST_FrameScrollbar) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_caaeba, _dceab := d.Token()
	if _dceab != nil {
		return _dceab
	}
	if _beefe, _fedafcc := _caaeba.(_d.EndElement); _fedafcc && _beefe.Name == start.Name {
		*_dcfcg = 1
		return nil
	}
	if _gdfbbe, _ggdda := _caaeba.(_d.CharData); !_ggdda {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _caaeba)
	} else {
		switch string(_gdfbbe) {
		case "":
			*_dcfcg = 0
		case "on":
			*_dcfcg = 1
		case "off":
			*_dcfcg = 2
		case "auto":
			*_dcfcg = 3
		}
	}
	_caaeba, _dceab = d.Token()
	if _dceab != nil {
		return _dceab
	}
	if _dgdbac, _ebbaac := _caaeba.(_d.EndElement); _ebbaac && _dgdbac.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _caaeba)
}

// Validate validates the CT_Recipients and its children
func (_dbgaf *CT_Recipients) Validate() error { return _dbgaf.ValidateWithPath("CT_Recipients") }
func (_dbceeg *CT_UnsignedDecimalNumber) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _daddg := range start.Attr {
		if _daddg.Name.Local == "val" {
			_becfa, _accec := _dd.ParseUint(_daddg.Value, 10, 64)
			if _accec != nil {
				return _accec
			}
			_dbceeg.ValAttr = _becfa
			continue
		}
	}
	for {
		_ddcgg, _fgebdg := d.Token()
		if _fgebdg != nil {
			return _b.Errorf("parsing CT_UnsignedDecimalNumber:\u0020%s", _fgebdg)
		}
		if _acaagf, _feagf := _ddcgg.(_d.EndElement); _feagf && _acaagf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fgabe *CT_Num) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgabe.AbstractNumId = NewCT_DecimalNumber()
	for _, _ceegec := range start.Attr {
		if _ceegec.Name.Local == "numId" {
			_bgcca, _adcgc := _dd.ParseInt(_ceegec.Value, 10, 64)
			if _adcgc != nil {
				return _adcgc
			}
			_fgabe.NumIdAttr = _bgcca
			continue
		}
	}
_cbcgb:
	for {
		_egeff, _feecc := d.Token()
		if _feecc != nil {
			return _feecc
		}
		switch _efdbgf := _egeff.(type) {
		case _d.StartElement:
			switch _efdbgf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "abstractNumId"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "abstractNumId"}:
				if _edegd := d.DecodeElement(_fgabe.AbstractNumId, &_efdbgf); _edegd != nil {
					return _edegd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lvlOverride"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lvlOverride"}:
				_cbaef := NewCT_NumLvl()
				if _cfgeb := d.DecodeElement(_cbaef, &_efdbgf); _cfgeb != nil {
					return _cfgeb
				}
				_fgabe.LvlOverride = append(_fgabe.LvlOverride, _cbaef)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Num\u0020\u0025v", _efdbgf.Name)
				if _aafbd := d.Skip(); _aafbd != nil {
					return _aafbd
				}
			}
		case _d.EndElement:
			break _cbcgb
		case _d.CharData:
		}
	}
	return nil
}
func (_aagfeb *ST_HeightRule) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbdcbc, _bbdded := d.Token()
	if _bbdded != nil {
		return _bbdded
	}
	if _geeeab, _fbfddf := _bbdcbc.(_d.EndElement); _fbfddf && _geeeab.Name == start.Name {
		*_aagfeb = 1
		return nil
	}
	if _gcdadg, _abeeg := _bbdcbc.(_d.CharData); !_abeeg {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bbdcbc)
	} else {
		switch string(_gcdadg) {
		case "":
			*_aagfeb = 0
		case "auto":
			*_aagfeb = 1
		case "exact":
			*_aagfeb = 2
		case "atLeast":
			*_aagfeb = 3
		}
	}
	_bbdcbc, _bbdded = d.Token()
	if _bbdded != nil {
		return _bbdded
	}
	if _gagbba, _dfddbe := _bbdcbc.(_d.EndElement); _dfddbe && _gagbba.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bbdcbc)
}
func (_faebf *CT_Kinsoku) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:lang"}, Value: _b.Sprintf("\u0025v", _faebf.LangAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _faebf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_feee *CT_ParaRPrOriginal) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aecag:
	for {
		_bebdf, _bebfeg := d.Token()
		if _bebfeg != nil {
			return _bebfeg
		}
		switch _cbfdd := _bebdf.(type) {
		case _d.StartElement:
			switch _cbfdd.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_feee.Ins = NewCT_TrackChange()
				if _aegb := d.DecodeElement(_feee.Ins, &_cbfdd); _aegb != nil {
					return _aegb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_feee.Del = NewCT_TrackChange()
				if _edefe := d.DecodeElement(_feee.Del, &_cbfdd); _edefe != nil {
					return _edefe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_feee.MoveFrom = NewCT_TrackChange()
				if _fafea := d.DecodeElement(_feee.MoveFrom, &_cbfdd); _fafea != nil {
					return _fafea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_feee.MoveTo = NewCT_TrackChange()
				if _fbecd := d.DecodeElement(_feee.MoveTo, &_cbfdd); _fbecd != nil {
					return _fbecd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rStyle"}:
				_feee.RStyle = NewCT_String()
				if _aaabb := d.DecodeElement(_feee.RStyle, &_cbfdd); _aaabb != nil {
					return _aaabb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rFonts"}:
				_feee.RFonts = NewCT_Fonts()
				if _adfab := d.DecodeElement(_feee.RFonts, &_cbfdd); _adfab != nil {
					return _adfab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "b"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "b"}:
				_feee.B = NewCT_OnOff()
				if _cebec := d.DecodeElement(_feee.B, &_cbfdd); _cebec != nil {
					return _cebec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bCs"}:
				_feee.BCs = NewCT_OnOff()
				if _babfc := d.DecodeElement(_feee.BCs, &_cbfdd); _babfc != nil {
					return _babfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "i"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "i"}:
				_feee.I = NewCT_OnOff()
				if _ccdbe := d.DecodeElement(_feee.I, &_cbfdd); _ccdbe != nil {
					return _ccdbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "iCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "iCs"}:
				_feee.ICs = NewCT_OnOff()
				if _efbga := d.DecodeElement(_feee.ICs, &_cbfdd); _efbga != nil {
					return _efbga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "caps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "caps"}:
				_feee.Caps = NewCT_OnOff()
				if _gecgbb := d.DecodeElement(_feee.Caps, &_cbfdd); _gecgbb != nil {
					return _gecgbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smallCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smallCaps"}:
				_feee.SmallCaps = NewCT_OnOff()
				if _gefef := d.DecodeElement(_feee.SmallCaps, &_cbfdd); _gefef != nil {
					return _gefef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strike"}:
				_feee.Strike = NewCT_OnOff()
				if _ebbgb := d.DecodeElement(_feee.Strike, &_cbfdd); _ebbgb != nil {
					return _ebbgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dstrike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dstrike"}:
				_feee.Dstrike = NewCT_OnOff()
				if _cddbf := d.DecodeElement(_feee.Dstrike, &_cbfdd); _cddbf != nil {
					return _cddbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outline"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outline"}:
				_feee.Outline = NewCT_OnOff()
				if _bgbad := d.DecodeElement(_feee.Outline, &_cbfdd); _bgbad != nil {
					return _bgbad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shadow"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shadow"}:
				_feee.Shadow = NewCT_OnOff()
				if _aaaab := d.DecodeElement(_feee.Shadow, &_cbfdd); _aaaab != nil {
					return _aaaab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "emboss"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "emboss"}:
				_feee.Emboss = NewCT_OnOff()
				if _gdgfg := d.DecodeElement(_feee.Emboss, &_cbfdd); _gdgfg != nil {
					return _gdgfg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "imprint"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "imprint"}:
				_feee.Imprint = NewCT_OnOff()
				if _debgf := d.DecodeElement(_feee.Imprint, &_cbfdd); _debgf != nil {
					return _debgf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noProof"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noProof"}:
				_feee.NoProof = NewCT_OnOff()
				if _fafce := d.DecodeElement(_feee.NoProof, &_cbfdd); _fafce != nil {
					return _fafce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_feee.SnapToGrid = NewCT_OnOff()
				if _bfeee := d.DecodeElement(_feee.SnapToGrid, &_cbfdd); _bfeee != nil {
					return _bfeee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vanish"}:
				_feee.Vanish = NewCT_OnOff()
				if _dfdfc := d.DecodeElement(_feee.Vanish, &_cbfdd); _dfdfc != nil {
					return _dfdfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "webHidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "webHidden"}:
				_feee.WebHidden = NewCT_OnOff()
				if _adacc := d.DecodeElement(_feee.WebHidden, &_cbfdd); _adacc != nil {
					return _adacc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "color"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "color"}:
				_feee.Color = NewCT_Color()
				if _acbgd := d.DecodeElement(_feee.Color, &_cbfdd); _acbgd != nil {
					return _acbgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_feee.Spacing = NewCT_SignedTwipsMeasure()
				if _dbdgd := d.DecodeElement(_feee.Spacing, &_cbfdd); _dbdgd != nil {
					return _dbdgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "w"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "w"}:
				_feee.W = NewCT_TextScale()
				if _efgbd := d.DecodeElement(_feee.W, &_cbfdd); _efgbd != nil {
					return _efgbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kern"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kern"}:
				_feee.Kern = NewCT_HpsMeasure()
				if _gffeb := d.DecodeElement(_feee.Kern, &_cbfdd); _gffeb != nil {
					return _gffeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "position"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "position"}:
				_feee.Position = NewCT_SignedHpsMeasure()
				if _cebgc := d.DecodeElement(_feee.Position, &_cbfdd); _cebgc != nil {
					return _cebgc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_feee.Sz = NewCT_HpsMeasure()
				if _cdad := d.DecodeElement(_feee.Sz, &_cbfdd); _cdad != nil {
					return _cdad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "szCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "szCs"}:
				_feee.SzCs = NewCT_HpsMeasure()
				if _cfefg := d.DecodeElement(_feee.SzCs, &_cbfdd); _cfefg != nil {
					return _cfefg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "highlight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "highlight"}:
				_feee.Highlight = NewCT_Highlight()
				if _cgega := d.DecodeElement(_feee.Highlight, &_cbfdd); _cgega != nil {
					return _cgega
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "u"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "u"}:
				_feee.U = NewCT_Underline()
				if _bccfgb := d.DecodeElement(_feee.U, &_cbfdd); _bccfgb != nil {
					return _bccfgb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effect"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "effect"}:
				_feee.Effect = NewCT_TextEffect()
				if _bebbdf := d.DecodeElement(_feee.Effect, &_cbfdd); _bebbdf != nil {
					return _bebbdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdr"}:
				_feee.Bdr = NewCT_Border()
				if _ecdfd := d.DecodeElement(_feee.Bdr, &_cbfdd); _ecdfd != nil {
					return _ecdfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_feee.Shd = NewCT_Shd()
				if _ebefae := d.DecodeElement(_feee.Shd, &_cbfdd); _ebefae != nil {
					return _ebefae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fitText"}:
				_feee.FitText = NewCT_FitText()
				if _fcad := d.DecodeElement(_feee.FitText, &_cbfdd); _fcad != nil {
					return _fcad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vertAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vertAlign"}:
				_feee.VertAlign = NewCT_VerticalAlignRun()
				if _gdccd := d.DecodeElement(_feee.VertAlign, &_cbfdd); _gdccd != nil {
					return _gdccd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtl"}:
				_feee.Rtl = NewCT_OnOff()
				if _dacacg := d.DecodeElement(_feee.Rtl, &_cbfdd); _dacacg != nil {
					return _dacacg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cs"}:
				_feee.Cs = NewCT_OnOff()
				if _caeafd := d.DecodeElement(_feee.Cs, &_cbfdd); _caeafd != nil {
					return _caeafd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "em"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "em"}:
				_feee.Em = NewCT_Em()
				if _cbfbb := d.DecodeElement(_feee.Em, &_cbfdd); _cbfbb != nil {
					return _cbfbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lang"}:
				_feee.Lang = NewCT_Language()
				if _ccbg := d.DecodeElement(_feee.Lang, &_cbfdd); _ccbg != nil {
					return _ccbg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "eastAsianLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "eastAsianLayout"}:
				_feee.EastAsianLayout = NewCT_EastAsianLayout()
				if _feaab := d.DecodeElement(_feee.EastAsianLayout, &_cbfdd); _feaab != nil {
					return _feaab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "specVanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "specVanish"}:
				_feee.SpecVanish = NewCT_OnOff()
				if _eeaf := d.DecodeElement(_feee.SpecVanish, &_cbfdd); _eeaf != nil {
					return _eeaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "oMath"}:
				_feee.OMath = NewCT_OnOff()
				if _bbbea := d.DecodeElement(_feee.OMath, &_cbfdd); _bbbea != nil {
					return _bbbea
				}
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020CT_ParaRPrOriginal\u0020\u0025v", _cbfdd.Name)
				if _bbaa := d.Skip(); _bbaa != nil {
					return _bbaa
				}
			}
		case _d.EndElement:
			break _aecag
		case _d.CharData:
		}
	}
	return nil
}

type ST_DropCap byte

func (_gbdfae *ST_EdnPos) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gbdfae = 0
	case "sectEnd":
		*_gbdfae = 1
	case "docEnd":
		*_gbdfae = 2
	}
	return nil
}
func (_affcaa *ST_SignedTwipsMeasure) ValidateWithPath(path string) error {
	_fddgc := []string{}
	if _affcaa.Int64 != nil {
		_fddgc = append(_fddgc, "Int64")
	}
	if _affcaa.ST_UniversalMeasure != nil {
		_fddgc = append(_fddgc, "ST_UniversalMeasure")
	}
	if len(_fddgc) > 1 {
		return _b.Errorf("%s\u0020too\u0020many\u0020members\u0020set:\u0020\u0025v", path, _fddgc)
	}
	return nil
}
func (_aagba ST_VerticalJc) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bgcbb := _d.Attr{}
	_bgcbb.Name = name
	switch _aagba {
	case ST_VerticalJcUnset:
		_bgcbb.Value = ""
	case ST_VerticalJcTop:
		_bgcbb.Value = "top"
	case ST_VerticalJcCenter:
		_bgcbb.Value = "center"
	case ST_VerticalJcBoth:
		_bgcbb.Value = "both"
	case ST_VerticalJcBottom:
		_bgcbb.Value = "bottom"
	}
	return _bgcbb, nil
}
func (_bdccd *CT_FrameScrollbar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_dbgfb, _cgae := _bdccd.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _cgae != nil {
		return _cgae
	}
	start.Attr = append(start.Attr, _dbgfb)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_aaafb WdST_WrapText) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_aaafb.String(), start)
}

// Validate validates the WdCT_WordprocessingContentPart and its children
func (_eccaad *WdCT_WordprocessingContentPart) Validate() error {
	return _eccaad.ValidateWithPath("WdCT_WordprocessingContentPart")
}

type CT_TblLook struct {

	// First Row
	FirstRowAttr *_g.ST_OnOff

	// Last Row
	LastRowAttr *_g.ST_OnOff

	// First Column
	FirstColumnAttr *_g.ST_OnOff

	// Last Column
	LastColumnAttr *_g.ST_OnOff

	// No Horizontal Banding
	NoHBandAttr *_g.ST_OnOff

	// No Vertical Banding
	NoVBandAttr *_g.ST_OnOff

	// Bitmask of Table Conditional Formatting
	ValAttr *string
}

func (_aaega *WdST_RelFromV) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bdeade, _cbdgb := d.Token()
	if _cbdgb != nil {
		return _cbdgb
	}
	if _gfbdfa, _dfcgg := _bdeade.(_d.EndElement); _dfcgg && _gfbdfa.Name == start.Name {
		*_aaega = 1
		return nil
	}
	if _bbbffd, _ageed := _bdeade.(_d.CharData); !_ageed {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _bdeade)
	} else {
		switch string(_bbbffd) {
		case "":
			*_aaega = 0
		case "margin":
			*_aaega = 1
		case "page":
			*_aaega = 2
		case "paragraph":
			*_aaega = 3
		case "line":
			*_aaega = 4
		case "topMargin":
			*_aaega = 5
		case "bottomMargin":
			*_aaega = 6
		case "insideMargin":
			*_aaega = 7
		case "outsideMargin":
			*_aaega = 8
		}
	}
	_bdeade, _cbdgb = d.Token()
	if _cbdgb != nil {
		return _cbdgb
	}
	if _ggeaa, _dbaegad := _bdeade.(_d.EndElement); _dbaegad && _ggeaa.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _bdeade)
}
func NewCT_DataBinding() *CT_DataBinding { _gggb := &CT_DataBinding{}; return _gggb }
func (_agacd ST_TextDirection) String() string {
	switch _agacd {
	case 0:
		return ""
	case 1:
		return "tb"
	case 2:
		return "rl"
	case 3:
		return "lr"
	case 4:
		return "tbV"
	case 5:
		return "rlV"
	case 6:
		return "lrV"
	case 7:
		return "btLr"
	case 8:
		return "lrTb"
	case 9:
		return "lrTbV"
	case 10:
		return "tbLrV"
	case 11:
		return "tbRl"
	case 12:
		return "tbRlV"
	}
	return ""
}
func (_befaec ST_PageBorderZOrder) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eadab := _d.Attr{}
	_eadab.Name = name
	switch _befaec {
	case ST_PageBorderZOrderUnset:
		_eadab.Value = ""
	case ST_PageBorderZOrderFront:
		_eadab.Value = "front"
	case ST_PageBorderZOrderBack:
		_eadab.Value = "back"
	}
	return _eadab, nil
}
func NewCT_Caption() *CT_Caption { _eafe := &CT_Caption{}; return _eafe }
func (_fgbbf WdST_WrapText) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fccffb := _d.Attr{}
	_fccffb.Name = name
	switch _fgbbf {
	case WdST_WrapTextUnset:
		_fccffb.Value = ""
	case WdST_WrapTextBothSides:
		_fccffb.Value = "bothSides"
	case WdST_WrapTextLeft:
		_fccffb.Value = "left"
	case WdST_WrapTextRight:
		_fccffb.Value = "right"
	case WdST_WrapTextLargest:
		_fccffb.Value = "largest"
	}
	return _fccffb, nil
}
func NewCT_NumFmt() *CT_NumFmt {
	_bfgfc := &CT_NumFmt{}
	_bfgfc.ValAttr = ST_NumberFormat(1)
	return _bfgfc
}

type ST_Zoom byte

func (_gfgcd ST_EdGrp) Validate() error { return _gfgcd.ValidateWithPath("") }
func (_ebdcb ST_DocProtect) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gdedc := _d.Attr{}
	_gdedc.Name = name
	switch _ebdcb {
	case ST_DocProtectUnset:
		_gdedc.Value = ""
	case ST_DocProtectNone:
		_gdedc.Value = "none"
	case ST_DocProtectReadOnly:
		_gdedc.Value = "readOnly"
	case ST_DocProtectComments:
		_gdedc.Value = "comments"
	case ST_DocProtectTrackedChanges:
		_gdedc.Value = "trackedChanges"
	case ST_DocProtectForms:
		_gdedc.Value = "forms"
	}
	return _gdedc, nil
}
func NewCT_SectType() *CT_SectType { _gagcc := &CT_SectType{}; return _gagcc }

type CT_Headers struct {

	// Header Cell Reference
	Header []*CT_String
}
type CT_LevelSuffix struct {

	// Character Type Between Numbering and Text
	ValAttr ST_LevelSuffix
}

func (_begegf ST_HighlightColor) ValidateWithPath(path string) error {
	switch _begegf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_begegf))
	}
	return nil
}

// ValidateWithPath validates the CT_DocGrid and its children, prefixing error messages with path
func (_bdfa *CT_DocGrid) ValidateWithPath(path string) error {
	if _fcdcg := _bdfa.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _fcdcg != nil {
		return _fcdcg
	}
	return nil
}
func NewCT_EdnProps() *CT_EdnProps { _bgce := &CT_EdnProps{}; return _bgce }
func (_dbbfbe *ST_DropCap) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dbbfbe = 0
	case "none":
		*_dbbfbe = 1
	case "drop":
		*_dbbfbe = 2
	case "margin":
		*_dbbfbe = 3
	}
	return nil
}
func (_cecd *CT_FontsList) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cecd.Font != nil {
		_afgaf := _d.StartElement{Name: _d.Name{Local: "w:font"}}
		for _, _ceaad := range _cecd.Font {
			e.EncodeElement(_ceaad, _afgaf)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_SdtListItem struct {

	// List Entry Display Text
	DisplayTextAttr *string

	// List Entry Value
	ValueAttr *string
}

func (_aecca ST_AnnotationVMerge) Validate() error { return _aecca.ValidateWithPath("") }

type CT_Br struct {

	// Break Type
	TypeAttr ST_BrType

	// Restart Location For Text Wrapping Break
	ClearAttr ST_BrClear
}

func (_edbb *CT_DocVars) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aefdf:
	for {
		_bcgaf, _abgc := d.Token()
		if _abgc != nil {
			return _abgc
		}
		switch _bfdg := _bcgaf.(type) {
		case _d.StartElement:
			switch _bfdg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docVar"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docVar"}:
				_dbcda := NewCT_DocVar()
				if _dfdbeg := d.DecodeElement(_dbcda, &_bfdg); _dfdbeg != nil {
					return _dfdbeg
				}
				_edbb.DocVar = append(_edbb.DocVar, _dbcda)
			default:
				_ga.Log("skipping unsupported\u0020element\u0020on\u0020CT_DocVars\u0020\u0025v", _bfdg.Name)
				if _fdcga := d.Skip(); _fdcga != nil {
					return _fdcga
				}
			}
		case _d.EndElement:
			break _aefdf
		case _d.CharData:
		}
	}
	return nil
}
func (_agfga *ST_TextDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_agfga = 0
	case "tb":
		*_agfga = 1
	case "rl":
		*_agfga = 2
	case "lr":
		*_agfga = 3
	case "tbV":
		*_agfga = 4
	case "rlV":
		*_agfga = 5
	case "lrV":
		*_agfga = 6
	case "btLr":
		*_agfga = 7
	case "lrTb":
		*_agfga = 8
	case "lrTbV":
		*_agfga = 9
	case "tbLrV":
		*_agfga = 10
	case "tbRl":
		*_agfga = 11
	case "tbRlV":
		*_agfga = 12
	}
	return nil
}

type ST_VAnchor byte

func (_edddg ST_PageBorderOffset) String() string {
	switch _edddg {
	case 0:
		return ""
	case 1:
		return "page"
	case 2:
		return "text"
	}
	return ""
}
func (_geaede ST_CharacterSpacing) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_abgbgg := _d.Attr{}
	_abgbgg.Name = name
	switch _geaede {
	case ST_CharacterSpacingUnset:
		_abgbgg.Value = ""
	case ST_CharacterSpacingDoNotCompress:
		_abgbgg.Value = "doNotCompress"
	case ST_CharacterSpacingCompressPunctuation:
		_abgbgg.Value = "compressPunctuation"
	case ST_CharacterSpacingCompressPunctuationAndJapaneseKana:
		_abgbgg.Value = "compressPunctuationAndJapaneseKana"
	}
	return _abgbgg, nil
}
func (_bebbba ST_ObjectDrawAspect) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_befagf := _d.Attr{}
	_befagf.Name = name
	switch _bebbba {
	case ST_ObjectDrawAspectUnset:
		_befagf.Value = ""
	case ST_ObjectDrawAspectContent:
		_befagf.Value = "content"
	case ST_ObjectDrawAspectIcon:
		_befagf.Value = "icon"
	}
	return _befagf, nil
}

// ValidateWithPath validates the CT_Body and its children, prefixing error messages with path
func (_dgeg *CT_Body) ValidateWithPath(path string) error {
	for _bcfd, _fgbd := range _dgeg.EG_BlockLevelElts {
		if _edeb := _fgbd.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_BlockLevelElts\u005b\u0025d\u005d", path, _bcfd)); _edeb != nil {
			return _edeb
		}
	}
	if _dgeg.SectPr != nil {
		if _gda := _dgeg.SectPr.ValidateWithPath(path + "\u002fSectPr"); _gda != nil {
			return _gda
		}
	}
	return nil
}

// Validate validates the CT_SmartTagRun and its children
func (_dgag *CT_SmartTagRun) Validate() error { return _dgag.ValidateWithPath("CT_SmartTagRun") }

// ValidateWithPath validates the CT_TabStop and its children, prefixing error messages with path
func (_acdade *CT_TabStop) ValidateWithPath(path string) error {
	if _acdade.ValAttr == ST_TabJcUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _bagegb := _acdade.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _bagegb != nil {
		return _bagegb
	}
	if _bgafb := _acdade.LeaderAttr.ValidateWithPath(path + "/LeaderAttr"); _bgafb != nil {
		return _bgafb
	}
	if _ebccb := _acdade.PosAttr.ValidateWithPath(path + "\u002fPosAttr"); _ebccb != nil {
		return _ebccb
	}
	return nil
}
func (_dbdeb *EG_RPrBase) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dbdeb.RStyle != nil {
		_afgfcc := _d.StartElement{Name: _d.Name{Local: "w:rStyle"}}
		e.EncodeElement(_dbdeb.RStyle, _afgfcc)
	}
	if _dbdeb.RFonts != nil {
		_begea := _d.StartElement{Name: _d.Name{Local: "w:rFonts"}}
		e.EncodeElement(_dbdeb.RFonts, _begea)
	}
	if _dbdeb.B != nil {
		_deged := _d.StartElement{Name: _d.Name{Local: "w:b"}}
		e.EncodeElement(_dbdeb.B, _deged)
	}
	if _dbdeb.BCs != nil {
		_fafggf := _d.StartElement{Name: _d.Name{Local: "w:bCs"}}
		e.EncodeElement(_dbdeb.BCs, _fafggf)
	}
	if _dbdeb.I != nil {
		_ddaegd := _d.StartElement{Name: _d.Name{Local: "w:i"}}
		e.EncodeElement(_dbdeb.I, _ddaegd)
	}
	if _dbdeb.ICs != nil {
		_ffdda := _d.StartElement{Name: _d.Name{Local: "w:iCs"}}
		e.EncodeElement(_dbdeb.ICs, _ffdda)
	}
	if _dbdeb.Caps != nil {
		_fdfaa := _d.StartElement{Name: _d.Name{Local: "w:caps"}}
		e.EncodeElement(_dbdeb.Caps, _fdfaa)
	}
	if _dbdeb.SmallCaps != nil {
		_afbff := _d.StartElement{Name: _d.Name{Local: "w:smallCaps"}}
		e.EncodeElement(_dbdeb.SmallCaps, _afbff)
	}
	if _dbdeb.Strike != nil {
		_gbgec := _d.StartElement{Name: _d.Name{Local: "w:strike"}}
		e.EncodeElement(_dbdeb.Strike, _gbgec)
	}
	if _dbdeb.Dstrike != nil {
		_fdfeb := _d.StartElement{Name: _d.Name{Local: "w:dstrike"}}
		e.EncodeElement(_dbdeb.Dstrike, _fdfeb)
	}
	if _dbdeb.Outline != nil {
		_eafgg := _d.StartElement{Name: _d.Name{Local: "w:outline"}}
		e.EncodeElement(_dbdeb.Outline, _eafgg)
	}
	if _dbdeb.Shadow != nil {
		_ecfge := _d.StartElement{Name: _d.Name{Local: "w:shadow"}}
		e.EncodeElement(_dbdeb.Shadow, _ecfge)
	}
	if _dbdeb.Emboss != nil {
		_egdbga := _d.StartElement{Name: _d.Name{Local: "w:emboss"}}
		e.EncodeElement(_dbdeb.Emboss, _egdbga)
	}
	if _dbdeb.Imprint != nil {
		_gbeac := _d.StartElement{Name: _d.Name{Local: "w:imprint"}}
		e.EncodeElement(_dbdeb.Imprint, _gbeac)
	}
	if _dbdeb.NoProof != nil {
		_accgff := _d.StartElement{Name: _d.Name{Local: "w:noProof"}}
		e.EncodeElement(_dbdeb.NoProof, _accgff)
	}
	if _dbdeb.SnapToGrid != nil {
		_agacf := _d.StartElement{Name: _d.Name{Local: "w:snapToGrid"}}
		e.EncodeElement(_dbdeb.SnapToGrid, _agacf)
	}
	if _dbdeb.Vanish != nil {
		_ecfgd := _d.StartElement{Name: _d.Name{Local: "w:vanish"}}
		e.EncodeElement(_dbdeb.Vanish, _ecfgd)
	}
	if _dbdeb.WebHidden != nil {
		_debaga := _d.StartElement{Name: _d.Name{Local: "w:webHidden"}}
		e.EncodeElement(_dbdeb.WebHidden, _debaga)
	}
	if _dbdeb.Color != nil {
		_cadag := _d.StartElement{Name: _d.Name{Local: "w:color"}}
		e.EncodeElement(_dbdeb.Color, _cadag)
	}
	if _dbdeb.Spacing != nil {
		_efdbfg := _d.StartElement{Name: _d.Name{Local: "w:spacing"}}
		e.EncodeElement(_dbdeb.Spacing, _efdbfg)
	}
	if _dbdeb.W != nil {
		_acagf := _d.StartElement{Name: _d.Name{Local: "w:w"}}
		e.EncodeElement(_dbdeb.W, _acagf)
	}
	if _dbdeb.Kern != nil {
		_gddfa := _d.StartElement{Name: _d.Name{Local: "w:kern"}}
		e.EncodeElement(_dbdeb.Kern, _gddfa)
	}
	if _dbdeb.Position != nil {
		_cabeee := _d.StartElement{Name: _d.Name{Local: "w:position"}}
		e.EncodeElement(_dbdeb.Position, _cabeee)
	}
	if _dbdeb.Sz != nil {
		_bgfgf := _d.StartElement{Name: _d.Name{Local: "w:sz"}}
		e.EncodeElement(_dbdeb.Sz, _bgfgf)
	}
	if _dbdeb.SzCs != nil {
		_ceegbd := _d.StartElement{Name: _d.Name{Local: "w:szCs"}}
		e.EncodeElement(_dbdeb.SzCs, _ceegbd)
	}
	if _dbdeb.Highlight != nil {
		_ffffbf := _d.StartElement{Name: _d.Name{Local: "w:highlight"}}
		e.EncodeElement(_dbdeb.Highlight, _ffffbf)
	}
	if _dbdeb.U != nil {
		_eacccd := _d.StartElement{Name: _d.Name{Local: "w:u"}}
		e.EncodeElement(_dbdeb.U, _eacccd)
	}
	if _dbdeb.Effect != nil {
		_eeaea := _d.StartElement{Name: _d.Name{Local: "w:effect"}}
		e.EncodeElement(_dbdeb.Effect, _eeaea)
	}
	if _dbdeb.Bdr != nil {
		_bcdebe := _d.StartElement{Name: _d.Name{Local: "w:bdr"}}
		e.EncodeElement(_dbdeb.Bdr, _bcdebe)
	}
	if _dbdeb.Shd != nil {
		_gbfbb := _d.StartElement{Name: _d.Name{Local: "w:shd"}}
		e.EncodeElement(_dbdeb.Shd, _gbfbb)
	}
	if _dbdeb.FitText != nil {
		_gagcg := _d.StartElement{Name: _d.Name{Local: "w:fitText"}}
		e.EncodeElement(_dbdeb.FitText, _gagcg)
	}
	if _dbdeb.VertAlign != nil {
		_adbagd := _d.StartElement{Name: _d.Name{Local: "w:vertAlign"}}
		e.EncodeElement(_dbdeb.VertAlign, _adbagd)
	}
	if _dbdeb.Rtl != nil {
		_ddcfbe := _d.StartElement{Name: _d.Name{Local: "w:rtl"}}
		e.EncodeElement(_dbdeb.Rtl, _ddcfbe)
	}
	if _dbdeb.Cs != nil {
		_fbffe := _d.StartElement{Name: _d.Name{Local: "w:cs"}}
		e.EncodeElement(_dbdeb.Cs, _fbffe)
	}
	if _dbdeb.Em != nil {
		_fegadg := _d.StartElement{Name: _d.Name{Local: "w:em"}}
		e.EncodeElement(_dbdeb.Em, _fegadg)
	}
	if _dbdeb.Lang != nil {
		_cedeaa := _d.StartElement{Name: _d.Name{Local: "w:lang"}}
		e.EncodeElement(_dbdeb.Lang, _cedeaa)
	}
	if _dbdeb.EastAsianLayout != nil {
		_eccgga := _d.StartElement{Name: _d.Name{Local: "w:eastAsianLayout"}}
		e.EncodeElement(_dbdeb.EastAsianLayout, _eccgga)
	}
	if _dbdeb.SpecVanish != nil {
		_aedbe := _d.StartElement{Name: _d.Name{Local: "w:specVanish"}}
		e.EncodeElement(_dbdeb.SpecVanish, _aedbe)
	}
	if _dbdeb.OMath != nil {
		_cafdg := _d.StartElement{Name: _d.Name{Local: "w:oMath"}}
		e.EncodeElement(_dbdeb.OMath, _cafdg)
	}
	return nil
}
func (_fagggc ST_TblLayoutType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eefacc := _d.Attr{}
	_eefacc.Name = name
	switch _fagggc {
	case ST_TblLayoutTypeUnset:
		_eefacc.Value = ""
	case ST_TblLayoutTypeFixed:
		_eefacc.Value = "fixed"
	case ST_TblLayoutTypeAutofit:
		_eefacc.Value = "autofit"
	}
	return _eefacc, nil
}

// Validate validates the CT_Placeholder and its children
func (_aefdd *CT_Placeholder) Validate() error { return _aefdd.ValidateWithPath("CT_Placeholder") }

type CT_DocPartCategory struct {

	// Category Associated With Entry
	Name *CT_String

	// Gallery Associated With Entry
	Gallery *CT_DocPartGallery
}
type CT_GlossaryDocument struct {

	// Document Background
	Background *CT_Background
	DocParts   *CT_DocParts
}

func NewEG_MathContent() *EG_MathContent { _edcbf := &EG_MathContent{}; return _edcbf }

// ValidateWithPath validates the CT_FramesetSplitbar and its children, prefixing error messages with path
func (_egcae *CT_FramesetSplitbar) ValidateWithPath(path string) error {
	if _egcae.W != nil {
		if _gbega := _egcae.W.ValidateWithPath(path + "\u002fW"); _gbega != nil {
			return _gbega
		}
	}
	if _egcae.Color != nil {
		if _aceg := _egcae.Color.ValidateWithPath(path + "\u002fColor"); _aceg != nil {
			return _aceg
		}
	}
	if _egcae.NoBorder != nil {
		if _cggbd := _egcae.NoBorder.ValidateWithPath(path + "\u002fNoBorder"); _cggbd != nil {
			return _cggbd
		}
	}
	if _egcae.FlatBorders != nil {
		if _efbgf := _egcae.FlatBorders.ValidateWithPath(path + "\u002fFlatBorders"); _efbgf != nil {
			return _efbgf
		}
	}
	return nil
}
func (_ffcgbd *CT_HpsMeasure) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _ffcgbd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cabbb *CT_RPrOriginal) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_fccfc:
	for {
		_feefge, _gedba := d.Token()
		if _gedba != nil {
			return _gedba
		}
		switch _ffabc := _feefge.(type) {
		case _d.StartElement:
			switch _ffabc.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rStyle"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rStyle"}:
				_cabbb.RStyle = NewCT_String()
				if _gaafd := d.DecodeElement(_cabbb.RStyle, &_ffabc); _gaafd != nil {
					return _gaafd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rFonts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rFonts"}:
				_cabbb.RFonts = NewCT_Fonts()
				if _dggdc := d.DecodeElement(_cabbb.RFonts, &_ffabc); _dggdc != nil {
					return _dggdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "b"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "b"}:
				_cabbb.B = NewCT_OnOff()
				if _fedad := d.DecodeElement(_cabbb.B, &_ffabc); _fedad != nil {
					return _fedad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bCs"}:
				_cabbb.BCs = NewCT_OnOff()
				if _bacaf := d.DecodeElement(_cabbb.BCs, &_ffabc); _bacaf != nil {
					return _bacaf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "i"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "i"}:
				_cabbb.I = NewCT_OnOff()
				if _cebgad := d.DecodeElement(_cabbb.I, &_ffabc); _cebgad != nil {
					return _cebgad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "iCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "iCs"}:
				_cabbb.ICs = NewCT_OnOff()
				if _eaabb := d.DecodeElement(_cabbb.ICs, &_ffabc); _eaabb != nil {
					return _eaabb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "caps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "caps"}:
				_cabbb.Caps = NewCT_OnOff()
				if _fbbag := d.DecodeElement(_cabbb.Caps, &_ffabc); _fbbag != nil {
					return _fbbag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smallCaps"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smallCaps"}:
				_cabbb.SmallCaps = NewCT_OnOff()
				if _bfcag := d.DecodeElement(_cabbb.SmallCaps, &_ffabc); _bfcag != nil {
					return _bfcag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "strike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "strike"}:
				_cabbb.Strike = NewCT_OnOff()
				if _ggegd := d.DecodeElement(_cabbb.Strike, &_ffabc); _ggegd != nil {
					return _ggegd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dstrike"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dstrike"}:
				_cabbb.Dstrike = NewCT_OnOff()
				if _fbcbd := d.DecodeElement(_cabbb.Dstrike, &_ffabc); _fbcbd != nil {
					return _fbcbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "outline"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "outline"}:
				_cabbb.Outline = NewCT_OnOff()
				if _ccdad := d.DecodeElement(_cabbb.Outline, &_ffabc); _ccdad != nil {
					return _ccdad
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shadow"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shadow"}:
				_cabbb.Shadow = NewCT_OnOff()
				if _debed := d.DecodeElement(_cabbb.Shadow, &_ffabc); _debed != nil {
					return _debed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "emboss"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "emboss"}:
				_cabbb.Emboss = NewCT_OnOff()
				if _ebgggg := d.DecodeElement(_cabbb.Emboss, &_ffabc); _ebgggg != nil {
					return _ebgggg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "imprint"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "imprint"}:
				_cabbb.Imprint = NewCT_OnOff()
				if _bdffbb := d.DecodeElement(_cabbb.Imprint, &_ffabc); _bdffbb != nil {
					return _bdffbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "noProof"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "noProof"}:
				_cabbb.NoProof = NewCT_OnOff()
				if _bafgdb := d.DecodeElement(_cabbb.NoProof, &_ffabc); _bafgdb != nil {
					return _bafgdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "snapToGrid"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "snapToGrid"}:
				_cabbb.SnapToGrid = NewCT_OnOff()
				if _gbgdc := d.DecodeElement(_cabbb.SnapToGrid, &_ffabc); _gbgdc != nil {
					return _gbgdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vanish"}:
				_cabbb.Vanish = NewCT_OnOff()
				if _egcab := d.DecodeElement(_cabbb.Vanish, &_ffabc); _egcab != nil {
					return _egcab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "webHidden"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "webHidden"}:
				_cabbb.WebHidden = NewCT_OnOff()
				if _cbgbc := d.DecodeElement(_cabbb.WebHidden, &_ffabc); _cbgbc != nil {
					return _cbgbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "color"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "color"}:
				_cabbb.Color = NewCT_Color()
				if _eggbce := d.DecodeElement(_cabbb.Color, &_ffabc); _eggbce != nil {
					return _eggbce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "spacing"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "spacing"}:
				_cabbb.Spacing = NewCT_SignedTwipsMeasure()
				if _fbgda := d.DecodeElement(_cabbb.Spacing, &_ffabc); _fbgda != nil {
					return _fbgda
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "w"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "w"}:
				_cabbb.W = NewCT_TextScale()
				if _eafca := d.DecodeElement(_cabbb.W, &_ffabc); _eafca != nil {
					return _eafca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "kern"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "kern"}:
				_cabbb.Kern = NewCT_HpsMeasure()
				if _ceceg := d.DecodeElement(_cabbb.Kern, &_ffabc); _ceceg != nil {
					return _ceceg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "position"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "position"}:
				_cabbb.Position = NewCT_SignedHpsMeasure()
				if _fgcfd := d.DecodeElement(_cabbb.Position, &_ffabc); _fgcfd != nil {
					return _fgcfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sz"}:
				_cabbb.Sz = NewCT_HpsMeasure()
				if _cfgef := d.DecodeElement(_cabbb.Sz, &_ffabc); _cfgef != nil {
					return _cfgef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "szCs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "szCs"}:
				_cabbb.SzCs = NewCT_HpsMeasure()
				if _ffffe := d.DecodeElement(_cabbb.SzCs, &_ffabc); _ffffe != nil {
					return _ffffe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "highlight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "highlight"}:
				_cabbb.Highlight = NewCT_Highlight()
				if _dabge := d.DecodeElement(_cabbb.Highlight, &_ffabc); _dabge != nil {
					return _dabge
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "u"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "u"}:
				_cabbb.U = NewCT_Underline()
				if _aegd := d.DecodeElement(_cabbb.U, &_ffabc); _aegd != nil {
					return _aegd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effect"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "effect"}:
				_cabbb.Effect = NewCT_TextEffect()
				if _gbcaca := d.DecodeElement(_cabbb.Effect, &_ffabc); _gbcaca != nil {
					return _gbcaca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdr"}:
				_cabbb.Bdr = NewCT_Border()
				if _gbdce := d.DecodeElement(_cabbb.Bdr, &_ffabc); _gbdce != nil {
					return _gbdce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "shd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "shd"}:
				_cabbb.Shd = NewCT_Shd()
				if _bfcbd := d.DecodeElement(_cabbb.Shd, &_ffabc); _bfcbd != nil {
					return _bfcbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fitText"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fitText"}:
				_cabbb.FitText = NewCT_FitText()
				if _gcded := d.DecodeElement(_cabbb.FitText, &_ffabc); _gcded != nil {
					return _gcded
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "vertAlign"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "vertAlign"}:
				_cabbb.VertAlign = NewCT_VerticalAlignRun()
				if _acbeb := d.DecodeElement(_cabbb.VertAlign, &_ffabc); _acbeb != nil {
					return _acbeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "rtl"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "rtl"}:
				_cabbb.Rtl = NewCT_OnOff()
				if _cbfbc := d.DecodeElement(_cabbb.Rtl, &_ffabc); _cbfbc != nil {
					return _cbfbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "cs"}:
				_cabbb.Cs = NewCT_OnOff()
				if _bbaba := d.DecodeElement(_cabbb.Cs, &_ffabc); _bbaba != nil {
					return _bbaba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "em"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "em"}:
				_cabbb.Em = NewCT_Em()
				if _afdcg := d.DecodeElement(_cabbb.Em, &_ffabc); _afdcg != nil {
					return _afdcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "lang"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "lang"}:
				_cabbb.Lang = NewCT_Language()
				if _bbgce := d.DecodeElement(_cabbb.Lang, &_ffabc); _bbgce != nil {
					return _bbgce
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "eastAsianLayout"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "eastAsianLayout"}:
				_cabbb.EastAsianLayout = NewCT_EastAsianLayout()
				if _ffece := d.DecodeElement(_cabbb.EastAsianLayout, &_ffabc); _ffece != nil {
					return _ffece
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "specVanish"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "specVanish"}:
				_cabbb.SpecVanish = NewCT_OnOff()
				if _fbgab := d.DecodeElement(_cabbb.SpecVanish, &_ffabc); _fbgab != nil {
					return _fbgab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "oMath"}:
				_cabbb.OMath = NewCT_OnOff()
				if _bdfde := d.DecodeElement(_cabbb.OMath, &_ffabc); _bdfde != nil {
					return _bdfde
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_RPrOriginal\u0020\u0025v", _ffabc.Name)
				if _acegd := d.Skip(); _acegd != nil {
					return _acegd
				}
			}
		case _d.EndElement:
			break _fccfc
		case _d.CharData:
		}
	}
	return nil
}
func (_dfbeag *WdWpc) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfbeag.WdCT_WordprocessingCanvas = *NewWdCT_WordprocessingCanvas()
_acbbg:
	for {
		_bebdc, _gbdddab := d.Token()
		if _gbdddab != nil {
			return _gbdddab
		}
		switch _bbdbgf := _bebdc.(type) {
		case _d.StartElement:
			switch _bbdbgf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "bg"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "bg"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "bg"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bg"}:
				_dfbeag.Bg = _eb.NewCT_BackgroundFormatting()
				if _gabdf := d.DecodeElement(_dfbeag.Bg, &_bbdbgf); _gabdf != nil {
					return _gabdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "whole"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "whole"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "whole"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "whole"}:
				_dfbeag.Whole = _eb.NewCT_WholeE2oFormatting()
				if _facffb := d.DecodeElement(_dfbeag.Whole, &_bbdbgf); _facffb != nil {
					return _facffb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wsp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wsp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wsp"}:
				_gcceaf := NewWdCT_WordprocessingCanvasChoice()
				if _cbeeb := d.DecodeElement(&_gcceaf.Wsp, &_bbdbgf); _cbeeb != nil {
					return _cbeeb
				}
				_dfbeag.Choice = append(_dfbeag.Choice, _gcceaf)
			case _d.Name{Space: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture", Local: "pic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fpicture", Local: "pic"}:
				_gbage := NewWdCT_WordprocessingCanvasChoice()
				if _aaceb := d.DecodeElement(&_gbage.Pic, &_bbdbgf); _aaceb != nil {
					return _aaceb
				}
				_dfbeag.Choice = append(_dfbeag.Choice, _gbage)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "contentPart"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "contentPart"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "contentPart"}:
				_cbeffc := NewWdCT_WordprocessingCanvasChoice()
				if _eddfga := d.DecodeElement(&_cbeffc.ContentPart, &_bbdbgf); _eddfga != nil {
					return _eddfga
				}
				_dfbeag.Choice = append(_dfbeag.Choice, _cbeffc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wgp"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wgp"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wgp"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wgp"}:
				_faegc := NewWdCT_WordprocessingCanvasChoice()
				if _efaddg := d.DecodeElement(&_faegc.Wgp, &_bbdbgf); _efaddg != nil {
					return _efaddg
				}
				_dfbeag.Choice = append(_dfbeag.Choice, _faegc)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "graphicFrame"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "graphicFrame"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "graphicFrame"}:
				_cbedg := NewWdCT_WordprocessingCanvasChoice()
				if _gafdfce := d.DecodeElement(&_cbedg.GraphicFrame, &_bbdbgf); _gafdfce != nil {
					return _gafdfce
				}
				_dfbeag.Choice = append(_dfbeag.Choice, _cbedg)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extLst"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extLst"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extLst"}:
				_dfbeag.ExtLst = _eb.NewCT_OfficeArtExtensionList()
				if _cefcf := d.DecodeElement(_dfbeag.ExtLst, &_bbdbgf); _cefcf != nil {
					return _cefcf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on WdWpc \u0025v", _bbdbgf.Name)
				if _gcbbg := d.Skip(); _gcbbg != nil {
					return _gcbbg
				}
			}
		case _d.EndElement:
			break _acbbg
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the WdCT_Inline and its children
func (_bbadfa *WdCT_Inline) Validate() error { return _bbadfa.ValidateWithPath("WdCT_Inline") }

type CT_Compat struct {

	// Use Simplified Rules For Table Border Conflicts
	UseSingleBorderforContiguousCells *CT_OnOff

	// Fit To Expanded Width When Performing Full Justification
	WpJustification *CT_OnOff

	// Do Not Create Custom Tab Stop for Hanging Indent
	NoTabHangInd *CT_OnOff

	// Do Not Add Leading Between Lines of Text
	NoLeading *CT_OnOff

	// Add Additional Space Below Baseline For Underlined East Asian Text
	SpaceForUL *CT_OnOff

	// Do Not Balance Text Columns within a Section
	NoColumnBalance *CT_OnOff

	// Balance Single Byte and Double Byte Characters
	BalanceSingleByteDoubleByteWidth *CT_OnOff

	// Do Not Center Content on Lines With Exact Line Height
	NoExtraLineSpacing *CT_OnOff

	// Display Backslash As Yen Sign
	DoNotLeaveBackslashAlone *CT_OnOff

	// Underline All Trailing Spaces
	UlTrailSpace *CT_OnOff

	// Don't Justify Lines Ending in Soft Line Break
	DoNotExpandShiftReturn *CT_OnOff

	// Only Expand/Condense Text By Whole Points
	SpacingInWholePoints *CT_OnOff

	// Ignore Compression of Full-Width Punctuation Ending a Line
	LineWrapLikeWord6 *CT_OnOff

	// Print Body Text before Header/Footer Contents
	PrintBodyTextBeforeHeader *CT_OnOff

	// Print Colors as Black And White without Dithering
	PrintColBlack *CT_OnOff

	// Use Specific Space Width
	WpSpaceWidth *CT_OnOff

	// Display Page/Column Breaks Present in Frames
	ShowBreaksInFrames *CT_OnOff

	// Require Exact Size During Font Substitution
	SubFontBySize *CT_OnOff

	// Ignore Exact Line Height for Last Line on Page
	SuppressBottomSpacing *CT_OnOff

	// Ignore Minimum and Exact Line Height for First Line on Page
	SuppressTopSpacing *CT_OnOff

	// Ignore Minimum Line Height for First Line on Page
	SuppressSpacingAtTopOfPage *CT_OnOff

	// Use Static Text Leading
	SuppressTopSpacingWP *CT_OnOff

	// Do Not Use Space Before On First Line After a Page Break
	SuppressSpBfAfterPgBrk *CT_OnOff

	// Swap Paragraph Borders on Odd Numbered Pages
	SwapBordersFacingPages *CT_OnOff

	// Treat Backslash Quotation Delimiter as Two Quotation Marks
	ConvMailMergeEsc *CT_OnOff

	// Use Truncated Integer Division For Font Calculation
	TruncateFontHeightsLikeWP6 *CT_OnOff

	// Use Specific Small Caps Algorithm
	MwSmallCaps *CT_OnOff

	// Use Printer Metrics To Display Documents
	UsePrinterMetrics *CT_OnOff

	// Do Not Suppress Paragraph Borders Next To Frames
	DoNotSuppressParagraphBorders *CT_OnOff

	// Line Wrap Trailing Spaces
	WrapTrailSpaces *CT_OnOff

	// Ignore Page Break from Continuous Section Break
	FootnoteLayoutLikeWW8 *CT_OnOff

	// Ignore Text Wrapping around Objects at Bottom of Page
	ShapeLayoutLikeWW8 *CT_OnOff

	// Align Table Rows Independently
	AlignTablesRowByRow *CT_OnOff

	// Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned
	ForgetLastTabAlignment *CT_OnOff

	// Add Document Grid Line Pitch To Lines in Table Cells
	AdjustLineHeightInTable *CT_OnOff

	// Incorrectly Adjust Text Spacing for Specific Unicode Ranges
	AutoSpaceLikeWord95 *CT_OnOff

	// Do Not Increase Line Height for Raised/Lowered Text
	NoSpaceRaiseLower *CT_OnOff

	// Use Fixed Paragraph Spacing for HTML Auto Setting
	DoNotUseHTMLParagraphAutoSpacing *CT_OnOff

	// Ignore Space Before Table When Deciding If Table Should Wrap Floating Object
	LayoutRawTableWidth *CT_OnOff

	// Allow Table Rows to Wrap Inline Objects Independently
	LayoutTableRowsApart *CT_OnOff

	// Use Incorrect Inter-Character Spacing Rules
	UseWord97LineBreakRules *CT_OnOff

	// Do Not Allow Floating Tables To Break Across Pages
	DoNotBreakWrappedTables *CT_OnOff

	// Do Not Snap to Document Grid in Table Cells with Objects
	DoNotSnapToGridInCell *CT_OnOff

	// Select Field When First or Last Character Is Selected
	SelectFldWithFirstOrLastChar *CT_OnOff

	// Use Legacy Ethiopic and Amharic Line Breaking Rules
	ApplyBreakingRules *CT_OnOff

	// Do Not Allow Hanging Punctuation With Character Grid
	DoNotWrapTextWithPunct *CT_OnOff

	// Do Not Compress Compressible Characters When Using Document Grid
	DoNotUseEastAsianBreakRules *CT_OnOff

	// Incorrectly Display Top Border of Conditional Columns
	UseWord2002TableStyleRules *CT_OnOff

	// Allow Tables to AutoFit Into Page Margins
	GrowAutofit *CT_OnOff

	// Do Not Bypass East Asian/Complex Script Layout Code
	UseFELayout *CT_OnOff

	// Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text
	UseNormalStyleForList *CT_OnOff

	// Ignore Hanging Indent When Creating Tab Stop After Numbering
	DoNotUseIndentAsNumberingTabStop *CT_OnOff

	// Use Alternate Set of East Asian Line Breaking Rules
	UseAltKinsokuLineBreakRules *CT_OnOff

	// Allow Contextual Spacing of Paragraphs in Tables
	AllowSpaceOfSameStyleInTable *CT_OnOff

	// Do Not Ignore Floating Objects When Calculating Paragraph Indentation
	DoNotSuppressIndentation *CT_OnOff

	// Do Not AutoFit Tables To Fit Next To Wrapped Objects
	DoNotAutofitConstrainedTables *CT_OnOff

	// Allow Table Columns To Exceed Preferred Widths of Constituent Cells
	AutofitToFirstFixedWidthCell *CT_OnOff

	// Underline Following Character Following Numbering
	UnderlineTabInNumList *CT_OnOff

	// Always Use Fixed Width for Hangul Characters
	DisplayHangulFixedWidth *CT_OnOff

	// Always Move Paragraph Mark to Page after a Page Break
	SplitPgBreakAndParaMark *CT_OnOff

	// Don't Vertically Align Cells Containing Floating Objects
	DoNotVertAlignCellWithSp *CT_OnOff

	// Don't Break Table Rows Around Floating Tables
	DoNotBreakConstrainedForcedTable *CT_OnOff

	// Ignore Vertical Alignment in Textboxes
	DoNotVertAlignInTxbx *CT_OnOff

	// Use ANSI Kerning Pairs from Fonts
	UseAnsiKerningPairs *CT_OnOff

	// Use Cached Paragraph Information for Column Balancing
	CachedColBalance *CT_OnOff

	// Custom Compatibility Setting
	CompatSetting []*CT_CompatSetting
}

func (_fcfac *CT_SmartTagRun) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bebge := range start.Attr {
		if _bebge.Name.Local == "uri" {
			_gggbad, _badcg := _bebge.Value, error(nil)
			if _badcg != nil {
				return _badcg
			}
			_fcfac.UriAttr = &_gggbad
			continue
		}
		if _bebge.Name.Local == "element" {
			_bdebd, _ddabd := _bebge.Value, error(nil)
			if _ddabd != nil {
				return _ddabd
			}
			_fcfac.ElementAttr = _bdebd
			continue
		}
	}
_acbga:
	for {
		_gfedda, _cgffee := d.Token()
		if _cgffee != nil {
			return _cgffee
		}
		switch _cacff := _gfedda.(type) {
		case _d.StartElement:
			switch _cacff.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTagPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTagPr"}:
				_fcfac.SmartTagPr = NewCT_SmartTagPr()
				if _cgace := d.DecodeElement(_fcfac.SmartTagPr, &_cacff); _cgace != nil {
					return _cgace
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "fldSimple"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "fldSimple"}:
				_agcbd := NewEG_PContent()
				_ceced := NewCT_SimpleField()
				if _febbd := d.DecodeElement(_ceced, &_cacff); _febbd != nil {
					return _febbd
				}
				_agcbd.FldSimple = append(_agcbd.FldSimple, _ceced)
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _agcbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "hyperlink"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "hyperlink"}:
				_ecefaa := NewEG_PContent()
				_ecefaa.Hyperlink = NewCT_Hyperlink()
				if _cffbf := d.DecodeElement(_ecefaa.Hyperlink, &_cacff); _cffbf != nil {
					return _cffbf
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _ecefaa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "subDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "subDoc"}:
				_cedbb := NewEG_PContent()
				_cedbb.SubDoc = NewCT_Rel()
				if _aebafg := d.DecodeElement(_cedbb.SubDoc, &_cacff); _aebafg != nil {
					return _aebafg
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _cedbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXml"}:
				_bfebf := NewEG_PContent()
				_bedcc := NewEG_ContentRunContent()
				_bedcc.CustomXml = NewCT_CustomXmlRun()
				if _cagfed := d.DecodeElement(_bedcc.CustomXml, &_cacff); _cagfed != nil {
					return _cagfed
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _bfebf)
				_bfebf.EG_ContentRunContent = append(_bfebf.EG_ContentRunContent, _bedcc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "smartTag"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "smartTag"}:
				_aggbda := NewEG_PContent()
				_dfeecg := NewEG_ContentRunContent()
				_dfeecg.SmartTag = NewCT_SmartTagRun()
				if _fabbca := d.DecodeElement(_dfeecg.SmartTag, &_cacff); _fabbca != nil {
					return _fabbca
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _aggbda)
				_aggbda.EG_ContentRunContent = append(_aggbda.EG_ContentRunContent, _dfeecg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sdt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sdt"}:
				_gbeafg := NewEG_PContent()
				_ecggf := NewEG_ContentRunContent()
				_ecggf.Sdt = NewCT_SdtRun()
				if _caagd := d.DecodeElement(_ecggf.Sdt, &_cacff); _caagd != nil {
					return _caagd
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _gbeafg)
				_gbeafg.EG_ContentRunContent = append(_gbeafg.EG_ContentRunContent, _ecggf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "dir"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "dir"}:
				_gbeec := NewEG_PContent()
				_cfec := NewEG_ContentRunContent()
				_cfec.Dir = NewCT_DirContentRun()
				if _dcadd := d.DecodeElement(_cfec.Dir, &_cacff); _dcadd != nil {
					return _dcadd
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _gbeec)
				_gbeec.EG_ContentRunContent = append(_gbeec.EG_ContentRunContent, _cfec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bdo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bdo"}:
				_bfdfe := NewEG_PContent()
				_ebbbd := NewEG_ContentRunContent()
				_ebbbd.Bdo = NewCT_BdoContentRun()
				if _eegaa := d.DecodeElement(_ebbbd.Bdo, &_cacff); _eegaa != nil {
					return _eegaa
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _bfdfe)
				_bfdfe.EG_ContentRunContent = append(_bfdfe.EG_ContentRunContent, _ebbbd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "r"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "r"}:
				_bdacc := NewEG_PContent()
				_baaaae := NewEG_ContentRunContent()
				_baaaae.R = NewCT_R()
				if _gfbafd := d.DecodeElement(_baaaae.R, &_cacff); _gfbafd != nil {
					return _gfbafd
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _bdacc)
				_bdacc.EG_ContentRunContent = append(_bdacc.EG_ContentRunContent, _baaaae)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "proofErr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "proofErr"}:
				_geacb := NewEG_PContent()
				_dfbcd := NewEG_ContentRunContent()
				_fdbgdf := NewEG_RunLevelElts()
				_fdbgdf.ProofErr = NewCT_ProofErr()
				if _abda := d.DecodeElement(_fdbgdf.ProofErr, &_cacff); _abda != nil {
					return _abda
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _geacb)
				_geacb.EG_ContentRunContent = append(_geacb.EG_ContentRunContent, _dfbcd)
				_dfbcd.EG_RunLevelElts = append(_dfbcd.EG_RunLevelElts, _fdbgdf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permStart"}:
				_cgceb := NewEG_PContent()
				_abfdf := NewEG_ContentRunContent()
				_gaeafc := NewEG_RunLevelElts()
				_gaeafc.PermStart = NewCT_PermStart()
				if _fceef := d.DecodeElement(_gaeafc.PermStart, &_cacff); _fceef != nil {
					return _fceef
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _cgceb)
				_cgceb.EG_ContentRunContent = append(_cgceb.EG_ContentRunContent, _abfdf)
				_abfdf.EG_RunLevelElts = append(_abfdf.EG_RunLevelElts, _gaeafc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "permEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "permEnd"}:
				_agadc := NewEG_PContent()
				_eaceg := NewEG_ContentRunContent()
				_ffaba := NewEG_RunLevelElts()
				_ffaba.PermEnd = NewCT_Perm()
				if _ebegg := d.DecodeElement(_ffaba.PermEnd, &_cacff); _ebegg != nil {
					return _ebegg
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _agadc)
				_agadc.EG_ContentRunContent = append(_agadc.EG_ContentRunContent, _eaceg)
				_eaceg.EG_RunLevelElts = append(_eaceg.EG_RunLevelElts, _ffaba)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "ins"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "ins"}:
				_fgfef := NewEG_PContent()
				_acfda := NewEG_ContentRunContent()
				_gffeaf := NewEG_RunLevelElts()
				_gffeaf.Ins = NewCT_RunTrackChange()
				if _fgbgc := d.DecodeElement(_gffeaf.Ins, &_cacff); _fgbgc != nil {
					return _fgbgc
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _fgfef)
				_fgfef.EG_ContentRunContent = append(_fgfef.EG_ContentRunContent, _acfda)
				_acfda.EG_RunLevelElts = append(_acfda.EG_RunLevelElts, _gffeaf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "del"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "del"}:
				_ebfed := NewEG_PContent()
				_bbabg := NewEG_ContentRunContent()
				_bgefa := NewEG_RunLevelElts()
				_bgefa.Del = NewCT_RunTrackChange()
				if _cced := d.DecodeElement(_bgefa.Del, &_cacff); _cced != nil {
					return _cced
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _ebfed)
				_ebfed.EG_ContentRunContent = append(_ebfed.EG_ContentRunContent, _bbabg)
				_bbabg.EG_RunLevelElts = append(_bbabg.EG_RunLevelElts, _bgefa)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFrom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFrom"}:
				_bacgf := NewEG_PContent()
				_bgaag := NewEG_ContentRunContent()
				_bddad := NewEG_RunLevelElts()
				_bddad.MoveFrom = NewCT_RunTrackChange()
				if _fgbbdb := d.DecodeElement(_bddad.MoveFrom, &_cacff); _fgbbdb != nil {
					return _fgbbdb
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _bacgf)
				_bacgf.EG_ContentRunContent = append(_bacgf.EG_ContentRunContent, _bgaag)
				_bgaag.EG_RunLevelElts = append(_bgaag.EG_RunLevelElts, _bddad)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveTo"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveTo"}:
				_fegbd := NewEG_PContent()
				_gdeag := NewEG_ContentRunContent()
				_gggfb := NewEG_RunLevelElts()
				_gggfb.MoveTo = NewCT_RunTrackChange()
				if _gcdde := d.DecodeElement(_gggfb.MoveTo, &_cacff); _gcdde != nil {
					return _gcdde
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _fegbd)
				_fegbd.EG_ContentRunContent = append(_fegbd.EG_ContentRunContent, _gdeag)
				_gdeag.EG_RunLevelElts = append(_gdeag.EG_RunLevelElts, _gggfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkStart"}:
				_fgebgf := NewEG_PContent()
				_gfdab := NewEG_ContentRunContent()
				_dbddda := NewEG_RunLevelElts()
				_babdg := NewEG_RangeMarkupElements()
				_babdg.BookmarkStart = NewCT_Bookmark()
				if _eagca := d.DecodeElement(_babdg.BookmarkStart, &_cacff); _eagca != nil {
					return _eagca
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _fgebgf)
				_fgebgf.EG_ContentRunContent = append(_fgebgf.EG_ContentRunContent, _gfdab)
				_gfdab.EG_RunLevelElts = append(_gfdab.EG_RunLevelElts, _dbddda)
				_dbddda.EG_RangeMarkupElements = append(_dbddda.EG_RangeMarkupElements, _babdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "bookmarkEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "bookmarkEnd"}:
				_acccae := NewEG_PContent()
				_faefd := NewEG_ContentRunContent()
				_dagegg := NewEG_RunLevelElts()
				_abcbc := NewEG_RangeMarkupElements()
				_abcbc.BookmarkEnd = NewCT_MarkupRange()
				if _fbfbbe := d.DecodeElement(_abcbc.BookmarkEnd, &_cacff); _fbfbbe != nil {
					return _fbfbbe
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _acccae)
				_acccae.EG_ContentRunContent = append(_acccae.EG_ContentRunContent, _faefd)
				_faefd.EG_RunLevelElts = append(_faefd.EG_RunLevelElts, _dagegg)
				_dagegg.EG_RangeMarkupElements = append(_dagegg.EG_RangeMarkupElements, _abcbc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeStart"}:
				_dfaba := NewEG_PContent()
				_ffefag := NewEG_ContentRunContent()
				_ecefbf := NewEG_RunLevelElts()
				_ccbbgf := NewEG_RangeMarkupElements()
				_ccbbgf.MoveFromRangeStart = NewCT_MoveBookmark()
				if _gceeda := d.DecodeElement(_ccbbgf.MoveFromRangeStart, &_cacff); _gceeda != nil {
					return _gceeda
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _dfaba)
				_dfaba.EG_ContentRunContent = append(_dfaba.EG_ContentRunContent, _ffefag)
				_ffefag.EG_RunLevelElts = append(_ffefag.EG_RunLevelElts, _ecefbf)
				_ecefbf.EG_RangeMarkupElements = append(_ecefbf.EG_RangeMarkupElements, _ccbbgf)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveFromRangeEnd"}:
				_fdbcege := NewEG_PContent()
				_afbcgd := NewEG_ContentRunContent()
				_cbbabf := NewEG_RunLevelElts()
				_dffbfb := NewEG_RangeMarkupElements()
				_dffbfb.MoveFromRangeEnd = NewCT_MarkupRange()
				if _dgdfe := d.DecodeElement(_dffbfb.MoveFromRangeEnd, &_cacff); _dgdfe != nil {
					return _dgdfe
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _fdbcege)
				_fdbcege.EG_ContentRunContent = append(_fdbcege.EG_ContentRunContent, _afbcgd)
				_afbcgd.EG_RunLevelElts = append(_afbcgd.EG_RunLevelElts, _cbbabf)
				_cbbabf.EG_RangeMarkupElements = append(_cbbabf.EG_RangeMarkupElements, _dffbfb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeStart"}:
				_dbgcc := NewEG_PContent()
				_cadade := NewEG_ContentRunContent()
				_cgbaf := NewEG_RunLevelElts()
				_cbcede := NewEG_RangeMarkupElements()
				_cbcede.MoveToRangeStart = NewCT_MoveBookmark()
				if _bgbbea := d.DecodeElement(_cbcede.MoveToRangeStart, &_cacff); _bgbbea != nil {
					return _bgbbea
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _dbgcc)
				_dbgcc.EG_ContentRunContent = append(_dbgcc.EG_ContentRunContent, _cadade)
				_cadade.EG_RunLevelElts = append(_cadade.EG_RunLevelElts, _cgbaf)
				_cgbaf.EG_RangeMarkupElements = append(_cgbaf.EG_RangeMarkupElements, _cbcede)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "moveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "moveToRangeEnd"}:
				_fgabg := NewEG_PContent()
				_bbabf := NewEG_ContentRunContent()
				_bbbcb := NewEG_RunLevelElts()
				_ggdga := NewEG_RangeMarkupElements()
				_ggdga.MoveToRangeEnd = NewCT_MarkupRange()
				if _dfadad := d.DecodeElement(_ggdga.MoveToRangeEnd, &_cacff); _dfadad != nil {
					return _dfadad
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _fgabg)
				_fgabg.EG_ContentRunContent = append(_fgabg.EG_ContentRunContent, _bbabf)
				_bbabf.EG_RunLevelElts = append(_bbabf.EG_RunLevelElts, _bbbcb)
				_bbbcb.EG_RangeMarkupElements = append(_bbbcb.EG_RangeMarkupElements, _ggdga)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeStart"}:
				_ggfgc := NewEG_PContent()
				_eaddc := NewEG_ContentRunContent()
				_cffff := NewEG_RunLevelElts()
				_beaec := NewEG_RangeMarkupElements()
				_beaec.CommentRangeStart = NewCT_MarkupRange()
				if _bgfgb := d.DecodeElement(_beaec.CommentRangeStart, &_cacff); _bgfgb != nil {
					return _bgfgb
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _ggfgc)
				_ggfgc.EG_ContentRunContent = append(_ggfgc.EG_ContentRunContent, _eaddc)
				_eaddc.EG_RunLevelElts = append(_eaddc.EG_RunLevelElts, _cffff)
				_cffff.EG_RangeMarkupElements = append(_cffff.EG_RangeMarkupElements, _beaec)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "commentRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "commentRangeEnd"}:
				_bgddb := NewEG_PContent()
				_efcgec := NewEG_ContentRunContent()
				_bdffg := NewEG_RunLevelElts()
				_edfdd := NewEG_RangeMarkupElements()
				_edfdd.CommentRangeEnd = NewCT_MarkupRange()
				if _dggfgb := d.DecodeElement(_edfdd.CommentRangeEnd, &_cacff); _dggfgb != nil {
					return _dggfgb
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _bgddb)
				_bgddb.EG_ContentRunContent = append(_bgddb.EG_ContentRunContent, _efcgec)
				_efcgec.EG_RunLevelElts = append(_efcgec.EG_RunLevelElts, _bdffg)
				_bdffg.EG_RangeMarkupElements = append(_bdffg.EG_RangeMarkupElements, _edfdd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeStart"}:
				_cddgc := NewEG_PContent()
				_fbgegg := NewEG_ContentRunContent()
				_afdbdc := NewEG_RunLevelElts()
				_bacbgca := NewEG_RangeMarkupElements()
				_bacbgca.CustomXmlInsRangeStart = NewCT_TrackChange()
				if _gacab := d.DecodeElement(_bacbgca.CustomXmlInsRangeStart, &_cacff); _gacab != nil {
					return _gacab
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _cddgc)
				_cddgc.EG_ContentRunContent = append(_cddgc.EG_ContentRunContent, _fbgegg)
				_fbgegg.EG_RunLevelElts = append(_fbgegg.EG_RunLevelElts, _afdbdc)
				_afdbdc.EG_RangeMarkupElements = append(_afdbdc.EG_RangeMarkupElements, _bacbgca)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlInsRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlInsRangeEnd"}:
				_edcgeg := NewEG_PContent()
				_dafdb := NewEG_ContentRunContent()
				_edaga := NewEG_RunLevelElts()
				_deeea := NewEG_RangeMarkupElements()
				_deeea.CustomXmlInsRangeEnd = NewCT_Markup()
				if _eaega := d.DecodeElement(_deeea.CustomXmlInsRangeEnd, &_cacff); _eaega != nil {
					return _eaega
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _edcgeg)
				_edcgeg.EG_ContentRunContent = append(_edcgeg.EG_ContentRunContent, _dafdb)
				_dafdb.EG_RunLevelElts = append(_dafdb.EG_RunLevelElts, _edaga)
				_edaga.EG_RangeMarkupElements = append(_edaga.EG_RangeMarkupElements, _deeea)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeStart"}:
				_bgcbg := NewEG_PContent()
				_dcgfaa := NewEG_ContentRunContent()
				_cdcca := NewEG_RunLevelElts()
				_ffgfd := NewEG_RangeMarkupElements()
				_ffgfd.CustomXmlDelRangeStart = NewCT_TrackChange()
				if _bbccc := d.DecodeElement(_ffgfd.CustomXmlDelRangeStart, &_cacff); _bbccc != nil {
					return _bbccc
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _bgcbg)
				_bgcbg.EG_ContentRunContent = append(_bgcbg.EG_ContentRunContent, _dcgfaa)
				_dcgfaa.EG_RunLevelElts = append(_dcgfaa.EG_RunLevelElts, _cdcca)
				_cdcca.EG_RangeMarkupElements = append(_cdcca.EG_RangeMarkupElements, _ffgfd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlDelRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlDelRangeEnd"}:
				_gcebc := NewEG_PContent()
				_fbdgd := NewEG_ContentRunContent()
				_ccbbf := NewEG_RunLevelElts()
				_ggefdg := NewEG_RangeMarkupElements()
				_ggefdg.CustomXmlDelRangeEnd = NewCT_Markup()
				if _fcfgg := d.DecodeElement(_ggefdg.CustomXmlDelRangeEnd, &_cacff); _fcfgg != nil {
					return _fcfgg
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _gcebc)
				_gcebc.EG_ContentRunContent = append(_gcebc.EG_ContentRunContent, _fbdgd)
				_fbdgd.EG_RunLevelElts = append(_fbdgd.EG_RunLevelElts, _ccbbf)
				_ccbbf.EG_RangeMarkupElements = append(_ccbbf.EG_RangeMarkupElements, _ggefdg)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeStart"}:
				_gdgcg := NewEG_PContent()
				_gebecc := NewEG_ContentRunContent()
				_dgabcf := NewEG_RunLevelElts()
				_adddd := NewEG_RangeMarkupElements()
				_adddd.CustomXmlMoveFromRangeStart = NewCT_TrackChange()
				if _cbgaed := d.DecodeElement(_adddd.CustomXmlMoveFromRangeStart, &_cacff); _cbgaed != nil {
					return _cbgaed
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _gdgcg)
				_gdgcg.EG_ContentRunContent = append(_gdgcg.EG_ContentRunContent, _gebecc)
				_gebecc.EG_RunLevelElts = append(_gebecc.EG_RunLevelElts, _dgabcf)
				_dgabcf.EG_RangeMarkupElements = append(_dgabcf.EG_RangeMarkupElements, _adddd)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveFromRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveFromRangeEnd"}:
				_gaegg := NewEG_PContent()
				_ddgdeg := NewEG_ContentRunContent()
				_gfffb := NewEG_RunLevelElts()
				_fcgbb := NewEG_RangeMarkupElements()
				_fcgbb.CustomXmlMoveFromRangeEnd = NewCT_Markup()
				if _gbgefb := d.DecodeElement(_fcgbb.CustomXmlMoveFromRangeEnd, &_cacff); _gbgefb != nil {
					return _gbgefb
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _gaegg)
				_gaegg.EG_ContentRunContent = append(_gaegg.EG_ContentRunContent, _ddgdeg)
				_ddgdeg.EG_RunLevelElts = append(_ddgdeg.EG_RunLevelElts, _gfffb)
				_gfffb.EG_RangeMarkupElements = append(_gfffb.EG_RangeMarkupElements, _fcgbb)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeStart"}:
				_gbfdba := NewEG_PContent()
				_baadae := NewEG_ContentRunContent()
				_fdcdc := NewEG_RunLevelElts()
				_addfc := NewEG_RangeMarkupElements()
				_addfc.CustomXmlMoveToRangeStart = NewCT_TrackChange()
				if _bfcbe := d.DecodeElement(_addfc.CustomXmlMoveToRangeStart, &_cacff); _bfcbe != nil {
					return _bfcbe
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _gbfdba)
				_gbfdba.EG_ContentRunContent = append(_gbfdba.EG_ContentRunContent, _baadae)
				_baadae.EG_RunLevelElts = append(_baadae.EG_RunLevelElts, _fdcdc)
				_fdcdc.EG_RangeMarkupElements = append(_fdcdc.EG_RangeMarkupElements, _addfc)
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "customXmlMoveToRangeEnd"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "customXmlMoveToRangeEnd"}:
				_fbafcb := NewEG_PContent()
				_dagcf := NewEG_ContentRunContent()
				_ddecb := NewEG_RunLevelElts()
				_egbee := NewEG_RangeMarkupElements()
				_egbee.CustomXmlMoveToRangeEnd = NewCT_Markup()
				if _eaagd := d.DecodeElement(_egbee.CustomXmlMoveToRangeEnd, &_cacff); _eaagd != nil {
					return _eaagd
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _fbafcb)
				_fbafcb.EG_ContentRunContent = append(_fbafcb.EG_ContentRunContent, _dagcf)
				_dagcf.EG_RunLevelElts = append(_dagcf.EG_RunLevelElts, _ddecb)
				_ddecb.EG_RangeMarkupElements = append(_ddecb.EG_RangeMarkupElements, _egbee)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMathPara"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMathPara"}:
				_acdgb := NewEG_PContent()
				_dfcbb := NewEG_ContentRunContent()
				_bcgcf := NewEG_RunLevelElts()
				_dcfged := NewEG_MathContent()
				_dcfged.OMathPara = _f.NewOMathPara()
				if _ccfeb := d.DecodeElement(_dcfged.OMathPara, &_cacff); _ccfeb != nil {
					return _ccfeb
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _acdgb)
				_acdgb.EG_ContentRunContent = append(_acdgb.EG_ContentRunContent, _dfcbb)
				_dfcbb.EG_RunLevelElts = append(_dfcbb.EG_RunLevelElts, _bcgcf)
				_bcgcf.EG_MathContent = append(_bcgcf.EG_MathContent, _dcfged)
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath", Local: "oMath"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fmath", Local: "oMath"}:
				_agbbb := NewEG_PContent()
				_fefef := NewEG_ContentRunContent()
				_dfdad := NewEG_RunLevelElts()
				_eccab := NewEG_MathContent()
				_eccab.OMath = _f.NewOMath()
				if _ggfdfb := d.DecodeElement(_eccab.OMath, &_cacff); _ggfdfb != nil {
					return _ggfdfb
				}
				_fcfac.EG_PContent = append(_fcfac.EG_PContent, _agbbb)
				_agbbb.EG_ContentRunContent = append(_agbbb.EG_ContentRunContent, _fefef)
				_fefef.EG_RunLevelElts = append(_fefef.EG_RunLevelElts, _dfdad)
				_dfdad.EG_MathContent = append(_dfdad.EG_MathContent, _eccab)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_SmartTagRun\u0020\u0025v", _cacff.Name)
				if _gcgdge := d.Skip(); _gcgdge != nil {
					return _gcgdge
				}
			}
		case _d.EndElement:
			break _acbga
		case _d.CharData:
		}
	}
	return nil
}
func (_ffcge *CT_DocPartCategory) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffcge.Name = NewCT_String()
	_ffcge.Gallery = NewCT_DocPartGallery()
_fccg:
	for {
		_fdda, _gaedb := d.Token()
		if _gaedb != nil {
			return _gaedb
		}
		switch _eaee := _fdda.(type) {
		case _d.StartElement:
			switch _eaee.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "name"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "name"}:
				if _acdfe := d.DecodeElement(_ffcge.Name, &_eaee); _acdfe != nil {
					return _acdfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "gallery"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "gallery"}:
				if _gecbd := d.DecodeElement(_ffcge.Gallery, &_eaee); _gecbd != nil {
					return _gecbd
				}
			default:
				_ga.Log("skipping\u0020unsupported element\u0020on\u0020CT_DocPartCategory\u0020\u0025v", _eaee.Name)
				if _fdbe := d.Skip(); _fdbe != nil {
					return _fdbe
				}
			}
		case _d.EndElement:
			break _fccg
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SdtCell and its children, prefixing error messages with path
func (_cgfce *CT_SdtCell) ValidateWithPath(path string) error {
	if _cgfce.SdtPr != nil {
		if _edgde := _cgfce.SdtPr.ValidateWithPath(path + "\u002fSdtPr"); _edgde != nil {
			return _edgde
		}
	}
	if _cgfce.SdtEndPr != nil {
		if _gggde := _cgfce.SdtEndPr.ValidateWithPath(path + "\u002fSdtEndPr"); _gggde != nil {
			return _gggde
		}
	}
	if _cgfce.SdtContent != nil {
		if _baggg := _cgfce.SdtContent.ValidateWithPath(path + "/SdtContent"); _baggg != nil {
			return _baggg
		}
	}
	return nil
}

const (
	ST_DocPartGalleryUnset             ST_DocPartGallery = 0
	ST_DocPartGalleryPlaceholder       ST_DocPartGallery = 1
	ST_DocPartGalleryAny               ST_DocPartGallery = 2
	ST_DocPartGalleryDefault           ST_DocPartGallery = 3
	ST_DocPartGalleryDocParts          ST_DocPartGallery = 4
	ST_DocPartGalleryCoverPg           ST_DocPartGallery = 5
	ST_DocPartGalleryEq                ST_DocPartGallery = 6
	ST_DocPartGalleryFtrs              ST_DocPartGallery = 7
	ST_DocPartGalleryHdrs              ST_DocPartGallery = 8
	ST_DocPartGalleryPgNum             ST_DocPartGallery = 9
	ST_DocPartGalleryTbls              ST_DocPartGallery = 10
	ST_DocPartGalleryWatermarks        ST_DocPartGallery = 11
	ST_DocPartGalleryAutoTxt           ST_DocPartGallery = 12
	ST_DocPartGalleryTxtBox            ST_DocPartGallery = 13
	ST_DocPartGalleryPgNumT            ST_DocPartGallery = 14
	ST_DocPartGalleryPgNumB            ST_DocPartGallery = 15
	ST_DocPartGalleryPgNumMargins      ST_DocPartGallery = 16
	ST_DocPartGalleryTblOfContents     ST_DocPartGallery = 17
	ST_DocPartGalleryBib               ST_DocPartGallery = 18
	ST_DocPartGalleryCustQuickParts    ST_DocPartGallery = 19
	ST_DocPartGalleryCustCoverPg       ST_DocPartGallery = 20
	ST_DocPartGalleryCustEq            ST_DocPartGallery = 21
	ST_DocPartGalleryCustFtrs          ST_DocPartGallery = 22
	ST_DocPartGalleryCustHdrs          ST_DocPartGallery = 23
	ST_DocPartGalleryCustPgNum         ST_DocPartGallery = 24
	ST_DocPartGalleryCustTbls          ST_DocPartGallery = 25
	ST_DocPartGalleryCustWatermarks    ST_DocPartGallery = 26
	ST_DocPartGalleryCustAutoTxt       ST_DocPartGallery = 27
	ST_DocPartGalleryCustTxtBox        ST_DocPartGallery = 28
	ST_DocPartGalleryCustPgNumT        ST_DocPartGallery = 29
	ST_DocPartGalleryCustPgNumB        ST_DocPartGallery = 30
	ST_DocPartGalleryCustPgNumMargins  ST_DocPartGallery = 31
	ST_DocPartGalleryCustTblOfContents ST_DocPartGallery = 32
	ST_DocPartGalleryCustBib           ST_DocPartGallery = 33
	ST_DocPartGalleryCustom1           ST_DocPartGallery = 34
	ST_DocPartGalleryCustom2           ST_DocPartGallery = 35
	ST_DocPartGalleryCustom3           ST_DocPartGallery = 36
	ST_DocPartGalleryCustom4           ST_DocPartGallery = 37
	ST_DocPartGalleryCustom5           ST_DocPartGallery = 38
)

func (_gddggb ST_FFTextType) ValidateWithPath(path string) error {
	switch _gddggb {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_gddggb))
	}
	return nil
}

// Validate validates the EG_RPrBase and its children
func (_aceadb *EG_RPrBase) Validate() error { return _aceadb.ValidateWithPath("EG_RPrBase") }
func (_becab *CT_FFTextType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_becab.ValAttr = ST_FFTextType(1)
	for _, _egbg := range start.Attr {
		if _egbg.Name.Local == "val" {
			_becab.ValAttr.UnmarshalXMLAttr(_egbg)
			continue
		}
	}
	for {
		_gdeg, _afee := d.Token()
		if _afee != nil {
			return _b.Errorf("parsing\u0020CT_FFTextType:\u0020\u0025s", _afee)
		}
		if _cgedd, _gfbge := _gdeg.(_d.EndElement); _gfbge && _cgedd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bbcafd ST_DocPartGallery) ValidateWithPath(path string) error {
	switch _bbcafd {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_bbcafd))
	}
	return nil
}
func (_cddgaf WdST_RelFromH) ValidateWithPath(path string) error {
	switch _cddgaf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cddgaf))
	}
	return nil
}
func (_bfffbg *CT_MultiLevelType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_aace, _caead := _bfffbg.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
	if _caead != nil {
		return _caead
	}
	start.Attr = append(start.Attr, _aace)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewWdWpc() *WdWpc {
	_fbdea := &WdWpc{}
	_fbdea.WdCT_WordprocessingCanvas = *NewWdCT_WordprocessingCanvas()
	return _fbdea
}
func (_egabd *CT_DocPartBehavior) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_egabd.ValAttr = ST_DocPartBehavior(1)
	for _, _dbgbc := range start.Attr {
		if _dbgbc.Name.Local == "val" {
			_egabd.ValAttr.UnmarshalXMLAttr(_dbgbc)
			continue
		}
	}
	for {
		_ccbfg, _egdd := d.Token()
		if _egdd != nil {
			return _b.Errorf("parsing\u0020CT_DocPartBehavior:\u0020\u0025s", _egdd)
		}
		if _cceb, _gggd := _ccbfg.(_d.EndElement); _gggd && _cceb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_AutoCaptions() *CT_AutoCaptions { _gffd := &CT_AutoCaptions{}; return _gffd }
func (_agcc *CT_CustomXmlRow) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _agcc.UriAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:uri"}, Value: _b.Sprintf("\u0025v", *_agcc.UriAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:element"}, Value: _b.Sprintf("\u0025v", _agcc.ElementAttr)})
	e.EncodeToken(start)
	if _agcc.CustomXmlPr != nil {
		_abdg := _d.StartElement{Name: _d.Name{Local: "w:customXmlPr"}}
		e.EncodeElement(_agcc.CustomXmlPr, _abdg)
	}
	if _agcc.EG_ContentRowContent != nil {
		for _, _fegd := range _agcc.EG_ContentRowContent {
			_fegd.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_deda *CT_FldChar) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_aefc, _caege := _deda.FldCharTypeAttr.MarshalXMLAttr(_d.Name{Local: "w:fldCharType"})
	if _caege != nil {
		return _caege
	}
	start.Attr = append(start.Attr, _aefc)
	if _deda.FldLockAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fldLock"}, Value: _b.Sprintf("\u0025v", *_deda.FldLockAttr)})
	}
	if _deda.DirtyAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:dirty"}, Value: _b.Sprintf("\u0025v", *_deda.DirtyAttr)})
	}
	e.EncodeToken(start)
	if _deda.FldData != nil {
		_bdbe := _d.StartElement{Name: _d.Name{Local: "w:fldData"}}
		e.EncodeElement(_deda.FldData, _bdbe)
	}
	if _deda.FfData != nil {
		_faeca := _d.StartElement{Name: _d.Name{Local: "w:ffData"}}
		e.EncodeElement(_deda.FfData, _faeca)
	}
	if _deda.NumberingChange != nil {
		_cdbbe := _d.StartElement{Name: _d.Name{Local: "w:numberingChange"}}
		e.EncodeElement(_deda.NumberingChange, _cdbbe)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PageSz and its children, prefixing error messages with path
func (_ggcbg *CT_PageSz) ValidateWithPath(path string) error {
	if _ggcbg.WAttr != nil {
		if _caged := _ggcbg.WAttr.ValidateWithPath(path + "\u002fWAttr"); _caged != nil {
			return _caged
		}
	}
	if _ggcbg.HAttr != nil {
		if _edaab := _ggcbg.HAttr.ValidateWithPath(path + "\u002fHAttr"); _edaab != nil {
			return _edaab
		}
	}
	if _agge := _ggcbg.OrientAttr.ValidateWithPath(path + "/OrientAttr"); _agge != nil {
		return _agge
	}
	return nil
}

type CT_Attr struct {

	// Namespace
	UriAttr *string

	// Name
	NameAttr string

	// Value
	ValAttr string
}

func NewWdCT_WrapThrough() *WdCT_WrapThrough {
	_abbaff := &WdCT_WrapThrough{}
	_abbaff.WrapTextAttr = WdST_WrapText(1)
	_abbaff.WrapPolygon = NewWdCT_WrapPath()
	return _abbaff
}

// ValidateWithPath validates the CT_SdtText and its children, prefixing error messages with path
func (_ebafe *CT_SdtText) ValidateWithPath(path string) error {
	if _ebafe.MultiLineAttr != nil {
		if _fddfg := _ebafe.MultiLineAttr.ValidateWithPath(path + "\u002fMultiLineAttr"); _fddfg != nil {
			return _fddfg
		}
	}
	return nil
}
func (_cbdff ST_JcTable) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cbdff.String(), start)
}
func (_dfaff ST_PageBorderDisplay) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dfaff.String(), start)
}
func (_eggecc *Endnotes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eggecc.CT_Endnotes = *NewCT_Endnotes()
_dggdf:
	for {
		_baaae, _ggceef := d.Token()
		if _ggceef != nil {
			return _ggceef
		}
		switch _ddfeb := _baaae.(type) {
		case _d.StartElement:
			switch _ddfeb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "endnote"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "endnote"}:
				_cdecd := NewCT_FtnEdn()
				if _bgfcbc := d.DecodeElement(_cdecd, &_ddfeb); _bgfcbc != nil {
					return _bgfcbc
				}
				_eggecc.Endnote = append(_eggecc.Endnote, _cdecd)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020Endnotes\u0020\u0025v", _ddfeb.Name)
				if _ffddcc := d.Skip(); _ffddcc != nil {
					return _ffddcc
				}
			}
		case _d.EndElement:
			break _dggdf
		case _d.CharData:
		}
	}
	return nil
}
func NewWdCT_Anchor() *WdCT_Anchor {
	_dfcde := &WdCT_Anchor{}
	_dfcde.SimplePos = _eb.NewCT_Point2D()
	_dfcde.PositionH = NewWdCT_PosH()
	_dfcde.PositionV = NewWdCT_PosV()
	_dfcde.Extent = _eb.NewCT_PositiveSize2D()
	_dfcde.DocPr = _eb.NewCT_NonVisualDrawingProps()
	_dfcde.Graphic = _eb.NewGraphic()
	return _dfcde
}

type CT_DocGrid struct {

	// Document Grid Type
	TypeAttr ST_DocGrid

	// Document Grid Line Pitch
	LinePitchAttr *int64

	// Document Grid Character Pitch
	CharSpaceAttr *int64
}

func (_cddbfa ST_TextboxTightWrap) ValidateWithPath(path string) error {
	switch _cddbfa {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_cddbfa))
	}
	return nil
}
func (_geegd *ST_SignedTwipsMeasure) Validate() error { return _geegd.ValidateWithPath("") }
func (_gaceb *EG_ContentCellContent) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gaceb.Tc != nil {
		_ggddc := _d.StartElement{Name: _d.Name{Local: "w:tc"}}
		for _, _daadfa := range _gaceb.Tc {
			e.EncodeElement(_daadfa, _ggddc)
		}
	}
	if _gaceb.CustomXml != nil {
		_egabg := _d.StartElement{Name: _d.Name{Local: "w:customXml"}}
		e.EncodeElement(_gaceb.CustomXml, _egabg)
	}
	if _gaceb.Sdt != nil {
		_ffbfd := _d.StartElement{Name: _d.Name{Local: "w:sdt"}}
		e.EncodeElement(_gaceb.Sdt, _ffbfd)
	}
	if _gaceb.EG_RunLevelElts != nil {
		for _, _dccea := range _gaceb.EG_RunLevelElts {
			_dccea.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}
func NewCT_PaperSource() *CT_PaperSource { _gagdbd := &CT_PaperSource{}; return _gagdbd }

// ValidateWithPath validates the CT_TblGridBase and its children, prefixing error messages with path
func (_deacde *CT_TblGridBase) ValidateWithPath(path string) error {
	for _fdfba, _egagdc := range _deacde.GridCol {
		if _dcdfgf := _egagdc.ValidateWithPath(_b.Sprintf("\u0025s\u002fGridCol\u005b\u0025d\u005d", path, _fdfba)); _dcdfgf != nil {
			return _dcdfgf
		}
	}
	return nil
}

// Validate validates the CT_TextboxTightWrap and its children
func (_ccdedg *CT_TextboxTightWrap) Validate() error {
	return _ccdedg.ValidateWithPath("CT_TextboxTightWrap")
}
func NewCT_FFHelpText() *CT_FFHelpText     { _faffc := &CT_FFHelpText{}; return _faffc }
func NewEG_PContentMath() *EG_PContentMath { _ccfbbf := &EG_PContentMath{}; return _ccfbbf }
func NewCT_CustomXmlRow() *CT_CustomXmlRow { _egbbb := &CT_CustomXmlRow{}; return _egbbb }
func (_cgacfe *EG_RunLevelElts) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cgacfe.ProofErr != nil {
		_cafdgd := _d.StartElement{Name: _d.Name{Local: "w:proofErr"}}
		e.EncodeElement(_cgacfe.ProofErr, _cafdgd)
	}
	if _cgacfe.PermStart != nil {
		_fbace := _d.StartElement{Name: _d.Name{Local: "w:permStart"}}
		e.EncodeElement(_cgacfe.PermStart, _fbace)
	}
	if _cgacfe.PermEnd != nil {
		_cfebc := _d.StartElement{Name: _d.Name{Local: "w:permEnd"}}
		e.EncodeElement(_cgacfe.PermEnd, _cfebc)
	}
	if _cgacfe.Ins != nil {
		_fccaa := _d.StartElement{Name: _d.Name{Local: "w:ins"}}
		e.EncodeElement(_cgacfe.Ins, _fccaa)
	}
	if _cgacfe.Del != nil {
		_ggaff := _d.StartElement{Name: _d.Name{Local: "w:del"}}
		e.EncodeElement(_cgacfe.Del, _ggaff)
	}
	if _cgacfe.MoveFrom != nil {
		_dfbgedb := _d.StartElement{Name: _d.Name{Local: "w:moveFrom"}}
		e.EncodeElement(_cgacfe.MoveFrom, _dfbgedb)
	}
	if _cgacfe.MoveTo != nil {
		_cccfaf := _d.StartElement{Name: _d.Name{Local: "w:moveTo"}}
		e.EncodeElement(_cgacfe.MoveTo, _cccfaf)
	}
	if _cgacfe.EG_RangeMarkupElements != nil {
		for _, _ggbgee := range _cgacfe.EG_RangeMarkupElements {
			_ggbgee.MarshalXML(e, _d.StartElement{})
		}
	}
	if _cgacfe.EG_MathContent != nil {
		for _, _gbbga := range _cgacfe.EG_MathContent {
			_gbbga.MarshalXML(e, _d.StartElement{})
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LevelText and its children, prefixing error messages with path
func (_edadd *CT_LevelText) ValidateWithPath(path string) error {
	if _edadd.NullAttr != nil {
		if _faced := _edadd.NullAttr.ValidateWithPath(path + "\u002fNullAttr"); _faced != nil {
			return _faced
		}
	}
	return nil
}
func (_dbgbb *CT_WebSettings) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cfffbf:
	for {
		_ffacda, _aacgaf := d.Token()
		if _aacgaf != nil {
			return _aacgaf
		}
		switch _ccafde := _ffacda.(type) {
		case _d.StartElement:
			switch _ccafde.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "frameset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "frameset"}:
				_dbgbb.Frameset = NewCT_Frameset()
				if _efdac := d.DecodeElement(_dbgbb.Frameset, &_ccafde); _efdac != nil {
					return _efdac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "divs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "divs"}:
				_dbgbb.Divs = NewCT_Divs()
				if _aacfc := d.DecodeElement(_dbgbb.Divs, &_ccafde); _aacfc != nil {
					return _aacfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "encoding"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "encoding"}:
				_dbgbb.Encoding = NewCT_String()
				if _ddffd := d.DecodeElement(_dbgbb.Encoding, &_ccafde); _ddffd != nil {
					return _ddffd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "optimizeForBrowser"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "optimizeForBrowser"}:
				_dbgbb.OptimizeForBrowser = NewCT_OptimizeForBrowser()
				if _dbfcd := d.DecodeElement(_dbgbb.OptimizeForBrowser, &_ccafde); _dbfcd != nil {
					return _dbfcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "relyOnVML"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "relyOnVML"}:
				_dbgbb.RelyOnVML = NewCT_OnOff()
				if _dgbec := d.DecodeElement(_dbgbb.RelyOnVML, &_ccafde); _dgbec != nil {
					return _dgbec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "allowPNG"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "allowPNG"}:
				_dbgbb.AllowPNG = NewCT_OnOff()
				if _ccebff := d.DecodeElement(_dbgbb.AllowPNG, &_ccafde); _ccebff != nil {
					return _ccebff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotRelyOnCSS"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotRelyOnCSS"}:
				_dbgbb.DoNotRelyOnCSS = NewCT_OnOff()
				if _fbgefd := d.DecodeElement(_dbgbb.DoNotRelyOnCSS, &_ccafde); _fbgefd != nil {
					return _fbgefd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotSaveAsSingleFile"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotSaveAsSingleFile"}:
				_dbgbb.DoNotSaveAsSingleFile = NewCT_OnOff()
				if _eaeeba := d.DecodeElement(_dbgbb.DoNotSaveAsSingleFile, &_ccafde); _eaeeba != nil {
					return _eaeeba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotOrganizeInFolder"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotOrganizeInFolder"}:
				_dbgbb.DoNotOrganizeInFolder = NewCT_OnOff()
				if _ecedd := d.DecodeElement(_dbgbb.DoNotOrganizeInFolder, &_ccafde); _ecedd != nil {
					return _ecedd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "doNotUseLongFileNames"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "doNotUseLongFileNames"}:
				_dbgbb.DoNotUseLongFileNames = NewCT_OnOff()
				if _agdbga := d.DecodeElement(_dbgbb.DoNotUseLongFileNames, &_ccafde); _agdbga != nil {
					return _agdbga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pixelsPerInch"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pixelsPerInch"}:
				_dbgbb.PixelsPerInch = NewCT_DecimalNumber()
				if _gggeg := d.DecodeElement(_dbgbb.PixelsPerInch, &_ccafde); _gggeg != nil {
					return _gggeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "targetScreenSz"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "targetScreenSz"}:
				_dbgbb.TargetScreenSz = NewCT_TargetScreenSz()
				if _cedgg := d.DecodeElement(_dbgbb.TargetScreenSz, &_ccafde); _cedgg != nil {
					return _cedgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "saveSmartTagsAsXml"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "saveSmartTagsAsXml"}:
				_dbgbb.SaveSmartTagsAsXml = NewCT_OnOff()
				if _ecgca := d.DecodeElement(_dbgbb.SaveSmartTagsAsXml, &_ccafde); _ecgca != nil {
					return _ecgca
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_WebSettings\u0020\u0025v", _ccafde.Name)
				if _afcfg := d.Skip(); _afcfg != nil {
					return _afcfg
				}
			}
		case _d.EndElement:
			break _cfffbf
		case _d.CharData:
		}
	}
	return nil
}
func (_cfggf *CT_Zoom) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cfggf.ValAttr != ST_ZoomUnset {
		_cdeda, _fefag := _cfggf.ValAttr.MarshalXMLAttr(_d.Name{Local: "w:val"})
		if _fefag != nil {
			return _fefag
		}
		start.Attr = append(start.Attr, _cdeda)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:percent"}, Value: _b.Sprintf("\u0025v", _cfggf.PercentAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const ST_CnfPattern = "\u005b01]\u002a"

func (_dcgfbf ST_MailMergeDocType) ValidateWithPath(path string) error {
	switch _dcgfbf {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_dcgfbf))
	}
	return nil
}

type CT_DocRsids struct {

	// Original Document Revision Save ID
	RsidRoot *CT_LongHexNumber

	// Single Session Revision Save ID
	Rsid []*CT_LongHexNumber
}

func (_bcfaeg *Endnotes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:endnotes"
	return _bcfaeg.CT_Endnotes.MarshalXML(e, start)
}
func (_caadd *CT_DocGrid) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ddecg := range start.Attr {
		if _ddecg.Name.Local == "type" {
			_caadd.TypeAttr.UnmarshalXMLAttr(_ddecg)
			continue
		}
		if _ddecg.Name.Local == "linePitch" {
			_gcbe, _cgcbg := _dd.ParseInt(_ddecg.Value, 10, 64)
			if _cgcbg != nil {
				return _cgcbg
			}
			_caadd.LinePitchAttr = &_gcbe
			continue
		}
		if _ddecg.Name.Local == "charSpace" {
			_bfegg, _dbgfd := _dd.ParseInt(_ddecg.Value, 10, 64)
			if _dbgfd != nil {
				return _dbgfd
			}
			_caadd.CharSpaceAttr = &_bfegg
			continue
		}
	}
	for {
		_bcbfd, _dacag := d.Token()
		if _dacag != nil {
			return _b.Errorf("parsing\u0020CT_DocGrid:\u0020%s", _dacag)
		}
		if _ecfd, _dgeae := _bcbfd.(_d.EndElement); _dgeae && _ecfd.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_MultiLevelType byte

// ValidateWithPath validates the EG_PContentMath and its children, prefixing error messages with path
func (_bbfcf *EG_PContentMath) ValidateWithPath(path string) error {
	for _aagfeg, _gcfcc := range _bbfcf.EG_PContentBase {
		if _bacef := _gcfcc.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_PContentBase\u005b\u0025d\u005d", path, _aagfeg)); _bacef != nil {
			return _bacef
		}
	}
	for _aabfed, _afbcga := range _bbfcf.EG_ContentRunContentBase {
		if _afbdd := _afbcga.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_ContentRunContentBase\u005b\u0025d\u005d", path, _aabfed)); _afbdd != nil {
			return _afbdd
		}
	}
	return nil
}
func (_gagf *CT_MoveBookmark) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cecef := range start.Attr {
		if _cecef.Name.Local == "author" {
			_efeae, _gggg := _cecef.Value, error(nil)
			if _gggg != nil {
				return _gggg
			}
			_gagf.AuthorAttr = _efeae
			continue
		}
		if _cecef.Name.Local == "date" {
			_eggad, _dedbe := ParseStdlibTime(_cecef.Value)
			if _dedbe != nil {
				return _dedbe
			}
			_gagf.DateAttr = _eggad
			continue
		}
		if _cecef.Name.Local == "name" {
			_cfddc, _ddddf := _cecef.Value, error(nil)
			if _ddddf != nil {
				return _ddddf
			}
			_gagf.NameAttr = _cfddc
			continue
		}
		if _cecef.Name.Local == "colFirst" {
			_ceagd, _bddg := _dd.ParseInt(_cecef.Value, 10, 64)
			if _bddg != nil {
				return _bddg
			}
			_gagf.ColFirstAttr = &_ceagd
			continue
		}
		if _cecef.Name.Local == "colLast" {
			_fbgac, _feccb := _dd.ParseInt(_cecef.Value, 10, 64)
			if _feccb != nil {
				return _feccb
			}
			_gagf.ColLastAttr = &_fbgac
			continue
		}
		if _cecef.Name.Local == "displacedByCustomXml" {
			_gagf.DisplacedByCustomXmlAttr.UnmarshalXMLAttr(_cecef)
			continue
		}
		if _cecef.Name.Local == "id" {
			_bebbd, _adfcf := _dd.ParseInt(_cecef.Value, 10, 64)
			if _adfcf != nil {
				return _adfcf
			}
			_gagf.IdAttr = _bebbd
			continue
		}
	}
	for {
		_gdabd, _cbcd := d.Token()
		if _cbcd != nil {
			return _b.Errorf("parsing CT_MoveBookmark:\u0020\u0025s", _cbcd)
		}
		if _fgegc, _ddcca := _gdabd.(_d.EndElement); _ddcca && _fgegc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_EdnDocProps and its children, prefixing error messages with path
func (_babgd *CT_EdnDocProps) ValidateWithPath(path string) error {
	if _babgd.Pos != nil {
		if _gcac := _babgd.Pos.ValidateWithPath(path + "\u002fPos"); _gcac != nil {
			return _gcac
		}
	}
	if _babgd.NumFmt != nil {
		if _fced := _babgd.NumFmt.ValidateWithPath(path + "\u002fNumFmt"); _fced != nil {
			return _fced
		}
	}
	if _babgd.NumStart != nil {
		if _efbd := _babgd.NumStart.ValidateWithPath(path + "\u002fNumStart"); _efbd != nil {
			return _efbd
		}
	}
	if _babgd.NumRestart != nil {
		if _acfe := _babgd.NumRestart.ValidateWithPath(path + "/NumRestart"); _acfe != nil {
			return _acfe
		}
	}
	for _cgfba, _gcbaa := range _babgd.Endnote {
		if _cafb := _gcbaa.ValidateWithPath(_b.Sprintf("\u0025s\u002fEndnote\u005b\u0025d\u005d", path, _cgfba)); _cafb != nil {
			return _cafb
		}
	}
	return nil
}
func NewEG_RPr() *EG_RPr { _bfadcd := &EG_RPr{}; return _bfadcd }
func (_bbfbca *WdCT_WordprocessingShape) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Name = _d.Name{Local: "wp:wsp"}
	if _bbfbca.NormalEastAsianFlowAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "normalEastAsianFlow"}, Value: _b.Sprintf("\u0025d", _dagcc(*_bbfbca.NormalEastAsianFlowAttr))})
	}
	e.EncodeToken(start)
	if _bbfbca.CNvPr != nil {
		_cfefge := _d.StartElement{Name: _d.Name{Local: "wp:cNvPr"}}
		e.EncodeElement(_bbfbca.CNvPr, _cfefge)
	}
	_bbfbca.Choice.MarshalXML(e, _d.StartElement{})
	_cdaaga := _d.StartElement{Name: _d.Name{Local: "wp:spPr"}}
	e.EncodeElement(_bbfbca.SpPr, _cdaaga)
	if _bbfbca.Style != nil {
		_dggefg := _d.StartElement{Name: _d.Name{Local: "wp:style"}}
		e.EncodeElement(_bbfbca.Style, _dggefg)
	}
	if _bbfbca.ExtLst != nil {
		_fgeee := _d.StartElement{Name: _d.Name{Local: "wp:extLst"}}
		e.EncodeElement(_bbfbca.ExtLst, _fgeee)
	}
	if _bbfbca.WChoice != nil {
		_bbfbca.WChoice.MarshalXML(e, _d.StartElement{})
	}
	_gfeddd := _d.StartElement{Name: _d.Name{Local: "wp:bodyPr"}}
	e.EncodeElement(_bbfbca.BodyPr, _gfeddd)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the WdCT_WrapTopBottom and its children
func (_fbdbf *WdCT_WrapTopBottom) Validate() error {
	return _fbdbf.ValidateWithPath("WdCT_WrapTopBottom")
}

const (
	ST_MailMergeDocTypeUnset         ST_MailMergeDocType = 0
	ST_MailMergeDocTypeCatalog       ST_MailMergeDocType = 1
	ST_MailMergeDocTypeEnvelopes     ST_MailMergeDocType = 2
	ST_MailMergeDocTypeMailingLabels ST_MailMergeDocType = 3
	ST_MailMergeDocTypeFormLetters   ST_MailMergeDocType = 4
	ST_MailMergeDocTypeEmail         ST_MailMergeDocType = 5
	ST_MailMergeDocTypeFax           ST_MailMergeDocType = 6
)

func (_bbedge *WdCT_Anchor) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbedge.SimplePos = _eb.NewCT_Point2D()
	_bbedge.PositionH = NewWdCT_PosH()
	_bbedge.PositionV = NewWdCT_PosV()
	_bbedge.Extent = _eb.NewCT_PositiveSize2D()
	_bbedge.DocPr = _eb.NewCT_NonVisualDrawingProps()
	_bbedge.Graphic = _eb.NewGraphic()
	for _, _aceeef := range start.Attr {
		if _aceeef.Name.Local == "distT" {
			_fddcb, _egefgg := _dd.ParseUint(_aceeef.Value, 10, 32)
			if _egefgg != nil {
				return _egefgg
			}
			_fgfeff := uint32(_fddcb)
			_bbedge.DistTAttr = &_fgfeff
			continue
		}
		if _aceeef.Name.Local == "distL" {
			_adeecd, _gafdfc := _dd.ParseUint(_aceeef.Value, 10, 32)
			if _gafdfc != nil {
				return _gafdfc
			}
			_gffdgd := uint32(_adeecd)
			_bbedge.DistLAttr = &_gffdgd
			continue
		}
		if _aceeef.Name.Local == "simplePos" {
			_eaecgf, _fbaeg := _dd.ParseBool(_aceeef.Value)
			if _fbaeg != nil {
				return _fbaeg
			}
			_bbedge.SimplePosAttr = &_eaecgf
			continue
		}
		if _aceeef.Name.Local == "behindDoc" {
			_acffg, _bccdc := _dd.ParseBool(_aceeef.Value)
			if _bccdc != nil {
				return _bccdc
			}
			_bbedge.BehindDocAttr = _acffg
			continue
		}
		if _aceeef.Name.Local == "layoutInCell" {
			_fegac, _gdfed := _dd.ParseBool(_aceeef.Value)
			if _gdfed != nil {
				return _gdfed
			}
			_bbedge.LayoutInCellAttr = _fegac
			continue
		}
		if _aceeef.Name.Local == "hidden" {
			_bddaf, _bcbgdc := _dd.ParseBool(_aceeef.Value)
			if _bcbgdc != nil {
				return _bcbgdc
			}
			_bbedge.HiddenAttr = &_bddaf
			continue
		}
		if _aceeef.Name.Local == "distB" {
			_fadcb, _caabaa := _dd.ParseUint(_aceeef.Value, 10, 32)
			if _caabaa != nil {
				return _caabaa
			}
			_feeee := uint32(_fadcb)
			_bbedge.DistBAttr = &_feeee
			continue
		}
		if _aceeef.Name.Local == "distR" {
			_deafbb, _cfcage := _dd.ParseUint(_aceeef.Value, 10, 32)
			if _cfcage != nil {
				return _cfcage
			}
			_afdegb := uint32(_deafbb)
			_bbedge.DistRAttr = &_afdegb
			continue
		}
		if _aceeef.Name.Local == "relativeHeight" {
			_gecfac, _ffebdbg := _dd.ParseUint(_aceeef.Value, 10, 32)
			if _ffebdbg != nil {
				return _ffebdbg
			}
			_bbedge.RelativeHeightAttr = uint32(_gecfac)
			continue
		}
		if _aceeef.Name.Local == "locked" {
			_fcdab, _eebfa := _dd.ParseBool(_aceeef.Value)
			if _eebfa != nil {
				return _eebfa
			}
			_bbedge.LockedAttr = _fcdab
			continue
		}
		if _aceeef.Name.Local == "allowOverlap" {
			_fgffg, _bebfb := _dd.ParseBool(_aceeef.Value)
			if _bebfb != nil {
				return _bebfb
			}
			_bbedge.AllowOverlapAttr = _fgffg
			continue
		}
	}
_ecbfa:
	for {
		_fdacb, _facef := d.Token()
		if _facef != nil {
			return _facef
		}
		switch _gfcgag := _fdacb.(type) {
		case _d.StartElement:
			switch _gfcgag.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "simplePos"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "simplePos"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "simplePos"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "simplePos"}:
				if _ecadga := d.DecodeElement(_bbedge.SimplePos, &_gfcgag); _ecadga != nil {
					return _ecadga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "positionH"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "positionH"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "positionH"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "positionH"}:
				if _ceegf := d.DecodeElement(_bbedge.PositionH, &_gfcgag); _ceegf != nil {
					return _ceegf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "positionV"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "positionV"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "positionV"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "positionV"}:
				if _acaeg := d.DecodeElement(_bbedge.PositionV, &_gfcgag); _acaeg != nil {
					return _acaeg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extent"}:
				if _bbbfff := d.DecodeElement(_bbedge.Extent, &_gfcgag); _bbbfff != nil {
					return _bbbfff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effectExtent"}:
				_bbedge.EffectExtent = NewWdCT_EffectExtent()
				if _eabbd := d.DecodeElement(_bbedge.EffectExtent, &_gfcgag); _eabbd != nil {
					return _eabbd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapNone"}:
				_bbedge.Choice = NewWdEG_WrapTypeChoice()
				if _eebdc := d.DecodeElement(&_bbedge.Choice.WrapNone, &_gfcgag); _eebdc != nil {
					return _eebdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapSquare"}:
				_bbedge.Choice = NewWdEG_WrapTypeChoice()
				if _dcaab := d.DecodeElement(&_bbedge.Choice.WrapSquare, &_gfcgag); _dcaab != nil {
					return _dcaab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTight"}:
				_bbedge.Choice = NewWdEG_WrapTypeChoice()
				if _agccdg := d.DecodeElement(&_bbedge.Choice.WrapTight, &_gfcgag); _agccdg != nil {
					return _agccdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapThrough"}:
				_bbedge.Choice = NewWdEG_WrapTypeChoice()
				if _bcebf := d.DecodeElement(&_bbedge.Choice.WrapThrough, &_gfcgag); _bcebf != nil {
					return _bcebf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTopAndBottom"}:
				_bbedge.Choice = NewWdEG_WrapTypeChoice()
				if _cabcfd := d.DecodeElement(&_bbedge.Choice.WrapTopAndBottom, &_gfcgag); _cabcfd != nil {
					return _cabcfd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPr"}:
				if _feeec := d.DecodeElement(_bbedge.DocPr, &_gfcgag); _feeec != nil {
					return _feeec
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvGraphicFramePr"}:
				_bbedge.CNvGraphicFramePr = _eb.NewCT_NonVisualGraphicFrameProperties()
				if _egdfebb := d.DecodeElement(_bbedge.CNvGraphicFramePr, &_gfcgag); _egdfebb != nil {
					return _egdfebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain", Local: "graphic"}, _d.Name{Space: "http:/\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fmain", Local: "graphic"}:
				if _beddde := d.DecodeElement(_bbedge.Graphic, &_gfcgag); _beddde != nil {
					return _beddde
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdCT_Anchor\u0020\u0025v", _gfcgag.Name)
				if _eacff := d.Skip(); _eacff != nil {
					return _eacff
				}
			}
		case _d.EndElement:
			break _ecbfa
		case _d.CharData:
		}
	}
	return nil
}
func (_effae WdST_WrapText) String() string {
	switch _effae {
	case 0:
		return ""
	case 1:
		return "bothSides"
	case 2:
		return "left"
	case 3:
		return "right"
	case 4:
		return "largest"
	}
	return ""
}

type AG_Password struct {
	AlgorithmNameAttr *string
	HashValueAttr     *string
	SaltValueAttr     *string
	SpinCountAttr     *int64
}

func (_gabg *CT_FontFamily) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gabg.ValAttr = ST_FontFamily(1)
	for _, _fgdf := range start.Attr {
		if _fgdf.Name.Local == "val" {
			_gabg.ValAttr.UnmarshalXMLAttr(_fgdf)
			continue
		}
	}
	for {
		_affdc, _bagd := d.Token()
		if _bagd != nil {
			return _b.Errorf("parsing\u0020CT_FontFamily:\u0020\u0025s", _bagd)
		}
		if _gfcbf, _fbfc := _affdc.(_d.EndElement); _fbfc && _gfcbf.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Underline byte

func NewCT_OptimizeForBrowser() *CT_OptimizeForBrowser {
	_cadf := &CT_OptimizeForBrowser{}
	return _cadf
}

const (
	ST_DropCapUnset  ST_DropCap = 0
	ST_DropCapNone   ST_DropCap = 1
	ST_DropCapDrop   ST_DropCap = 2
	ST_DropCapMargin ST_DropCap = 3
)

func (_cdaee *CT_Spacing) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dfceae := range start.Attr {
		if _dfceae.Name.Local == "before" {
			_ebggf, _gdgab := ParseUnionST_TwipsMeasure(_dfceae.Value)
			if _gdgab != nil {
				return _gdgab
			}
			_cdaee.BeforeAttr = &_ebggf
			continue
		}
		if _dfceae.Name.Local == "beforeLines" {
			_gfgdcf, _efeade := _dd.ParseInt(_dfceae.Value, 10, 64)
			if _efeade != nil {
				return _efeade
			}
			_cdaee.BeforeLinesAttr = &_gfgdcf
			continue
		}
		if _dfceae.Name.Local == "beforeAutospacing" {
			_cfadaa, _dbfce := ParseUnionST_OnOff(_dfceae.Value)
			if _dbfce != nil {
				return _dbfce
			}
			_cdaee.BeforeAutospacingAttr = &_cfadaa
			continue
		}
		if _dfceae.Name.Local == "after" {
			_cdgeg, _eecdbc := ParseUnionST_TwipsMeasure(_dfceae.Value)
			if _eecdbc != nil {
				return _eecdbc
			}
			_cdaee.AfterAttr = &_cdgeg
			continue
		}
		if _dfceae.Name.Local == "afterLines" {
			_aaadga, _adfeag := _dd.ParseInt(_dfceae.Value, 10, 64)
			if _adfeag != nil {
				return _adfeag
			}
			_cdaee.AfterLinesAttr = &_aaadga
			continue
		}
		if _dfceae.Name.Local == "afterAutospacing" {
			_dbdga, _egfgdf := ParseUnionST_OnOff(_dfceae.Value)
			if _egfgdf != nil {
				return _egfgdf
			}
			_cdaee.AfterAutospacingAttr = &_dbdga
			continue
		}
		if _dfceae.Name.Local == "line" {
			_feccg, _dadfg := ParseUnionST_SignedTwipsMeasure(_dfceae.Value)
			if _dadfg != nil {
				return _dadfg
			}
			_cdaee.LineAttr = &_feccg
			continue
		}
		if _dfceae.Name.Local == "lineRule" {
			_cdaee.LineRuleAttr.UnmarshalXMLAttr(_dfceae)
			continue
		}
	}
	for {
		_cfagcgd, _gceac := d.Token()
		if _gceac != nil {
			return _b.Errorf("parsing\u0020CT_Spacing:\u0020%s", _gceac)
		}
		if _eaebgb, _ccecac := _cfagcgd.(_d.EndElement); _ccecac && _eaebgb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Div and its children
func (_caebe *CT_Div) Validate() error { return _caebe.ValidateWithPath("CT_Div") }

type CT_Zoom struct {

	// Zoom Type
	ValAttr ST_Zoom

	// Zoom Percentage
	PercentAttr ST_DecimalNumberOrPercent
}

func NewCT_SdtEndPr() *CT_SdtEndPr { _dffcb := &CT_SdtEndPr{}; return _dffcb }
func (_egdec *CT_MailMergeDataType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:val"}, Value: _b.Sprintf("\u0025v", _egdec.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bgdfc *CT_TextScale) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bdbgc := range start.Attr {
		if _bdbgc.Name.Local == "val" {
			_debbg, _decaf := ParseUnionST_TextScale(_bdbgc.Value)
			if _decaf != nil {
				return _decaf
			}
			_bgdfc.ValAttr = &_debbg
			continue
		}
	}
	for {
		_ccege, _afacgf := d.Token()
		if _afacgf != nil {
			return _b.Errorf("parsing\u0020CT_TextScale:\u0020\u0025s", _afacgf)
		}
		if _affff, _cecgd := _ccege.(_d.EndElement); _cecgd && _affff.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_SdtContentCell and its children
func (_bbaec *CT_SdtContentCell) Validate() error {
	return _bbaec.ValidateWithPath("CT_SdtContentCell")
}

type WdCT_TextboxInfo struct {
	IdAttr      *uint16
	TxbxContent *WdCT_TxbxContent
	ExtLst      *_eb.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_RecipientData and its children, prefixing error messages with path
func (_ddfa *CT_RecipientData) ValidateWithPath(path string) error {
	if _ddfa.Active != nil {
		if _abaeg := _ddfa.Active.ValidateWithPath(path + "\u002fActive"); _abaeg != nil {
			return _abaeg
		}
	}
	if _fdcag := _ddfa.Column.ValidateWithPath(path + "\u002fColumn"); _fdcag != nil {
		return _fdcag
	}
	if _faagbd := _ddfa.UniqueTag.ValidateWithPath(path + "\u002fUniqueTag"); _faagbd != nil {
		return _faagbd
	}
	return nil
}

type CT_Drawing struct {
	Anchor []*WdAnchor
	Inline []*WdInline
}

func init() {
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Empty", NewCT_Empty)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_OnOff", NewCT_OnOff)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_LongHexNumber", NewCT_LongHexNumber)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Charset", NewCT_Charset)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DecimalNumber", NewCT_DecimalNumber)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_UnsignedDecimalNumber", NewCT_UnsignedDecimalNumber)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DecimalNumberOrPrecent", NewCT_DecimalNumberOrPrecent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TwipsMeasure", NewCT_TwipsMeasure)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SignedTwipsMeasure", NewCT_SignedTwipsMeasure)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PixelsMeasure", NewCT_PixelsMeasure)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_HpsMeasure", NewCT_HpsMeasure)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SignedHpsMeasure", NewCT_SignedHpsMeasure)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MacroName", NewCT_MacroName)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_String", NewCT_String)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TextScale", NewCT_TextScale)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Highlight", NewCT_Highlight)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Color", NewCT_Color)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Lang", NewCT_Lang)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Guid", NewCT_Guid)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Underline", NewCT_Underline)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TextEffect", NewCT_TextEffect)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Border", NewCT_Border)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Shd", NewCT_Shd)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_VerticalAlignRun", NewCT_VerticalAlignRun)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FitText", NewCT_FitText)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Em", NewCT_Em)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Language", NewCT_Language)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_EastAsianLayout", NewCT_EastAsianLayout)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FramePr", NewCT_FramePr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TabStop", NewCT_TabStop)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Spacing", NewCT_Spacing)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Ind", NewCT_Ind)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Jc", NewCT_Jc)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_JcTable", NewCT_JcTable)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_View", NewCT_View)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Zoom", NewCT_Zoom)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_WritingStyle", NewCT_WritingStyle)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Proof", NewCT_Proof)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocType", NewCT_DocType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocProtect", NewCT_DocProtect)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MailMergeDocType", NewCT_MailMergeDocType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MailMergeDataType", NewCT_MailMergeDataType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MailMergeDest", NewCT_MailMergeDest)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MailMergeOdsoFMDFieldType", NewCT_MailMergeOdsoFMDFieldType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TrackChangesView", NewCT_TrackChangesView)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Kinsoku", NewCT_Kinsoku)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TextDirection", NewCT_TextDirection)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TextAlignment", NewCT_TextAlignment)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Markup", NewCT_Markup)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TrackChange", NewCT_TrackChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CellMergeTrackChange", NewCT_CellMergeTrackChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TrackChangeRange", NewCT_TrackChangeRange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MarkupRange", NewCT_MarkupRange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_BookmarkRange", NewCT_BookmarkRange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Bookmark", NewCT_Bookmark)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MoveBookmark", NewCT_MoveBookmark)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Comment", NewCT_Comment)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TrackChangeNumbering", NewCT_TrackChangeNumbering)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblPrExChange", NewCT_TblPrExChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TcPrChange", NewCT_TcPrChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TrPrChange", NewCT_TrPrChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblGridChange", NewCT_TblGridChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblPrChange", NewCT_TblPrChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SectPrChange", NewCT_SectPrChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PPrChange", NewCT_PPrChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RPrChange", NewCT_RPrChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ParaRPrChange", NewCT_ParaRPrChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RunTrackChange", NewCT_RunTrackChange)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_NumPr", NewCT_NumPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PBdr", NewCT_PBdr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Tabs", NewCT_Tabs)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TextboxTightWrap", NewCT_TextboxTightWrap)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PPr", NewCT_PPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PPrBase", NewCT_PPrBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PPrGeneral", NewCT_PPrGeneral)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Control", NewCT_Control)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Background", NewCT_Background)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Rel", NewCT_Rel)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Object", NewCT_Object)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Picture", NewCT_Picture)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ObjectEmbed", NewCT_ObjectEmbed)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ObjectLink", NewCT_ObjectLink)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Drawing", NewCT_Drawing)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SimpleField", NewCT_SimpleField)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFTextType", NewCT_FFTextType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFName", NewCT_FFName)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FldChar", NewCT_FldChar)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Hyperlink", NewCT_Hyperlink)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFData", NewCT_FFData)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFHelpText", NewCT_FFHelpText)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFStatusText", NewCT_FFStatusText)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFCheckBox", NewCT_FFCheckBox)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFDDList", NewCT_FFDDList)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FFTextInput", NewCT_FFTextInput)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SectType", NewCT_SectType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PaperSource", NewCT_PaperSource)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PageSz", NewCT_PageSz)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PageMar", NewCT_PageMar)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PageBorders", NewCT_PageBorders)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PageBorder", NewCT_PageBorder)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_BottomPageBorder", NewCT_BottomPageBorder)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TopPageBorder", NewCT_TopPageBorder)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_LineNumber", NewCT_LineNumber)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PageNumber", NewCT_PageNumber)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Column", NewCT_Column)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Columns", NewCT_Columns)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_VerticalJc", NewCT_VerticalJc)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocGrid", NewCT_DocGrid)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_HdrFtrRef", NewCT_HdrFtrRef)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_HdrFtr", NewCT_HdrFtr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SectPrBase", NewCT_SectPrBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SectPr", NewCT_SectPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Br", NewCT_Br)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PTab", NewCT_PTab)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Sym", NewCT_Sym)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ProofErr", NewCT_ProofErr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Perm", NewCT_Perm)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PermStart", NewCT_PermStart)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Text", NewCT_Text)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_R", NewCT_R)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Fonts", NewCT_Fonts)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RPr", NewCT_RPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MathCtrlIns", NewCT_MathCtrlIns)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MathCtrlDel", NewCT_MathCtrlDel)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RPrOriginal", NewCT_RPrOriginal)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ParaRPrOriginal", NewCT_ParaRPrOriginal)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ParaRPr", NewCT_ParaRPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_AltChunk", NewCT_AltChunk)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_AltChunkPr", NewCT_AltChunkPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RubyAlign", NewCT_RubyAlign)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RubyPr", NewCT_RubyPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RubyContent", NewCT_RubyContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Ruby", NewCT_Ruby)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Lock", NewCT_Lock)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtListItem", NewCT_SdtListItem)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtDateMappingType", NewCT_SdtDateMappingType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CalendarType", NewCT_CalendarType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtDate", NewCT_SdtDate)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtComboBox", NewCT_SdtComboBox)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtDocPart", NewCT_SdtDocPart)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtDropDownList", NewCT_SdtDropDownList)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Placeholder", NewCT_Placeholder)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtText", NewCT_SdtText)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DataBinding", NewCT_DataBinding)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtPr", NewCT_SdtPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtEndPr", NewCT_SdtEndPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DirContentRun", NewCT_DirContentRun)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_BdoContentRun", NewCT_BdoContentRun)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtContentRun", NewCT_SdtContentRun)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtContentBlock", NewCT_SdtContentBlock)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtContentRow", NewCT_SdtContentRow)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtContentCell", NewCT_SdtContentCell)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtBlock", NewCT_SdtBlock)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtRun", NewCT_SdtRun)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtCell", NewCT_SdtCell)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SdtRow", NewCT_SdtRow)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Attr", NewCT_Attr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CustomXmlRun", NewCT_CustomXmlRun)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SmartTagRun", NewCT_SmartTagRun)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CustomXmlBlock", NewCT_CustomXmlBlock)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CustomXmlPr", NewCT_CustomXmlPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CustomXmlRow", NewCT_CustomXmlRow)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CustomXmlCell", NewCT_CustomXmlCell)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SmartTagPr", NewCT_SmartTagPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_P", NewCT_P)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Height", NewCT_Height)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblWidth", NewCT_TblWidth)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblGridCol", NewCT_TblGridCol)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblGridBase", NewCT_TblGridBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblGrid", NewCT_TblGrid)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TcBorders", NewCT_TcBorders)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TcMar", NewCT_TcMar)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_VMerge", NewCT_VMerge)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_HMerge", NewCT_HMerge)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TcPrBase", NewCT_TcPrBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TcPr", NewCT_TcPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TcPrInner", NewCT_TcPrInner)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Tc", NewCT_Tc)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Cnf", NewCT_Cnf)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Headers", NewCT_Headers)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TrPrBase", NewCT_TrPrBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TrPr", NewCT_TrPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Row", NewCT_Row)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblLayoutType", NewCT_TblLayoutType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblOverlap", NewCT_TblOverlap)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblPPr", NewCT_TblPPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblCellMar", NewCT_TblCellMar)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblBorders", NewCT_TblBorders)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblPrBase", NewCT_TblPrBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblPr", NewCT_TblPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblPrExBase", NewCT_TblPrExBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblPrEx", NewCT_TblPrEx)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Tbl", NewCT_Tbl)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblLook", NewCT_TblLook)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FtnPos", NewCT_FtnPos)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_EdnPos", NewCT_EdnPos)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_NumFmt", NewCT_NumFmt)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_NumRestart", NewCT_NumRestart)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FtnEdnRef", NewCT_FtnEdnRef)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FtnEdnSepRef", NewCT_FtnEdnSepRef)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FtnEdn", NewCT_FtnEdn)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FtnProps", NewCT_FtnProps)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_EdnProps", NewCT_EdnProps)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FtnDocProps", NewCT_FtnDocProps)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_EdnDocProps", NewCT_EdnDocProps)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RecipientData", NewCT_RecipientData)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Base64Binary", NewCT_Base64Binary)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Recipients", NewCT_Recipients)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_OdsoFieldMapData", NewCT_OdsoFieldMapData)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MailMergeSourceType", NewCT_MailMergeSourceType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Odso", NewCT_Odso)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MailMerge", NewCT_MailMerge)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TargetScreenSz", NewCT_TargetScreenSz)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Compat", NewCT_Compat)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CompatSetting", NewCT_CompatSetting)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocVar", NewCT_DocVar)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocVars", NewCT_DocVars)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocRsids", NewCT_DocRsids)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_CharacterSpacing", NewCT_CharacterSpacing)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SaveThroughXslt", NewCT_SaveThroughXslt)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_RPrDefault", NewCT_RPrDefault)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_PPrDefault", NewCT_PPrDefault)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocDefaults", NewCT_DocDefaults)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ColorSchemeMapping", NewCT_ColorSchemeMapping)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ReadingModeInkLockDown", NewCT_ReadingModeInkLockDown)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_WriteProtection", NewCT_WriteProtection)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Settings", NewCT_Settings)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_StyleSort", NewCT_StyleSort)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_StylePaneFilter", NewCT_StylePaneFilter)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_WebSettings", NewCT_WebSettings)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FrameScrollbar", NewCT_FrameScrollbar)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_OptimizeForBrowser", NewCT_OptimizeForBrowser)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Frame", NewCT_Frame)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FrameLayout", NewCT_FrameLayout)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FramesetSplitbar", NewCT_FramesetSplitbar)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Frameset", NewCT_Frameset)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_NumPicBullet", NewCT_NumPicBullet)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_LevelSuffix", NewCT_LevelSuffix)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_LevelText", NewCT_LevelText)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_LvlLegacy", NewCT_LvlLegacy)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Lvl", NewCT_Lvl)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_MultiLevelType", NewCT_MultiLevelType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_AbstractNum", NewCT_AbstractNum)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_NumLvl", NewCT_NumLvl)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Num", NewCT_Num)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Numbering", NewCT_Numbering)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TblStylePr", NewCT_TblStylePr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Style", NewCT_Style)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_LsdException", NewCT_LsdException)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_LatentStyles", NewCT_LatentStyles)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Styles", NewCT_Styles)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Panose", NewCT_Panose)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FontFamily", NewCT_FontFamily)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Pitch", NewCT_Pitch)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FontSig", NewCT_FontSig)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FontRel", NewCT_FontRel)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Font", NewCT_Font)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_FontsList", NewCT_FontsList)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DivBdr", NewCT_DivBdr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Div", NewCT_Div)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Divs", NewCT_Divs)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_TxbxContent", NewCT_TxbxContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Body", NewCT_Body)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_ShapeDefaults", NewCT_ShapeDefaults)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Comments", NewCT_Comments)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Footnotes", NewCT_Footnotes)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Endnotes", NewCT_Endnotes)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_SmartTagType", NewCT_SmartTagType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartBehavior", NewCT_DocPartBehavior)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartBehaviors", NewCT_DocPartBehaviors)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartType", NewCT_DocPartType)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartTypes", NewCT_DocPartTypes)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartGallery", NewCT_DocPartGallery)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartCategory", NewCT_DocPartCategory)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartName", NewCT_DocPartName)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPartPr", NewCT_DocPartPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocPart", NewCT_DocPart)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocParts", NewCT_DocParts)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Caption", NewCT_Caption)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_AutoCaption", NewCT_AutoCaption)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_AutoCaptions", NewCT_AutoCaptions)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Captions", NewCT_Captions)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_DocumentBase", NewCT_DocumentBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_Document", NewCT_Document)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "CT_GlossaryDocument", NewCT_GlossaryDocument)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "recipients", NewRecipients)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "txbxContent", NewTxbxContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "comments", NewComments)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "footnotes", NewFootnotes)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "endnotes", NewEndnotes)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "hdr", NewHdr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "ftr", NewFtr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "settings", NewSettings)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "webSettings", NewWebSettings)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "fonts", NewFonts)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "numbering", NewNumbering)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "styles", NewStyles)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "document", NewDocument)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "glossaryDocument", NewGlossaryDocument)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_PContentMath", NewEG_PContentMath)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_PContentBase", NewEG_PContentBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_ContentRunContentBase", NewEG_ContentRunContentBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_CellMarkupElements", NewEG_CellMarkupElements)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RangeMarkupElements", NewEG_RangeMarkupElements)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_HdrFtrReferences", NewEG_HdrFtrReferences)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_SectPrContents", NewEG_SectPrContents)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RunInnerContent", NewEG_RunInnerContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RPrBase", NewEG_RPrBase)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RPrContent", NewEG_RPrContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RPr", NewEG_RPr)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RPrMath", NewEG_RPrMath)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_ParaRPrTrackChanges", NewEG_ParaRPrTrackChanges)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RubyContent", NewEG_RubyContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_ContentRunContent", NewEG_ContentRunContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_ContentBlockContent", NewEG_ContentBlockContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_ContentRowContent", NewEG_ContentRowContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_ContentCellContent", NewEG_ContentCellContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_PContent", NewEG_PContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_FtnEdnNumProps", NewEG_FtnEdnNumProps)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_MathContent", NewEG_MathContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_BlockLevelChunkElts", NewEG_BlockLevelChunkElts)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_BlockLevelElts", NewEG_BlockLevelElts)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "EG_RunLevelElts", NewEG_RunLevelElts)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "AG_Password", NewAG_Password)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "AG_TransitionalPassword", NewAG_TransitionalPassword)
	_ga.RegisterConstructor("http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", "AG_SectPrAttributes", NewAG_SectPrAttributes)
	_ga.RegisterConstructor("http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", "wsp", NewWdWsp)
}
func (_gade *CT_PTab) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_acbg, _bbdac := _gade.AlignmentAttr.MarshalXMLAttr(_d.Name{Local: "w:alignment"})
	if _bbdac != nil {
		return _bbdac
	}
	start.Attr = append(start.Attr, _acbg)
	_acbg, _bbdac = _gade.RelativeToAttr.MarshalXMLAttr(_d.Name{Local: "w:relativeTo"})
	if _bbdac != nil {
		return _bbdac
	}
	start.Attr = append(start.Attr, _acbg)
	_acbg, _bbdac = _gade.LeaderAttr.MarshalXMLAttr(_d.Name{Local: "w:leader"})
	if _bbdac != nil {
		return _bbdac
	}
	start.Attr = append(start.Attr, _acbg)
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_MathCtrlDel and its children, prefixing error messages with path
func (_aefgc *CT_MathCtrlDel) ValidateWithPath(path string) error { return nil }

type CT_TblGrid struct {

	// Grid Column Definition
	GridCol       []*CT_TblGridCol
	TblGridChange *CT_TblGridChange
}

func NewCT_SdtBlock() *CT_SdtBlock { _adgcf := &CT_SdtBlock{}; return _adgcf }
func (_fccdb *WdCT_WordprocessingCanvas) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fccdb.Bg != nil {
		_cdfga := _d.StartElement{Name: _d.Name{Local: "wp:bg"}}
		e.EncodeElement(_fccdb.Bg, _cdfga)
	}
	if _fccdb.Whole != nil {
		_ccdcb := _d.StartElement{Name: _d.Name{Local: "wp:whole"}}
		e.EncodeElement(_fccdb.Whole, _ccdcb)
	}
	if _fccdb.Choice != nil {
		for _, _baddf := range _fccdb.Choice {
			_baddf.MarshalXML(e, _d.StartElement{})
		}
	}
	if _fccdb.ExtLst != nil {
		_ccffe := _d.StartElement{Name: _d.Name{Local: "wp:extLst"}}
		e.EncodeElement(_fccdb.ExtLst, _ccffe)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_PageBorders() *CT_PageBorders { _gbbbb := &CT_PageBorders{}; return _gbbbb }
func (_dcdffd *WdAnchor) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dcdffd.WdCT_Anchor = *NewWdCT_Anchor()
	for _, _daaebea := range start.Attr {
		if _daaebea.Name.Local == "distT" {
			_agagg, _gbfcb := _dd.ParseUint(_daaebea.Value, 10, 32)
			if _gbfcb != nil {
				return _gbfcb
			}
			_faabg := uint32(_agagg)
			_dcdffd.DistTAttr = &_faabg
			continue
		}
		if _daaebea.Name.Local == "distL" {
			_bbdacg, _gfbgc := _dd.ParseUint(_daaebea.Value, 10, 32)
			if _gfbgc != nil {
				return _gfbgc
			}
			_gbgfd := uint32(_bbdacg)
			_dcdffd.DistLAttr = &_gbgfd
			continue
		}
		if _daaebea.Name.Local == "simplePos" {
			_gaedce, _bbbbb := _dd.ParseBool(_daaebea.Value)
			if _bbbbb != nil {
				return _bbbbb
			}
			_dcdffd.SimplePosAttr = &_gaedce
			continue
		}
		if _daaebea.Name.Local == "behindDoc" {
			_abeee, _gacgcd := _dd.ParseBool(_daaebea.Value)
			if _gacgcd != nil {
				return _gacgcd
			}
			_dcdffd.BehindDocAttr = _abeee
			continue
		}
		if _daaebea.Name.Local == "layoutInCell" {
			_cfeaa, _dgdffd := _dd.ParseBool(_daaebea.Value)
			if _dgdffd != nil {
				return _dgdffd
			}
			_dcdffd.LayoutInCellAttr = _cfeaa
			continue
		}
		if _daaebea.Name.Local == "hidden" {
			_ffedg, _eeaaec := _dd.ParseBool(_daaebea.Value)
			if _eeaaec != nil {
				return _eeaaec
			}
			_dcdffd.HiddenAttr = &_ffedg
			continue
		}
		if _daaebea.Name.Local == "distB" {
			_gbdacc, _ddcecf := _dd.ParseUint(_daaebea.Value, 10, 32)
			if _ddcecf != nil {
				return _ddcecf
			}
			_cdcfcg := uint32(_gbdacc)
			_dcdffd.DistBAttr = &_cdcfcg
			continue
		}
		if _daaebea.Name.Local == "distR" {
			_cadcaa, _ecebcf := _dd.ParseUint(_daaebea.Value, 10, 32)
			if _ecebcf != nil {
				return _ecebcf
			}
			_aceee := uint32(_cadcaa)
			_dcdffd.DistRAttr = &_aceee
			continue
		}
		if _daaebea.Name.Local == "relativeHeight" {
			_bbebca, _dcbdg := _dd.ParseUint(_daaebea.Value, 10, 32)
			if _dcbdg != nil {
				return _dcbdg
			}
			_dcdffd.RelativeHeightAttr = uint32(_bbebca)
			continue
		}
		if _daaebea.Name.Local == "locked" {
			_cedegc, _ebegbg := _dd.ParseBool(_daaebea.Value)
			if _ebegbg != nil {
				return _ebegbg
			}
			_dcdffd.LockedAttr = _cedegc
			continue
		}
		if _daaebea.Name.Local == "allowOverlap" {
			_faaaf, _agbcd := _dd.ParseBool(_daaebea.Value)
			if _agbcd != nil {
				return _agbcd
			}
			_dcdffd.AllowOverlapAttr = _faaaf
			continue
		}
	}
_cageff:
	for {
		_cddeff, _cgagff := d.Token()
		if _cgagff != nil {
			return _cgagff
		}
		switch _ceaec := _cddeff.(type) {
		case _d.StartElement:
			switch _ceaec.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "simplePos"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "simplePos"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "simplePos"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "simplePos"}:
				if _dcgcb := d.DecodeElement(_dcdffd.SimplePos, &_ceaec); _dcgcb != nil {
					return _dcgcb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "positionH"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "positionH"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "positionH"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "positionH"}:
				if _bdddd := d.DecodeElement(_dcdffd.PositionH, &_ceaec); _bdddd != nil {
					return _bdddd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "positionV"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "positionV"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "positionV"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "positionV"}:
				if _adbcab := d.DecodeElement(_dcdffd.PositionV, &_ceaec); _adbcab != nil {
					return _adbcab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "extent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "extent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "extent"}:
				if _ggadca := d.DecodeElement(_dcdffd.Extent, &_ceaec); _ggadca != nil {
					return _ggadca
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "effectExtent"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "effectExtent"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "effectExtent"}:
				_dcdffd.EffectExtent = NewWdCT_EffectExtent()
				if _bacegd := d.DecodeElement(_dcdffd.EffectExtent, &_ceaec); _bacegd != nil {
					return _bacegd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapNone"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapNone"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapNone"}:
				_dcdffd.Choice = NewWdEG_WrapTypeChoice()
				if _bcaeea := d.DecodeElement(&_dcdffd.Choice.WrapNone, &_ceaec); _bcaeea != nil {
					return _bcaeea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapSquare"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapSquare"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapSquare"}:
				_dcdffd.Choice = NewWdEG_WrapTypeChoice()
				if _ddegbb := d.DecodeElement(&_dcdffd.Choice.WrapSquare, &_ceaec); _ddegbb != nil {
					return _ddegbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTight"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTight"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTight"}:
				_dcdffd.Choice = NewWdEG_WrapTypeChoice()
				if _decdd := d.DecodeElement(&_dcdffd.Choice.WrapTight, &_ceaec); _decdd != nil {
					return _decdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapThrough"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapThrough"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapThrough"}:
				_dcdffd.Choice = NewWdEG_WrapTypeChoice()
				if _cgged := d.DecodeElement(&_dcdffd.Choice.WrapThrough, &_ceaec); _cgged != nil {
					return _cgged
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "wrapTopAndBottom"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "wrapTopAndBottom"}:
				_dcdffd.Choice = NewWdEG_WrapTypeChoice()
				if _fbbbdd := d.DecodeElement(&_dcdffd.Choice.WrapTopAndBottom, &_ceaec); _fbbbdd != nil {
					return _fbbbdd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "docPr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "docPr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docPr"}:
				if _eeaaba := d.DecodeElement(_dcdffd.DocPr, &_ceaec); _eeaaba != nil {
					return _eeaaba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fdrawingml\u002fwordprocessingDrawing", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", Local: "cNvGraphicFramePr"}, _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "cNvGraphicFramePr"}:
				_dcdffd.CNvGraphicFramePr = _eb.NewCT_NonVisualGraphicFrameProperties()
				if _cafcfdc := d.DecodeElement(_dcdffd.CNvGraphicFramePr, &_ceaec); _cafcfdc != nil {
					return _cafcfdc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain", Local: "graphic"}, _d.Name{Space: "http:/\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fdrawingml\u002fmain", Local: "graphic"}:
				if _ecddf := d.DecodeElement(_dcdffd.Graphic, &_ceaec); _ecddf != nil {
					return _ecddf
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020WdAnchor\u0020\u0025v", _ceaec.Name)
				if _gddff := d.Skip(); _gddff != nil {
					return _gddff
				}
			}
		case _d.EndElement:
			break _cageff
		case _d.CharData:
		}
	}
	return nil
}
func (_agdgc *CT_Picture) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_bbfcdg:
	for {
		_ebebe, _efcad := d.Token()
		if _efcad != nil {
			return _efcad
		}
		switch _cgefa := _ebebe.(type) {
		case _d.StartElement:
			switch _cgefa.Name {
			default:
				if _edbed, _begbb := _ga.CreateElement(_cgefa); _begbb != nil {
					return _begbb
				} else {
					if _cdgad := d.DecodeElement(_edbed, &_cgefa); _cdgad != nil {
						return _cdgad
					}
					_agdgc.Any = append(_agdgc.Any, _edbed)
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "movie"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "movie"}:
				_agdgc.Movie = NewCT_Rel()
				if _acgdg := d.DecodeElement(_agdgc.Movie, &_cgefa); _acgdg != nil {
					return _acgdg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "control"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "control"}:
				_agdgc.Control = NewCT_Control()
				if _eadba := d.DecodeElement(_agdgc.Control, &_cgefa); _eadba != nil {
					return _eadba
				}
			}
		case _d.EndElement:
			break _bbfcdg
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_FFStatusText and its children
func (_ebegb *CT_FFStatusText) Validate() error { return _ebegb.ValidateWithPath("CT_FFStatusText") }

// Validate validates the CT_Proof and its children
func (_bcefb *CT_Proof) Validate() error { return _bcefb.ValidateWithPath("CT_Proof") }

const (
	ST_InfoTextTypeUnset    ST_InfoTextType = 0
	ST_InfoTextTypeText     ST_InfoTextType = 1
	ST_InfoTextTypeAutoText ST_InfoTextType = 2
)
const (
	ST_HighlightColorUnset       ST_HighlightColor = 0
	ST_HighlightColorBlack       ST_HighlightColor = 1
	ST_HighlightColorBlue        ST_HighlightColor = 2
	ST_HighlightColorCyan        ST_HighlightColor = 3
	ST_HighlightColorGreen       ST_HighlightColor = 4
	ST_HighlightColorMagenta     ST_HighlightColor = 5
	ST_HighlightColorRed         ST_HighlightColor = 6
	ST_HighlightColorYellow      ST_HighlightColor = 7
	ST_HighlightColorWhite       ST_HighlightColor = 8
	ST_HighlightColorDarkBlue    ST_HighlightColor = 9
	ST_HighlightColorDarkCyan    ST_HighlightColor = 10
	ST_HighlightColorDarkGreen   ST_HighlightColor = 11
	ST_HighlightColorDarkMagenta ST_HighlightColor = 12
	ST_HighlightColorDarkRed     ST_HighlightColor = 13
	ST_HighlightColorDarkYellow  ST_HighlightColor = 14
	ST_HighlightColorDarkGray    ST_HighlightColor = 15
	ST_HighlightColorLightGray   ST_HighlightColor = 16
	ST_HighlightColorNone        ST_HighlightColor = 17
)

func (_eefad ST_RubyAlign) ValidateWithPath(path string) error {
	switch _eefad {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s:\u0020out\u0020of\u0020range value\u0020\u0025d", path, int(_eefad))
	}
	return nil
}
func (_cgfdaf *WdCT_WrapTopBottom) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cgfdaf.DistTAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distT"}, Value: _b.Sprintf("\u0025v", *_cgfdaf.DistTAttr)})
	}
	if _cgfdaf.DistBAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "distB"}, Value: _b.Sprintf("\u0025v", *_cgfdaf.DistBAttr)})
	}
	e.EncodeToken(start)
	if _cgfdaf.EffectExtent != nil {
		_agfad := _d.StartElement{Name: _d.Name{Local: "wp:effectExtent"}}
		e.EncodeElement(_cgfdaf.EffectExtent, _agfad)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bdcac *CT_Styles) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cdeba:
	for {
		_ggeeb, _adagc := d.Token()
		if _adagc != nil {
			return _adagc
		}
		switch _dbfad := _ggeeb.(type) {
		case _d.StartElement:
			switch _dbfad.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "docDefaults"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "docDefaults"}:
				_bdcac.DocDefaults = NewCT_DocDefaults()
				if _bfgega := d.DecodeElement(_bdcac.DocDefaults, &_dbfad); _bfgega != nil {
					return _bfgega
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "latentStyles"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "latentStyles"}:
				_bdcac.LatentStyles = NewCT_LatentStyles()
				if _fabdee := d.DecodeElement(_bdcac.LatentStyles, &_dbfad); _fabdee != nil {
					return _fabdee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "style"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "style"}:
				_becbe := NewCT_Style()
				if _agffd := d.DecodeElement(_becbe, &_dbfad); _agffd != nil {
					return _agffd
				}
				_bdcac.Style = append(_bdcac.Style, _becbe)
			default:
				_ga.Log("skipping\u0020unsupported\u0020element on CT_Styles \u0025v", _dbfad.Name)
				if _efdda := d.Skip(); _efdda != nil {
					return _efdda
				}
			}
		case _d.EndElement:
			break _cdeba
		case _d.CharData:
		}
	}
	return nil
}
func (_fddacb *ST_Proof) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eefec, _gfbcbd := d.Token()
	if _gfbcbd != nil {
		return _gfbcbd
	}
	if _bagba, _cdaggb := _eefec.(_d.EndElement); _cdaggb && _bagba.Name == start.Name {
		*_fddacb = 1
		return nil
	}
	if _edaaa, _bdfgga := _eefec.(_d.CharData); !_bdfgga {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _eefec)
	} else {
		switch string(_edaaa) {
		case "":
			*_fddacb = 0
		case "clean":
			*_fddacb = 1
		case "dirty":
			*_fddacb = 2
		}
	}
	_eefec, _gfbcbd = d.Token()
	if _gfbcbd != nil {
		return _gfbcbd
	}
	if _cfgccb, _afegda := _eefec.(_d.EndElement); _afegda && _cfgccb.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _eefec)
}

const (
	ST_JcTableUnset  ST_JcTable = 0
	ST_JcTableCenter ST_JcTable = 1
	ST_JcTableEnd    ST_JcTable = 2
	ST_JcTableLeft   ST_JcTable = 3
	ST_JcTableRight  ST_JcTable = 4
	ST_JcTableStart  ST_JcTable = 5
)

func (_eedddg ST_WmlColorSchemeIndex) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_aebecc := _d.Attr{}
	_aebecc.Name = name
	switch _eedddg {
	case ST_WmlColorSchemeIndexUnset:
		_aebecc.Value = ""
	case ST_WmlColorSchemeIndexDark1:
		_aebecc.Value = "dark1"
	case ST_WmlColorSchemeIndexLight1:
		_aebecc.Value = "light1"
	case ST_WmlColorSchemeIndexDark2:
		_aebecc.Value = "dark2"
	case ST_WmlColorSchemeIndexLight2:
		_aebecc.Value = "light2"
	case ST_WmlColorSchemeIndexAccent1:
		_aebecc.Value = "accent1"
	case ST_WmlColorSchemeIndexAccent2:
		_aebecc.Value = "accent2"
	case ST_WmlColorSchemeIndexAccent3:
		_aebecc.Value = "accent3"
	case ST_WmlColorSchemeIndexAccent4:
		_aebecc.Value = "accent4"
	case ST_WmlColorSchemeIndexAccent5:
		_aebecc.Value = "accent5"
	case ST_WmlColorSchemeIndexAccent6:
		_aebecc.Value = "accent6"
	case ST_WmlColorSchemeIndexHyperlink:
		_aebecc.Value = "hyperlink"
	case ST_WmlColorSchemeIndexFollowedHyperlink:
		_aebecc.Value = "followedHyperlink"
	}
	return _aebecc, nil
}

// ValidateWithPath validates the CT_CustomXmlRun and its children, prefixing error messages with path
func (_bcdfb *CT_CustomXmlRun) ValidateWithPath(path string) error {
	if _bcdfb.CustomXmlPr != nil {
		if _dgab := _bcdfb.CustomXmlPr.ValidateWithPath(path + "\u002fCustomXmlPr"); _dgab != nil {
			return _dgab
		}
	}
	for _bgdb, _eebc := range _bcdfb.EG_PContent {
		if _fedea := _eebc.ValidateWithPath(_b.Sprintf("\u0025s\u002fEG_PContent\u005b\u0025d\u005d", path, _bgdb)); _fedea != nil {
			return _fedea
		}
	}
	return nil
}
func (_edgdb ST_Wrap) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_edgdb.String(), start)
}
func (_dcace ST_Shd) Validate() error { return _dcace.ValidateWithPath("") }
func NewCT_Highlight() *CT_Highlight {
	_cccef := &CT_Highlight{}
	_cccef.ValAttr = ST_HighlightColor(1)
	return _cccef
}
func (_baadbc *CT_View) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_baadbc.ValAttr = ST_View(1)
	for _, _aeaed := range start.Attr {
		if _aeaed.Name.Local == "val" {
			_baadbc.ValAttr.UnmarshalXMLAttr(_aeaed)
			continue
		}
	}
	for {
		_gacddd, _ffgccb := d.Token()
		if _ffgccb != nil {
			return _b.Errorf("parsing\u0020CT_View:\u0020\u0025s", _ffgccb)
		}
		if _accfcg, _eedbfaa := _gacddd.(_d.EndElement); _eedbfaa && _accfcg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_feafg *CT_DocPartGallery) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_feafg.ValAttr = ST_DocPartGallery(1)
	for _, _cebag := range start.Attr {
		if _cebag.Name.Local == "val" {
			_feafg.ValAttr.UnmarshalXMLAttr(_cebag)
			continue
		}
	}
	for {
		_ecgb, _bgga := d.Token()
		if _bgga != nil {
			return _b.Errorf("parsing\u0020CT_DocPartGallery: \u0025s", _bgga)
		}
		if _fbbbf, _bbbc := _ecgb.(_d.EndElement); _bbbc && _fbbbf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_HdrFtr struct {

	// Anchor for Imported External Content
	AltChunk               []*CT_AltChunk
	EG_ContentBlockContent []*EG_ContentBlockContent
}

func NewCT_CustomXmlRun() *CT_CustomXmlRun       { _gdab := &CT_CustomXmlRun{}; return _gdab }
func (_geafc ST_PTabRelativeTo) Validate() error { return _geafc.ValidateWithPath("") }

// Validate validates the CT_Num and its children
func (_cbada *CT_Num) Validate() error { return _cbada.ValidateWithPath("CT_Num") }
func (_feeg *CT_Font) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dabbg := range start.Attr {
		if _dabbg.Name.Local == "name" {
			_fceg, _eacdg := _dabbg.Value, error(nil)
			if _eacdg != nil {
				return _eacdg
			}
			_feeg.NameAttr = _fceg
			continue
		}
	}
_bacac:
	for {
		_adffc, _caegc := d.Token()
		if _caegc != nil {
			return _caegc
		}
		switch _dgeca := _adffc.(type) {
		case _d.StartElement:
			switch _dgeca.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "altName"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "altName"}:
				_feeg.AltName = NewCT_String()
				if _bcgg := d.DecodeElement(_feeg.AltName, &_dgeca); _bcgg != nil {
					return _bcgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "panose1"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "panose1"}:
				_feeg.Panose1 = NewCT_Panose()
				if _ddfc := d.DecodeElement(_feeg.Panose1, &_dgeca); _ddfc != nil {
					return _ddfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "charset"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "charset"}:
				_feeg.Charset = NewCT_Charset()
				if _fabfa := d.DecodeElement(_feeg.Charset, &_dgeca); _fabfa != nil {
					return _fabfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "family"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "family"}:
				_feeg.Family = NewCT_FontFamily()
				if _eaef := d.DecodeElement(_feeg.Family, &_dgeca); _eaef != nil {
					return _eaef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "notTrueType"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "notTrueType"}:
				_feeg.NotTrueType = NewCT_OnOff()
				if _fbaeb := d.DecodeElement(_feeg.NotTrueType, &_dgeca); _fbaeb != nil {
					return _fbaeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pitch"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pitch"}:
				_feeg.Pitch = NewCT_Pitch()
				if _faded := d.DecodeElement(_feeg.Pitch, &_dgeca); _faded != nil {
					return _faded
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "sig"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "sig"}:
				_feeg.Sig = NewCT_FontSig()
				if _gbfcd := d.DecodeElement(_feeg.Sig, &_dgeca); _gbfcd != nil {
					return _gbfcd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedRegular"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedRegular"}:
				_feeg.EmbedRegular = NewCT_FontRel()
				if _affa := d.DecodeElement(_feeg.EmbedRegular, &_dgeca); _affa != nil {
					return _affa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedBold"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedBold"}:
				_feeg.EmbedBold = NewCT_FontRel()
				if _ffdef := d.DecodeElement(_feeg.EmbedBold, &_dgeca); _ffdef != nil {
					return _ffdef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedItalic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedItalic"}:
				_feeg.EmbedItalic = NewCT_FontRel()
				if _edgd := d.DecodeElement(_feeg.EmbedItalic, &_dgeca); _edgd != nil {
					return _edgd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "embedBoldItalic"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "embedBoldItalic"}:
				_feeg.EmbedBoldItalic = NewCT_FontRel()
				if _ecbgg := d.DecodeElement(_feeg.EmbedBoldItalic, &_dgeca); _ecbgg != nil {
					return _ecbgg
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_Font\u0020\u0025v", _dgeca.Name)
				if _ddaa := d.Skip(); _ddaa != nil {
					return _ddaa
				}
			}
		case _d.EndElement:
			break _bacac
		case _d.CharData:
		}
	}
	return nil
}
func (_bgbga ST_ChapterSep) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bgbga.String(), start)
}
func NewFootnotes() *Footnotes {
	_ffegcg := &Footnotes{}
	_ffegcg.CT_Footnotes = *NewCT_Footnotes()
	return _ffegcg
}
func (_accfb *ST_Pitch) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fdagb, _fffcbg := d.Token()
	if _fffcbg != nil {
		return _fffcbg
	}
	if _bacdg, _agefdf := _fdagb.(_d.EndElement); _agefdf && _bacdg.Name == start.Name {
		*_accfb = 1
		return nil
	}
	if _ggadb, _dbcbc := _fdagb.(_d.CharData); !_dbcbc {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _fdagb)
	} else {
		switch string(_ggadb) {
		case "":
			*_accfb = 0
		case "fixed":
			*_accfb = 1
		case "variable":
			*_accfb = 2
		case "default":
			*_accfb = 3
		}
	}
	_fdagb, _fffcbg = d.Token()
	if _fffcbg != nil {
		return _fffcbg
	}
	if _fdaceg, _dceda := _fdagb.(_d.EndElement); _dceda && _fdaceg.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _fdagb)
}
func (_begf *CT_Column) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fbda := range start.Attr {
		if _fbda.Name.Local == "w" {
			_cde, _eefba := ParseUnionST_TwipsMeasure(_fbda.Value)
			if _eefba != nil {
				return _eefba
			}
			_begf.WAttr = &_cde
			continue
		}
		if _fbda.Name.Local == "space" {
			_bafab, _ddcf := ParseUnionST_TwipsMeasure(_fbda.Value)
			if _ddcf != nil {
				return _ddcf
			}
			_begf.SpaceAttr = &_bafab
			continue
		}
	}
	for {
		_ebgd, _fdae := d.Token()
		if _fdae != nil {
			return _b.Errorf("parsing\u0020CT_Column:\u0020\u0025s", _fdae)
		}
		if _efgef, _dgge := _ebgd.(_d.EndElement); _dgge && _efgef.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gfede ST_Border) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gfede.String(), start)
}

// Validate validates the EG_RunLevelElts and its children
func (_cggee *EG_RunLevelElts) Validate() error { return _cggee.ValidateWithPath("EG_RunLevelElts") }
func (_cfbed *ST_BrType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aeafed, _gcfcd := d.Token()
	if _gcfcd != nil {
		return _gcfcd
	}
	if _aceddf, _gafgda := _aeafed.(_d.EndElement); _gafgda && _aceddf.Name == start.Name {
		*_cfbed = 1
		return nil
	}
	if _dcfeff, _eabcd := _aeafed.(_d.CharData); !_eabcd {
		return _b.Errorf("expected\u0020char\u0020data\u002c\u0020got\u0020\u0025T", _aeafed)
	} else {
		switch string(_dcfeff) {
		case "":
			*_cfbed = 0
		case "page":
			*_cfbed = 1
		case "column":
			*_cfbed = 2
		case "textWrapping":
			*_cfbed = 3
		}
	}
	_aeafed, _gcfcd = d.Token()
	if _gcfcd != nil {
		return _gcfcd
	}
	if _gfedbe, _gbfec := _aeafed.(_d.EndElement); _gbfec && _gfedbe.Name == start.Name {
		return nil
	}
	return _b.Errorf("expected\u0020end\u0020element\u002c\u0020got \u0025v", _aeafed)
}
func (_cdbfc *CT_SimpleField) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:instr"}, Value: _b.Sprintf("\u0025v", _cdbfc.InstrAttr)})
	if _cdbfc.FldLockAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:fldLock"}, Value: _b.Sprintf("\u0025v", *_cdbfc.FldLockAttr)})
	}
	if _cdbfc.DirtyAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "w:dirty"}, Value: _b.Sprintf("\u0025v", *_cdbfc.DirtyAttr)})
	}
	e.EncodeToken(start)
	if _cdbfc.FldData != nil {
		_cbacb := _d.StartElement{Name: _d.Name{Local: "w:fldData"}}
		e.EncodeElement(_cdbfc.FldData, _cbacb)
	}
	if _cdbfc.EG_PContent != nil {
		for _, _dgadfce := range _cdbfc.EG_PContent {
			_dgadfce.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TblStylePr and its children, prefixing error messages with path
func (_efbde *CT_TblStylePr) ValidateWithPath(path string) error {
	if _efbde.TypeAttr == ST_TblStyleOverrideTypeUnset {
		return _b.Errorf("\u0025s\u002fTypeAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _ddgdf := _efbde.TypeAttr.ValidateWithPath(path + "\u002fTypeAttr"); _ddgdf != nil {
		return _ddgdf
	}
	if _efbde.PPr != nil {
		if _gagfbd := _efbde.PPr.ValidateWithPath(path + "\u002fPPr"); _gagfbd != nil {
			return _gagfbd
		}
	}
	if _efbde.RPr != nil {
		if _bcdbge := _efbde.RPr.ValidateWithPath(path + "\u002fRPr"); _bcdbge != nil {
			return _bcdbge
		}
	}
	if _efbde.TblPr != nil {
		if _aaaeb := _efbde.TblPr.ValidateWithPath(path + "\u002fTblPr"); _aaaeb != nil {
			return _aaaeb
		}
	}
	if _efbde.TrPr != nil {
		if _cbdfee := _efbde.TrPr.ValidateWithPath(path + "\u002fTrPr"); _cbdfee != nil {
			return _cbdfee
		}
	}
	if _efbde.TcPr != nil {
		if _gdgcb := _efbde.TcPr.ValidateWithPath(path + "\u002fTcPr"); _gdgcb != nil {
			return _gdgcb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TopPageBorder and its children, prefixing error messages with path
func (_bebda *CT_TopPageBorder) ValidateWithPath(path string) error {
	if _bebda.ValAttr == ST_BorderUnset {
		return _b.Errorf("\u0025s\u002fValAttr\u0020is\u0020a\u0020mandatory\u0020field", path)
	}
	if _bfdaf := _bebda.ValAttr.ValidateWithPath(path + "\u002fValAttr"); _bfdaf != nil {
		return _bfdaf
	}
	if _bebda.ColorAttr != nil {
		if _gaacg := _bebda.ColorAttr.ValidateWithPath(path + "\u002fColorAttr"); _gaacg != nil {
			return _gaacg
		}
	}
	if _fgcea := _bebda.ThemeColorAttr.ValidateWithPath(path + "\u002fThemeColorAttr"); _fgcea != nil {
		return _fgcea
	}
	if _bebda.ShadowAttr != nil {
		if _affed := _bebda.ShadowAttr.ValidateWithPath(path + "/ShadowAttr"); _affed != nil {
			return _affed
		}
	}
	if _bebda.FrameAttr != nil {
		if _egbbd := _bebda.FrameAttr.ValidateWithPath(path + "\u002fFrameAttr"); _egbbd != nil {
			return _egbbd
		}
	}
	return nil
}
func (_eecfg *CT_EdnProps) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_affd:
	for {
		_bead, _fgaea := d.Token()
		if _fgaea != nil {
			return _fgaea
		}
		switch _abbda := _bead.(type) {
		case _d.StartElement:
			switch _abbda.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "pos"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "pos"}:
				_eecfg.Pos = NewCT_EdnPos()
				if _agaa := d.DecodeElement(_eecfg.Pos, &_abbda); _agaa != nil {
					return _agaa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numFmt"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numFmt"}:
				_eecfg.NumFmt = NewCT_NumFmt()
				if _egcef := d.DecodeElement(_eecfg.NumFmt, &_abbda); _egcef != nil {
					return _egcef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numStart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numStart"}:
				_eecfg.NumStart = NewCT_DecimalNumber()
				if _afgfc := d.DecodeElement(_eecfg.NumStart, &_abbda); _afgfc != nil {
					return _afgfc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain", Local: "numRestart"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg/ooxml\u002fwordprocessingml\u002fmain", Local: "numRestart"}:
				_eecfg.NumRestart = NewCT_NumRestart()
				if _gceed := d.DecodeElement(_eecfg.NumRestart, &_abbda); _gceed != nil {
					return _gceed
				}
			default:
				_ga.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_EdnProps\u0020\u0025v", _abbda.Name)
				if _debad := d.Skip(); _debad != nil {
					return _debad
				}
			}
		case _d.EndElement:
			break _affd
		case _d.CharData:
		}
	}
	return nil
}

type ST_TextEffect byte

func (_gdcba *Ftr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:a"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:m"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fmath"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:ma"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg/schemaLibrary\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:pic"}, Value: "http:\u002f/schemas.openxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fpicture"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:r"}, Value: "http:\u002f/schemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002frelationships"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:s"}, Value: "http:/\u002fschemas\u002eopenxmlformats\u002eorg/officeDocument\u002f2006\u002fsharedTypes"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:w"}, Value: "http:\u002f\u002fschemas.openxmlformats\u002eorg\u002fwordprocessingml\u002f2006\u002fmain"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:wp"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "w:ftr"
	return _gdcba.CT_HdrFtr.MarshalXML(e, start)
}
func NewWdCT_GraphicFrame() *WdCT_GraphicFrame {
	_ddgcdg := &WdCT_GraphicFrame{}
	_ddgcdg.CNvPr = _eb.NewCT_NonVisualDrawingProps()
	_ddgcdg.CNvFrPr = _eb.NewCT_NonVisualGraphicFrameProperties()
	_ddgcdg.Xfrm = _eb.NewCT_Transform2D()
	_ddgcdg.Graphic = _eb.NewGraphic()
	return _ddgcdg
}

type Footnotes struct{ CT_Footnotes }

func NewRecipients() *Recipients {
	_eeacd := &Recipients{}
	_eeacd.CT_Recipients = *NewCT_Recipients()
	return _eeacd
}
func init() {
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_EffectExtent", NewWdCT_EffectExtent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_Inline", NewWdCT_Inline)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WrapPath", NewWdCT_WrapPath)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WrapNone", NewWdCT_WrapNone)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WrapSquare", NewWdCT_WrapSquare)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WrapTight", NewWdCT_WrapTight)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WrapThrough", NewWdCT_WrapThrough)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WrapTopBottom", NewWdCT_WrapTopBottom)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_PosH", NewWdCT_PosH)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_PosV", NewWdCT_PosV)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_Anchor", NewWdCT_Anchor)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_TxbxContent", NewWdCT_TxbxContent)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_TextboxInfo", NewWdCT_TextboxInfo)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_LinkedTextboxInformation", NewWdCT_LinkedTextboxInformation)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WordprocessingShape", NewWdCT_WordprocessingShape)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_GraphicFrame", NewWdCT_GraphicFrame)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WordprocessingContentPartNonVisual", NewWdCT_WordprocessingContentPartNonVisual)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WordprocessingContentPart", NewWdCT_WordprocessingContentPart)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WordprocessingGroup", NewWdCT_WordprocessingGroup)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "CT_WordprocessingCanvas", NewWdCT_WordprocessingCanvas)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "wpc", NewWdWpc)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "wgp", NewWdWgp)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "wsp", NewWdWsp)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "inline", NewWdInline)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "anchor", NewWdAnchor)
	_ga.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fdrawingml\u002f2006\u002fwordprocessingDrawing", "EG_WrapType", NewWdEG_WrapType)
	_ga.RegisterConstructor("http:/\u002fschemas\u002emicrosoft\u002ecom\u002foffice\u002fword\u002f2010\u002fwordprocessingShape", "wsp", NewWdWsp)
}
