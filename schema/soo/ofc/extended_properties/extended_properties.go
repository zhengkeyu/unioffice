//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package extended_properties

import (
	_d "encoding/xml"
	_c "gitee.com/greatmusicians/unioffice"
	_e "gitee.com/greatmusicians/unioffice/schema/soo/ofc/docPropsVTypes"
)

func NewCT_VectorVariant() *CT_VectorVariant {
	_ac := &CT_VectorVariant{}
	_ac.Vector = _e.NewVector()
	return _ac
}
func NewCT_VectorLpstr() *CT_VectorLpstr {
	_cgb := &CT_VectorLpstr{}
	_cgb.Vector = _e.NewVector()
	return _cgb
}
func (_bde *CT_VectorLpstr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_fc := _d.StartElement{Name: _d.Name{Local: "vt:vector"}}
	e.EncodeElement(_bde.Vector, _fc)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_abdd *CT_Properties) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ggf:
	for {
		_baf, _bd := d.Token()
		if _bd != nil {
			return _bd
		}
		switch _bgg := _baf.(type) {
		case _d.StartElement:
			switch _bgg.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Template"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Template"}:
				_abdd.Template = new(string)
				if _bag := d.DecodeElement(_abdd.Template, &_bgg); _bag != nil {
					return _bag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Manager"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Manager"}:
				_abdd.Manager = new(string)
				if _cdb := d.DecodeElement(_abdd.Manager, &_bgg); _cdb != nil {
					return _cdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Company"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Company"}:
				_abdd.Company = new(string)
				if _gb := d.DecodeElement(_abdd.Company, &_bgg); _gb != nil {
					return _gb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Pages"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Pages"}:
				_abdd.Pages = new(int32)
				if _dff := d.DecodeElement(_abdd.Pages, &_bgg); _dff != nil {
					return _dff
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Words"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Words"}:
				_abdd.Words = new(int32)
				if _dg := d.DecodeElement(_abdd.Words, &_bgg); _dg != nil {
					return _dg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Characters"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Characters"}:
				_abdd.Characters = new(int32)
				if _db := d.DecodeElement(_abdd.Characters, &_bgg); _db != nil {
					return _db
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "PresentationFormat"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "PresentationFormat"}:
				_abdd.PresentationFormat = new(string)
				if _caf := d.DecodeElement(_abdd.PresentationFormat, &_bgg); _caf != nil {
					return _caf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Lines"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Lines"}:
				_abdd.Lines = new(int32)
				if _fb := d.DecodeElement(_abdd.Lines, &_bgg); _fb != nil {
					return _fb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Paragraphs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Paragraphs"}:
				_abdd.Paragraphs = new(int32)
				if _fg := d.DecodeElement(_abdd.Paragraphs, &_bgg); _fg != nil {
					return _fg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Slides"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Slides"}:
				_abdd.Slides = new(int32)
				if _ag := d.DecodeElement(_abdd.Slides, &_bgg); _ag != nil {
					return _ag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Notes"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Notes"}:
				_abdd.Notes = new(int32)
				if _cdbe := d.DecodeElement(_abdd.Notes, &_bgg); _cdbe != nil {
					return _cdbe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "TotalTime"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "TotalTime"}:
				_abdd.TotalTime = new(int32)
				if _bga := d.DecodeElement(_abdd.TotalTime, &_bgg); _bga != nil {
					return _bga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HiddenSlides"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HiddenSlides"}:
				_abdd.HiddenSlides = new(int32)
				if _aa := d.DecodeElement(_abdd.HiddenSlides, &_bgg); _aa != nil {
					return _aa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "MMClips"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "MMClips"}:
				_abdd.MMClips = new(int32)
				if _bdb := d.DecodeElement(_abdd.MMClips, &_bgg); _bdb != nil {
					return _bdb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "ScaleCrop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "ScaleCrop"}:
				_abdd.ScaleCrop = new(bool)
				if _beb := d.DecodeElement(_abdd.ScaleCrop, &_bgg); _beb != nil {
					return _beb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HeadingPairs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HeadingPairs"}:
				_abdd.HeadingPairs = NewCT_VectorVariant()
				if _gbb := d.DecodeElement(_abdd.HeadingPairs, &_bgg); _gbb != nil {
					return _gbb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "TitlesOfParts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "TitlesOfParts"}:
				_abdd.TitlesOfParts = NewCT_VectorLpstr()
				if _ea := d.DecodeElement(_abdd.TitlesOfParts, &_bgg); _ea != nil {
					return _ea
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "LinksUpToDate"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "LinksUpToDate"}:
				_abdd.LinksUpToDate = new(bool)
				if _eb := d.DecodeElement(_abdd.LinksUpToDate, &_bgg); _eb != nil {
					return _eb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "CharactersWithSpaces"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "CharactersWithSpaces"}:
				_abdd.CharactersWithSpaces = new(int32)
				if _abg := d.DecodeElement(_abdd.CharactersWithSpaces, &_bgg); _abg != nil {
					return _abg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "SharedDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "SharedDoc"}:
				_abdd.SharedDoc = new(bool)
				if _ed := d.DecodeElement(_abdd.SharedDoc, &_bgg); _ed != nil {
					return _ed
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HyperlinkBase"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HyperlinkBase"}:
				_abdd.HyperlinkBase = new(string)
				if _bgae := d.DecodeElement(_abdd.HyperlinkBase, &_bgg); _bgae != nil {
					return _bgae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HLinks"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HLinks"}:
				_abdd.HLinks = NewCT_VectorVariant()
				if _dbc := d.DecodeElement(_abdd.HLinks, &_bgg); _dbc != nil {
					return _dbc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HyperlinksChanged"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HyperlinksChanged"}:
				_abdd.HyperlinksChanged = new(bool)
				if _ebf := d.DecodeElement(_abdd.HyperlinksChanged, &_bgg); _ebf != nil {
					return _ebf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "DigSig"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "DigSig"}:
				_abdd.DigSig = NewCT_DigSigBlob()
				if _gd := d.DecodeElement(_abdd.DigSig, &_bgg); _gd != nil {
					return _gd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Application"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Application"}:
				_abdd.Application = new(string)
				if _fbf := d.DecodeElement(_abdd.Application, &_bgg); _fbf != nil {
					return _fbf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "AppVersion"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "AppVersion"}:
				_abdd.AppVersion = new(string)
				if _egf := d.DecodeElement(_abdd.AppVersion, &_bgg); _egf != nil {
					return _egf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "DocSecurity"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "DocSecurity"}:
				_abdd.DocSecurity = new(int32)
				if _aaf := d.DecodeElement(_abdd.DocSecurity, &_bgg); _aaf != nil {
					return _aaf
				}
			default:
				_c.Log("skipping unsupported element\u0020on\u0020CT_Properties \u0025v", _bgg.Name)
				if _aeb := d.Skip(); _aeb != nil {
					return _aeb
				}
			}
		case _d.EndElement:
			break _ggf
		case _d.CharData:
		}
	}
	return nil
}
func (_ba *CT_Properties) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ba.Template != nil {
		_ca := _d.StartElement{Name: _d.Name{Local: "Template"}}
		_c.AddPreserveSpaceAttr(&_ca, *_ba.Template)
		e.EncodeElement(_ba.Template, _ca)
	}
	if _ba.Manager != nil {
		_ad := _d.StartElement{Name: _d.Name{Local: "Manager"}}
		_c.AddPreserveSpaceAttr(&_ad, *_ba.Manager)
		e.EncodeElement(_ba.Manager, _ad)
	}
	if _ba.Company != nil {
		_dd := _d.StartElement{Name: _d.Name{Local: "Company"}}
		_c.AddPreserveSpaceAttr(&_dd, *_ba.Company)
		e.EncodeElement(_ba.Company, _dd)
	}
	if _ba.Pages != nil {
		_ge := _d.StartElement{Name: _d.Name{Local: "Pages"}}
		e.EncodeElement(_ba.Pages, _ge)
	}
	if _ba.Words != nil {
		_da := _d.StartElement{Name: _d.Name{Local: "Words"}}
		e.EncodeElement(_ba.Words, _da)
	}
	if _ba.Characters != nil {
		_eeg := _d.StartElement{Name: _d.Name{Local: "Characters"}}
		e.EncodeElement(_ba.Characters, _eeg)
	}
	if _ba.PresentationFormat != nil {
		_ga := _d.StartElement{Name: _d.Name{Local: "PresentationFormat"}}
		_c.AddPreserveSpaceAttr(&_ga, *_ba.PresentationFormat)
		e.EncodeElement(_ba.PresentationFormat, _ga)
	}
	if _ba.Lines != nil {
		_fa := _d.StartElement{Name: _d.Name{Local: "Lines"}}
		e.EncodeElement(_ba.Lines, _fa)
	}
	if _ba.Paragraphs != nil {
		_be := _d.StartElement{Name: _d.Name{Local: "Paragraphs"}}
		e.EncodeElement(_ba.Paragraphs, _be)
	}
	if _ba.Slides != nil {
		_eg := _d.StartElement{Name: _d.Name{Local: "Slides"}}
		e.EncodeElement(_ba.Slides, _eg)
	}
	if _ba.Notes != nil {
		_ada := _d.StartElement{Name: _d.Name{Local: "Notes"}}
		e.EncodeElement(_ba.Notes, _ada)
	}
	if _ba.TotalTime != nil {
		_abb := _d.StartElement{Name: _d.Name{Local: "TotalTime"}}
		e.EncodeElement(_ba.TotalTime, _abb)
	}
	if _ba.HiddenSlides != nil {
		_de := _d.StartElement{Name: _d.Name{Local: "HiddenSlides"}}
		e.EncodeElement(_ba.HiddenSlides, _de)
	}
	if _ba.MMClips != nil {
		_dc := _d.StartElement{Name: _d.Name{Local: "MMClips"}}
		e.EncodeElement(_ba.MMClips, _dc)
	}
	if _ba.ScaleCrop != nil {
		_adb := _d.StartElement{Name: _d.Name{Local: "ScaleCrop"}}
		e.EncodeElement(_ba.ScaleCrop, _adb)
	}
	if _ba.HeadingPairs != nil {
		_cb := _d.StartElement{Name: _d.Name{Local: "HeadingPairs"}}
		e.EncodeElement(_ba.HeadingPairs, _cb)
	}
	if _ba.TitlesOfParts != nil {
		_ae := _d.StartElement{Name: _d.Name{Local: "TitlesOfParts"}}
		e.EncodeElement(_ba.TitlesOfParts, _ae)
	}
	if _ba.LinksUpToDate != nil {
		_cbe := _d.StartElement{Name: _d.Name{Local: "LinksUpToDate"}}
		e.EncodeElement(_ba.LinksUpToDate, _cbe)
	}
	if _ba.CharactersWithSpaces != nil {
		_fd := _d.StartElement{Name: _d.Name{Local: "CharactersWithSpaces"}}
		e.EncodeElement(_ba.CharactersWithSpaces, _fd)
	}
	if _ba.SharedDoc != nil {
		_def := _d.StartElement{Name: _d.Name{Local: "SharedDoc"}}
		e.EncodeElement(_ba.SharedDoc, _def)
	}
	if _ba.HyperlinkBase != nil {
		_dfe := _d.StartElement{Name: _d.Name{Local: "HyperlinkBase"}}
		_c.AddPreserveSpaceAttr(&_dfe, *_ba.HyperlinkBase)
		e.EncodeElement(_ba.HyperlinkBase, _dfe)
	}
	if _ba.HLinks != nil {
		_bg := _d.StartElement{Name: _d.Name{Local: "HLinks"}}
		e.EncodeElement(_ba.HLinks, _bg)
	}
	if _ba.HyperlinksChanged != nil {
		_beg := _d.StartElement{Name: _d.Name{Local: "HyperlinksChanged"}}
		e.EncodeElement(_ba.HyperlinksChanged, _beg)
	}
	if _ba.DigSig != nil {
		_bc := _d.StartElement{Name: _d.Name{Local: "DigSig"}}
		e.EncodeElement(_ba.DigSig, _bc)
	}
	if _ba.Application != nil {
		_ege := _d.StartElement{Name: _d.Name{Local: "Application"}}
		_c.AddPreserveSpaceAttr(&_ege, *_ba.Application)
		e.EncodeElement(_ba.Application, _ege)
	}
	if _ba.AppVersion != nil {
		_gcf := _d.StartElement{Name: _d.Name{Local: "AppVersion"}}
		_c.AddPreserveSpaceAttr(&_gcf, *_ba.AppVersion)
		e.EncodeElement(_ba.AppVersion, _gcf)
	}
	if _ba.DocSecurity != nil {
		_abd := _d.StartElement{Name: _d.Name{Local: "DocSecurity"}}
		e.EncodeElement(_ba.DocSecurity, _abd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type Properties struct{ CT_Properties }

func NewCT_Properties() *CT_Properties { _eeb := &CT_Properties{}; return _eeb }

// ValidateWithPath validates the CT_VectorVariant and its children, prefixing error messages with path
func (_ecg *CT_VectorVariant) ValidateWithPath(path string) error {
	if _eegg := _ecg.Vector.ValidateWithPath(path + "\u002fVector"); _eegg != nil {
		return _eegg
	}
	return nil
}
func (_gcc *Properties) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gcc.CT_Properties = *NewCT_Properties()
_ceb:
	for {
		_bab, _gf := d.Token()
		if _gf != nil {
			return _gf
		}
		switch _daf := _bab.(type) {
		case _d.StartElement:
			switch _daf.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Template"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Template"}:
				_gcc.Template = new(string)
				if _af := d.DecodeElement(_gcc.Template, &_daf); _af != nil {
					return _af
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Manager"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Manager"}:
				_gcc.Manager = new(string)
				if _eee := d.DecodeElement(_gcc.Manager, &_daf); _eee != nil {
					return _eee
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Company"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Company"}:
				_gcc.Company = new(string)
				if _aba := d.DecodeElement(_gcc.Company, &_daf); _aba != nil {
					return _aba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Pages"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Pages"}:
				_gcc.Pages = new(int32)
				if _cab := d.DecodeElement(_gcc.Pages, &_daf); _cab != nil {
					return _cab
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Words"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Words"}:
				_gcc.Words = new(int32)
				if _abc := d.DecodeElement(_gcc.Words, &_daf); _abc != nil {
					return _abc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Characters"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Characters"}:
				_gcc.Characters = new(int32)
				if _deb := d.DecodeElement(_gcc.Characters, &_daf); _deb != nil {
					return _deb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "PresentationFormat"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "PresentationFormat"}:
				_gcc.PresentationFormat = new(string)
				if _aga := d.DecodeElement(_gcc.PresentationFormat, &_daf); _aga != nil {
					return _aga
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Lines"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Lines"}:
				_gcc.Lines = new(int32)
				if _ccf := d.DecodeElement(_gcc.Lines, &_daf); _ccf != nil {
					return _ccf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Paragraphs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Paragraphs"}:
				_gcc.Paragraphs = new(int32)
				if _dcc := d.DecodeElement(_gcc.Paragraphs, &_daf); _dcc != nil {
					return _dcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Slides"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Slides"}:
				_gcc.Slides = new(int32)
				if _bcc := d.DecodeElement(_gcc.Slides, &_daf); _bcc != nil {
					return _bcc
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Notes"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Notes"}:
				_gcc.Notes = new(int32)
				if _bb := d.DecodeElement(_gcc.Notes, &_daf); _bb != nil {
					return _bb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "TotalTime"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "TotalTime"}:
				_gcc.TotalTime = new(int32)
				if _adf := d.DecodeElement(_gcc.TotalTime, &_daf); _adf != nil {
					return _adf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HiddenSlides"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HiddenSlides"}:
				_gcc.HiddenSlides = new(int32)
				if _cdf := d.DecodeElement(_gcc.HiddenSlides, &_daf); _cdf != nil {
					return _cdf
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "MMClips"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "MMClips"}:
				_gcc.MMClips = new(int32)
				if _faa := d.DecodeElement(_gcc.MMClips, &_daf); _faa != nil {
					return _faa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "ScaleCrop"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "ScaleCrop"}:
				_gcc.ScaleCrop = new(bool)
				if _cef := d.DecodeElement(_gcc.ScaleCrop, &_daf); _cef != nil {
					return _cef
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HeadingPairs"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HeadingPairs"}:
				_gcc.HeadingPairs = NewCT_VectorVariant()
				if _bba := d.DecodeElement(_gcc.HeadingPairs, &_daf); _bba != nil {
					return _bba
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "TitlesOfParts"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "TitlesOfParts"}:
				_gcc.TitlesOfParts = NewCT_VectorLpstr()
				if _gag := d.DecodeElement(_gcc.TitlesOfParts, &_daf); _gag != nil {
					return _gag
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "LinksUpToDate"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "LinksUpToDate"}:
				_gcc.LinksUpToDate = new(bool)
				if _fgg := d.DecodeElement(_gcc.LinksUpToDate, &_daf); _fgg != nil {
					return _fgg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "CharactersWithSpaces"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "CharactersWithSpaces"}:
				_gcc.CharactersWithSpaces = new(int32)
				if _cfa := d.DecodeElement(_gcc.CharactersWithSpaces, &_daf); _cfa != nil {
					return _cfa
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "SharedDoc"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "SharedDoc"}:
				_gcc.SharedDoc = new(bool)
				if _fae := d.DecodeElement(_gcc.SharedDoc, &_daf); _fae != nil {
					return _fae
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HyperlinkBase"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HyperlinkBase"}:
				_gcc.HyperlinkBase = new(string)
				if _faeb := d.DecodeElement(_gcc.HyperlinkBase, &_daf); _faeb != nil {
					return _faeb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HLinks"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HLinks"}:
				_gcc.HLinks = NewCT_VectorVariant()
				if _dac := d.DecodeElement(_gcc.HLinks, &_daf); _dac != nil {
					return _dac
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "HyperlinksChanged"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "HyperlinksChanged"}:
				_gcc.HyperlinksChanged = new(bool)
				if _gfe := d.DecodeElement(_gcc.HyperlinksChanged, &_daf); _gfe != nil {
					return _gfe
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "DigSig"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "DigSig"}:
				_gcc.DigSig = NewCT_DigSigBlob()
				if _ebb := d.DecodeElement(_gcc.DigSig, &_daf); _ebb != nil {
					return _ebb
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "Application"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "Application"}:
				_gcc.Application = new(string)
				if _gcg := d.DecodeElement(_gcc.Application, &_daf); _gcg != nil {
					return _gcg
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "AppVersion"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "AppVersion"}:
				_gcc.AppVersion = new(string)
				if _efd := d.DecodeElement(_gcc.AppVersion, &_daf); _efd != nil {
					return _efd
				}
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", Local: "DocSecurity"}, _d.Name{Space: "http:\u002f\u002fpurl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fextendedProperties", Local: "DocSecurity"}:
				_gcc.DocSecurity = new(int32)
				if _adaf := d.DecodeElement(_gcc.DocSecurity, &_daf); _adaf != nil {
					return _adaf
				}
			default:
				_c.Log("skipping unsupported\u0020element\u0020on\u0020Properties\u0020\u0025v", _daf.Name)
				if _gfc := d.Skip(); _gfc != nil {
					return _gfc
				}
			}
		case _d.EndElement:
			break _ceb
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_DigSigBlob() *CT_DigSigBlob { _a := &CT_DigSigBlob{}; return _a }

type CT_Properties struct {

	// Name of Document Template
	Template *string

	// Name of Manager
	Manager *string

	// Name of Company
	Company *string

	// Total Number of Pages
	Pages *int32

	// Word Count
	Words *int32

	// Total Number of Characters
	Characters *int32

	// Intended Format of Presentation
	PresentationFormat *string

	// Number of Lines
	Lines *int32

	// Total Number of Paragraphs
	Paragraphs *int32

	// Slides Metadata Element
	Slides *int32

	// Number of Slides Containing Notes
	Notes *int32

	// Total Edit Time Metadata Element
	TotalTime *int32

	// Number of Hidden Slides
	HiddenSlides *int32

	// Total Number of Multimedia Clips
	MMClips *int32

	// Thumbnail Display Mode
	ScaleCrop *bool

	// Heading Pairs
	HeadingPairs *CT_VectorVariant

	// Part Titles
	TitlesOfParts *CT_VectorLpstr

	// Links Up-to-Date
	LinksUpToDate *bool

	// Number of Characters (With Spaces)
	CharactersWithSpaces *int32

	// Shared Document
	SharedDoc *bool

	// Relative Hyperlink Base
	HyperlinkBase *string

	// Hyperlink List
	HLinks *CT_VectorVariant

	// Hyperlinks Changed
	HyperlinksChanged *bool

	// Digital Signature
	DigSig *CT_DigSigBlob

	// Application Name
	Application *string

	// Application Version
	AppVersion *string

	// Document Security
	DocSecurity *int32
}

func (_bf *Properties) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:vt"}, Value: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fdocPropsVTypes"})
//	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "xmlns:xxml"}, Value: "http:\u002f\u002fwww\u002ew3.org/XML\u002f1998/namespace"})
	start.Name.Local = "Properties"
	return _bf.CT_Properties.MarshalXML(e, start)
}

// ValidateWithPath validates the CT_DigSigBlob and its children, prefixing error messages with path
func (_ee *CT_DigSigBlob) ValidateWithPath(path string) error { return nil }
func NewProperties() *Properties {
	_fga := &Properties{}
	_fga.CT_Properties = *NewCT_Properties()
	return _fga
}

// Validate validates the Properties and its children
func (_cga *Properties) Validate() error { return _cga.ValidateWithPath("Properties") }

// Validate validates the CT_VectorVariant and its children
func (_dgf *CT_VectorVariant) Validate() error { return _dgf.ValidateWithPath("CT_VectorVariant") }

type CT_VectorLpstr struct{ Vector *_e.Vector }
type CT_VectorVariant struct{ Vector *_e.Vector }

func (_dbf *CT_VectorVariant) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dbf.Vector = _e.NewVector()
_dfea:
	for {
		_ec, _aag := d.Token()
		if _aag != nil {
			return _aag
		}
		switch _fcb := _ec.(type) {
		case _d.StartElement:
			switch _fcb.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fdocPropsVTypes", Local: "vector"}, _d.Name{Space: "http:\u002f/purl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fdocPropsVTypes", Local: "vector"}:
				if _fcd := d.DecodeElement(_dbf.Vector, &_fcb); _fcd != nil {
					return _fcd
				}
			default:
				_c.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_VectorVariant\u0020\u0025v", _fcb.Name)
				if _cda := d.Skip(); _cda != nil {
					return _cda
				}
			}
		case _d.EndElement:
			break _dfea
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Properties and its children, prefixing error messages with path
func (_gdc *CT_Properties) ValidateWithPath(path string) error {
	if _gdc.HeadingPairs != nil {
		if _dce := _gdc.HeadingPairs.ValidateWithPath(path + "\u002fHeadingPairs"); _dce != nil {
			return _dce
		}
	}
	if _gdc.TitlesOfParts != nil {
		if _cg := _gdc.TitlesOfParts.ValidateWithPath(path + "\u002fTitlesOfParts"); _cg != nil {
			return _cg
		}
	}
	if _gdc.HLinks != nil {
		if _ffd := _gdc.HLinks.ValidateWithPath(path + "\u002fHLinks"); _ffd != nil {
			return _ffd
		}
	}
	if _gdc.DigSig != nil {
		if _aab := _gdc.DigSig.ValidateWithPath(path + "\u002fDigSig"); _aab != nil {
			return _aab
		}
	}
	return nil
}
func (_edb *CT_VectorVariant) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_ef := _d.StartElement{Name: _d.Name{Local: "vt:vector"}}
	e.EncodeElement(_edb.Vector, _ef)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ff *CT_DigSigBlob) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_g := _d.StartElement{Name: _d.Name{Local: "vt:blob"}}
	_c.AddPreserveSpaceAttr(&_g, _ff.Blob)
	e.EncodeElement(_ff.Blob, _g)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the Properties and its children, prefixing error messages with path
func (_ggb *Properties) ValidateWithPath(path string) error {
	if _bgb := _ggb.CT_Properties.ValidateWithPath(path); _bgb != nil {
		return _bgb
	}
	return nil
}

// Validate validates the CT_DigSigBlob and its children
func (_cc *CT_DigSigBlob) Validate() error { return _cc.ValidateWithPath("CT_DigSigBlob") }

// ValidateWithPath validates the CT_VectorLpstr and its children, prefixing error messages with path
func (_eac *CT_VectorLpstr) ValidateWithPath(path string) error {
	if _baa := _eac.Vector.ValidateWithPath(path + "\u002fVector"); _baa != nil {
		return _baa
	}
	return nil
}
func (_ab *CT_DigSigBlob) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_cf:
	for {
		_b, _gg := d.Token()
		if _gg != nil {
			return _gg
		}
		switch _df := _b.(type) {
		case _d.StartElement:
			switch _df.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fdocPropsVTypes", Local: "blob"}, _d.Name{Space: "http:\u002f/purl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fdocPropsVTypes", Local: "blob"}:
				if _gc := d.DecodeElement(&_ab.Blob, &_df); _gc != nil {
					return _gc
				}
			default:
				_c.Log("skipping unsupported element\u0020on\u0020CT_DigSigBlob \u0025v", _df.Name)
				if _cd := d.Skip(); _cd != nil {
					return _cd
				}
			}
		case _d.EndElement:
			break _cf
		case _d.CharData:
		}
	}
	return nil
}
func (_cfg *CT_VectorLpstr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cfg.Vector = _e.NewVector()
_aec:
	for {
		_fcf, _eag := d.Token()
		if _eag != nil {
			return _eag
		}
		switch _gde := _fcf.(type) {
		case _d.StartElement:
			switch _gde.Name {
			case _d.Name{Space: "http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fdocPropsVTypes", Local: "vector"}, _d.Name{Space: "http:\u002f/purl\u002eoclc\u002eorg\u002fooxml\u002fofficeDocument\u002fdocPropsVTypes", Local: "vector"}:
				if _defc := d.DecodeElement(_cfg.Vector, &_gde); _defc != nil {
					return _defc
				}
			default:
				_c.Log("skipping\u0020unsupported\u0020element\u0020on\u0020CT_VectorLpstr\u0020\u0025v", _gde.Name)
				if _ce := d.Skip(); _ce != nil {
					return _ce
				}
			}
		case _d.EndElement:
			break _aec
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Properties and its children
func (_abe *CT_Properties) Validate() error { return _abe.ValidateWithPath("CT_Properties") }

type CT_DigSigBlob struct{ Blob string }

// Validate validates the CT_VectorLpstr and its children
func (_cdd *CT_VectorLpstr) Validate() error { return _cdd.ValidateWithPath("CT_VectorLpstr") }
func init() {
	_c.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", "CT_Properties", NewCT_Properties)
	_c.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", "CT_VectorVariant", NewCT_VectorVariant)
	_c.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", "CT_VectorLpstr", NewCT_VectorLpstr)
	_c.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", "CT_DigSigBlob", NewCT_DigSigBlob)
	_c.RegisterConstructor("http:\u002f\u002fschemas\u002eopenxmlformats\u002eorg\u002fofficeDocument\u002f2006\u002fextended\u002dproperties", "Properties", NewProperties)
}
